
ModuleHub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  00004b7a  00004c0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  008001b4  008001b4  00004d62  2**0
                  ALLOC
  3 .stab         00006bdc  00000000  00000000  00004d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002dca  00000000  00000000  0000b940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e70a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f1  00000000  00000000  0000e8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228e  00000000  00000000  0000ea9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ca  00000000  00000000  00010d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d4  00000000  00000000  00011ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000130c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c9  00000000  00000000  00013288  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ea  00000000  00000000  00013551  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013e3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__vector_1>
       8:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__vector_2>
       c:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__vector_10>
      2c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 24 	call	0x499a	; 0x499a <main>
      8a:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 25 	jmp	0x4b08	; 0x4b08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 25 	jmp	0x4b40	; 0x4b40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 25 	jmp	0x4b20	; 0x4b20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 25 	jmp	0x4b58	; 0x4b58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 25 	jmp	0x4b20	; 0x4b20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 25 	jmp	0x4b58	; 0x4b58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 25 	jmp	0x4b08	; 0x4b08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 25 	jmp	0x4b40	; 0x4b40 <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 25 	jmp	0x4b20	; 0x4b20 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ac 25 	jmp	0x4b58	; 0x4b58 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 90 25 	jmp	0x4b20	; 0x4b20 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ac 25 	jmp	0x4b58	; 0x4b58 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 90 25 	jmp	0x4b20	; 0x4b20 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ac 25 	jmp	0x4b58	; 0x4b58 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 90 25 	jmp	0x4b20	; 0x4b20 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 ac 25 	jmp	0x4b58	; 0x4b58 <__epilogue_restores__+0x18>

000007b2 <__fixsfsi>:
     7b2:	ac e0       	ldi	r26, 0x0C	; 12
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 94 25 	jmp	0x4b28	; 0x4b28 <__prologue_saves__+0x20>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	be 01       	movw	r22, r28
     7cc:	6b 5f       	subi	r22, 0xFB	; 251
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f1       	breq	.+88     	; 0x832 <__fixsfsi+0x80>
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	50 f1       	brcs	.+84     	; 0x832 <__fixsfsi+0x80>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	21 f4       	brne	.+8      	; 0x7ea <__fixsfsi+0x38>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	88 23       	and	r24, r24
     7e6:	51 f1       	breq	.+84     	; 0x83c <__fixsfsi+0x8a>
     7e8:	2e c0       	rjmp	.+92     	; 0x846 <__fixsfsi+0x94>
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	38 85       	ldd	r19, Y+8	; 0x08
     7ee:	37 fd       	sbrc	r19, 7
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <__fixsfsi+0x80>
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	2f 31       	cpi	r18, 0x1F	; 31
     7f6:	31 05       	cpc	r19, r1
     7f8:	1c f0       	brlt	.+6      	; 0x800 <__fixsfsi+0x4e>
     7fa:	66 23       	and	r22, r22
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__fixsfsi+0x8a>
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <__fixsfsi+0x94>
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	29 85       	ldd	r18, Y+9	; 0x09
     80a:	3a 85       	ldd	r19, Y+10	; 0x0a
     80c:	4b 85       	ldd	r20, Y+11	; 0x0b
     80e:	5c 85       	ldd	r21, Y+12	; 0x0c
     810:	04 c0       	rjmp	.+8      	; 0x81a <__fixsfsi+0x68>
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	37 95       	ror	r19
     818:	27 95       	ror	r18
     81a:	8a 95       	dec	r24
     81c:	d2 f7       	brpl	.-12     	; 0x812 <__fixsfsi+0x60>
     81e:	66 23       	and	r22, r22
     820:	b1 f0       	breq	.+44     	; 0x84e <__fixsfsi+0x9c>
     822:	50 95       	com	r21
     824:	40 95       	com	r20
     826:	30 95       	com	r19
     828:	21 95       	neg	r18
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	0e c0       	rjmp	.+28     	; 0x84e <__fixsfsi+0x9c>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__fixsfsi+0x9c>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f ef       	ldi	r20, 0xFF	; 255
     842:	5f e7       	ldi	r21, 0x7F	; 127
     844:	04 c0       	rjmp	.+8      	; 0x84e <__fixsfsi+0x9c>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e8       	ldi	r21, 0x80	; 128
     84e:	b9 01       	movw	r22, r18
     850:	ca 01       	movw	r24, r20
     852:	2c 96       	adiw	r28, 0x0c	; 12
     854:	e2 e0       	ldi	r30, 0x02	; 2
     856:	0c 94 b0 25 	jmp	0x4b60	; 0x4b60 <__epilogue_restores__+0x20>

0000085a <__floatunsisf>:
     85a:	a8 e0       	ldi	r26, 0x08	; 8
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e3 e3       	ldi	r30, 0x33	; 51
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	0c 94 8c 25 	jmp	0x4b18	; 0x4b18 <__prologue_saves__+0x10>
     866:	7b 01       	movw	r14, r22
     868:	8c 01       	movw	r16, r24
     86a:	61 15       	cp	r22, r1
     86c:	71 05       	cpc	r23, r1
     86e:	81 05       	cpc	r24, r1
     870:	91 05       	cpc	r25, r1
     872:	19 f4       	brne	.+6      	; 0x87a <__stack+0x1b>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	60 c0       	rjmp	.+192    	; 0x93a <__stack+0xdb>
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	c8 2e       	mov	r12, r24
     882:	d1 2c       	mov	r13, r1
     884:	dc 82       	std	Y+4, r13	; 0x04
     886:	cb 82       	std	Y+3, r12	; 0x03
     888:	ed 82       	std	Y+5, r14	; 0x05
     88a:	fe 82       	std	Y+6, r15	; 0x06
     88c:	0f 83       	std	Y+7, r16	; 0x07
     88e:	18 87       	std	Y+8, r17	; 0x08
     890:	c8 01       	movw	r24, r16
     892:	b7 01       	movw	r22, r14
     894:	0e 94 a6 04 	call	0x94c	; 0x94c <__clzsi2>
     898:	fc 01       	movw	r30, r24
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f7 ff       	sbrs	r31, 7
     89e:	3b c0       	rjmp	.+118    	; 0x916 <__stack+0xb7>
     8a0:	22 27       	eor	r18, r18
     8a2:	33 27       	eor	r19, r19
     8a4:	2e 1b       	sub	r18, r30
     8a6:	3f 0b       	sbc	r19, r31
     8a8:	57 01       	movw	r10, r14
     8aa:	68 01       	movw	r12, r16
     8ac:	02 2e       	mov	r0, r18
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	d6 94       	lsr	r13
     8b2:	c7 94       	ror	r12
     8b4:	b7 94       	ror	r11
     8b6:	a7 94       	ror	r10
     8b8:	0a 94       	dec	r0
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <__stack+0x51>
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	2a 95       	dec	r18
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__stack+0x6f>
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	a1 09       	sbc	r26, r1
     8de:	b1 09       	sbc	r27, r1
     8e0:	8e 21       	and	r24, r14
     8e2:	9f 21       	and	r25, r15
     8e4:	a0 23       	and	r26, r16
     8e6:	b1 23       	and	r27, r17
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	4a 29       	or	r20, r10
     8fa:	5b 29       	or	r21, r11
     8fc:	6c 29       	or	r22, r12
     8fe:	7d 29       	or	r23, r13
     900:	4d 83       	std	Y+5, r20	; 0x05
     902:	5e 83       	std	Y+6, r21	; 0x06
     904:	6f 83       	std	Y+7, r22	; 0x07
     906:	78 87       	std	Y+8, r23	; 0x08
     908:	8e e1       	ldi	r24, 0x1E	; 30
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	8e 1b       	sub	r24, r30
     90e:	9f 0b       	sbc	r25, r31
     910:	9c 83       	std	Y+4, r25	; 0x04
     912:	8b 83       	std	Y+3, r24	; 0x03
     914:	12 c0       	rjmp	.+36     	; 0x93a <__stack+0xdb>
     916:	30 97       	sbiw	r30, 0x00	; 0
     918:	81 f0       	breq	.+32     	; 0x93a <__stack+0xdb>
     91a:	0e 2e       	mov	r0, r30
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0xc7>
     91e:	ee 0c       	add	r14, r14
     920:	ff 1c       	adc	r15, r15
     922:	00 1f       	adc	r16, r16
     924:	11 1f       	adc	r17, r17
     926:	0a 94       	dec	r0
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0xbf>
     92a:	ed 82       	std	Y+5, r14	; 0x05
     92c:	fe 82       	std	Y+6, r15	; 0x06
     92e:	0f 83       	std	Y+7, r16	; 0x07
     930:	18 87       	std	Y+8, r17	; 0x08
     932:	ce 1a       	sub	r12, r30
     934:	df 0a       	sbc	r13, r31
     936:	dc 82       	std	Y+4, r13	; 0x04
     938:	cb 82       	std	Y+3, r12	; 0x03
     93a:	1a 82       	std	Y+2, r1	; 0x02
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     944:	28 96       	adiw	r28, 0x08	; 8
     946:	ea e0       	ldi	r30, 0x0A	; 10
     948:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <__epilogue_restores__+0x10>

0000094c <__clzsi2>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	7b 01       	movw	r14, r22
     956:	8c 01       	movw	r16, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	e8 16       	cp	r14, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	f8 06       	cpc	r15, r24
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 07       	cpc	r16, r24
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	18 07       	cpc	r17, r24
     968:	88 f4       	brcc	.+34     	; 0x98c <__clzsi2+0x40>
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	e8 16       	cp	r14, r24
     96e:	f1 04       	cpc	r15, r1
     970:	01 05       	cpc	r16, r1
     972:	11 05       	cpc	r17, r1
     974:	31 f0       	breq	.+12     	; 0x982 <__clzsi2+0x36>
     976:	28 f0       	brcs	.+10     	; 0x982 <__clzsi2+0x36>
     978:	88 e0       	ldi	r24, 0x08	; 8
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	17 c0       	rjmp	.+46     	; 0x9b0 <__clzsi2+0x64>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <__clzsi2+0x64>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	e8 16       	cp	r14, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	f8 06       	cpc	r15, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	08 07       	cpc	r16, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	18 07       	cpc	r17, r24
     99c:	28 f0       	brcs	.+10     	; 0x9a8 <__clzsi2+0x5c>
     99e:	88 e1       	ldi	r24, 0x18	; 24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__clzsi2+0x64>
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	20 e2       	ldi	r18, 0x20	; 32
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	4a 0b       	sbc	r20, r26
     9be:	5b 0b       	sbc	r21, r27
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__clzsi2+0x7e>
     9c2:	16 95       	lsr	r17
     9c4:	07 95       	ror	r16
     9c6:	f7 94       	ror	r15
     9c8:	e7 94       	ror	r14
     9ca:	8a 95       	dec	r24
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__clzsi2+0x76>
     9ce:	f7 01       	movw	r30, r14
     9d0:	e8 59       	subi	r30, 0x98	; 152
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	80 81       	ld	r24, Z
     9d6:	28 1b       	sub	r18, r24
     9d8:	31 09       	sbc	r19, r1
     9da:	41 09       	sbc	r20, r1
     9dc:	51 09       	sbc	r21, r1
     9de:	c9 01       	movw	r24, r18
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <__pack_f>:
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	fc 01       	movw	r30, r24
     9f6:	e4 80       	ldd	r14, Z+4	; 0x04
     9f8:	f5 80       	ldd	r15, Z+5	; 0x05
     9fa:	06 81       	ldd	r16, Z+6	; 0x06
     9fc:	17 81       	ldd	r17, Z+7	; 0x07
     9fe:	d1 80       	ldd	r13, Z+1	; 0x01
     a00:	80 81       	ld	r24, Z
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	48 f4       	brcc	.+18     	; 0xa18 <__pack_f+0x2e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e1       	ldi	r26, 0x10	; 16
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 2a       	or	r14, r24
     a10:	f9 2a       	or	r15, r25
     a12:	0a 2b       	or	r16, r26
     a14:	1b 2b       	or	r17, r27
     a16:	a5 c0       	rjmp	.+330    	; 0xb62 <__pack_f+0x178>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__pack_f+0x34>
     a1c:	9f c0       	rjmp	.+318    	; 0xb5c <__pack_f+0x172>
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	21 f4       	brne	.+8      	; 0xa2a <__pack_f+0x40>
     a22:	ee 24       	eor	r14, r14
     a24:	ff 24       	eor	r15, r15
     a26:	87 01       	movw	r16, r14
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <__pack_f+0x4a>
     a2a:	e1 14       	cp	r14, r1
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__pack_f+0x50>
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	96 c0       	rjmp	.+300    	; 0xb66 <__pack_f+0x17c>
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	62 38       	cpi	r22, 0x82	; 130
     a42:	79 07       	cpc	r23, r25
     a44:	0c f0       	brlt	.+2      	; 0xa48 <__pack_f+0x5e>
     a46:	5b c0       	rjmp	.+182    	; 0xafe <__pack_f+0x114>
     a48:	22 e8       	ldi	r18, 0x82	; 130
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	26 1b       	sub	r18, r22
     a4e:	37 0b       	sbc	r19, r23
     a50:	2a 31       	cpi	r18, 0x1A	; 26
     a52:	31 05       	cpc	r19, r1
     a54:	2c f0       	brlt	.+10     	; 0xa60 <__pack_f+0x76>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	2a c0       	rjmp	.+84     	; 0xab4 <__pack_f+0xca>
     a60:	b8 01       	movw	r22, r16
     a62:	a7 01       	movw	r20, r14
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0x86>
     a68:	76 95       	lsr	r23
     a6a:	67 95       	ror	r22
     a6c:	57 95       	ror	r21
     a6e:	47 95       	ror	r20
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__pack_f+0x7e>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__pack_f+0x9c>
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	2a 95       	dec	r18
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__pack_f+0x94>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	a1 09       	sbc	r26, r1
     a8e:	b1 09       	sbc	r27, r1
     a90:	8e 21       	and	r24, r14
     a92:	9f 21       	and	r25, r15
     a94:	a0 23       	and	r26, r16
     a96:	b1 23       	and	r27, r17
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 05       	cpc	r26, r1
     a9c:	b1 05       	cpc	r27, r1
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <__pack_f+0xbe>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	9a 01       	movw	r18, r20
     aaa:	ab 01       	movw	r20, r22
     aac:	28 2b       	or	r18, r24
     aae:	39 2b       	or	r19, r25
     ab0:	4a 2b       	or	r20, r26
     ab2:	5b 2b       	or	r21, r27
     ab4:	da 01       	movw	r26, r20
     ab6:	c9 01       	movw	r24, r18
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	a0 70       	andi	r26, 0x00	; 0
     abe:	b0 70       	andi	r27, 0x00	; 0
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__pack_f+0xee>
     aca:	27 ff       	sbrs	r18, 7
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__pack_f+0xf6>
     ace:	20 5c       	subi	r18, 0xC0	; 192
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	4f 4f       	sbci	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__pack_f+0xf6>
     ad8:	21 5c       	subi	r18, 0xC1	; 193
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	3a 07       	cpc	r19, r26
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	4a 07       	cpc	r20, r26
     aee:	a0 e4       	ldi	r26, 0x40	; 64
     af0:	5a 07       	cpc	r21, r26
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <__pack_f+0x10e>
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	79 01       	movw	r14, r18
     afa:	8a 01       	movw	r16, r20
     afc:	27 c0       	rjmp	.+78     	; 0xb4c <__pack_f+0x162>
     afe:	60 38       	cpi	r22, 0x80	; 128
     b00:	71 05       	cpc	r23, r1
     b02:	64 f5       	brge	.+88     	; 0xb5c <__pack_f+0x172>
     b04:	fb 01       	movw	r30, r22
     b06:	e1 58       	subi	r30, 0x81	; 129
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	d8 01       	movw	r26, r16
     b0c:	c7 01       	movw	r24, r14
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	90 70       	andi	r25, 0x00	; 0
     b12:	a0 70       	andi	r26, 0x00	; 0
     b14:	b0 70       	andi	r27, 0x00	; 0
     b16:	80 34       	cpi	r24, 0x40	; 64
     b18:	91 05       	cpc	r25, r1
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__pack_f+0x144>
     b20:	e7 fe       	sbrs	r14, 7
     b22:	0d c0       	rjmp	.+26     	; 0xb3e <__pack_f+0x154>
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__pack_f+0x14c>
     b2e:	8f e3       	ldi	r24, 0x3F	; 63
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e8 0e       	add	r14, r24
     b38:	f9 1e       	adc	r15, r25
     b3a:	0a 1f       	adc	r16, r26
     b3c:	1b 1f       	adc	r17, r27
     b3e:	17 ff       	sbrs	r17, 7
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__pack_f+0x162>
     b42:	16 95       	lsr	r17
     b44:	07 95       	ror	r16
     b46:	f7 94       	ror	r15
     b48:	e7 94       	ror	r14
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	16 95       	lsr	r17
     b50:	07 95       	ror	r16
     b52:	f7 94       	ror	r15
     b54:	e7 94       	ror	r14
     b56:	8a 95       	dec	r24
     b58:	d1 f7       	brne	.-12     	; 0xb4e <__pack_f+0x164>
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <__pack_f+0x17c>
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	87 01       	movw	r16, r14
     b62:	ef ef       	ldi	r30, 0xFF	; 255
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	6e 2f       	mov	r22, r30
     b68:	67 95       	ror	r22
     b6a:	66 27       	eor	r22, r22
     b6c:	67 95       	ror	r22
     b6e:	90 2f       	mov	r25, r16
     b70:	9f 77       	andi	r25, 0x7F	; 127
     b72:	d7 94       	ror	r13
     b74:	dd 24       	eor	r13, r13
     b76:	d7 94       	ror	r13
     b78:	8e 2f       	mov	r24, r30
     b7a:	86 95       	lsr	r24
     b7c:	49 2f       	mov	r20, r25
     b7e:	46 2b       	or	r20, r22
     b80:	58 2f       	mov	r21, r24
     b82:	5d 29       	or	r21, r13
     b84:	b7 01       	movw	r22, r14
     b86:	ca 01       	movw	r24, r20
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <__unpack_f>:
     b94:	fc 01       	movw	r30, r24
     b96:	db 01       	movw	r26, r22
     b98:	40 81       	ld	r20, Z
     b9a:	51 81       	ldd	r21, Z+1	; 0x01
     b9c:	22 81       	ldd	r18, Z+2	; 0x02
     b9e:	62 2f       	mov	r22, r18
     ba0:	6f 77       	andi	r22, 0x7F	; 127
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	22 1f       	adc	r18, r18
     ba6:	22 27       	eor	r18, r18
     ba8:	22 1f       	adc	r18, r18
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	89 2f       	mov	r24, r25
     bae:	88 0f       	add	r24, r24
     bb0:	82 2b       	or	r24, r18
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	99 1f       	adc	r25, r25
     bb8:	99 27       	eor	r25, r25
     bba:	99 1f       	adc	r25, r25
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	11 97       	sbiw	r26, 0x01	; 1
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	a9 f5       	brne	.+106    	; 0xc32 <__unpack_f+0x9e>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <__unpack_f+0x42>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	37 c0       	rjmp	.+110    	; 0xc44 <__unpack_f+0xb0>
     bd6:	82 e8       	ldi	r24, 0x82	; 130
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	9c 93       	st	X, r25
     bde:	8e 93       	st	-X, r24
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	9a 01       	movw	r18, r20
     be4:	ab 01       	movw	r20, r22
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	6a 95       	dec	r22
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__unpack_f+0x54>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	8c 93       	st	X, r24
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__unpack_f+0x80>
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	44 1f       	adc	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 93       	st	X, r25
     c10:	8e 93       	st	-X, r24
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	20 30       	cpi	r18, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	38 07       	cpc	r19, r24
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	48 07       	cpc	r20, r24
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	58 07       	cpc	r21, r24
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__unpack_f+0x66>
     c24:	14 96       	adiw	r26, 0x04	; 4
     c26:	2d 93       	st	X+, r18
     c28:	3d 93       	st	X+, r19
     c2a:	4d 93       	st	X+, r20
     c2c:	5c 93       	st	X, r21
     c2e:	17 97       	sbiw	r26, 0x07	; 7
     c30:	08 95       	ret
     c32:	2f 3f       	cpi	r18, 0xFF	; 255
     c34:	31 05       	cpc	r19, r1
     c36:	79 f4       	brne	.+30     	; 0xc56 <__unpack_f+0xc2>
     c38:	41 15       	cp	r20, r1
     c3a:	51 05       	cpc	r21, r1
     c3c:	61 05       	cpc	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	19 f4       	brne	.+6      	; 0xc48 <__unpack_f+0xb4>
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	08 95       	ret
     c48:	64 ff       	sbrs	r22, 4
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <__unpack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	8c 93       	st	X, r24
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <__unpack_f+0xe2>
     c52:	1c 92       	st	X, r1
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <__unpack_f+0xe2>
     c56:	2f 57       	subi	r18, 0x7F	; 127
     c58:	30 40       	sbci	r19, 0x00	; 0
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	3c 93       	st	X, r19
     c5e:	2e 93       	st	-X, r18
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	8c 93       	st	X, r24
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	8a 95       	dec	r24
     c72:	d1 f7       	brne	.-12     	; 0xc68 <__unpack_f+0xd4>
     c74:	70 64       	ori	r23, 0x40	; 64
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	4d 93       	st	X+, r20
     c7a:	5d 93       	st	X+, r21
     c7c:	6d 93       	st	X+, r22
     c7e:	7c 93       	st	X, r23
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	08 95       	ret

00000c84 <__fpcmp_parts_f>:
     c84:	1f 93       	push	r17
     c86:	dc 01       	movw	r26, r24
     c88:	fb 01       	movw	r30, r22
     c8a:	9c 91       	ld	r25, X
     c8c:	92 30       	cpi	r25, 0x02	; 2
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <__fpcmp_parts_f+0xe>
     c90:	47 c0       	rjmp	.+142    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c92:	80 81       	ld	r24, Z
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__fpcmp_parts_f+0x16>
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c9a:	94 30       	cpi	r25, 0x04	; 4
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <__fpcmp_parts_f+0x2e>
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	1c 91       	ld	r17, X
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	99 f5       	brne	.+102    	; 0xd0c <__fpcmp_parts_f+0x88>
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	68 2f       	mov	r22, r24
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	61 1b       	sub	r22, r17
     cae:	71 09       	sbc	r23, r1
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <__fpcmp_parts_f+0xac>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__fpcmp_parts_f+0x3a>
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__fpcmp_parts_f+0x42>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	b9 f1       	breq	.+110    	; 0xd2c <__fpcmp_parts_f+0xa8>
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	89 f1       	breq	.+98     	; 0xd26 <__fpcmp_parts_f+0xa2>
     cc4:	2d c0       	rjmp	.+90     	; 0xd20 <__fpcmp_parts_f+0x9c>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 91       	ld	r17, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	f1 f0       	breq	.+60     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	18 17       	cp	r17, r24
     cd4:	d9 f4       	brne	.+54     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	94 f0       	brlt	.+36     	; 0xd0c <__fpcmp_parts_f+0x88>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	bc f0       	brlt	.+46     	; 0xd1c <__fpcmp_parts_f+0x98>
     cee:	14 96       	adiw	r26, 0x04	; 4
     cf0:	8d 91       	ld	r24, X+
     cf2:	9d 91       	ld	r25, X+
     cf4:	0d 90       	ld	r0, X+
     cf6:	bc 91       	ld	r27, X
     cf8:	a0 2d       	mov	r26, r0
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	46 81       	ldd	r20, Z+6	; 0x06
     d00:	57 81       	ldd	r21, Z+7	; 0x07
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	4a 07       	cpc	r20, r26
     d08:	5b 07       	cpc	r21, r27
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <__fpcmp_parts_f+0x8e>
     d0c:	11 23       	and	r17, r17
     d0e:	41 f0       	breq	.+16     	; 0xd20 <__fpcmp_parts_f+0x9c>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <__fpcmp_parts_f+0xa2>
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	a4 07       	cpc	r26, r20
     d18:	b5 07       	cpc	r27, r21
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fpcmp_parts_f+0xa8>
     d1c:	11 23       	and	r17, r17
     d1e:	19 f0       	breq	.+6      	; 0xd26 <__fpcmp_parts_f+0xa2>
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <__fpcmp_parts_f+0xac>
     d26:	6f ef       	ldi	r22, 0xFF	; 255
     d28:	7f ef       	ldi	r23, 0xFF	; 255
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <__fpcmp_parts_f+0xac>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	cb 01       	movw	r24, r22
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <Timer_enu_Initialization>:
static void (* apfun_ISRpointers[TIMER_ISR_COUNT])(void*)= { NULL};
static void* apvid_ISRParameters[TIMER_ISR_COUNT] = {NULL};

//APIs implementaion
extern ErrorState_t Timer_enu_Initialization(void)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <Timer_enu_Initialization+0x6>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <Timer_enu_Initialization+0x8>
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <Timer_enu_Initialization+0xa>
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
     d44:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Counter = 0;
     d46:	19 82       	std	Y+1, r1	; 0x01

    u8 Local_au8_ErrorStates [4] ={0};
     d48:	1b 82       	std	Y+3, r1	; 0x03
     d4a:	1c 82       	std	Y+4, r1	; 0x04
     d4c:	1d 82       	std	Y+5, r1	; 0x05
     d4e:	1e 82       	std	Y+6, r1	; 0x06

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
     d50:	19 82       	std	Y+1, r1	; 0x01
     d52:	b3 c0       	rjmp	.+358    	; 0xeba <Timer_enu_Initialization+0x184>
    {
        
      Local_au8_ErrorStates[0] = enu_SetTimerMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode);
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	c9 01       	movw	r24, r18
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	82 0f       	add	r24, r18
     d66:	93 1f       	adc	r25, r19
     d68:	fc 01       	movw	r30, r24
     d6a:	e7 59       	subi	r30, 0x97	; 151
     d6c:	fe 4f       	sbci	r31, 0xFE	; 254
     d6e:	40 81       	ld	r20, Z
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	c9 01       	movw	r24, r18
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	82 0f       	add	r24, r18
     d82:	93 1f       	adc	r25, r19
     d84:	fc 01       	movw	r30, r24
     d86:	e6 59       	subi	r30, 0x96	; 150
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	90 81       	ld	r25, Z
     d8c:	84 2f       	mov	r24, r20
     d8e:	69 2f       	mov	r22, r25
     d90:	0e 94 38 08 	call	0x1070	; 0x1070 <enu_SetTimerMode>
     d94:	8b 83       	std	Y+3, r24	; 0x03
      Local_au8_ErrorStates[1] = enu_SetClockSelection(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].ClockSelection);
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	c9 01       	movw	r24, r18
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	82 0f       	add	r24, r18
     da8:	93 1f       	adc	r25, r19
     daa:	fc 01       	movw	r30, r24
     dac:	e7 59       	subi	r30, 0x97	; 151
     dae:	fe 4f       	sbci	r31, 0xFE	; 254
     db0:	40 81       	ld	r20, Z
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	c9 01       	movw	r24, r18
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	82 0f       	add	r24, r18
     dc4:	93 1f       	adc	r25, r19
     dc6:	fc 01       	movw	r30, r24
     dc8:	e5 59       	subi	r30, 0x95	; 149
     dca:	fe 4f       	sbci	r31, 0xFE	; 254
     dcc:	90 81       	ld	r25, Z
     dce:	84 2f       	mov	r24, r20
     dd0:	69 2f       	mov	r22, r25
     dd2:	0e 94 b3 08 	call	0x1166	; 0x1166 <enu_SetClockSelection>
     dd6:	8c 83       	std	Y+4, r24	; 0x04
      Local_au8_ErrorStates[2] = enu_SetInterruptMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode, Timer_astr_TimerList[Local_u8_Counter].InterruptMode);
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	c9 01       	movw	r24, r18
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	82 0f       	add	r24, r18
     dea:	93 1f       	adc	r25, r19
     dec:	fc 01       	movw	r30, r24
     dee:	e7 59       	subi	r30, 0x97	; 151
     df0:	fe 4f       	sbci	r31, 0xFE	; 254
     df2:	50 81       	ld	r21, Z
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	c9 01       	movw	r24, r18
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	fc 01       	movw	r30, r24
     e0a:	e6 59       	subi	r30, 0x96	; 150
     e0c:	fe 4f       	sbci	r31, 0xFE	; 254
     e0e:	40 81       	ld	r20, Z
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	c9 01       	movw	r24, r18
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	82 0f       	add	r24, r18
     e22:	93 1f       	adc	r25, r19
     e24:	fc 01       	movw	r30, r24
     e26:	e4 59       	subi	r30, 0x94	; 148
     e28:	fe 4f       	sbci	r31, 0xFE	; 254
     e2a:	90 81       	ld	r25, Z
     e2c:	85 2f       	mov	r24, r21
     e2e:	64 2f       	mov	r22, r20
     e30:	49 2f       	mov	r20, r25
     e32:	0e 94 de 09 	call	0x13bc	; 0x13bc <enu_SetInterruptMode>
     e36:	8d 83       	std	Y+5, r24	; 0x05
      Local_au8_ErrorStates[3] = enu_SetOCxBehavior(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode ,Timer_astr_TimerList[Local_u8_Counter].OCxPinBehavior);
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	c9 01       	movw	r24, r18
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	82 0f       	add	r24, r18
     e4a:	93 1f       	adc	r25, r19
     e4c:	fc 01       	movw	r30, r24
     e4e:	e7 59       	subi	r30, 0x97	; 151
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	50 81       	ld	r21, Z
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	c9 01       	movw	r24, r18
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	fc 01       	movw	r30, r24
     e6a:	e6 59       	subi	r30, 0x96	; 150
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	40 81       	ld	r20, Z
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	c9 01       	movw	r24, r18
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	fc 01       	movw	r30, r24
     e86:	e3 59       	subi	r30, 0x93	; 147
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	90 81       	ld	r25, Z
     e8c:	85 2f       	mov	r24, r21
     e8e:	64 2f       	mov	r22, r20
     e90:	49 2f       	mov	r20, r25
     e92:	0e 94 77 0a 	call	0x14ee	; 0x14ee <enu_SetOCxBehavior>
     e96:	8e 83       	std	Y+6, r24	; 0x06
    
      if((Local_au8_ErrorStates[0] == ES_NOK) || (Local_au8_ErrorStates[1] == ES_NOK) || (Local_au8_ErrorStates[2] == ES_NOK) || (Local_au8_ErrorStates[3] == ES_NOK))
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	49 f0       	breq	.+18     	; 0xeb0 <Timer_enu_Initialization+0x17a>
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	31 f0       	breq	.+12     	; 0xeb0 <Timer_enu_Initialization+0x17a>
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <Timer_enu_Initialization+0x17a>
     eaa:	8e 81       	ldd	r24, Y+6	; 0x06
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	11 f4       	brne	.+4      	; 0xeb4 <Timer_enu_Initialization+0x17e>
      {
        Local_u8_ErrorFlag = ES_NOK;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Counter = 0;

    u8 Local_au8_ErrorStates [4] ={0};

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	8f 5f       	subi	r24, 0xFF	; 255
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	90 91 68 01 	lds	r25, 0x0168
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	89 17       	cp	r24, r25
     ec2:	08 f4       	brcc	.+2      	; 0xec6 <Timer_enu_Initialization+0x190>
     ec4:	47 cf       	rjmp	.-370    	; 0xd54 <Timer_enu_Initialization+0x1e>
      }
    }
    


    return Local_u8_ErrorFlag;
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ec8:	26 96       	adiw	r28, 0x06	; 6
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <Timer_enu_SetCallBack>:


extern ErrorState_t Timer_enu_SetCallBack (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, void (*Copy_pfun_AppFunction)(void*), void* Copy_pvid_Parameters)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	29 97       	sbiw	r28, 0x09	; 9
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	8a 83       	std	Y+2, r24	; 0x02
     ef0:	6b 83       	std	Y+3, r22	; 0x03
     ef2:	5d 83       	std	Y+5, r21	; 0x05
     ef4:	4c 83       	std	Y+4, r20	; 0x04
     ef6:	3f 83       	std	Y+7, r19	; 0x07
     ef8:	2e 83       	std	Y+6, r18	; 0x06
    u8 Local_u8_ErrorFlag = ES_NOK;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pfun_AppFunction)
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	d9 f1       	breq	.+118    	; 0xf7c <Timer_enu_SetCallBack+0xa2>
    {
        switch (Copy_u8_TimerNumber)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	39 87       	std	Y+9, r19	; 0x09
     f0e:	28 87       	std	Y+8, r18	; 0x08
     f10:	88 85       	ldd	r24, Y+8	; 0x08
     f12:	99 85       	ldd	r25, Y+9	; 0x09
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	91 05       	cpc	r25, r1
     f18:	99 f1       	breq	.+102    	; 0xf80 <Timer_enu_SetCallBack+0xa6>
     f1a:	28 85       	ldd	r18, Y+8	; 0x08
     f1c:	39 85       	ldd	r19, Y+9	; 0x09
     f1e:	22 30       	cpi	r18, 0x02	; 2
     f20:	31 05       	cpc	r19, r1
     f22:	71 f1       	breq	.+92     	; 0xf80 <Timer_enu_SetCallBack+0xa6>
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	99 85       	ldd	r25, Y+9	; 0x09
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	29 f5       	brne	.+74     	; 0xf76 <Timer_enu_SetCallBack+0x9c>
        {
            case TIMER_0:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	88 23       	and	r24, r24
     f30:	71 f4       	brne	.+28     	; 0xf4e <Timer_enu_SetCallBack+0x74>
                {
                    apfun_ISRpointers[TIMER_0_OVERFLOW_ISR] = Copy_pfun_AppFunction;
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	90 93 c3 01 	sts	0x01C3, r25
     f3a:	80 93 c2 01 	sts	0x01C2, r24

                    apvid_ISRParameters[TIMER_0_OVERFLOW_ISR] = Copy_pvid_Parameters;
     f3e:	8e 81       	ldd	r24, Y+6	; 0x06
     f40:	9f 81       	ldd	r25, Y+7	; 0x07
     f42:	90 93 d3 01 	sts	0x01D3, r25
     f46:	80 93 d2 01 	sts	0x01D2, r24

                    Local_u8_ErrorFlag = ES_OK;
     f4a:	19 82       	std	Y+1, r1	; 0x01
     f4c:	19 c0       	rjmp	.+50     	; 0xf80 <Timer_enu_SetCallBack+0xa6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	71 f4       	brne	.+28     	; 0xf70 <Timer_enu_SetCallBack+0x96>
                {
                    apfun_ISRpointers[TIMER_0_CTC_ISR] = Copy_pfun_AppFunction;
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
     f56:	9d 81       	ldd	r25, Y+5	; 0x05
     f58:	90 93 c1 01 	sts	0x01C1, r25
     f5c:	80 93 c0 01 	sts	0x01C0, r24

                    apvid_ISRParameters[TIMER_0_CTC_ISR] = Copy_pvid_Parameters;
     f60:	8e 81       	ldd	r24, Y+6	; 0x06
     f62:	9f 81       	ldd	r25, Y+7	; 0x07
     f64:	90 93 d1 01 	sts	0x01D1, r25
     f68:	80 93 d0 01 	sts	0x01D0, r24

                    Local_u8_ErrorFlag = ES_OK;
     f6c:	19 82       	std	Y+1, r1	; 0x01
     f6e:	08 c0       	rjmp	.+16     	; 0xf80 <Timer_enu_SetCallBack+0xa6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <Timer_enu_SetCallBack+0xa6>

                break;
            }
            
            default:
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <Timer_enu_SetCallBack+0xa6>
            break;
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
}
     f82:	29 96       	adiw	r28, 0x09	; 9
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <__vector_10>:
//ISR
void __vector_10 (void)__attribute__((signal));
void __vector_11 (void)__attribute__((signal));

void __vector_10 (void)
{
     f94:	1f 92       	push	r1
     f96:	0f 92       	push	r0
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	0f 92       	push	r0
     f9c:	11 24       	eor	r1, r1
     f9e:	2f 93       	push	r18
     fa0:	3f 93       	push	r19
     fa2:	4f 93       	push	r20
     fa4:	5f 93       	push	r21
     fa6:	6f 93       	push	r22
     fa8:	7f 93       	push	r23
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	af 93       	push	r26
     fb0:	bf 93       	push	r27
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_CTC_ISR])
     fbe:	80 91 c0 01 	lds	r24, 0x01C0
     fc2:	90 91 c1 01 	lds	r25, 0x01C1
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	49 f0       	breq	.+18     	; 0xfdc <__vector_10+0x48>
    {
       apfun_ISRpointers[TIMER_0_CTC_ISR](apvid_ISRParameters[TIMER_0_CTC_ISR]);
     fca:	e0 91 c0 01 	lds	r30, 0x01C0
     fce:	f0 91 c1 01 	lds	r31, 0x01C1
     fd2:	80 91 d0 01 	lds	r24, 0x01D0
     fd6:	90 91 d1 01 	lds	r25, 0x01D1
     fda:	09 95       	icall
    }
}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	ff 91       	pop	r31
     fe2:	ef 91       	pop	r30
     fe4:	bf 91       	pop	r27
     fe6:	af 91       	pop	r26
     fe8:	9f 91       	pop	r25
     fea:	8f 91       	pop	r24
     fec:	7f 91       	pop	r23
     fee:	6f 91       	pop	r22
     ff0:	5f 91       	pop	r21
     ff2:	4f 91       	pop	r20
     ff4:	3f 91       	pop	r19
     ff6:	2f 91       	pop	r18
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <__vector_11>:

void __vector_11 (void)
{
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_OVERFLOW_ISR])
    102c:	80 91 c2 01 	lds	r24, 0x01C2
    1030:	90 91 c3 01 	lds	r25, 0x01C3
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	49 f0       	breq	.+18     	; 0x104a <__vector_11+0x48>
    {
        apfun_ISRpointers[TIMER_0_OVERFLOW_ISR](apvid_ISRParameters[TIMER_0_OVERFLOW_ISR]);
    1038:	e0 91 c2 01 	lds	r30, 0x01C2
    103c:	f0 91 c3 01 	lds	r31, 0x01C3
    1040:	80 91 d2 01 	lds	r24, 0x01D2
    1044:	90 91 d3 01 	lds	r25, 0x01D3
    1048:	09 95       	icall
    }
}
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	ff 91       	pop	r31
    1050:	ef 91       	pop	r30
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	0f 90       	pop	r0
    106c:	1f 90       	pop	r1
    106e:	18 95       	reti

00001070 <enu_SetTimerMode>:



//Local functions' implementation
static ErrorState_t enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <enu_SetTimerMode+0x6>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <enu_SetTimerMode+0x8>
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	8a 83       	std	Y+2, r24	; 0x02
    1080:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	89 83       	std	Y+1, r24	; 0x01

    switch(Copy_u8_TimerNumber)
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3d 83       	std	Y+5, r19	; 0x05
    108e:	2c 83       	std	Y+4, r18	; 0x04
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	9d 81       	ldd	r25, Y+5	; 0x05
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <enu_SetTimerMode+0x2c>
    109a:	5c c0       	rjmp	.+184    	; 0x1154 <enu_SetTimerMode+0xe4>
    109c:	2c 81       	ldd	r18, Y+4	; 0x04
    109e:	3d 81       	ldd	r19, Y+5	; 0x05
    10a0:	22 30       	cpi	r18, 0x02	; 2
    10a2:	31 05       	cpc	r19, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <enu_SetTimerMode+0x38>
    10a6:	56 c0       	rjmp	.+172    	; 0x1154 <enu_SetTimerMode+0xe4>
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	9d 81       	ldd	r25, Y+5	; 0x05
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <enu_SetTimerMode+0x42>
    10b0:	4f c0       	rjmp	.+158    	; 0x1150 <enu_SetTimerMode+0xe0>
    {
        case TIMER_0:
        {

            if(Copy_u8_TimerMode == TIMER_NORMAL)
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	88 23       	and	r24, r24
    10b6:	81 f4       	brne	.+32     	; 0x10d8 <enu_SetTimerMode+0x68>
            {
                //Bits contain 00
                TCCR0 &= ~(1 << TCCR0_WGM00);
    10b8:	a3 e5       	ldi	r26, 0x53	; 83
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e3 e5       	ldi	r30, 0x53	; 83
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8f 7b       	andi	r24, 0xBF	; 191
    10c4:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    10c6:	a3 e5       	ldi	r26, 0x53	; 83
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e3 e5       	ldi	r30, 0x53	; 83
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	87 7f       	andi	r24, 0xF7	; 247
    10d2:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    10d4:	19 82       	std	Y+1, r1	; 0x01
    10d6:	3e c0       	rjmp	.+124    	; 0x1154 <enu_SetTimerMode+0xe4>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	81 f4       	brne	.+32     	; 0x10fe <enu_SetTimerMode+0x8e>
            {
                //Bits contain 01
                TCCR0 |= (1 << TCCR0_WGM00);
    10de:	a3 e5       	ldi	r26, 0x53	; 83
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e3 e5       	ldi	r30, 0x53	; 83
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 64       	ori	r24, 0x40	; 64
    10ea:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    10ec:	a3 e5       	ldi	r26, 0x53	; 83
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e3 e5       	ldi	r30, 0x53	; 83
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	87 7f       	andi	r24, 0xF7	; 247
    10f8:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    10fa:	19 82       	std	Y+1, r1	; 0x01
    10fc:	2b c0       	rjmp	.+86     	; 0x1154 <enu_SetTimerMode+0xe4>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	81 f4       	brne	.+32     	; 0x1124 <enu_SetTimerMode+0xb4>
            {
                //Bits contain 10
                TCCR0 &= ~(1 << TCCR0_WGM00);
    1104:	a3 e5       	ldi	r26, 0x53	; 83
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e3 e5       	ldi	r30, 0x53	; 83
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	8f 7b       	andi	r24, 0xBF	; 191
    1110:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    1112:	a3 e5       	ldi	r26, 0x53	; 83
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e3 e5       	ldi	r30, 0x53	; 83
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	88 60       	ori	r24, 0x08	; 8
    111e:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1120:	19 82       	std	Y+1, r1	; 0x01
    1122:	18 c0       	rjmp	.+48     	; 0x1154 <enu_SetTimerMode+0xe4>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	81 f4       	brne	.+32     	; 0x114a <enu_SetTimerMode+0xda>
            {
                //Bits contain 11
                TCCR0 |= (1 << TCCR0_WGM00);
    112a:	a3 e5       	ldi	r26, 0x53	; 83
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e3 e5       	ldi	r30, 0x53	; 83
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	80 64       	ori	r24, 0x40	; 64
    1136:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    1138:	a3 e5       	ldi	r26, 0x53	; 83
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e3 e5       	ldi	r30, 0x53	; 83
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	88 60       	ori	r24, 0x08	; 8
    1144:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1146:	19 82       	std	Y+1, r1	; 0x01
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <enu_SetTimerMode+0xe4>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <enu_SetTimerMode+0xe4>

        }
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;
    1154:	89 81       	ldd	r24, Y+1	; 0x01
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <enu_SetClockSelection>:

static ErrorState_t enu_SetClockSelection(u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	27 97       	sbiw	r28, 0x07	; 7
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	8a 83       	std	Y+2, r24	; 0x02
    117c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_TimerNumber)
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3f 83       	std	Y+7, r19	; 0x07
    118a:	2e 83       	std	Y+6, r18	; 0x06
    118c:	8e 81       	ldd	r24, Y+6	; 0x06
    118e:	9f 81       	ldd	r25, Y+7	; 0x07
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	91 05       	cpc	r25, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <enu_SetClockSelection+0x32>
    1196:	08 c1       	rjmp	.+528    	; 0x13a8 <enu_SetClockSelection+0x242>
    1198:	2e 81       	ldd	r18, Y+6	; 0x06
    119a:	3f 81       	ldd	r19, Y+7	; 0x07
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <enu_SetClockSelection+0x3e>
    11a2:	02 c1       	rjmp	.+516    	; 0x13a8 <enu_SetClockSelection+0x242>
    11a4:	8e 81       	ldd	r24, Y+6	; 0x06
    11a6:	9f 81       	ldd	r25, Y+7	; 0x07
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	09 f0       	breq	.+2      	; 0x11ae <enu_SetClockSelection+0x48>
    11ac:	fb c0       	rjmp	.+502    	; 0x13a4 <enu_SetClockSelection+0x23e>
    {
        case TIMER_0:
        {
            switch (Copy_u8_ClockSelection)
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3d 83       	std	Y+5, r19	; 0x05
    11b6:	2c 83       	std	Y+4, r18	; 0x04
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	84 30       	cpi	r24, 0x04	; 4
    11be:	91 05       	cpc	r25, r1
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <enu_SetClockSelection+0x5e>
    11c2:	7a c0       	rjmp	.+244    	; 0x12b8 <enu_SetClockSelection+0x152>
    11c4:	2c 81       	ldd	r18, Y+4	; 0x04
    11c6:	3d 81       	ldd	r19, Y+5	; 0x05
    11c8:	25 30       	cpi	r18, 0x05	; 5
    11ca:	31 05       	cpc	r19, r1
    11cc:	8c f4       	brge	.+34     	; 0x11f0 <enu_SetClockSelection+0x8a>
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	91 05       	cpc	r25, r1
    11d6:	09 f4       	brne	.+2      	; 0x11da <enu_SetClockSelection+0x74>
    11d8:	41 c0       	rjmp	.+130    	; 0x125c <enu_SetClockSelection+0xf6>
    11da:	2c 81       	ldd	r18, Y+4	; 0x04
    11dc:	3d 81       	ldd	r19, Y+5	; 0x05
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <enu_SetClockSelection+0x80>
    11e4:	52 c0       	rjmp	.+164    	; 0x128a <enu_SetClockSelection+0x124>
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	01 f1       	breq	.+64     	; 0x122e <enu_SetClockSelection+0xc8>
    11ee:	d7 c0       	rjmp	.+430    	; 0x139e <enu_SetClockSelection+0x238>
    11f0:	2c 81       	ldd	r18, Y+4	; 0x04
    11f2:	3d 81       	ldd	r19, Y+5	; 0x05
    11f4:	27 30       	cpi	r18, 0x07	; 7
    11f6:	31 05       	cpc	r19, r1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <enu_SetClockSelection+0x96>
    11fa:	8c c0       	rjmp	.+280    	; 0x1314 <enu_SetClockSelection+0x1ae>
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	88 30       	cpi	r24, 0x08	; 8
    1202:	91 05       	cpc	r25, r1
    1204:	3c f4       	brge	.+14     	; 0x1214 <enu_SetClockSelection+0xae>
    1206:	2c 81       	ldd	r18, Y+4	; 0x04
    1208:	3d 81       	ldd	r19, Y+5	; 0x05
    120a:	26 30       	cpi	r18, 0x06	; 6
    120c:	31 05       	cpc	r19, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <enu_SetClockSelection+0xac>
    1210:	6a c0       	rjmp	.+212    	; 0x12e6 <enu_SetClockSelection+0x180>
    1212:	c5 c0       	rjmp	.+394    	; 0x139e <enu_SetClockSelection+0x238>
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	88 30       	cpi	r24, 0x08	; 8
    121a:	91 05       	cpc	r25, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <enu_SetClockSelection+0xba>
    121e:	91 c0       	rjmp	.+290    	; 0x1342 <enu_SetClockSelection+0x1dc>
    1220:	2c 81       	ldd	r18, Y+4	; 0x04
    1222:	3d 81       	ldd	r19, Y+5	; 0x05
    1224:	29 30       	cpi	r18, 0x09	; 9
    1226:	31 05       	cpc	r19, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <enu_SetClockSelection+0xc6>
    122a:	a2 c0       	rjmp	.+324    	; 0x1370 <enu_SetClockSelection+0x20a>
    122c:	b8 c0       	rjmp	.+368    	; 0x139e <enu_SetClockSelection+0x238>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR0 &= ~ (1 << TCCR0_CS00);
    122e:	a3 e5       	ldi	r26, 0x53	; 83
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e3 e5       	ldi	r30, 0x53	; 83
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8e 7f       	andi	r24, 0xFE	; 254
    123a:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    123c:	a3 e5       	ldi	r26, 0x53	; 83
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e3 e5       	ldi	r30, 0x53	; 83
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8d 7f       	andi	r24, 0xFD	; 253
    1248:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    124a:	a3 e5       	ldi	r26, 0x53	; 83
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e3 e5       	ldi	r30, 0x53	; 83
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8b 7f       	andi	r24, 0xFB	; 251
    1256:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1258:	19 82       	std	Y+1, r1	; 0x01
    125a:	a6 c0       	rjmp	.+332    	; 0x13a8 <enu_SetClockSelection+0x242>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR0 |= (1 << TCCR0_CS00);
    125c:	a3 e5       	ldi	r26, 0x53	; 83
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e3 e5       	ldi	r30, 0x53	; 83
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    126a:	a3 e5       	ldi	r26, 0x53	; 83
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e3 e5       	ldi	r30, 0x53	; 83
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8d 7f       	andi	r24, 0xFD	; 253
    1276:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1278:	a3 e5       	ldi	r26, 0x53	; 83
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e3 e5       	ldi	r30, 0x53	; 83
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	8b 7f       	andi	r24, 0xFB	; 251
    1284:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1286:	19 82       	std	Y+1, r1	; 0x01
    1288:	8f c0       	rjmp	.+286    	; 0x13a8 <enu_SetClockSelection+0x242>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR0 &= ~(1 << TCCR0_CS00);
    128a:	a3 e5       	ldi	r26, 0x53	; 83
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e3 e5       	ldi	r30, 0x53	; 83
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8e 7f       	andi	r24, 0xFE	; 254
    1296:	8c 93       	st	X, r24
                    TCCR0 |= (1  << TCCR0_CS01);
    1298:	a3 e5       	ldi	r26, 0x53	; 83
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e3 e5       	ldi	r30, 0x53	; 83
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	82 60       	ori	r24, 0x02	; 2
    12a4:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS02);
    12a6:	a3 e5       	ldi	r26, 0x53	; 83
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e3 e5       	ldi	r30, 0x53	; 83
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8b 7f       	andi	r24, 0xFB	; 251
    12b2:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    12b4:	19 82       	std	Y+1, r1	; 0x01
    12b6:	78 c0       	rjmp	.+240    	; 0x13a8 <enu_SetClockSelection+0x242>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 011
                    TCCR0 |= (1 << TCCR0_CS00);
    12b8:	a3 e5       	ldi	r26, 0x53	; 83
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e3 e5       	ldi	r30, 0x53	; 83
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	81 60       	ori	r24, 0x01	; 1
    12c4:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    12c6:	a3 e5       	ldi	r26, 0x53	; 83
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e3 e5       	ldi	r30, 0x53	; 83
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	82 60       	ori	r24, 0x02	; 2
    12d2:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    12d4:	a3 e5       	ldi	r26, 0x53	; 83
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e3 e5       	ldi	r30, 0x53	; 83
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8b 7f       	andi	r24, 0xFB	; 251
    12e0:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    12e2:	19 82       	std	Y+1, r1	; 0x01
    12e4:	61 c0       	rjmp	.+194    	; 0x13a8 <enu_SetClockSelection+0x242>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 100
                    TCCR0 &= ~(1 << TCCR0_CS00);
    12e6:	a3 e5       	ldi	r26, 0x53	; 83
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e3 e5       	ldi	r30, 0x53	; 83
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8e 7f       	andi	r24, 0xFE	; 254
    12f2:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS01);
    12f4:	a3 e5       	ldi	r26, 0x53	; 83
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e3 e5       	ldi	r30, 0x53	; 83
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	8d 7f       	andi	r24, 0xFD	; 253
    1300:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1302:	a3 e5       	ldi	r26, 0x53	; 83
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e3 e5       	ldi	r30, 0x53	; 83
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	84 60       	ori	r24, 0x04	; 4
    130e:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1310:	19 82       	std	Y+1, r1	; 0x01
    1312:	4a c0       	rjmp	.+148    	; 0x13a8 <enu_SetClockSelection+0x242>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 101
                    TCCR0 |= (1 << TCCR0_CS00);
    1314:	a3 e5       	ldi	r26, 0x53	; 83
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e3 e5       	ldi	r30, 0x53	; 83
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	81 60       	ori	r24, 0x01	; 1
    1320:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1322:	a3 e5       	ldi	r26, 0x53	; 83
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e3 e5       	ldi	r30, 0x53	; 83
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8d 7f       	andi	r24, 0xFD	; 253
    132e:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1330:	a3 e5       	ldi	r26, 0x53	; 83
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e3 e5       	ldi	r30, 0x53	; 83
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	84 60       	ori	r24, 0x04	; 4
    133c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    133e:	19 82       	std	Y+1, r1	; 0x01
    1340:	33 c0       	rjmp	.+102    	; 0x13a8 <enu_SetClockSelection+0x242>
                    break;
                }
                case TIMER_FALLING_EGDE:
                {
                    //Bits contain 110
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1342:	a3 e5       	ldi	r26, 0x53	; 83
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e3 e5       	ldi	r30, 0x53	; 83
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8e 7f       	andi	r24, 0xFE	; 254
    134e:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1350:	a3 e5       	ldi	r26, 0x53	; 83
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e3 e5       	ldi	r30, 0x53	; 83
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	82 60       	ori	r24, 0x02	; 2
    135c:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    135e:	a3 e5       	ldi	r26, 0x53	; 83
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e3 e5       	ldi	r30, 0x53	; 83
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	84 60       	ori	r24, 0x04	; 4
    136a:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    136c:	19 82       	std	Y+1, r1	; 0x01
    136e:	1c c0       	rjmp	.+56     	; 0x13a8 <enu_SetClockSelection+0x242>
                    break;
                }
                case TIMER_RISING_EGDE:
                {
                    //Bits contain 111
                    TCCR0 |= (1 << TCCR0_CS00);
    1370:	a3 e5       	ldi	r26, 0x53	; 83
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e3 e5       	ldi	r30, 0x53	; 83
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	81 60       	ori	r24, 0x01	; 1
    137c:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    137e:	a3 e5       	ldi	r26, 0x53	; 83
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e3 e5       	ldi	r30, 0x53	; 83
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	82 60       	ori	r24, 0x02	; 2
    138a:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    138c:	a3 e5       	ldi	r26, 0x53	; 83
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e3 e5       	ldi	r30, 0x53	; 83
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	84 60       	ori	r24, 0x04	; 4
    1398:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    139a:	19 82       	std	Y+1, r1	; 0x01
    139c:	05 c0       	rjmp	.+10     	; 0x13a8 <enu_SetClockSelection+0x242>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <enu_SetClockSelection+0x242>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return Local_u8_ErrorFlag;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13aa:	27 96       	adiw	r28, 0x07	; 7
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <enu_SetInterruptMode>:

static ErrorState_t enu_SetInterruptMode(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_InterruptMode)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <enu_SetInterruptMode+0x6>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <enu_SetInterruptMode+0x8>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <enu_SetInterruptMode+0xa>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	8a 83       	std	Y+2, r24	; 0x02
    13cc:	6b 83       	std	Y+3, r22	; 0x03
    13ce:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_TimerNumber)
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3e 83       	std	Y+6, r19	; 0x06
    13dc:	2d 83       	std	Y+5, r18	; 0x05
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <enu_SetInterruptMode+0x2e>
    13e8:	78 c0       	rjmp	.+240    	; 0x14da <enu_SetInterruptMode+0x11e>
    13ea:	2d 81       	ldd	r18, Y+5	; 0x05
    13ec:	3e 81       	ldd	r19, Y+6	; 0x06
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	a9 f1       	breq	.+106    	; 0x145e <enu_SetInterruptMode+0xa2>
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	09 f0       	breq	.+2      	; 0x13fe <enu_SetInterruptMode+0x42>
    13fc:	6e c0       	rjmp	.+220    	; 0x14da <enu_SetInterruptMode+0x11e>
    {
        case TIMER_0:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	88 23       	and	r24, r24
    1402:	89 f4       	brne	.+34     	; 0x1426 <enu_SetInterruptMode+0x6a>
            {
                //Clearing bit 0 (TOIE0)
                TIMSK &= (0xFE);
    1404:	a9 e5       	ldi	r26, 0x59	; 89
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e9 e5       	ldi	r30, 0x59	; 89
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	8e 7f       	andi	r24, 0xFE	; 254
    1410:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE0);
    1412:	a9 e5       	ldi	r26, 0x59	; 89
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e9 e5       	ldi	r30, 0x59	; 89
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	90 81       	ld	r25, Z
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	89 2b       	or	r24, r25
    1420:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1422:	19 82       	std	Y+1, r1	; 0x01
    1424:	5a c0       	rjmp	.+180    	; 0x14da <enu_SetInterruptMode+0x11e>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	b1 f4       	brne	.+44     	; 0x1458 <enu_SetInterruptMode+0x9c>
            {
                //Clearing bit 1 (OCIE0)
                TIMSK &= (0xFD);
    142c:	a9 e5       	ldi	r26, 0x59	; 89
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e9 e5       	ldi	r30, 0x59	; 89
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8d 7f       	andi	r24, 0xFD	; 253
    1438:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE0);
    143a:	a9 e5       	ldi	r26, 0x59	; 89
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e9 e5       	ldi	r30, 0x59	; 89
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	28 2f       	mov	r18, r24
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	82 2b       	or	r24, r18
    1452:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1454:	19 82       	std	Y+1, r1	; 0x01
    1456:	41 c0       	rjmp	.+130    	; 0x14da <enu_SetInterruptMode+0x11e>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	3e c0       	rjmp	.+124    	; 0x14da <enu_SetInterruptMode+0x11e>
            break;
        }

        case TIMER_2:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	88 23       	and	r24, r24
    1462:	e9 f4       	brne	.+58     	; 0x149e <enu_SetInterruptMode+0xe2>
            {
                //Clearing bit 6 (TOIE2)
                TIMSK &= (0xBF);
    1464:	a9 e5       	ldi	r26, 0x59	; 89
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e9 e5       	ldi	r30, 0x59	; 89
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8f 7b       	andi	r24, 0xBF	; 191
    1470:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE2);
    1472:	a9 e5       	ldi	r26, 0x59	; 89
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e9 e5       	ldi	r30, 0x59	; 89
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	28 2f       	mov	r18, r24
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	00 24       	eor	r0, r0
    1486:	96 95       	lsr	r25
    1488:	87 95       	ror	r24
    148a:	07 94       	ror	r0
    148c:	96 95       	lsr	r25
    148e:	87 95       	ror	r24
    1490:	07 94       	ror	r0
    1492:	98 2f       	mov	r25, r24
    1494:	80 2d       	mov	r24, r0
    1496:	82 2b       	or	r24, r18
    1498:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    149a:	19 82       	std	Y+1, r1	; 0x01
    149c:	1e c0       	rjmp	.+60     	; 0x14da <enu_SetInterruptMode+0x11e>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	c9 f4       	brne	.+50     	; 0x14d6 <enu_SetInterruptMode+0x11a>
            {
                //Clearing bit 7 (OCIE2)
                TIMSK &= (0x7F);
    14a4:	a9 e5       	ldi	r26, 0x59	; 89
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e9 e5       	ldi	r30, 0x59	; 89
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	8f 77       	andi	r24, 0x7F	; 127
    14b0:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE2);
    14b2:	a9 e5       	ldi	r26, 0x59	; 89
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e9 e5       	ldi	r30, 0x59	; 89
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	28 2f       	mov	r18, r24
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	96 95       	lsr	r25
    14c6:	98 2f       	mov	r25, r24
    14c8:	88 27       	eor	r24, r24
    14ca:	97 95       	ror	r25
    14cc:	87 95       	ror	r24
    14ce:	82 2b       	or	r24, r18
    14d0:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    14d2:	19 82       	std	Y+1, r1	; 0x01
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <enu_SetInterruptMode+0x11e>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	89 83       	std	Y+1, r24	; 0x01
        Local_u8_ErrorFlag - ES_OUT_OF_RANGE;
        break;
    }


    return Local_u8_ErrorFlag;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
}
    14dc:	26 96       	adiw	r28, 0x06	; 6
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <enu_SetOCxBehavior>:

static ErrorState_t enu_SetOCxBehavior(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_OCxPinBehavior)
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <enu_SetOCxBehavior+0x6>
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <enu_SetOCxBehavior+0x8>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <enu_SetOCxBehavior+0xa>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	8a 83       	std	Y+2, r24	; 0x02
    14fe:	6b 83       	std	Y+3, r22	; 0x03
    1500:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3e 83       	std	Y+6, r19	; 0x06
    150e:	2d 83       	std	Y+5, r18	; 0x05
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <enu_SetOCxBehavior+0x2e>
    151a:	c7 c0       	rjmp	.+398    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
    151c:	2d 81       	ldd	r18, Y+5	; 0x05
    151e:	3e 81       	ldd	r19, Y+6	; 0x06
    1520:	22 30       	cpi	r18, 0x02	; 2
    1522:	31 05       	cpc	r19, r1
    1524:	09 f4       	brne	.+2      	; 0x1528 <enu_SetOCxBehavior+0x3a>
    1526:	62 c0       	rjmp	.+196    	; 0x15ec <enu_SetOCxBehavior+0xfe>
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	9e 81       	ldd	r25, Y+6	; 0x06
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	09 f0       	breq	.+2      	; 0x1532 <enu_SetOCxBehavior+0x44>
    1530:	ba c0       	rjmp	.+372    	; 0x16a6 <enu_SetOCxBehavior+0x1b8>
    {
        case TIMER_0:
        {   
            //Clearing bits 5 and 4
            TCCR0 &= (0xCF);
    1532:	a3 e5       	ldi	r26, 0x53	; 83
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e3 e5       	ldi	r30, 0x53	; 83
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	8f 7c       	andi	r24, 0xCF	; 207
    153e:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	88 23       	and	r24, r24
    1544:	11 f4       	brne	.+4      	; 0x154a <enu_SetOCxBehavior+0x5c>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    1546:	19 82       	std	Y+1, r1	; 0x01
    1548:	b0 c0       	rjmp	.+352    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	88 23       	and	r24, r24
    154e:	19 f0       	breq	.+6      	; 0x1556 <enu_SetOCxBehavior+0x68>
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	39 f5       	brne	.+78     	; 0x15a4 <enu_SetOCxBehavior+0xb6>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	49 f4       	brne	.+18     	; 0x156e <enu_SetOCxBehavior+0x80>
                {
                    //Bits contain 01
                    TCCR0 |= (1 << TCCR0_COM00);
    155c:	a3 e5       	ldi	r26, 0x53	; 83
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e3 e5       	ldi	r30, 0x53	; 83
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	80 61       	ori	r24, 0x10	; 16
    1568:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    156a:	19 82       	std	Y+1, r1	; 0x01
    156c:	9e c0       	rjmp	.+316    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	49 f4       	brne	.+18     	; 0x1586 <enu_SetOCxBehavior+0x98>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    1574:	a3 e5       	ldi	r26, 0x53	; 83
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e3 e5       	ldi	r30, 0x53	; 83
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	80 62       	ori	r24, 0x20	; 32
    1580:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1582:	19 82       	std	Y+1, r1	; 0x01
    1584:	92 c0       	rjmp	.+292    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	49 f4       	brne	.+18     	; 0x159e <enu_SetOCxBehavior+0xb0>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    158c:	a3 e5       	ldi	r26, 0x53	; 83
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e3 e5       	ldi	r30, 0x53	; 83
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	80 63       	ori	r24, 0x30	; 48
    1598:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    159a:	19 82       	std	Y+1, r1	; 0x01
    159c:	86 c0       	rjmp	.+268    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    159e:	82 e0       	ldi	r24, 0x02	; 2
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	83 c0       	rjmp	.+262    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	82 30       	cpi	r24, 0x02	; 2
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <enu_SetOCxBehavior+0xc2>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	d9 f4       	brne	.+54     	; 0x15e6 <enu_SetOCxBehavior+0xf8>
            {
                //PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING)
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	84 30       	cpi	r24, 0x04	; 4
    15b4:	49 f4       	brne	.+18     	; 0x15c8 <enu_SetOCxBehavior+0xda>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    15b6:	a3 e5       	ldi	r26, 0x53	; 83
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e3 e5       	ldi	r30, 0x53	; 83
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	80 62       	ori	r24, 0x20	; 32
    15c2:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    15c4:	19 82       	std	Y+1, r1	; 0x01
    15c6:	71 c0       	rjmp	.+226    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING)
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	85 30       	cpi	r24, 0x05	; 5
    15cc:	49 f4       	brne	.+18     	; 0x15e0 <enu_SetOCxBehavior+0xf2>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    15ce:	a3 e5       	ldi	r26, 0x53	; 83
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e3 e5       	ldi	r30, 0x53	; 83
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 63       	ori	r24, 0x30	; 48
    15da:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    15dc:	19 82       	std	Y+1, r1	; 0x01
    15de:	65 c0       	rjmp	.+202    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	62 c0       	rjmp	.+196    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	5f c0       	rjmp	.+190    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
        
        case TIMER_2:
        {
            
            //Clearing bits 5 and 4
            TCCR2 &= (0xCF);
    15ec:	a5 e4       	ldi	r26, 0x45	; 69
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e4       	ldi	r30, 0x45	; 69
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8f 7c       	andi	r24, 0xCF	; 207
    15f8:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	88 23       	and	r24, r24
    15fe:	11 f4       	brne	.+4      	; 0x1604 <enu_SetOCxBehavior+0x116>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    1600:	19 82       	std	Y+1, r1	; 0x01
    1602:	53 c0       	rjmp	.+166    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	88 23       	and	r24, r24
    1608:	19 f0       	breq	.+6      	; 0x1610 <enu_SetOCxBehavior+0x122>
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	39 f5       	brne	.+78     	; 0x165e <enu_SetOCxBehavior+0x170>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	49 f4       	brne	.+18     	; 0x1628 <enu_SetOCxBehavior+0x13a>
                {
                    //Bits contain 01
                    TCCR2 |= (1 << TCCR2_COM20);
    1616:	a5 e4       	ldi	r26, 0x45	; 69
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e5 e4       	ldi	r30, 0x45	; 69
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 61       	ori	r24, 0x10	; 16
    1622:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1624:	19 82       	std	Y+1, r1	; 0x01
    1626:	41 c0       	rjmp	.+130    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	49 f4       	brne	.+18     	; 0x1640 <enu_SetOCxBehavior+0x152>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    162e:	a5 e4       	ldi	r26, 0x45	; 69
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e5 e4       	ldi	r30, 0x45	; 69
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	80 62       	ori	r24, 0x20	; 32
    163a:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    163c:	19 82       	std	Y+1, r1	; 0x01
    163e:	35 c0       	rjmp	.+106    	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	83 30       	cpi	r24, 0x03	; 3
    1644:	49 f4       	brne	.+18     	; 0x1658 <enu_SetOCxBehavior+0x16a>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    1646:	a5 e4       	ldi	r26, 0x45	; 69
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e5 e4       	ldi	r30, 0x45	; 69
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	80 63       	ori	r24, 0x30	; 48
    1652:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1654:	19 82       	std	Y+1, r1	; 0x01
    1656:	29 c0       	rjmp	.+82     	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	26 c0       	rjmp	.+76     	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	19 f0       	breq	.+6      	; 0x166a <enu_SetOCxBehavior+0x17c>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	83 30       	cpi	r24, 0x03	; 3
    1668:	d9 f4       	brne	.+54     	; 0x16a0 <enu_SetOCxBehavior+0x1b2>
            {
                //PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING)
    166a:	8c 81       	ldd	r24, Y+4	; 0x04
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	49 f4       	brne	.+18     	; 0x1682 <enu_SetOCxBehavior+0x194>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    1670:	a5 e4       	ldi	r26, 0x45	; 69
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e5 e4       	ldi	r30, 0x45	; 69
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	80 62       	ori	r24, 0x20	; 32
    167c:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    167e:	19 82       	std	Y+1, r1	; 0x01
    1680:	14 c0       	rjmp	.+40     	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING)
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	85 30       	cpi	r24, 0x05	; 5
    1686:	49 f4       	brne	.+18     	; 0x169a <enu_SetOCxBehavior+0x1ac>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    1688:	a5 e4       	ldi	r26, 0x45	; 69
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e5 e4       	ldi	r30, 0x45	; 69
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	80 63       	ori	r24, 0x30	; 48
    1694:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1696:	19 82       	std	Y+1, r1	; 0x01
    1698:	08 c0       	rjmp	.+16     	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <enu_SetOCxBehavior+0x1bc>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <enu_SetOCxBehavior+0x1bc>
            }
            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	26 96       	adiw	r28, 0x06	; 6
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
    16c6:	78 94       	sei
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
    16d6:	f8 94       	cli

    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <EXTI_enu_Initialization+0x6>
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    16ec:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    16ee:	19 82       	std	Y+1, r1	; 0x01
    16f0:	3b c0       	rjmp	.+118    	; 0x1768 <EXTI_enu_Initialization+0x8a>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	c9 01       	movw	r24, r18
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	82 0f       	add	r24, r18
    1700:	93 1f       	adc	r25, r19
    1702:	fc 01       	movw	r30, r24
    1704:	e1 59       	subi	r30, 0x91	; 145
    1706:	fe 4f       	sbci	r31, 0xFE	; 254
    1708:	40 81       	ld	r20, Z
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	c9 01       	movw	r24, r18
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	82 0f       	add	r24, r18
    1718:	93 1f       	adc	r25, r19
    171a:	fc 01       	movw	r30, r24
    171c:	e0 59       	subi	r30, 0x90	; 144
    171e:	fe 4f       	sbci	r31, 0xFE	; 254
    1720:	90 81       	ld	r25, Z
    1722:	84 2f       	mov	r24, r20
    1724:	69 2f       	mov	r22, r25
    1726:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	c9 01       	movw	r24, r18
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	82 0f       	add	r24, r18
    1738:	93 1f       	adc	r25, r19
    173a:	fc 01       	movw	r30, r24
    173c:	e1 59       	subi	r30, 0x91	; 145
    173e:	fe 4f       	sbci	r31, 0xFE	; 254
    1740:	40 81       	ld	r20, Z
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	c9 01       	movw	r24, r18
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	82 0f       	add	r24, r18
    1750:	93 1f       	adc	r25, r19
    1752:	fc 01       	movw	r30, r24
    1754:	ef 58       	subi	r30, 0x8F	; 143
    1756:	fe 4f       	sbci	r31, 0xFE	; 254
    1758:	90 81       	ld	r25, Z
    175a:	84 2f       	mov	r24, r20
    175c:	69 2f       	mov	r22, r25
    175e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <enu_SetSenseLevel>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	90 91 6e 01 	lds	r25, 0x016E
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	89 17       	cp	r24, r25
    1770:	08 f4       	brcc	.+2      	; 0x1774 <EXTI_enu_Initialization+0x96>
    1772:	bf cf       	rjmp	.-130    	; 0x16f2 <EXTI_enu_Initialization+0x14>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    }
    
    Local_u8_ErrorFlag = ES_OK;
    1774:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <EXTI_enu_ISC+0x6>
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	8a 83       	std	Y+2, r24	; 0x02
    1790:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	6b 81       	ldd	r22, Y+3	; 0x03
    179a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <enu_SetSenseLevel>
    179e:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <EXTI_enu_INTMode+0x6>
    17b4:	0f 92       	push	r0
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	8a 83       	std	Y+2, r24	; 0x02
    17bc:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	6b 81       	ldd	r22, Y+3	; 0x03
    17c6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <enu_SetMode>
    17ca:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <EXTI_enu_GetPIF+0x6>
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <EXTI_enu_GetPIF+0x8>
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <EXTI_enu_GetPIF+0xa>
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	8a 83       	std	Y+2, r24	; 0x02
    17ea:	7c 83       	std	Y+4, r23	; 0x04
    17ec:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	d1 f1       	breq	.+116    	; 0x186e <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	3e 83       	std	Y+6, r19	; 0x06
    1802:	2d 83       	std	Y+5, r18	; 0x05
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	91 05       	cpc	r25, r1
    180c:	b1 f0       	breq	.+44     	; 0x183a <EXTI_enu_GetPIF+0x60>
    180e:	2d 81       	ldd	r18, Y+5	; 0x05
    1810:	3e 81       	ldd	r19, Y+6	; 0x06
    1812:	22 30       	cpi	r18, 0x02	; 2
    1814:	31 05       	cpc	r19, r1
    1816:	e1 f0       	breq	.+56     	; 0x1850 <EXTI_enu_GetPIF+0x76>
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	21 f5       	brne	.+72     	; 0x1868 <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
    1820:	ea e5       	ldi	r30, 0x5A	; 90
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	82 95       	swap	r24
    1828:	86 95       	lsr	r24
    182a:	86 95       	lsr	r24
    182c:	83 70       	andi	r24, 0x03	; 3
    182e:	81 70       	andi	r24, 0x01	; 1
    1830:	eb 81       	ldd	r30, Y+3	; 0x03
    1832:	fc 81       	ldd	r31, Y+4	; 0x04
    1834:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    1836:	19 82       	std	Y+1, r1	; 0x01
    1838:	1c c0       	rjmp	.+56     	; 0x1872 <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
    183a:	ea e5       	ldi	r30, 0x5A	; 90
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	88 1f       	adc	r24, r24
    1842:	88 27       	eor	r24, r24
    1844:	88 1f       	adc	r24, r24
    1846:	eb 81       	ldd	r30, Y+3	; 0x03
    1848:	fc 81       	ldd	r31, Y+4	; 0x04
    184a:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    184c:	19 82       	std	Y+1, r1	; 0x01
    184e:	11 c0       	rjmp	.+34     	; 0x1872 <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
    1850:	ea e5       	ldi	r30, 0x5A	; 90
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	82 95       	swap	r24
    1858:	86 95       	lsr	r24
    185a:	87 70       	andi	r24, 0x07	; 7
    185c:	81 70       	andi	r24, 0x01	; 1
    185e:	eb 81       	ldd	r30, Y+3	; 0x03
    1860:	fc 81       	ldd	r31, Y+4	; 0x04
    1862:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    1864:	19 82       	std	Y+1, r1	; 0x01
    1866:	05 c0       	rjmp	.+10     	; 0x1872 <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
}
    1874:	26 96       	adiw	r28, 0x06	; 6
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <EXTI_enu_SeTPIF>:

extern ErrorState_t EXTI_enu_SeTPIF (u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <EXTI_enu_SeTPIF+0x6>
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	8a 83       	std	Y+2, r24	; 0x02
    1894:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, Copy_u8_Value);
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	6b 81       	ldd	r22, Y+3	; 0x03
    189e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <enu_SetFlagValue>
    18a2:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void))
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <EXTI_enu_SetCallBack+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <EXTI_enu_SetCallBack+0x8>
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	8a 83       	std	Y+2, r24	; 0x02
    18c0:	7c 83       	std	Y+4, r23	; 0x04
    18c2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	61 f0       	breq	.+24     	; 0x18e8 <EXTI_enu_SetCallBack+0x36>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	fc 01       	movw	r30, r24
    18dc:	ec 52       	subi	r30, 0x2C	; 44
    18de:	fe 4f       	sbci	r31, 0xFE	; 254
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    }

    return Local_u8_ErrorFlag;
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
    18f8:	1f 92       	push	r1
    18fa:	0f 92       	push	r0
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	0f 92       	push	r0
    1900:	11 24       	eor	r1, r1
    1902:	2f 93       	push	r18
    1904:	3f 93       	push	r19
    1906:	4f 93       	push	r20
    1908:	5f 93       	push	r21
    190a:	6f 93       	push	r22
    190c:	7f 93       	push	r23
    190e:	8f 93       	push	r24
    1910:	9f 93       	push	r25
    1912:	af 93       	push	r26
    1914:	bf 93       	push	r27
    1916:	ef 93       	push	r30
    1918:	ff 93       	push	r31
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
    1922:	80 91 d4 01 	lds	r24, 0x01D4
    1926:	90 91 d5 01 	lds	r25, 0x01D5
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	29 f0       	breq	.+10     	; 0x1938 <__vector_1+0x40>
    {
        pfun_ISRPointers[EXTI_INT0] ();
    192e:	e0 91 d4 01 	lds	r30, 0x01D4
    1932:	f0 91 d5 01 	lds	r31, 0x01D5
    1936:	09 95       	icall
    }
}
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	ff 91       	pop	r31
    193e:	ef 91       	pop	r30
    1940:	bf 91       	pop	r27
    1942:	af 91       	pop	r26
    1944:	9f 91       	pop	r25
    1946:	8f 91       	pop	r24
    1948:	7f 91       	pop	r23
    194a:	6f 91       	pop	r22
    194c:	5f 91       	pop	r21
    194e:	4f 91       	pop	r20
    1950:	3f 91       	pop	r19
    1952:	2f 91       	pop	r18
    1954:	0f 90       	pop	r0
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	0f 90       	pop	r0
    195a:	1f 90       	pop	r1
    195c:	18 95       	reti

0000195e <__vector_2>:
//INT1
void __vector_2 (void)
{
    195e:	1f 92       	push	r1
    1960:	0f 92       	push	r0
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	0f 92       	push	r0
    1966:	11 24       	eor	r1, r1
    1968:	2f 93       	push	r18
    196a:	3f 93       	push	r19
    196c:	4f 93       	push	r20
    196e:	5f 93       	push	r21
    1970:	6f 93       	push	r22
    1972:	7f 93       	push	r23
    1974:	8f 93       	push	r24
    1976:	9f 93       	push	r25
    1978:	af 93       	push	r26
    197a:	bf 93       	push	r27
    197c:	ef 93       	push	r30
    197e:	ff 93       	push	r31
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
    1988:	80 91 d6 01 	lds	r24, 0x01D6
    198c:	90 91 d7 01 	lds	r25, 0x01D7
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	29 f0       	breq	.+10     	; 0x199e <__vector_2+0x40>
    {
        pfun_ISRPointers[EXTI_INT1] ();
    1994:	e0 91 d6 01 	lds	r30, 0x01D6
    1998:	f0 91 d7 01 	lds	r31, 0x01D7
    199c:	09 95       	icall
    }
}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	ff 91       	pop	r31
    19a4:	ef 91       	pop	r30
    19a6:	bf 91       	pop	r27
    19a8:	af 91       	pop	r26
    19aa:	9f 91       	pop	r25
    19ac:	8f 91       	pop	r24
    19ae:	7f 91       	pop	r23
    19b0:	6f 91       	pop	r22
    19b2:	5f 91       	pop	r21
    19b4:	4f 91       	pop	r20
    19b6:	3f 91       	pop	r19
    19b8:	2f 91       	pop	r18
    19ba:	0f 90       	pop	r0
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	0f 90       	pop	r0
    19c0:	1f 90       	pop	r1
    19c2:	18 95       	reti

000019c4 <__vector_3>:
//INT2
void __vector_3 (void)
{
    19c4:	1f 92       	push	r1
    19c6:	0f 92       	push	r0
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	0f 92       	push	r0
    19cc:	11 24       	eor	r1, r1
    19ce:	2f 93       	push	r18
    19d0:	3f 93       	push	r19
    19d2:	4f 93       	push	r20
    19d4:	5f 93       	push	r21
    19d6:	6f 93       	push	r22
    19d8:	7f 93       	push	r23
    19da:	8f 93       	push	r24
    19dc:	9f 93       	push	r25
    19de:	af 93       	push	r26
    19e0:	bf 93       	push	r27
    19e2:	ef 93       	push	r30
    19e4:	ff 93       	push	r31
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
    19ee:	80 91 d8 01 	lds	r24, 0x01D8
    19f2:	90 91 d9 01 	lds	r25, 0x01D9
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	29 f0       	breq	.+10     	; 0x1a04 <__vector_3+0x40>
    {
        pfun_ISRPointers[EXTI_INT2] ();
    19fa:	e0 91 d8 01 	lds	r30, 0x01D8
    19fe:	f0 91 d9 01 	lds	r31, 0x01D9
    1a02:	09 95       	icall
    }
    
}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	ff 91       	pop	r31
    1a0a:	ef 91       	pop	r30
    1a0c:	bf 91       	pop	r27
    1a0e:	af 91       	pop	r26
    1a10:	9f 91       	pop	r25
    1a12:	8f 91       	pop	r24
    1a14:	7f 91       	pop	r23
    1a16:	6f 91       	pop	r22
    1a18:	5f 91       	pop	r21
    1a1a:	4f 91       	pop	r20
    1a1c:	3f 91       	pop	r19
    1a1e:	2f 91       	pop	r18
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti

00001a2a <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <enu_SetMode+0x6>
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <enu_SetMode+0x8>
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	8a 83       	std	Y+2, r24	; 0x02
    1a3a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	3d 83       	std	Y+5, r19	; 0x05
    1a48:	2c 83       	std	Y+4, r18	; 0x04
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	91 05       	cpc	r25, r1
    1a52:	29 f1       	breq	.+74     	; 0x1a9e <enu_SetMode+0x74>
    1a54:	2c 81       	ldd	r18, Y+4	; 0x04
    1a56:	3d 81       	ldd	r19, Y+5	; 0x05
    1a58:	22 30       	cpi	r18, 0x02	; 2
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	d9 f1       	breq	.+118    	; 0x1ad4 <enu_SetMode+0xaa>
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	9d 81       	ldd	r25, Y+5	; 0x05
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <enu_SetMode+0x3e>
    1a66:	51 c0       	rjmp	.+162    	; 0x1b0a <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	49 f4       	brne	.+18     	; 0x1a80 <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
    1a6e:	ab e5       	ldi	r26, 0x5B	; 91
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	eb e5       	ldi	r30, 0x5B	; 91
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	80 64       	ori	r24, 0x40	; 64
    1a7a:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1a7c:	19 82       	std	Y+1, r1	; 0x01
    1a7e:	47 c0       	rjmp	.+142    	; 0x1b0e <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	88 23       	and	r24, r24
    1a84:	49 f4       	brne	.+18     	; 0x1a98 <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
    1a86:	ab e5       	ldi	r26, 0x5B	; 91
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	eb e5       	ldi	r30, 0x5B	; 91
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 7b       	andi	r24, 0xBF	; 191
    1a92:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1a94:	19 82       	std	Y+1, r1	; 0x01
    1a96:	3b c0       	rjmp	.+118    	; 0x1b0e <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1a98:	82 e0       	ldi	r24, 0x02	; 2
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	38 c0       	rjmp	.+112    	; 0x1b0e <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	49 f4       	brne	.+18     	; 0x1ab6 <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
    1aa4:	ab e5       	ldi	r26, 0x5B	; 91
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	eb e5       	ldi	r30, 0x5B	; 91
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	80 68       	ori	r24, 0x80	; 128
    1ab0:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1ab2:	19 82       	std	Y+1, r1	; 0x01
    1ab4:	2c c0       	rjmp	.+88     	; 0x1b0e <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	88 23       	and	r24, r24
    1aba:	49 f4       	brne	.+18     	; 0x1ace <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
    1abc:	ab e5       	ldi	r26, 0x5B	; 91
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	eb e5       	ldi	r30, 0x5B	; 91
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	8f 77       	andi	r24, 0x7F	; 127
    1ac8:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1aca:	19 82       	std	Y+1, r1	; 0x01
    1acc:	20 c0       	rjmp	.+64     	; 0x1b0e <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	1d c0       	rjmp	.+58     	; 0x1b0e <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	49 f4       	brne	.+18     	; 0x1aec <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
    1ada:	ab e5       	ldi	r26, 0x5B	; 91
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	eb e5       	ldi	r30, 0x5B	; 91
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 62       	ori	r24, 0x20	; 32
    1ae6:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1ae8:	19 82       	std	Y+1, r1	; 0x01
    1aea:	11 c0       	rjmp	.+34     	; 0x1b0e <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	88 23       	and	r24, r24
    1af0:	49 f4       	brne	.+18     	; 0x1b04 <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
    1af2:	ab e5       	ldi	r26, 0x5B	; 91
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	eb e5       	ldi	r30, 0x5B	; 91
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8f 7d       	andi	r24, 0xDF	; 223
    1afe:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1b00:	19 82       	std	Y+1, r1	; 0x01
    1b02:	05 c0       	rjmp	.+10     	; 0x1b0e <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1b0a:	82 e0       	ldi	r24, 0x02	; 2
    1b0c:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <enu_SetSenseLevel+0x6>
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <enu_SetSenseLevel+0x8>
    1b28:	0f 92       	push	r0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	8a 83       	std	Y+2, r24	; 0x02
    1b30:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	3d 83       	std	Y+5, r19	; 0x05
    1b3e:	2c 83       	std	Y+4, r18	; 0x04
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	9d 81       	ldd	r25, Y+5	; 0x05
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	91 05       	cpc	r25, r1
    1b48:	e9 f1       	breq	.+122    	; 0x1bc4 <enu_SetSenseLevel+0xa4>
    1b4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	31 05       	cpc	r19, r1
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <enu_SetSenseLevel+0x36>
    1b54:	69 c0       	rjmp	.+210    	; 0x1c28 <enu_SetSenseLevel+0x108>
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <enu_SetSenseLevel+0x40>
    1b5e:	7c c0       	rjmp	.+248    	; 0x1c58 <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
    1b60:	a5 e5       	ldi	r26, 0x55	; 85
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e5 e5       	ldi	r30, 0x55	; 85
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	8c 7f       	andi	r24, 0xFC	; 252
    1b6c:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	88 23       	and	r24, r24
    1b72:	11 f4       	brne	.+4      	; 0x1b78 <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    1b74:	19 82       	std	Y+1, r1	; 0x01
    1b76:	72 c0       	rjmp	.+228    	; 0x1c5c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	49 f4       	brne	.+18     	; 0x1b90 <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
    1b7e:	a5 e5       	ldi	r26, 0x55	; 85
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e5       	ldi	r30, 0x55	; 85
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	81 60       	ori	r24, 0x01	; 1
    1b8a:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1b8c:	19 82       	std	Y+1, r1	; 0x01
    1b8e:	66 c0       	rjmp	.+204    	; 0x1c5c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	82 30       	cpi	r24, 0x02	; 2
    1b94:	41 f4       	brne	.+16     	; 0x1ba6 <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
    1b96:	a5 e5       	ldi	r26, 0x55	; 85
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e5 e5       	ldi	r30, 0x55	; 85
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	82 60       	ori	r24, 0x02	; 2
    1ba2:	8c 93       	st	X, r24
    1ba4:	5b c0       	rjmp	.+182    	; 0x1c5c <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	83 30       	cpi	r24, 0x03	; 3
    1baa:	49 f4       	brne	.+18     	; 0x1bbe <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
    1bac:	a5 e5       	ldi	r26, 0x55	; 85
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e5 e5       	ldi	r30, 0x55	; 85
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	83 60       	ori	r24, 0x03	; 3
    1bb8:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1bba:	19 82       	std	Y+1, r1	; 0x01
    1bbc:	4f c0       	rjmp	.+158    	; 0x1c5c <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	4c c0       	rjmp	.+152    	; 0x1c5c <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
    1bc4:	a5 e5       	ldi	r26, 0x55	; 85
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e5 e5       	ldi	r30, 0x55	; 85
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	83 7f       	andi	r24, 0xF3	; 243
    1bd0:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	88 23       	and	r24, r24
    1bd6:	11 f4       	brne	.+4      	; 0x1bdc <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    1bd8:	19 82       	std	Y+1, r1	; 0x01
    1bda:	40 c0       	rjmp	.+128    	; 0x1c5c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	49 f4       	brne	.+18     	; 0x1bf4 <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
    1be2:	a5 e5       	ldi	r26, 0x55	; 85
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e5 e5       	ldi	r30, 0x55	; 85
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	84 60       	ori	r24, 0x04	; 4
    1bee:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1bf0:	19 82       	std	Y+1, r1	; 0x01
    1bf2:	34 c0       	rjmp	.+104    	; 0x1c5c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	82 30       	cpi	r24, 0x02	; 2
    1bf8:	41 f4       	brne	.+16     	; 0x1c0a <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
    1bfa:	a5 e5       	ldi	r26, 0x55	; 85
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e5 e5       	ldi	r30, 0x55	; 85
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	88 60       	ori	r24, 0x08	; 8
    1c06:	8c 93       	st	X, r24
    1c08:	29 c0       	rjmp	.+82     	; 0x1c5c <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	83 30       	cpi	r24, 0x03	; 3
    1c0e:	49 f4       	brne	.+18     	; 0x1c22 <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
    1c10:	a5 e5       	ldi	r26, 0x55	; 85
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e5 e5       	ldi	r30, 0x55	; 85
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	8c 60       	ori	r24, 0x0C	; 12
    1c1c:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1c1e:	19 82       	std	Y+1, r1	; 0x01
    1c20:	1d c0       	rjmp	.+58     	; 0x1c5c <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	1a c0       	rjmp	.+52     	; 0x1c5c <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	82 30       	cpi	r24, 0x02	; 2
    1c2c:	49 f4       	brne	.+18     	; 0x1c40 <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
    1c2e:	a4 e5       	ldi	r26, 0x54	; 84
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e4 e5       	ldi	r30, 0x54	; 84
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	8f 7b       	andi	r24, 0xBF	; 191
    1c3a:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1c3c:	19 82       	std	Y+1, r1	; 0x01
    1c3e:	0e c0       	rjmp	.+28     	; 0x1c5c <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	83 30       	cpi	r24, 0x03	; 3
    1c44:	59 f4       	brne	.+22     	; 0x1c5c <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
    1c46:	a4 e5       	ldi	r26, 0x54	; 84
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e4 e5       	ldi	r30, 0x54	; 84
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	80 64       	ori	r24, 0x40	; 64
    1c52:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1c54:	19 82       	std	Y+1, r1	; 0x01
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <enu_SetFlagValue+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <enu_SetFlagValue+0x8>
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	3d 83       	std	Y+5, r19	; 0x05
    1c8c:	2c 83       	std	Y+4, r18	; 0x04
    1c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c90:	9d 81       	ldd	r25, Y+5	; 0x05
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	91 05       	cpc	r25, r1
    1c96:	29 f1       	breq	.+74     	; 0x1ce2 <enu_SetFlagValue+0x74>
    1c98:	2c 81       	ldd	r18, Y+4	; 0x04
    1c9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c9c:	22 30       	cpi	r18, 0x02	; 2
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	d9 f1       	breq	.+118    	; 0x1d18 <enu_SetFlagValue+0xaa>
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <enu_SetFlagValue+0x3e>
    1caa:	51 c0       	rjmp	.+162    	; 0x1d4e <enu_SetFlagValue+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	49 f4       	brne	.+18     	; 0x1cc4 <enu_SetFlagValue+0x56>
            {
                GIFR |= ( 1 << GIFR_INTF0);
    1cb2:	aa e5       	ldi	r26, 0x5A	; 90
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	ea e5       	ldi	r30, 0x5A	; 90
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	80 64       	ori	r24, 0x40	; 64
    1cbe:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1cc0:	19 82       	std	Y+1, r1	; 0x01
    1cc2:	47 c0       	rjmp	.+142    	; 0x1d52 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	88 23       	and	r24, r24
    1cc8:	49 f4       	brne	.+18     	; 0x1cdc <enu_SetFlagValue+0x6e>
            {
                GIFR &= ~( 1 << GIFR_INTF0);
    1cca:	aa e5       	ldi	r26, 0x5A	; 90
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	ea e5       	ldi	r30, 0x5A	; 90
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8f 7b       	andi	r24, 0xBF	; 191
    1cd6:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1cd8:	19 82       	std	Y+1, r1	; 0x01
    1cda:	3b c0       	rjmp	.+118    	; 0x1d52 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	38 c0       	rjmp	.+112    	; 0x1d52 <enu_SetFlagValue+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	49 f4       	brne	.+18     	; 0x1cfa <enu_SetFlagValue+0x8c>
            {
                GIFR |= ( 1 << GIFR_INTF1);
    1ce8:	aa e5       	ldi	r26, 0x5A	; 90
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	ea e5       	ldi	r30, 0x5A	; 90
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	80 68       	ori	r24, 0x80	; 128
    1cf4:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1cf6:	19 82       	std	Y+1, r1	; 0x01
    1cf8:	2c c0       	rjmp	.+88     	; 0x1d52 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	88 23       	and	r24, r24
    1cfe:	49 f4       	brne	.+18     	; 0x1d12 <enu_SetFlagValue+0xa4>
            {
                GIFR &= ~( 1 << GIFR_INTF1);
    1d00:	aa e5       	ldi	r26, 0x5A	; 90
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	ea e5       	ldi	r30, 0x5A	; 90
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	8f 77       	andi	r24, 0x7F	; 127
    1d0c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1d0e:	19 82       	std	Y+1, r1	; 0x01
    1d10:	20 c0       	rjmp	.+64     	; 0x1d52 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	1d c0       	rjmp	.+58     	; 0x1d52 <enu_SetFlagValue+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	49 f4       	brne	.+18     	; 0x1d30 <enu_SetFlagValue+0xc2>
            {
                GIFR |= ( 1 << GIFR_INTF2);
    1d1e:	aa e5       	ldi	r26, 0x5A	; 90
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	ea e5       	ldi	r30, 0x5A	; 90
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	80 62       	ori	r24, 0x20	; 32
    1d2a:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1d2c:	19 82       	std	Y+1, r1	; 0x01
    1d2e:	11 c0       	rjmp	.+34     	; 0x1d52 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	88 23       	and	r24, r24
    1d34:	49 f4       	brne	.+18     	; 0x1d48 <enu_SetFlagValue+0xda>
            {
                GIFR &= ~( 1 << GIFR_INTF2);
    1d36:	aa e5       	ldi	r26, 0x5A	; 90
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	ea e5       	ldi	r30, 0x5A	; 90
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	8f 7d       	andi	r24, 0xDF	; 223
    1d42:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1d44:	19 82       	std	Y+1, r1	; 0x01
    1d46:	05 c0       	rjmp	.+10     	; 0x1d52 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <enu_SetFlagValue+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	0f 92       	push	r0
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    1d72:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <DIO_enu_SetPinDiretion+0x6>
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <DIO_enu_SetPinDiretion+0x8>
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <DIO_enu_SetPinDiretion+0xa>
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	8a 83       	std	Y+2, r24	; 0x02
    1d8e:	6b 83       	std	Y+3, r22	; 0x03
    1d90:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	84 30       	cpi	r24, 0x04	; 4
    1d9a:	08 f0       	brcs	.+2      	; 0x1d9e <DIO_enu_SetPinDiretion+0x20>
    1d9c:	d0 c0       	rjmp	.+416    	; 0x1f3e <DIO_enu_SetPinDiretion+0x1c0>
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	88 30       	cpi	r24, 0x08	; 8
    1da2:	08 f0       	brcs	.+2      	; 0x1da6 <DIO_enu_SetPinDiretion+0x28>
    1da4:	cc c0       	rjmp	.+408    	; 0x1f3e <DIO_enu_SetPinDiretion+0x1c0>
    1da6:	8c 81       	ldd	r24, Y+4	; 0x04
    1da8:	82 30       	cpi	r24, 0x02	; 2
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <DIO_enu_SetPinDiretion+0x30>
    1dac:	c8 c0       	rjmp	.+400    	; 0x1f3e <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	3e 83       	std	Y+6, r19	; 0x06
    1db6:	2d 83       	std	Y+5, r18	; 0x05
    1db8:	6d 81       	ldd	r22, Y+5	; 0x05
    1dba:	7e 81       	ldd	r23, Y+6	; 0x06
    1dbc:	61 30       	cpi	r22, 0x01	; 1
    1dbe:	71 05       	cpc	r23, r1
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <DIO_enu_SetPinDiretion+0x46>
    1dc2:	41 c0       	rjmp	.+130    	; 0x1e46 <DIO_enu_SetPinDiretion+0xc8>
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc8:	82 30       	cpi	r24, 0x02	; 2
    1dca:	91 05       	cpc	r25, r1
    1dcc:	34 f4       	brge	.+12     	; 0x1dda <DIO_enu_SetPinDiretion+0x5c>
    1dce:	2d 81       	ldd	r18, Y+5	; 0x05
    1dd0:	3e 81       	ldd	r19, Y+6	; 0x06
    1dd2:	21 15       	cp	r18, r1
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	71 f0       	breq	.+28     	; 0x1df4 <DIO_enu_SetPinDiretion+0x76>
    1dd8:	b0 c0       	rjmp	.+352    	; 0x1f3a <DIO_enu_SetPinDiretion+0x1bc>
    1dda:	6d 81       	ldd	r22, Y+5	; 0x05
    1ddc:	7e 81       	ldd	r23, Y+6	; 0x06
    1dde:	62 30       	cpi	r22, 0x02	; 2
    1de0:	71 05       	cpc	r23, r1
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <DIO_enu_SetPinDiretion+0x68>
    1de4:	59 c0       	rjmp	.+178    	; 0x1e98 <DIO_enu_SetPinDiretion+0x11a>
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	83 30       	cpi	r24, 0x03	; 3
    1dec:	91 05       	cpc	r25, r1
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <DIO_enu_SetPinDiretion+0x74>
    1df0:	7c c0       	rjmp	.+248    	; 0x1eea <DIO_enu_SetPinDiretion+0x16c>
    1df2:	a3 c0       	rjmp	.+326    	; 0x1f3a <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    1df4:	aa e3       	ldi	r26, 0x3A	; 58
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	ea e3       	ldi	r30, 0x3A	; 58
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	48 2f       	mov	r20, r24
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <DIO_enu_SetPinDiretion+0x92>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	2a 95       	dec	r18
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <DIO_enu_SetPinDiretion+0x8e>
    1e14:	80 95       	com	r24
    1e16:	84 23       	and	r24, r20
    1e18:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    1e1a:	aa e3       	ldi	r26, 0x3A	; 58
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	ea e3       	ldi	r30, 0x3A	; 58
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8c 81       	ldd	r24, Y+4	; 0x04
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	88 2f       	mov	r24, r24
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	b9 01       	movw	r22, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_enu_SetPinDiretion+0xbc>
    1e36:	66 0f       	add	r22, r22
    1e38:	77 1f       	adc	r23, r23
    1e3a:	8a 95       	dec	r24
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_enu_SetPinDiretion+0xb8>
    1e3e:	cb 01       	movw	r24, r22
    1e40:	84 2b       	or	r24, r20
    1e42:	8c 93       	st	X, r24
    1e44:	7a c0       	rjmp	.+244    	; 0x1f3a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    1e46:	a7 e3       	ldi	r26, 0x37	; 55
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e7 e3       	ldi	r30, 0x37	; 55
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	48 2f       	mov	r20, r24
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <DIO_enu_SetPinDiretion+0xe4>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	2a 95       	dec	r18
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <DIO_enu_SetPinDiretion+0xe0>
    1e66:	80 95       	com	r24
    1e68:	84 23       	and	r24, r20
    1e6a:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    1e6c:	a7 e3       	ldi	r26, 0x37	; 55
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e7 e3       	ldi	r30, 0x37	; 55
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	48 2f       	mov	r20, r24
    1e78:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	88 2f       	mov	r24, r24
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	b9 01       	movw	r22, r18
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <DIO_enu_SetPinDiretion+0x10e>
    1e88:	66 0f       	add	r22, r22
    1e8a:	77 1f       	adc	r23, r23
    1e8c:	8a 95       	dec	r24
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <DIO_enu_SetPinDiretion+0x10a>
    1e90:	cb 01       	movw	r24, r22
    1e92:	84 2b       	or	r24, r20
    1e94:	8c 93       	st	X, r24
    1e96:	51 c0       	rjmp	.+162    	; 0x1f3a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    1e98:	a4 e3       	ldi	r26, 0x34	; 52
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e4 e3       	ldi	r30, 0x34	; 52
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	48 2f       	mov	r20, r24
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <DIO_enu_SetPinDiretion+0x136>
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	2a 95       	dec	r18
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <DIO_enu_SetPinDiretion+0x132>
    1eb8:	80 95       	com	r24
    1eba:	84 23       	and	r24, r20
    1ebc:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    1ebe:	a4 e3       	ldi	r26, 0x34	; 52
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e4 e3       	ldi	r30, 0x34	; 52
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	48 2f       	mov	r20, r24
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	b9 01       	movw	r22, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <DIO_enu_SetPinDiretion+0x160>
    1eda:	66 0f       	add	r22, r22
    1edc:	77 1f       	adc	r23, r23
    1ede:	8a 95       	dec	r24
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <DIO_enu_SetPinDiretion+0x15c>
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	84 2b       	or	r24, r20
    1ee6:	8c 93       	st	X, r24
    1ee8:	28 c0       	rjmp	.+80     	; 0x1f3a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    1eea:	a1 e3       	ldi	r26, 0x31	; 49
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e1 e3       	ldi	r30, 0x31	; 49
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	48 2f       	mov	r20, r24
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_enu_SetPinDiretion+0x188>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	2a 95       	dec	r18
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <DIO_enu_SetPinDiretion+0x184>
    1f0a:	80 95       	com	r24
    1f0c:	84 23       	and	r24, r20
    1f0e:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    1f10:	a1 e3       	ldi	r26, 0x31	; 49
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e1 e3       	ldi	r30, 0x31	; 49
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	48 2f       	mov	r20, r24
    1f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	b9 01       	movw	r22, r18
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <DIO_enu_SetPinDiretion+0x1b2>
    1f2c:	66 0f       	add	r22, r22
    1f2e:	77 1f       	adc	r23, r23
    1f30:	8a 95       	dec	r24
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <DIO_enu_SetPinDiretion+0x1ae>
    1f34:	cb 01       	movw	r24, r22
    1f36:	84 2b       	or	r24, r20
    1f38:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1f3a:	19 82       	std	Y+1, r1	; 0x01
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f44:	26 96       	adiw	r28, 0x06	; 6
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <DIO_enu_SetPinState+0x6>
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <DIO_enu_SetPinState+0x8>
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <DIO_enu_SetPinState+0xa>
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	8a 83       	std	Y+2, r24	; 0x02
    1f66:	6b 83       	std	Y+3, r22	; 0x03
    1f68:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	84 30       	cpi	r24, 0x04	; 4
    1f72:	08 f0       	brcs	.+2      	; 0x1f76 <DIO_enu_SetPinState+0x20>
    1f74:	d0 c0       	rjmp	.+416    	; 0x2116 <DIO_enu_SetPinState+0x1c0>
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	88 30       	cpi	r24, 0x08	; 8
    1f7a:	08 f0       	brcs	.+2      	; 0x1f7e <DIO_enu_SetPinState+0x28>
    1f7c:	cc c0       	rjmp	.+408    	; 0x2116 <DIO_enu_SetPinState+0x1c0>
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	82 30       	cpi	r24, 0x02	; 2
    1f82:	08 f0       	brcs	.+2      	; 0x1f86 <DIO_enu_SetPinState+0x30>
    1f84:	c8 c0       	rjmp	.+400    	; 0x2116 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	3e 83       	std	Y+6, r19	; 0x06
    1f8e:	2d 83       	std	Y+5, r18	; 0x05
    1f90:	6d 81       	ldd	r22, Y+5	; 0x05
    1f92:	7e 81       	ldd	r23, Y+6	; 0x06
    1f94:	61 30       	cpi	r22, 0x01	; 1
    1f96:	71 05       	cpc	r23, r1
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <DIO_enu_SetPinState+0x46>
    1f9a:	41 c0       	rjmp	.+130    	; 0x201e <DIO_enu_SetPinState+0xc8>
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	82 30       	cpi	r24, 0x02	; 2
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	34 f4       	brge	.+12     	; 0x1fb2 <DIO_enu_SetPinState+0x5c>
    1fa6:	2d 81       	ldd	r18, Y+5	; 0x05
    1fa8:	3e 81       	ldd	r19, Y+6	; 0x06
    1faa:	21 15       	cp	r18, r1
    1fac:	31 05       	cpc	r19, r1
    1fae:	71 f0       	breq	.+28     	; 0x1fcc <DIO_enu_SetPinState+0x76>
    1fb0:	b0 c0       	rjmp	.+352    	; 0x2112 <DIO_enu_SetPinState+0x1bc>
    1fb2:	6d 81       	ldd	r22, Y+5	; 0x05
    1fb4:	7e 81       	ldd	r23, Y+6	; 0x06
    1fb6:	62 30       	cpi	r22, 0x02	; 2
    1fb8:	71 05       	cpc	r23, r1
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <DIO_enu_SetPinState+0x68>
    1fbc:	59 c0       	rjmp	.+178    	; 0x2070 <DIO_enu_SetPinState+0x11a>
    1fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc2:	83 30       	cpi	r24, 0x03	; 3
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <DIO_enu_SetPinState+0x74>
    1fc8:	7c c0       	rjmp	.+248    	; 0x20c2 <DIO_enu_SetPinState+0x16c>
    1fca:	a3 c0       	rjmp	.+326    	; 0x2112 <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    1fcc:	ab e3       	ldi	r26, 0x3B	; 59
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	eb e3       	ldi	r30, 0x3B	; 59
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <DIO_enu_SetPinState+0x92>
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	2a 95       	dec	r18
    1fea:	e2 f7       	brpl	.-8      	; 0x1fe4 <DIO_enu_SetPinState+0x8e>
    1fec:	80 95       	com	r24
    1fee:	84 23       	and	r24, r20
    1ff0:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1ff2:	ab e3       	ldi	r26, 0x3B	; 59
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	eb e3       	ldi	r30, 0x3B	; 59
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	48 2f       	mov	r20, r24
    1ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	b9 01       	movw	r22, r18
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <DIO_enu_SetPinState+0xbc>
    200e:	66 0f       	add	r22, r22
    2010:	77 1f       	adc	r23, r23
    2012:	8a 95       	dec	r24
    2014:	e2 f7       	brpl	.-8      	; 0x200e <DIO_enu_SetPinState+0xb8>
    2016:	cb 01       	movw	r24, r22
    2018:	84 2b       	or	r24, r20
    201a:	8c 93       	st	X, r24
    201c:	7a c0       	rjmp	.+244    	; 0x2112 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    201e:	a8 e3       	ldi	r26, 0x38	; 56
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e8 e3       	ldi	r30, 0x38	; 56
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 c0       	rjmp	.+4      	; 0x203a <DIO_enu_SetPinState+0xe4>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	2a 95       	dec	r18
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <DIO_enu_SetPinState+0xe0>
    203e:	80 95       	com	r24
    2040:	84 23       	and	r24, r20
    2042:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2044:	a8 e3       	ldi	r26, 0x38	; 56
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e8 e3       	ldi	r30, 0x38	; 56
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	48 2f       	mov	r20, r24
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	88 2f       	mov	r24, r24
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	b9 01       	movw	r22, r18
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <DIO_enu_SetPinState+0x10e>
    2060:	66 0f       	add	r22, r22
    2062:	77 1f       	adc	r23, r23
    2064:	8a 95       	dec	r24
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <DIO_enu_SetPinState+0x10a>
    2068:	cb 01       	movw	r24, r22
    206a:	84 2b       	or	r24, r20
    206c:	8c 93       	st	X, r24
    206e:	51 c0       	rjmp	.+162    	; 0x2112 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    2070:	a5 e3       	ldi	r26, 0x35	; 53
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e5 e3       	ldi	r30, 0x35	; 53
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	48 2f       	mov	r20, r24
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	02 c0       	rjmp	.+4      	; 0x208c <DIO_enu_SetPinState+0x136>
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	2a 95       	dec	r18
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <DIO_enu_SetPinState+0x132>
    2090:	80 95       	com	r24
    2092:	84 23       	and	r24, r20
    2094:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2096:	a5 e3       	ldi	r26, 0x35	; 53
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e5 e3       	ldi	r30, 0x35	; 53
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	48 2f       	mov	r20, r24
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	b9 01       	movw	r22, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <DIO_enu_SetPinState+0x160>
    20b2:	66 0f       	add	r22, r22
    20b4:	77 1f       	adc	r23, r23
    20b6:	8a 95       	dec	r24
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <DIO_enu_SetPinState+0x15c>
    20ba:	cb 01       	movw	r24, r22
    20bc:	84 2b       	or	r24, r20
    20be:	8c 93       	st	X, r24
    20c0:	28 c0       	rjmp	.+80     	; 0x2112 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    20c2:	a2 e3       	ldi	r26, 0x32	; 50
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e2 e3       	ldi	r30, 0x32	; 50
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	48 2f       	mov	r20, r24
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <DIO_enu_SetPinState+0x188>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	2a 95       	dec	r18
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <DIO_enu_SetPinState+0x184>
    20e2:	80 95       	com	r24
    20e4:	84 23       	and	r24, r20
    20e6:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    20e8:	a2 e3       	ldi	r26, 0x32	; 50
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e2 e3       	ldi	r30, 0x32	; 50
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	48 2f       	mov	r20, r24
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	b9 01       	movw	r22, r18
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <DIO_enu_SetPinState+0x1b2>
    2104:	66 0f       	add	r22, r22
    2106:	77 1f       	adc	r23, r23
    2108:	8a 95       	dec	r24
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <DIO_enu_SetPinState+0x1ae>
    210c:	cb 01       	movw	r24, r22
    210e:	84 2b       	or	r24, r20
    2110:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2112:	19 82       	std	Y+1, r1	; 0x01
    2114:	02 c0       	rjmp	.+4      	; 0x211a <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    211a:	89 81       	ldd	r24, Y+1	; 0x01
}
    211c:	26 96       	adiw	r28, 0x06	; 6
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	00 d0       	rcall	.+0      	; 0x2134 <DIO_enu_SetPinValue+0x6>
    2134:	00 d0       	rcall	.+0      	; 0x2136 <DIO_enu_SetPinValue+0x8>
    2136:	00 d0       	rcall	.+0      	; 0x2138 <DIO_enu_SetPinValue+0xa>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	8a 83       	std	Y+2, r24	; 0x02
    213e:	6b 83       	std	Y+3, r22	; 0x03
    2140:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	84 30       	cpi	r24, 0x04	; 4
    214a:	08 f0       	brcs	.+2      	; 0x214e <DIO_enu_SetPinValue+0x20>
    214c:	db c0       	rjmp	.+438    	; 0x2304 <DIO_enu_SetPinValue+0x1d6>
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	88 30       	cpi	r24, 0x08	; 8
    2152:	08 f0       	brcs	.+2      	; 0x2156 <DIO_enu_SetPinValue+0x28>
    2154:	d7 c0       	rjmp	.+430    	; 0x2304 <DIO_enu_SetPinValue+0x1d6>
    2156:	8c 81       	ldd	r24, Y+4	; 0x04
    2158:	82 30       	cpi	r24, 0x02	; 2
    215a:	08 f0       	brcs	.+2      	; 0x215e <DIO_enu_SetPinValue+0x30>
    215c:	d3 c0       	rjmp	.+422    	; 0x2304 <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	3e 83       	std	Y+6, r19	; 0x06
    2166:	2d 83       	std	Y+5, r18	; 0x05
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	91 05       	cpc	r25, r1
    2170:	09 f4       	brne	.+2      	; 0x2174 <DIO_enu_SetPinValue+0x46>
    2172:	43 c0       	rjmp	.+134    	; 0x21fa <DIO_enu_SetPinValue+0xcc>
    2174:	2d 81       	ldd	r18, Y+5	; 0x05
    2176:	3e 81       	ldd	r19, Y+6	; 0x06
    2178:	22 30       	cpi	r18, 0x02	; 2
    217a:	31 05       	cpc	r19, r1
    217c:	2c f4       	brge	.+10     	; 0x2188 <DIO_enu_SetPinValue+0x5a>
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	71 f0       	breq	.+28     	; 0x21a2 <DIO_enu_SetPinValue+0x74>
    2186:	bc c0       	rjmp	.+376    	; 0x2300 <DIO_enu_SetPinValue+0x1d2>
    2188:	2d 81       	ldd	r18, Y+5	; 0x05
    218a:	3e 81       	ldd	r19, Y+6	; 0x06
    218c:	22 30       	cpi	r18, 0x02	; 2
    218e:	31 05       	cpc	r19, r1
    2190:	09 f4       	brne	.+2      	; 0x2194 <DIO_enu_SetPinValue+0x66>
    2192:	5f c0       	rjmp	.+190    	; 0x2252 <DIO_enu_SetPinValue+0x124>
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	83 30       	cpi	r24, 0x03	; 3
    219a:	91 05       	cpc	r25, r1
    219c:	09 f4       	brne	.+2      	; 0x21a0 <DIO_enu_SetPinValue+0x72>
    219e:	85 c0       	rjmp	.+266    	; 0x22aa <DIO_enu_SetPinValue+0x17c>
    21a0:	af c0       	rjmp	.+350    	; 0x2300 <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    21a2:	8c 81       	ldd	r24, Y+4	; 0x04
    21a4:	81 30       	cpi	r24, 0x01	; 1
    21a6:	a1 f4       	brne	.+40     	; 0x21d0 <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    21a8:	ab e3       	ldi	r26, 0x3B	; 59
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	eb e3       	ldi	r30, 0x3B	; 59
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	48 2f       	mov	r20, r24
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	02 2e       	mov	r0, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <DIO_enu_SetPinValue+0x98>
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	0a 94       	dec	r0
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <DIO_enu_SetPinValue+0x94>
    21ca:	84 2b       	or	r24, r20
    21cc:	8c 93       	st	X, r24
    21ce:	98 c0       	rjmp	.+304    	; 0x2300 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    21d0:	ab e3       	ldi	r26, 0x3B	; 59
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	eb e3       	ldi	r30, 0x3B	; 59
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	48 2f       	mov	r20, r24
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	02 2e       	mov	r0, r18
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <DIO_enu_SetPinValue+0xc0>
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	0a 94       	dec	r0
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <DIO_enu_SetPinValue+0xbc>
    21f2:	80 95       	com	r24
    21f4:	84 23       	and	r24, r20
    21f6:	8c 93       	st	X, r24
    21f8:	83 c0       	rjmp	.+262    	; 0x2300 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    21fa:	8c 81       	ldd	r24, Y+4	; 0x04
    21fc:	81 30       	cpi	r24, 0x01	; 1
    21fe:	a1 f4       	brne	.+40     	; 0x2228 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    2200:	a8 e3       	ldi	r26, 0x38	; 56
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e8 e3       	ldi	r30, 0x38	; 56
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	48 2f       	mov	r20, r24
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	02 2e       	mov	r0, r18
    2218:	02 c0       	rjmp	.+4      	; 0x221e <DIO_enu_SetPinValue+0xf0>
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	0a 94       	dec	r0
    2220:	e2 f7       	brpl	.-8      	; 0x221a <DIO_enu_SetPinValue+0xec>
    2222:	84 2b       	or	r24, r20
    2224:	8c 93       	st	X, r24
    2226:	6c c0       	rjmp	.+216    	; 0x2300 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    2228:	a8 e3       	ldi	r26, 0x38	; 56
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e8 e3       	ldi	r30, 0x38	; 56
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	48 2f       	mov	r20, r24
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	02 2e       	mov	r0, r18
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <DIO_enu_SetPinValue+0x118>
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	0a 94       	dec	r0
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <DIO_enu_SetPinValue+0x114>
    224a:	80 95       	com	r24
    224c:	84 23       	and	r24, r20
    224e:	8c 93       	st	X, r24
    2250:	57 c0       	rjmp	.+174    	; 0x2300 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    2252:	8c 81       	ldd	r24, Y+4	; 0x04
    2254:	81 30       	cpi	r24, 0x01	; 1
    2256:	a1 f4       	brne	.+40     	; 0x2280 <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    2258:	a5 e3       	ldi	r26, 0x35	; 53
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e5 e3       	ldi	r30, 0x35	; 53
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	48 2f       	mov	r20, r24
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	02 2e       	mov	r0, r18
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <DIO_enu_SetPinValue+0x148>
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	0a 94       	dec	r0
    2278:	e2 f7       	brpl	.-8      	; 0x2272 <DIO_enu_SetPinValue+0x144>
    227a:	84 2b       	or	r24, r20
    227c:	8c 93       	st	X, r24
    227e:	40 c0       	rjmp	.+128    	; 0x2300 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    2280:	a5 e3       	ldi	r26, 0x35	; 53
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e5 e3       	ldi	r30, 0x35	; 53
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	48 2f       	mov	r20, r24
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	02 2e       	mov	r0, r18
    2298:	02 c0       	rjmp	.+4      	; 0x229e <DIO_enu_SetPinValue+0x170>
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	0a 94       	dec	r0
    22a0:	e2 f7       	brpl	.-8      	; 0x229a <DIO_enu_SetPinValue+0x16c>
    22a2:	80 95       	com	r24
    22a4:	84 23       	and	r24, r20
    22a6:	8c 93       	st	X, r24
    22a8:	2b c0       	rjmp	.+86     	; 0x2300 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    22aa:	8c 81       	ldd	r24, Y+4	; 0x04
    22ac:	81 30       	cpi	r24, 0x01	; 1
    22ae:	a1 f4       	brne	.+40     	; 0x22d8 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    22b0:	a2 e3       	ldi	r26, 0x32	; 50
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e2 e3       	ldi	r30, 0x32	; 50
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	48 2f       	mov	r20, r24
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	02 2e       	mov	r0, r18
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <DIO_enu_SetPinValue+0x1a0>
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	0a 94       	dec	r0
    22d0:	e2 f7       	brpl	.-8      	; 0x22ca <DIO_enu_SetPinValue+0x19c>
    22d2:	84 2b       	or	r24, r20
    22d4:	8c 93       	st	X, r24
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    22d8:	a2 e3       	ldi	r26, 0x32	; 50
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e2 e3       	ldi	r30, 0x32	; 50
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	48 2f       	mov	r20, r24
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	28 2f       	mov	r18, r24
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	02 2e       	mov	r0, r18
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <DIO_enu_SetPinValue+0x1c8>
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	0a 94       	dec	r0
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <DIO_enu_SetPinValue+0x1c4>
    22fa:	80 95       	com	r24
    22fc:	84 23       	and	r24, r20
    22fe:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2300:	19 82       	std	Y+1, r1	; 0x01
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2308:	89 81       	ldd	r24, Y+1	; 0x01
}
    230a:	26 96       	adiw	r28, 0x06	; 6
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	00 d0       	rcall	.+0      	; 0x2322 <DIO_enu_TogglePinValue+0x6>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <DIO_enu_TogglePinValue+0x8>
    2324:	0f 92       	push	r0
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	8a 83       	std	Y+2, r24	; 0x02
    232c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	84 30       	cpi	r24, 0x04	; 4
    2336:	08 f0       	brcs	.+2      	; 0x233a <DIO_enu_TogglePinValue+0x1e>
    2338:	73 c0       	rjmp	.+230    	; 0x2420 <DIO_enu_TogglePinValue+0x104>
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	88 30       	cpi	r24, 0x08	; 8
    233e:	08 f0       	brcs	.+2      	; 0x2342 <DIO_enu_TogglePinValue+0x26>
    2340:	6f c0       	rjmp	.+222    	; 0x2420 <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3d 83       	std	Y+5, r19	; 0x05
    234a:	2c 83       	std	Y+4, r18	; 0x04
    234c:	8c 81       	ldd	r24, Y+4	; 0x04
    234e:	9d 81       	ldd	r25, Y+5	; 0x05
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	91 05       	cpc	r25, r1
    2354:	49 f1       	breq	.+82     	; 0x23a8 <DIO_enu_TogglePinValue+0x8c>
    2356:	2c 81       	ldd	r18, Y+4	; 0x04
    2358:	3d 81       	ldd	r19, Y+5	; 0x05
    235a:	22 30       	cpi	r18, 0x02	; 2
    235c:	31 05       	cpc	r19, r1
    235e:	2c f4       	brge	.+10     	; 0x236a <DIO_enu_TogglePinValue+0x4e>
    2360:	8c 81       	ldd	r24, Y+4	; 0x04
    2362:	9d 81       	ldd	r25, Y+5	; 0x05
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	61 f0       	breq	.+24     	; 0x2380 <DIO_enu_TogglePinValue+0x64>
    2368:	5a c0       	rjmp	.+180    	; 0x241e <DIO_enu_TogglePinValue+0x102>
    236a:	2c 81       	ldd	r18, Y+4	; 0x04
    236c:	3d 81       	ldd	r19, Y+5	; 0x05
    236e:	22 30       	cpi	r18, 0x02	; 2
    2370:	31 05       	cpc	r19, r1
    2372:	71 f1       	breq	.+92     	; 0x23d0 <DIO_enu_TogglePinValue+0xb4>
    2374:	8c 81       	ldd	r24, Y+4	; 0x04
    2376:	9d 81       	ldd	r25, Y+5	; 0x05
    2378:	83 30       	cpi	r24, 0x03	; 3
    237a:	91 05       	cpc	r25, r1
    237c:	e9 f1       	breq	.+122    	; 0x23f8 <DIO_enu_TogglePinValue+0xdc>
    237e:	4f c0       	rjmp	.+158    	; 0x241e <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    2380:	ab e3       	ldi	r26, 0x3B	; 59
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	eb e3       	ldi	r30, 0x3B	; 59
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	48 2f       	mov	r20, r24
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	02 2e       	mov	r0, r18
    2398:	02 c0       	rjmp	.+4      	; 0x239e <DIO_enu_TogglePinValue+0x82>
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	0a 94       	dec	r0
    23a0:	e2 f7       	brpl	.-8      	; 0x239a <DIO_enu_TogglePinValue+0x7e>
    23a2:	84 27       	eor	r24, r20
    23a4:	8c 93       	st	X, r24
    23a6:	3b c0       	rjmp	.+118    	; 0x241e <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    23a8:	a8 e3       	ldi	r26, 0x38	; 56
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e8 e3       	ldi	r30, 0x38	; 56
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	48 2f       	mov	r20, r24
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	02 2e       	mov	r0, r18
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <DIO_enu_TogglePinValue+0xaa>
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	0a 94       	dec	r0
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <DIO_enu_TogglePinValue+0xa6>
    23ca:	84 27       	eor	r24, r20
    23cc:	8c 93       	st	X, r24
    23ce:	27 c0       	rjmp	.+78     	; 0x241e <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    23d0:	a5 e3       	ldi	r26, 0x35	; 53
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	e5 e3       	ldi	r30, 0x35	; 53
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	48 2f       	mov	r20, r24
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	02 2e       	mov	r0, r18
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <DIO_enu_TogglePinValue+0xd2>
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	0a 94       	dec	r0
    23f0:	e2 f7       	brpl	.-8      	; 0x23ea <DIO_enu_TogglePinValue+0xce>
    23f2:	84 27       	eor	r24, r20
    23f4:	8c 93       	st	X, r24
    23f6:	13 c0       	rjmp	.+38     	; 0x241e <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    23f8:	a2 e3       	ldi	r26, 0x32	; 50
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e2 e3       	ldi	r30, 0x32	; 50
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	48 2f       	mov	r20, r24
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	02 2e       	mov	r0, r18
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <DIO_enu_TogglePinValue+0xfa>
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	0a 94       	dec	r0
    2418:	e2 f7       	brpl	.-8      	; 0x2412 <DIO_enu_TogglePinValue+0xf6>
    241a:	84 27       	eor	r24, r20
    241c:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    241e:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    2420:	89 81       	ldd	r24, Y+1	; 0x01
}
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	27 97       	sbiw	r28, 0x07	; 7
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	8a 83       	std	Y+2, r24	; 0x02
    2448:	6b 83       	std	Y+3, r22	; 0x03
    244a:	5d 83       	std	Y+5, r21	; 0x05
    244c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	9d 81       	ldd	r25, Y+5	; 0x05
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	09 f4       	brne	.+2      	; 0x245c <DIO_enu_GetPinValue+0x2a>
    245a:	7d c0       	rjmp	.+250    	; 0x2556 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	84 30       	cpi	r24, 0x04	; 4
    2460:	08 f0       	brcs	.+2      	; 0x2464 <DIO_enu_GetPinValue+0x32>
    2462:	76 c0       	rjmp	.+236    	; 0x2550 <DIO_enu_GetPinValue+0x11e>
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	88 30       	cpi	r24, 0x08	; 8
    2468:	08 f0       	brcs	.+2      	; 0x246c <DIO_enu_GetPinValue+0x3a>
    246a:	72 c0       	rjmp	.+228    	; 0x2550 <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	3f 83       	std	Y+7, r19	; 0x07
    2474:	2e 83       	std	Y+6, r18	; 0x06
    2476:	4e 81       	ldd	r20, Y+6	; 0x06
    2478:	5f 81       	ldd	r21, Y+7	; 0x07
    247a:	41 30       	cpi	r20, 0x01	; 1
    247c:	51 05       	cpc	r21, r1
    247e:	59 f1       	breq	.+86     	; 0x24d6 <DIO_enu_GetPinValue+0xa4>
    2480:	8e 81       	ldd	r24, Y+6	; 0x06
    2482:	9f 81       	ldd	r25, Y+7	; 0x07
    2484:	82 30       	cpi	r24, 0x02	; 2
    2486:	91 05       	cpc	r25, r1
    2488:	34 f4       	brge	.+12     	; 0x2496 <DIO_enu_GetPinValue+0x64>
    248a:	2e 81       	ldd	r18, Y+6	; 0x06
    248c:	3f 81       	ldd	r19, Y+7	; 0x07
    248e:	21 15       	cp	r18, r1
    2490:	31 05       	cpc	r19, r1
    2492:	69 f0       	breq	.+26     	; 0x24ae <DIO_enu_GetPinValue+0x7c>
    2494:	5b c0       	rjmp	.+182    	; 0x254c <DIO_enu_GetPinValue+0x11a>
    2496:	4e 81       	ldd	r20, Y+6	; 0x06
    2498:	5f 81       	ldd	r21, Y+7	; 0x07
    249a:	42 30       	cpi	r20, 0x02	; 2
    249c:	51 05       	cpc	r21, r1
    249e:	79 f1       	breq	.+94     	; 0x24fe <DIO_enu_GetPinValue+0xcc>
    24a0:	8e 81       	ldd	r24, Y+6	; 0x06
    24a2:	9f 81       	ldd	r25, Y+7	; 0x07
    24a4:	83 30       	cpi	r24, 0x03	; 3
    24a6:	91 05       	cpc	r25, r1
    24a8:	09 f4       	brne	.+2      	; 0x24ac <DIO_enu_GetPinValue+0x7a>
    24aa:	3d c0       	rjmp	.+122    	; 0x2526 <DIO_enu_GetPinValue+0xf4>
    24ac:	4f c0       	rjmp	.+158    	; 0x254c <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    24ae:	e9 e3       	ldi	r30, 0x39	; 57
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	28 2f       	mov	r18, r24
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	88 2f       	mov	r24, r24
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	a9 01       	movw	r20, r18
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <DIO_enu_GetPinValue+0x94>
    24c2:	55 95       	asr	r21
    24c4:	47 95       	ror	r20
    24c6:	8a 95       	dec	r24
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <DIO_enu_GetPinValue+0x90>
    24ca:	ca 01       	movw	r24, r20
    24cc:	81 70       	andi	r24, 0x01	; 1
    24ce:	ec 81       	ldd	r30, Y+4	; 0x04
    24d0:	fd 81       	ldd	r31, Y+5	; 0x05
    24d2:	80 83       	st	Z, r24
    24d4:	3b c0       	rjmp	.+118    	; 0x254c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    24d6:	e6 e3       	ldi	r30, 0x36	; 54
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	88 2f       	mov	r24, r24
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	a9 01       	movw	r20, r18
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <DIO_enu_GetPinValue+0xbc>
    24ea:	55 95       	asr	r21
    24ec:	47 95       	ror	r20
    24ee:	8a 95       	dec	r24
    24f0:	e2 f7       	brpl	.-8      	; 0x24ea <DIO_enu_GetPinValue+0xb8>
    24f2:	ca 01       	movw	r24, r20
    24f4:	81 70       	andi	r24, 0x01	; 1
    24f6:	ec 81       	ldd	r30, Y+4	; 0x04
    24f8:	fd 81       	ldd	r31, Y+5	; 0x05
    24fa:	80 83       	st	Z, r24
    24fc:	27 c0       	rjmp	.+78     	; 0x254c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    24fe:	e3 e3       	ldi	r30, 0x33	; 51
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a9 01       	movw	r20, r18
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <DIO_enu_GetPinValue+0xe4>
    2512:	55 95       	asr	r21
    2514:	47 95       	ror	r20
    2516:	8a 95       	dec	r24
    2518:	e2 f7       	brpl	.-8      	; 0x2512 <DIO_enu_GetPinValue+0xe0>
    251a:	ca 01       	movw	r24, r20
    251c:	81 70       	andi	r24, 0x01	; 1
    251e:	ec 81       	ldd	r30, Y+4	; 0x04
    2520:	fd 81       	ldd	r31, Y+5	; 0x05
    2522:	80 83       	st	Z, r24
    2524:	13 c0       	rjmp	.+38     	; 0x254c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    2526:	e0 e3       	ldi	r30, 0x30	; 48
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	88 2f       	mov	r24, r24
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	a9 01       	movw	r20, r18
    2538:	02 c0       	rjmp	.+4      	; 0x253e <DIO_enu_GetPinValue+0x10c>
    253a:	55 95       	asr	r21
    253c:	47 95       	ror	r20
    253e:	8a 95       	dec	r24
    2540:	e2 f7       	brpl	.-8      	; 0x253a <DIO_enu_GetPinValue+0x108>
    2542:	ca 01       	movw	r24, r20
    2544:	81 70       	andi	r24, 0x01	; 1
    2546:	ec 81       	ldd	r30, Y+4	; 0x04
    2548:	fd 81       	ldd	r31, Y+5	; 0x05
    254a:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    254c:	19 82       	std	Y+1, r1	; 0x01
    254e:	05 c0       	rjmp	.+10     	; 0x255a <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2550:	82 e0       	ldi	r24, 0x02	; 2
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	02 c0       	rjmp	.+4      	; 0x255a <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2556:	83 e0       	ldi	r24, 0x03	; 3
    2558:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    255a:	89 81       	ldd	r24, Y+1	; 0x01
}
    255c:	27 96       	adiw	r28, 0x07	; 7
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <ADC_enu_Initialization>:
static void* pvid_ISRParameters = NULL;

//APIs implementation

extern ErrorState_t ADC_enu_Initialization(void)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	0f 92       	push	r0
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	89 83       	std	Y+1, r24	; 0x01

    //Bits contain 00
    ADMUX &= ~(3 << ADMUX_REFS0 );
    257c:	a7 e2       	ldi	r26, 0x27	; 39
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e7 e2       	ldi	r30, 0x27	; 39
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	8f 73       	andi	r24, 0x3F	; 63
    2588:	8c 93       	st	X, r24
        //bITS ALREADY CONTAIN 00  
    
    #elif ADC_V_REFERENCE_SOURCE == ADC_AVCC
       
        //Bits contain 01
        ADMUX |= (1 < ADMUX_REFS0);
    258a:	a7 e2       	ldi	r26, 0x27	; 39
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e7 e2       	ldi	r30, 0x27	; 39
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	81 60       	ori	r24, 0x01	; 1
    2596:	8c 93       	st	X, r24


    //Handling Data adjustment direction
    #if  ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED
        //Setting ADLAR bit
        ADMUX |= ( 1 << ADMUX_ADLAR);
    2598:	a7 e2       	ldi	r26, 0x27	; 39
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e7 e2       	ldi	r30, 0x27	; 39
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	80 62       	ori	r24, 0x20	; 32
    25a4:	8c 93       	st	X, r24
        ADCSRA &= ~( 1 << ADCSRA_ADATE);

    #elif  ADC_TRIGGER_SOURCE >= ADC_FREE_RUNNING &&  ADC_TRIGGER_SOURCE <= ADC_TIMER1_CAPTURE_EVENT

        //Clearing ADTS bits
        SFIOR &= (0X1F);
    25a6:	a0 e5       	ldi	r26, 0x50	; 80
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e0 e5       	ldi	r30, 0x50	; 80
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	8f 71       	andi	r24, 0x1F	; 31
    25b2:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (ADC_TRIGGER_SOURCE << SFIOR_ADTS0); 
    25b4:	a0 e5       	ldi	r26, 0x50	; 80
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e0 e5       	ldi	r30, 0x50	; 80
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	8c 93       	st	X, r24
        
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    25c0:	a6 e2       	ldi	r26, 0x26	; 38
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e6 e2       	ldi	r30, 0x26	; 38
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	80 62       	ori	r24, 0x20	; 32
    25cc:	8c 93       	st	X, r24
    #endif


    //Handling Interrupt Event Status (PIE)
    #if ADC_INT_EVENT_STATUS == ADC_INT_ENABLE
        ADCSRA |= ( 1 << ADCSRA_ADIE); //Bit contains 1 
    25ce:	a6 e2       	ldi	r26, 0x26	; 38
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e6 e2       	ldi	r30, 0x26	; 38
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	88 60       	ori	r24, 0x08	; 8
    25da:	8c 93       	st	X, r24
    #endif


    //Handling ADC clock speed
    //Clearing PS bits
    ADCSRA &= (0xF8);
    25dc:	a6 e2       	ldi	r26, 0x26	; 38
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e6 e2       	ldi	r30, 0x26	; 38
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	88 7f       	andi	r24, 0xF8	; 248
    25e8:	8c 93       	st	X, r24
    #if ADC_PS_FACTOR >= ADC_PS_2 && ADC_PS_FACTOR <= ADC_PS_128 
        
        ADCSRA |= (ADC_PS_FACTOR << ADCSRA_ADPS0);
    25ea:	a6 e2       	ldi	r26, 0x26	; 38
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e6 e2       	ldi	r30, 0x26	; 38
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	86 60       	ori	r24, 0x06	; 6
    25f6:	8c 93       	st	X, r24

    #endif


    //Handling input channels
    ADMUX &= (0xE0); //Clearing bits
    25f8:	a7 e2       	ldi	r26, 0x27	; 39
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e7 e2       	ldi	r30, 0x27	; 39
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	80 7e       	andi	r24, 0xE0	; 224
    2604:	8c 93       	st	X, r24
    #if ADC_INPUT_CHANNEL >= ADC_ADC0 && ADC_INPUT_CHANNEL <= ADC_V_GND
        //Channel Selection
        ADMUX |= (ADC_INPUT_CHANNEL << ADMUX_MUX0);
    2606:	a7 e2       	ldi	r26, 0x27	; 39
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e7 e2       	ldi	r30, 0x27	; 39
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	8c 93       	st	X, r24

    #endif


    // /Powering ADC
    ADCSRA |= (1 << ADCSRA_ADEN );
    2612:	a6 e2       	ldi	r26, 0x26	; 38
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e6 e2       	ldi	r30, 0x26	; 38
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	80 68       	ori	r24, 0x80	; 128
    261e:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    2620:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag; 
    2622:	89 81       	ldd	r24, Y+1	; 0x01
}
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <ADC_enu_ReadPolling>:

extern ErrorState_t ADC_enu_ReadPolling(u8 Copy_u8_Channel, u16* Copy_pu16_Result)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <ADC_enu_ReadPolling+0x6>
    2632:	00 d0       	rcall	.+0      	; 0x2634 <ADC_enu_ReadPolling+0x8>
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	8a 83       	std	Y+2, r24	; 0x02
    263a:	7c 83       	std	Y+4, r23	; 0x04
    263c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8_Channel >= ADC_ADC0) && (Copy_u8_Channel <= ADC_V_GND))
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	80 32       	cpi	r24, 0x20	; 32
    2646:	08 f0       	brcs	.+2      	; 0x264a <ADC_enu_ReadPolling+0x1e>
    2648:	50 c0       	rjmp	.+160    	; 0x26ea <ADC_enu_ReadPolling+0xbe>
    {
        //Clearing PIF, Assuming that the ADC is in Polling mode.
        ADCSRA |= (1 << ADCSRA_ADIF);
    264a:	a6 e2       	ldi	r26, 0x26	; 38
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e6 e2       	ldi	r30, 0x26	; 38
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	80 61       	ori	r24, 0x10	; 16
    2656:	8c 93       	st	X, r24
        
        //Clearing MUX it
        ADMUX &= (0xE0);
    2658:	a7 e2       	ldi	r26, 0x27	; 39
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e7 e2       	ldi	r30, 0x27	; 39
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	80 7e       	andi	r24, 0xE0	; 224
    2664:	8c 93       	st	X, r24

        //Choosing channel
        ADMUX |= (Copy_u8_Channel << ADMUX_MUX0);
    2666:	a7 e2       	ldi	r26, 0x27	; 39
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e7 e2       	ldi	r30, 0x27	; 39
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	90 81       	ld	r25, Z
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	89 2b       	or	r24, r25
    2674:	8c 93       	st	X, r24
       
        //Setting ADSC to start a conversion
        ADCSRA |= (1 << ADCSRA_ADSC);
    2676:	a6 e2       	ldi	r26, 0x26	; 38
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e6 e2       	ldi	r30, 0x26	; 38
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	80 64       	ori	r24, 0x40	; 64
    2682:	8c 93       	st	X, r24

        //Waiting for ADC to raise ADIF
        while (((ADCSRA >> ADCSRA_ADIF) & 1) == False);
    2684:	e6 e2       	ldi	r30, 0x26	; 38
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	82 95       	swap	r24
    268c:	8f 70       	andi	r24, 0x0F	; 15
    268e:	88 2f       	mov	r24, r24
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	81 70       	andi	r24, 0x01	; 1
    2694:	90 70       	andi	r25, 0x00	; 0
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	a9 f3       	breq	.-22     	; 0x2684 <ADC_enu_ReadPolling+0x58>

        
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    269a:	e4 e2       	ldi	r30, 0x24	; 36
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	82 95       	swap	r24
    26a2:	86 95       	lsr	r24
    26a4:	86 95       	lsr	r24
    26a6:	83 70       	andi	r24, 0x03	; 3
    26a8:	88 2f       	mov	r24, r24
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	eb 81       	ldd	r30, Y+3	; 0x03
    26ae:	fc 81       	ldd	r31, Y+4	; 0x04
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    26b4:	eb 81       	ldd	r30, Y+3	; 0x03
    26b6:	fc 81       	ldd	r31, Y+4	; 0x04
    26b8:	20 81       	ld	r18, Z
    26ba:	31 81       	ldd	r19, Z+1	; 0x01
    26bc:	e5 e2       	ldi	r30, 0x25	; 37
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	82 2b       	or	r24, r18
    26d0:	93 2b       	or	r25, r19
    26d2:	eb 81       	ldd	r30, Y+3	; 0x03
    26d4:	fc 81       	ldd	r31, Y+4	; 0x04
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	80 83       	st	Z, r24
            *Copy_pu16_Result |= (u16)ADCH << 8;

        #endif
   
        //Clearing PIF
        ADCSRA |= (1 << ADCSRA_ADIF);
    26da:	a6 e2       	ldi	r26, 0x26	; 38
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e6 e2       	ldi	r30, 0x26	; 38
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	80 61       	ori	r24, 0x10	; 16
    26e6:	8c 93       	st	X, r24
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <ADC_enu_ReadPolling+0xc2>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    26ea:	82 e0       	ldi	r24, 0x02	; 2
    26ec:	89 83       	std	Y+1, r24	; 0x01
    }


    Local_u8_ErrorFlag = ES_OK;
    26ee:	19 82       	std	Y+1, r1	; 0x01
    

    


    return Local_u8_ErrorFlag;
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <ADC_enu_StartConversion>:

extern ErrorState_t ADC_enu_StartConversion(void)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	0f 92       	push	r0
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 <<ADCSRA_ADSC);
    270e:	a6 e2       	ldi	r26, 0x26	; 38
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e6 e2       	ldi	r30, 0x26	; 38
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	80 64       	ori	r24, 0x40	; 64
    271a:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    271c:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    271e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2720:	0f 90       	pop	r0
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <ADC_enu_SetTriggerringSource>:

extern ErrorState_t ADC_enu_SetTriggerringSource(u8 Copy_u8_TriggeringSource)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	00 d0       	rcall	.+0      	; 0x272e <ADC_enu_SetTriggerringSource+0x6>
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_u8_TriggeringSource == ADC_SINGLE_CONVERSION)
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	88 30       	cpi	r24, 0x08	; 8
    273c:	49 f4       	brne	.+18     	; 0x2750 <ADC_enu_SetTriggerringSource+0x28>
    {
        //Clearing ADATE bit
        ADCSRA &= ~(1 << ADCSRA_ADATE);
    273e:	a6 e2       	ldi	r26, 0x26	; 38
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e6 e2       	ldi	r30, 0x26	; 38
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	8f 7d       	andi	r24, 0xDF	; 223
    274a:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    274c:	19 82       	std	Y+1, r1	; 0x01
    274e:	28 c0       	rjmp	.+80     	; 0x27a0 <ADC_enu_SetTriggerringSource+0x78>
    }
    else if((Copy_u8_TriggeringSource >= ADC_FREE_RUNNING) && (Copy_u8_TriggeringSource <= ADC_TIMER1_CAPTURE_EVENT))
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	88 30       	cpi	r24, 0x08	; 8
    2754:	18 f5       	brcc	.+70     	; 0x279c <ADC_enu_SetTriggerringSource+0x74>
    {
        //Clearing ADTS bits
        SFIOR &= ~ (1 << SFIOR_ADTS0);
    2756:	a0 e5       	ldi	r26, 0x50	; 80
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e0 e5       	ldi	r30, 0x50	; 80
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	8f 7d       	andi	r24, 0xDF	; 223
    2762:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (Copy_u8_TriggeringSource << SFIOR_ADTS0);
    2764:	a0 e5       	ldi	r26, 0x50	; 80
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e0 e5       	ldi	r30, 0x50	; 80
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	28 2f       	mov	r18, r24
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	88 2f       	mov	r24, r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	82 95       	swap	r24
    277c:	92 95       	swap	r25
    277e:	90 7f       	andi	r25, 0xF0	; 240
    2780:	98 27       	eor	r25, r24
    2782:	80 7f       	andi	r24, 0xF0	; 240
    2784:	98 27       	eor	r25, r24
    2786:	82 2b       	or	r24, r18
    2788:	8c 93       	st	X, r24

        //Setting ADATE bit
        ADCSRA |= (1 << ADCSRA_ADATE);
    278a:	a6 e2       	ldi	r26, 0x26	; 38
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e6 e2       	ldi	r30, 0x26	; 38
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	80 62       	ori	r24, 0x20	; 32
    2796:	8c 93       	st	X, r24

        Local_u8_ErrorFlag =ES_OK;
    2798:	19 82       	std	Y+1, r1	; 0x01
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <ADC_enu_SetTriggerringSource+0x78>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    279c:	82 e0       	ldi	r24, 0x02	; 2
    279e:	89 83       	std	Y+1, r24	; 0x01
    }
        
        

    return Local_u8_ErrorFlag;
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <ADC_enu_ChangePrescalerFactor>:

extern ErrorState_t ADC_enu_ChangePrescalerFactor(u8 Copy_u8_DivisonFactor)
{
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <ADC_enu_ChangePrescalerFactor+0x6>
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_DivisonFactor >= ADC_PS_2) && (Copy_u8_DivisonFactor <= ADC_PS_128))
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	88 23       	and	r24, r24
    27c0:	a1 f0       	breq	.+40     	; 0x27ea <ADC_enu_ChangePrescalerFactor+0x3e>
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	88 30       	cpi	r24, 0x08	; 8
    27c6:	88 f4       	brcc	.+34     	; 0x27ea <ADC_enu_ChangePrescalerFactor+0x3e>
    {
        //Clearins PS bits
        ADCSRA &= ~ (7 << ADCSRA_ADPS0);
    27c8:	a6 e2       	ldi	r26, 0x26	; 38
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e6 e2       	ldi	r30, 0x26	; 38
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	88 7f       	andi	r24, 0xF8	; 248
    27d4:	8c 93       	st	X, r24

        //Choosing divisuon factor
        ADCSRA |=  (Copy_u8_DivisonFactor << ADCSRA_ADPS0);
    27d6:	a6 e2       	ldi	r26, 0x26	; 38
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e6 e2       	ldi	r30, 0x26	; 38
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	90 81       	ld	r25, Z
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	89 2b       	or	r24, r25
    27e4:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    27e6:	19 82       	std	Y+1, r1	; 0x01
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <ADC_enu_ChangePrescalerFactor+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    27ea:	82 e0       	ldi	r24, 0x02	; 2
    27ec:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <ADC_enu_ReadADCH>:

extern ErrorState_t ADC_enu_ReadADCH(u16* Copy_pu16_Result)
{
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <ADC_enu_ReadADCH+0x6>
    2800:	0f 92       	push	r0
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	9b 83       	std	Y+3, r25	; 0x03
    2808:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	89 83       	std	Y+1, r24	; 0x01


    if(Copy_pu16_Result)
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	9b 81       	ldd	r25, Y+3	; 0x03
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	79 f0       	breq	.+30     	; 0x2834 <ADC_enu_ReadADCH+0x3a>
            
            *Copy_pu16_Result = (u16)ADCH << 8;
        
        #else ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED

                *Copy_pu16_Result = (u16)ADCH << 2;
    2816:	e5 e2       	ldi	r30, 0x25	; 37
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	ea 81       	ldd	r30, Y+2	; 0x02
    282a:	fb 81       	ldd	r31, Y+3	; 0x03
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	80 83       	st	Z, r24

        #endif

        Local_u8_ErrorFlag = ES_OK;
    2830:	19 82       	std	Y+1, r1	; 0x01
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <ADC_enu_ReadADCH+0x3e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2834:	83 e0       	ldi	r24, 0x03	; 3
    2836:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    2838:	89 81       	ldd	r24, Y+1	; 0x01
}
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <ADC_enu_ReadADCL>:

extern ErrorState_t ADC_enu_ReadADCL(u16* Copy_pu16_Result)
{
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	00 d0       	rcall	.+0      	; 0x284c <ADC_enu_ReadADCL+0x6>
    284c:	0f 92       	push	r0
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	9b 83       	std	Y+3, r25	; 0x03
    2854:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	9b 81       	ldd	r25, Y+3	; 0x03
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	11 f0       	breq	.+4      	; 0x2866 <ADC_enu_ReadADCL+0x20>

            

        #endif

        Local_u8_ErrorFlag = ES_OK;
    2862:	19 82       	std	Y+1, r1	; 0x01
    2864:	02 c0       	rjmp	.+4      	; 0x286a <ADC_enu_ReadADCL+0x24>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2866:	83 e0       	ldi	r24, 0x03	; 3
    2868:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    286a:	89 81       	ldd	r24, Y+1	; 0x01
}
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <ADC_enu_ReadData>:

extern ErrorState_t ADC_enu_ReadData(u16* Copy_pu16_Result)
{
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	00 d0       	rcall	.+0      	; 0x287e <ADC_enu_ReadData+0x6>
    287e:	0f 92       	push	r0
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	9b 83       	std	Y+3, r25	; 0x03
    2886:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    288c:	8a 81       	ldd	r24, Y+2	; 0x02
    288e:	9b 81       	ldd	r25, Y+3	; 0x03
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	11 f1       	breq	.+68     	; 0x28d8 <ADC_enu_ReadData+0x60>
    {
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    2894:	e4 e2       	ldi	r30, 0x24	; 36
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	82 95       	swap	r24
    289c:	86 95       	lsr	r24
    289e:	86 95       	lsr	r24
    28a0:	83 70       	andi	r24, 0x03	; 3
    28a2:	88 2f       	mov	r24, r24
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	ea 81       	ldd	r30, Y+2	; 0x02
    28a8:	fb 81       	ldd	r31, Y+3	; 0x03
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    28ae:	ea 81       	ldd	r30, Y+2	; 0x02
    28b0:	fb 81       	ldd	r31, Y+3	; 0x03
    28b2:	20 81       	ld	r18, Z
    28b4:	31 81       	ldd	r19, Z+1	; 0x01
    28b6:	e5 e2       	ldi	r30, 0x25	; 37
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	82 2b       	or	r24, r18
    28ca:	93 2b       	or	r25, r19
    28cc:	ea 81       	ldd	r30, Y+2	; 0x02
    28ce:	fb 81       	ldd	r31, Y+3	; 0x03
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	80 83       	st	Z, r24

        #endif

        

        Local_u8_ErrorFlag = ES_OK;
    28d4:	19 82       	std	Y+1, r1	; 0x01
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <ADC_enu_ReadData+0x64>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    28d8:	83 e0       	ldi	r24, 0x03	; 3
    28da:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <ADC_enu_EnableINT>:

extern ErrorState_t ADC_enu_EnableINT(void)
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	0f 92       	push	r0
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    
    u8 Local_u8_ErrorFlag = ES_NOK;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADIE);
    28f8:	a6 e2       	ldi	r26, 0x26	; 38
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	e6 e2       	ldi	r30, 0x26	; 38
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	88 60       	ori	r24, 0x08	; 8
    2904:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    2906:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    2908:	89 81       	ldd	r24, Y+1	; 0x01
}
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <ADC_enu_DisableINT>:

extern ErrorState_t ADC_enu_DisableINT(void)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	0f 92       	push	r0
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADIE);
    2920:	a6 e2       	ldi	r26, 0x26	; 38
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e6 e2       	ldi	r30, 0x26	; 38
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	87 7f       	andi	r24, 0xF7	; 247
    292c:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    292e:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    2930:	89 81       	ldd	r24, Y+1	; 0x01
}
    2932:	0f 90       	pop	r0
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <ADC_enu_EnableADC>:

extern ErrorState_t ADC_enu_EnableADC(void)
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	0f 92       	push	r0
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADEN);
    2948:	a6 e2       	ldi	r26, 0x26	; 38
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e6 e2       	ldi	r30, 0x26	; 38
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	80 68       	ori	r24, 0x80	; 128
    2954:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    2956:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    2958:	89 81       	ldd	r24, Y+1	; 0x01

}
    295a:	0f 90       	pop	r0
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <ADC_enu_DisableADC>:

extern ErrorState_t ADC_enu_DisableADC(void)
{
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	0f 92       	push	r0
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADEN);
    2970:	a6 e2       	ldi	r26, 0x26	; 38
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e6 e2       	ldi	r30, 0x26	; 38
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	8f 77       	andi	r24, 0x7F	; 127
    297c:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    297e:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    2980:	89 81       	ldd	r24, Y+1	; 0x01

}
    2982:	0f 90       	pop	r0
    2984:	cf 91       	pop	r28
    2986:	df 91       	pop	r29
    2988:	08 95       	ret

0000298a <ADC_enu_SetCallBack>:

extern ErrorState_t ADC_enu_SetCallBack(void (*Copy_pfun_AppFunction)(void), void* Copy_u8_Parameters)
{
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	00 d0       	rcall	.+0      	; 0x2990 <ADC_enu_SetCallBack+0x6>
    2990:	00 d0       	rcall	.+0      	; 0x2992 <ADC_enu_SetCallBack+0x8>
    2992:	0f 92       	push	r0
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	9b 83       	std	Y+3, r25	; 0x03
    299a:	8a 83       	std	Y+2, r24	; 0x02
    299c:	7d 83       	std	Y+5, r23	; 0x05
    299e:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	9b 81       	ldd	r25, Y+3	; 0x03
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	69 f0       	breq	.+26     	; 0x29c6 <ADC_enu_SetCallBack+0x3c>
    {
        pfun_ISRPointer = Copy_pfun_AppFunction;
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	9b 81       	ldd	r25, Y+3	; 0x03
    29b0:	90 93 db 01 	sts	0x01DB, r25
    29b4:	80 93 da 01 	sts	0x01DA, r24

        pvid_ISRParameters = Copy_u8_Parameters;
    29b8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ba:	9d 81       	ldd	r25, Y+5	; 0x05
    29bc:	90 93 dd 01 	sts	0x01DD, r25
    29c0:	80 93 dc 01 	sts	0x01DC, r24
        
        Local_u8_ErrorFlag = ES_OK;
    29c4:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_ErrorFlag;
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <__vector_16>:

//ISR functions

void __vector_16 (void)__attribute__((signal));
void __vector_16 (void)
{
    29d8:	1f 92       	push	r1
    29da:	0f 92       	push	r0
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	0f 92       	push	r0
    29e0:	11 24       	eor	r1, r1
    29e2:	2f 93       	push	r18
    29e4:	3f 93       	push	r19
    29e6:	4f 93       	push	r20
    29e8:	5f 93       	push	r21
    29ea:	6f 93       	push	r22
    29ec:	7f 93       	push	r23
    29ee:	8f 93       	push	r24
    29f0:	9f 93       	push	r25
    29f2:	af 93       	push	r26
    29f4:	bf 93       	push	r27
    29f6:	ef 93       	push	r30
    29f8:	ff 93       	push	r31
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    if (pfun_ISRPointer != NULL)
    2a02:	80 91 da 01 	lds	r24, 0x01DA
    2a06:	90 91 db 01 	lds	r25, 0x01DB
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	49 f0       	breq	.+18     	; 0x2a20 <__vector_16+0x48>
    {
        pfun_ISRPointer (pvid_ISRParameters);
    2a0e:	e0 91 da 01 	lds	r30, 0x01DA
    2a12:	f0 91 db 01 	lds	r31, 0x01DB
    2a16:	80 91 dc 01 	lds	r24, 0x01DC
    2a1a:	90 91 dd 01 	lds	r25, 0x01DD
    2a1e:	09 95       	icall
    }
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	ff 91       	pop	r31
    2a26:	ef 91       	pop	r30
    2a28:	bf 91       	pop	r27
    2a2a:	af 91       	pop	r26
    2a2c:	9f 91       	pop	r25
    2a2e:	8f 91       	pop	r24
    2a30:	7f 91       	pop	r23
    2a32:	6f 91       	pop	r22
    2a34:	5f 91       	pop	r21
    2a36:	4f 91       	pop	r20
    2a38:	3f 91       	pop	r19
    2a3a:	2f 91       	pop	r18
    2a3c:	0f 90       	pop	r0
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	0f 90       	pop	r0
    2a42:	1f 90       	pop	r1
    2a44:	18 95       	reti

00002a46 <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <SW_enu_Initialization+0x6>
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    2a54:	19 82       	std	Y+1, r1	; 0x01
    2a56:	34 c0       	rjmp	.+104    	; 0x2ac0 <SW_enu_Initialization+0x7a>
    {
        
       Local_u8_ErrorFlag = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	c9 01       	movw	r24, r18
    2a60:	88 0f       	add	r24, r24
    2a62:	99 1f       	adc	r25, r25
    2a64:	82 0f       	add	r24, r18
    2a66:	93 1f       	adc	r25, r19
    2a68:	fc 01       	movw	r30, r24
    2a6a:	e7 58       	subi	r30, 0x87	; 135
    2a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6e:	40 81       	ld	r20, Z
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	c9 01       	movw	r24, r18
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	82 0f       	add	r24, r18
    2a7e:	93 1f       	adc	r25, r19
    2a80:	fc 01       	movw	r30, r24
    2a82:	e6 58       	subi	r30, 0x86	; 134
    2a84:	fe 4f       	sbci	r31, 0xFE	; 254
    2a86:	90 81       	ld	r25, Z
    2a88:	84 2f       	mov	r24, r20
    2a8a:	69 2f       	mov	r22, r25
    2a8c:	40 e0       	ldi	r20, 0x00	; 0
    2a8e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
    2a92:	8a 83       	std	Y+2, r24	; 0x02
       if(Local_u8_ErrorFlag != ES_OK)
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	88 23       	and	r24, r24
    2a98:	c1 f4       	brne	.+48     	; 0x2aca <SW_enu_Initialization+0x84>
       {
        break;
       }
       Local_u8_ErrorFlag = (SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	c9 01       	movw	r24, r18
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	82 0f       	add	r24, r18
    2aa8:	93 1f       	adc	r25, r19
    2aaa:	fc 01       	movw	r30, r24
    2aac:	e5 58       	subi	r30, 0x85	; 133
    2aae:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab0:	80 81       	ld	r24, Z
    2ab2:	8a 83       	std	Y+2, r24	; 0x02

        if(Local_u8_ErrorFlag != ES_OK)
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	88 23       	and	r24, r24
    2ab8:	41 f4       	brne	.+16     	; 0x2aca <SW_enu_Initialization+0x84>
extern ErrorState_t SW_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	89 83       	std	Y+1, r24	; 0x01
    2ac0:	90 91 78 01 	lds	r25, 0x0178
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	89 17       	cp	r24, r25
    2ac8:	38 f2       	brcs	.-114    	; 0x2a58 <SW_enu_Initialization+0x12>
       {
        break;
       }
    }

    Local_u8_ErrorFlag = ES_OK;
    2aca:	1a 82       	std	Y+2, r1	; 0x02


    return Local_u8_ErrorFlag;
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <SW_enu_GetSwValue+0x6>
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <SW_enu_GetSwValue+0x8>
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	8a 83       	std	Y+2, r24	; 0x02
    2ae6:	7c 83       	std	Y+4, r23	; 0x04
    2ae8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	9c 81       	ldd	r25, Y+4	; 0x04
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	49 f1       	breq	.+82     	; 0x2b48 <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    2af6:	90 91 78 01 	lds	r25, 0x0178
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	98 17       	cp	r25, r24
    2afe:	08 f1       	brcs	.+66     	; 0x2b42 <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	c9 01       	movw	r24, r18
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	82 0f       	add	r24, r18
    2b0e:	93 1f       	adc	r25, r19
    2b10:	fc 01       	movw	r30, r24
    2b12:	e7 58       	subi	r30, 0x87	; 135
    2b14:	fe 4f       	sbci	r31, 0xFE	; 254
    2b16:	40 81       	ld	r20, Z
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	c9 01       	movw	r24, r18
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	82 0f       	add	r24, r18
    2b26:	93 1f       	adc	r25, r19
    2b28:	fc 01       	movw	r30, r24
    2b2a:	e6 58       	subi	r30, 0x86	; 134
    2b2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2e:	90 81       	ld	r25, Z
    2b30:	2b 81       	ldd	r18, Y+3	; 0x03
    2b32:	3c 81       	ldd	r19, Y+4	; 0x04
    2b34:	84 2f       	mov	r24, r20
    2b36:	69 2f       	mov	r22, r25
    2b38:	a9 01       	movw	r20, r18
    2b3a:	0e 94 19 12 	call	0x2432	; 0x2432 <DIO_enu_GetPinValue>
    2b3e:	89 83       	std	Y+1, r24	; 0x01
    2b40:	05 c0       	rjmp	.+10     	; 0x2b4c <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2b48:	83 e0       	ldi	r24, 0x03	; 3
    2b4a:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01

}
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	00 d0       	rcall	.+0      	; 0x2b62 <Relay_enu_Initialization+0x6>
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    2b6a:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    2b6c:	19 82       	std	Y+1, r1	; 0x01
    2b6e:	31 c0       	rjmp	.+98     	; 0x2bd2 <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	88 2f       	mov	r24, r24
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	ed 57       	subi	r30, 0x7D	; 125
    2b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b80:	20 81       	ld	r18, Z
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	88 2f       	mov	r24, r24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	ec 57       	subi	r30, 0x7C	; 124
    2b90:	fe 4f       	sbci	r31, 0xFE	; 254
    2b92:	90 81       	ld	r25, Z
    2b94:	82 2f       	mov	r24, r18
    2b96:	69 2f       	mov	r22, r25
    2b98:	41 e0       	ldi	r20, 0x01	; 1
    2b9a:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	fc 01       	movw	r30, r24
    2baa:	ed 57       	subi	r30, 0x7D	; 125
    2bac:	fe 4f       	sbci	r31, 0xFE	; 254
    2bae:	20 81       	ld	r18, Z
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	88 2f       	mov	r24, r24
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	fc 01       	movw	r30, r24
    2bbc:	ec 57       	subi	r30, 0x7C	; 124
    2bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc0:	90 81       	ld	r25, Z
    2bc2:	82 2f       	mov	r24, r18
    2bc4:	69 2f       	mov	r22, r25
    2bc6:	40 e0       	ldi	r20, 0x00	; 0
    2bc8:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
    2bce:	8f 5f       	subi	r24, 0xFF	; 255
    2bd0:	89 83       	std	Y+1, r24	; 0x01
    2bd2:	90 91 82 01 	lds	r25, 0x0182
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	89 17       	cp	r24, r25
    2bda:	50 f2       	brcs	.-108    	; 0x2b70 <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    2bdc:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <Relay_enu_TuronOnRelay+0x6>
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    2bfa:	90 91 82 01 	lds	r25, 0x0182
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	89 17       	cp	r24, r25
    2c02:	c8 f4       	brcc	.+50     	; 0x2c36 <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	88 2f       	mov	r24, r24
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	fc 01       	movw	r30, r24
    2c10:	ed 57       	subi	r30, 0x7D	; 125
    2c12:	fe 4f       	sbci	r31, 0xFE	; 254
    2c14:	20 81       	ld	r18, Z
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	88 2f       	mov	r24, r24
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	fc 01       	movw	r30, r24
    2c22:	ec 57       	subi	r30, 0x7C	; 124
    2c24:	fe 4f       	sbci	r31, 0xFE	; 254
    2c26:	90 81       	ld	r25, Z
    2c28:	82 2f       	mov	r24, r18
    2c2a:	69 2f       	mov	r22, r25
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    2c32:	89 83       	std	Y+1, r24	; 0x01
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2c36:	82 e0       	ldi	r24, 0x02	; 2
    2c38:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	00 d0       	rcall	.+0      	; 0x2c4c <Relay_enu_TuronOffRelay+0x6>
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    2c56:	90 91 82 01 	lds	r25, 0x0182
    2c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5c:	89 17       	cp	r24, r25
    2c5e:	c8 f4       	brcc	.+50     	; 0x2c92 <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	88 2f       	mov	r24, r24
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	ed 57       	subi	r30, 0x7D	; 125
    2c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c70:	20 81       	ld	r18, Z
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
    2c74:	88 2f       	mov	r24, r24
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	88 0f       	add	r24, r24
    2c7a:	99 1f       	adc	r25, r25
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	ec 57       	subi	r30, 0x7C	; 124
    2c80:	fe 4f       	sbci	r31, 0xFE	; 254
    2c82:	90 81       	ld	r25, Z
    2c84:	82 2f       	mov	r24, r18
    2c86:	69 2f       	mov	r22, r25
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2c92:	82 e0       	ldi	r24, 0x02	; 2
    2c94:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <Relay_enu_TurnOnAllRelays+0x6>
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    2cb0:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    2cb2:	19 82       	std	Y+1, r1	; 0x01
    2cb4:	1a c0       	rjmp	.+52     	; 0x2cea <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	88 2f       	mov	r24, r24
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	ed 57       	subi	r30, 0x7D	; 125
    2cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc6:	20 81       	ld	r18, Z
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	88 2f       	mov	r24, r24
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	ec 57       	subi	r30, 0x7C	; 124
    2cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd8:	90 81       	ld	r25, Z
    2cda:	82 2f       	mov	r24, r18
    2cdc:	69 2f       	mov	r22, r25
    2cde:	41 e0       	ldi	r20, 0x01	; 1
    2ce0:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	8f 5f       	subi	r24, 0xFF	; 255
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	90 91 82 01 	lds	r25, 0x0182
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	89 17       	cp	r24, r25
    2cf2:	08 f3       	brcs	.-62     	; 0x2cb6 <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <Relay_enu_TurnOffAllRelays+0x6>
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    2d12:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    2d14:	19 82       	std	Y+1, r1	; 0x01
    2d16:	1a c0       	rjmp	.+52     	; 0x2d4c <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	88 2f       	mov	r24, r24
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	fc 01       	movw	r30, r24
    2d24:	ed 57       	subi	r30, 0x7D	; 125
    2d26:	fe 4f       	sbci	r31, 0xFE	; 254
    2d28:	20 81       	ld	r18, Z
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	fc 01       	movw	r30, r24
    2d36:	ec 57       	subi	r30, 0x7C	; 124
    2d38:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3a:	90 81       	ld	r25, Z
    2d3c:	82 2f       	mov	r24, r18
    2d3e:	69 2f       	mov	r22, r25
    2d40:	40 e0       	ldi	r20, 0x00	; 0
    2d42:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	8f 5f       	subi	r24, 0xFF	; 255
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    2d4c:	90 91 82 01 	lds	r25, 0x0182
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	89 17       	cp	r24, r25
    2d54:	08 f3       	brcs	.-62     	; 0x2d18 <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <LED_enu_Initialization+0x6>
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    2d70:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    2d72:	19 82       	std	Y+1, r1	; 0x01
    2d74:	31 c0       	rjmp	.+98     	; 0x2dd8 <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	88 2f       	mov	r24, r24
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	88 0f       	add	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	fc 01       	movw	r30, r24
    2d82:	ea 57       	subi	r30, 0x7A	; 122
    2d84:	fe 4f       	sbci	r31, 0xFE	; 254
    2d86:	20 81       	ld	r18, Z
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	88 2f       	mov	r24, r24
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	fc 01       	movw	r30, r24
    2d94:	e9 57       	subi	r30, 0x79	; 121
    2d96:	fe 4f       	sbci	r31, 0xFE	; 254
    2d98:	90 81       	ld	r25, Z
    2d9a:	82 2f       	mov	r24, r18
    2d9c:	69 2f       	mov	r22, r25
    2d9e:	41 e0       	ldi	r20, 0x01	; 1
    2da0:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	88 2f       	mov	r24, r24
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	88 0f       	add	r24, r24
    2dac:	99 1f       	adc	r25, r25
    2dae:	fc 01       	movw	r30, r24
    2db0:	ea 57       	subi	r30, 0x7A	; 122
    2db2:	fe 4f       	sbci	r31, 0xFE	; 254
    2db4:	20 81       	ld	r18, Z
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	88 2f       	mov	r24, r24
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	e9 57       	subi	r30, 0x79	; 121
    2dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc6:	90 81       	ld	r25, Z
    2dc8:	82 2f       	mov	r24, r18
    2dca:	69 2f       	mov	r22, r25
    2dcc:	40 e0       	ldi	r20, 0x00	; 0
    2dce:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	8f 5f       	subi	r24, 0xFF	; 255
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    2dd8:	90 91 85 01 	lds	r25, 0x0185
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	89 17       	cp	r24, r25
    2de0:	50 f2       	brcs	.-108    	; 0x2d76 <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    2de2:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    2de4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <LED_enu_TurnOnLED+0x6>
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    2e00:	90 91 85 01 	lds	r25, 0x0185
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	89 17       	cp	r24, r25
    2e08:	c8 f4       	brcc	.+50     	; 0x2e3c <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	88 2f       	mov	r24, r24
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	88 0f       	add	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	fc 01       	movw	r30, r24
    2e16:	ea 57       	subi	r30, 0x7A	; 122
    2e18:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1a:	20 81       	ld	r18, Z
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	88 2f       	mov	r24, r24
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	88 0f       	add	r24, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	fc 01       	movw	r30, r24
    2e28:	e9 57       	subi	r30, 0x79	; 121
    2e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2c:	90 81       	ld	r25, Z
    2e2e:	82 2f       	mov	r24, r18
    2e30:	69 2f       	mov	r22, r25
    2e32:	41 e0       	ldi	r20, 0x01	; 1
    2e34:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    2e38:	89 83       	std	Y+1, r24	; 0x01
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2e3c:	82 e0       	ldi	r24, 0x02	; 2
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	cf 91       	pop	r28
    2e48:	df 91       	pop	r29
    2e4a:	08 95       	ret

00002e4c <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	00 d0       	rcall	.+0      	; 0x2e52 <LED_enu_TurnOffLED+0x6>
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    2e5c:	90 91 85 01 	lds	r25, 0x0185
    2e60:	8a 81       	ldd	r24, Y+2	; 0x02
    2e62:	98 17       	cp	r25, r24
    2e64:	c8 f0       	brcs	.+50     	; 0x2e98 <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    2e66:	8a 81       	ldd	r24, Y+2	; 0x02
    2e68:	88 2f       	mov	r24, r24
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	88 0f       	add	r24, r24
    2e6e:	99 1f       	adc	r25, r25
    2e70:	fc 01       	movw	r30, r24
    2e72:	ea 57       	subi	r30, 0x7A	; 122
    2e74:	fe 4f       	sbci	r31, 0xFE	; 254
    2e76:	20 81       	ld	r18, Z
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	88 2f       	mov	r24, r24
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	fc 01       	movw	r30, r24
    2e84:	e9 57       	subi	r30, 0x79	; 121
    2e86:	fe 4f       	sbci	r31, 0xFE	; 254
    2e88:	90 81       	ld	r25, Z
    2e8a:	82 2f       	mov	r24, r18
    2e8c:	69 2f       	mov	r22, r25
    2e8e:	40 e0       	ldi	r20, 0x00	; 0
    2e90:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2e98:	82 e0       	ldi	r24, 0x02	; 2
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    2ea8:	df 93       	push	r29
    2eaa:	cf 93       	push	r28
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <LED_enu_TurnOnAllLEDs+0x6>
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    2eb6:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    2eb8:	19 82       	std	Y+1, r1	; 0x01
    2eba:	1a c0       	rjmp	.+52     	; 0x2ef0 <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	88 2f       	mov	r24, r24
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	88 0f       	add	r24, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	ea 57       	subi	r30, 0x7A	; 122
    2eca:	fe 4f       	sbci	r31, 0xFE	; 254
    2ecc:	20 81       	ld	r18, Z
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	88 2f       	mov	r24, r24
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	fc 01       	movw	r30, r24
    2eda:	e9 57       	subi	r30, 0x79	; 121
    2edc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ede:	90 81       	ld	r25, Z
    2ee0:	82 2f       	mov	r24, r18
    2ee2:	69 2f       	mov	r22, r25
    2ee4:	41 e0       	ldi	r20, 0x01	; 1
    2ee6:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	8f 5f       	subi	r24, 0xFF	; 255
    2eee:	89 83       	std	Y+1, r24	; 0x01
    2ef0:	90 91 85 01 	lds	r25, 0x0185
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	89 17       	cp	r24, r25
    2ef8:	08 f3       	brcs	.-62     	; 0x2ebc <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    2efa:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	08 95       	ret

00002f08 <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	00 d0       	rcall	.+0      	; 0x2f0e <LED_enu_TurnOffAllLEDs+0x6>
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    2f16:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    2f18:	19 82       	std	Y+1, r1	; 0x01
    2f1a:	1a c0       	rjmp	.+52     	; 0x2f50 <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	88 2f       	mov	r24, r24
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	fc 01       	movw	r30, r24
    2f28:	ea 57       	subi	r30, 0x7A	; 122
    2f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2c:	20 81       	ld	r18, Z
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	88 2f       	mov	r24, r24
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	fc 01       	movw	r30, r24
    2f3a:	e9 57       	subi	r30, 0x79	; 121
    2f3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3e:	90 81       	ld	r25, Z
    2f40:	82 2f       	mov	r24, r18
    2f42:	69 2f       	mov	r22, r25
    2f44:	40 e0       	ldi	r20, 0x00	; 0
    2f46:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	8f 5f       	subi	r24, 0xFF	; 255
    2f4e:	89 83       	std	Y+1, r24	; 0x01
    2f50:	90 91 85 01 	lds	r25, 0x0185
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	89 17       	cp	r24, r25
    2f58:	08 f3       	brcs	.-62     	; 0x2f1c <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    2f5a:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2f5e:	0f 90       	pop	r0
    2f60:	0f 90       	pop	r0
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	08 95       	ret

00002f68 <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    2f68:	df 93       	push	r29
    2f6a:	cf 93       	push	r28
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	6d 97       	sbiw	r28, 0x1d	; 29
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	8d 8f       	std	Y+29, r24	; 0x1d
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	ac e0       	ldi	r26, 0x0C	; 12
    2f86:	b2 e4       	ldi	r27, 0x42	; 66
    2f88:	89 8f       	std	Y+25, r24	; 0x19
    2f8a:	9a 8f       	std	Y+26, r25	; 0x1a
    2f8c:	ab 8f       	std	Y+27, r26	; 0x1b
    2f8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f90:	69 8d       	ldd	r22, Y+25	; 0x19
    2f92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	4a e7       	ldi	r20, 0x7A	; 122
    2f9e:	55 e4       	ldi	r21, 0x45	; 69
    2fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	8d 8b       	std	Y+21, r24	; 0x15
    2faa:	9e 8b       	std	Y+22, r25	; 0x16
    2fac:	af 8b       	std	Y+23, r26	; 0x17
    2fae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e8       	ldi	r20, 0x80	; 128
    2fbe:	5f e3       	ldi	r21, 0x3F	; 63
    2fc0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2fc4:	88 23       	and	r24, r24
    2fc6:	2c f4       	brge	.+10     	; 0x2fd2 <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	9c 8b       	std	Y+20, r25	; 0x14
    2fce:	8b 8b       	std	Y+19, r24	; 0x13
    2fd0:	3f c0       	rjmp	.+126    	; 0x3050 <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    2fd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	3f ef       	ldi	r19, 0xFF	; 255
    2fde:	4f e7       	ldi	r20, 0x7F	; 127
    2fe0:	57 e4       	ldi	r21, 0x47	; 71
    2fe2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2fe6:	18 16       	cp	r1, r24
    2fe8:	4c f5       	brge	.+82     	; 0x303c <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fea:	69 8d       	ldd	r22, Y+25	; 0x19
    2fec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e2       	ldi	r20, 0x20	; 32
    2ff8:	51 e4       	ldi	r21, 0x41	; 65
    2ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	9c 8b       	std	Y+20, r25	; 0x14
    3010:	8b 8b       	std	Y+19, r24	; 0x13
    3012:	0f c0       	rjmp	.+30     	; 0x3032 <LCD_enu_Initialization+0xca>
    3014:	80 e9       	ldi	r24, 0x90	; 144
    3016:	91 e0       	ldi	r25, 0x01	; 1
    3018:	9a 8b       	std	Y+18, r25	; 0x12
    301a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    301c:	89 89       	ldd	r24, Y+17	; 0x11
    301e:	9a 89       	ldd	r25, Y+18	; 0x12
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <LCD_enu_Initialization+0xb8>
    3024:	9a 8b       	std	Y+18, r25	; 0x12
    3026:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3028:	8b 89       	ldd	r24, Y+19	; 0x13
    302a:	9c 89       	ldd	r25, Y+20	; 0x14
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	9c 8b       	std	Y+20, r25	; 0x14
    3030:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3032:	8b 89       	ldd	r24, Y+19	; 0x13
    3034:	9c 89       	ldd	r25, Y+20	; 0x14
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	69 f7       	brne	.-38     	; 0x3014 <LCD_enu_Initialization+0xac>
    303a:	14 c0       	rjmp	.+40     	; 0x3064 <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303c:	6d 89       	ldd	r22, Y+21	; 0x15
    303e:	7e 89       	ldd	r23, Y+22	; 0x16
    3040:	8f 89       	ldd	r24, Y+23	; 0x17
    3042:	98 8d       	ldd	r25, Y+24	; 0x18
    3044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9c 8b       	std	Y+20, r25	; 0x14
    304e:	8b 8b       	std	Y+19, r24	; 0x13
    3050:	8b 89       	ldd	r24, Y+19	; 0x13
    3052:	9c 89       	ldd	r25, Y+20	; 0x14
    3054:	98 8b       	std	Y+16, r25	; 0x10
    3056:	8f 87       	std	Y+15, r24	; 0x0f
    3058:	8f 85       	ldd	r24, Y+15	; 0x0f
    305a:	98 89       	ldd	r25, Y+16	; 0x10
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	f1 f7       	brne	.-4      	; 0x305c <LCD_enu_Initialization+0xf4>
    3060:	98 8b       	std	Y+16, r25	; 0x10
    3062:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	61 e0       	ldi	r22, 0x01	; 1
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	62 e0       	ldi	r22, 0x02	; 2
    3072:	41 e0       	ldi	r20, 0x01	; 1
    3074:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	63 e0       	ldi	r22, 0x03	; 3
    307c:	41 e0       	ldi	r20, 0x01	; 1
    307e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	67 e0       	ldi	r22, 0x07	; 7
    3086:	41 e0       	ldi	r20, 0x01	; 1
    3088:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	66 e0       	ldi	r22, 0x06	; 6
    3090:	41 e0       	ldi	r20, 0x01	; 1
    3092:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	65 e0       	ldi	r22, 0x05	; 5
    309a:	41 e0       	ldi	r20, 0x01	; 1
    309c:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	64 e0       	ldi	r22, 0x04	; 4
    30a4:	41 e0       	ldi	r20, 0x01	; 1
    30a6:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	61 e0       	ldi	r22, 0x01	; 1
    30ae:	40 e0       	ldi	r20, 0x00	; 0
    30b0:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	67 e0       	ldi	r22, 0x07	; 7
    30b8:	40 e0       	ldi	r20, 0x00	; 0
    30ba:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	66 e0       	ldi	r22, 0x06	; 6
    30c2:	40 e0       	ldi	r20, 0x00	; 0
    30c4:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	65 e0       	ldi	r22, 0x05	; 5
    30cc:	41 e0       	ldi	r20, 0x01	; 1
    30ce:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	64 e0       	ldi	r22, 0x04	; 4
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	63 e0       	ldi	r22, 0x03	; 3
    30e0:	41 e0       	ldi	r20, 0x01	; 1
    30e2:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	a0 e8       	ldi	r26, 0x80	; 128
    30ec:	bf e3       	ldi	r27, 0x3F	; 63
    30ee:	8b 87       	std	Y+11, r24	; 0x0b
    30f0:	9c 87       	std	Y+12, r25	; 0x0c
    30f2:	ad 87       	std	Y+13, r26	; 0x0d
    30f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    30fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	4a e7       	ldi	r20, 0x7A	; 122
    3104:	55 e4       	ldi	r21, 0x45	; 69
    3106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	8f 83       	std	Y+7, r24	; 0x07
    3110:	98 87       	std	Y+8, r25	; 0x08
    3112:	a9 87       	std	Y+9, r26	; 0x09
    3114:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3116:	6f 81       	ldd	r22, Y+7	; 0x07
    3118:	78 85       	ldd	r23, Y+8	; 0x08
    311a:	89 85       	ldd	r24, Y+9	; 0x09
    311c:	9a 85       	ldd	r25, Y+10	; 0x0a
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	40 e8       	ldi	r20, 0x80	; 128
    3124:	5f e3       	ldi	r21, 0x3F	; 63
    3126:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    312a:	88 23       	and	r24, r24
    312c:	2c f4       	brge	.+10     	; 0x3138 <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	9e 83       	std	Y+6, r25	; 0x06
    3134:	8d 83       	std	Y+5, r24	; 0x05
    3136:	3f c0       	rjmp	.+126    	; 0x31b6 <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    3138:	6f 81       	ldd	r22, Y+7	; 0x07
    313a:	78 85       	ldd	r23, Y+8	; 0x08
    313c:	89 85       	ldd	r24, Y+9	; 0x09
    313e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	3f ef       	ldi	r19, 0xFF	; 255
    3144:	4f e7       	ldi	r20, 0x7F	; 127
    3146:	57 e4       	ldi	r21, 0x47	; 71
    3148:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    314c:	18 16       	cp	r1, r24
    314e:	4c f5       	brge	.+82     	; 0x31a2 <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3150:	6b 85       	ldd	r22, Y+11	; 0x0b
    3152:	7c 85       	ldd	r23, Y+12	; 0x0c
    3154:	8d 85       	ldd	r24, Y+13	; 0x0d
    3156:	9e 85       	ldd	r25, Y+14	; 0x0e
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e2       	ldi	r20, 0x20	; 32
    315e:	51 e4       	ldi	r21, 0x41	; 65
    3160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	bc 01       	movw	r22, r24
    316a:	cd 01       	movw	r24, r26
    316c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	9e 83       	std	Y+6, r25	; 0x06
    3176:	8d 83       	std	Y+5, r24	; 0x05
    3178:	0f c0       	rjmp	.+30     	; 0x3198 <LCD_enu_Initialization+0x230>
    317a:	80 e9       	ldi	r24, 0x90	; 144
    317c:	91 e0       	ldi	r25, 0x01	; 1
    317e:	9c 83       	std	Y+4, r25	; 0x04
    3180:	8b 83       	std	Y+3, r24	; 0x03
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	9c 81       	ldd	r25, Y+4	; 0x04
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	f1 f7       	brne	.-4      	; 0x3186 <LCD_enu_Initialization+0x21e>
    318a:	9c 83       	std	Y+4, r25	; 0x04
    318c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318e:	8d 81       	ldd	r24, Y+5	; 0x05
    3190:	9e 81       	ldd	r25, Y+6	; 0x06
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	9e 83       	std	Y+6, r25	; 0x06
    3196:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3198:	8d 81       	ldd	r24, Y+5	; 0x05
    319a:	9e 81       	ldd	r25, Y+6	; 0x06
    319c:	00 97       	sbiw	r24, 0x00	; 0
    319e:	69 f7       	brne	.-38     	; 0x317a <LCD_enu_Initialization+0x212>
    31a0:	14 c0       	rjmp	.+40     	; 0x31ca <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a2:	6f 81       	ldd	r22, Y+7	; 0x07
    31a4:	78 85       	ldd	r23, Y+8	; 0x08
    31a6:	89 85       	ldd	r24, Y+9	; 0x09
    31a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	9e 83       	std	Y+6, r25	; 0x06
    31b4:	8d 83       	std	Y+5, r24	; 0x05
    31b6:	8d 81       	ldd	r24, Y+5	; 0x05
    31b8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ba:	9a 83       	std	Y+2, r25	; 0x02
    31bc:	89 83       	std	Y+1, r24	; 0x01
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	9a 81       	ldd	r25, Y+2	; 0x02
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <LCD_enu_Initialization+0x25a>
    31c6:	9a 83       	std	Y+2, r25	; 0x02
    31c8:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	63 e0       	ldi	r22, 0x03	; 3
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	61 e0       	ldi	r22, 0x01	; 1
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    31de:	88 e2       	ldi	r24, 0x28	; 40
    31e0:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	61 e0       	ldi	r22, 0x01	; 1
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0c);
    31ee:	8c e0       	ldi	r24, 0x0C	; 12
    31f0:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	61 e0       	ldi	r22, 0x01	; 1
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	61 e0       	ldi	r22, 0x01	; 1
    3208:	40 e0       	ldi	r20, 0x00	; 0
    320a:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    320e:	86 e0       	ldi	r24, 0x06	; 6
    3210:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    3214:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    3216:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3218:	6d 96       	adiw	r28, 0x1d	; 29
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	08 95       	ret

0000322a <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	00 d0       	rcall	.+0      	; 0x3230 <LCD_enu_SendCommand+0x6>
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	61 e0       	ldi	r22, 0x01	; 1
    323e:	40 e0       	ldi	r20, 0x00	; 0
    3240:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    324a:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    324c:	89 81       	ldd	r24, Y+1	; 0x01

}
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	cf 91       	pop	r28
    3254:	df 91       	pop	r29
    3256:	08 95       	ret

00003258 <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	00 d0       	rcall	.+0      	; 0x325e <LCD_enu_SendData+0x6>
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	61 e0       	ldi	r22, 0x01	; 1
    326c:	41 e0       	ldi	r20, 0x01	; 1
    326e:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    3272:	8a 81       	ldd	r24, Y+2	; 0x02
    3274:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    3278:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    327a:	89 81       	ldd	r24, Y+1	; 0x01

}
    327c:	0f 90       	pop	r0
    327e:	0f 90       	pop	r0
    3280:	cf 91       	pop	r28
    3282:	df 91       	pop	r29
    3284:	08 95       	ret

00003286 <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    3286:	df 93       	push	r29
    3288:	cf 93       	push	r28
    328a:	00 d0       	rcall	.+0      	; 0x328c <LCD_enu_GoToPosition+0x6>
    328c:	00 d0       	rcall	.+0      	; 0x328e <LCD_enu_GoToPosition+0x8>
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
    3292:	8a 83       	std	Y+2, r24	; 0x02
    3294:	6b 83       	std	Y+3, r22	; 0x03
    3296:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	81 31       	cpi	r24, 0x11	; 17
    32a0:	88 f5       	brcc	.+98     	; 0x3304 <LCD_enu_GoToPosition+0x7e>
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	88 23       	and	r24, r24
    32a6:	71 f1       	breq	.+92     	; 0x3304 <LCD_enu_GoToPosition+0x7e>
    32a8:	8a 81       	ldd	r24, Y+2	; 0x02
    32aa:	83 30       	cpi	r24, 0x03	; 3
    32ac:	58 f5       	brcc	.+86     	; 0x3304 <LCD_enu_GoToPosition+0x7e>
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	88 23       	and	r24, r24
    32b2:	41 f1       	breq	.+80     	; 0x3304 <LCD_enu_GoToPosition+0x7e>
    32b4:	8c 81       	ldd	r24, Y+4	; 0x04
    32b6:	85 30       	cpi	r24, 0x05	; 5
    32b8:	28 f5       	brcc	.+74     	; 0x3304 <LCD_enu_GoToPosition+0x7e>
    32ba:	8c 81       	ldd	r24, Y+4	; 0x04
    32bc:	88 23       	and	r24, r24
    32be:	11 f1       	breq	.+68     	; 0x3304 <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	61 e0       	ldi	r22, 0x01	; 1
    32c4:	40 e0       	ldi	r20, 0x00	; 0
    32c6:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    32ca:	8c 81       	ldd	r24, Y+4	; 0x04
    32cc:	88 2f       	mov	r24, r24
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	9c 01       	movw	r18, r24
    32d2:	21 50       	subi	r18, 0x01	; 1
    32d4:	30 40       	sbci	r19, 0x00	; 0
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	88 2f       	mov	r24, r24
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	01 97       	sbiw	r24, 0x01	; 1
    32de:	88 0f       	add	r24, r24
    32e0:	99 1f       	adc	r25, r25
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	82 0f       	add	r24, r18
    32e8:	93 1f       	adc	r25, r19
    32ea:	82 95       	swap	r24
    32ec:	92 95       	swap	r25
    32ee:	90 7f       	andi	r25, 0xF0	; 240
    32f0:	98 27       	eor	r25, r24
    32f2:	80 7f       	andi	r24, 0xF0	; 240
    32f4:	98 27       	eor	r25, r24
    32f6:	98 2f       	mov	r25, r24
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	89 0f       	add	r24, r25
    32fc:	81 58       	subi	r24, 0x81	; 129
    32fe:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3304:	82 e0       	ldi	r24, 0x02	; 2
    3306:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3308:	89 81       	ldd	r24, Y+1	; 0x01
}
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	00 d0       	rcall	.+0      	; 0x331e <LCD_enu_SendString+0x6>
    331e:	0f 92       	push	r0
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	9b 83       	std	Y+3, r25	; 0x03
    3326:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	9b 81       	ldd	r25, Y+3	; 0x03
    3330:	00 97       	sbiw	r24, 0x00	; 0
    3332:	c1 f0       	breq	.+48     	; 0x3364 <LCD_enu_SendString+0x4c>
    3334:	10 c0       	rjmp	.+32     	; 0x3356 <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	61 e0       	ldi	r22, 0x01	; 1
    333a:	41 e0       	ldi	r20, 0x01	; 1
    333c:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    3340:	ea 81       	ldd	r30, Y+2	; 0x02
    3342:	fb 81       	ldd	r31, Y+3	; 0x03
    3344:	20 81       	ld	r18, Z
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	9b 81       	ldd	r25, Y+3	; 0x03
    334a:	01 96       	adiw	r24, 0x01	; 1
    334c:	9b 83       	std	Y+3, r25	; 0x03
    334e:	8a 83       	std	Y+2, r24	; 0x02
    3350:	82 2f       	mov	r24, r18
    3352:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    3356:	ea 81       	ldd	r30, Y+2	; 0x02
    3358:	fb 81       	ldd	r31, Y+3	; 0x03
    335a:	80 81       	ld	r24, Z
    335c:	88 23       	and	r24, r24
    335e:	59 f7       	brne	.-42     	; 0x3336 <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    3360:	19 82       	std	Y+1, r1	; 0x01
    3362:	02 c0       	rjmp	.+4      	; 0x3368 <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3364:	83 e0       	ldi	r24, 0x03	; 3
    3366:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3368:	89 81       	ldd	r24, Y+1	; 0x01
}
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	08 95       	ret

00003376 <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	00 d0       	rcall	.+0      	; 0x337c <LCD_enu_ClearPage+0x6>
    337c:	0f 92       	push	r0
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    3388:	8b 81       	ldd	r24, Y+3	; 0x03
    338a:	88 23       	and	r24, r24
    338c:	09 f4       	brne	.+2      	; 0x3390 <LCD_enu_ClearPage+0x1a>
    338e:	49 c0       	rjmp	.+146    	; 0x3422 <LCD_enu_ClearPage+0xac>
    3390:	8b 81       	ldd	r24, Y+3	; 0x03
    3392:	85 30       	cpi	r24, 0x05	; 5
    3394:	08 f0       	brcs	.+2      	; 0x3398 <LCD_enu_ClearPage+0x22>
    3396:	45 c0       	rjmp	.+138    	; 0x3422 <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    3398:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	61 e0       	ldi	r22, 0x01	; 1
    339e:	40 e0       	ldi	r20, 0x00	; 0
    33a0:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    33a4:	8b 81       	ldd	r24, Y+3	; 0x03
    33a6:	88 2f       	mov	r24, r24
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	07 96       	adiw	r24, 0x07	; 7
    33ac:	82 95       	swap	r24
    33ae:	92 95       	swap	r25
    33b0:	90 7f       	andi	r25, 0xF0	; 240
    33b2:	98 27       	eor	r25, r24
    33b4:	80 7f       	andi	r24, 0xF0	; 240
    33b6:	98 27       	eor	r25, r24
    33b8:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	61 e0       	ldi	r22, 0x01	; 1
    33c0:	41 e0       	ldi	r20, 0x01	; 1
    33c2:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    33c6:	19 82       	std	Y+1, r1	; 0x01
    33c8:	06 c0       	rjmp	.+12     	; 0x33d6 <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    33ca:	80 e2       	ldi	r24, 0x20	; 32
    33cc:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	8f 5f       	subi	r24, 0xFF	; 255
    33d4:	89 83       	std	Y+1, r24	; 0x01
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	80 31       	cpi	r24, 0x10	; 16
    33da:	b8 f3       	brcs	.-18     	; 0x33ca <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	61 e0       	ldi	r22, 0x01	; 1
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    33e6:	8b 81       	ldd	r24, Y+3	; 0x03
    33e8:	88 2f       	mov	r24, r24
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	0b 96       	adiw	r24, 0x0b	; 11
    33ee:	82 95       	swap	r24
    33f0:	92 95       	swap	r25
    33f2:	90 7f       	andi	r25, 0xF0	; 240
    33f4:	98 27       	eor	r25, r24
    33f6:	80 7f       	andi	r24, 0xF0	; 240
    33f8:	98 27       	eor	r25, r24
    33fa:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	61 e0       	ldi	r22, 0x01	; 1
    3402:	41 e0       	ldi	r20, 0x01	; 1
    3404:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3408:	19 82       	std	Y+1, r1	; 0x01
    340a:	06 c0       	rjmp	.+12     	; 0x3418 <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    340c:	80 e2       	ldi	r24, 0x20	; 32
    340e:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3412:	89 81       	ldd	r24, Y+1	; 0x01
    3414:	8f 5f       	subi	r24, 0xFF	; 255
    3416:	89 83       	std	Y+1, r24	; 0x01
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	80 31       	cpi	r24, 0x10	; 16
    341c:	b8 f3       	brcs	.-18     	; 0x340c <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    341e:	1a 82       	std	Y+2, r1	; 0x02
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3422:	82 e0       	ldi	r24, 0x02	; 2
    3424:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    3426:	8a 81       	ldd	r24, Y+2	; 0x02

}
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	cf 91       	pop	r28
    3430:	df 91       	pop	r29
    3432:	08 95       	ret

00003434 <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    3434:	cf 92       	push	r12
    3436:	ef 92       	push	r14
    3438:	0f 93       	push	r16
    343a:	df 93       	push	r29
    343c:	cf 93       	push	r28
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    3442:	2e 97       	sbiw	r28, 0x0e	; 14
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	9e 83       	std	Y+6, r25	; 0x06
    3450:	8d 83       	std	Y+5, r24	; 0x05
    3452:	6f 83       	std	Y+7, r22	; 0x07
    3454:	48 87       	std	Y+8, r20	; 0x08
    3456:	29 87       	std	Y+9, r18	; 0x09
    3458:	0a 87       	std	Y+10, r16	; 0x0a
    345a:	eb 86       	std	Y+11, r14	; 0x0b
    345c:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    3462:	8d 81       	ldd	r24, Y+5	; 0x05
    3464:	9e 81       	ldd	r25, Y+6	; 0x06
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	09 f4       	brne	.+2      	; 0x346c <LCD_enu_DrawSpecialCharacter+0x38>
    346a:	b3 c0       	rjmp	.+358    	; 0x35d2 <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    346c:	1b 82       	std	Y+3, r1	; 0x03
    346e:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    3470:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    3472:	8f 81       	ldd	r24, Y+7	; 0x07
    3474:	88 23       	and	r24, r24
    3476:	09 f4       	brne	.+2      	; 0x347a <LCD_enu_DrawSpecialCharacter+0x46>
    3478:	a9 c0       	rjmp	.+338    	; 0x35cc <LCD_enu_DrawSpecialCharacter+0x198>
    347a:	8f 81       	ldd	r24, Y+7	; 0x07
    347c:	89 30       	cpi	r24, 0x09	; 9
    347e:	08 f0       	brcs	.+2      	; 0x3482 <LCD_enu_DrawSpecialCharacter+0x4e>
    3480:	a5 c0       	rjmp	.+330    	; 0x35cc <LCD_enu_DrawSpecialCharacter+0x198>
    3482:	88 85       	ldd	r24, Y+8	; 0x08
    3484:	88 30       	cpi	r24, 0x08	; 8
    3486:	08 f0       	brcs	.+2      	; 0x348a <LCD_enu_DrawSpecialCharacter+0x56>
    3488:	a1 c0       	rjmp	.+322    	; 0x35cc <LCD_enu_DrawSpecialCharacter+0x198>
    348a:	88 85       	ldd	r24, Y+8	; 0x08
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	88 e0       	ldi	r24, 0x08	; 8
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	ac 01       	movw	r20, r24
    3496:	42 1b       	sub	r20, r18
    3498:	53 0b       	sbc	r21, r19
    349a:	9a 01       	movw	r18, r20
    349c:	8f 81       	ldd	r24, Y+7	; 0x07
    349e:	88 2f       	mov	r24, r24
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	28 17       	cp	r18, r24
    34a4:	39 07       	cpc	r19, r25
    34a6:	0c f4       	brge	.+2      	; 0x34aa <LCD_enu_DrawSpecialCharacter+0x76>
    34a8:	91 c0       	rjmp	.+290    	; 0x35cc <LCD_enu_DrawSpecialCharacter+0x198>
    34aa:	89 85       	ldd	r24, Y+9	; 0x09
    34ac:	88 23       	and	r24, r24
    34ae:	09 f4       	brne	.+2      	; 0x34b2 <LCD_enu_DrawSpecialCharacter+0x7e>
    34b0:	8d c0       	rjmp	.+282    	; 0x35cc <LCD_enu_DrawSpecialCharacter+0x198>
    34b2:	89 85       	ldd	r24, Y+9	; 0x09
    34b4:	83 30       	cpi	r24, 0x03	; 3
    34b6:	08 f0       	brcs	.+2      	; 0x34ba <LCD_enu_DrawSpecialCharacter+0x86>
    34b8:	89 c0       	rjmp	.+274    	; 0x35cc <LCD_enu_DrawSpecialCharacter+0x198>
    34ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    34bc:	88 23       	and	r24, r24
    34be:	09 f4       	brne	.+2      	; 0x34c2 <LCD_enu_DrawSpecialCharacter+0x8e>
    34c0:	85 c0       	rjmp	.+266    	; 0x35cc <LCD_enu_DrawSpecialCharacter+0x198>
    34c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    34c4:	81 31       	cpi	r24, 0x11	; 17
    34c6:	08 f0       	brcs	.+2      	; 0x34ca <LCD_enu_DrawSpecialCharacter+0x96>
    34c8:	81 c0       	rjmp	.+258    	; 0x35cc <LCD_enu_DrawSpecialCharacter+0x198>
    34ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    34cc:	82 30       	cpi	r24, 0x02	; 2
    34ce:	08 f0       	brcs	.+2      	; 0x34d2 <LCD_enu_DrawSpecialCharacter+0x9e>
    34d0:	7d c0       	rjmp	.+250    	; 0x35cc <LCD_enu_DrawSpecialCharacter+0x198>
    34d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    34d4:	85 30       	cpi	r24, 0x05	; 5
    34d6:	08 f0       	brcs	.+2      	; 0x34da <LCD_enu_DrawSpecialCharacter+0xa6>
    34d8:	79 c0       	rjmp	.+242    	; 0x35cc <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    34da:	19 82       	std	Y+1, r1	; 0x01
    34dc:	19 c0       	rjmp	.+50     	; 0x3510 <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	28 2f       	mov	r18, r24
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	8d 81       	ldd	r24, Y+5	; 0x05
    34e6:	9e 81       	ldd	r25, Y+6	; 0x06
    34e8:	82 0f       	add	r24, r18
    34ea:	93 1f       	adc	r25, r19
    34ec:	9b 83       	std	Y+3, r25	; 0x03
    34ee:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	98 2f       	mov	r25, r24
    34f4:	96 95       	lsr	r25
    34f6:	96 95       	lsr	r25
    34f8:	96 95       	lsr	r25
    34fa:	88 85       	ldd	r24, Y+8	; 0x08
    34fc:	29 2f       	mov	r18, r25
    34fe:	28 0f       	add	r18, r24
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	9b 81       	ldd	r25, Y+3	; 0x03
    3504:	62 2f       	mov	r22, r18
    3506:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	88 5f       	subi	r24, 0xF8	; 248
    350e:	89 83       	std	Y+1, r24	; 0x01
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	28 2f       	mov	r18, r24
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	8f 81       	ldd	r24, Y+7	; 0x07
    3518:	88 2f       	mov	r24, r24
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	88 0f       	add	r24, r24
    351e:	99 1f       	adc	r25, r25
    3520:	88 0f       	add	r24, r24
    3522:	99 1f       	adc	r25, r25
    3524:	88 0f       	add	r24, r24
    3526:	99 1f       	adc	r25, r25
    3528:	28 17       	cp	r18, r24
    352a:	39 07       	cpc	r19, r25
    352c:	c4 f2       	brlt	.-80     	; 0x34de <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	61 e0       	ldi	r22, 0x01	; 1
    3532:	40 e0       	ldi	r20, 0x00	; 0
    3534:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    3538:	8c 85       	ldd	r24, Y+12	; 0x0c
    353a:	28 2f       	mov	r18, r24
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	3e 87       	std	Y+14, r19	; 0x0e
    3540:	2d 87       	std	Y+13, r18	; 0x0d
    3542:	4d 85       	ldd	r20, Y+13	; 0x0d
    3544:	5e 85       	ldd	r21, Y+14	; 0x0e
    3546:	41 15       	cp	r20, r1
    3548:	51 05       	cpc	r21, r1
    354a:	49 f0       	breq	.+18     	; 0x355e <LCD_enu_DrawSpecialCharacter+0x12a>
    354c:	8d 85       	ldd	r24, Y+13	; 0x0d
    354e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3550:	81 30       	cpi	r24, 0x01	; 1
    3552:	91 05       	cpc	r25, r1
    3554:	39 f4       	brne	.+14     	; 0x3564 <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    3556:	86 e0       	ldi	r24, 0x06	; 6
    3558:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
    355c:	03 c0       	rjmp	.+6      	; 0x3564 <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    355e:	84 e0       	ldi	r24, 0x04	; 4
    3560:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	61 e0       	ldi	r22, 0x01	; 1
    3568:	40 e0       	ldi	r20, 0x00	; 0
    356a:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    356e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3570:	88 2f       	mov	r24, r24
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	9c 01       	movw	r18, r24
    3576:	21 50       	subi	r18, 0x01	; 1
    3578:	30 40       	sbci	r19, 0x00	; 0
    357a:	89 85       	ldd	r24, Y+9	; 0x09
    357c:	88 2f       	mov	r24, r24
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	88 0f       	add	r24, r24
    3584:	99 1f       	adc	r25, r25
    3586:	88 0f       	add	r24, r24
    3588:	99 1f       	adc	r25, r25
    358a:	82 0f       	add	r24, r18
    358c:	93 1f       	adc	r25, r19
    358e:	82 95       	swap	r24
    3590:	92 95       	swap	r25
    3592:	90 7f       	andi	r25, 0xF0	; 240
    3594:	98 27       	eor	r25, r24
    3596:	80 7f       	andi	r24, 0xF0	; 240
    3598:	98 27       	eor	r25, r24
    359a:	98 2f       	mov	r25, r24
    359c:	8a 85       	ldd	r24, Y+10	; 0x0a
    359e:	89 0f       	add	r24, r25
    35a0:	81 58       	subi	r24, 0x81	; 129
    35a2:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	61 e0       	ldi	r22, 0x01	; 1
    35aa:	41 e0       	ldi	r20, 0x01	; 1
    35ac:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    35b0:	19 82       	std	Y+1, r1	; 0x01
    35b2:	06 c0       	rjmp	.+12     	; 0x35c0 <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	8f 5f       	subi	r24, 0xFF	; 255
    35be:	89 83       	std	Y+1, r24	; 0x01
    35c0:	99 81       	ldd	r25, Y+1	; 0x01
    35c2:	8f 81       	ldd	r24, Y+7	; 0x07
    35c4:	98 17       	cp	r25, r24
    35c6:	b0 f3       	brcs	.-20     	; 0x35b4 <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    35c8:	1c 82       	std	Y+4, r1	; 0x04
    35ca:	05 c0       	rjmp	.+10     	; 0x35d6 <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    35cc:	82 e0       	ldi	r24, 0x02	; 2
    35ce:	8c 83       	std	Y+4, r24	; 0x04
    35d0:	02 c0       	rjmp	.+4      	; 0x35d6 <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    35d2:	83 e0       	ldi	r24, 0x03	; 3
    35d4:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    35d6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    35d8:	2e 96       	adiw	r28, 0x0e	; 14
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	0f 91       	pop	r16
    35ea:	ef 90       	pop	r14
    35ec:	cf 90       	pop	r12
    35ee:	08 95       	ret

000035f0 <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    35f0:	0f 93       	push	r16
    35f2:	df 93       	push	r29
    35f4:	cf 93       	push	r28
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	2e 97       	sbiw	r28, 0x0e	; 14
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	68 87       	std	Y+8, r22	; 0x08
    3608:	79 87       	std	Y+9, r23	; 0x09
    360a:	8a 87       	std	Y+10, r24	; 0x0a
    360c:	9b 87       	std	Y+11, r25	; 0x0b
    360e:	4c 87       	std	Y+12, r20	; 0x0c
    3610:	2d 87       	std	Y+13, r18	; 0x0d
    3612:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    3618:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    361a:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    361c:	88 85       	ldd	r24, Y+8	; 0x08
    361e:	99 85       	ldd	r25, Y+9	; 0x09
    3620:	aa 85       	ldd	r26, Y+10	; 0x0a
    3622:	bb 85       	ldd	r27, Y+11	; 0x0b
    3624:	bb 23       	and	r27, r27
    3626:	8c f4       	brge	.+34     	; 0x364a <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    362c:	88 85       	ldd	r24, Y+8	; 0x08
    362e:	99 85       	ldd	r25, Y+9	; 0x09
    3630:	aa 85       	ldd	r26, Y+10	; 0x0a
    3632:	bb 85       	ldd	r27, Y+11	; 0x0b
    3634:	b0 95       	com	r27
    3636:	a0 95       	com	r26
    3638:	90 95       	com	r25
    363a:	81 95       	neg	r24
    363c:	9f 4f       	sbci	r25, 0xFF	; 255
    363e:	af 4f       	sbci	r26, 0xFF	; 255
    3640:	bf 4f       	sbci	r27, 0xFF	; 255
    3642:	88 87       	std	Y+8, r24	; 0x08
    3644:	99 87       	std	Y+9, r25	; 0x09
    3646:	aa 87       	std	Y+10, r26	; 0x0a
    3648:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    364a:	88 85       	ldd	r24, Y+8	; 0x08
    364c:	99 85       	ldd	r25, Y+9	; 0x09
    364e:	aa 85       	ldd	r26, Y+10	; 0x0a
    3650:	bb 85       	ldd	r27, Y+11	; 0x0b
    3652:	8c 83       	std	Y+4, r24	; 0x04
    3654:	9d 83       	std	Y+5, r25	; 0x05
    3656:	ae 83       	std	Y+6, r26	; 0x06
    3658:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    365a:	8a 81       	ldd	r24, Y+2	; 0x02
    365c:	8f 5f       	subi	r24, 0xFF	; 255
    365e:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    3660:	8c 81       	ldd	r24, Y+4	; 0x04
    3662:	9d 81       	ldd	r25, Y+5	; 0x05
    3664:	ae 81       	ldd	r26, Y+6	; 0x06
    3666:	bf 81       	ldd	r27, Y+7	; 0x07
    3668:	2a e0       	ldi	r18, 0x0A	; 10
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	40 e0       	ldi	r20, 0x00	; 0
    366e:	50 e0       	ldi	r21, 0x00	; 0
    3670:	bc 01       	movw	r22, r24
    3672:	cd 01       	movw	r24, r26
    3674:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__divmodsi4>
    3678:	da 01       	movw	r26, r20
    367a:	c9 01       	movw	r24, r18
    367c:	8c 83       	std	Y+4, r24	; 0x04
    367e:	9d 83       	std	Y+5, r25	; 0x05
    3680:	ae 83       	std	Y+6, r26	; 0x06
    3682:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    3684:	8c 81       	ldd	r24, Y+4	; 0x04
    3686:	9d 81       	ldd	r25, Y+5	; 0x05
    3688:	ae 81       	ldd	r26, Y+6	; 0x06
    368a:	bf 81       	ldd	r27, Y+7	; 0x07
    368c:	00 97       	sbiw	r24, 0x00	; 0
    368e:	a1 05       	cpc	r26, r1
    3690:	b1 05       	cpc	r27, r1
    3692:	19 f7       	brne	.-58     	; 0x365a <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    3694:	8c 85       	ldd	r24, Y+12	; 0x0c
    3696:	88 23       	and	r24, r24
    3698:	09 f4       	brne	.+2      	; 0x369c <LCD_enu_WriteIntegerNum+0xac>
    369a:	87 c0       	rjmp	.+270    	; 0x37aa <LCD_enu_WriteIntegerNum+0x1ba>
    369c:	8c 85       	ldd	r24, Y+12	; 0x0c
    369e:	83 30       	cpi	r24, 0x03	; 3
    36a0:	08 f0       	brcs	.+2      	; 0x36a4 <LCD_enu_WriteIntegerNum+0xb4>
    36a2:	83 c0       	rjmp	.+262    	; 0x37aa <LCD_enu_WriteIntegerNum+0x1ba>
    36a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a6:	88 23       	and	r24, r24
    36a8:	09 f4       	brne	.+2      	; 0x36ac <LCD_enu_WriteIntegerNum+0xbc>
    36aa:	7f c0       	rjmp	.+254    	; 0x37aa <LCD_enu_WriteIntegerNum+0x1ba>
    36ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ae:	81 31       	cpi	r24, 0x11	; 17
    36b0:	08 f0       	brcs	.+2      	; 0x36b4 <LCD_enu_WriteIntegerNum+0xc4>
    36b2:	7b c0       	rjmp	.+246    	; 0x37aa <LCD_enu_WriteIntegerNum+0x1ba>
    36b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    36b6:	85 30       	cpi	r24, 0x05	; 5
    36b8:	08 f0       	brcs	.+2      	; 0x36bc <LCD_enu_WriteIntegerNum+0xcc>
    36ba:	77 c0       	rjmp	.+238    	; 0x37aa <LCD_enu_WriteIntegerNum+0x1ba>
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	81 31       	cpi	r24, 0x11	; 17
    36c0:	08 f0       	brcs	.+2      	; 0x36c4 <LCD_enu_WriteIntegerNum+0xd4>
    36c2:	73 c0       	rjmp	.+230    	; 0x37aa <LCD_enu_WriteIntegerNum+0x1ba>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    36c4:	88 85       	ldd	r24, Y+8	; 0x08
    36c6:	99 85       	ldd	r25, Y+9	; 0x09
    36c8:	aa 85       	ldd	r26, Y+10	; 0x0a
    36ca:	bb 85       	ldd	r27, Y+11	; 0x0b
    36cc:	8c 83       	std	Y+4, r24	; 0x04
    36ce:	9d 83       	std	Y+5, r25	; 0x05
    36d0:	ae 83       	std	Y+6, r26	; 0x06
    36d2:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    36d4:	ce 01       	movw	r24, r28
    36d6:	04 96       	adiw	r24, 0x04	; 4
    36d8:	0e 94 40 20 	call	0x4080	; 0x4080 <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	61 e0       	ldi	r22, 0x01	; 1
    36e0:	40 e0       	ldi	r20, 0x00	; 0
    36e2:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        //Placing Cursor
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    36e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    36e8:	88 2f       	mov	r24, r24
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	9c 01       	movw	r18, r24
    36ee:	21 50       	subi	r18, 0x01	; 1
    36f0:	30 40       	sbci	r19, 0x00	; 0
    36f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    36f4:	88 2f       	mov	r24, r24
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	88 0f       	add	r24, r24
    36fc:	99 1f       	adc	r25, r25
    36fe:	88 0f       	add	r24, r24
    3700:	99 1f       	adc	r25, r25
    3702:	82 0f       	add	r24, r18
    3704:	93 1f       	adc	r25, r19
    3706:	82 95       	swap	r24
    3708:	92 95       	swap	r25
    370a:	90 7f       	andi	r25, 0xF0	; 240
    370c:	98 27       	eor	r25, r24
    370e:	80 7f       	andi	r24, 0xF0	; 240
    3710:	98 27       	eor	r25, r24
    3712:	98 2f       	mov	r25, r24
    3714:	8d 85       	ldd	r24, Y+13	; 0x0d
    3716:	89 0f       	add	r24, r25
    3718:	81 58       	subi	r24, 0x81	; 129
    371a:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	61 e0       	ldi	r22, 0x01	; 1
    3722:	41 e0       	ldi	r20, 0x01	; 1
    3724:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	88 23       	and	r24, r24
    372c:	51 f1       	breq	.+84     	; 0x3782 <LCD_enu_WriteIntegerNum+0x192>
        {
            enu_PassByteAndLatch('-');
    372e:	8d e2       	ldi	r24, 0x2D	; 45
    3730:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
    3734:	26 c0       	rjmp	.+76     	; 0x3782 <LCD_enu_WriteIntegerNum+0x192>
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    3736:	8c 81       	ldd	r24, Y+4	; 0x04
    3738:	9d 81       	ldd	r25, Y+5	; 0x05
    373a:	ae 81       	ldd	r26, Y+6	; 0x06
    373c:	bf 81       	ldd	r27, Y+7	; 0x07
    373e:	2a e0       	ldi	r18, 0x0A	; 10
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e0       	ldi	r20, 0x00	; 0
    3744:	50 e0       	ldi	r21, 0x00	; 0
    3746:	bc 01       	movw	r22, r24
    3748:	cd 01       	movw	r24, r26
    374a:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__divmodsi4>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	80 5d       	subi	r24, 0xD0	; 208
    3754:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    3758:	8c 81       	ldd	r24, Y+4	; 0x04
    375a:	9d 81       	ldd	r25, Y+5	; 0x05
    375c:	ae 81       	ldd	r26, Y+6	; 0x06
    375e:	bf 81       	ldd	r27, Y+7	; 0x07
    3760:	2a e0       	ldi	r18, 0x0A	; 10
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	40 e0       	ldi	r20, 0x00	; 0
    3766:	50 e0       	ldi	r21, 0x00	; 0
    3768:	bc 01       	movw	r22, r24
    376a:	cd 01       	movw	r24, r26
    376c:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__divmodsi4>
    3770:	da 01       	movw	r26, r20
    3772:	c9 01       	movw	r24, r18
    3774:	8c 83       	std	Y+4, r24	; 0x04
    3776:	9d 83       	std	Y+5, r25	; 0x05
    3778:	ae 83       	std	Y+6, r26	; 0x06
    377a:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    377c:	8a 81       	ldd	r24, Y+2	; 0x02
    377e:	81 50       	subi	r24, 0x01	; 1
    3780:	8a 83       	std	Y+2, r24	; 0x02
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
    3782:	8c 81       	ldd	r24, Y+4	; 0x04
    3784:	9d 81       	ldd	r25, Y+5	; 0x05
    3786:	ae 81       	ldd	r26, Y+6	; 0x06
    3788:	bf 81       	ldd	r27, Y+7	; 0x07
    378a:	00 97       	sbiw	r24, 0x00	; 0
    378c:	a1 05       	cpc	r26, r1
    378e:	b1 05       	cpc	r27, r1
    3790:	91 f6       	brne	.-92     	; 0x3736 <LCD_enu_WriteIntegerNum+0x146>
    3792:	06 c0       	rjmp	.+12     	; 0x37a0 <LCD_enu_WriteIntegerNum+0x1b0>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    3794:	80 e3       	ldi	r24, 0x30	; 48
    3796:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	81 50       	subi	r24, 0x01	; 1
    379e:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	88 23       	and	r24, r24
    37a4:	b9 f7       	brne	.-18     	; 0x3794 <LCD_enu_WriteIntegerNum+0x1a4>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    37a6:	1b 82       	std	Y+3, r1	; 0x03
    37a8:	02 c0       	rjmp	.+4      	; 0x37ae <LCD_enu_WriteIntegerNum+0x1be>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    37aa:	82 e0       	ldi	r24, 0x02	; 2
    37ac:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    37ae:	8b 81       	ldd	r24, Y+3	; 0x03
}
    37b0:	2e 96       	adiw	r28, 0x0e	; 14
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	0f 91       	pop	r16
    37c2:	08 95       	ret

000037c4 <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    37c4:	0f 93       	push	r16
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
    37ce:	63 97       	sbiw	r28, 0x13	; 19
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	6d 87       	std	Y+13, r22	; 0x0d
    37dc:	7e 87       	std	Y+14, r23	; 0x0e
    37de:	8f 87       	std	Y+15, r24	; 0x0f
    37e0:	98 8b       	std	Y+16, r25	; 0x10
    37e2:	49 8b       	std	Y+17, r20	; 0x11
    37e4:	2a 8b       	std	Y+18, r18	; 0x12
    37e6:	0b 8b       	std	Y+19, r16	; 0x13
    u8 Local_u8_ErrorFlag = ES_NOK;
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	88 87       	std	Y+8, r24	; 0x08

    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    37ec:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = 0;
    37ee:	1a 82       	std	Y+2, r1	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    37f0:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    37f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    37f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    37f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f8:	98 89       	ldd	r25, Y+16	; 0x10
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e0       	ldi	r20, 0x00	; 0
    3800:	50 e0       	ldi	r21, 0x00	; 0
    3802:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3806:	88 23       	and	r24, r24
    3808:	5c f4       	brge	.+22     	; 0x3820 <LCD_enu_WriteFloatNum+0x5c>
    {
        local_u8_NegativeFlag = True;
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    380e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3810:	9e 85       	ldd	r25, Y+14	; 0x0e
    3812:	af 85       	ldd	r26, Y+15	; 0x0f
    3814:	b8 89       	ldd	r27, Y+16	; 0x10
    3816:	b0 58       	subi	r27, 0x80	; 128
    3818:	8d 87       	std	Y+13, r24	; 0x0d
    381a:	9e 87       	std	Y+14, r25	; 0x0e
    381c:	af 87       	std	Y+15, r26	; 0x0f
    381e:	b8 8b       	std	Y+16, r27	; 0x10
    }


    Local_u32_WholeDigits = Copy_f32_Num;
    3820:	6d 85       	ldd	r22, Y+13	; 0x0d
    3822:	7e 85       	ldd	r23, Y+14	; 0x0e
    3824:	8f 85       	ldd	r24, Y+15	; 0x0f
    3826:	98 89       	ldd	r25, Y+16	; 0x10
    3828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	89 87       	std	Y+9, r24	; 0x09
    3832:	9a 87       	std	Y+10, r25	; 0x0a
    3834:	ab 87       	std	Y+11, r26	; 0x0b
    3836:	bc 87       	std	Y+12, r27	; 0x0c

    Local_f32_DecimalDigits = Copy_f32_Num - (f32)(Local_u32_WholeDigits);
    3838:	89 85       	ldd	r24, Y+9	; 0x09
    383a:	9a 85       	ldd	r25, Y+10	; 0x0a
    383c:	ab 85       	ldd	r26, Y+11	; 0x0b
    383e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3840:	bc 01       	movw	r22, r24
    3842:	cd 01       	movw	r24, r26
    3844:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    3848:	9b 01       	movw	r18, r22
    384a:	ac 01       	movw	r20, r24
    384c:	6d 85       	ldd	r22, Y+13	; 0x0d
    384e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3850:	8f 85       	ldd	r24, Y+15	; 0x0f
    3852:	98 89       	ldd	r25, Y+16	; 0x10
    3854:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	8c 83       	std	Y+4, r24	; 0x04
    385e:	9d 83       	std	Y+5, r25	; 0x05
    3860:	ae 83       	std	Y+6, r26	; 0x06
    3862:	bf 83       	std	Y+7, r27	; 0x07
   
    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    3864:	8b 81       	ldd	r24, Y+3	; 0x03
    3866:	8f 5f       	subi	r24, 0xFF	; 255
    3868:	8b 83       	std	Y+3, r24	; 0x03
        Local_u32_WholeDigits  /= 10;
    386a:	89 85       	ldd	r24, Y+9	; 0x09
    386c:	9a 85       	ldd	r25, Y+10	; 0x0a
    386e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3870:	bc 85       	ldd	r27, Y+12	; 0x0c
    3872:	2a e0       	ldi	r18, 0x0A	; 10
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	40 e0       	ldi	r20, 0x00	; 0
    3878:	50 e0       	ldi	r21, 0x00	; 0
    387a:	bc 01       	movw	r22, r24
    387c:	cd 01       	movw	r24, r26
    387e:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <__udivmodsi4>
    3882:	da 01       	movw	r26, r20
    3884:	c9 01       	movw	r24, r18
    3886:	89 87       	std	Y+9, r24	; 0x09
    3888:	9a 87       	std	Y+10, r25	; 0x0a
    388a:	ab 87       	std	Y+11, r26	; 0x0b
    388c:	bc 87       	std	Y+12, r27	; 0x0c

    }while(Local_u32_WholeDigits);
    388e:	89 85       	ldd	r24, Y+9	; 0x09
    3890:	9a 85       	ldd	r25, Y+10	; 0x0a
    3892:	ab 85       	ldd	r26, Y+11	; 0x0b
    3894:	bc 85       	ldd	r27, Y+12	; 0x0c
    3896:	00 97       	sbiw	r24, 0x00	; 0
    3898:	a1 05       	cpc	r26, r1
    389a:	b1 05       	cpc	r27, r1
    389c:	19 f7       	brne	.-58     	; 0x3864 <LCD_enu_WriteFloatNum+0xa0>

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	61 e0       	ldi	r22, 0x01	; 1
    38a2:	41 e0       	ldi	r20, 0x01	; 1
    38a4:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    38a8:	19 86       	std	Y+9, r1	; 0x09
    38aa:	1a 86       	std	Y+10, r1	; 0x0a
    38ac:	1b 86       	std	Y+11, r1	; 0x0b
    38ae:	1c 86       	std	Y+12, r1	; 0x0c
    38b0:	1f c0       	rjmp	.+62     	; 0x38f0 <LCD_enu_WriteFloatNum+0x12c>
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    {
        Local_f32_DecimalDigits *= 10;
    38b2:	6c 81       	ldd	r22, Y+4	; 0x04
    38b4:	7d 81       	ldd	r23, Y+5	; 0x05
    38b6:	8e 81       	ldd	r24, Y+6	; 0x06
    38b8:	9f 81       	ldd	r25, Y+7	; 0x07
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	40 e2       	ldi	r20, 0x20	; 32
    38c0:	51 e4       	ldi	r21, 0x41	; 65
    38c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	8c 83       	std	Y+4, r24	; 0x04
    38cc:	9d 83       	std	Y+5, r25	; 0x05
    38ce:	ae 83       	std	Y+6, r26	; 0x06
    38d0:	bf 83       	std	Y+7, r27	; 0x07
        Local_u32_WholeDigits = Local_f32_DecimalDigits;
    38d2:	6c 81       	ldd	r22, Y+4	; 0x04
    38d4:	7d 81       	ldd	r23, Y+5	; 0x05
    38d6:	8e 81       	ldd	r24, Y+6	; 0x06
    38d8:	9f 81       	ldd	r25, Y+7	; 0x07
    38da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	89 87       	std	Y+9, r24	; 0x09
    38e4:	9a 87       	std	Y+10, r25	; 0x0a
    38e6:	ab 87       	std	Y+11, r26	; 0x0b
    38e8:	bc 87       	std	Y+12, r27	; 0x0c
        Local_u8_DecimalDigitCount++;
    38ea:	8a 81       	ldd	r24, Y+2	; 0x02
    38ec:	8f 5f       	subi	r24, 0xFF	; 255
    38ee:	8a 83       	std	Y+2, r24	; 0x02

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    38f0:	89 85       	ldd	r24, Y+9	; 0x09
    38f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f4:	ab 85       	ldd	r26, Y+11	; 0x0b
    38f6:	bc 85       	ldd	r27, Y+12	; 0x0c
    38f8:	bc 01       	movw	r22, r24
    38fa:	cd 01       	movw	r24, r26
    38fc:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    3900:	9b 01       	movw	r18, r22
    3902:	ac 01       	movw	r20, r24
    3904:	6c 81       	ldd	r22, Y+4	; 0x04
    3906:	7d 81       	ldd	r23, Y+5	; 0x05
    3908:	8e 81       	ldd	r24, Y+6	; 0x06
    390a:	9f 81       	ldd	r25, Y+7	; 0x07
    390c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	bc 01       	movw	r22, r24
    3916:	cd 01       	movw	r24, r26
    3918:	2c ea       	ldi	r18, 0xAC	; 172
    391a:	35 ec       	ldi	r19, 0xC5	; 197
    391c:	47 e2       	ldi	r20, 0x27	; 39
    391e:	57 e3       	ldi	r21, 0x37	; 55
    3920:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
    3924:	88 23       	and	r24, r24
    3926:	2c f6       	brge	.-118    	; 0x38b2 <LCD_enu_WriteFloatNum+0xee>
        Local_u8_DecimalDigitCount++;
        
    
    }

    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && ((Local_u32_WholeDigits + Local_u8_DecimalDigitCount) <= LCD_MAX_INTEGER_LENGTH))
    3928:	89 89       	ldd	r24, Y+17	; 0x11
    392a:	88 23       	and	r24, r24
    392c:	09 f4       	brne	.+2      	; 0x3930 <LCD_enu_WriteFloatNum+0x16c>
    392e:	fd c0       	rjmp	.+506    	; 0x3b2a <LCD_enu_WriteFloatNum+0x366>
    3930:	89 89       	ldd	r24, Y+17	; 0x11
    3932:	83 30       	cpi	r24, 0x03	; 3
    3934:	08 f0       	brcs	.+2      	; 0x3938 <LCD_enu_WriteFloatNum+0x174>
    3936:	f9 c0       	rjmp	.+498    	; 0x3b2a <LCD_enu_WriteFloatNum+0x366>
    3938:	8a 89       	ldd	r24, Y+18	; 0x12
    393a:	88 23       	and	r24, r24
    393c:	09 f4       	brne	.+2      	; 0x3940 <LCD_enu_WriteFloatNum+0x17c>
    393e:	f5 c0       	rjmp	.+490    	; 0x3b2a <LCD_enu_WriteFloatNum+0x366>
    3940:	8a 89       	ldd	r24, Y+18	; 0x12
    3942:	81 31       	cpi	r24, 0x11	; 17
    3944:	08 f0       	brcs	.+2      	; 0x3948 <LCD_enu_WriteFloatNum+0x184>
    3946:	f1 c0       	rjmp	.+482    	; 0x3b2a <LCD_enu_WriteFloatNum+0x366>
    3948:	8b 89       	ldd	r24, Y+19	; 0x13
    394a:	85 30       	cpi	r24, 0x05	; 5
    394c:	08 f0       	brcs	.+2      	; 0x3950 <LCD_enu_WriteFloatNum+0x18c>
    394e:	ed c0       	rjmp	.+474    	; 0x3b2a <LCD_enu_WriteFloatNum+0x366>
    3950:	8a 81       	ldd	r24, Y+2	; 0x02
    3952:	28 2f       	mov	r18, r24
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	40 e0       	ldi	r20, 0x00	; 0
    3958:	50 e0       	ldi	r21, 0x00	; 0
    395a:	89 85       	ldd	r24, Y+9	; 0x09
    395c:	9a 85       	ldd	r25, Y+10	; 0x0a
    395e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3960:	bc 85       	ldd	r27, Y+12	; 0x0c
    3962:	82 0f       	add	r24, r18
    3964:	93 1f       	adc	r25, r19
    3966:	a4 1f       	adc	r26, r20
    3968:	b5 1f       	adc	r27, r21
    396a:	81 31       	cpi	r24, 0x11	; 17
    396c:	91 05       	cpc	r25, r1
    396e:	a1 05       	cpc	r26, r1
    3970:	b1 05       	cpc	r27, r1
    3972:	08 f0       	brcs	.+2      	; 0x3976 <LCD_enu_WriteFloatNum+0x1b2>
    3974:	da c0       	rjmp	.+436    	; 0x3b2a <LCD_enu_WriteFloatNum+0x366>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	61 e0       	ldi	r22, 0x01	; 1
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    3980:	8b 89       	ldd	r24, Y+19	; 0x13
    3982:	88 2f       	mov	r24, r24
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	9c 01       	movw	r18, r24
    3988:	21 50       	subi	r18, 0x01	; 1
    398a:	30 40       	sbci	r19, 0x00	; 0
    398c:	89 89       	ldd	r24, Y+17	; 0x11
    398e:	88 2f       	mov	r24, r24
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	88 0f       	add	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	88 0f       	add	r24, r24
    399a:	99 1f       	adc	r25, r25
    399c:	82 0f       	add	r24, r18
    399e:	93 1f       	adc	r25, r19
    39a0:	82 95       	swap	r24
    39a2:	92 95       	swap	r25
    39a4:	90 7f       	andi	r25, 0xF0	; 240
    39a6:	98 27       	eor	r25, r24
    39a8:	80 7f       	andi	r24, 0xF0	; 240
    39aa:	98 27       	eor	r25, r24
    39ac:	98 2f       	mov	r25, r24
    39ae:	8a 89       	ldd	r24, Y+18	; 0x12
    39b0:	89 0f       	add	r24, r25
    39b2:	81 58       	subi	r24, 0x81	; 129
    39b4:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
        
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	61 e0       	ldi	r22, 0x01	; 1
    39bc:	41 e0       	ldi	r20, 0x01	; 1
    39be:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	88 23       	and	r24, r24
    39c6:	19 f0       	breq	.+6      	; 0x39ce <LCD_enu_WriteFloatNum+0x20a>
        {
            enu_PassByteAndLatch('-');
    39c8:	8d e2       	ldi	r24, 0x2D	; 45
    39ca:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
        }

        //A] Printing whole digits 
        Local_u32_WholeDigits = Copy_f32_Num;
    39ce:	6d 85       	ldd	r22, Y+13	; 0x0d
    39d0:	7e 85       	ldd	r23, Y+14	; 0x0e
    39d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39d4:	98 89       	ldd	r25, Y+16	; 0x10
    39d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	89 87       	std	Y+9, r24	; 0x09
    39e0:	9a 87       	std	Y+10, r25	; 0x0a
    39e2:	ab 87       	std	Y+11, r26	; 0x0b
    39e4:	bc 87       	std	Y+12, r27	; 0x0c
        enu_ReverseInteger(&Local_u32_WholeDigits);
    39e6:	ce 01       	movw	r24, r28
    39e8:	09 96       	adiw	r24, 0x09	; 9
    39ea:	0e 94 40 20 	call	0x4080	; 0x4080 <enu_ReverseInteger>


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	61 e0       	ldi	r22, 0x01	; 1
    39f2:	41 e0       	ldi	r20, 0x01	; 1
    39f4:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    39f8:	26 c0       	rjmp	.+76     	; 0x3a46 <LCD_enu_WriteFloatNum+0x282>
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    39fa:	89 85       	ldd	r24, Y+9	; 0x09
    39fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fe:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a00:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a02:	2a e0       	ldi	r18, 0x0A	; 10
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	40 e0       	ldi	r20, 0x00	; 0
    3a08:	50 e0       	ldi	r21, 0x00	; 0
    3a0a:	bc 01       	movw	r22, r24
    3a0c:	cd 01       	movw	r24, r26
    3a0e:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <__udivmodsi4>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	80 5d       	subi	r24, 0xD0	; 208
    3a18:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
            Local_u32_WholeDigits /= 10;
    3a1c:	89 85       	ldd	r24, Y+9	; 0x09
    3a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a20:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a22:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a24:	2a e0       	ldi	r18, 0x0A	; 10
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	40 e0       	ldi	r20, 0x00	; 0
    3a2a:	50 e0       	ldi	r21, 0x00	; 0
    3a2c:	bc 01       	movw	r22, r24
    3a2e:	cd 01       	movw	r24, r26
    3a30:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <__udivmodsi4>
    3a34:	da 01       	movw	r26, r20
    3a36:	c9 01       	movw	r24, r18
    3a38:	89 87       	std	Y+9, r24	; 0x09
    3a3a:	9a 87       	std	Y+10, r25	; 0x0a
    3a3c:	ab 87       	std	Y+11, r26	; 0x0b
    3a3e:	bc 87       	std	Y+12, r27	; 0x0c
            Local_u8_WholeDigitCount--;
    3a40:	8b 81       	ldd	r24, Y+3	; 0x03
    3a42:	81 50       	subi	r24, 0x01	; 1
    3a44:	8b 83       	std	Y+3, r24	; 0x03


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    3a46:	89 85       	ldd	r24, Y+9	; 0x09
    3a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4a:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a4c:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a4e:	00 97       	sbiw	r24, 0x00	; 0
    3a50:	a1 05       	cpc	r26, r1
    3a52:	b1 05       	cpc	r27, r1
    3a54:	91 f6       	brne	.-92     	; 0x39fa <LCD_enu_WriteFloatNum+0x236>
    3a56:	06 c0       	rjmp	.+12     	; 0x3a64 <LCD_enu_WriteFloatNum+0x2a0>
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    3a58:	80 e3       	ldi	r24, 0x30	; 48
    3a5a:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
            Local_u8_WholeDigitCount--;
    3a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a60:	81 50       	subi	r24, 0x01	; 1
    3a62:	8b 83       	std	Y+3, r24	; 0x03
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
            Local_u32_WholeDigits /= 10;
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    3a64:	8b 81       	ldd	r24, Y+3	; 0x03
    3a66:	88 23       	and	r24, r24
    3a68:	b9 f7       	brne	.-18     	; 0x3a58 <LCD_enu_WriteFloatNum+0x294>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    3a6a:	6c 81       	ldd	r22, Y+4	; 0x04
    3a6c:	7d 81       	ldd	r23, Y+5	; 0x05
    3a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a70:	9f 81       	ldd	r25, Y+7	; 0x07
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e0       	ldi	r20, 0x00	; 0
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    3a7e:	88 23       	and	r24, r24
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <LCD_enu_WriteFloatNum+0x2c0>
    3a82:	51 c0       	rjmp	.+162    	; 0x3b26 <LCD_enu_WriteFloatNum+0x362>
        {
            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	61 e0       	ldi	r22, 0x01	; 1
    3a88:	41 e0       	ldi	r20, 0x01	; 1
    3a8a:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>

            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    3a8e:	8e e2       	ldi	r24, 0x2E	; 46
    3a90:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>

            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
    3a94:	6c 81       	ldd	r22, Y+4	; 0x04
    3a96:	7d 81       	ldd	r23, Y+5	; 0x05
    3a98:	8e 81       	ldd	r24, Y+6	; 0x06
    3a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	89 87       	std	Y+9, r24	; 0x09
    3aa6:	9a 87       	std	Y+10, r25	; 0x0a
    3aa8:	ab 87       	std	Y+11, r26	; 0x0b
    3aaa:	bc 87       	std	Y+12, r27	; 0x0c
            enu_ReverseInteger(&Local_u32_WholeDigits);
    3aac:	ce 01       	movw	r24, r28
    3aae:	09 96       	adiw	r24, 0x09	; 9
    3ab0:	0e 94 40 20 	call	0x4080	; 0x4080 <enu_ReverseInteger>
    3ab4:	26 c0       	rjmp	.+76     	; 0x3b02 <LCD_enu_WriteFloatNum+0x33e>
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
            {
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    3ab6:	89 85       	ldd	r24, Y+9	; 0x09
    3ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aba:	ab 85       	ldd	r26, Y+11	; 0x0b
    3abc:	bc 85       	ldd	r27, Y+12	; 0x0c
    3abe:	2a e0       	ldi	r18, 0x0A	; 10
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	40 e0       	ldi	r20, 0x00	; 0
    3ac4:	50 e0       	ldi	r21, 0x00	; 0
    3ac6:	bc 01       	movw	r22, r24
    3ac8:	cd 01       	movw	r24, r26
    3aca:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <__udivmodsi4>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	80 5d       	subi	r24, 0xD0	; 208
    3ad4:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
                Local_u32_WholeDigits /= 10;
    3ad8:	89 85       	ldd	r24, Y+9	; 0x09
    3ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    3adc:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ade:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ae0:	2a e0       	ldi	r18, 0x0A	; 10
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	40 e0       	ldi	r20, 0x00	; 0
    3ae6:	50 e0       	ldi	r21, 0x00	; 0
    3ae8:	bc 01       	movw	r22, r24
    3aea:	cd 01       	movw	r24, r26
    3aec:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <__udivmodsi4>
    3af0:	da 01       	movw	r26, r20
    3af2:	c9 01       	movw	r24, r18
    3af4:	89 87       	std	Y+9, r24	; 0x09
    3af6:	9a 87       	std	Y+10, r25	; 0x0a
    3af8:	ab 87       	std	Y+11, r26	; 0x0b
    3afa:	bc 87       	std	Y+12, r27	; 0x0c
                Local_u8_DecimalDigitCount--;
    3afc:	8a 81       	ldd	r24, Y+2	; 0x02
    3afe:	81 50       	subi	r24, 0x01	; 1
    3b00:	8a 83       	std	Y+2, r24	; 0x02
            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
            enu_ReverseInteger(&Local_u32_WholeDigits);
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
    3b02:	89 85       	ldd	r24, Y+9	; 0x09
    3b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b06:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b08:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b0a:	00 97       	sbiw	r24, 0x00	; 0
    3b0c:	a1 05       	cpc	r26, r1
    3b0e:	b1 05       	cpc	r27, r1
    3b10:	91 f6       	brne	.-92     	; 0x3ab6 <LCD_enu_WriteFloatNum+0x2f2>
    3b12:	06 c0       	rjmp	.+12     	; 0x3b20 <LCD_enu_WriteFloatNum+0x35c>
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    3b14:	80 e3       	ldi	r24, 0x30	; 48
    3b16:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    3b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1c:	81 50       	subi	r24, 0x01	; 1
    3b1e:	8a 83       	std	Y+2, r24	; 0x02
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
                Local_u32_WholeDigits /= 10;
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    3b20:	8a 81       	ldd	r24, Y+2	; 0x02
    3b22:	88 23       	and	r24, r24
    3b24:	b9 f7       	brne	.-18     	; 0x3b14 <LCD_enu_WriteFloatNum+0x350>
            
            

        }

        Local_u8_ErrorFlag = ES_OK;
    3b26:	18 86       	std	Y+8, r1	; 0x08
    3b28:	02 c0       	rjmp	.+4      	; 0x3b2e <LCD_enu_WriteFloatNum+0x36a>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3b2a:	82 e0       	ldi	r24, 0x02	; 2
    3b2c:	88 87       	std	Y+8, r24	; 0x08
    }

    return Local_u8_ErrorFlag;
    3b2e:	88 85       	ldd	r24, Y+8	; 0x08

}
    3b30:	63 96       	adiw	r28, 0x13	; 19
    3b32:	0f b6       	in	r0, 0x3f	; 63
    3b34:	f8 94       	cli
    3b36:	de bf       	out	0x3e, r29	; 62
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	cd bf       	out	0x3d, r28	; 61
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	0f 91       	pop	r16
    3b42:	08 95       	ret

00003b44 <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	cd b7       	in	r28, 0x3d	; 61
    3b4a:	de b7       	in	r29, 0x3e	; 62
    3b4c:	ac 97       	sbiw	r28, 0x2c	; 44
    3b4e:	0f b6       	in	r0, 0x3f	; 63
    3b50:	f8 94       	cli
    3b52:	de bf       	out	0x3e, r29	; 62
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	cd bf       	out	0x3d, r28	; 61
    3b58:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	62 e0       	ldi	r22, 0x02	; 2
    3b62:	40 e0       	ldi	r20, 0x00	; 0
    3b64:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	63 e0       	ldi	r22, 0x03	; 3
    3b6c:	40 e0       	ldi	r20, 0x00	; 0
    3b6e:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    3b72:	8c a5       	ldd	r24, Y+44	; 0x2c
    3b74:	98 2f       	mov	r25, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	99 27       	eor	r25, r25
    3b7a:	99 1f       	adc	r25, r25
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	67 e0       	ldi	r22, 0x07	; 7
    3b80:	49 2f       	mov	r20, r25
    3b82:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    3b86:	8c a5       	ldd	r24, Y+44	; 0x2c
    3b88:	82 95       	swap	r24
    3b8a:	86 95       	lsr	r24
    3b8c:	86 95       	lsr	r24
    3b8e:	83 70       	andi	r24, 0x03	; 3
    3b90:	98 2f       	mov	r25, r24
    3b92:	91 70       	andi	r25, 0x01	; 1
    3b94:	80 e0       	ldi	r24, 0x00	; 0
    3b96:	66 e0       	ldi	r22, 0x06	; 6
    3b98:	49 2f       	mov	r20, r25
    3b9a:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    3b9e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3ba0:	82 95       	swap	r24
    3ba2:	86 95       	lsr	r24
    3ba4:	87 70       	andi	r24, 0x07	; 7
    3ba6:	98 2f       	mov	r25, r24
    3ba8:	91 70       	andi	r25, 0x01	; 1
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	65 e0       	ldi	r22, 0x05	; 5
    3bae:	49 2f       	mov	r20, r25
    3bb0:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    3bb4:	8c a5       	ldd	r24, Y+44	; 0x2c
    3bb6:	82 95       	swap	r24
    3bb8:	8f 70       	andi	r24, 0x0F	; 15
    3bba:	98 2f       	mov	r25, r24
    3bbc:	91 70       	andi	r25, 0x01	; 1
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
    3bc0:	64 e0       	ldi	r22, 0x04	; 4
    3bc2:	49 2f       	mov	r20, r25
    3bc4:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	63 e0       	ldi	r22, 0x03	; 3
    3bcc:	41 e0       	ldi	r20, 0x01	; 1
    3bce:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	a0 e8       	ldi	r26, 0x80	; 128
    3bd8:	bf e3       	ldi	r27, 0x3F	; 63
    3bda:	8f a3       	std	Y+39, r24	; 0x27
    3bdc:	98 a7       	std	Y+40, r25	; 0x28
    3bde:	a9 a7       	std	Y+41, r26	; 0x29
    3be0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be2:	6f a1       	ldd	r22, Y+39	; 0x27
    3be4:	78 a5       	ldd	r23, Y+40	; 0x28
    3be6:	89 a5       	ldd	r24, Y+41	; 0x29
    3be8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	4a e7       	ldi	r20, 0x7A	; 122
    3bf0:	55 e4       	ldi	r21, 0x45	; 69
    3bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	8b a3       	std	Y+35, r24	; 0x23
    3bfc:	9c a3       	std	Y+36, r25	; 0x24
    3bfe:	ad a3       	std	Y+37, r26	; 0x25
    3c00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c02:	6b a1       	ldd	r22, Y+35	; 0x23
    3c04:	7c a1       	ldd	r23, Y+36	; 0x24
    3c06:	8d a1       	ldd	r24, Y+37	; 0x25
    3c08:	9e a1       	ldd	r25, Y+38	; 0x26
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	40 e8       	ldi	r20, 0x80	; 128
    3c10:	5f e3       	ldi	r21, 0x3F	; 63
    3c12:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3c16:	88 23       	and	r24, r24
    3c18:	2c f4       	brge	.+10     	; 0x3c24 <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	9a a3       	std	Y+34, r25	; 0x22
    3c20:	89 a3       	std	Y+33, r24	; 0x21
    3c22:	3f c0       	rjmp	.+126    	; 0x3ca2 <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    3c24:	6b a1       	ldd	r22, Y+35	; 0x23
    3c26:	7c a1       	ldd	r23, Y+36	; 0x24
    3c28:	8d a1       	ldd	r24, Y+37	; 0x25
    3c2a:	9e a1       	ldd	r25, Y+38	; 0x26
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	3f ef       	ldi	r19, 0xFF	; 255
    3c30:	4f e7       	ldi	r20, 0x7F	; 127
    3c32:	57 e4       	ldi	r21, 0x47	; 71
    3c34:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3c38:	18 16       	cp	r1, r24
    3c3a:	4c f5       	brge	.+82     	; 0x3c8e <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c3c:	6f a1       	ldd	r22, Y+39	; 0x27
    3c3e:	78 a5       	ldd	r23, Y+40	; 0x28
    3c40:	89 a5       	ldd	r24, Y+41	; 0x29
    3c42:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	40 e2       	ldi	r20, 0x20	; 32
    3c4a:	51 e4       	ldi	r21, 0x41	; 65
    3c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	bc 01       	movw	r22, r24
    3c56:	cd 01       	movw	r24, r26
    3c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	9a a3       	std	Y+34, r25	; 0x22
    3c62:	89 a3       	std	Y+33, r24	; 0x21
    3c64:	0f c0       	rjmp	.+30     	; 0x3c84 <enu_PassByteAndLatch+0x140>
    3c66:	80 e9       	ldi	r24, 0x90	; 144
    3c68:	91 e0       	ldi	r25, 0x01	; 1
    3c6a:	98 a3       	std	Y+32, r25	; 0x20
    3c6c:	8f 8f       	std	Y+31, r24	; 0x1f
    3c6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c70:	98 a1       	ldd	r25, Y+32	; 0x20
    3c72:	01 97       	sbiw	r24, 0x01	; 1
    3c74:	f1 f7       	brne	.-4      	; 0x3c72 <enu_PassByteAndLatch+0x12e>
    3c76:	98 a3       	std	Y+32, r25	; 0x20
    3c78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c7a:	89 a1       	ldd	r24, Y+33	; 0x21
    3c7c:	9a a1       	ldd	r25, Y+34	; 0x22
    3c7e:	01 97       	sbiw	r24, 0x01	; 1
    3c80:	9a a3       	std	Y+34, r25	; 0x22
    3c82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c84:	89 a1       	ldd	r24, Y+33	; 0x21
    3c86:	9a a1       	ldd	r25, Y+34	; 0x22
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	69 f7       	brne	.-38     	; 0x3c66 <enu_PassByteAndLatch+0x122>
    3c8c:	14 c0       	rjmp	.+40     	; 0x3cb6 <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c8e:	6b a1       	ldd	r22, Y+35	; 0x23
    3c90:	7c a1       	ldd	r23, Y+36	; 0x24
    3c92:	8d a1       	ldd	r24, Y+37	; 0x25
    3c94:	9e a1       	ldd	r25, Y+38	; 0x26
    3c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	9a a3       	std	Y+34, r25	; 0x22
    3ca0:	89 a3       	std	Y+33, r24	; 0x21
    3ca2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ca4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ca6:	9e 8f       	std	Y+30, r25	; 0x1e
    3ca8:	8d 8f       	std	Y+29, r24	; 0x1d
    3caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cae:	01 97       	sbiw	r24, 0x01	; 1
    3cb0:	f1 f7       	brne	.-4      	; 0x3cae <enu_PassByteAndLatch+0x16a>
    3cb2:	9e 8f       	std	Y+30, r25	; 0x1e
    3cb4:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	63 e0       	ldi	r22, 0x03	; 3
    3cba:	40 e0       	ldi	r20, 0x00	; 0
    3cbc:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    3cc0:	8c a5       	ldd	r24, Y+44	; 0x2c
    3cc2:	86 95       	lsr	r24
    3cc4:	86 95       	lsr	r24
    3cc6:	86 95       	lsr	r24
    3cc8:	98 2f       	mov	r25, r24
    3cca:	91 70       	andi	r25, 0x01	; 1
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	67 e0       	ldi	r22, 0x07	; 7
    3cd0:	49 2f       	mov	r20, r25
    3cd2:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    3cd6:	8c a5       	ldd	r24, Y+44	; 0x2c
    3cd8:	86 95       	lsr	r24
    3cda:	86 95       	lsr	r24
    3cdc:	98 2f       	mov	r25, r24
    3cde:	91 70       	andi	r25, 0x01	; 1
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	66 e0       	ldi	r22, 0x06	; 6
    3ce4:	49 2f       	mov	r20, r25
    3ce6:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    3cea:	8c a5       	ldd	r24, Y+44	; 0x2c
    3cec:	86 95       	lsr	r24
    3cee:	98 2f       	mov	r25, r24
    3cf0:	91 70       	andi	r25, 0x01	; 1
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	65 e0       	ldi	r22, 0x05	; 5
    3cf6:	49 2f       	mov	r20, r25
    3cf8:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    3cfc:	8c a5       	ldd	r24, Y+44	; 0x2c
    3cfe:	98 2f       	mov	r25, r24
    3d00:	91 70       	andi	r25, 0x01	; 1
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	64 e0       	ldi	r22, 0x04	; 4
    3d06:	49 2f       	mov	r20, r25
    3d08:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	63 e0       	ldi	r22, 0x03	; 3
    3d10:	41 e0       	ldi	r20, 0x01	; 1
    3d12:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    3d16:	80 e0       	ldi	r24, 0x00	; 0
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	a0 e8       	ldi	r26, 0x80	; 128
    3d1c:	bf e3       	ldi	r27, 0x3F	; 63
    3d1e:	89 8f       	std	Y+25, r24	; 0x19
    3d20:	9a 8f       	std	Y+26, r25	; 0x1a
    3d22:	ab 8f       	std	Y+27, r26	; 0x1b
    3d24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d26:	69 8d       	ldd	r22, Y+25	; 0x19
    3d28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	4a e7       	ldi	r20, 0x7A	; 122
    3d34:	55 e4       	ldi	r21, 0x45	; 69
    3d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	8d 8b       	std	Y+21, r24	; 0x15
    3d40:	9e 8b       	std	Y+22, r25	; 0x16
    3d42:	af 8b       	std	Y+23, r26	; 0x17
    3d44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d46:	6d 89       	ldd	r22, Y+21	; 0x15
    3d48:	7e 89       	ldd	r23, Y+22	; 0x16
    3d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	40 e8       	ldi	r20, 0x80	; 128
    3d54:	5f e3       	ldi	r21, 0x3F	; 63
    3d56:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3d5a:	88 23       	and	r24, r24
    3d5c:	2c f4       	brge	.+10     	; 0x3d68 <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	9c 8b       	std	Y+20, r25	; 0x14
    3d64:	8b 8b       	std	Y+19, r24	; 0x13
    3d66:	3f c0       	rjmp	.+126    	; 0x3de6 <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    3d68:	6d 89       	ldd	r22, Y+21	; 0x15
    3d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	3f ef       	ldi	r19, 0xFF	; 255
    3d74:	4f e7       	ldi	r20, 0x7F	; 127
    3d76:	57 e4       	ldi	r21, 0x47	; 71
    3d78:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3d7c:	18 16       	cp	r1, r24
    3d7e:	4c f5       	brge	.+82     	; 0x3dd2 <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d80:	69 8d       	ldd	r22, Y+25	; 0x19
    3d82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	40 e2       	ldi	r20, 0x20	; 32
    3d8e:	51 e4       	ldi	r21, 0x41	; 65
    3d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	bc 01       	movw	r22, r24
    3d9a:	cd 01       	movw	r24, r26
    3d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	9c 8b       	std	Y+20, r25	; 0x14
    3da6:	8b 8b       	std	Y+19, r24	; 0x13
    3da8:	0f c0       	rjmp	.+30     	; 0x3dc8 <enu_PassByteAndLatch+0x284>
    3daa:	80 e9       	ldi	r24, 0x90	; 144
    3dac:	91 e0       	ldi	r25, 0x01	; 1
    3dae:	9a 8b       	std	Y+18, r25	; 0x12
    3db0:	89 8b       	std	Y+17, r24	; 0x11
    3db2:	89 89       	ldd	r24, Y+17	; 0x11
    3db4:	9a 89       	ldd	r25, Y+18	; 0x12
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	f1 f7       	brne	.-4      	; 0x3db6 <enu_PassByteAndLatch+0x272>
    3dba:	9a 8b       	std	Y+18, r25	; 0x12
    3dbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dbe:	8b 89       	ldd	r24, Y+19	; 0x13
    3dc0:	9c 89       	ldd	r25, Y+20	; 0x14
    3dc2:	01 97       	sbiw	r24, 0x01	; 1
    3dc4:	9c 8b       	std	Y+20, r25	; 0x14
    3dc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    3dca:	9c 89       	ldd	r25, Y+20	; 0x14
    3dcc:	00 97       	sbiw	r24, 0x00	; 0
    3dce:	69 f7       	brne	.-38     	; 0x3daa <enu_PassByteAndLatch+0x266>
    3dd0:	14 c0       	rjmp	.+40     	; 0x3dfa <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    3dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    3dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    3dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dde:	dc 01       	movw	r26, r24
    3de0:	cb 01       	movw	r24, r22
    3de2:	9c 8b       	std	Y+20, r25	; 0x14
    3de4:	8b 8b       	std	Y+19, r24	; 0x13
    3de6:	8b 89       	ldd	r24, Y+19	; 0x13
    3de8:	9c 89       	ldd	r25, Y+20	; 0x14
    3dea:	98 8b       	std	Y+16, r25	; 0x10
    3dec:	8f 87       	std	Y+15, r24	; 0x0f
    3dee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3df0:	98 89       	ldd	r25, Y+16	; 0x10
    3df2:	01 97       	sbiw	r24, 0x01	; 1
    3df4:	f1 f7       	brne	.-4      	; 0x3df2 <enu_PassByteAndLatch+0x2ae>
    3df6:	98 8b       	std	Y+16, r25	; 0x10
    3df8:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	63 e0       	ldi	r22, 0x03	; 3
    3dfe:	40 e0       	ldi	r20, 0x00	; 0
    3e00:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	a0 e0       	ldi	r26, 0x00	; 0
    3e0a:	b0 e4       	ldi	r27, 0x40	; 64
    3e0c:	8b 87       	std	Y+11, r24	; 0x0b
    3e0e:	9c 87       	std	Y+12, r25	; 0x0c
    3e10:	ad 87       	std	Y+13, r26	; 0x0d
    3e12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	4a e7       	ldi	r20, 0x7A	; 122
    3e22:	55 e4       	ldi	r21, 0x45	; 69
    3e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	8f 83       	std	Y+7, r24	; 0x07
    3e2e:	98 87       	std	Y+8, r25	; 0x08
    3e30:	a9 87       	std	Y+9, r26	; 0x09
    3e32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e34:	6f 81       	ldd	r22, Y+7	; 0x07
    3e36:	78 85       	ldd	r23, Y+8	; 0x08
    3e38:	89 85       	ldd	r24, Y+9	; 0x09
    3e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	40 e8       	ldi	r20, 0x80	; 128
    3e42:	5f e3       	ldi	r21, 0x3F	; 63
    3e44:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3e48:	88 23       	and	r24, r24
    3e4a:	2c f4       	brge	.+10     	; 0x3e56 <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	9e 83       	std	Y+6, r25	; 0x06
    3e52:	8d 83       	std	Y+5, r24	; 0x05
    3e54:	3f c0       	rjmp	.+126    	; 0x3ed4 <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    3e56:	6f 81       	ldd	r22, Y+7	; 0x07
    3e58:	78 85       	ldd	r23, Y+8	; 0x08
    3e5a:	89 85       	ldd	r24, Y+9	; 0x09
    3e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	3f ef       	ldi	r19, 0xFF	; 255
    3e62:	4f e7       	ldi	r20, 0x7F	; 127
    3e64:	57 e4       	ldi	r21, 0x47	; 71
    3e66:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3e6a:	18 16       	cp	r1, r24
    3e6c:	4c f5       	brge	.+82     	; 0x3ec0 <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	40 e2       	ldi	r20, 0x20	; 32
    3e7c:	51 e4       	ldi	r21, 0x41	; 65
    3e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e82:	dc 01       	movw	r26, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	bc 01       	movw	r22, r24
    3e88:	cd 01       	movw	r24, r26
    3e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	9e 83       	std	Y+6, r25	; 0x06
    3e94:	8d 83       	std	Y+5, r24	; 0x05
    3e96:	0f c0       	rjmp	.+30     	; 0x3eb6 <enu_PassByteAndLatch+0x372>
    3e98:	80 e9       	ldi	r24, 0x90	; 144
    3e9a:	91 e0       	ldi	r25, 0x01	; 1
    3e9c:	9c 83       	std	Y+4, r25	; 0x04
    3e9e:	8b 83       	std	Y+3, r24	; 0x03
    3ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea4:	01 97       	sbiw	r24, 0x01	; 1
    3ea6:	f1 f7       	brne	.-4      	; 0x3ea4 <enu_PassByteAndLatch+0x360>
    3ea8:	9c 83       	std	Y+4, r25	; 0x04
    3eaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eac:	8d 81       	ldd	r24, Y+5	; 0x05
    3eae:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	9e 83       	std	Y+6, r25	; 0x06
    3eb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eba:	00 97       	sbiw	r24, 0x00	; 0
    3ebc:	69 f7       	brne	.-38     	; 0x3e98 <enu_PassByteAndLatch+0x354>
    3ebe:	14 c0       	rjmp	.+40     	; 0x3ee8 <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ec2:	78 85       	ldd	r23, Y+8	; 0x08
    3ec4:	89 85       	ldd	r24, Y+9	; 0x09
    3ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ecc:	dc 01       	movw	r26, r24
    3ece:	cb 01       	movw	r24, r22
    3ed0:	9e 83       	std	Y+6, r25	; 0x06
    3ed2:	8d 83       	std	Y+5, r24	; 0x05
    3ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed8:	9a 83       	std	Y+2, r25	; 0x02
    3eda:	89 83       	std	Y+1, r24	; 0x01
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee0:	01 97       	sbiw	r24, 0x01	; 1
    3ee2:	f1 f7       	brne	.-4      	; 0x3ee0 <enu_PassByteAndLatch+0x39c>
    3ee4:	9a 83       	std	Y+2, r25	; 0x02
    3ee6:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    3ee8:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    3eea:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    3eec:	ac 96       	adiw	r28, 0x2c	; 44
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	de bf       	out	0x3e, r29	; 62
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	cd bf       	out	0x3d, r28	; 61
    3ef8:	cf 91       	pop	r28
    3efa:	df 91       	pop	r29
    3efc:	08 95       	ret

00003efe <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    3efe:	df 93       	push	r29
    3f00:	cf 93       	push	r28
    3f02:	cd b7       	in	r28, 0x3d	; 61
    3f04:	de b7       	in	r29, 0x3e	; 62
    3f06:	27 97       	sbiw	r28, 0x07	; 7
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	f8 94       	cli
    3f0c:	de bf       	out	0x3e, r29	; 62
    3f0e:	0f be       	out	0x3f, r0	; 63
    3f10:	cd bf       	out	0x3d, r28	; 61
    3f12:	9c 83       	std	Y+4, r25	; 0x04
    3f14:	8b 83       	std	Y+3, r24	; 0x03
    3f16:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    3f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f20:	00 97       	sbiw	r24, 0x00	; 0
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <enu_AddCustomCharacter+0x28>
    3f24:	79 c0       	rjmp	.+242    	; 0x4018 <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    3f26:	8d 81       	ldd	r24, Y+5	; 0x05
    3f28:	88 30       	cpi	r24, 0x08	; 8
    3f2a:	08 f0       	brcs	.+2      	; 0x3f2e <enu_AddCustomCharacter+0x30>
    3f2c:	72 c0       	rjmp	.+228    	; 0x4012 <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    3f2e:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	61 e0       	ldi	r22, 0x01	; 1
    3f34:	40 e0       	ldi	r20, 0x00	; 0
    3f36:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    3f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3c:	28 2f       	mov	r18, r24
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	3f 83       	std	Y+7, r19	; 0x07
    3f42:	2e 83       	std	Y+6, r18	; 0x06
    3f44:	8e 81       	ldd	r24, Y+6	; 0x06
    3f46:	9f 81       	ldd	r25, Y+7	; 0x07
    3f48:	83 30       	cpi	r24, 0x03	; 3
    3f4a:	91 05       	cpc	r25, r1
    3f4c:	a9 f1       	breq	.+106    	; 0x3fb8 <enu_AddCustomCharacter+0xba>
    3f4e:	2e 81       	ldd	r18, Y+6	; 0x06
    3f50:	3f 81       	ldd	r19, Y+7	; 0x07
    3f52:	24 30       	cpi	r18, 0x04	; 4
    3f54:	31 05       	cpc	r19, r1
    3f56:	7c f4       	brge	.+30     	; 0x3f76 <enu_AddCustomCharacter+0x78>
    3f58:	8e 81       	ldd	r24, Y+6	; 0x06
    3f5a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f5c:	81 30       	cpi	r24, 0x01	; 1
    3f5e:	91 05       	cpc	r25, r1
    3f60:	19 f1       	breq	.+70     	; 0x3fa8 <enu_AddCustomCharacter+0xaa>
    3f62:	2e 81       	ldd	r18, Y+6	; 0x06
    3f64:	3f 81       	ldd	r19, Y+7	; 0x07
    3f66:	22 30       	cpi	r18, 0x02	; 2
    3f68:	31 05       	cpc	r19, r1
    3f6a:	14 f5       	brge	.+68     	; 0x3fb0 <enu_AddCustomCharacter+0xb2>
    3f6c:	8e 81       	ldd	r24, Y+6	; 0x06
    3f6e:	9f 81       	ldd	r25, Y+7	; 0x07
    3f70:	00 97       	sbiw	r24, 0x00	; 0
    3f72:	b1 f0       	breq	.+44     	; 0x3fa0 <enu_AddCustomCharacter+0xa2>
    3f74:	34 c0       	rjmp	.+104    	; 0x3fde <enu_AddCustomCharacter+0xe0>
    3f76:	2e 81       	ldd	r18, Y+6	; 0x06
    3f78:	3f 81       	ldd	r19, Y+7	; 0x07
    3f7a:	25 30       	cpi	r18, 0x05	; 5
    3f7c:	31 05       	cpc	r19, r1
    3f7e:	21 f1       	breq	.+72     	; 0x3fc8 <enu_AddCustomCharacter+0xca>
    3f80:	8e 81       	ldd	r24, Y+6	; 0x06
    3f82:	9f 81       	ldd	r25, Y+7	; 0x07
    3f84:	85 30       	cpi	r24, 0x05	; 5
    3f86:	91 05       	cpc	r25, r1
    3f88:	dc f0       	brlt	.+54     	; 0x3fc0 <enu_AddCustomCharacter+0xc2>
    3f8a:	2e 81       	ldd	r18, Y+6	; 0x06
    3f8c:	3f 81       	ldd	r19, Y+7	; 0x07
    3f8e:	26 30       	cpi	r18, 0x06	; 6
    3f90:	31 05       	cpc	r19, r1
    3f92:	f1 f0       	breq	.+60     	; 0x3fd0 <enu_AddCustomCharacter+0xd2>
    3f94:	8e 81       	ldd	r24, Y+6	; 0x06
    3f96:	9f 81       	ldd	r25, Y+7	; 0x07
    3f98:	87 30       	cpi	r24, 0x07	; 7
    3f9a:	91 05       	cpc	r25, r1
    3f9c:	e9 f0       	breq	.+58     	; 0x3fd8 <enu_AddCustomCharacter+0xda>
    3f9e:	1f c0       	rjmp	.+62     	; 0x3fde <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    3fa0:	80 e4       	ldi	r24, 0x40	; 64
    3fa2:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
    3fa6:	1b c0       	rjmp	.+54     	; 0x3fde <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    3fa8:	88 e4       	ldi	r24, 0x48	; 72
    3faa:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
    3fae:	17 c0       	rjmp	.+46     	; 0x3fde <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    3fb0:	80 e5       	ldi	r24, 0x50	; 80
    3fb2:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
    3fb6:	13 c0       	rjmp	.+38     	; 0x3fde <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    3fb8:	88 e5       	ldi	r24, 0x58	; 88
    3fba:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
    3fbe:	0f c0       	rjmp	.+30     	; 0x3fde <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    3fc0:	80 e6       	ldi	r24, 0x60	; 96
    3fc2:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
    3fc6:	0b c0       	rjmp	.+22     	; 0x3fde <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    3fc8:	88 e6       	ldi	r24, 0x68	; 104
    3fca:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
    3fce:	07 c0       	rjmp	.+14     	; 0x3fde <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    3fd0:	80 e7       	ldi	r24, 0x70	; 112
    3fd2:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
    3fd6:	03 c0       	rjmp	.+6      	; 0x3fde <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    3fd8:	88 e7       	ldi	r24, 0x78	; 120
    3fda:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	61 e0       	ldi	r22, 0x01	; 1
    3fe2:	41 e0       	ldi	r20, 0x01	; 1
    3fe4:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    3fe8:	19 82       	std	Y+1, r1	; 0x01
    3fea:	0e c0       	rjmp	.+28     	; 0x4008 <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    3fec:	89 81       	ldd	r24, Y+1	; 0x01
    3fee:	28 2f       	mov	r18, r24
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	e2 0f       	add	r30, r18
    3ffa:	f3 1f       	adc	r31, r19
    3ffc:	80 81       	ld	r24, Z
    3ffe:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    4002:	89 81       	ldd	r24, Y+1	; 0x01
    4004:	8f 5f       	subi	r24, 0xFF	; 255
    4006:	89 83       	std	Y+1, r24	; 0x01
    4008:	89 81       	ldd	r24, Y+1	; 0x01
    400a:	88 30       	cpi	r24, 0x08	; 8
    400c:	78 f3       	brcs	.-34     	; 0x3fec <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    400e:	1a 82       	std	Y+2, r1	; 0x02
    4010:	05 c0       	rjmp	.+10     	; 0x401c <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4012:	82 e0       	ldi	r24, 0x02	; 2
    4014:	8a 83       	std	Y+2, r24	; 0x02
    4016:	02 c0       	rjmp	.+4      	; 0x401c <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4018:	83 e0       	ldi	r24, 0x03	; 3
    401a:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    401c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    401e:	27 96       	adiw	r28, 0x07	; 7
    4020:	0f b6       	in	r0, 0x3f	; 63
    4022:	f8 94       	cli
    4024:	de bf       	out	0x3e, r29	; 62
    4026:	0f be       	out	0x3f, r0	; 63
    4028:	cd bf       	out	0x3d, r28	; 61
    402a:	cf 91       	pop	r28
    402c:	df 91       	pop	r29
    402e:	08 95       	ret

00004030 <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    4030:	df 93       	push	r29
    4032:	cf 93       	push	r28
    4034:	00 d0       	rcall	.+0      	; 0x4036 <enu_ConvertDigitToASCII+0x6>
    4036:	0f 92       	push	r0
    4038:	cd b7       	in	r28, 0x3d	; 61
    403a:	de b7       	in	r29, 0x3e	; 62
    403c:	9b 83       	std	Y+3, r25	; 0x03
    403e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    4044:	8a 81       	ldd	r24, Y+2	; 0x02
    4046:	9b 81       	ldd	r25, Y+3	; 0x03
    4048:	00 97       	sbiw	r24, 0x00	; 0
    404a:	89 f0       	breq	.+34     	; 0x406e <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    404c:	ea 81       	ldd	r30, Y+2	; 0x02
    404e:	fb 81       	ldd	r31, Y+3	; 0x03
    4050:	80 81       	ld	r24, Z
    4052:	8a 30       	cpi	r24, 0x0A	; 10
    4054:	48 f4       	brcc	.+18     	; 0x4068 <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    4056:	ea 81       	ldd	r30, Y+2	; 0x02
    4058:	fb 81       	ldd	r31, Y+3	; 0x03
    405a:	80 81       	ld	r24, Z
    405c:	80 5d       	subi	r24, 0xD0	; 208
    405e:	ea 81       	ldd	r30, Y+2	; 0x02
    4060:	fb 81       	ldd	r31, Y+3	; 0x03
    4062:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    4064:	19 82       	std	Y+1, r1	; 0x01
    4066:	05 c0       	rjmp	.+10     	; 0x4072 <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    4068:	82 e0       	ldi	r24, 0x02	; 2
    406a:	89 83       	std	Y+1, r24	; 0x01
    406c:	02 c0       	rjmp	.+4      	; 0x4072 <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    406e:	83 e0       	ldi	r24, 0x03	; 3
    4070:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    4072:	89 81       	ldd	r24, Y+1	; 0x01
}
    4074:	0f 90       	pop	r0
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	08 95       	ret

00004080 <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    4080:	ef 92       	push	r14
    4082:	ff 92       	push	r15
    4084:	0f 93       	push	r16
    4086:	1f 93       	push	r17
    4088:	df 93       	push	r29
    408a:	cf 93       	push	r28
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
    4090:	27 97       	sbiw	r28, 0x07	; 7
    4092:	0f b6       	in	r0, 0x3f	; 63
    4094:	f8 94       	cli
    4096:	de bf       	out	0x3e, r29	; 62
    4098:	0f be       	out	0x3f, r0	; 63
    409a:	cd bf       	out	0x3d, r28	; 61
    409c:	9f 83       	std	Y+7, r25	; 0x07
    409e:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    40a0:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    40a2:	8e 81       	ldd	r24, Y+6	; 0x06
    40a4:	9f 81       	ldd	r25, Y+7	; 0x07
    40a6:	00 97       	sbiw	r24, 0x00	; 0
    40a8:	09 f4       	brne	.+2      	; 0x40ac <enu_ReverseInteger+0x2c>
    40aa:	58 c0       	rjmp	.+176    	; 0x415c <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    40ac:	19 82       	std	Y+1, r1	; 0x01
    40ae:	1a 82       	std	Y+2, r1	; 0x02
    40b0:	1b 82       	std	Y+3, r1	; 0x03
    40b2:	1c 82       	std	Y+4, r1	; 0x04
    40b4:	3c c0       	rjmp	.+120    	; 0x412e <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    40b6:	89 81       	ldd	r24, Y+1	; 0x01
    40b8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ba:	ab 81       	ldd	r26, Y+3	; 0x03
    40bc:	bc 81       	ldd	r27, Y+4	; 0x04
    40be:	2a e0       	ldi	r18, 0x0A	; 10
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	40 e0       	ldi	r20, 0x00	; 0
    40c4:	50 e0       	ldi	r21, 0x00	; 0
    40c6:	bc 01       	movw	r22, r24
    40c8:	cd 01       	movw	r24, r26
    40ca:	0e 94 28 25 	call	0x4a50	; 0x4a50 <__mulsi3>
    40ce:	7b 01       	movw	r14, r22
    40d0:	8c 01       	movw	r16, r24
    40d2:	ee 81       	ldd	r30, Y+6	; 0x06
    40d4:	ff 81       	ldd	r31, Y+7	; 0x07
    40d6:	80 81       	ld	r24, Z
    40d8:	91 81       	ldd	r25, Z+1	; 0x01
    40da:	a2 81       	ldd	r26, Z+2	; 0x02
    40dc:	b3 81       	ldd	r27, Z+3	; 0x03
    40de:	2a e0       	ldi	r18, 0x0A	; 10
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	40 e0       	ldi	r20, 0x00	; 0
    40e4:	50 e0       	ldi	r21, 0x00	; 0
    40e6:	bc 01       	movw	r22, r24
    40e8:	cd 01       	movw	r24, r26
    40ea:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <__udivmodsi4>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	8e 0d       	add	r24, r14
    40f4:	9f 1d       	adc	r25, r15
    40f6:	a0 1f       	adc	r26, r16
    40f8:	b1 1f       	adc	r27, r17
    40fa:	89 83       	std	Y+1, r24	; 0x01
    40fc:	9a 83       	std	Y+2, r25	; 0x02
    40fe:	ab 83       	std	Y+3, r26	; 0x03
    4100:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    4102:	ee 81       	ldd	r30, Y+6	; 0x06
    4104:	ff 81       	ldd	r31, Y+7	; 0x07
    4106:	80 81       	ld	r24, Z
    4108:	91 81       	ldd	r25, Z+1	; 0x01
    410a:	a2 81       	ldd	r26, Z+2	; 0x02
    410c:	b3 81       	ldd	r27, Z+3	; 0x03
    410e:	2a e0       	ldi	r18, 0x0A	; 10
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	40 e0       	ldi	r20, 0x00	; 0
    4114:	50 e0       	ldi	r21, 0x00	; 0
    4116:	bc 01       	movw	r22, r24
    4118:	cd 01       	movw	r24, r26
    411a:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <__udivmodsi4>
    411e:	da 01       	movw	r26, r20
    4120:	c9 01       	movw	r24, r18
    4122:	ee 81       	ldd	r30, Y+6	; 0x06
    4124:	ff 81       	ldd	r31, Y+7	; 0x07
    4126:	80 83       	st	Z, r24
    4128:	91 83       	std	Z+1, r25	; 0x01
    412a:	a2 83       	std	Z+2, r26	; 0x02
    412c:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    412e:	ee 81       	ldd	r30, Y+6	; 0x06
    4130:	ff 81       	ldd	r31, Y+7	; 0x07
    4132:	80 81       	ld	r24, Z
    4134:	91 81       	ldd	r25, Z+1	; 0x01
    4136:	a2 81       	ldd	r26, Z+2	; 0x02
    4138:	b3 81       	ldd	r27, Z+3	; 0x03
    413a:	00 97       	sbiw	r24, 0x00	; 0
    413c:	a1 05       	cpc	r26, r1
    413e:	b1 05       	cpc	r27, r1
    4140:	09 f0       	breq	.+2      	; 0x4144 <enu_ReverseInteger+0xc4>
    4142:	b9 cf       	rjmp	.-142    	; 0x40b6 <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    4144:	ee 81       	ldd	r30, Y+6	; 0x06
    4146:	ff 81       	ldd	r31, Y+7	; 0x07
    4148:	89 81       	ldd	r24, Y+1	; 0x01
    414a:	9a 81       	ldd	r25, Y+2	; 0x02
    414c:	ab 81       	ldd	r26, Y+3	; 0x03
    414e:	bc 81       	ldd	r27, Y+4	; 0x04
    4150:	80 83       	st	Z, r24
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	a2 83       	std	Z+2, r26	; 0x02
    4156:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    4158:	1d 82       	std	Y+5, r1	; 0x05
    415a:	02 c0       	rjmp	.+4      	; 0x4160 <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    415c:	83 e0       	ldi	r24, 0x03	; 3
    415e:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    4160:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4162:	27 96       	adiw	r28, 0x07	; 7
    4164:	0f b6       	in	r0, 0x3f	; 63
    4166:	f8 94       	cli
    4168:	de bf       	out	0x3e, r29	; 62
    416a:	0f be       	out	0x3f, r0	; 63
    416c:	cd bf       	out	0x3d, r28	; 61
    416e:	cf 91       	pop	r28
    4170:	df 91       	pop	r29
    4172:	1f 91       	pop	r17
    4174:	0f 91       	pop	r16
    4176:	ff 90       	pop	r15
    4178:	ef 90       	pop	r14
    417a:	08 95       	ret

0000417c <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    417c:	df 93       	push	r29
    417e:	cf 93       	push	r28
    4180:	00 d0       	rcall	.+0      	; 0x4182 <Keypad_enu_Initialization+0x6>
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    418a:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    418c:	19 82       	std	Y+1, r1	; 0x01
    418e:	31 c0       	rjmp	.+98     	; 0x41f2 <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    4190:	89 81       	ldd	r24, Y+1	; 0x01
    4192:	88 2f       	mov	r24, r24
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	88 0f       	add	r24, r24
    4198:	99 1f       	adc	r25, r25
    419a:	fc 01       	movw	r30, r24
    419c:	e4 57       	subi	r30, 0x74	; 116
    419e:	fe 4f       	sbci	r31, 0xFE	; 254
    41a0:	20 81       	ld	r18, Z
    41a2:	89 81       	ldd	r24, Y+1	; 0x01
    41a4:	88 2f       	mov	r24, r24
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	88 0f       	add	r24, r24
    41aa:	99 1f       	adc	r25, r25
    41ac:	fc 01       	movw	r30, r24
    41ae:	e3 57       	subi	r30, 0x73	; 115
    41b0:	fe 4f       	sbci	r31, 0xFE	; 254
    41b2:	90 81       	ld	r25, Z
    41b4:	82 2f       	mov	r24, r18
    41b6:	69 2f       	mov	r22, r25
    41b8:	40 e0       	ldi	r20, 0x00	; 0
    41ba:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    41be:	89 81       	ldd	r24, Y+1	; 0x01
    41c0:	88 2f       	mov	r24, r24
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	88 0f       	add	r24, r24
    41c6:	99 1f       	adc	r25, r25
    41c8:	fc 01       	movw	r30, r24
    41ca:	e4 57       	subi	r30, 0x74	; 116
    41cc:	fe 4f       	sbci	r31, 0xFE	; 254
    41ce:	20 81       	ld	r18, Z
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	88 2f       	mov	r24, r24
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	88 0f       	add	r24, r24
    41d8:	99 1f       	adc	r25, r25
    41da:	fc 01       	movw	r30, r24
    41dc:	e3 57       	subi	r30, 0x73	; 115
    41de:	fe 4f       	sbci	r31, 0xFE	; 254
    41e0:	90 81       	ld	r25, Z
    41e2:	82 2f       	mov	r24, r18
    41e4:	69 2f       	mov	r22, r25
    41e6:	41 e0       	ldi	r20, 0x01	; 1
    41e8:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    41ec:	89 81       	ldd	r24, Y+1	; 0x01
    41ee:	8f 5f       	subi	r24, 0xFF	; 255
    41f0:	89 83       	std	Y+1, r24	; 0x01
    41f2:	89 81       	ldd	r24, Y+1	; 0x01
    41f4:	84 30       	cpi	r24, 0x04	; 4
    41f6:	60 f2       	brcs	.-104    	; 0x4190 <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    41f8:	19 82       	std	Y+1, r1	; 0x01
    41fa:	31 c0       	rjmp	.+98     	; 0x425e <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    41fc:	89 81       	ldd	r24, Y+1	; 0x01
    41fe:	88 2f       	mov	r24, r24
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	88 0f       	add	r24, r24
    4204:	99 1f       	adc	r25, r25
    4206:	fc 01       	movw	r30, r24
    4208:	ec 56       	subi	r30, 0x6C	; 108
    420a:	fe 4f       	sbci	r31, 0xFE	; 254
    420c:	20 81       	ld	r18, Z
    420e:	89 81       	ldd	r24, Y+1	; 0x01
    4210:	88 2f       	mov	r24, r24
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	88 0f       	add	r24, r24
    4216:	99 1f       	adc	r25, r25
    4218:	fc 01       	movw	r30, r24
    421a:	eb 56       	subi	r30, 0x6B	; 107
    421c:	fe 4f       	sbci	r31, 0xFE	; 254
    421e:	90 81       	ld	r25, Z
    4220:	82 2f       	mov	r24, r18
    4222:	69 2f       	mov	r22, r25
    4224:	41 e0       	ldi	r20, 0x01	; 1
    4226:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    422a:	89 81       	ldd	r24, Y+1	; 0x01
    422c:	88 2f       	mov	r24, r24
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	88 0f       	add	r24, r24
    4232:	99 1f       	adc	r25, r25
    4234:	fc 01       	movw	r30, r24
    4236:	ec 56       	subi	r30, 0x6C	; 108
    4238:	fe 4f       	sbci	r31, 0xFE	; 254
    423a:	20 81       	ld	r18, Z
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	88 2f       	mov	r24, r24
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	88 0f       	add	r24, r24
    4244:	99 1f       	adc	r25, r25
    4246:	fc 01       	movw	r30, r24
    4248:	eb 56       	subi	r30, 0x6B	; 107
    424a:	fe 4f       	sbci	r31, 0xFE	; 254
    424c:	90 81       	ld	r25, Z
    424e:	82 2f       	mov	r24, r18
    4250:	69 2f       	mov	r22, r25
    4252:	40 e0       	ldi	r20, 0x00	; 0
    4254:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	8f 5f       	subi	r24, 0xFF	; 255
    425c:	89 83       	std	Y+1, r24	; 0x01
    425e:	89 81       	ldd	r24, Y+1	; 0x01
    4260:	84 30       	cpi	r24, 0x04	; 4
    4262:	60 f2       	brcs	.-104    	; 0x41fc <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    4264:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    4266:	8a 81       	ldd	r24, Y+2	; 0x02

}
    4268:	0f 90       	pop	r0
    426a:	0f 90       	pop	r0
    426c:	cf 91       	pop	r28
    426e:	df 91       	pop	r29
    4270:	08 95       	ret

00004272 <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    4272:	df 93       	push	r29
    4274:	cf 93       	push	r28
    4276:	cd b7       	in	r28, 0x3d	; 61
    4278:	de b7       	in	r29, 0x3e	; 62
    427a:	aa 97       	sbiw	r28, 0x2a	; 42
    427c:	0f b6       	in	r0, 0x3f	; 63
    427e:	f8 94       	cli
    4280:	de bf       	out	0x3e, r29	; 62
    4282:	0f be       	out	0x3f, r0	; 63
    4284:	cd bf       	out	0x3d, r28	; 61
    4286:	9d a3       	std	Y+37, r25	; 0x25
    4288:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    428e:	8c a1       	ldd	r24, Y+36	; 0x24
    4290:	9d a1       	ldd	r25, Y+37	; 0x25
    4292:	00 97       	sbiw	r24, 0x00	; 0
    4294:	09 f4       	brne	.+2      	; 0x4298 <Keypad_enu_GetButtonPressedValue+0x26>
    4296:	68 c1       	rjmp	.+720    	; 0x4568 <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    4298:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    429a:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    429c:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    429e:	ec a1       	ldd	r30, Y+36	; 0x24
    42a0:	fd a1       	ldd	r31, Y+37	; 0x25
    42a2:	8f ef       	ldi	r24, 0xFF	; 255
    42a4:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    42a6:	19 8a       	std	Y+17, r1	; 0x11
    42a8:	5a c1       	rjmp	.+692    	; 0x455e <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    42aa:	89 89       	ldd	r24, Y+17	; 0x11
    42ac:	88 2f       	mov	r24, r24
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	88 0f       	add	r24, r24
    42b2:	99 1f       	adc	r25, r25
    42b4:	fc 01       	movw	r30, r24
    42b6:	e4 57       	subi	r30, 0x74	; 116
    42b8:	fe 4f       	sbci	r31, 0xFE	; 254
    42ba:	40 81       	ld	r20, Z
    42bc:	89 89       	ldd	r24, Y+17	; 0x11
    42be:	88 2f       	mov	r24, r24
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	88 0f       	add	r24, r24
    42c4:	99 1f       	adc	r25, r25
    42c6:	fc 01       	movw	r30, r24
    42c8:	e3 57       	subi	r30, 0x73	; 115
    42ca:	fe 4f       	sbci	r31, 0xFE	; 254
    42cc:	90 81       	ld	r25, Z
    42ce:	9e 01       	movw	r18, r28
    42d0:	2d 5e       	subi	r18, 0xED	; 237
    42d2:	3f 4f       	sbci	r19, 0xFF	; 255
    42d4:	84 2f       	mov	r24, r20
    42d6:	69 2f       	mov	r22, r25
    42d8:	a9 01       	movw	r20, r18
    42da:	0e 94 19 12 	call	0x2432	; 0x2432 <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    42de:	8b 89       	ldd	r24, Y+19	; 0x13
    42e0:	88 23       	and	r24, r24
    42e2:	09 f0       	breq	.+2      	; 0x42e6 <Keypad_enu_GetButtonPressedValue+0x74>
    42e4:	36 c1       	rjmp	.+620    	; 0x4552 <Keypad_enu_GetButtonPressedValue+0x2e0>
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	a0 e4       	ldi	r26, 0x40	; 64
    42ec:	b0 e4       	ldi	r27, 0x40	; 64
    42ee:	8b 87       	std	Y+11, r24	; 0x0b
    42f0:	9c 87       	std	Y+12, r25	; 0x0c
    42f2:	ad 87       	std	Y+13, r26	; 0x0d
    42f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    42f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    42fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    42fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    42fe:	20 e0       	ldi	r18, 0x00	; 0
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	4a e7       	ldi	r20, 0x7A	; 122
    4304:	55 e4       	ldi	r21, 0x45	; 69
    4306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430a:	dc 01       	movw	r26, r24
    430c:	cb 01       	movw	r24, r22
    430e:	8f 83       	std	Y+7, r24	; 0x07
    4310:	98 87       	std	Y+8, r25	; 0x08
    4312:	a9 87       	std	Y+9, r26	; 0x09
    4314:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4316:	6f 81       	ldd	r22, Y+7	; 0x07
    4318:	78 85       	ldd	r23, Y+8	; 0x08
    431a:	89 85       	ldd	r24, Y+9	; 0x09
    431c:	9a 85       	ldd	r25, Y+10	; 0x0a
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	40 e8       	ldi	r20, 0x80	; 128
    4324:	5f e3       	ldi	r21, 0x3F	; 63
    4326:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    432a:	88 23       	and	r24, r24
    432c:	2c f4       	brge	.+10     	; 0x4338 <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	9e 83       	std	Y+6, r25	; 0x06
    4334:	8d 83       	std	Y+5, r24	; 0x05
    4336:	3f c0       	rjmp	.+126    	; 0x43b6 <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    4338:	6f 81       	ldd	r22, Y+7	; 0x07
    433a:	78 85       	ldd	r23, Y+8	; 0x08
    433c:	89 85       	ldd	r24, Y+9	; 0x09
    433e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	3f ef       	ldi	r19, 0xFF	; 255
    4344:	4f e7       	ldi	r20, 0x7F	; 127
    4346:	57 e4       	ldi	r21, 0x47	; 71
    4348:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    434c:	18 16       	cp	r1, r24
    434e:	4c f5       	brge	.+82     	; 0x43a2 <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4350:	6b 85       	ldd	r22, Y+11	; 0x0b
    4352:	7c 85       	ldd	r23, Y+12	; 0x0c
    4354:	8d 85       	ldd	r24, Y+13	; 0x0d
    4356:	9e 85       	ldd	r25, Y+14	; 0x0e
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	40 e2       	ldi	r20, 0x20	; 32
    435e:	51 e4       	ldi	r21, 0x41	; 65
    4360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4364:	dc 01       	movw	r26, r24
    4366:	cb 01       	movw	r24, r22
    4368:	bc 01       	movw	r22, r24
    436a:	cd 01       	movw	r24, r26
    436c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4370:	dc 01       	movw	r26, r24
    4372:	cb 01       	movw	r24, r22
    4374:	9e 83       	std	Y+6, r25	; 0x06
    4376:	8d 83       	std	Y+5, r24	; 0x05
    4378:	0f c0       	rjmp	.+30     	; 0x4398 <Keypad_enu_GetButtonPressedValue+0x126>
    437a:	80 e9       	ldi	r24, 0x90	; 144
    437c:	91 e0       	ldi	r25, 0x01	; 1
    437e:	9c 83       	std	Y+4, r25	; 0x04
    4380:	8b 83       	std	Y+3, r24	; 0x03
    4382:	8b 81       	ldd	r24, Y+3	; 0x03
    4384:	9c 81       	ldd	r25, Y+4	; 0x04
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	f1 f7       	brne	.-4      	; 0x4386 <Keypad_enu_GetButtonPressedValue+0x114>
    438a:	9c 83       	std	Y+4, r25	; 0x04
    438c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    438e:	8d 81       	ldd	r24, Y+5	; 0x05
    4390:	9e 81       	ldd	r25, Y+6	; 0x06
    4392:	01 97       	sbiw	r24, 0x01	; 1
    4394:	9e 83       	std	Y+6, r25	; 0x06
    4396:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4398:	8d 81       	ldd	r24, Y+5	; 0x05
    439a:	9e 81       	ldd	r25, Y+6	; 0x06
    439c:	00 97       	sbiw	r24, 0x00	; 0
    439e:	69 f7       	brne	.-38     	; 0x437a <Keypad_enu_GetButtonPressedValue+0x108>
    43a0:	14 c0       	rjmp	.+40     	; 0x43ca <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a2:	6f 81       	ldd	r22, Y+7	; 0x07
    43a4:	78 85       	ldd	r23, Y+8	; 0x08
    43a6:	89 85       	ldd	r24, Y+9	; 0x09
    43a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    43aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	9e 83       	std	Y+6, r25	; 0x06
    43b4:	8d 83       	std	Y+5, r24	; 0x05
    43b6:	8d 81       	ldd	r24, Y+5	; 0x05
    43b8:	9e 81       	ldd	r25, Y+6	; 0x06
    43ba:	9a 83       	std	Y+2, r25	; 0x02
    43bc:	89 83       	std	Y+1, r24	; 0x01
    43be:	89 81       	ldd	r24, Y+1	; 0x01
    43c0:	9a 81       	ldd	r25, Y+2	; 0x02
    43c2:	01 97       	sbiw	r24, 0x01	; 1
    43c4:	f1 f7       	brne	.-4      	; 0x43c2 <Keypad_enu_GetButtonPressedValue+0x150>
    43c6:	9a 83       	std	Y+2, r25	; 0x02
    43c8:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    43ca:	89 89       	ldd	r24, Y+17	; 0x11
    43cc:	88 2f       	mov	r24, r24
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	88 0f       	add	r24, r24
    43d2:	99 1f       	adc	r25, r25
    43d4:	fc 01       	movw	r30, r24
    43d6:	e4 57       	subi	r30, 0x74	; 116
    43d8:	fe 4f       	sbci	r31, 0xFE	; 254
    43da:	40 81       	ld	r20, Z
    43dc:	89 89       	ldd	r24, Y+17	; 0x11
    43de:	88 2f       	mov	r24, r24
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	88 0f       	add	r24, r24
    43e4:	99 1f       	adc	r25, r25
    43e6:	fc 01       	movw	r30, r24
    43e8:	e3 57       	subi	r30, 0x73	; 115
    43ea:	fe 4f       	sbci	r31, 0xFE	; 254
    43ec:	90 81       	ld	r25, Z
    43ee:	9e 01       	movw	r18, r28
    43f0:	2d 5e       	subi	r18, 0xED	; 237
    43f2:	3f 4f       	sbci	r19, 0xFF	; 255
    43f4:	84 2f       	mov	r24, r20
    43f6:	69 2f       	mov	r22, r25
    43f8:	a9 01       	movw	r20, r18
    43fa:	0e 94 19 12 	call	0x2432	; 0x2432 <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    43fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4400:	88 23       	and	r24, r24
    4402:	09 f0       	breq	.+2      	; 0x4406 <Keypad_enu_GetButtonPressedValue+0x194>
    4404:	a6 c0       	rjmp	.+332    	; 0x4552 <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    4406:	18 8a       	std	Y+16, r1	; 0x10
    4408:	a0 c0       	rjmp	.+320    	; 0x454a <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    440a:	88 89       	ldd	r24, Y+16	; 0x10
    440c:	88 2f       	mov	r24, r24
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	88 0f       	add	r24, r24
    4412:	99 1f       	adc	r25, r25
    4414:	fc 01       	movw	r30, r24
    4416:	ec 56       	subi	r30, 0x6C	; 108
    4418:	fe 4f       	sbci	r31, 0xFE	; 254
    441a:	20 81       	ld	r18, Z
    441c:	88 89       	ldd	r24, Y+16	; 0x10
    441e:	88 2f       	mov	r24, r24
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	88 0f       	add	r24, r24
    4424:	99 1f       	adc	r25, r25
    4426:	fc 01       	movw	r30, r24
    4428:	eb 56       	subi	r30, 0x6B	; 107
    442a:	fe 4f       	sbci	r31, 0xFE	; 254
    442c:	90 81       	ld	r25, Z
    442e:	82 2f       	mov	r24, r18
    4430:	69 2f       	mov	r22, r25
    4432:	41 e0       	ldi	r20, 0x01	; 1
    4434:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    4438:	89 89       	ldd	r24, Y+17	; 0x11
    443a:	88 2f       	mov	r24, r24
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	88 0f       	add	r24, r24
    4440:	99 1f       	adc	r25, r25
    4442:	fc 01       	movw	r30, r24
    4444:	e4 57       	subi	r30, 0x74	; 116
    4446:	fe 4f       	sbci	r31, 0xFE	; 254
    4448:	40 81       	ld	r20, Z
    444a:	89 89       	ldd	r24, Y+17	; 0x11
    444c:	88 2f       	mov	r24, r24
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	88 0f       	add	r24, r24
    4452:	99 1f       	adc	r25, r25
    4454:	fc 01       	movw	r30, r24
    4456:	e3 57       	subi	r30, 0x73	; 115
    4458:	fe 4f       	sbci	r31, 0xFE	; 254
    445a:	90 81       	ld	r25, Z
    445c:	9e 01       	movw	r18, r28
    445e:	2d 5e       	subi	r18, 0xED	; 237
    4460:	3f 4f       	sbci	r19, 0xFF	; 255
    4462:	84 2f       	mov	r24, r20
    4464:	69 2f       	mov	r22, r25
    4466:	a9 01       	movw	r20, r18
    4468:	0e 94 19 12 	call	0x2432	; 0x2432 <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    446c:	8b 89       	ldd	r24, Y+19	; 0x13
    446e:	81 30       	cpi	r24, 0x01	; 1
    4470:	09 f0       	breq	.+2      	; 0x4474 <Keypad_enu_GetButtonPressedValue+0x202>
    4472:	51 c0       	rjmp	.+162    	; 0x4516 <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    4474:	ce 01       	movw	r24, r28
    4476:	44 96       	adiw	r24, 0x14	; 20
    4478:	9f a3       	std	Y+39, r25	; 0x27
    447a:	8e a3       	std	Y+38, r24	; 0x26
    447c:	e0 ea       	ldi	r30, 0xA0	; 160
    447e:	f1 e0       	ldi	r31, 0x01	; 1
    4480:	f9 a7       	std	Y+41, r31	; 0x29
    4482:	e8 a7       	std	Y+40, r30	; 0x28
    4484:	f0 e1       	ldi	r31, 0x10	; 16
    4486:	fa a7       	std	Y+42, r31	; 0x2a
    4488:	e8 a5       	ldd	r30, Y+40	; 0x28
    448a:	f9 a5       	ldd	r31, Y+41	; 0x29
    448c:	00 80       	ld	r0, Z
    448e:	88 a5       	ldd	r24, Y+40	; 0x28
    4490:	99 a5       	ldd	r25, Y+41	; 0x29
    4492:	01 96       	adiw	r24, 0x01	; 1
    4494:	99 a7       	std	Y+41, r25	; 0x29
    4496:	88 a7       	std	Y+40, r24	; 0x28
    4498:	ee a1       	ldd	r30, Y+38	; 0x26
    449a:	ff a1       	ldd	r31, Y+39	; 0x27
    449c:	00 82       	st	Z, r0
    449e:	8e a1       	ldd	r24, Y+38	; 0x26
    44a0:	9f a1       	ldd	r25, Y+39	; 0x27
    44a2:	01 96       	adiw	r24, 0x01	; 1
    44a4:	9f a3       	std	Y+39, r25	; 0x27
    44a6:	8e a3       	std	Y+38, r24	; 0x26
    44a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    44aa:	91 50       	subi	r25, 0x01	; 1
    44ac:	9a a7       	std	Y+42, r25	; 0x2a
    44ae:	ea a5       	ldd	r30, Y+42	; 0x2a
    44b0:	ee 23       	and	r30, r30
    44b2:	51 f7       	brne	.-44     	; 0x4488 <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    44b4:	89 89       	ldd	r24, Y+17	; 0x11
    44b6:	28 2f       	mov	r18, r24
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	88 89       	ldd	r24, Y+16	; 0x10
    44bc:	48 2f       	mov	r20, r24
    44be:	50 e0       	ldi	r21, 0x00	; 0
    44c0:	22 0f       	add	r18, r18
    44c2:	33 1f       	adc	r19, r19
    44c4:	22 0f       	add	r18, r18
    44c6:	33 1f       	adc	r19, r19
    44c8:	ce 01       	movw	r24, r28
    44ca:	01 96       	adiw	r24, 0x01	; 1
    44cc:	82 0f       	add	r24, r18
    44ce:	93 1f       	adc	r25, r19
    44d0:	84 0f       	add	r24, r20
    44d2:	95 1f       	adc	r25, r21
    44d4:	fc 01       	movw	r30, r24
    44d6:	73 96       	adiw	r30, 0x13	; 19
    44d8:	80 81       	ld	r24, Z
    44da:	ec a1       	ldd	r30, Y+36	; 0x24
    44dc:	fd a1       	ldd	r31, Y+37	; 0x25
    44de:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    44e0:	81 e0       	ldi	r24, 0x01	; 1
    44e2:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    44e4:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    44e6:	88 89       	ldd	r24, Y+16	; 0x10
    44e8:	88 2f       	mov	r24, r24
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	88 0f       	add	r24, r24
    44ee:	99 1f       	adc	r25, r25
    44f0:	fc 01       	movw	r30, r24
    44f2:	ec 56       	subi	r30, 0x6C	; 108
    44f4:	fe 4f       	sbci	r31, 0xFE	; 254
    44f6:	20 81       	ld	r18, Z
    44f8:	88 89       	ldd	r24, Y+16	; 0x10
    44fa:	88 2f       	mov	r24, r24
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	88 0f       	add	r24, r24
    4500:	99 1f       	adc	r25, r25
    4502:	fc 01       	movw	r30, r24
    4504:	eb 56       	subi	r30, 0x6B	; 107
    4506:	fe 4f       	sbci	r31, 0xFE	; 254
    4508:	90 81       	ld	r25, Z
    450a:	82 2f       	mov	r24, r18
    450c:	69 2f       	mov	r22, r25
    450e:	40 e0       	ldi	r20, 0x00	; 0
    4510:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    4514:	1e c0       	rjmp	.+60     	; 0x4552 <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    4516:	88 89       	ldd	r24, Y+16	; 0x10
    4518:	88 2f       	mov	r24, r24
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	88 0f       	add	r24, r24
    451e:	99 1f       	adc	r25, r25
    4520:	fc 01       	movw	r30, r24
    4522:	ec 56       	subi	r30, 0x6C	; 108
    4524:	fe 4f       	sbci	r31, 0xFE	; 254
    4526:	20 81       	ld	r18, Z
    4528:	88 89       	ldd	r24, Y+16	; 0x10
    452a:	88 2f       	mov	r24, r24
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	88 0f       	add	r24, r24
    4530:	99 1f       	adc	r25, r25
    4532:	fc 01       	movw	r30, r24
    4534:	eb 56       	subi	r30, 0x6B	; 107
    4536:	fe 4f       	sbci	r31, 0xFE	; 254
    4538:	90 81       	ld	r25, Z
    453a:	82 2f       	mov	r24, r18
    453c:	69 2f       	mov	r22, r25
    453e:	40 e0       	ldi	r20, 0x00	; 0
    4540:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    4544:	88 89       	ldd	r24, Y+16	; 0x10
    4546:	8f 5f       	subi	r24, 0xFF	; 255
    4548:	88 8b       	std	Y+16, r24	; 0x10
    454a:	88 89       	ldd	r24, Y+16	; 0x10
    454c:	84 30       	cpi	r24, 0x04	; 4
    454e:	08 f4       	brcc	.+2      	; 0x4552 <Keypad_enu_GetButtonPressedValue+0x2e0>
    4550:	5c cf       	rjmp	.-328    	; 0x440a <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    4552:	8f 85       	ldd	r24, Y+15	; 0x0f
    4554:	88 23       	and	r24, r24
    4556:	51 f4       	brne	.+20     	; 0x456c <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    4558:	89 89       	ldd	r24, Y+17	; 0x11
    455a:	8f 5f       	subi	r24, 0xFF	; 255
    455c:	89 8b       	std	Y+17, r24	; 0x11
    455e:	89 89       	ldd	r24, Y+17	; 0x11
    4560:	84 30       	cpi	r24, 0x04	; 4
    4562:	08 f4       	brcc	.+2      	; 0x4566 <Keypad_enu_GetButtonPressedValue+0x2f4>
    4564:	a2 ce       	rjmp	.-700    	; 0x42aa <Keypad_enu_GetButtonPressedValue+0x38>
    4566:	02 c0       	rjmp	.+4      	; 0x456c <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4568:	83 e0       	ldi	r24, 0x03	; 3
    456a:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    456c:	8a 89       	ldd	r24, Y+18	; 0x12

}
    456e:	aa 96       	adiw	r28, 0x2a	; 42
    4570:	0f b6       	in	r0, 0x3f	; 63
    4572:	f8 94       	cli
    4574:	de bf       	out	0x3e, r29	; 62
    4576:	0f be       	out	0x3f, r0	; 63
    4578:	cd bf       	out	0x3d, r28	; 61
    457a:	cf 91       	pop	r28
    457c:	df 91       	pop	r29
    457e:	08 95       	ret

00004580 <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    4580:	df 93       	push	r29
    4582:	cf 93       	push	r28
    4584:	0f 92       	push	r0
    4586:	cd b7       	in	r28, 0x3d	; 61
    4588:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    458a:	81 e0       	ldi	r24, 0x01	; 1
    458c:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    458e:	80 e0       	ldi	r24, 0x00	; 0
    4590:	64 e0       	ldi	r22, 0x04	; 4
    4592:	41 e0       	ldi	r20, 0x01	; 1
    4594:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    4598:	80 e0       	ldi	r24, 0x00	; 0
    459a:	65 e0       	ldi	r22, 0x05	; 5
    459c:	41 e0       	ldi	r20, 0x01	; 1
    459e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    45a2:	80 e0       	ldi	r24, 0x00	; 0
    45a4:	66 e0       	ldi	r22, 0x06	; 6
    45a6:	41 e0       	ldi	r20, 0x01	; 1
    45a8:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    45ac:	80 e0       	ldi	r24, 0x00	; 0
    45ae:	67 e0       	ldi	r22, 0x07	; 7
    45b0:	41 e0       	ldi	r20, 0x01	; 1
    45b2:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	62 e0       	ldi	r22, 0x02	; 2
    45ba:	41 e0       	ldi	r20, 0x01	; 1
    45bc:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    45c0:	81 e0       	ldi	r24, 0x01	; 1
    45c2:	61 e0       	ldi	r22, 0x01	; 1
    45c4:	41 e0       	ldi	r20, 0x01	; 1
    45c6:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    45ca:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    45cc:	89 81       	ldd	r24, Y+1	; 0x01

}
    45ce:	0f 90       	pop	r0
    45d0:	cf 91       	pop	r28
    45d2:	df 91       	pop	r29
    45d4:	08 95       	ret

000045d6 <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    45d6:	df 93       	push	r29
    45d8:	cf 93       	push	r28
    45da:	00 d0       	rcall	.+0      	; 0x45dc <Hexadecoder_enu_DisplayNum+0x6>
    45dc:	cd b7       	in	r28, 0x3d	; 61
    45de:	de b7       	in	r29, 0x3e	; 62
    45e0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    45e6:	8a 81       	ldd	r24, Y+2	; 0x02
    45e8:	8a 30       	cpi	r24, 0x0A	; 10
    45ea:	40 f5       	brcc	.+80     	; 0x463c <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    45ec:	8a 81       	ldd	r24, Y+2	; 0x02
    45ee:	98 2f       	mov	r25, r24
    45f0:	91 70       	andi	r25, 0x01	; 1
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	64 e0       	ldi	r22, 0x04	; 4
    45f6:	49 2f       	mov	r20, r25
    45f8:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    45fc:	8a 81       	ldd	r24, Y+2	; 0x02
    45fe:	86 95       	lsr	r24
    4600:	98 2f       	mov	r25, r24
    4602:	91 70       	andi	r25, 0x01	; 1
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	65 e0       	ldi	r22, 0x05	; 5
    4608:	49 2f       	mov	r20, r25
    460a:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    460e:	8a 81       	ldd	r24, Y+2	; 0x02
    4610:	86 95       	lsr	r24
    4612:	86 95       	lsr	r24
    4614:	98 2f       	mov	r25, r24
    4616:	91 70       	andi	r25, 0x01	; 1
    4618:	80 e0       	ldi	r24, 0x00	; 0
    461a:	66 e0       	ldi	r22, 0x06	; 6
    461c:	49 2f       	mov	r20, r25
    461e:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    4622:	8a 81       	ldd	r24, Y+2	; 0x02
    4624:	86 95       	lsr	r24
    4626:	86 95       	lsr	r24
    4628:	86 95       	lsr	r24
    462a:	98 2f       	mov	r25, r24
    462c:	91 70       	andi	r25, 0x01	; 1
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	67 e0       	ldi	r22, 0x07	; 7
    4632:	49 2f       	mov	r20, r25
    4634:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    4638:	19 82       	std	Y+1, r1	; 0x01
    463a:	02 c0       	rjmp	.+4      	; 0x4640 <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    463c:	82 e0       	ldi	r24, 0x02	; 2
    463e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    4640:	89 81       	ldd	r24, Y+1	; 0x01
} 
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	cf 91       	pop	r28
    4648:	df 91       	pop	r29
    464a:	08 95       	ret

0000464c <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    464c:	df 93       	push	r29
    464e:	cf 93       	push	r28
    4650:	00 d0       	rcall	.+0      	; 0x4652 <Hexadecoder_enu_EnableSSG+0x6>
    4652:	00 d0       	rcall	.+0      	; 0x4654 <Hexadecoder_enu_EnableSSG+0x8>
    4654:	cd b7       	in	r28, 0x3d	; 61
    4656:	de b7       	in	r29, 0x3e	; 62
    4658:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    465e:	8a 81       	ldd	r24, Y+2	; 0x02
    4660:	28 2f       	mov	r18, r24
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	3c 83       	std	Y+4, r19	; 0x04
    4666:	2b 83       	std	Y+3, r18	; 0x03
    4668:	8b 81       	ldd	r24, Y+3	; 0x03
    466a:	9c 81       	ldd	r25, Y+4	; 0x04
    466c:	00 97       	sbiw	r24, 0x00	; 0
    466e:	31 f0       	breq	.+12     	; 0x467c <Hexadecoder_enu_EnableSSG+0x30>
    4670:	2b 81       	ldd	r18, Y+3	; 0x03
    4672:	3c 81       	ldd	r19, Y+4	; 0x04
    4674:	21 30       	cpi	r18, 0x01	; 1
    4676:	31 05       	cpc	r19, r1
    4678:	41 f0       	breq	.+16     	; 0x468a <Hexadecoder_enu_EnableSSG+0x3e>
    467a:	0e c0       	rjmp	.+28     	; 0x4698 <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	62 e0       	ldi	r22, 0x02	; 2
    4680:	41 e0       	ldi	r20, 0x01	; 1
    4682:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    4686:	19 82       	std	Y+1, r1	; 0x01
    4688:	09 c0       	rjmp	.+18     	; 0x469c <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	61 e0       	ldi	r22, 0x01	; 1
    468e:	41 e0       	ldi	r20, 0x01	; 1
    4690:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    4694:	19 82       	std	Y+1, r1	; 0x01
    4696:	02 c0       	rjmp	.+4      	; 0x469c <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4698:	82 e0       	ldi	r24, 0x02	; 2
    469a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    469c:	89 81       	ldd	r24, Y+1	; 0x01
}
    469e:	0f 90       	pop	r0
    46a0:	0f 90       	pop	r0
    46a2:	0f 90       	pop	r0
    46a4:	0f 90       	pop	r0
    46a6:	cf 91       	pop	r28
    46a8:	df 91       	pop	r29
    46aa:	08 95       	ret

000046ac <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    46ac:	df 93       	push	r29
    46ae:	cf 93       	push	r28
    46b0:	00 d0       	rcall	.+0      	; 0x46b2 <Hexadecoder_enu_DisableSSG+0x6>
    46b2:	00 d0       	rcall	.+0      	; 0x46b4 <Hexadecoder_enu_DisableSSG+0x8>
    46b4:	cd b7       	in	r28, 0x3d	; 61
    46b6:	de b7       	in	r29, 0x3e	; 62
    46b8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    46be:	8a 81       	ldd	r24, Y+2	; 0x02
    46c0:	28 2f       	mov	r18, r24
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	3c 83       	std	Y+4, r19	; 0x04
    46c6:	2b 83       	std	Y+3, r18	; 0x03
    46c8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ca:	9c 81       	ldd	r25, Y+4	; 0x04
    46cc:	00 97       	sbiw	r24, 0x00	; 0
    46ce:	31 f0       	breq	.+12     	; 0x46dc <Hexadecoder_enu_DisableSSG+0x30>
    46d0:	2b 81       	ldd	r18, Y+3	; 0x03
    46d2:	3c 81       	ldd	r19, Y+4	; 0x04
    46d4:	21 30       	cpi	r18, 0x01	; 1
    46d6:	31 05       	cpc	r19, r1
    46d8:	41 f0       	breq	.+16     	; 0x46ea <Hexadecoder_enu_DisableSSG+0x3e>
    46da:	0e c0       	rjmp	.+28     	; 0x46f8 <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	62 e0       	ldi	r22, 0x02	; 2
    46e0:	40 e0       	ldi	r20, 0x00	; 0
    46e2:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    46e6:	19 82       	std	Y+1, r1	; 0x01
    46e8:	09 c0       	rjmp	.+18     	; 0x46fc <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	61 e0       	ldi	r22, 0x01	; 1
    46ee:	40 e0       	ldi	r20, 0x00	; 0
    46f0:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    46f4:	19 82       	std	Y+1, r1	; 0x01
    46f6:	02 c0       	rjmp	.+4      	; 0x46fc <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    46f8:	82 e0       	ldi	r24, 0x02	; 2
    46fa:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    46fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    46fe:	0f 90       	pop	r0
    4700:	0f 90       	pop	r0
    4702:	0f 90       	pop	r0
    4704:	0f 90       	pop	r0
    4706:	cf 91       	pop	r28
    4708:	df 91       	pop	r29
    470a:	08 95       	ret

0000470c <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    470c:	df 93       	push	r29
    470e:	cf 93       	push	r28
    4710:	0f 92       	push	r0
    4712:	cd b7       	in	r28, 0x3d	; 61
    4714:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    471a:	81 e0       	ldi	r24, 0x01	; 1
    471c:	62 e0       	ldi	r22, 0x02	; 2
    471e:	40 e0       	ldi	r20, 0x00	; 0
    4720:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    4724:	81 e0       	ldi	r24, 0x01	; 1
    4726:	61 e0       	ldi	r22, 0x01	; 1
    4728:	40 e0       	ldi	r20, 0x00	; 0
    472a:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    472e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4730:	0f 90       	pop	r0
    4732:	cf 91       	pop	r28
    4734:	df 91       	pop	r29
    4736:	08 95       	ret

00004738 <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    4738:	df 93       	push	r29
    473a:	cf 93       	push	r28
    473c:	00 d0       	rcall	.+0      	; 0x473e <Buzzer_enu_Initialization+0x6>
    473e:	cd b7       	in	r28, 0x3d	; 61
    4740:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4742:	81 e0       	ldi	r24, 0x01	; 1
    4744:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    4746:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    4748:	19 82       	std	Y+1, r1	; 0x01
    474a:	31 c0       	rjmp	.+98     	; 0x47ae <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    474c:	89 81       	ldd	r24, Y+1	; 0x01
    474e:	88 2f       	mov	r24, r24
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	88 0f       	add	r24, r24
    4754:	99 1f       	adc	r25, r25
    4756:	fc 01       	movw	r30, r24
    4758:	e3 56       	subi	r30, 0x63	; 99
    475a:	fe 4f       	sbci	r31, 0xFE	; 254
    475c:	20 81       	ld	r18, Z
    475e:	89 81       	ldd	r24, Y+1	; 0x01
    4760:	88 2f       	mov	r24, r24
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	88 0f       	add	r24, r24
    4766:	99 1f       	adc	r25, r25
    4768:	fc 01       	movw	r30, r24
    476a:	e2 56       	subi	r30, 0x62	; 98
    476c:	fe 4f       	sbci	r31, 0xFE	; 254
    476e:	90 81       	ld	r25, Z
    4770:	82 2f       	mov	r24, r18
    4772:	69 2f       	mov	r22, r25
    4774:	41 e0       	ldi	r20, 0x01	; 1
    4776:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    477a:	89 81       	ldd	r24, Y+1	; 0x01
    477c:	88 2f       	mov	r24, r24
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	88 0f       	add	r24, r24
    4782:	99 1f       	adc	r25, r25
    4784:	fc 01       	movw	r30, r24
    4786:	e3 56       	subi	r30, 0x63	; 99
    4788:	fe 4f       	sbci	r31, 0xFE	; 254
    478a:	20 81       	ld	r18, Z
    478c:	89 81       	ldd	r24, Y+1	; 0x01
    478e:	88 2f       	mov	r24, r24
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	88 0f       	add	r24, r24
    4794:	99 1f       	adc	r25, r25
    4796:	fc 01       	movw	r30, r24
    4798:	e2 56       	subi	r30, 0x62	; 98
    479a:	fe 4f       	sbci	r31, 0xFE	; 254
    479c:	90 81       	ld	r25, Z
    479e:	82 2f       	mov	r24, r18
    47a0:	69 2f       	mov	r22, r25
    47a2:	40 e0       	ldi	r20, 0x00	; 0
    47a4:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    47a8:	89 81       	ldd	r24, Y+1	; 0x01
    47aa:	8f 5f       	subi	r24, 0xFF	; 255
    47ac:	89 83       	std	Y+1, r24	; 0x01
    47ae:	90 91 9c 01 	lds	r25, 0x019C
    47b2:	89 81       	ldd	r24, Y+1	; 0x01
    47b4:	89 17       	cp	r24, r25
    47b6:	50 f2       	brcs	.-108    	; 0x474c <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    47b8:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    47ba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    47bc:	0f 90       	pop	r0
    47be:	0f 90       	pop	r0
    47c0:	cf 91       	pop	r28
    47c2:	df 91       	pop	r29
    47c4:	08 95       	ret

000047c6 <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    47c6:	df 93       	push	r29
    47c8:	cf 93       	push	r28
    47ca:	00 d0       	rcall	.+0      	; 0x47cc <Buzzer_enu_TuronOnBuzzer+0x6>
    47cc:	cd b7       	in	r28, 0x3d	; 61
    47ce:	de b7       	in	r29, 0x3e	; 62
    47d0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    47d6:	90 91 9c 01 	lds	r25, 0x019C
    47da:	8a 81       	ldd	r24, Y+2	; 0x02
    47dc:	89 17       	cp	r24, r25
    47de:	c8 f4       	brcc	.+50     	; 0x4812 <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    47e0:	8a 81       	ldd	r24, Y+2	; 0x02
    47e2:	88 2f       	mov	r24, r24
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	88 0f       	add	r24, r24
    47e8:	99 1f       	adc	r25, r25
    47ea:	fc 01       	movw	r30, r24
    47ec:	e3 56       	subi	r30, 0x63	; 99
    47ee:	fe 4f       	sbci	r31, 0xFE	; 254
    47f0:	20 81       	ld	r18, Z
    47f2:	8a 81       	ldd	r24, Y+2	; 0x02
    47f4:	88 2f       	mov	r24, r24
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	88 0f       	add	r24, r24
    47fa:	99 1f       	adc	r25, r25
    47fc:	fc 01       	movw	r30, r24
    47fe:	e2 56       	subi	r30, 0x62	; 98
    4800:	fe 4f       	sbci	r31, 0xFE	; 254
    4802:	90 81       	ld	r25, Z
    4804:	82 2f       	mov	r24, r18
    4806:	69 2f       	mov	r22, r25
    4808:	41 e0       	ldi	r20, 0x01	; 1
    480a:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    480e:	89 83       	std	Y+1, r24	; 0x01
    4810:	02 c0       	rjmp	.+4      	; 0x4816 <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4812:	82 e0       	ldi	r24, 0x02	; 2
    4814:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    4816:	89 81       	ldd	r24, Y+1	; 0x01
}
    4818:	0f 90       	pop	r0
    481a:	0f 90       	pop	r0
    481c:	cf 91       	pop	r28
    481e:	df 91       	pop	r29
    4820:	08 95       	ret

00004822 <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    4822:	df 93       	push	r29
    4824:	cf 93       	push	r28
    4826:	00 d0       	rcall	.+0      	; 0x4828 <Buzzer_enu_TuronOffBuzzer+0x6>
    4828:	cd b7       	in	r28, 0x3d	; 61
    482a:	de b7       	in	r29, 0x3e	; 62
    482c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    4832:	90 91 9c 01 	lds	r25, 0x019C
    4836:	8a 81       	ldd	r24, Y+2	; 0x02
    4838:	89 17       	cp	r24, r25
    483a:	c8 f4       	brcc	.+50     	; 0x486e <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    483c:	8a 81       	ldd	r24, Y+2	; 0x02
    483e:	88 2f       	mov	r24, r24
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	88 0f       	add	r24, r24
    4844:	99 1f       	adc	r25, r25
    4846:	fc 01       	movw	r30, r24
    4848:	e3 56       	subi	r30, 0x63	; 99
    484a:	fe 4f       	sbci	r31, 0xFE	; 254
    484c:	20 81       	ld	r18, Z
    484e:	8a 81       	ldd	r24, Y+2	; 0x02
    4850:	88 2f       	mov	r24, r24
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	88 0f       	add	r24, r24
    4856:	99 1f       	adc	r25, r25
    4858:	fc 01       	movw	r30, r24
    485a:	e2 56       	subi	r30, 0x62	; 98
    485c:	fe 4f       	sbci	r31, 0xFE	; 254
    485e:	90 81       	ld	r25, Z
    4860:	82 2f       	mov	r24, r18
    4862:	69 2f       	mov	r22, r25
    4864:	40 e0       	ldi	r20, 0x00	; 0
    4866:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    486a:	89 83       	std	Y+1, r24	; 0x01
    486c:	02 c0       	rjmp	.+4      	; 0x4872 <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    486e:	82 e0       	ldi	r24, 0x02	; 2
    4870:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    4872:	89 81       	ldd	r24, Y+1	; 0x01
}
    4874:	0f 90       	pop	r0
    4876:	0f 90       	pop	r0
    4878:	cf 91       	pop	r28
    487a:	df 91       	pop	r29
    487c:	08 95       	ret

0000487e <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    487e:	df 93       	push	r29
    4880:	cf 93       	push	r28
    4882:	00 d0       	rcall	.+0      	; 0x4884 <Buzzer_enu_TurnOnAllBuzzers+0x6>
    4884:	cd b7       	in	r28, 0x3d	; 61
    4886:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4888:	81 e0       	ldi	r24, 0x01	; 1
    488a:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    488c:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    488e:	19 82       	std	Y+1, r1	; 0x01
    4890:	1a c0       	rjmp	.+52     	; 0x48c6 <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    4892:	89 81       	ldd	r24, Y+1	; 0x01
    4894:	88 2f       	mov	r24, r24
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	88 0f       	add	r24, r24
    489a:	99 1f       	adc	r25, r25
    489c:	fc 01       	movw	r30, r24
    489e:	e3 56       	subi	r30, 0x63	; 99
    48a0:	fe 4f       	sbci	r31, 0xFE	; 254
    48a2:	20 81       	ld	r18, Z
    48a4:	89 81       	ldd	r24, Y+1	; 0x01
    48a6:	88 2f       	mov	r24, r24
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	88 0f       	add	r24, r24
    48ac:	99 1f       	adc	r25, r25
    48ae:	fc 01       	movw	r30, r24
    48b0:	e2 56       	subi	r30, 0x62	; 98
    48b2:	fe 4f       	sbci	r31, 0xFE	; 254
    48b4:	90 81       	ld	r25, Z
    48b6:	82 2f       	mov	r24, r18
    48b8:	69 2f       	mov	r22, r25
    48ba:	41 e0       	ldi	r20, 0x01	; 1
    48bc:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    48c0:	89 81       	ldd	r24, Y+1	; 0x01
    48c2:	8f 5f       	subi	r24, 0xFF	; 255
    48c4:	89 83       	std	Y+1, r24	; 0x01
    48c6:	90 91 9c 01 	lds	r25, 0x019C
    48ca:	89 81       	ldd	r24, Y+1	; 0x01
    48cc:	89 17       	cp	r24, r25
    48ce:	08 f3       	brcs	.-62     	; 0x4892 <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    48d0:	82 e0       	ldi	r24, 0x02	; 2
    48d2:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    48d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    48d6:	0f 90       	pop	r0
    48d8:	0f 90       	pop	r0
    48da:	cf 91       	pop	r28
    48dc:	df 91       	pop	r29
    48de:	08 95       	ret

000048e0 <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    48e0:	df 93       	push	r29
    48e2:	cf 93       	push	r28
    48e4:	00 d0       	rcall	.+0      	; 0x48e6 <Buzzer_enu_TurnOffAllBuzzers+0x6>
    48e6:	cd b7       	in	r28, 0x3d	; 61
    48e8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    48ea:	81 e0       	ldi	r24, 0x01	; 1
    48ec:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    48ee:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    48f0:	19 82       	std	Y+1, r1	; 0x01
    48f2:	1a c0       	rjmp	.+52     	; 0x4928 <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    48f4:	89 81       	ldd	r24, Y+1	; 0x01
    48f6:	88 2f       	mov	r24, r24
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	88 0f       	add	r24, r24
    48fc:	99 1f       	adc	r25, r25
    48fe:	fc 01       	movw	r30, r24
    4900:	e3 56       	subi	r30, 0x63	; 99
    4902:	fe 4f       	sbci	r31, 0xFE	; 254
    4904:	20 81       	ld	r18, Z
    4906:	89 81       	ldd	r24, Y+1	; 0x01
    4908:	88 2f       	mov	r24, r24
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	88 0f       	add	r24, r24
    490e:	99 1f       	adc	r25, r25
    4910:	fc 01       	movw	r30, r24
    4912:	e2 56       	subi	r30, 0x62	; 98
    4914:	fe 4f       	sbci	r31, 0xFE	; 254
    4916:	90 81       	ld	r25, Z
    4918:	82 2f       	mov	r24, r18
    491a:	69 2f       	mov	r22, r25
    491c:	40 e0       	ldi	r20, 0x00	; 0
    491e:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    4922:	89 81       	ldd	r24, Y+1	; 0x01
    4924:	8f 5f       	subi	r24, 0xFF	; 255
    4926:	89 83       	std	Y+1, r24	; 0x01
    4928:	90 91 9c 01 	lds	r25, 0x019C
    492c:	89 81       	ldd	r24, Y+1	; 0x01
    492e:	89 17       	cp	r24, r25
    4930:	08 f3       	brcs	.-62     	; 0x48f4 <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    4932:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4934:	0f 90       	pop	r0
    4936:	0f 90       	pop	r0
    4938:	cf 91       	pop	r28
    493a:	df 91       	pop	r29
    493c:	08 95       	ret

0000493e <LOC_vid_CheckCount>:
	u16 Counter;
	u8 Flag;
}TimerParameters_t;

void LOC_vid_CheckCount (void* Copy_pvid_ParametersPointer)
{
    493e:	df 93       	push	r29
    4940:	cf 93       	push	r28
    4942:	00 d0       	rcall	.+0      	; 0x4944 <LOC_vid_CheckCount+0x6>
    4944:	cd b7       	in	r28, 0x3d	; 61
    4946:	de b7       	in	r29, 0x3e	; 62
    4948:	9a 83       	std	Y+2, r25	; 0x02
    494a:	89 83       	std	Y+1, r24	; 0x01


	(((TimerParameters_t*)Copy_pvid_ParametersPointer)->Counter)++;
    494c:	e9 81       	ldd	r30, Y+1	; 0x01
    494e:	fa 81       	ldd	r31, Y+2	; 0x02
    4950:	80 81       	ld	r24, Z
    4952:	91 81       	ldd	r25, Z+1	; 0x01
    4954:	01 96       	adiw	r24, 0x01	; 1
    4956:	91 83       	std	Z+1, r25	; 0x01
    4958:	80 83       	st	Z, r24

	if((((TimerParameters_t*)Copy_pvid_ParametersPointer)->Counter) == 977)
    495a:	e9 81       	ldd	r30, Y+1	; 0x01
    495c:	fa 81       	ldd	r31, Y+2	; 0x02
    495e:	80 81       	ld	r24, Z
    4960:	91 81       	ldd	r25, Z+1	; 0x01
    4962:	23 e0       	ldi	r18, 0x03	; 3
    4964:	81 3d       	cpi	r24, 0xD1	; 209
    4966:	92 07       	cpc	r25, r18
    4968:	99 f4       	brne	.+38     	; 0x4990 <LOC_vid_CheckCount+0x52>
	{
		
		if(((TimerParameters_t*)Copy_pvid_ParametersPointer)->Flag)
    496a:	e9 81       	ldd	r30, Y+1	; 0x01
    496c:	fa 81       	ldd	r31, Y+2	; 0x02
    496e:	82 81       	ldd	r24, Z+2	; 0x02
    4970:	88 23       	and	r24, r24
    4972:	21 f0       	breq	.+8      	; 0x497c <LOC_vid_CheckCount+0x3e>
		{
			((TimerParameters_t*)Copy_pvid_ParametersPointer)->Flag = LED_DIM_STATE;
    4974:	e9 81       	ldd	r30, Y+1	; 0x01
    4976:	fa 81       	ldd	r31, Y+2	; 0x02
    4978:	12 82       	std	Z+2, r1	; 0x02
    497a:	04 c0       	rjmp	.+8      	; 0x4984 <LOC_vid_CheckCount+0x46>
			
		}
		else
		{
			((TimerParameters_t*)Copy_pvid_ParametersPointer)->Flag = LED_LIGHT_STATE;
    497c:	e9 81       	ldd	r30, Y+1	; 0x01
    497e:	fa 81       	ldd	r31, Y+2	; 0x02
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	82 83       	std	Z+2, r24	; 0x02
		}

		(((TimerParameters_t*)Copy_pvid_ParametersPointer)->Counter) = 112;
    4984:	e9 81       	ldd	r30, Y+1	; 0x01
    4986:	fa 81       	ldd	r31, Y+2	; 0x02
    4988:	80 e7       	ldi	r24, 0x70	; 112
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	91 83       	std	Z+1, r25	; 0x01
    498e:	80 83       	st	Z, r24

	}

}
    4990:	0f 90       	pop	r0
    4992:	0f 90       	pop	r0
    4994:	cf 91       	pop	r28
    4996:	df 91       	pop	r29
    4998:	08 95       	ret

0000499a <main>:

int main (void)
{
    499a:	df 93       	push	r29
    499c:	cf 93       	push	r28
    499e:	cd b7       	in	r28, 0x3d	; 61
    49a0:	de b7       	in	r29, 0x3e	; 62
    49a2:	28 97       	sbiw	r28, 0x08	; 8
    49a4:	0f b6       	in	r0, 0x3f	; 63
    49a6:	f8 94       	cli
    49a8:	de bf       	out	0x3e, r29	; 62
    49aa:	0f be       	out	0x3f, r0	; 63
    49ac:	cd bf       	out	0x3d, r28	; 61
	
	TimerParameters_t Local_str_TimerParameters ={112, LED_DIM_STATE};
    49ae:	ce 01       	movw	r24, r28
    49b0:	01 96       	adiw	r24, 0x01	; 1
    49b2:	9d 83       	std	Y+5, r25	; 0x05
    49b4:	8c 83       	std	Y+4, r24	; 0x04
    49b6:	e0 eb       	ldi	r30, 0xB0	; 176
    49b8:	f1 e0       	ldi	r31, 0x01	; 1
    49ba:	ff 83       	std	Y+7, r31	; 0x07
    49bc:	ee 83       	std	Y+6, r30	; 0x06
    49be:	f3 e0       	ldi	r31, 0x03	; 3
    49c0:	f8 87       	std	Y+8, r31	; 0x08
    49c2:	ee 81       	ldd	r30, Y+6	; 0x06
    49c4:	ff 81       	ldd	r31, Y+7	; 0x07
    49c6:	00 80       	ld	r0, Z
    49c8:	8e 81       	ldd	r24, Y+6	; 0x06
    49ca:	9f 81       	ldd	r25, Y+7	; 0x07
    49cc:	01 96       	adiw	r24, 0x01	; 1
    49ce:	9f 83       	std	Y+7, r25	; 0x07
    49d0:	8e 83       	std	Y+6, r24	; 0x06
    49d2:	ec 81       	ldd	r30, Y+4	; 0x04
    49d4:	fd 81       	ldd	r31, Y+5	; 0x05
    49d6:	00 82       	st	Z, r0
    49d8:	8c 81       	ldd	r24, Y+4	; 0x04
    49da:	9d 81       	ldd	r25, Y+5	; 0x05
    49dc:	01 96       	adiw	r24, 0x01	; 1
    49de:	9d 83       	std	Y+5, r25	; 0x05
    49e0:	8c 83       	std	Y+4, r24	; 0x04
    49e2:	98 85       	ldd	r25, Y+8	; 0x08
    49e4:	91 50       	subi	r25, 0x01	; 1
    49e6:	98 87       	std	Y+8, r25	; 0x08
    49e8:	e8 85       	ldd	r30, Y+8	; 0x08
    49ea:	ee 23       	and	r30, r30
    49ec:	51 f7       	brne	.-44     	; 0x49c2 <main+0x28>

	//Configuring OC0 pin
	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B, DIO_PIN_3, DIO_PIN_WRITE);
    49ee:	81 e0       	ldi	r24, 0x01	; 1
    49f0:	63 e0       	ldi	r22, 0x03	; 3
    49f2:	41 e0       	ldi	r20, 0x01	; 1
    49f4:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
	DIO_enu_SetPinValue(DIO_PIN_GROUP_B, DIO_PIN_3, DIO_LOW);
    49f8:	81 e0       	ldi	r24, 0x01	; 1
    49fa:	63 e0       	ldi	r22, 0x03	; 3
    49fc:	40 e0       	ldi	r20, 0x00	; 0
    49fe:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
	
	//LED pin
	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_D, DIO_PIN_1, DIO_PIN_WRITE);
    4a02:	83 e0       	ldi	r24, 0x03	; 3
    4a04:	61 e0       	ldi	r22, 0x01	; 1
    4a06:	41 e0       	ldi	r20, 0x01	; 1
    4a08:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <DIO_enu_SetPinDiretion>
	DIO_enu_SetPinValue(DIO_PIN_GROUP_D, DIO_PIN_1, DIO_LOW);
    4a0c:	83 e0       	ldi	r24, 0x03	; 3
    4a0e:	61 e0       	ldi	r22, 0x01	; 1
    4a10:	40 e0       	ldi	r20, 0x00	; 0
    4a12:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>

	//Initializing Timer
	Timer_enu_Initialization();
    4a16:	0e 94 9b 06 	call	0xd36	; 0xd36 <Timer_enu_Initialization>
	//Initializing call back function
	Timer_enu_SetCallBack(TIMER_0,TIMER_NORMAL,LOC_vid_CheckCount, &Local_str_TimerParameters);
    4a1a:	2f e9       	ldi	r18, 0x9F	; 159
    4a1c:	34 e2       	ldi	r19, 0x24	; 36
    4a1e:	80 e0       	ldi	r24, 0x00	; 0
    4a20:	60 e0       	ldi	r22, 0x00	; 0
    4a22:	a9 01       	movw	r20, r18
    4a24:	9e 01       	movw	r18, r28
    4a26:	2f 5f       	subi	r18, 0xFF	; 255
    4a28:	3f 4f       	sbci	r19, 0xFF	; 255
    4a2a:	0e 94 6d 07 	call	0xeda	; 0xeda <Timer_enu_SetCallBack>

	//SEtting GIE
	SREG_vid_EnableBitI();
    4a2e:	0e 94 5f 0b 	call	0x16be	; 0x16be <SREG_vid_EnableBitI>


	while (1)
	{
		if(Local_str_TimerParameters.Flag)
    4a32:	8b 81       	ldd	r24, Y+3	; 0x03
    4a34:	88 23       	and	r24, r24
    4a36:	31 f0       	breq	.+12     	; 0x4a44 <main+0xaa>
		{
			DIO_enu_SetPinValue(DIO_PIN_GROUP_D, DIO_PIN_1, DIO_HIGH);
    4a38:	83 e0       	ldi	r24, 0x03	; 3
    4a3a:	61 e0       	ldi	r22, 0x01	; 1
    4a3c:	41 e0       	ldi	r20, 0x01	; 1
    4a3e:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    4a42:	f7 cf       	rjmp	.-18     	; 0x4a32 <main+0x98>

		}
		else
		{
			DIO_enu_SetPinValue(DIO_PIN_GROUP_D, DIO_PIN_1, DIO_LOW);
    4a44:	83 e0       	ldi	r24, 0x03	; 3
    4a46:	61 e0       	ldi	r22, 0x01	; 1
    4a48:	40 e0       	ldi	r20, 0x00	; 0
    4a4a:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_enu_SetPinValue>
    4a4e:	f1 cf       	rjmp	.-30     	; 0x4a32 <main+0x98>

00004a50 <__mulsi3>:
    4a50:	62 9f       	mul	r22, r18
    4a52:	d0 01       	movw	r26, r0
    4a54:	73 9f       	mul	r23, r19
    4a56:	f0 01       	movw	r30, r0
    4a58:	82 9f       	mul	r24, r18
    4a5a:	e0 0d       	add	r30, r0
    4a5c:	f1 1d       	adc	r31, r1
    4a5e:	64 9f       	mul	r22, r20
    4a60:	e0 0d       	add	r30, r0
    4a62:	f1 1d       	adc	r31, r1
    4a64:	92 9f       	mul	r25, r18
    4a66:	f0 0d       	add	r31, r0
    4a68:	83 9f       	mul	r24, r19
    4a6a:	f0 0d       	add	r31, r0
    4a6c:	74 9f       	mul	r23, r20
    4a6e:	f0 0d       	add	r31, r0
    4a70:	65 9f       	mul	r22, r21
    4a72:	f0 0d       	add	r31, r0
    4a74:	99 27       	eor	r25, r25
    4a76:	72 9f       	mul	r23, r18
    4a78:	b0 0d       	add	r27, r0
    4a7a:	e1 1d       	adc	r30, r1
    4a7c:	f9 1f       	adc	r31, r25
    4a7e:	63 9f       	mul	r22, r19
    4a80:	b0 0d       	add	r27, r0
    4a82:	e1 1d       	adc	r30, r1
    4a84:	f9 1f       	adc	r31, r25
    4a86:	bd 01       	movw	r22, r26
    4a88:	cf 01       	movw	r24, r30
    4a8a:	11 24       	eor	r1, r1
    4a8c:	08 95       	ret

00004a8e <__udivmodsi4>:
    4a8e:	a1 e2       	ldi	r26, 0x21	; 33
    4a90:	1a 2e       	mov	r1, r26
    4a92:	aa 1b       	sub	r26, r26
    4a94:	bb 1b       	sub	r27, r27
    4a96:	fd 01       	movw	r30, r26
    4a98:	0d c0       	rjmp	.+26     	; 0x4ab4 <__udivmodsi4_ep>

00004a9a <__udivmodsi4_loop>:
    4a9a:	aa 1f       	adc	r26, r26
    4a9c:	bb 1f       	adc	r27, r27
    4a9e:	ee 1f       	adc	r30, r30
    4aa0:	ff 1f       	adc	r31, r31
    4aa2:	a2 17       	cp	r26, r18
    4aa4:	b3 07       	cpc	r27, r19
    4aa6:	e4 07       	cpc	r30, r20
    4aa8:	f5 07       	cpc	r31, r21
    4aaa:	20 f0       	brcs	.+8      	; 0x4ab4 <__udivmodsi4_ep>
    4aac:	a2 1b       	sub	r26, r18
    4aae:	b3 0b       	sbc	r27, r19
    4ab0:	e4 0b       	sbc	r30, r20
    4ab2:	f5 0b       	sbc	r31, r21

00004ab4 <__udivmodsi4_ep>:
    4ab4:	66 1f       	adc	r22, r22
    4ab6:	77 1f       	adc	r23, r23
    4ab8:	88 1f       	adc	r24, r24
    4aba:	99 1f       	adc	r25, r25
    4abc:	1a 94       	dec	r1
    4abe:	69 f7       	brne	.-38     	; 0x4a9a <__udivmodsi4_loop>
    4ac0:	60 95       	com	r22
    4ac2:	70 95       	com	r23
    4ac4:	80 95       	com	r24
    4ac6:	90 95       	com	r25
    4ac8:	9b 01       	movw	r18, r22
    4aca:	ac 01       	movw	r20, r24
    4acc:	bd 01       	movw	r22, r26
    4ace:	cf 01       	movw	r24, r30
    4ad0:	08 95       	ret

00004ad2 <__divmodsi4>:
    4ad2:	97 fb       	bst	r25, 7
    4ad4:	09 2e       	mov	r0, r25
    4ad6:	05 26       	eor	r0, r21
    4ad8:	0e d0       	rcall	.+28     	; 0x4af6 <__divmodsi4_neg1>
    4ada:	57 fd       	sbrc	r21, 7
    4adc:	04 d0       	rcall	.+8      	; 0x4ae6 <__divmodsi4_neg2>
    4ade:	d7 df       	rcall	.-82     	; 0x4a8e <__udivmodsi4>
    4ae0:	0a d0       	rcall	.+20     	; 0x4af6 <__divmodsi4_neg1>
    4ae2:	00 1c       	adc	r0, r0
    4ae4:	38 f4       	brcc	.+14     	; 0x4af4 <__divmodsi4_exit>

00004ae6 <__divmodsi4_neg2>:
    4ae6:	50 95       	com	r21
    4ae8:	40 95       	com	r20
    4aea:	30 95       	com	r19
    4aec:	21 95       	neg	r18
    4aee:	3f 4f       	sbci	r19, 0xFF	; 255
    4af0:	4f 4f       	sbci	r20, 0xFF	; 255
    4af2:	5f 4f       	sbci	r21, 0xFF	; 255

00004af4 <__divmodsi4_exit>:
    4af4:	08 95       	ret

00004af6 <__divmodsi4_neg1>:
    4af6:	f6 f7       	brtc	.-4      	; 0x4af4 <__divmodsi4_exit>
    4af8:	90 95       	com	r25
    4afa:	80 95       	com	r24
    4afc:	70 95       	com	r23
    4afe:	61 95       	neg	r22
    4b00:	7f 4f       	sbci	r23, 0xFF	; 255
    4b02:	8f 4f       	sbci	r24, 0xFF	; 255
    4b04:	9f 4f       	sbci	r25, 0xFF	; 255
    4b06:	08 95       	ret

00004b08 <__prologue_saves__>:
    4b08:	2f 92       	push	r2
    4b0a:	3f 92       	push	r3
    4b0c:	4f 92       	push	r4
    4b0e:	5f 92       	push	r5
    4b10:	6f 92       	push	r6
    4b12:	7f 92       	push	r7
    4b14:	8f 92       	push	r8
    4b16:	9f 92       	push	r9
    4b18:	af 92       	push	r10
    4b1a:	bf 92       	push	r11
    4b1c:	cf 92       	push	r12
    4b1e:	df 92       	push	r13
    4b20:	ef 92       	push	r14
    4b22:	ff 92       	push	r15
    4b24:	0f 93       	push	r16
    4b26:	1f 93       	push	r17
    4b28:	cf 93       	push	r28
    4b2a:	df 93       	push	r29
    4b2c:	cd b7       	in	r28, 0x3d	; 61
    4b2e:	de b7       	in	r29, 0x3e	; 62
    4b30:	ca 1b       	sub	r28, r26
    4b32:	db 0b       	sbc	r29, r27
    4b34:	0f b6       	in	r0, 0x3f	; 63
    4b36:	f8 94       	cli
    4b38:	de bf       	out	0x3e, r29	; 62
    4b3a:	0f be       	out	0x3f, r0	; 63
    4b3c:	cd bf       	out	0x3d, r28	; 61
    4b3e:	09 94       	ijmp

00004b40 <__epilogue_restores__>:
    4b40:	2a 88       	ldd	r2, Y+18	; 0x12
    4b42:	39 88       	ldd	r3, Y+17	; 0x11
    4b44:	48 88       	ldd	r4, Y+16	; 0x10
    4b46:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b48:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b50:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b52:	b9 84       	ldd	r11, Y+9	; 0x09
    4b54:	c8 84       	ldd	r12, Y+8	; 0x08
    4b56:	df 80       	ldd	r13, Y+7	; 0x07
    4b58:	ee 80       	ldd	r14, Y+6	; 0x06
    4b5a:	fd 80       	ldd	r15, Y+5	; 0x05
    4b5c:	0c 81       	ldd	r16, Y+4	; 0x04
    4b5e:	1b 81       	ldd	r17, Y+3	; 0x03
    4b60:	aa 81       	ldd	r26, Y+2	; 0x02
    4b62:	b9 81       	ldd	r27, Y+1	; 0x01
    4b64:	ce 0f       	add	r28, r30
    4b66:	d1 1d       	adc	r29, r1
    4b68:	0f b6       	in	r0, 0x3f	; 63
    4b6a:	f8 94       	cli
    4b6c:	de bf       	out	0x3e, r29	; 62
    4b6e:	0f be       	out	0x3f, r0	; 63
    4b70:	cd bf       	out	0x3d, r28	; 61
    4b72:	ed 01       	movw	r28, r26
    4b74:	08 95       	ret

00004b76 <_exit>:
    4b76:	f8 94       	cli

00004b78 <__stop_program>:
    4b78:	ff cf       	rjmp	.-2      	; 0x4b78 <__stop_program>
