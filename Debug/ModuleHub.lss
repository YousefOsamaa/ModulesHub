
ModuleHub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000068fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  000068fe  00006992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005d  008001b6  008001b6  00006ae8  2**0
                  ALLOC
  3 .stab         00009858  00000000  00000000  00006ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004818  00000000  00000000  00010340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00014b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000024e  00000000  00000000  00014d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a88  00000000  00000000  00014fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001728  00000000  00000000  00017a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001453  00000000  00000000  00019156  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0001a5ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000341  00000000  00000000  0001a7cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ade  00000000  00000000  0001ab0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001b5eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__vector_1>
       8:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__vector_2>
       c:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__vector_3>
      10:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__vector_4>
      14:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__vector_5>
      18:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_6>
      1c:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__vector_7>
      20:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <__vector_8>
      24:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__vector_9>
      28:	0c 94 16 12 	jmp	0x242c	; 0x242c <__vector_10>
      2c:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f8 e6       	ldi	r31, 0x68	; 104
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 31       	cpi	r26, 0x13	; 19
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 79 33 	call	0x66f2	; 0x66f2 <main>
      8a:	0c 94 7d 34 	jmp	0x68fa	; 0x68fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 a4 04 	call	0x948	; 0x948 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
     1bc:	0e 94 34 05 	call	0xa68	; 0xa68 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 34 05 	call	0xa68	; 0xa68 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <_fpadd_parts>:
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 46 34 	jmp	0x688c	; 0x688c <__prologue_saves__>
     1f4:	dc 01       	movw	r26, r24
     1f6:	2b 01       	movw	r4, r22
     1f8:	fa 01       	movw	r30, r20
     1fa:	9c 91       	ld	r25, X
     1fc:	92 30       	cpi	r25, 0x02	; 2
     1fe:	08 f4       	brcc	.+2      	; 0x202 <_fpadd_parts+0x1a>
     200:	39 c1       	rjmp	.+626    	; 0x474 <_fpadd_parts+0x28c>
     202:	eb 01       	movw	r28, r22
     204:	88 81       	ld	r24, Y
     206:	82 30       	cpi	r24, 0x02	; 2
     208:	08 f4       	brcc	.+2      	; 0x20c <_fpadd_parts+0x24>
     20a:	33 c1       	rjmp	.+614    	; 0x472 <_fpadd_parts+0x28a>
     20c:	94 30       	cpi	r25, 0x04	; 4
     20e:	69 f4       	brne	.+26     	; 0x22a <_fpadd_parts+0x42>
     210:	84 30       	cpi	r24, 0x04	; 4
     212:	09 f0       	breq	.+2      	; 0x216 <_fpadd_parts+0x2e>
     214:	2f c1       	rjmp	.+606    	; 0x474 <_fpadd_parts+0x28c>
     216:	11 96       	adiw	r26, 0x01	; 1
     218:	9c 91       	ld	r25, X
     21a:	11 97       	sbiw	r26, 0x01	; 1
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	98 17       	cp	r25, r24
     220:	09 f4       	brne	.+2      	; 0x224 <_fpadd_parts+0x3c>
     222:	28 c1       	rjmp	.+592    	; 0x474 <_fpadd_parts+0x28c>
     224:	a3 e7       	ldi	r26, 0x73	; 115
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	25 c1       	rjmp	.+586    	; 0x474 <_fpadd_parts+0x28c>
     22a:	84 30       	cpi	r24, 0x04	; 4
     22c:	09 f4       	brne	.+2      	; 0x230 <_fpadd_parts+0x48>
     22e:	21 c1       	rjmp	.+578    	; 0x472 <_fpadd_parts+0x28a>
     230:	82 30       	cpi	r24, 0x02	; 2
     232:	a9 f4       	brne	.+42     	; 0x25e <_fpadd_parts+0x76>
     234:	92 30       	cpi	r25, 0x02	; 2
     236:	09 f0       	breq	.+2      	; 0x23a <_fpadd_parts+0x52>
     238:	1d c1       	rjmp	.+570    	; 0x474 <_fpadd_parts+0x28c>
     23a:	9a 01       	movw	r18, r20
     23c:	ad 01       	movw	r20, r26
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	ea 01       	movw	r28, r20
     242:	09 90       	ld	r0, Y+
     244:	ae 01       	movw	r20, r28
     246:	e9 01       	movw	r28, r18
     248:	09 92       	st	Y+, r0
     24a:	9e 01       	movw	r18, r28
     24c:	81 50       	subi	r24, 0x01	; 1
     24e:	c1 f7       	brne	.-16     	; 0x240 <_fpadd_parts+0x58>
     250:	e2 01       	movw	r28, r4
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	11 96       	adiw	r26, 0x01	; 1
     256:	9c 91       	ld	r25, X
     258:	89 23       	and	r24, r25
     25a:	81 83       	std	Z+1, r24	; 0x01
     25c:	08 c1       	rjmp	.+528    	; 0x46e <_fpadd_parts+0x286>
     25e:	92 30       	cpi	r25, 0x02	; 2
     260:	09 f4       	brne	.+2      	; 0x264 <_fpadd_parts+0x7c>
     262:	07 c1       	rjmp	.+526    	; 0x472 <_fpadd_parts+0x28a>
     264:	12 96       	adiw	r26, 0x02	; 2
     266:	2d 90       	ld	r2, X+
     268:	3c 90       	ld	r3, X
     26a:	13 97       	sbiw	r26, 0x03	; 3
     26c:	eb 01       	movw	r28, r22
     26e:	8a 81       	ldd	r24, Y+2	; 0x02
     270:	9b 81       	ldd	r25, Y+3	; 0x03
     272:	14 96       	adiw	r26, 0x04	; 4
     274:	ad 90       	ld	r10, X+
     276:	bd 90       	ld	r11, X+
     278:	cd 90       	ld	r12, X+
     27a:	dc 90       	ld	r13, X
     27c:	17 97       	sbiw	r26, 0x07	; 7
     27e:	ec 80       	ldd	r14, Y+4	; 0x04
     280:	fd 80       	ldd	r15, Y+5	; 0x05
     282:	0e 81       	ldd	r16, Y+6	; 0x06
     284:	1f 81       	ldd	r17, Y+7	; 0x07
     286:	91 01       	movw	r18, r2
     288:	28 1b       	sub	r18, r24
     28a:	39 0b       	sbc	r19, r25
     28c:	b9 01       	movw	r22, r18
     28e:	37 ff       	sbrs	r19, 7
     290:	04 c0       	rjmp	.+8      	; 0x29a <_fpadd_parts+0xb2>
     292:	66 27       	eor	r22, r22
     294:	77 27       	eor	r23, r23
     296:	62 1b       	sub	r22, r18
     298:	73 0b       	sbc	r23, r19
     29a:	60 32       	cpi	r22, 0x20	; 32
     29c:	71 05       	cpc	r23, r1
     29e:	0c f0       	brlt	.+2      	; 0x2a2 <_fpadd_parts+0xba>
     2a0:	61 c0       	rjmp	.+194    	; 0x364 <_fpadd_parts+0x17c>
     2a2:	12 16       	cp	r1, r18
     2a4:	13 06       	cpc	r1, r19
     2a6:	6c f5       	brge	.+90     	; 0x302 <_fpadd_parts+0x11a>
     2a8:	37 01       	movw	r6, r14
     2aa:	48 01       	movw	r8, r16
     2ac:	06 2e       	mov	r0, r22
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <_fpadd_parts+0xd0>
     2b0:	96 94       	lsr	r9
     2b2:	87 94       	ror	r8
     2b4:	77 94       	ror	r7
     2b6:	67 94       	ror	r6
     2b8:	0a 94       	dec	r0
     2ba:	d2 f7       	brpl	.-12     	; 0x2b0 <_fpadd_parts+0xc8>
     2bc:	21 e0       	ldi	r18, 0x01	; 1
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	04 c0       	rjmp	.+8      	; 0x2ce <_fpadd_parts+0xe6>
     2c6:	22 0f       	add	r18, r18
     2c8:	33 1f       	adc	r19, r19
     2ca:	44 1f       	adc	r20, r20
     2cc:	55 1f       	adc	r21, r21
     2ce:	6a 95       	dec	r22
     2d0:	d2 f7       	brpl	.-12     	; 0x2c6 <_fpadd_parts+0xde>
     2d2:	21 50       	subi	r18, 0x01	; 1
     2d4:	30 40       	sbci	r19, 0x00	; 0
     2d6:	40 40       	sbci	r20, 0x00	; 0
     2d8:	50 40       	sbci	r21, 0x00	; 0
     2da:	2e 21       	and	r18, r14
     2dc:	3f 21       	and	r19, r15
     2de:	40 23       	and	r20, r16
     2e0:	51 23       	and	r21, r17
     2e2:	21 15       	cp	r18, r1
     2e4:	31 05       	cpc	r19, r1
     2e6:	41 05       	cpc	r20, r1
     2e8:	51 05       	cpc	r21, r1
     2ea:	21 f0       	breq	.+8      	; 0x2f4 <_fpadd_parts+0x10c>
     2ec:	21 e0       	ldi	r18, 0x01	; 1
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	79 01       	movw	r14, r18
     2f6:	8a 01       	movw	r16, r20
     2f8:	e6 28       	or	r14, r6
     2fa:	f7 28       	or	r15, r7
     2fc:	08 29       	or	r16, r8
     2fe:	19 29       	or	r17, r9
     300:	3c c0       	rjmp	.+120    	; 0x37a <_fpadd_parts+0x192>
     302:	23 2b       	or	r18, r19
     304:	d1 f1       	breq	.+116    	; 0x37a <_fpadd_parts+0x192>
     306:	26 0e       	add	r2, r22
     308:	37 1e       	adc	r3, r23
     30a:	35 01       	movw	r6, r10
     30c:	46 01       	movw	r8, r12
     30e:	06 2e       	mov	r0, r22
     310:	04 c0       	rjmp	.+8      	; 0x31a <_fpadd_parts+0x132>
     312:	96 94       	lsr	r9
     314:	87 94       	ror	r8
     316:	77 94       	ror	r7
     318:	67 94       	ror	r6
     31a:	0a 94       	dec	r0
     31c:	d2 f7       	brpl	.-12     	; 0x312 <_fpadd_parts+0x12a>
     31e:	21 e0       	ldi	r18, 0x01	; 1
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	04 c0       	rjmp	.+8      	; 0x330 <_fpadd_parts+0x148>
     328:	22 0f       	add	r18, r18
     32a:	33 1f       	adc	r19, r19
     32c:	44 1f       	adc	r20, r20
     32e:	55 1f       	adc	r21, r21
     330:	6a 95       	dec	r22
     332:	d2 f7       	brpl	.-12     	; 0x328 <_fpadd_parts+0x140>
     334:	21 50       	subi	r18, 0x01	; 1
     336:	30 40       	sbci	r19, 0x00	; 0
     338:	40 40       	sbci	r20, 0x00	; 0
     33a:	50 40       	sbci	r21, 0x00	; 0
     33c:	2a 21       	and	r18, r10
     33e:	3b 21       	and	r19, r11
     340:	4c 21       	and	r20, r12
     342:	5d 21       	and	r21, r13
     344:	21 15       	cp	r18, r1
     346:	31 05       	cpc	r19, r1
     348:	41 05       	cpc	r20, r1
     34a:	51 05       	cpc	r21, r1
     34c:	21 f0       	breq	.+8      	; 0x356 <_fpadd_parts+0x16e>
     34e:	21 e0       	ldi	r18, 0x01	; 1
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	59 01       	movw	r10, r18
     358:	6a 01       	movw	r12, r20
     35a:	a6 28       	or	r10, r6
     35c:	b7 28       	or	r11, r7
     35e:	c8 28       	or	r12, r8
     360:	d9 28       	or	r13, r9
     362:	0b c0       	rjmp	.+22     	; 0x37a <_fpadd_parts+0x192>
     364:	82 15       	cp	r24, r2
     366:	93 05       	cpc	r25, r3
     368:	2c f0       	brlt	.+10     	; 0x374 <_fpadd_parts+0x18c>
     36a:	1c 01       	movw	r2, r24
     36c:	aa 24       	eor	r10, r10
     36e:	bb 24       	eor	r11, r11
     370:	65 01       	movw	r12, r10
     372:	03 c0       	rjmp	.+6      	; 0x37a <_fpadd_parts+0x192>
     374:	ee 24       	eor	r14, r14
     376:	ff 24       	eor	r15, r15
     378:	87 01       	movw	r16, r14
     37a:	11 96       	adiw	r26, 0x01	; 1
     37c:	9c 91       	ld	r25, X
     37e:	d2 01       	movw	r26, r4
     380:	11 96       	adiw	r26, 0x01	; 1
     382:	8c 91       	ld	r24, X
     384:	98 17       	cp	r25, r24
     386:	09 f4       	brne	.+2      	; 0x38a <_fpadd_parts+0x1a2>
     388:	45 c0       	rjmp	.+138    	; 0x414 <_fpadd_parts+0x22c>
     38a:	99 23       	and	r25, r25
     38c:	39 f0       	breq	.+14     	; 0x39c <_fpadd_parts+0x1b4>
     38e:	a8 01       	movw	r20, r16
     390:	97 01       	movw	r18, r14
     392:	2a 19       	sub	r18, r10
     394:	3b 09       	sbc	r19, r11
     396:	4c 09       	sbc	r20, r12
     398:	5d 09       	sbc	r21, r13
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <_fpadd_parts+0x1c0>
     39c:	a6 01       	movw	r20, r12
     39e:	95 01       	movw	r18, r10
     3a0:	2e 19       	sub	r18, r14
     3a2:	3f 09       	sbc	r19, r15
     3a4:	40 0b       	sbc	r20, r16
     3a6:	51 0b       	sbc	r21, r17
     3a8:	57 fd       	sbrc	r21, 7
     3aa:	08 c0       	rjmp	.+16     	; 0x3bc <_fpadd_parts+0x1d4>
     3ac:	11 82       	std	Z+1, r1	; 0x01
     3ae:	33 82       	std	Z+3, r3	; 0x03
     3b0:	22 82       	std	Z+2, r2	; 0x02
     3b2:	24 83       	std	Z+4, r18	; 0x04
     3b4:	35 83       	std	Z+5, r19	; 0x05
     3b6:	46 83       	std	Z+6, r20	; 0x06
     3b8:	57 83       	std	Z+7, r21	; 0x07
     3ba:	1d c0       	rjmp	.+58     	; 0x3f6 <_fpadd_parts+0x20e>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	81 83       	std	Z+1, r24	; 0x01
     3c0:	33 82       	std	Z+3, r3	; 0x03
     3c2:	22 82       	std	Z+2, r2	; 0x02
     3c4:	88 27       	eor	r24, r24
     3c6:	99 27       	eor	r25, r25
     3c8:	dc 01       	movw	r26, r24
     3ca:	82 1b       	sub	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	a4 0b       	sbc	r26, r20
     3d0:	b5 0b       	sbc	r27, r21
     3d2:	84 83       	std	Z+4, r24	; 0x04
     3d4:	95 83       	std	Z+5, r25	; 0x05
     3d6:	a6 83       	std	Z+6, r26	; 0x06
     3d8:	b7 83       	std	Z+7, r27	; 0x07
     3da:	0d c0       	rjmp	.+26     	; 0x3f6 <_fpadd_parts+0x20e>
     3dc:	22 0f       	add	r18, r18
     3de:	33 1f       	adc	r19, r19
     3e0:	44 1f       	adc	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	24 83       	std	Z+4, r18	; 0x04
     3e6:	35 83       	std	Z+5, r19	; 0x05
     3e8:	46 83       	std	Z+6, r20	; 0x06
     3ea:	57 83       	std	Z+7, r21	; 0x07
     3ec:	82 81       	ldd	r24, Z+2	; 0x02
     3ee:	93 81       	ldd	r25, Z+3	; 0x03
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	93 83       	std	Z+3, r25	; 0x03
     3f4:	82 83       	std	Z+2, r24	; 0x02
     3f6:	24 81       	ldd	r18, Z+4	; 0x04
     3f8:	35 81       	ldd	r19, Z+5	; 0x05
     3fa:	46 81       	ldd	r20, Z+6	; 0x06
     3fc:	57 81       	ldd	r21, Z+7	; 0x07
     3fe:	da 01       	movw	r26, r20
     400:	c9 01       	movw	r24, r18
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	a1 09       	sbc	r26, r1
     406:	b1 09       	sbc	r27, r1
     408:	8f 5f       	subi	r24, 0xFF	; 255
     40a:	9f 4f       	sbci	r25, 0xFF	; 255
     40c:	af 4f       	sbci	r26, 0xFF	; 255
     40e:	bf 43       	sbci	r27, 0x3F	; 63
     410:	28 f3       	brcs	.-54     	; 0x3dc <_fpadd_parts+0x1f4>
     412:	0b c0       	rjmp	.+22     	; 0x42a <_fpadd_parts+0x242>
     414:	91 83       	std	Z+1, r25	; 0x01
     416:	33 82       	std	Z+3, r3	; 0x03
     418:	22 82       	std	Z+2, r2	; 0x02
     41a:	ea 0c       	add	r14, r10
     41c:	fb 1c       	adc	r15, r11
     41e:	0c 1d       	adc	r16, r12
     420:	1d 1d       	adc	r17, r13
     422:	e4 82       	std	Z+4, r14	; 0x04
     424:	f5 82       	std	Z+5, r15	; 0x05
     426:	06 83       	std	Z+6, r16	; 0x06
     428:	17 83       	std	Z+7, r17	; 0x07
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	80 83       	st	Z, r24
     42e:	24 81       	ldd	r18, Z+4	; 0x04
     430:	35 81       	ldd	r19, Z+5	; 0x05
     432:	46 81       	ldd	r20, Z+6	; 0x06
     434:	57 81       	ldd	r21, Z+7	; 0x07
     436:	57 ff       	sbrs	r21, 7
     438:	1a c0       	rjmp	.+52     	; 0x46e <_fpadd_parts+0x286>
     43a:	c9 01       	movw	r24, r18
     43c:	aa 27       	eor	r26, r26
     43e:	97 fd       	sbrc	r25, 7
     440:	a0 95       	com	r26
     442:	ba 2f       	mov	r27, r26
     444:	81 70       	andi	r24, 0x01	; 1
     446:	90 70       	andi	r25, 0x00	; 0
     448:	a0 70       	andi	r26, 0x00	; 0
     44a:	b0 70       	andi	r27, 0x00	; 0
     44c:	56 95       	lsr	r21
     44e:	47 95       	ror	r20
     450:	37 95       	ror	r19
     452:	27 95       	ror	r18
     454:	82 2b       	or	r24, r18
     456:	93 2b       	or	r25, r19
     458:	a4 2b       	or	r26, r20
     45a:	b5 2b       	or	r27, r21
     45c:	84 83       	std	Z+4, r24	; 0x04
     45e:	95 83       	std	Z+5, r25	; 0x05
     460:	a6 83       	std	Z+6, r26	; 0x06
     462:	b7 83       	std	Z+7, r27	; 0x07
     464:	82 81       	ldd	r24, Z+2	; 0x02
     466:	93 81       	ldd	r25, Z+3	; 0x03
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	93 83       	std	Z+3, r25	; 0x03
     46c:	82 83       	std	Z+2, r24	; 0x02
     46e:	df 01       	movw	r26, r30
     470:	01 c0       	rjmp	.+2      	; 0x474 <_fpadd_parts+0x28c>
     472:	d2 01       	movw	r26, r4
     474:	cd 01       	movw	r24, r26
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	e2 e1       	ldi	r30, 0x12	; 18
     47c:	0c 94 62 34 	jmp	0x68c4	; 0x68c4 <__epilogue_restores__>

00000480 <__subsf3>:
     480:	a0 e2       	ldi	r26, 0x20	; 32
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	e6 e4       	ldi	r30, 0x46	; 70
     486:	f2 e0       	ldi	r31, 0x02	; 2
     488:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     48c:	69 83       	std	Y+1, r22	; 0x01
     48e:	7a 83       	std	Y+2, r23	; 0x02
     490:	8b 83       	std	Y+3, r24	; 0x03
     492:	9c 83       	std	Y+4, r25	; 0x04
     494:	2d 83       	std	Y+5, r18	; 0x05
     496:	3e 83       	std	Y+6, r19	; 0x06
     498:	4f 83       	std	Y+7, r20	; 0x07
     49a:	58 87       	std	Y+8, r21	; 0x08
     49c:	e9 e0       	ldi	r30, 0x09	; 9
     49e:	ee 2e       	mov	r14, r30
     4a0:	f1 2c       	mov	r15, r1
     4a2:	ec 0e       	add	r14, r28
     4a4:	fd 1e       	adc	r15, r29
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	b7 01       	movw	r22, r14
     4ac:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     4b0:	8e 01       	movw	r16, r28
     4b2:	0f 5e       	subi	r16, 0xEF	; 239
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
     4b6:	ce 01       	movw	r24, r28
     4b8:	05 96       	adiw	r24, 0x05	; 5
     4ba:	b8 01       	movw	r22, r16
     4bc:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     4c0:	8a 89       	ldd	r24, Y+18	; 0x12
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	89 27       	eor	r24, r25
     4c6:	8a 8b       	std	Y+18, r24	; 0x12
     4c8:	c7 01       	movw	r24, r14
     4ca:	b8 01       	movw	r22, r16
     4cc:	ae 01       	movw	r20, r28
     4ce:	47 5e       	subi	r20, 0xE7	; 231
     4d0:	5f 4f       	sbci	r21, 0xFF	; 255
     4d2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_fpadd_parts>
     4d6:	0e 94 50 06 	call	0xca0	; 0xca0 <__pack_f>
     4da:	a0 96       	adiw	r28, 0x20	; 32
     4dc:	e6 e0       	ldi	r30, 0x06	; 6
     4de:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

000004e2 <__addsf3>:
     4e2:	a0 e2       	ldi	r26, 0x20	; 32
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	e7 e7       	ldi	r30, 0x77	; 119
     4e8:	f2 e0       	ldi	r31, 0x02	; 2
     4ea:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     4ee:	69 83       	std	Y+1, r22	; 0x01
     4f0:	7a 83       	std	Y+2, r23	; 0x02
     4f2:	8b 83       	std	Y+3, r24	; 0x03
     4f4:	9c 83       	std	Y+4, r25	; 0x04
     4f6:	2d 83       	std	Y+5, r18	; 0x05
     4f8:	3e 83       	std	Y+6, r19	; 0x06
     4fa:	4f 83       	std	Y+7, r20	; 0x07
     4fc:	58 87       	std	Y+8, r21	; 0x08
     4fe:	f9 e0       	ldi	r31, 0x09	; 9
     500:	ef 2e       	mov	r14, r31
     502:	f1 2c       	mov	r15, r1
     504:	ec 0e       	add	r14, r28
     506:	fd 1e       	adc	r15, r29
     508:	ce 01       	movw	r24, r28
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	b7 01       	movw	r22, r14
     50e:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     512:	8e 01       	movw	r16, r28
     514:	0f 5e       	subi	r16, 0xEF	; 239
     516:	1f 4f       	sbci	r17, 0xFF	; 255
     518:	ce 01       	movw	r24, r28
     51a:	05 96       	adiw	r24, 0x05	; 5
     51c:	b8 01       	movw	r22, r16
     51e:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     522:	c7 01       	movw	r24, r14
     524:	b8 01       	movw	r22, r16
     526:	ae 01       	movw	r20, r28
     528:	47 5e       	subi	r20, 0xE7	; 231
     52a:	5f 4f       	sbci	r21, 0xFF	; 255
     52c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_fpadd_parts>
     530:	0e 94 50 06 	call	0xca0	; 0xca0 <__pack_f>
     534:	a0 96       	adiw	r28, 0x20	; 32
     536:	e6 e0       	ldi	r30, 0x06	; 6
     538:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

0000053c <__mulsf3>:
     53c:	a0 e2       	ldi	r26, 0x20	; 32
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	e4 ea       	ldi	r30, 0xA4	; 164
     542:	f2 e0       	ldi	r31, 0x02	; 2
     544:	0c 94 46 34 	jmp	0x688c	; 0x688c <__prologue_saves__>
     548:	69 83       	std	Y+1, r22	; 0x01
     54a:	7a 83       	std	Y+2, r23	; 0x02
     54c:	8b 83       	std	Y+3, r24	; 0x03
     54e:	9c 83       	std	Y+4, r25	; 0x04
     550:	2d 83       	std	Y+5, r18	; 0x05
     552:	3e 83       	std	Y+6, r19	; 0x06
     554:	4f 83       	std	Y+7, r20	; 0x07
     556:	58 87       	std	Y+8, r21	; 0x08
     558:	ce 01       	movw	r24, r28
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	be 01       	movw	r22, r28
     55e:	67 5f       	subi	r22, 0xF7	; 247
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     566:	ce 01       	movw	r24, r28
     568:	05 96       	adiw	r24, 0x05	; 5
     56a:	be 01       	movw	r22, r28
     56c:	6f 5e       	subi	r22, 0xEF	; 239
     56e:	7f 4f       	sbci	r23, 0xFF	; 255
     570:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     574:	99 85       	ldd	r25, Y+9	; 0x09
     576:	92 30       	cpi	r25, 0x02	; 2
     578:	88 f0       	brcs	.+34     	; 0x59c <__mulsf3+0x60>
     57a:	89 89       	ldd	r24, Y+17	; 0x11
     57c:	82 30       	cpi	r24, 0x02	; 2
     57e:	c8 f0       	brcs	.+50     	; 0x5b2 <__mulsf3+0x76>
     580:	94 30       	cpi	r25, 0x04	; 4
     582:	19 f4       	brne	.+6      	; 0x58a <__mulsf3+0x4e>
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	51 f4       	brne	.+20     	; 0x59c <__mulsf3+0x60>
     588:	04 c0       	rjmp	.+8      	; 0x592 <__mulsf3+0x56>
     58a:	84 30       	cpi	r24, 0x04	; 4
     58c:	29 f4       	brne	.+10     	; 0x598 <__mulsf3+0x5c>
     58e:	92 30       	cpi	r25, 0x02	; 2
     590:	81 f4       	brne	.+32     	; 0x5b2 <__mulsf3+0x76>
     592:	83 e7       	ldi	r24, 0x73	; 115
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	c6 c0       	rjmp	.+396    	; 0x724 <__mulsf3+0x1e8>
     598:	92 30       	cpi	r25, 0x02	; 2
     59a:	49 f4       	brne	.+18     	; 0x5ae <__mulsf3+0x72>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a0:	8a 89       	ldd	r24, Y+18	; 0x12
     5a2:	98 13       	cpse	r25, r24
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	2a 87       	std	Y+10, r18	; 0x0a
     5a8:	ce 01       	movw	r24, r28
     5aa:	09 96       	adiw	r24, 0x09	; 9
     5ac:	bb c0       	rjmp	.+374    	; 0x724 <__mulsf3+0x1e8>
     5ae:	82 30       	cpi	r24, 0x02	; 2
     5b0:	49 f4       	brne	.+18     	; 0x5c4 <__mulsf3+0x88>
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b6:	8a 89       	ldd	r24, Y+18	; 0x12
     5b8:	98 13       	cpse	r25, r24
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	2a 8b       	std	Y+18, r18	; 0x12
     5be:	ce 01       	movw	r24, r28
     5c0:	41 96       	adiw	r24, 0x11	; 17
     5c2:	b0 c0       	rjmp	.+352    	; 0x724 <__mulsf3+0x1e8>
     5c4:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c6:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c8:	4f 84       	ldd	r4, Y+15	; 0x0f
     5ca:	58 88       	ldd	r5, Y+16	; 0x10
     5cc:	6d 88       	ldd	r6, Y+21	; 0x15
     5ce:	7e 88       	ldd	r7, Y+22	; 0x16
     5d0:	8f 88       	ldd	r8, Y+23	; 0x17
     5d2:	98 8c       	ldd	r9, Y+24	; 0x18
     5d4:	ee 24       	eor	r14, r14
     5d6:	ff 24       	eor	r15, r15
     5d8:	87 01       	movw	r16, r14
     5da:	aa 24       	eor	r10, r10
     5dc:	bb 24       	eor	r11, r11
     5de:	65 01       	movw	r12, r10
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	e0 e0       	ldi	r30, 0x00	; 0
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	c1 01       	movw	r24, r2
     5ee:	81 70       	andi	r24, 0x01	; 1
     5f0:	90 70       	andi	r25, 0x00	; 0
     5f2:	89 2b       	or	r24, r25
     5f4:	e9 f0       	breq	.+58     	; 0x630 <__mulsf3+0xf4>
     5f6:	e6 0c       	add	r14, r6
     5f8:	f7 1c       	adc	r15, r7
     5fa:	08 1d       	adc	r16, r8
     5fc:	19 1d       	adc	r17, r9
     5fe:	9a 01       	movw	r18, r20
     600:	ab 01       	movw	r20, r22
     602:	2a 0d       	add	r18, r10
     604:	3b 1d       	adc	r19, r11
     606:	4c 1d       	adc	r20, r12
     608:	5d 1d       	adc	r21, r13
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a0 e0       	ldi	r26, 0x00	; 0
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	e6 14       	cp	r14, r6
     614:	f7 04       	cpc	r15, r7
     616:	08 05       	cpc	r16, r8
     618:	19 05       	cpc	r17, r9
     61a:	20 f4       	brcc	.+8      	; 0x624 <__mulsf3+0xe8>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	ba 01       	movw	r22, r20
     626:	a9 01       	movw	r20, r18
     628:	48 0f       	add	r20, r24
     62a:	59 1f       	adc	r21, r25
     62c:	6a 1f       	adc	r22, r26
     62e:	7b 1f       	adc	r23, r27
     630:	aa 0c       	add	r10, r10
     632:	bb 1c       	adc	r11, r11
     634:	cc 1c       	adc	r12, r12
     636:	dd 1c       	adc	r13, r13
     638:	97 fe       	sbrs	r9, 7
     63a:	08 c0       	rjmp	.+16     	; 0x64c <__mulsf3+0x110>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	a0 e0       	ldi	r26, 0x00	; 0
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	a8 2a       	or	r10, r24
     646:	b9 2a       	or	r11, r25
     648:	ca 2a       	or	r12, r26
     64a:	db 2a       	or	r13, r27
     64c:	31 96       	adiw	r30, 0x01	; 1
     64e:	e0 32       	cpi	r30, 0x20	; 32
     650:	f1 05       	cpc	r31, r1
     652:	49 f0       	breq	.+18     	; 0x666 <__mulsf3+0x12a>
     654:	66 0c       	add	r6, r6
     656:	77 1c       	adc	r7, r7
     658:	88 1c       	adc	r8, r8
     65a:	99 1c       	adc	r9, r9
     65c:	56 94       	lsr	r5
     65e:	47 94       	ror	r4
     660:	37 94       	ror	r3
     662:	27 94       	ror	r2
     664:	c3 cf       	rjmp	.-122    	; 0x5ec <__mulsf3+0xb0>
     666:	fa 85       	ldd	r31, Y+10	; 0x0a
     668:	ea 89       	ldd	r30, Y+18	; 0x12
     66a:	2b 89       	ldd	r18, Y+19	; 0x13
     66c:	3c 89       	ldd	r19, Y+20	; 0x14
     66e:	8b 85       	ldd	r24, Y+11	; 0x0b
     670:	9c 85       	ldd	r25, Y+12	; 0x0c
     672:	28 0f       	add	r18, r24
     674:	39 1f       	adc	r19, r25
     676:	2e 5f       	subi	r18, 0xFE	; 254
     678:	3f 4f       	sbci	r19, 0xFF	; 255
     67a:	17 c0       	rjmp	.+46     	; 0x6aa <__mulsf3+0x16e>
     67c:	ca 01       	movw	r24, r20
     67e:	81 70       	andi	r24, 0x01	; 1
     680:	90 70       	andi	r25, 0x00	; 0
     682:	89 2b       	or	r24, r25
     684:	61 f0       	breq	.+24     	; 0x69e <__mulsf3+0x162>
     686:	16 95       	lsr	r17
     688:	07 95       	ror	r16
     68a:	f7 94       	ror	r15
     68c:	e7 94       	ror	r14
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	a0 e0       	ldi	r26, 0x00	; 0
     694:	b0 e8       	ldi	r27, 0x80	; 128
     696:	e8 2a       	or	r14, r24
     698:	f9 2a       	or	r15, r25
     69a:	0a 2b       	or	r16, r26
     69c:	1b 2b       	or	r17, r27
     69e:	76 95       	lsr	r23
     6a0:	67 95       	ror	r22
     6a2:	57 95       	ror	r21
     6a4:	47 95       	ror	r20
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	77 fd       	sbrc	r23, 7
     6ac:	e7 cf       	rjmp	.-50     	; 0x67c <__mulsf3+0x140>
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <__mulsf3+0x18c>
     6b0:	44 0f       	add	r20, r20
     6b2:	55 1f       	adc	r21, r21
     6b4:	66 1f       	adc	r22, r22
     6b6:	77 1f       	adc	r23, r23
     6b8:	17 fd       	sbrc	r17, 7
     6ba:	41 60       	ori	r20, 0x01	; 1
     6bc:	ee 0c       	add	r14, r14
     6be:	ff 1c       	adc	r15, r15
     6c0:	00 1f       	adc	r16, r16
     6c2:	11 1f       	adc	r17, r17
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	30 40       	sbci	r19, 0x00	; 0
     6c8:	40 30       	cpi	r20, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	59 07       	cpc	r21, r25
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	69 07       	cpc	r22, r25
     6d2:	90 e4       	ldi	r25, 0x40	; 64
     6d4:	79 07       	cpc	r23, r25
     6d6:	60 f3       	brcs	.-40     	; 0x6b0 <__mulsf3+0x174>
     6d8:	2b 8f       	std	Y+27, r18	; 0x1b
     6da:	3c 8f       	std	Y+28, r19	; 0x1c
     6dc:	db 01       	movw	r26, r22
     6de:	ca 01       	movw	r24, r20
     6e0:	8f 77       	andi	r24, 0x7F	; 127
     6e2:	90 70       	andi	r25, 0x00	; 0
     6e4:	a0 70       	andi	r26, 0x00	; 0
     6e6:	b0 70       	andi	r27, 0x00	; 0
     6e8:	80 34       	cpi	r24, 0x40	; 64
     6ea:	91 05       	cpc	r25, r1
     6ec:	a1 05       	cpc	r26, r1
     6ee:	b1 05       	cpc	r27, r1
     6f0:	61 f4       	brne	.+24     	; 0x70a <__mulsf3+0x1ce>
     6f2:	47 fd       	sbrc	r20, 7
     6f4:	0a c0       	rjmp	.+20     	; 0x70a <__mulsf3+0x1ce>
     6f6:	e1 14       	cp	r14, r1
     6f8:	f1 04       	cpc	r15, r1
     6fa:	01 05       	cpc	r16, r1
     6fc:	11 05       	cpc	r17, r1
     6fe:	29 f0       	breq	.+10     	; 0x70a <__mulsf3+0x1ce>
     700:	40 5c       	subi	r20, 0xC0	; 192
     702:	5f 4f       	sbci	r21, 0xFF	; 255
     704:	6f 4f       	sbci	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	40 78       	andi	r20, 0x80	; 128
     70a:	1a 8e       	std	Y+26, r1	; 0x1a
     70c:	fe 17       	cp	r31, r30
     70e:	11 f0       	breq	.+4      	; 0x714 <__mulsf3+0x1d8>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	8a 8f       	std	Y+26, r24	; 0x1a
     714:	4d 8f       	std	Y+29, r20	; 0x1d
     716:	5e 8f       	std	Y+30, r21	; 0x1e
     718:	6f 8f       	std	Y+31, r22	; 0x1f
     71a:	78 a3       	std	Y+32, r23	; 0x20
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	89 8f       	std	Y+25, r24	; 0x19
     720:	ce 01       	movw	r24, r28
     722:	49 96       	adiw	r24, 0x19	; 25
     724:	0e 94 50 06 	call	0xca0	; 0xca0 <__pack_f>
     728:	a0 96       	adiw	r28, 0x20	; 32
     72a:	e2 e1       	ldi	r30, 0x12	; 18
     72c:	0c 94 62 34 	jmp	0x68c4	; 0x68c4 <__epilogue_restores__>

00000730 <__divsf3>:
     730:	a8 e1       	ldi	r26, 0x18	; 24
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	ee e9       	ldi	r30, 0x9E	; 158
     736:	f3 e0       	ldi	r31, 0x03	; 3
     738:	0c 94 4e 34 	jmp	0x689c	; 0x689c <__prologue_saves__+0x10>
     73c:	69 83       	std	Y+1, r22	; 0x01
     73e:	7a 83       	std	Y+2, r23	; 0x02
     740:	8b 83       	std	Y+3, r24	; 0x03
     742:	9c 83       	std	Y+4, r25	; 0x04
     744:	2d 83       	std	Y+5, r18	; 0x05
     746:	3e 83       	std	Y+6, r19	; 0x06
     748:	4f 83       	std	Y+7, r20	; 0x07
     74a:	58 87       	std	Y+8, r21	; 0x08
     74c:	b9 e0       	ldi	r27, 0x09	; 9
     74e:	eb 2e       	mov	r14, r27
     750:	f1 2c       	mov	r15, r1
     752:	ec 0e       	add	r14, r28
     754:	fd 1e       	adc	r15, r29
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	b7 01       	movw	r22, r14
     75c:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     760:	8e 01       	movw	r16, r28
     762:	0f 5e       	subi	r16, 0xEF	; 239
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	ce 01       	movw	r24, r28
     768:	05 96       	adiw	r24, 0x05	; 5
     76a:	b8 01       	movw	r22, r16
     76c:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     770:	29 85       	ldd	r18, Y+9	; 0x09
     772:	22 30       	cpi	r18, 0x02	; 2
     774:	08 f4       	brcc	.+2      	; 0x778 <__divsf3+0x48>
     776:	7e c0       	rjmp	.+252    	; 0x874 <__stack+0x15>
     778:	39 89       	ldd	r19, Y+17	; 0x11
     77a:	32 30       	cpi	r19, 0x02	; 2
     77c:	10 f4       	brcc	.+4      	; 0x782 <__divsf3+0x52>
     77e:	b8 01       	movw	r22, r16
     780:	7c c0       	rjmp	.+248    	; 0x87a <__stack+0x1b>
     782:	8a 85       	ldd	r24, Y+10	; 0x0a
     784:	9a 89       	ldd	r25, Y+18	; 0x12
     786:	89 27       	eor	r24, r25
     788:	8a 87       	std	Y+10, r24	; 0x0a
     78a:	24 30       	cpi	r18, 0x04	; 4
     78c:	11 f0       	breq	.+4      	; 0x792 <__divsf3+0x62>
     78e:	22 30       	cpi	r18, 0x02	; 2
     790:	31 f4       	brne	.+12     	; 0x79e <__divsf3+0x6e>
     792:	23 17       	cp	r18, r19
     794:	09 f0       	breq	.+2      	; 0x798 <__divsf3+0x68>
     796:	6e c0       	rjmp	.+220    	; 0x874 <__stack+0x15>
     798:	63 e7       	ldi	r22, 0x73	; 115
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	6e c0       	rjmp	.+220    	; 0x87a <__stack+0x1b>
     79e:	34 30       	cpi	r19, 0x04	; 4
     7a0:	39 f4       	brne	.+14     	; 0x7b0 <__divsf3+0x80>
     7a2:	1d 86       	std	Y+13, r1	; 0x0d
     7a4:	1e 86       	std	Y+14, r1	; 0x0e
     7a6:	1f 86       	std	Y+15, r1	; 0x0f
     7a8:	18 8a       	std	Y+16, r1	; 0x10
     7aa:	1c 86       	std	Y+12, r1	; 0x0c
     7ac:	1b 86       	std	Y+11, r1	; 0x0b
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <__divsf3+0x88>
     7b0:	32 30       	cpi	r19, 0x02	; 2
     7b2:	21 f4       	brne	.+8      	; 0x7bc <__divsf3+0x8c>
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	89 87       	std	Y+9, r24	; 0x09
     7b8:	b7 01       	movw	r22, r14
     7ba:	5f c0       	rjmp	.+190    	; 0x87a <__stack+0x1b>
     7bc:	2b 85       	ldd	r18, Y+11	; 0x0b
     7be:	3c 85       	ldd	r19, Y+12	; 0x0c
     7c0:	8b 89       	ldd	r24, Y+19	; 0x13
     7c2:	9c 89       	ldd	r25, Y+20	; 0x14
     7c4:	28 1b       	sub	r18, r24
     7c6:	39 0b       	sbc	r19, r25
     7c8:	3c 87       	std	Y+12, r19	; 0x0c
     7ca:	2b 87       	std	Y+11, r18	; 0x0b
     7cc:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ce:	fe 84       	ldd	r15, Y+14	; 0x0e
     7d0:	0f 85       	ldd	r16, Y+15	; 0x0f
     7d2:	18 89       	ldd	r17, Y+16	; 0x10
     7d4:	ad 88       	ldd	r10, Y+21	; 0x15
     7d6:	be 88       	ldd	r11, Y+22	; 0x16
     7d8:	cf 88       	ldd	r12, Y+23	; 0x17
     7da:	d8 8c       	ldd	r13, Y+24	; 0x18
     7dc:	ea 14       	cp	r14, r10
     7de:	fb 04       	cpc	r15, r11
     7e0:	0c 05       	cpc	r16, r12
     7e2:	1d 05       	cpc	r17, r13
     7e4:	40 f4       	brcc	.+16     	; 0x7f6 <__divsf3+0xc6>
     7e6:	ee 0c       	add	r14, r14
     7e8:	ff 1c       	adc	r15, r15
     7ea:	00 1f       	adc	r16, r16
     7ec:	11 1f       	adc	r17, r17
     7ee:	21 50       	subi	r18, 0x01	; 1
     7f0:	30 40       	sbci	r19, 0x00	; 0
     7f2:	3c 87       	std	Y+12, r19	; 0x0c
     7f4:	2b 87       	std	Y+11, r18	; 0x0b
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a0 e0       	ldi	r26, 0x00	; 0
     804:	b0 e4       	ldi	r27, 0x40	; 64
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	ea 14       	cp	r14, r10
     80c:	fb 04       	cpc	r15, r11
     80e:	0c 05       	cpc	r16, r12
     810:	1d 05       	cpc	r17, r13
     812:	40 f0       	brcs	.+16     	; 0x824 <__divsf3+0xf4>
     814:	28 2b       	or	r18, r24
     816:	39 2b       	or	r19, r25
     818:	4a 2b       	or	r20, r26
     81a:	5b 2b       	or	r21, r27
     81c:	ea 18       	sub	r14, r10
     81e:	fb 08       	sbc	r15, r11
     820:	0c 09       	sbc	r16, r12
     822:	1d 09       	sbc	r17, r13
     824:	b6 95       	lsr	r27
     826:	a7 95       	ror	r26
     828:	97 95       	ror	r25
     82a:	87 95       	ror	r24
     82c:	ee 0c       	add	r14, r14
     82e:	ff 1c       	adc	r15, r15
     830:	00 1f       	adc	r16, r16
     832:	11 1f       	adc	r17, r17
     834:	6f 5f       	subi	r22, 0xFF	; 255
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	6f 31       	cpi	r22, 0x1F	; 31
     83a:	71 05       	cpc	r23, r1
     83c:	31 f7       	brne	.-52     	; 0x80a <__divsf3+0xda>
     83e:	da 01       	movw	r26, r20
     840:	c9 01       	movw	r24, r18
     842:	8f 77       	andi	r24, 0x7F	; 127
     844:	90 70       	andi	r25, 0x00	; 0
     846:	a0 70       	andi	r26, 0x00	; 0
     848:	b0 70       	andi	r27, 0x00	; 0
     84a:	80 34       	cpi	r24, 0x40	; 64
     84c:	91 05       	cpc	r25, r1
     84e:	a1 05       	cpc	r26, r1
     850:	b1 05       	cpc	r27, r1
     852:	61 f4       	brne	.+24     	; 0x86c <__stack+0xd>
     854:	27 fd       	sbrc	r18, 7
     856:	0a c0       	rjmp	.+20     	; 0x86c <__stack+0xd>
     858:	e1 14       	cp	r14, r1
     85a:	f1 04       	cpc	r15, r1
     85c:	01 05       	cpc	r16, r1
     85e:	11 05       	cpc	r17, r1
     860:	29 f0       	breq	.+10     	; 0x86c <__stack+0xd>
     862:	20 5c       	subi	r18, 0xC0	; 192
     864:	3f 4f       	sbci	r19, 0xFF	; 255
     866:	4f 4f       	sbci	r20, 0xFF	; 255
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	20 78       	andi	r18, 0x80	; 128
     86c:	2d 87       	std	Y+13, r18	; 0x0d
     86e:	3e 87       	std	Y+14, r19	; 0x0e
     870:	4f 87       	std	Y+15, r20	; 0x0f
     872:	58 8b       	std	Y+16, r21	; 0x10
     874:	be 01       	movw	r22, r28
     876:	67 5f       	subi	r22, 0xF7	; 247
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	cb 01       	movw	r24, r22
     87c:	0e 94 50 06 	call	0xca0	; 0xca0 <__pack_f>
     880:	68 96       	adiw	r28, 0x18	; 24
     882:	ea e0       	ldi	r30, 0x0A	; 10
     884:	0c 94 6a 34 	jmp	0x68d4	; 0x68d4 <__epilogue_restores__+0x10>

00000888 <__nesf2>:
     888:	a8 e1       	ldi	r26, 0x18	; 24
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	ea e4       	ldi	r30, 0x4A	; 74
     88e:	f4 e0       	ldi	r31, 0x04	; 4
     890:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     894:	69 83       	std	Y+1, r22	; 0x01
     896:	7a 83       	std	Y+2, r23	; 0x02
     898:	8b 83       	std	Y+3, r24	; 0x03
     89a:	9c 83       	std	Y+4, r25	; 0x04
     89c:	2d 83       	std	Y+5, r18	; 0x05
     89e:	3e 83       	std	Y+6, r19	; 0x06
     8a0:	4f 83       	std	Y+7, r20	; 0x07
     8a2:	58 87       	std	Y+8, r21	; 0x08
     8a4:	89 e0       	ldi	r24, 0x09	; 9
     8a6:	e8 2e       	mov	r14, r24
     8a8:	f1 2c       	mov	r15, r1
     8aa:	ec 0e       	add	r14, r28
     8ac:	fd 1e       	adc	r15, r29
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	b7 01       	movw	r22, r14
     8b4:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     8b8:	8e 01       	movw	r16, r28
     8ba:	0f 5e       	subi	r16, 0xEF	; 239
     8bc:	1f 4f       	sbci	r17, 0xFF	; 255
     8be:	ce 01       	movw	r24, r28
     8c0:	05 96       	adiw	r24, 0x05	; 5
     8c2:	b8 01       	movw	r22, r16
     8c4:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     8c8:	89 85       	ldd	r24, Y+9	; 0x09
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	40 f0       	brcs	.+16     	; 0x8de <__nesf2+0x56>
     8ce:	89 89       	ldd	r24, Y+17	; 0x11
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	28 f0       	brcs	.+10     	; 0x8de <__nesf2+0x56>
     8d4:	c7 01       	movw	r24, r14
     8d6:	b8 01       	movw	r22, r16
     8d8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fpcmp_parts_f>
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <__nesf2+0x58>
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	68 96       	adiw	r28, 0x18	; 24
     8e2:	e6 e0       	ldi	r30, 0x06	; 6
     8e4:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

000008e8 <__gtsf2>:
     8e8:	a8 e1       	ldi	r26, 0x18	; 24
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	ea e7       	ldi	r30, 0x7A	; 122
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     8f4:	69 83       	std	Y+1, r22	; 0x01
     8f6:	7a 83       	std	Y+2, r23	; 0x02
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	2d 83       	std	Y+5, r18	; 0x05
     8fe:	3e 83       	std	Y+6, r19	; 0x06
     900:	4f 83       	std	Y+7, r20	; 0x07
     902:	58 87       	std	Y+8, r21	; 0x08
     904:	89 e0       	ldi	r24, 0x09	; 9
     906:	e8 2e       	mov	r14, r24
     908:	f1 2c       	mov	r15, r1
     90a:	ec 0e       	add	r14, r28
     90c:	fd 1e       	adc	r15, r29
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	b7 01       	movw	r22, r14
     914:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     918:	8e 01       	movw	r16, r28
     91a:	0f 5e       	subi	r16, 0xEF	; 239
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	ce 01       	movw	r24, r28
     920:	05 96       	adiw	r24, 0x05	; 5
     922:	b8 01       	movw	r22, r16
     924:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     928:	89 85       	ldd	r24, Y+9	; 0x09
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	40 f0       	brcs	.+16     	; 0x93e <__gtsf2+0x56>
     92e:	89 89       	ldd	r24, Y+17	; 0x11
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	28 f0       	brcs	.+10     	; 0x93e <__gtsf2+0x56>
     934:	c7 01       	movw	r24, r14
     936:	b8 01       	movw	r22, r16
     938:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fpcmp_parts_f>
     93c:	01 c0       	rjmp	.+2      	; 0x940 <__gtsf2+0x58>
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	68 96       	adiw	r28, 0x18	; 24
     942:	e6 e0       	ldi	r30, 0x06	; 6
     944:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

00000948 <__gesf2>:
     948:	a8 e1       	ldi	r26, 0x18	; 24
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	ea ea       	ldi	r30, 0xAA	; 170
     94e:	f4 e0       	ldi	r31, 0x04	; 4
     950:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     954:	69 83       	std	Y+1, r22	; 0x01
     956:	7a 83       	std	Y+2, r23	; 0x02
     958:	8b 83       	std	Y+3, r24	; 0x03
     95a:	9c 83       	std	Y+4, r25	; 0x04
     95c:	2d 83       	std	Y+5, r18	; 0x05
     95e:	3e 83       	std	Y+6, r19	; 0x06
     960:	4f 83       	std	Y+7, r20	; 0x07
     962:	58 87       	std	Y+8, r21	; 0x08
     964:	89 e0       	ldi	r24, 0x09	; 9
     966:	e8 2e       	mov	r14, r24
     968:	f1 2c       	mov	r15, r1
     96a:	ec 0e       	add	r14, r28
     96c:	fd 1e       	adc	r15, r29
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	b7 01       	movw	r22, r14
     974:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     978:	8e 01       	movw	r16, r28
     97a:	0f 5e       	subi	r16, 0xEF	; 239
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	ce 01       	movw	r24, r28
     980:	05 96       	adiw	r24, 0x05	; 5
     982:	b8 01       	movw	r22, r16
     984:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     988:	89 85       	ldd	r24, Y+9	; 0x09
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	40 f0       	brcs	.+16     	; 0x99e <__gesf2+0x56>
     98e:	89 89       	ldd	r24, Y+17	; 0x11
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	28 f0       	brcs	.+10     	; 0x99e <__gesf2+0x56>
     994:	c7 01       	movw	r24, r14
     996:	b8 01       	movw	r22, r16
     998:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fpcmp_parts_f>
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <__gesf2+0x58>
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	68 96       	adiw	r28, 0x18	; 24
     9a2:	e6 e0       	ldi	r30, 0x06	; 6
     9a4:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

000009a8 <__ltsf2>:
     9a8:	a8 e1       	ldi	r26, 0x18	; 24
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	ea ed       	ldi	r30, 0xDA	; 218
     9ae:	f4 e0       	ldi	r31, 0x04	; 4
     9b0:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     9b4:	69 83       	std	Y+1, r22	; 0x01
     9b6:	7a 83       	std	Y+2, r23	; 0x02
     9b8:	8b 83       	std	Y+3, r24	; 0x03
     9ba:	9c 83       	std	Y+4, r25	; 0x04
     9bc:	2d 83       	std	Y+5, r18	; 0x05
     9be:	3e 83       	std	Y+6, r19	; 0x06
     9c0:	4f 83       	std	Y+7, r20	; 0x07
     9c2:	58 87       	std	Y+8, r21	; 0x08
     9c4:	89 e0       	ldi	r24, 0x09	; 9
     9c6:	e8 2e       	mov	r14, r24
     9c8:	f1 2c       	mov	r15, r1
     9ca:	ec 0e       	add	r14, r28
     9cc:	fd 1e       	adc	r15, r29
     9ce:	ce 01       	movw	r24, r28
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	b7 01       	movw	r22, r14
     9d4:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     9d8:	8e 01       	movw	r16, r28
     9da:	0f 5e       	subi	r16, 0xEF	; 239
     9dc:	1f 4f       	sbci	r17, 0xFF	; 255
     9de:	ce 01       	movw	r24, r28
     9e0:	05 96       	adiw	r24, 0x05	; 5
     9e2:	b8 01       	movw	r22, r16
     9e4:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     9e8:	89 85       	ldd	r24, Y+9	; 0x09
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	40 f0       	brcs	.+16     	; 0x9fe <__ltsf2+0x56>
     9ee:	89 89       	ldd	r24, Y+17	; 0x11
     9f0:	82 30       	cpi	r24, 0x02	; 2
     9f2:	28 f0       	brcs	.+10     	; 0x9fe <__ltsf2+0x56>
     9f4:	c7 01       	movw	r24, r14
     9f6:	b8 01       	movw	r22, r16
     9f8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fpcmp_parts_f>
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <__ltsf2+0x58>
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	68 96       	adiw	r28, 0x18	; 24
     a02:	e6 e0       	ldi	r30, 0x06	; 6
     a04:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

00000a08 <__lesf2>:
     a08:	a8 e1       	ldi	r26, 0x18	; 24
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	ea e0       	ldi	r30, 0x0A	; 10
     a0e:	f5 e0       	ldi	r31, 0x05	; 5
     a10:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     a14:	69 83       	std	Y+1, r22	; 0x01
     a16:	7a 83       	std	Y+2, r23	; 0x02
     a18:	8b 83       	std	Y+3, r24	; 0x03
     a1a:	9c 83       	std	Y+4, r25	; 0x04
     a1c:	2d 83       	std	Y+5, r18	; 0x05
     a1e:	3e 83       	std	Y+6, r19	; 0x06
     a20:	4f 83       	std	Y+7, r20	; 0x07
     a22:	58 87       	std	Y+8, r21	; 0x08
     a24:	89 e0       	ldi	r24, 0x09	; 9
     a26:	e8 2e       	mov	r14, r24
     a28:	f1 2c       	mov	r15, r1
     a2a:	ec 0e       	add	r14, r28
     a2c:	fd 1e       	adc	r15, r29
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	b7 01       	movw	r22, r14
     a34:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     a38:	8e 01       	movw	r16, r28
     a3a:	0f 5e       	subi	r16, 0xEF	; 239
     a3c:	1f 4f       	sbci	r17, 0xFF	; 255
     a3e:	ce 01       	movw	r24, r28
     a40:	05 96       	adiw	r24, 0x05	; 5
     a42:	b8 01       	movw	r22, r16
     a44:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     a48:	89 85       	ldd	r24, Y+9	; 0x09
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	40 f0       	brcs	.+16     	; 0xa5e <__lesf2+0x56>
     a4e:	89 89       	ldd	r24, Y+17	; 0x11
     a50:	82 30       	cpi	r24, 0x02	; 2
     a52:	28 f0       	brcs	.+10     	; 0xa5e <__lesf2+0x56>
     a54:	c7 01       	movw	r24, r14
     a56:	b8 01       	movw	r22, r16
     a58:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fpcmp_parts_f>
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <__lesf2+0x58>
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	68 96       	adiw	r28, 0x18	; 24
     a62:	e6 e0       	ldi	r30, 0x06	; 6
     a64:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

00000a68 <__fixsfsi>:
     a68:	ac e0       	ldi	r26, 0x0C	; 12
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	ea e3       	ldi	r30, 0x3A	; 58
     a6e:	f5 e0       	ldi	r31, 0x05	; 5
     a70:	0c 94 56 34 	jmp	0x68ac	; 0x68ac <__prologue_saves__+0x20>
     a74:	69 83       	std	Y+1, r22	; 0x01
     a76:	7a 83       	std	Y+2, r23	; 0x02
     a78:	8b 83       	std	Y+3, r24	; 0x03
     a7a:	9c 83       	std	Y+4, r25	; 0x04
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	be 01       	movw	r22, r28
     a82:	6b 5f       	subi	r22, 0xFB	; 251
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	0e 94 25 07 	call	0xe4a	; 0xe4a <__unpack_f>
     a8a:	8d 81       	ldd	r24, Y+5	; 0x05
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	61 f1       	breq	.+88     	; 0xae8 <__fixsfsi+0x80>
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	50 f1       	brcs	.+84     	; 0xae8 <__fixsfsi+0x80>
     a94:	84 30       	cpi	r24, 0x04	; 4
     a96:	21 f4       	brne	.+8      	; 0xaa0 <__fixsfsi+0x38>
     a98:	8e 81       	ldd	r24, Y+6	; 0x06
     a9a:	88 23       	and	r24, r24
     a9c:	51 f1       	breq	.+84     	; 0xaf2 <__fixsfsi+0x8a>
     a9e:	2e c0       	rjmp	.+92     	; 0xafc <__fixsfsi+0x94>
     aa0:	2f 81       	ldd	r18, Y+7	; 0x07
     aa2:	38 85       	ldd	r19, Y+8	; 0x08
     aa4:	37 fd       	sbrc	r19, 7
     aa6:	20 c0       	rjmp	.+64     	; 0xae8 <__fixsfsi+0x80>
     aa8:	6e 81       	ldd	r22, Y+6	; 0x06
     aaa:	2f 31       	cpi	r18, 0x1F	; 31
     aac:	31 05       	cpc	r19, r1
     aae:	1c f0       	brlt	.+6      	; 0xab6 <__fixsfsi+0x4e>
     ab0:	66 23       	and	r22, r22
     ab2:	f9 f0       	breq	.+62     	; 0xaf2 <__fixsfsi+0x8a>
     ab4:	23 c0       	rjmp	.+70     	; 0xafc <__fixsfsi+0x94>
     ab6:	8e e1       	ldi	r24, 0x1E	; 30
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	82 1b       	sub	r24, r18
     abc:	93 0b       	sbc	r25, r19
     abe:	29 85       	ldd	r18, Y+9	; 0x09
     ac0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ac2:	4b 85       	ldd	r20, Y+11	; 0x0b
     ac4:	5c 85       	ldd	r21, Y+12	; 0x0c
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__fixsfsi+0x68>
     ac8:	56 95       	lsr	r21
     aca:	47 95       	ror	r20
     acc:	37 95       	ror	r19
     ace:	27 95       	ror	r18
     ad0:	8a 95       	dec	r24
     ad2:	d2 f7       	brpl	.-12     	; 0xac8 <__fixsfsi+0x60>
     ad4:	66 23       	and	r22, r22
     ad6:	b1 f0       	breq	.+44     	; 0xb04 <__fixsfsi+0x9c>
     ad8:	50 95       	com	r21
     ada:	40 95       	com	r20
     adc:	30 95       	com	r19
     ade:	21 95       	neg	r18
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	4f 4f       	sbci	r20, 0xFF	; 255
     ae4:	5f 4f       	sbci	r21, 0xFF	; 255
     ae6:	0e c0       	rjmp	.+28     	; 0xb04 <__fixsfsi+0x9c>
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	09 c0       	rjmp	.+18     	; 0xb04 <__fixsfsi+0x9c>
     af2:	2f ef       	ldi	r18, 0xFF	; 255
     af4:	3f ef       	ldi	r19, 0xFF	; 255
     af6:	4f ef       	ldi	r20, 0xFF	; 255
     af8:	5f e7       	ldi	r21, 0x7F	; 127
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <__fixsfsi+0x9c>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 e8       	ldi	r21, 0x80	; 128
     b04:	b9 01       	movw	r22, r18
     b06:	ca 01       	movw	r24, r20
     b08:	2c 96       	adiw	r28, 0x0c	; 12
     b0a:	e2 e0       	ldi	r30, 0x02	; 2
     b0c:	0c 94 72 34 	jmp	0x68e4	; 0x68e4 <__epilogue_restores__+0x20>

00000b10 <__floatunsisf>:
     b10:	a8 e0       	ldi	r26, 0x08	; 8
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	ee e8       	ldi	r30, 0x8E	; 142
     b16:	f5 e0       	ldi	r31, 0x05	; 5
     b18:	0c 94 4e 34 	jmp	0x689c	; 0x689c <__prologue_saves__+0x10>
     b1c:	7b 01       	movw	r14, r22
     b1e:	8c 01       	movw	r16, r24
     b20:	61 15       	cp	r22, r1
     b22:	71 05       	cpc	r23, r1
     b24:	81 05       	cpc	r24, r1
     b26:	91 05       	cpc	r25, r1
     b28:	19 f4       	brne	.+6      	; 0xb30 <__floatunsisf+0x20>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	60 c0       	rjmp	.+192    	; 0xbf0 <__floatunsisf+0xe0>
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	89 83       	std	Y+1, r24	; 0x01
     b34:	8e e1       	ldi	r24, 0x1E	; 30
     b36:	c8 2e       	mov	r12, r24
     b38:	d1 2c       	mov	r13, r1
     b3a:	dc 82       	std	Y+4, r13	; 0x04
     b3c:	cb 82       	std	Y+3, r12	; 0x03
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	c8 01       	movw	r24, r16
     b48:	b7 01       	movw	r22, r14
     b4a:	0e 94 01 06 	call	0xc02	; 0xc02 <__clzsi2>
     b4e:	fc 01       	movw	r30, r24
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	f7 ff       	sbrs	r31, 7
     b54:	3b c0       	rjmp	.+118    	; 0xbcc <__floatunsisf+0xbc>
     b56:	22 27       	eor	r18, r18
     b58:	33 27       	eor	r19, r19
     b5a:	2e 1b       	sub	r18, r30
     b5c:	3f 0b       	sbc	r19, r31
     b5e:	57 01       	movw	r10, r14
     b60:	68 01       	movw	r12, r16
     b62:	02 2e       	mov	r0, r18
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__floatunsisf+0x5e>
     b66:	d6 94       	lsr	r13
     b68:	c7 94       	ror	r12
     b6a:	b7 94       	ror	r11
     b6c:	a7 94       	ror	r10
     b6e:	0a 94       	dec	r0
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__floatunsisf+0x56>
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <__floatunsisf+0x7c>
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	aa 1f       	adc	r26, r26
     b8a:	bb 1f       	adc	r27, r27
     b8c:	2a 95       	dec	r18
     b8e:	d2 f7       	brpl	.-12     	; 0xb84 <__floatunsisf+0x74>
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	a1 09       	sbc	r26, r1
     b94:	b1 09       	sbc	r27, r1
     b96:	8e 21       	and	r24, r14
     b98:	9f 21       	and	r25, r15
     b9a:	a0 23       	and	r26, r16
     b9c:	b1 23       	and	r27, r17
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	a1 05       	cpc	r26, r1
     ba2:	b1 05       	cpc	r27, r1
     ba4:	21 f0       	breq	.+8      	; 0xbae <__floatunsisf+0x9e>
     ba6:	41 e0       	ldi	r20, 0x01	; 1
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	4a 29       	or	r20, r10
     bb0:	5b 29       	or	r21, r11
     bb2:	6c 29       	or	r22, r12
     bb4:	7d 29       	or	r23, r13
     bb6:	4d 83       	std	Y+5, r20	; 0x05
     bb8:	5e 83       	std	Y+6, r21	; 0x06
     bba:	6f 83       	std	Y+7, r22	; 0x07
     bbc:	78 87       	std	Y+8, r23	; 0x08
     bbe:	8e e1       	ldi	r24, 0x1E	; 30
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	8e 1b       	sub	r24, r30
     bc4:	9f 0b       	sbc	r25, r31
     bc6:	9c 83       	std	Y+4, r25	; 0x04
     bc8:	8b 83       	std	Y+3, r24	; 0x03
     bca:	12 c0       	rjmp	.+36     	; 0xbf0 <__floatunsisf+0xe0>
     bcc:	30 97       	sbiw	r30, 0x00	; 0
     bce:	81 f0       	breq	.+32     	; 0xbf0 <__floatunsisf+0xe0>
     bd0:	0e 2e       	mov	r0, r30
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <__floatunsisf+0xcc>
     bd4:	ee 0c       	add	r14, r14
     bd6:	ff 1c       	adc	r15, r15
     bd8:	00 1f       	adc	r16, r16
     bda:	11 1f       	adc	r17, r17
     bdc:	0a 94       	dec	r0
     bde:	d2 f7       	brpl	.-12     	; 0xbd4 <__floatunsisf+0xc4>
     be0:	ed 82       	std	Y+5, r14	; 0x05
     be2:	fe 82       	std	Y+6, r15	; 0x06
     be4:	0f 83       	std	Y+7, r16	; 0x07
     be6:	18 87       	std	Y+8, r17	; 0x08
     be8:	ce 1a       	sub	r12, r30
     bea:	df 0a       	sbc	r13, r31
     bec:	dc 82       	std	Y+4, r13	; 0x04
     bee:	cb 82       	std	Y+3, r12	; 0x03
     bf0:	1a 82       	std	Y+2, r1	; 0x02
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 50 06 	call	0xca0	; 0xca0 <__pack_f>
     bfa:	28 96       	adiw	r28, 0x08	; 8
     bfc:	ea e0       	ldi	r30, 0x0A	; 10
     bfe:	0c 94 6a 34 	jmp	0x68d4	; 0x68d4 <__epilogue_restores__+0x10>

00000c02 <__clzsi2>:
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	7b 01       	movw	r14, r22
     c0c:	8c 01       	movw	r16, r24
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	e8 16       	cp	r14, r24
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	f8 06       	cpc	r15, r24
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	08 07       	cpc	r16, r24
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	18 07       	cpc	r17, r24
     c1e:	88 f4       	brcc	.+34     	; 0xc42 <__clzsi2+0x40>
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	e8 16       	cp	r14, r24
     c24:	f1 04       	cpc	r15, r1
     c26:	01 05       	cpc	r16, r1
     c28:	11 05       	cpc	r17, r1
     c2a:	31 f0       	breq	.+12     	; 0xc38 <__clzsi2+0x36>
     c2c:	28 f0       	brcs	.+10     	; 0xc38 <__clzsi2+0x36>
     c2e:	88 e0       	ldi	r24, 0x08	; 8
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	a0 e0       	ldi	r26, 0x00	; 0
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	17 c0       	rjmp	.+46     	; 0xc66 <__clzsi2+0x64>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	a0 e0       	ldi	r26, 0x00	; 0
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	12 c0       	rjmp	.+36     	; 0xc66 <__clzsi2+0x64>
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	e8 16       	cp	r14, r24
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	f8 06       	cpc	r15, r24
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	08 07       	cpc	r16, r24
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	18 07       	cpc	r17, r24
     c52:	28 f0       	brcs	.+10     	; 0xc5e <__clzsi2+0x5c>
     c54:	88 e1       	ldi	r24, 0x18	; 24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <__clzsi2+0x64>
     c5e:	80 e1       	ldi	r24, 0x10	; 16
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a0 e0       	ldi	r26, 0x00	; 0
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	20 e2       	ldi	r18, 0x20	; 32
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	28 1b       	sub	r18, r24
     c70:	39 0b       	sbc	r19, r25
     c72:	4a 0b       	sbc	r20, r26
     c74:	5b 0b       	sbc	r21, r27
     c76:	04 c0       	rjmp	.+8      	; 0xc80 <__clzsi2+0x7e>
     c78:	16 95       	lsr	r17
     c7a:	07 95       	ror	r16
     c7c:	f7 94       	ror	r15
     c7e:	e7 94       	ror	r14
     c80:	8a 95       	dec	r24
     c82:	d2 f7       	brpl	.-12     	; 0xc78 <__clzsi2+0x76>
     c84:	f7 01       	movw	r30, r14
     c86:	e5 58       	subi	r30, 0x85	; 133
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	80 81       	ld	r24, Z
     c8c:	28 1b       	sub	r18, r24
     c8e:	31 09       	sbc	r19, r1
     c90:	41 09       	sbc	r20, r1
     c92:	51 09       	sbc	r21, r1
     c94:	c9 01       	movw	r24, r18
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	08 95       	ret

00000ca0 <__pack_f>:
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	fc 01       	movw	r30, r24
     cac:	e4 80       	ldd	r14, Z+4	; 0x04
     cae:	f5 80       	ldd	r15, Z+5	; 0x05
     cb0:	06 81       	ldd	r16, Z+6	; 0x06
     cb2:	17 81       	ldd	r17, Z+7	; 0x07
     cb4:	d1 80       	ldd	r13, Z+1	; 0x01
     cb6:	80 81       	ld	r24, Z
     cb8:	82 30       	cpi	r24, 0x02	; 2
     cba:	48 f4       	brcc	.+18     	; 0xcce <__pack_f+0x2e>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a0 e1       	ldi	r26, 0x10	; 16
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e8 2a       	or	r14, r24
     cc6:	f9 2a       	or	r15, r25
     cc8:	0a 2b       	or	r16, r26
     cca:	1b 2b       	or	r17, r27
     ccc:	a5 c0       	rjmp	.+330    	; 0xe18 <__pack_f+0x178>
     cce:	84 30       	cpi	r24, 0x04	; 4
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <__pack_f+0x34>
     cd2:	9f c0       	rjmp	.+318    	; 0xe12 <__pack_f+0x172>
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	21 f4       	brne	.+8      	; 0xce0 <__pack_f+0x40>
     cd8:	ee 24       	eor	r14, r14
     cda:	ff 24       	eor	r15, r15
     cdc:	87 01       	movw	r16, r14
     cde:	05 c0       	rjmp	.+10     	; 0xcea <__pack_f+0x4a>
     ce0:	e1 14       	cp	r14, r1
     ce2:	f1 04       	cpc	r15, r1
     ce4:	01 05       	cpc	r16, r1
     ce6:	11 05       	cpc	r17, r1
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <__pack_f+0x50>
     cea:	e0 e0       	ldi	r30, 0x00	; 0
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	96 c0       	rjmp	.+300    	; 0xe1c <__pack_f+0x17c>
     cf0:	62 81       	ldd	r22, Z+2	; 0x02
     cf2:	73 81       	ldd	r23, Z+3	; 0x03
     cf4:	9f ef       	ldi	r25, 0xFF	; 255
     cf6:	62 38       	cpi	r22, 0x82	; 130
     cf8:	79 07       	cpc	r23, r25
     cfa:	0c f0       	brlt	.+2      	; 0xcfe <__pack_f+0x5e>
     cfc:	5b c0       	rjmp	.+182    	; 0xdb4 <__pack_f+0x114>
     cfe:	22 e8       	ldi	r18, 0x82	; 130
     d00:	3f ef       	ldi	r19, 0xFF	; 255
     d02:	26 1b       	sub	r18, r22
     d04:	37 0b       	sbc	r19, r23
     d06:	2a 31       	cpi	r18, 0x1A	; 26
     d08:	31 05       	cpc	r19, r1
     d0a:	2c f0       	brlt	.+10     	; 0xd16 <__pack_f+0x76>
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	2a c0       	rjmp	.+84     	; 0xd6a <__pack_f+0xca>
     d16:	b8 01       	movw	r22, r16
     d18:	a7 01       	movw	r20, r14
     d1a:	02 2e       	mov	r0, r18
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <__pack_f+0x86>
     d1e:	76 95       	lsr	r23
     d20:	67 95       	ror	r22
     d22:	57 95       	ror	r21
     d24:	47 95       	ror	r20
     d26:	0a 94       	dec	r0
     d28:	d2 f7       	brpl	.-12     	; 0xd1e <__pack_f+0x7e>
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	a0 e0       	ldi	r26, 0x00	; 0
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <__pack_f+0x9c>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	aa 1f       	adc	r26, r26
     d3a:	bb 1f       	adc	r27, r27
     d3c:	2a 95       	dec	r18
     d3e:	d2 f7       	brpl	.-12     	; 0xd34 <__pack_f+0x94>
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	a1 09       	sbc	r26, r1
     d44:	b1 09       	sbc	r27, r1
     d46:	8e 21       	and	r24, r14
     d48:	9f 21       	and	r25, r15
     d4a:	a0 23       	and	r26, r16
     d4c:	b1 23       	and	r27, r17
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	a1 05       	cpc	r26, r1
     d52:	b1 05       	cpc	r27, r1
     d54:	21 f0       	breq	.+8      	; 0xd5e <__pack_f+0xbe>
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	9a 01       	movw	r18, r20
     d60:	ab 01       	movw	r20, r22
     d62:	28 2b       	or	r18, r24
     d64:	39 2b       	or	r19, r25
     d66:	4a 2b       	or	r20, r26
     d68:	5b 2b       	or	r21, r27
     d6a:	da 01       	movw	r26, r20
     d6c:	c9 01       	movw	r24, r18
     d6e:	8f 77       	andi	r24, 0x7F	; 127
     d70:	90 70       	andi	r25, 0x00	; 0
     d72:	a0 70       	andi	r26, 0x00	; 0
     d74:	b0 70       	andi	r27, 0x00	; 0
     d76:	80 34       	cpi	r24, 0x40	; 64
     d78:	91 05       	cpc	r25, r1
     d7a:	a1 05       	cpc	r26, r1
     d7c:	b1 05       	cpc	r27, r1
     d7e:	39 f4       	brne	.+14     	; 0xd8e <__pack_f+0xee>
     d80:	27 ff       	sbrs	r18, 7
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <__pack_f+0xf6>
     d84:	20 5c       	subi	r18, 0xC0	; 192
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	4f 4f       	sbci	r20, 0xFF	; 255
     d8a:	5f 4f       	sbci	r21, 0xFF	; 255
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <__pack_f+0xf6>
     d8e:	21 5c       	subi	r18, 0xC1	; 193
     d90:	3f 4f       	sbci	r19, 0xFF	; 255
     d92:	4f 4f       	sbci	r20, 0xFF	; 255
     d94:	5f 4f       	sbci	r21, 0xFF	; 255
     d96:	e0 e0       	ldi	r30, 0x00	; 0
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	20 30       	cpi	r18, 0x00	; 0
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	3a 07       	cpc	r19, r26
     da0:	a0 e0       	ldi	r26, 0x00	; 0
     da2:	4a 07       	cpc	r20, r26
     da4:	a0 e4       	ldi	r26, 0x40	; 64
     da6:	5a 07       	cpc	r21, r26
     da8:	10 f0       	brcs	.+4      	; 0xdae <__pack_f+0x10e>
     daa:	e1 e0       	ldi	r30, 0x01	; 1
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	79 01       	movw	r14, r18
     db0:	8a 01       	movw	r16, r20
     db2:	27 c0       	rjmp	.+78     	; 0xe02 <__pack_f+0x162>
     db4:	60 38       	cpi	r22, 0x80	; 128
     db6:	71 05       	cpc	r23, r1
     db8:	64 f5       	brge	.+88     	; 0xe12 <__pack_f+0x172>
     dba:	fb 01       	movw	r30, r22
     dbc:	e1 58       	subi	r30, 0x81	; 129
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	d8 01       	movw	r26, r16
     dc2:	c7 01       	movw	r24, r14
     dc4:	8f 77       	andi	r24, 0x7F	; 127
     dc6:	90 70       	andi	r25, 0x00	; 0
     dc8:	a0 70       	andi	r26, 0x00	; 0
     dca:	b0 70       	andi	r27, 0x00	; 0
     dcc:	80 34       	cpi	r24, 0x40	; 64
     dce:	91 05       	cpc	r25, r1
     dd0:	a1 05       	cpc	r26, r1
     dd2:	b1 05       	cpc	r27, r1
     dd4:	39 f4       	brne	.+14     	; 0xde4 <__pack_f+0x144>
     dd6:	e7 fe       	sbrs	r14, 7
     dd8:	0d c0       	rjmp	.+26     	; 0xdf4 <__pack_f+0x154>
     dda:	80 e4       	ldi	r24, 0x40	; 64
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e0       	ldi	r26, 0x00	; 0
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	04 c0       	rjmp	.+8      	; 0xdec <__pack_f+0x14c>
     de4:	8f e3       	ldi	r24, 0x3F	; 63
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	a0 e0       	ldi	r26, 0x00	; 0
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e8 0e       	add	r14, r24
     dee:	f9 1e       	adc	r15, r25
     df0:	0a 1f       	adc	r16, r26
     df2:	1b 1f       	adc	r17, r27
     df4:	17 ff       	sbrs	r17, 7
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <__pack_f+0x162>
     df8:	16 95       	lsr	r17
     dfa:	07 95       	ror	r16
     dfc:	f7 94       	ror	r15
     dfe:	e7 94       	ror	r14
     e00:	31 96       	adiw	r30, 0x01	; 1
     e02:	87 e0       	ldi	r24, 0x07	; 7
     e04:	16 95       	lsr	r17
     e06:	07 95       	ror	r16
     e08:	f7 94       	ror	r15
     e0a:	e7 94       	ror	r14
     e0c:	8a 95       	dec	r24
     e0e:	d1 f7       	brne	.-12     	; 0xe04 <__pack_f+0x164>
     e10:	05 c0       	rjmp	.+10     	; 0xe1c <__pack_f+0x17c>
     e12:	ee 24       	eor	r14, r14
     e14:	ff 24       	eor	r15, r15
     e16:	87 01       	movw	r16, r14
     e18:	ef ef       	ldi	r30, 0xFF	; 255
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	6e 2f       	mov	r22, r30
     e1e:	67 95       	ror	r22
     e20:	66 27       	eor	r22, r22
     e22:	67 95       	ror	r22
     e24:	90 2f       	mov	r25, r16
     e26:	9f 77       	andi	r25, 0x7F	; 127
     e28:	d7 94       	ror	r13
     e2a:	dd 24       	eor	r13, r13
     e2c:	d7 94       	ror	r13
     e2e:	8e 2f       	mov	r24, r30
     e30:	86 95       	lsr	r24
     e32:	49 2f       	mov	r20, r25
     e34:	46 2b       	or	r20, r22
     e36:	58 2f       	mov	r21, r24
     e38:	5d 29       	or	r21, r13
     e3a:	b7 01       	movw	r22, r14
     e3c:	ca 01       	movw	r24, r20
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	08 95       	ret

00000e4a <__unpack_f>:
     e4a:	fc 01       	movw	r30, r24
     e4c:	db 01       	movw	r26, r22
     e4e:	40 81       	ld	r20, Z
     e50:	51 81       	ldd	r21, Z+1	; 0x01
     e52:	22 81       	ldd	r18, Z+2	; 0x02
     e54:	62 2f       	mov	r22, r18
     e56:	6f 77       	andi	r22, 0x7F	; 127
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	22 1f       	adc	r18, r18
     e5c:	22 27       	eor	r18, r18
     e5e:	22 1f       	adc	r18, r18
     e60:	93 81       	ldd	r25, Z+3	; 0x03
     e62:	89 2f       	mov	r24, r25
     e64:	88 0f       	add	r24, r24
     e66:	82 2b       	or	r24, r18
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	99 1f       	adc	r25, r25
     e6e:	99 27       	eor	r25, r25
     e70:	99 1f       	adc	r25, r25
     e72:	11 96       	adiw	r26, 0x01	; 1
     e74:	9c 93       	st	X, r25
     e76:	11 97       	sbiw	r26, 0x01	; 1
     e78:	21 15       	cp	r18, r1
     e7a:	31 05       	cpc	r19, r1
     e7c:	a9 f5       	brne	.+106    	; 0xee8 <__unpack_f+0x9e>
     e7e:	41 15       	cp	r20, r1
     e80:	51 05       	cpc	r21, r1
     e82:	61 05       	cpc	r22, r1
     e84:	71 05       	cpc	r23, r1
     e86:	11 f4       	brne	.+4      	; 0xe8c <__unpack_f+0x42>
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	37 c0       	rjmp	.+110    	; 0xefa <__unpack_f+0xb0>
     e8c:	82 e8       	ldi	r24, 0x82	; 130
     e8e:	9f ef       	ldi	r25, 0xFF	; 255
     e90:	13 96       	adiw	r26, 0x03	; 3
     e92:	9c 93       	st	X, r25
     e94:	8e 93       	st	-X, r24
     e96:	12 97       	sbiw	r26, 0x02	; 2
     e98:	9a 01       	movw	r18, r20
     e9a:	ab 01       	movw	r20, r22
     e9c:	67 e0       	ldi	r22, 0x07	; 7
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	44 1f       	adc	r20, r20
     ea4:	55 1f       	adc	r21, r21
     ea6:	6a 95       	dec	r22
     ea8:	d1 f7       	brne	.-12     	; 0xe9e <__unpack_f+0x54>
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	8c 93       	st	X, r24
     eae:	0d c0       	rjmp	.+26     	; 0xeca <__unpack_f+0x80>
     eb0:	22 0f       	add	r18, r18
     eb2:	33 1f       	adc	r19, r19
     eb4:	44 1f       	adc	r20, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	12 96       	adiw	r26, 0x02	; 2
     eba:	8d 91       	ld	r24, X+
     ebc:	9c 91       	ld	r25, X
     ebe:	13 97       	sbiw	r26, 0x03	; 3
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	13 96       	adiw	r26, 0x03	; 3
     ec4:	9c 93       	st	X, r25
     ec6:	8e 93       	st	-X, r24
     ec8:	12 97       	sbiw	r26, 0x02	; 2
     eca:	20 30       	cpi	r18, 0x00	; 0
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	38 07       	cpc	r19, r24
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	48 07       	cpc	r20, r24
     ed4:	80 e4       	ldi	r24, 0x40	; 64
     ed6:	58 07       	cpc	r21, r24
     ed8:	58 f3       	brcs	.-42     	; 0xeb0 <__unpack_f+0x66>
     eda:	14 96       	adiw	r26, 0x04	; 4
     edc:	2d 93       	st	X+, r18
     ede:	3d 93       	st	X+, r19
     ee0:	4d 93       	st	X+, r20
     ee2:	5c 93       	st	X, r21
     ee4:	17 97       	sbiw	r26, 0x07	; 7
     ee6:	08 95       	ret
     ee8:	2f 3f       	cpi	r18, 0xFF	; 255
     eea:	31 05       	cpc	r19, r1
     eec:	79 f4       	brne	.+30     	; 0xf0c <__unpack_f+0xc2>
     eee:	41 15       	cp	r20, r1
     ef0:	51 05       	cpc	r21, r1
     ef2:	61 05       	cpc	r22, r1
     ef4:	71 05       	cpc	r23, r1
     ef6:	19 f4       	brne	.+6      	; 0xefe <__unpack_f+0xb4>
     ef8:	84 e0       	ldi	r24, 0x04	; 4
     efa:	8c 93       	st	X, r24
     efc:	08 95       	ret
     efe:	64 ff       	sbrs	r22, 4
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <__unpack_f+0xbe>
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	8c 93       	st	X, r24
     f06:	12 c0       	rjmp	.+36     	; 0xf2c <__unpack_f+0xe2>
     f08:	1c 92       	st	X, r1
     f0a:	10 c0       	rjmp	.+32     	; 0xf2c <__unpack_f+0xe2>
     f0c:	2f 57       	subi	r18, 0x7F	; 127
     f0e:	30 40       	sbci	r19, 0x00	; 0
     f10:	13 96       	adiw	r26, 0x03	; 3
     f12:	3c 93       	st	X, r19
     f14:	2e 93       	st	-X, r18
     f16:	12 97       	sbiw	r26, 0x02	; 2
     f18:	83 e0       	ldi	r24, 0x03	; 3
     f1a:	8c 93       	st	X, r24
     f1c:	87 e0       	ldi	r24, 0x07	; 7
     f1e:	44 0f       	add	r20, r20
     f20:	55 1f       	adc	r21, r21
     f22:	66 1f       	adc	r22, r22
     f24:	77 1f       	adc	r23, r23
     f26:	8a 95       	dec	r24
     f28:	d1 f7       	brne	.-12     	; 0xf1e <__unpack_f+0xd4>
     f2a:	70 64       	ori	r23, 0x40	; 64
     f2c:	14 96       	adiw	r26, 0x04	; 4
     f2e:	4d 93       	st	X+, r20
     f30:	5d 93       	st	X+, r21
     f32:	6d 93       	st	X+, r22
     f34:	7c 93       	st	X, r23
     f36:	17 97       	sbiw	r26, 0x07	; 7
     f38:	08 95       	ret

00000f3a <__fpcmp_parts_f>:
     f3a:	1f 93       	push	r17
     f3c:	dc 01       	movw	r26, r24
     f3e:	fb 01       	movw	r30, r22
     f40:	9c 91       	ld	r25, X
     f42:	92 30       	cpi	r25, 0x02	; 2
     f44:	08 f4       	brcc	.+2      	; 0xf48 <__fpcmp_parts_f+0xe>
     f46:	47 c0       	rjmp	.+142    	; 0xfd6 <__fpcmp_parts_f+0x9c>
     f48:	80 81       	ld	r24, Z
     f4a:	82 30       	cpi	r24, 0x02	; 2
     f4c:	08 f4       	brcc	.+2      	; 0xf50 <__fpcmp_parts_f+0x16>
     f4e:	43 c0       	rjmp	.+134    	; 0xfd6 <__fpcmp_parts_f+0x9c>
     f50:	94 30       	cpi	r25, 0x04	; 4
     f52:	51 f4       	brne	.+20     	; 0xf68 <__fpcmp_parts_f+0x2e>
     f54:	11 96       	adiw	r26, 0x01	; 1
     f56:	1c 91       	ld	r17, X
     f58:	84 30       	cpi	r24, 0x04	; 4
     f5a:	99 f5       	brne	.+102    	; 0xfc2 <__fpcmp_parts_f+0x88>
     f5c:	81 81       	ldd	r24, Z+1	; 0x01
     f5e:	68 2f       	mov	r22, r24
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	61 1b       	sub	r22, r17
     f64:	71 09       	sbc	r23, r1
     f66:	3f c0       	rjmp	.+126    	; 0xfe6 <__fpcmp_parts_f+0xac>
     f68:	84 30       	cpi	r24, 0x04	; 4
     f6a:	21 f0       	breq	.+8      	; 0xf74 <__fpcmp_parts_f+0x3a>
     f6c:	92 30       	cpi	r25, 0x02	; 2
     f6e:	31 f4       	brne	.+12     	; 0xf7c <__fpcmp_parts_f+0x42>
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	b9 f1       	breq	.+110    	; 0xfe2 <__fpcmp_parts_f+0xa8>
     f74:	81 81       	ldd	r24, Z+1	; 0x01
     f76:	88 23       	and	r24, r24
     f78:	89 f1       	breq	.+98     	; 0xfdc <__fpcmp_parts_f+0xa2>
     f7a:	2d c0       	rjmp	.+90     	; 0xfd6 <__fpcmp_parts_f+0x9c>
     f7c:	11 96       	adiw	r26, 0x01	; 1
     f7e:	1c 91       	ld	r17, X
     f80:	11 97       	sbiw	r26, 0x01	; 1
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	f1 f0       	breq	.+60     	; 0xfc2 <__fpcmp_parts_f+0x88>
     f86:	81 81       	ldd	r24, Z+1	; 0x01
     f88:	18 17       	cp	r17, r24
     f8a:	d9 f4       	brne	.+54     	; 0xfc2 <__fpcmp_parts_f+0x88>
     f8c:	12 96       	adiw	r26, 0x02	; 2
     f8e:	2d 91       	ld	r18, X+
     f90:	3c 91       	ld	r19, X
     f92:	13 97       	sbiw	r26, 0x03	; 3
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	82 17       	cp	r24, r18
     f9a:	93 07       	cpc	r25, r19
     f9c:	94 f0       	brlt	.+36     	; 0xfc2 <__fpcmp_parts_f+0x88>
     f9e:	28 17       	cp	r18, r24
     fa0:	39 07       	cpc	r19, r25
     fa2:	bc f0       	brlt	.+46     	; 0xfd2 <__fpcmp_parts_f+0x98>
     fa4:	14 96       	adiw	r26, 0x04	; 4
     fa6:	8d 91       	ld	r24, X+
     fa8:	9d 91       	ld	r25, X+
     faa:	0d 90       	ld	r0, X+
     fac:	bc 91       	ld	r27, X
     fae:	a0 2d       	mov	r26, r0
     fb0:	24 81       	ldd	r18, Z+4	; 0x04
     fb2:	35 81       	ldd	r19, Z+5	; 0x05
     fb4:	46 81       	ldd	r20, Z+6	; 0x06
     fb6:	57 81       	ldd	r21, Z+7	; 0x07
     fb8:	28 17       	cp	r18, r24
     fba:	39 07       	cpc	r19, r25
     fbc:	4a 07       	cpc	r20, r26
     fbe:	5b 07       	cpc	r21, r27
     fc0:	18 f4       	brcc	.+6      	; 0xfc8 <__fpcmp_parts_f+0x8e>
     fc2:	11 23       	and	r17, r17
     fc4:	41 f0       	breq	.+16     	; 0xfd6 <__fpcmp_parts_f+0x9c>
     fc6:	0a c0       	rjmp	.+20     	; 0xfdc <__fpcmp_parts_f+0xa2>
     fc8:	82 17       	cp	r24, r18
     fca:	93 07       	cpc	r25, r19
     fcc:	a4 07       	cpc	r26, r20
     fce:	b5 07       	cpc	r27, r21
     fd0:	40 f4       	brcc	.+16     	; 0xfe2 <__fpcmp_parts_f+0xa8>
     fd2:	11 23       	and	r17, r17
     fd4:	19 f0       	breq	.+6      	; 0xfdc <__fpcmp_parts_f+0xa2>
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <__fpcmp_parts_f+0xac>
     fdc:	6f ef       	ldi	r22, 0xFF	; 255
     fde:	7f ef       	ldi	r23, 0xFF	; 255
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <__fpcmp_parts_f+0xac>
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	cb 01       	movw	r24, r22
     fe8:	1f 91       	pop	r17
     fea:	08 95       	ret

00000fec <USART_enu_Initialization>:
void (*pfun_ISR)(void*) = NULL;
void* pvid_ParamtersOfISrs = NULL; 

//APIs' implementation
extern ErrorState_t USART_enu_Initialization(void)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <USART_enu_Initialization+0x6>
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	8b 83       	std	Y+3, r24	; 0x03
    //****************************************************************************************
    //                                   Initialize Baud Rate                                              
    //****************************************************************************************

    //Wriing to UBBRH
    UBBRH &= ~(1 << UBBRH_URSEL);
     ffc:	a0 e4       	ldi	r26, 0x40	; 64
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e0 e4       	ldi	r30, 0x40	; 64
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8f 77       	andi	r24, 0x7F	; 127
    1008:	8c 93       	st	X, r24

    u16 Local_u16_ValueOfUBRR;

    #if  USART_MODE == USART_NORMAL_ASYNCHRONOUS_MODE    
        
        Local_u16_ValueOfUBRR = USART_BAUD_RATE_MACRO(16);
    100a:	87 e6       	ldi	r24, 0x67	; 103
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	89 83       	std	Y+1, r24	; 0x01

        //Placing Most Signficant 4 bits in UBBRH 3:0
        UBBRH |= (u8)(Local_u16_ValueOfUBRR >> 8);
    1012:	a0 e4       	ldi	r26, 0x40	; 64
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e0 e4       	ldi	r30, 0x40	; 64
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	20 81       	ld	r18, Z
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	9a 81       	ldd	r25, Y+2	; 0x02
    1020:	89 2f       	mov	r24, r25
    1022:	99 27       	eor	r25, r25
    1024:	82 2b       	or	r24, r18
    1026:	8c 93       	st	X, r24
        //Placing the least significant 8 bits in UBBRL
        UBBRL = (u8)(Local_u16_ValueOfUBRR); 
    1028:	e9 e2       	ldi	r30, 0x29	; 41
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	80 83       	st	Z, r24
        UCSRB &= ~( 1 << UCSRB_TXEN );

    #elif USART_COMMUNICATION_MODE == USART_ENABLE_TX_ONLY

        //Turning off RX
        UCSRB &= ~( 1 << UCSRB_RXEN );
    1030:	aa e2       	ldi	r26, 0x2A	; 42
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ea e2       	ldi	r30, 0x2A	; 42
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8f 7e       	andi	r24, 0xEF	; 239
    103c:	8c 93       	st	X, r24
        //Turning on TX
        UCSRB |= ( 1 << UCSRB_TXEN );
    103e:	aa e2       	ldi	r26, 0x2A	; 42
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ea e2       	ldi	r30, 0x2A	; 42
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 60       	ori	r24, 0x08	; 8
    104a:	8c 93       	st	X, r24
    //****************************************************************************************
    //                                      Initialzing Synchronization                       
    //****************************************************************************************

    //Writing to UCSRA
    UCSRC |= (1 << UCSRC_URSEL);
    104c:	a0 e4       	ldi	r26, 0x40	; 64
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e0 e4       	ldi	r30, 0x40	; 64
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 68       	ori	r24, 0x80	; 128
    1058:	8c 93       	st	X, r24
        UCSRC |= (1 << UCSRC_UMSEL);
    
    #elif USART_MODE == USART_NORMAL_ASYNCHRONOUS_MODE

        //Choosing Asynchronous mode
        UCSRC &= ~(1 << UCSRC_UMSEL);
    105a:	a0 e4       	ldi	r26, 0x40	; 64
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e0 e4       	ldi	r30, 0x40	; 64
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8f 7b       	andi	r24, 0xBF	; 191
    1066:	8c 93       	st	X, r24
    //****************************************************************************************
                        
    //1] Character Size:  UCSRB_UCSZ2  UCSRC_UCSZ1  UCSRC_UCSZ0

    //Writing to UCSRC
    UCSRC |= (1 << UCSRC_URSEL);
    1068:	a0 e4       	ldi	r26, 0x40	; 64
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e0 e4       	ldi	r30, 0x40	; 64
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 68       	ori	r24, 0x80	; 128
    1074:	8c 93       	st	X, r24

    //Clearing UCSZ1 and UCSZ0 
    UCSRC &= ~(3 << UCSRC_UCSZ0);
    1076:	a0 e4       	ldi	r26, 0x40	; 64
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e0 e4       	ldi	r30, 0x40	; 64
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	89 7f       	andi	r24, 0xF9	; 249
    1082:	8c 93       	st	X, r24
    //Clearing UCSZ2
    UCSRB &= ~(1 << UCSRB_UCSZ2);
    1084:	aa e2       	ldi	r26, 0x2A	; 42
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ea e2       	ldi	r30, 0x2A	; 42
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8b 7f       	andi	r24, 0xFB	; 251
    1090:	8c 93       	st	X, r24
        UCSRC |= (1 << UCSRC_UCSZ1);
    
    #elif USART_CHARACTER_SIZE == USART_8_BITS
      
        //Bits contain 011
        UCSRC |= (1 << UCSRC_UCSZ0);
    1092:	a0 e4       	ldi	r26, 0x40	; 64
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e0 e4       	ldi	r30, 0x40	; 64
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	82 60       	ori	r24, 0x02	; 2
    109e:	8c 93       	st	X, r24
        UCSRC |= (1 << UCSRC_UCSZ1);
    10a0:	a0 e4       	ldi	r26, 0x40	; 64
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e0 e4       	ldi	r30, 0x40	; 64
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	84 60       	ori	r24, 0x04	; 4
    10ac:	8c 93       	st	X, r24


    //2] Stop Bits Selection:    UCSRC_USBS

    //Writing to UCSRC
    UCSRC |= (1 << UCSRC_URSEL);
    10ae:	a0 e4       	ldi	r26, 0x40	; 64
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e0 e4       	ldi	r30, 0x40	; 64
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	80 68       	ori	r24, 0x80	; 128
    10ba:	8c 93       	st	X, r24

    #if USART_NUMBER_OF_STOP_BITS == USART_1_STOP_BIT 

        //Bit contains 0
        UCSRC &= ~( 1 << UCSRC_USBS);
    10bc:	a0 e4       	ldi	r26, 0x40	; 64
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e0 e4       	ldi	r30, 0x40	; 64
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	87 7f       	andi	r24, 0xF7	; 247
    10c8:	8c 93       	st	X, r24


    //3] Parity Check Mode Selection: UCSRC_UPM1 UCSRC_UPM0

    //Writing to UCSRC
    UCSRC |= (1 << UCSRC_URSEL);
    10ca:	a0 e4       	ldi	r26, 0x40	; 64
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e0 e4       	ldi	r30, 0x40	; 64
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 68       	ori	r24, 0x80	; 128
    10d6:	8c 93       	st	X, r24

    //Bits contain 00
    UCSRC &= ~(3 << UCSRC_UPM0);
    10d8:	a0 e4       	ldi	r26, 0x40	; 64
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e0 e4       	ldi	r30, 0x40	; 64
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8f 7c       	andi	r24, 0xCF	; 207
    10e4:	8c 93       	st	X, r24
    //****************************************************************************************
    //                                      Initialzing Interrupts                       
    //****************************************************************************************

    //Clearing 3 bits  RXCIE TXCIE UDRIE
    UCSRB &= ~(7 << UCSRB_UDRIE); 
    10e6:	aa e2       	ldi	r26, 0x2A	; 42
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ea e2       	ldi	r30, 0x2A	; 42
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	8f 71       	andi	r24, 0x1F	; 31
    10f2:	8c 93       	st	X, r24





    return Local_u8_ErrorFlag;
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <USART_enu_SendData>:

extern ErrorState_t USART_enu_SendData(u16 Copy_u16_Data)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <USART_enu_SendData+0x6>
    1108:	0f 92       	push	r0
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	9b 83       	std	Y+3, r25	; 0x03
    1110:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	89 83       	std	Y+1, r24	; 0x01

    //Seeing if Transmitter Buffer is ready to take a new value
    if((UCSRA >> UCSRA_UDRE) & 1)
    1116:	eb e2       	ldi	r30, 0x2B	; 43
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	82 95       	swap	r24
    111e:	86 95       	lsr	r24
    1120:	87 70       	andi	r24, 0x07	; 7
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	81 70       	andi	r24, 0x01	; 1
    1128:	90 70       	andi	r25, 0x00	; 0
    112a:	88 23       	and	r24, r24
    112c:	31 f0       	breq	.+12     	; 0x113a <USART_enu_SendData+0x38>
            //Placing 9nth-bit in TXB8
            UCSRB |= (Local_u8_ErrorFlag << UCSRB_TXB8);

        #endif
        
        UDR = (u8)(Copy_u16_Data);
    112e:	ec e2       	ldi	r30, 0x2C	; 44
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    1136:	19 82       	std	Y+1, r1	; 0x01
    1138:	02 c0       	rjmp	.+4      	; 0x113e <USART_enu_SendData+0x3c>
    }
    else
    {
        Local_u8_ErrorFlag = ES_WAIT;
    113a:	84 e0       	ldi	r24, 0x04	; 4
    113c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <USART_enu_ReceiveData>:

extern ErrorState_t USART_enu_ReceiveData(u16* Copy_pu16_Data)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <USART_enu_ReceiveData+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <USART_enu_ReceiveData+0x8>
    1154:	0f 92       	push	r0
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	9d 83       	std	Y+5, r25	; 0x05
    115c:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	8b 83       	std	Y+3, r24	; 0x03

    u16 Local_u16_TempData = 0x00;
    1162:	1a 82       	std	Y+2, r1	; 0x02
    1164:	19 82       	std	Y+1, r1	; 0x01

    //Seeing if Receiver Buffer has a new value
    if((UCSRA >> UCSRA_RXC) & 1)
    1166:	eb e2       	ldi	r30, 0x2B	; 43
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	88 23       	and	r24, r24
    116e:	4c f4       	brge	.+18     	; 0x1182 <USART_enu_ReceiveData+0x36>
            Local_u16_TempData |= (Local_u8_DataBit8 >> 8); 

        #endif

        //Placing rest of data in Local temp
        Local_u16_TempData = UDR;
    1170:	ec e2       	ldi	r30, 0x2C	; 44
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01
        
        Local_u8_ErrorFlag = ES_OK;
    117e:	1b 82       	std	Y+3, r1	; 0x03
    1180:	06 c0       	rjmp	.+12     	; 0x118e <USART_enu_ReceiveData+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_WAIT;
    1182:	84 e0       	ldi	r24, 0x04	; 4
    1184:	8b 83       	std	Y+3, r24	; 0x03

        Local_u16_TempData = USART_NOT_DATA_RECEIVED;
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
    }

    
    *Copy_pu16_Data = Local_u16_TempData;
    118e:	ec 81       	ldd	r30, Y+4	; 0x04
    1190:	fd 81       	ldd	r31, Y+5	; 0x05
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	91 83       	std	Z+1, r25	; 0x01
    1198:	80 83       	st	Z, r24

    return Local_u8_ErrorFlag;
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <USART_enu_SendString>:

extern ErrorState_t USART_enu_SendString (u8* Copy_pu8_String)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <USART_enu_SendString+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <USART_enu_SendString+0x8>
    11b4:	0f 92       	push	r0
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	9d 83       	std	Y+5, r25	; 0x05
    11bc:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	8b 83       	std	Y+3, r24	; 0x03

    if(Copy_pu8_String)
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	b9 f0       	breq	.+46     	; 0x11f8 <USART_enu_SendString+0x4c>
    {
        u8* Local_pu8_SendingPoninter = Copy_pu8_String;
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	9d 81       	ldd	r25, Y+5	; 0x05
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	0c c0       	rjmp	.+24     	; 0x11ec <USART_enu_SendString+0x40>

        while(*Local_pu8_SendingPoninter)
        {
            USART_enu_SendData(*Local_pu8_SendingPoninter);
    11d4:	e9 81       	ldd	r30, Y+1	; 0x01
    11d6:	fa 81       	ldd	r31, Y+2	; 0x02
    11d8:	80 81       	ld	r24, Z
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 81 08 	call	0x1102	; 0x1102 <USART_enu_SendData>

            Local_pu8_SendingPoninter++;
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_String)
    {
        u8* Local_pu8_SendingPoninter = Copy_pu8_String;

        while(*Local_pu8_SendingPoninter)
    11ec:	e9 81       	ldd	r30, Y+1	; 0x01
    11ee:	fa 81       	ldd	r31, Y+2	; 0x02
    11f0:	80 81       	ld	r24, Z
    11f2:	88 23       	and	r24, r24
    11f4:	79 f7       	brne	.-34     	; 0x11d4 <USART_enu_SendString+0x28>
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <USART_enu_SendString+0x50>
            Local_pu8_SendingPoninter++;
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local_u8_ErrorFlag;
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03

}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <USART_enu_SetCallBack>:

extern ErrorState_t USART_enu_SetCallBack (void (*Copy_pfun_AppFun)(void*), void* Copy_pvid_Paramters)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	00 d0       	rcall	.+0      	; 0x1214 <USART_enu_SetCallBack+0x6>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <USART_enu_SetCallBack+0x8>
    1216:	0f 92       	push	r0
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	8a 83       	std	Y+2, r24	; 0x02
    1220:	7d 83       	std	Y+5, r23	; 0x05
    1222:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFun)
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	9b 81       	ldd	r25, Y+3	; 0x03
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	71 f0       	breq	.+28     	; 0x124c <USART_enu_SetCallBack+0x3e>
    {
        pfun_ISR = Copy_pfun_AppFun;
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	9b 81       	ldd	r25, Y+3	; 0x03
    1234:	90 93 b7 01 	sts	0x01B7, r25
    1238:	80 93 b6 01 	sts	0x01B6, r24

        pvid_ParamtersOfISrs = Copy_pvid_Paramters;
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	90 93 b9 01 	sts	0x01B9, r25
    1244:	80 93 b8 01 	sts	0x01B8, r24

        Local_u8_ErrorFlag = ES_OK;
    1248:	19 82       	std	Y+1, r1	; 0x01
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <USART_enu_SetCallBack+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    124c:	83 e0       	ldi	r24, 0x03	; 3
    124e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1250:	89 81       	ldd	r24, Y+1	; 0x01
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <Timer1_enu_Initialization>:
static void (*LOC_apfun_IntServiceRoutinesFunctions[TIMER1_ISR_COUNT])(void* ) = {NULL};
static void (*LOC_apvid_IntServiceRoutinesParameters[TIMER1_ISR_COUNT])(void* ) = {NULL};


extern ErrorState_t Timer1_enu_Initialization(void)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	89 83       	std	Y+1, r24	; 0x01

    //Waveform Generation Mode and Interrupt Mode Selection
    #if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_NORMAL

        //Clearing WGM11:0
        TCCR1A &= 0xFC;
    1270:	af e4       	ldi	r26, 0x4F	; 79
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ef e4       	ldi	r30, 0x4F	; 79
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	8c 7f       	andi	r24, 0xFC	; 252
    127c:	8c 93       	st	X, r24
        //Clearing WGM13:2
        TCCR1B &= 0xE7;
    127e:	ae e4       	ldi	r26, 0x4E	; 78
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ee e4       	ldi	r30, 0x4E	; 78
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	87 7e       	andi	r24, 0xE7	; 231
    128a:	8c 93       	st	X, r24
            TIMSK |= ( 1 << TIMSK_TOIE1);

        #elif TIMER1_INTERRUPT_MODE  == TIMER1_ACTIVATE_POLLING_MODE

            //Clearing TOIE1 bit 
            TIMSK &= ~( 1 << TIMSK_TOIE1);
    128c:	a9 e5       	ldi	r26, 0x59	; 89
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e9 e5       	ldi	r30, 0x59	; 89
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	8b 7f       	andi	r24, 0xFB	; 251
    1298:	8c 93       	st	X, r24

    //Input Capture Mode Edge Selection
    #if TIMER1_INPUT_CAPTURE_MODE == TIMER1_ICU_FALLING_EDGE
        
        //Clearing  ICES1 bit
        TCCR1B &= ~(1 << TCCR1B_ICES1);
    129a:	ae e4       	ldi	r26, 0x4E	; 78
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ee e4       	ldi	r30, 0x4E	; 78
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	8f 7b       	andi	r24, 0xBF	; 191
    12a6:	8c 93       	st	X, r24

    //Input Capture Mode Interrupt 
    #if TIMER1_INPUT_CAPTURE_INTERRUPT_MODE == TIMER1_DEACTIVATE_ICU_INTERRUPT 

        //Settting TICIE1 bit    
        TIMSK &= ~(1 << TIMSK_TICIE1);
    12a8:	a9 e5       	ldi	r26, 0x59	; 89
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e9 e5       	ldi	r30, 0x59	; 89
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8f 7d       	andi	r24, 0xDF	; 223
    12b4:	8c 93       	st	X, r24
    #endif

    //Noise Canceler Configuration
    #if TIMER1_NOISE_CANCELER_MODE == TIMER1_ACTIVATE_NC
        
        TCCR1B |= (1 << TCCR1B_ICNC1);
    12b6:	ae e4       	ldi	r26, 0x4E	; 78
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	ee e4       	ldi	r30, 0x4E	; 78
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 68       	ori	r24, 0x80	; 128
    12c2:	8c 93       	st	X, r24
        #error TIMER1_NOISE_CANCELER_MODE is invalid
    #endif


    //Clock Selection
    TCCR1B &= 0xF8; //Clearing CS12:0 bits
    12c4:	ae e4       	ldi	r26, 0x4E	; 78
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	ee e4       	ldi	r30, 0x4E	; 78
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	88 7f       	andi	r24, 0xF8	; 248
    12d0:	8c 93       	st	X, r24
        TCCR1B |= (1 << TCCR1B_CS11);
    
    #elif TIMER1_CLOCK_SELECTION ==  TIMER1_PS_64

        //Bits contain 0 1 1
        TCCR1B |= (1 << TCCR1B_CS10);
    12d2:	ae e4       	ldi	r26, 0x4E	; 78
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	ee e4       	ldi	r30, 0x4E	; 78
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	81 60       	ori	r24, 0x01	; 1
    12de:	8c 93       	st	X, r24
        TCCR1B |= (1 << TCCR1B_CS11);
    12e0:	ae e4       	ldi	r26, 0x4E	; 78
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	ee e4       	ldi	r30, 0x4E	; 78
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	82 60       	ori	r24, 0x02	; 2
    12ec:	8c 93       	st	X, r24
        
        #error TIMER1_CLOCK_SELECTION is in valid

    #endif

    return Local_u8_ErrorFlag;
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <Timer1_enu_GetICR1>:

extern ErrorState_t Timer1_enu_GetICR1(u16* Copy_u16_ContentOfICR1)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <Timer1_enu_GetICR1+0x6>
    12fe:	0f 92       	push	r0
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	9b 83       	std	Y+3, r25	; 0x03
    1306:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u16_ContentOfICR1)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	d9 f0       	breq	.+54     	; 0x134a <Timer1_enu_GetICR1+0x52>
    {
        //Reading Low Byte
        *Copy_u16_ContentOfICR1= ICR1L;
    1314:	e6 e4       	ldi	r30, 0x46	; 70
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	ea 81       	ldd	r30, Y+2	; 0x02
    1320:	fb 81       	ldd	r31, Y+3	; 0x03
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	80 83       	st	Z, r24

        //Reading High Byte
        *Copy_u16_ContentOfICR1 |= (u16)ICR1H << 8;
    1326:	ea 81       	ldd	r30, Y+2	; 0x02
    1328:	fb 81       	ldd	r31, Y+3	; 0x03
    132a:	20 81       	ld	r18, Z
    132c:	31 81       	ldd	r19, Z+1	; 0x01
    132e:	e7 e4       	ldi	r30, 0x47	; 71
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	98 2f       	mov	r25, r24
    133a:	88 27       	eor	r24, r24
    133c:	82 2b       	or	r24, r18
    133e:	93 2b       	or	r25, r19
    1340:	ea 81       	ldd	r30, Y+2	; 0x02
    1342:	fb 81       	ldd	r31, Y+3	; 0x03
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
    1348:	02 c0       	rjmp	.+4      	; 0x134e <Timer1_enu_GetICR1+0x56>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    134a:	83 e0       	ldi	r24, 0x03	; 3
    134c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag; 
    134e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <Timer1_enu_SetTCNT1>:

extern ErrorState_t Timer1_enu_SetTCNT1(u16 Copy_u16_WrittenValue)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <Timer1_enu_SetTCNT1+0x6>
    1362:	0f 92       	push	r0
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	9b 83       	std	Y+3, r25	; 0x03
    136a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	89 83       	std	Y+1, r24	; 0x01
    
    //Wriiting High Byte
    TCNT1H = Copy_u16_WrittenValue >> 8;
    1370:	ed e4       	ldi	r30, 0x4D	; 77
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	89 2f       	mov	r24, r25
    137a:	99 27       	eor	r25, r25
    137c:	80 83       	st	Z, r24

    //Writing Low Byte
    TCNT1L = Copy_u16_WrittenValue;
    137e:	ec e4       	ldi	r30, 0x4C	; 76
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
    
    return Local_u8_ErrorFlag;
    1386:	89 81       	ldd	r24, Y+1	; 0x01
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <Timer1_enu_GetTCNT1>:

extern ErrorState_t Timer1_enu_GetTCNT1(u16* Copy_u16_ContentOfTCNT1)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <Timer1_enu_GetTCNT1+0x6>
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	9b 83       	std	Y+3, r25	; 0x03
    13a2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u16_ContentOfTCNT1)
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	9b 81       	ldd	r25, Y+3	; 0x03
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	d9 f0       	breq	.+54     	; 0x13e6 <Timer1_enu_GetTCNT1+0x52>
    {
        //Reading Low Byte
        *Copy_u16_ContentOfTCNT1 = TCNT1L;
    13b0:	ec e4       	ldi	r30, 0x4C	; 76
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	ea 81       	ldd	r30, Y+2	; 0x02
    13bc:	fb 81       	ldd	r31, Y+3	; 0x03
    13be:	91 83       	std	Z+1, r25	; 0x01
    13c0:	80 83       	st	Z, r24

        //Reading High Byte
        *Copy_u16_ContentOfTCNT1 |= (u16)TCNT1H << 8;
    13c2:	ea 81       	ldd	r30, Y+2	; 0x02
    13c4:	fb 81       	ldd	r31, Y+3	; 0x03
    13c6:	20 81       	ld	r18, Z
    13c8:	31 81       	ldd	r19, Z+1	; 0x01
    13ca:	ed e4       	ldi	r30, 0x4D	; 77
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	98 2f       	mov	r25, r24
    13d6:	88 27       	eor	r24, r24
    13d8:	82 2b       	or	r24, r18
    13da:	93 2b       	or	r25, r19
    13dc:	ea 81       	ldd	r30, Y+2	; 0x02
    13de:	fb 81       	ldd	r31, Y+3	; 0x03
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <Timer1_enu_GetTCNT1+0x56>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    13e6:	83 e0       	ldi	r24, 0x03	; 3
    13e8:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <Timer1_enu_SetCallBackFunction>:

extern ErrorState_t Timer1_enu_SetCallBackFunction(u8 Copy_u8_InterruptType, void (*Copy_pfun_AppFunction)(void*), void* Copy_pvid_Prameters)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <Timer1_enu_SetCallBackFunction+0x6>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <Timer1_enu_SetCallBackFunction+0x8>
    1400:	00 d0       	rcall	.+0      	; 0x1402 <Timer1_enu_SetCallBackFunction+0xa>
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	8a 83       	std	Y+2, r24	; 0x02
    1408:	7c 83       	std	Y+4, r23	; 0x04
    140a:	6b 83       	std	Y+3, r22	; 0x03
    140c:	5e 83       	std	Y+6, r21	; 0x06
    140e:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorFLag = Local_u8_ErrorFLag;

    if(Copy_pfun_AppFunction)
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	c9 f0       	breq	.+50     	; 0x144a <Timer1_enu_SetCallBackFunction+0x52>
    {
        LOC_apfun_IntServiceRoutinesFunctions[Copy_u8_InterruptType] = Copy_pfun_AppFunction;
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	fc 01       	movw	r30, r24
    1424:	e6 54       	subi	r30, 0x46	; 70
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	80 83       	st	Z, r24

        LOC_apvid_IntServiceRoutinesParameters[Copy_u8_InterruptType] = Copy_pvid_Prameters;
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	2d 81       	ldd	r18, Y+5	; 0x05
    1438:	3e 81       	ldd	r19, Y+6	; 0x06
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	fc 01       	movw	r30, r24
    1440:	ee 53       	subi	r30, 0x3E	; 62
    1442:	fe 4f       	sbci	r31, 0xFE	; 254
    1444:	31 83       	std	Z+1, r19	; 0x01
    1446:	20 83       	st	Z, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <Timer1_enu_SetCallBackFunction+0x56>
    }
    else
    {
        Local_u8_ErrorFLag = ES_NULL_POINTER;
    144a:	83 e0       	ldi	r24, 0x03	; 3
    144c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFLag;
    144e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1450:	26 96       	adiw	r28, 0x06	; 6
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <Timer1_enu_DisableInterrupt>:

extern ErrorState_t Timer1_enu_DisableInterrupt(u8 Copy_u8_InterruptType)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <Timer1_enu_DisableInterrupt+0x6>
    1468:	00 d0       	rcall	.+0      	; 0x146a <Timer1_enu_DisableInterrupt+0x8>
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_InterruptType)
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3c 83       	std	Y+4, r19	; 0x04
    147c:	2b 83       	std	Y+3, r18	; 0x03
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	e9 f0       	breq	.+58     	; 0x14c2 <Timer1_enu_DisableInterrupt+0x60>
    1488:	2b 81       	ldd	r18, Y+3	; 0x03
    148a:	3c 81       	ldd	r19, Y+4	; 0x04
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	2c f4       	brge	.+10     	; 0x149c <Timer1_enu_DisableInterrupt+0x3a>
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	61 f0       	breq	.+24     	; 0x14b2 <Timer1_enu_DisableInterrupt+0x50>
    149a:	2b c0       	rjmp	.+86     	; 0x14f2 <Timer1_enu_DisableInterrupt+0x90>
    149c:	2b 81       	ldd	r18, Y+3	; 0x03
    149e:	3c 81       	ldd	r19, Y+4	; 0x04
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	b1 f0       	breq	.+44     	; 0x14d2 <Timer1_enu_DisableInterrupt+0x70>
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	c9 f0       	breq	.+50     	; 0x14e2 <Timer1_enu_DisableInterrupt+0x80>
    14b0:	20 c0       	rjmp	.+64     	; 0x14f2 <Timer1_enu_DisableInterrupt+0x90>
    {
        case TIMER1_CAPTURE_EVENT_ISR:
        {
            TIMSK &= ~(1<< TIMSK_TICIE1);
    14b2:	a9 e5       	ldi	r26, 0x59	; 89
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e9 e5       	ldi	r30, 0x59	; 89
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 7d       	andi	r24, 0xDF	; 223
    14be:	8c 93       	st	X, r24
    14c0:	1a c0       	rjmp	.+52     	; 0x14f6 <Timer1_enu_DisableInterrupt+0x94>

            break;
        } 
        case TIMER1_CTC_A_ISR:
        {
            TIMSK &= ~(1<< TIMSK_OCIE1A);
    14c2:	a9 e5       	ldi	r26, 0x59	; 89
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e9 e5       	ldi	r30, 0x59	; 89
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8f 7e       	andi	r24, 0xEF	; 239
    14ce:	8c 93       	st	X, r24
    14d0:	12 c0       	rjmp	.+36     	; 0x14f6 <Timer1_enu_DisableInterrupt+0x94>

            break;
        } 
        case TIMER1_CTC_B_ISR:
        {
            TIMSK &= ~(1<< TIMSK_OCIE1A);
    14d2:	a9 e5       	ldi	r26, 0x59	; 89
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e9 e5       	ldi	r30, 0x59	; 89
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8f 7e       	andi	r24, 0xEF	; 239
    14de:	8c 93       	st	X, r24
    14e0:	0a c0       	rjmp	.+20     	; 0x14f6 <Timer1_enu_DisableInterrupt+0x94>
            break;
        } 

        case TIMER1_OVERFLOW_ISR:
        {
            TIMSK &= ~(1<< TIMSK_TOIE1);
    14e2:	a9 e5       	ldi	r26, 0x59	; 89
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e9 e5       	ldi	r30, 0x59	; 89
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	8b 7f       	andi	r24, 0xFB	; 251
    14ee:	8c 93       	st	X, r24
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <Timer1_enu_DisableInterrupt+0x94>
            break;
        } 
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }
    return Local_u8_ErrorFlag;
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <Timer1_enu_EnableInterrupt>:

extern ErrorState_t Timer1_enu_EnableInterrupt(u8 Copy_u8_InterruptType)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <Timer1_enu_EnableInterrupt+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <Timer1_enu_EnableInterrupt+0x8>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_InterruptType)
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	3c 83       	std	Y+4, r19	; 0x04
    1520:	2b 83       	std	Y+3, r18	; 0x03
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	91 05       	cpc	r25, r1
    152a:	f1 f0       	breq	.+60     	; 0x1568 <Timer1_enu_EnableInterrupt+0x62>
    152c:	2b 81       	ldd	r18, Y+3	; 0x03
    152e:	3c 81       	ldd	r19, Y+4	; 0x04
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	2c f4       	brge	.+10     	; 0x1540 <Timer1_enu_EnableInterrupt+0x3a>
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	61 f0       	breq	.+24     	; 0x1556 <Timer1_enu_EnableInterrupt+0x50>
    153e:	2e c0       	rjmp	.+92     	; 0x159c <Timer1_enu_EnableInterrupt+0x96>
    1540:	2b 81       	ldd	r18, Y+3	; 0x03
    1542:	3c 81       	ldd	r19, Y+4	; 0x04
    1544:	22 30       	cpi	r18, 0x02	; 2
    1546:	31 05       	cpc	r19, r1
    1548:	b9 f0       	breq	.+46     	; 0x1578 <Timer1_enu_EnableInterrupt+0x72>
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	91 05       	cpc	r25, r1
    1552:	d9 f0       	breq	.+54     	; 0x158a <Timer1_enu_EnableInterrupt+0x84>
    1554:	23 c0       	rjmp	.+70     	; 0x159c <Timer1_enu_EnableInterrupt+0x96>
    {
        case TIMER1_CAPTURE_EVENT_ISR:
        {
            TIMSK |= (1<< TIMSK_TICIE1);
    1556:	a9 e5       	ldi	r26, 0x59	; 89
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e9 e5       	ldi	r30, 0x59	; 89
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	80 62       	ori	r24, 0x20	; 32
    1562:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1564:	19 82       	std	Y+1, r1	; 0x01
    1566:	1c c0       	rjmp	.+56     	; 0x15a0 <Timer1_enu_EnableInterrupt+0x9a>

            break;
        } 
        case TIMER1_CTC_A_ISR:
        {
            TIMSK |= (1<< TIMSK_OCIE1A);
    1568:	a9 e5       	ldi	r26, 0x59	; 89
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e9 e5       	ldi	r30, 0x59	; 89
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	80 61       	ori	r24, 0x10	; 16
    1574:	8c 93       	st	X, r24
    1576:	14 c0       	rjmp	.+40     	; 0x15a0 <Timer1_enu_EnableInterrupt+0x9a>

            break;
        } 
        case TIMER1_CTC_B_ISR:
        {
            TIMSK |= (1<< TIMSK_OCIE1A);
    1578:	a9 e5       	ldi	r26, 0x59	; 89
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e9 e5       	ldi	r30, 0x59	; 89
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 61       	ori	r24, 0x10	; 16
    1584:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1586:	19 82       	std	Y+1, r1	; 0x01
    1588:	0b c0       	rjmp	.+22     	; 0x15a0 <Timer1_enu_EnableInterrupt+0x9a>
            break;
        } 

        case TIMER1_OVERFLOW_ISR:
        {
            TIMSK |= (1<< TIMSK_TOIE1);
    158a:	a9 e5       	ldi	r26, 0x59	; 89
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e9 e5       	ldi	r30, 0x59	; 89
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	84 60       	ori	r24, 0x04	; 4
    1596:	8c 93       	st	X, r24
            
            Local_u8_ErrorFlag = ES_OK;
    1598:	19 82       	std	Y+1, r1	; 0x01
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <Timer1_enu_EnableInterrupt+0x9a>
            break;
        } 
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	89 83       	std	Y+1, r24	; 0x01

            break;
        }
    }

    return Local_u8_ErrorFlag;
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <Timer1_enu_GetPS>:

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <Timer1_enu_GetPS+0x6>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <Timer1_enu_GetPS+0x8>
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <Timer1_enu_GetPS+0xa>
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	8a 83       	std	Y+2, r24	; 0x02


    
        u8 Local_u8_CS_Bits = TCCR1B & 0x07; //Acquiring the least significant 3 bits CS2:0\
    15c6:	ee e4       	ldi	r30, 0x4E	; 78
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	87 70       	andi	r24, 0x07	; 7
    15ce:	89 83       	std	Y+1, r24	; 0x01

        switch (Local_u8_CS_Bits)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	3e 83       	std	Y+6, r19	; 0x06
    15d8:	2d 83       	std	Y+5, r18	; 0x05
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	91 05       	cpc	r25, r1
    15e2:	59 f1       	breq	.+86     	; 0x163a <Timer1_enu_GetPS+0x8a>
    15e4:	2d 81       	ldd	r18, Y+5	; 0x05
    15e6:	3e 81       	ldd	r19, Y+6	; 0x06
    15e8:	23 30       	cpi	r18, 0x03	; 3
    15ea:	31 05       	cpc	r19, r1
    15ec:	54 f4       	brge	.+20     	; 0x1602 <Timer1_enu_GetPS+0x52>
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	b1 f0       	breq	.+44     	; 0x1622 <Timer1_enu_GetPS+0x72>
    15f6:	2d 81       	ldd	r18, Y+5	; 0x05
    15f8:	3e 81       	ldd	r19, Y+6	; 0x06
    15fa:	21 30       	cpi	r18, 0x01	; 1
    15fc:	31 05       	cpc	r19, r1
    15fe:	b1 f0       	breq	.+44     	; 0x162c <Timer1_enu_GetPS+0x7c>
    1600:	38 c0       	rjmp	.+112    	; 0x1672 <Timer1_enu_GetPS+0xc2>
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	84 30       	cpi	r24, 0x04	; 4
    1608:	91 05       	cpc	r25, r1
    160a:	29 f1       	breq	.+74     	; 0x1656 <Timer1_enu_GetPS+0xa6>
    160c:	2d 81       	ldd	r18, Y+5	; 0x05
    160e:	3e 81       	ldd	r19, Y+6	; 0x06
    1610:	24 30       	cpi	r18, 0x04	; 4
    1612:	31 05       	cpc	r19, r1
    1614:	cc f0       	brlt	.+50     	; 0x1648 <Timer1_enu_GetPS+0x98>
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	85 30       	cpi	r24, 0x05	; 5
    161c:	91 05       	cpc	r25, r1
    161e:	11 f1       	breq	.+68     	; 0x1664 <Timer1_enu_GetPS+0xb4>
    1620:	28 c0       	rjmp	.+80     	; 0x1672 <Timer1_enu_GetPS+0xc2>
        {
            
            case 0:
            {
                *Copy_pu16_PS = 0;
    1622:	eb 81       	ldd	r30, Y+3	; 0x03
    1624:	fc 81       	ldd	r31, Y+4	; 0x04
    1626:	11 82       	std	Z+1, r1	; 0x01
    1628:	10 82       	st	Z, r1
    162a:	25 c0       	rjmp	.+74     	; 0x1676 <Timer1_enu_GetPS+0xc6>
                    break;
            }

            case 1:
            {
                *Copy_pu16_PS = 1;
    162c:	eb 81       	ldd	r30, Y+3	; 0x03
    162e:	fc 81       	ldd	r31, Y+4	; 0x04
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
    1638:	1e c0       	rjmp	.+60     	; 0x1676 <Timer1_enu_GetPS+0xc6>
                break;
            }

            case 2:
            {
                *Copy_pu16_PS = 8;
    163a:	eb 81       	ldd	r30, Y+3	; 0x03
    163c:	fc 81       	ldd	r31, Y+4	; 0x04
    163e:	88 e0       	ldi	r24, 0x08	; 8
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
    1646:	17 c0       	rjmp	.+46     	; 0x1676 <Timer1_enu_GetPS+0xc6>
                break;
            }

            case 3:
            {
                *Copy_pu16_PS = 64;
    1648:	eb 81       	ldd	r30, Y+3	; 0x03
    164a:	fc 81       	ldd	r31, Y+4	; 0x04
    164c:	80 e4       	ldi	r24, 0x40	; 64
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	10 c0       	rjmp	.+32     	; 0x1676 <Timer1_enu_GetPS+0xc6>
                break;
            }

            case 4:
            {
                *Copy_pu16_PS = 256;
    1656:	eb 81       	ldd	r30, Y+3	; 0x03
    1658:	fc 81       	ldd	r31, Y+4	; 0x04
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
    1662:	09 c0       	rjmp	.+18     	; 0x1676 <Timer1_enu_GetPS+0xc6>
                break;
            }

            case 5:
            {
                *Copy_pu16_PS = 1024;
    1664:	eb 81       	ldd	r30, Y+3	; 0x03
    1666:	fc 81       	ldd	r31, Y+4	; 0x04
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	94 e0       	ldi	r25, 0x04	; 4
    166c:	91 83       	std	Z+1, r25	; 0x01
    166e:	80 83       	st	Z, r24
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <Timer1_enu_GetPS+0xc6>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1672:	82 e0       	ldi	r24, 0x02	; 2
    1674:	8a 83       	std	Y+2, r24	; 0x02
            }
              
        }


    return Local_u8_ErrorFlag;
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1678:	26 96       	adiw	r28, 0x06	; 6
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <Timer1_enu_SetInputCaptureEdge>:

extern ErrorState_t Timer1_enu_SetInputCaptureEdge(u8 Copy_u8_EdgeType)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <Timer1_enu_SetInputCaptureEdge+0x6>
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_Error_Flag = ES_NOK;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_u8_EdgeType == TIMER1_ICU_FALLING_EDGE )
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	88 23       	and	r24, r24
    169e:	41 f4       	brne	.+16     	; 0x16b0 <Timer1_enu_SetInputCaptureEdge+0x26>
    {
        TCCR1B &= ~(1 << TCCR1B_ICES1);
    16a0:	ae e4       	ldi	r26, 0x4E	; 78
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	ee e4       	ldi	r30, 0x4E	; 78
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	8f 7b       	andi	r24, 0xBF	; 191
    16ac:	8c 93       	st	X, r24
    16ae:	0d c0       	rjmp	.+26     	; 0x16ca <Timer1_enu_SetInputCaptureEdge+0x40>
    }
    else if( Copy_u8_EdgeType == TIMER1_ICU_RISING_EDGE)
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	41 f4       	brne	.+16     	; 0x16c6 <Timer1_enu_SetInputCaptureEdge+0x3c>
    {
        TCCR1B |= (1 << TCCR1B_ICES1);
    16b6:	ae e4       	ldi	r26, 0x4E	; 78
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	ee e4       	ldi	r30, 0x4E	; 78
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	80 64       	ori	r24, 0x40	; 64
    16c2:	8c 93       	st	X, r24
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <Timer1_enu_SetInputCaptureEdge+0x40>
    }
    else
    {
        Local_u8_Error_Flag = ES_OUT_OF_RANGE;
    16c6:	82 e0       	ldi	r24, 0x02	; 2
    16c8:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_Error_Flag;
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <Timer1_enu_ClearFlag>:

extern ErrorState_t Timer1_enu_ClearFlag(u8 Copy_u8_InterruptType)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <Timer1_enu_ClearFlag+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <Timer1_enu_ClearFlag+0x8>
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Lcoal_u8_ErrorFlag = ES_NOK;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_InterruptType)
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3c 83       	std	Y+4, r19	; 0x04
    16f0:	2b 83       	std	Y+3, r18	; 0x03
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	91 05       	cpc	r25, r1
    16fa:	f1 f0       	breq	.+60     	; 0x1738 <Timer1_enu_ClearFlag+0x62>
    16fc:	2b 81       	ldd	r18, Y+3	; 0x03
    16fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	2c f4       	brge	.+10     	; 0x1710 <Timer1_enu_ClearFlag+0x3a>
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	61 f0       	breq	.+24     	; 0x1726 <Timer1_enu_ClearFlag+0x50>
    170e:	2f c0       	rjmp	.+94     	; 0x176e <Timer1_enu_ClearFlag+0x98>
    1710:	2b 81       	ldd	r18, Y+3	; 0x03
    1712:	3c 81       	ldd	r19, Y+4	; 0x04
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	c1 f0       	breq	.+48     	; 0x174a <Timer1_enu_ClearFlag+0x74>
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	e1 f0       	breq	.+56     	; 0x175c <Timer1_enu_ClearFlag+0x86>
    1724:	24 c0       	rjmp	.+72     	; 0x176e <Timer1_enu_ClearFlag+0x98>
    {
        case TIMER1_CAPTURE_EVENT_ISR:
        {
            //Clearing Input Capture Flag
            TIFR |= (1 << TIFR_ICF1);
    1726:	a8 e5       	ldi	r26, 0x58	; 88
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e8 e5       	ldi	r30, 0x58	; 88
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 62       	ori	r24, 0x20	; 32
    1732:	8c 93       	st	X, r24

            Lcoal_u8_ErrorFlag = ES_OK;
    1734:	19 82       	std	Y+1, r1	; 0x01
    1736:	1d c0       	rjmp	.+58     	; 0x1772 <Timer1_enu_ClearFlag+0x9c>
        }

        case TIMER1_CTC_A_ISR:
        {
            //Clearing Output Compare Flag A
            TIFR |= (1 << TIFR_OCF1A);
    1738:	a8 e5       	ldi	r26, 0x58	; 88
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e8 e5       	ldi	r30, 0x58	; 88
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 61       	ori	r24, 0x10	; 16
    1744:	8c 93       	st	X, r24

            Lcoal_u8_ErrorFlag = ES_OK;
    1746:	19 82       	std	Y+1, r1	; 0x01
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <Timer1_enu_ClearFlag+0x9c>
        }

        case TIMER1_CTC_B_ISR:
        {
            //Clearing Output Compare Flag B
            TIFR |= (1 << TIFR_OCF1B);
    174a:	a8 e5       	ldi	r26, 0x58	; 88
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e8 e5       	ldi	r30, 0x58	; 88
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	88 60       	ori	r24, 0x08	; 8
    1756:	8c 93       	st	X, r24

            Lcoal_u8_ErrorFlag = ES_OK;
    1758:	19 82       	std	Y+1, r1	; 0x01
    175a:	0b c0       	rjmp	.+22     	; 0x1772 <Timer1_enu_ClearFlag+0x9c>
        }

        case TIMER1_OVERFLOW_ISR:
        {
            //Clearing Overflow Flag 
            TIFR |= (1 << TIFR_TOV1);
    175c:	a8 e5       	ldi	r26, 0x58	; 88
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e8 e5       	ldi	r30, 0x58	; 88
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	84 60       	ori	r24, 0x04	; 4
    1768:	8c 93       	st	X, r24

            Lcoal_u8_ErrorFlag = ES_OK;
    176a:	19 82       	std	Y+1, r1	; 0x01
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <Timer1_enu_ClearFlag+0x9c>
            break;
        }

        default:
        {
            Lcoal_u8_ErrorFlag = ES_OUT_OF_RANGE;
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }
    return Lcoal_u8_ErrorFlag;
    1772:	89 81       	ldd	r24, Y+1	; 0x01
}
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <__vector_6>:
void __vector_7 (void)__attribute__((signal));
void __vector_8 (void)__attribute__((signal));
void __vector_9 (void)__attribute__((signal));

void __vector_6 (void)
{
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	ef 93       	push	r30
    17a2:	ff 93       	push	r31
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CAPTURE_EVENT_ISR])
    17ac:	80 91 ba 01 	lds	r24, 0x01BA
    17b0:	90 91 bb 01 	lds	r25, 0x01BB
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	49 f0       	breq	.+18     	; 0x17ca <__vector_6+0x48>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CAPTURE_EVENT_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CAPTURE_EVENT_ISR]);
    17b8:	e0 91 ba 01 	lds	r30, 0x01BA
    17bc:	f0 91 bb 01 	lds	r31, 0x01BB
    17c0:	80 91 c2 01 	lds	r24, 0x01C2
    17c4:	90 91 c3 01 	lds	r25, 0x01C3
    17c8:	09 95       	icall
    }
}
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	ff 91       	pop	r31
    17d0:	ef 91       	pop	r30
    17d2:	bf 91       	pop	r27
    17d4:	af 91       	pop	r26
    17d6:	9f 91       	pop	r25
    17d8:	8f 91       	pop	r24
    17da:	7f 91       	pop	r23
    17dc:	6f 91       	pop	r22
    17de:	5f 91       	pop	r21
    17e0:	4f 91       	pop	r20
    17e2:	3f 91       	pop	r19
    17e4:	2f 91       	pop	r18
    17e6:	0f 90       	pop	r0
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	0f 90       	pop	r0
    17ec:	1f 90       	pop	r1
    17ee:	18 95       	reti

000017f0 <__vector_7>:

void __vector_7 (void)
{
    17f0:	1f 92       	push	r1
    17f2:	0f 92       	push	r0
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	0f 92       	push	r0
    17f8:	11 24       	eor	r1, r1
    17fa:	2f 93       	push	r18
    17fc:	3f 93       	push	r19
    17fe:	4f 93       	push	r20
    1800:	5f 93       	push	r21
    1802:	6f 93       	push	r22
    1804:	7f 93       	push	r23
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	af 93       	push	r26
    180c:	bf 93       	push	r27
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_A_ISR])
    181a:	80 91 bc 01 	lds	r24, 0x01BC
    181e:	90 91 bd 01 	lds	r25, 0x01BD
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	49 f0       	breq	.+18     	; 0x1838 <__vector_7+0x48>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_A_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CTC_A_ISR]);
    1826:	e0 91 bc 01 	lds	r30, 0x01BC
    182a:	f0 91 bd 01 	lds	r31, 0x01BD
    182e:	80 91 c4 01 	lds	r24, 0x01C4
    1832:	90 91 c5 01 	lds	r25, 0x01C5
    1836:	09 95       	icall
    }
}
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	7f 91       	pop	r23
    184a:	6f 91       	pop	r22
    184c:	5f 91       	pop	r21
    184e:	4f 91       	pop	r20
    1850:	3f 91       	pop	r19
    1852:	2f 91       	pop	r18
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	0f 90       	pop	r0
    185a:	1f 90       	pop	r1
    185c:	18 95       	reti

0000185e <__vector_8>:

void __vector_8 (void)
{
    185e:	1f 92       	push	r1
    1860:	0f 92       	push	r0
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	0f 92       	push	r0
    1866:	11 24       	eor	r1, r1
    1868:	2f 93       	push	r18
    186a:	3f 93       	push	r19
    186c:	4f 93       	push	r20
    186e:	5f 93       	push	r21
    1870:	6f 93       	push	r22
    1872:	7f 93       	push	r23
    1874:	8f 93       	push	r24
    1876:	9f 93       	push	r25
    1878:	af 93       	push	r26
    187a:	bf 93       	push	r27
    187c:	ef 93       	push	r30
    187e:	ff 93       	push	r31
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_B_ISR])
    1888:	80 91 be 01 	lds	r24, 0x01BE
    188c:	90 91 bf 01 	lds	r25, 0x01BF
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	49 f0       	breq	.+18     	; 0x18a6 <__vector_8+0x48>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_B_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CTC_B_ISR]);
    1894:	e0 91 be 01 	lds	r30, 0x01BE
    1898:	f0 91 bf 01 	lds	r31, 0x01BF
    189c:	80 91 c6 01 	lds	r24, 0x01C6
    18a0:	90 91 c7 01 	lds	r25, 0x01C7
    18a4:	09 95       	icall
    }
}
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	ff 91       	pop	r31
    18ac:	ef 91       	pop	r30
    18ae:	bf 91       	pop	r27
    18b0:	af 91       	pop	r26
    18b2:	9f 91       	pop	r25
    18b4:	8f 91       	pop	r24
    18b6:	7f 91       	pop	r23
    18b8:	6f 91       	pop	r22
    18ba:	5f 91       	pop	r21
    18bc:	4f 91       	pop	r20
    18be:	3f 91       	pop	r19
    18c0:	2f 91       	pop	r18
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	0f 90       	pop	r0
    18c8:	1f 90       	pop	r1
    18ca:	18 95       	reti

000018cc <__vector_9>:

void __vector_9 (void)
{
    18cc:	1f 92       	push	r1
    18ce:	0f 92       	push	r0
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	0f 92       	push	r0
    18d4:	11 24       	eor	r1, r1
    18d6:	2f 93       	push	r18
    18d8:	3f 93       	push	r19
    18da:	4f 93       	push	r20
    18dc:	5f 93       	push	r21
    18de:	6f 93       	push	r22
    18e0:	7f 93       	push	r23
    18e2:	8f 93       	push	r24
    18e4:	9f 93       	push	r25
    18e6:	af 93       	push	r26
    18e8:	bf 93       	push	r27
    18ea:	ef 93       	push	r30
    18ec:	ff 93       	push	r31
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_OVERFLOW_ISR])
    18f6:	80 91 c0 01 	lds	r24, 0x01C0
    18fa:	90 91 c1 01 	lds	r25, 0x01C1
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	49 f0       	breq	.+18     	; 0x1914 <__vector_9+0x48>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_OVERFLOW_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_OVERFLOW_ISR]);
    1902:	e0 91 c0 01 	lds	r30, 0x01C0
    1906:	f0 91 c1 01 	lds	r31, 0x01C1
    190a:	80 91 c8 01 	lds	r24, 0x01C8
    190e:	90 91 c9 01 	lds	r25, 0x01C9
    1912:	09 95       	icall
    }
}
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	ff 91       	pop	r31
    191a:	ef 91       	pop	r30
    191c:	bf 91       	pop	r27
    191e:	af 91       	pop	r26
    1920:	9f 91       	pop	r25
    1922:	8f 91       	pop	r24
    1924:	7f 91       	pop	r23
    1926:	6f 91       	pop	r22
    1928:	5f 91       	pop	r21
    192a:	4f 91       	pop	r20
    192c:	3f 91       	pop	r19
    192e:	2f 91       	pop	r18
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	0f 90       	pop	r0
    1936:	1f 90       	pop	r1
    1938:	18 95       	reti

0000193a <Timer_enu_Initialization>:
static void (* apfun_ISRpointers[TIMER_ISR_COUNT])(void*)= { NULL};
static void* apvid_ISRParameters[TIMER_ISR_COUNT] = {NULL};

//APIs implementaion
extern ErrorState_t Timer_enu_Initialization(void)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <Timer_enu_Initialization+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <Timer_enu_Initialization+0x8>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <Timer_enu_Initialization+0xa>
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
    1948:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Counter = 0;
    194a:	19 82       	std	Y+1, r1	; 0x01

    u8 Local_au8_ErrorStates [4] ={0};
    194c:	1b 82       	std	Y+3, r1	; 0x03
    194e:	1c 82       	std	Y+4, r1	; 0x04
    1950:	1d 82       	std	Y+5, r1	; 0x05
    1952:	1e 82       	std	Y+6, r1	; 0x06

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
    1954:	19 82       	std	Y+1, r1	; 0x01
    1956:	b3 c0       	rjmp	.+358    	; 0x1abe <Timer_enu_Initialization+0x184>
    {
        
      Local_au8_ErrorStates[0] = enu_SetTimerMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode);
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	c9 01       	movw	r24, r18
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	82 0f       	add	r24, r18
    196a:	93 1f       	adc	r25, r19
    196c:	fc 01       	movw	r30, r24
    196e:	e4 58       	subi	r30, 0x84	; 132
    1970:	fe 4f       	sbci	r31, 0xFE	; 254
    1972:	40 81       	ld	r20, Z
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	c9 01       	movw	r24, r18
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	82 0f       	add	r24, r18
    1986:	93 1f       	adc	r25, r19
    1988:	fc 01       	movw	r30, r24
    198a:	e3 58       	subi	r30, 0x83	; 131
    198c:	fe 4f       	sbci	r31, 0xFE	; 254
    198e:	90 81       	ld	r25, Z
    1990:	84 2f       	mov	r24, r20
    1992:	69 2f       	mov	r22, r25
    1994:	0e 94 63 12 	call	0x24c6	; 0x24c6 <enu_SetTimerMode>
    1998:	8b 83       	std	Y+3, r24	; 0x03
      Local_au8_ErrorStates[1] = enu_SetClockSelection(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].ClockSelection);
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	c9 01       	movw	r24, r18
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	82 0f       	add	r24, r18
    19ac:	93 1f       	adc	r25, r19
    19ae:	fc 01       	movw	r30, r24
    19b0:	e4 58       	subi	r30, 0x84	; 132
    19b2:	fe 4f       	sbci	r31, 0xFE	; 254
    19b4:	40 81       	ld	r20, Z
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	c9 01       	movw	r24, r18
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	82 0f       	add	r24, r18
    19c8:	93 1f       	adc	r25, r19
    19ca:	fc 01       	movw	r30, r24
    19cc:	e2 58       	subi	r30, 0x82	; 130
    19ce:	fe 4f       	sbci	r31, 0xFE	; 254
    19d0:	90 81       	ld	r25, Z
    19d2:	84 2f       	mov	r24, r20
    19d4:	69 2f       	mov	r22, r25
    19d6:	0e 94 2d 13 	call	0x265a	; 0x265a <enu_SetClockSelection>
    19da:	8c 83       	std	Y+4, r24	; 0x04
      Local_au8_ErrorStates[2] = enu_SetInterruptMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode, Timer_astr_TimerList[Local_u8_Counter].InterruptMode);
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	c9 01       	movw	r24, r18
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	82 0f       	add	r24, r18
    19ee:	93 1f       	adc	r25, r19
    19f0:	fc 01       	movw	r30, r24
    19f2:	e4 58       	subi	r30, 0x84	; 132
    19f4:	fe 4f       	sbci	r31, 0xFE	; 254
    19f6:	50 81       	ld	r21, Z
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	c9 01       	movw	r24, r18
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	82 0f       	add	r24, r18
    1a0a:	93 1f       	adc	r25, r19
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	e3 58       	subi	r30, 0x83	; 131
    1a10:	fe 4f       	sbci	r31, 0xFE	; 254
    1a12:	40 81       	ld	r20, Z
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	c9 01       	movw	r24, r18
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	88 0f       	add	r24, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	82 0f       	add	r24, r18
    1a26:	93 1f       	adc	r25, r19
    1a28:	fc 01       	movw	r30, r24
    1a2a:	e1 58       	subi	r30, 0x81	; 129
    1a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2e:	90 81       	ld	r25, Z
    1a30:	85 2f       	mov	r24, r21
    1a32:	64 2f       	mov	r22, r20
    1a34:	49 2f       	mov	r20, r25
    1a36:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <enu_SetInterruptMode>
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
      Local_au8_ErrorStates[3] = enu_SetOCxBehavior(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode ,Timer_astr_TimerList[Local_u8_Counter].OCxPinBehavior);
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	c9 01       	movw	r24, r18
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	82 0f       	add	r24, r18
    1a4e:	93 1f       	adc	r25, r19
    1a50:	fc 01       	movw	r30, r24
    1a52:	e4 58       	subi	r30, 0x84	; 132
    1a54:	fe 4f       	sbci	r31, 0xFE	; 254
    1a56:	50 81       	ld	r21, Z
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	c9 01       	movw	r24, r18
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	82 0f       	add	r24, r18
    1a6a:	93 1f       	adc	r25, r19
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	e3 58       	subi	r30, 0x83	; 131
    1a70:	fe 4f       	sbci	r31, 0xFE	; 254
    1a72:	40 81       	ld	r20, Z
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	c9 01       	movw	r24, r18
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	82 0f       	add	r24, r18
    1a86:	93 1f       	adc	r25, r19
    1a88:	fc 01       	movw	r30, r24
    1a8a:	e0 58       	subi	r30, 0x80	; 128
    1a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8e:	90 81       	ld	r25, Z
    1a90:	85 2f       	mov	r24, r21
    1a92:	64 2f       	mov	r22, r20
    1a94:	49 2f       	mov	r20, r25
    1a96:	0e 94 ef 15 	call	0x2bde	; 0x2bde <enu_SetOCxBehavior>
    1a9a:	8e 83       	std	Y+6, r24	; 0x06
    
      if((Local_au8_ErrorStates[0] == ES_NOK) || (Local_au8_ErrorStates[1] == ES_NOK) || (Local_au8_ErrorStates[2] == ES_NOK) || (Local_au8_ErrorStates[3] == ES_NOK))
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	49 f0       	breq	.+18     	; 0x1ab4 <Timer_enu_Initialization+0x17a>
    1aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	31 f0       	breq	.+12     	; 0x1ab4 <Timer_enu_Initialization+0x17a>
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <Timer_enu_Initialization+0x17a>
    1aae:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	11 f4       	brne	.+4      	; 0x1ab8 <Timer_enu_Initialization+0x17e>
      {
        Local_u8_ErrorFlag = ES_NOK;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Counter = 0;

    u8 Local_au8_ErrorStates [4] ={0};

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	90 91 7b 01 	lds	r25, 0x017B
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	89 17       	cp	r24, r25
    1ac6:	08 f4       	brcc	.+2      	; 0x1aca <Timer_enu_Initialization+0x190>
    1ac8:	47 cf       	rjmp	.-370    	; 0x1958 <Timer_enu_Initialization+0x1e>
      }
    }
    


    return Local_u8_ErrorFlag;
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1acc:	26 96       	adiw	r28, 0x06	; 6
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <Timer_enu_SetOCRxValue>:

extern ErrorState_t Timer_enu_SetOCRxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <Timer_enu_SetOCRxValue+0x6>
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <Timer_enu_SetOCRxValue+0x8>
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <Timer_enu_SetOCRxValue+0xa>
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	8a 83       	std	Y+2, r24	; 0x02
    1aee:	7c 83       	std	Y+4, r23	; 0x04
    1af0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	3e 83       	std	Y+6, r19	; 0x06
    1afe:	2d 83       	std	Y+5, r18	; 0x05
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	91 05       	cpc	r25, r1
    1b08:	b9 f0       	breq	.+46     	; 0x1b38 <Timer_enu_SetOCRxValue+0x5a>
    1b0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b0e:	22 30       	cpi	r18, 0x02	; 2
    1b10:	31 05       	cpc	r19, r1
    1b12:	51 f0       	breq	.+20     	; 0x1b28 <Timer_enu_SetOCRxValue+0x4a>
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	61 f4       	brne	.+24     	; 0x1b34 <Timer_enu_SetOCRxValue+0x56>
    {
        case TIMER_0:
        {
            OCR0 = Copy_u16_Value;
    1b1c:	ec e5       	ldi	r30, 0x5C	; 92
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    1b24:	19 82       	std	Y+1, r1	; 0x01
    1b26:	08 c0       	rjmp	.+16     	; 0x1b38 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }

        case TIMER_2:
        {
            OCR2 = Copy_u16_Value;
    1b28:	e3 e4       	ldi	r30, 0x43	; 67
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    1b30:	19 82       	std	Y+1, r1	; 0x01
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1b34:	82 e0       	ldi	r24, 0x02	; 2
    1b36:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3a:	26 96       	adiw	r28, 0x06	; 6
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <Timer_enu_SetTCNTxValue>:

extern ErrorState_t Timer_enu_SetTCNTxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <Timer_enu_SetTCNTxValue+0x6>
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <Timer_enu_SetTCNTxValue+0x8>
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <Timer_enu_SetTCNTxValue+0xa>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
    1b5c:	7c 83       	std	Y+4, r23	; 0x04
    1b5e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	3e 83       	std	Y+6, r19	; 0x06
    1b6c:	2d 83       	std	Y+5, r18	; 0x05
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	91 05       	cpc	r25, r1
    1b76:	b1 f0       	breq	.+44     	; 0x1ba4 <Timer_enu_SetTCNTxValue+0x58>
    1b78:	2d 81       	ldd	r18, Y+5	; 0x05
    1b7a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b7c:	22 30       	cpi	r18, 0x02	; 2
    1b7e:	31 05       	cpc	r19, r1
    1b80:	51 f0       	breq	.+20     	; 0x1b96 <Timer_enu_SetTCNTxValue+0x4a>
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	59 f4       	brne	.+22     	; 0x1ba0 <Timer_enu_SetTCNTxValue+0x54>
    {
        case TIMER_0:
        {
            TCNT0 = Copy_u16_Value;
    1b8a:	e2 e5       	ldi	r30, 0x52	; 82
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    1b92:	19 82       	std	Y+1, r1	; 0x01
    1b94:	07 c0       	rjmp	.+14     	; 0x1ba4 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }

        case TIMER_2:
        {
            TCNT2 = (u8)Copy_u16_Value;
    1b96:	e4 e4       	ldi	r30, 0x44	; 68
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	80 83       	st	Z, r24
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1ba0:	82 e0       	ldi	r24, 0x02	; 2
    1ba2:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba6:	26 96       	adiw	r28, 0x06	; 6
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <Timer_enu_ReadTCNTxValue>:

extern ErrorState_t Timer_enu_ReadTCNTxValue(u8 Copy_u8_TimerNumber, u16* Copy_u16_Value)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <Timer_enu_ReadTCNTxValue+0x6>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <Timer_enu_ReadTCNTxValue+0x8>
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <Timer_enu_ReadTCNTxValue+0xa>
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	8a 83       	std	Y+2, r24	; 0x02
    1bc8:	7c 83       	std	Y+4, r23	; 0x04
    1bca:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u16_Value)
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	61 f1       	breq	.+88     	; 0x1c30 <Timer_enu_ReadTCNTxValue+0x78>
    {
        switch (Copy_u8_TimerNumber)
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	3e 83       	std	Y+6, r19	; 0x06
    1be0:	2d 83       	std	Y+5, r18	; 0x05
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	91 05       	cpc	r25, r1
    1bea:	21 f1       	breq	.+72     	; 0x1c34 <Timer_enu_ReadTCNTxValue+0x7c>
    1bec:	2d 81       	ldd	r18, Y+5	; 0x05
    1bee:	3e 81       	ldd	r19, Y+6	; 0x06
    1bf0:	22 30       	cpi	r18, 0x02	; 2
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	79 f0       	breq	.+30     	; 0x1c14 <Timer_enu_ReadTCNTxValue+0x5c>
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	b1 f4       	brne	.+44     	; 0x1c2a <Timer_enu_ReadTCNTxValue+0x72>
        {
            case TIMER_0:
            {
                *Copy_u16_Value = TCNT0;
    1bfe:	e2 e5       	ldi	r30, 0x52	; 82
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	eb 81       	ldd	r30, Y+3	; 0x03
    1c0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    1c10:	19 82       	std	Y+1, r1	; 0x01
    1c12:	10 c0       	rjmp	.+32     	; 0x1c34 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }

            case TIMER_2:
            {
                *Copy_u16_Value = TCNT2;
    1c14:	e4 e4       	ldi	r30, 0x44	; 68
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	88 2f       	mov	r24, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c20:	fc 81       	ldd	r31, Y+4	; 0x04
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    1c26:	19 82       	std	Y+1, r1	; 0x01
    1c28:	05 c0       	rjmp	.+10     	; 0x1c34 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <Timer_enu_ReadTCNTxValue+0x7c>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c36:	26 96       	adiw	r28, 0x06	; 6
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <Timer_enu_SetClock>:

extern ErrorState_t Timer_enu_SetClock (u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <Timer_enu_SetClock+0x6>
    1c4e:	0f 92       	push	r0
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	8a 83       	std	Y+2, r24	; 0x02
    1c56:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetClockSelection(Copy_u8_TimerNumber, Copy_u8_ClockSelection);
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	6b 81       	ldd	r22, Y+3	; 0x03
    1c60:	0e 94 2d 13 	call	0x265a	; 0x265a <enu_SetClockSelection>
    1c64:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <Timer_enu_SetDutyCycleForPWM>:

extern ErrorState_t Timer_enu_SetDutyCycleForPWM(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_PulseType, f32 Copy_f32_DutyCyclePercentage)
{
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	2c 97       	sbiw	r28, 0x0c	; 12
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
    1c8e:	6b 83       	std	Y+3, r22	; 0x03
    1c90:	4c 83       	std	Y+4, r20	; 0x04
    1c92:	0d 83       	std	Y+5, r16	; 0x05
    1c94:	1e 83       	std	Y+6, r17	; 0x06
    1c96:	2f 83       	std	Y+7, r18	; 0x07
    1c98:	38 87       	std	Y+8, r19	; 0x08
    u8 Local_u8_ErrorFlag = ES_NOK;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_f32_DutyCyclePercentage >= TIMER_DUTYCYCLE_0) && (Copy_f32_DutyCyclePercentage <= TIMER_DUTYCYCLE_100))
    1c9e:	1c 86       	std	Y+12, r1	; 0x0c
    1ca0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ca2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ca4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca6:	98 85       	ldd	r25, Y+8	; 0x08
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e0       	ldi	r20, 0x00	; 0
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	0e 94 a4 04 	call	0x948	; 0x948 <__gesf2>
    1cb4:	88 23       	and	r24, r24
    1cb6:	14 f0       	brlt	.+4      	; 0x1cbc <Timer_enu_SetDutyCycleForPWM+0x48>
    1cb8:	21 e0       	ldi	r18, 0x01	; 1
    1cba:	2c 87       	std	Y+12, r18	; 0x0c
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cc0:	83 27       	eor	r24, r19
    1cc2:	88 23       	and	r24, r24
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <Timer_enu_SetDutyCycleForPWM+0x54>
    1cc6:	64 c1       	rjmp	.+712    	; 0x1f90 <Timer_enu_SetDutyCycleForPWM+0x31c>
    1cc8:	1b 86       	std	Y+11, r1	; 0x0b
    1cca:	6d 81       	ldd	r22, Y+5	; 0x05
    1ccc:	7e 81       	ldd	r23, Y+6	; 0x06
    1cce:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd0:	98 85       	ldd	r25, Y+8	; 0x08
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	5f e3       	ldi	r21, 0x3F	; 63
    1cda:	0e 94 04 05 	call	0xa08	; 0xa08 <__lesf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	14 f0       	brlt	.+4      	; 0x1ce6 <Timer_enu_SetDutyCycleForPWM+0x72>
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	8b 87       	std	Y+11, r24	; 0x0b
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cea:	89 27       	eor	r24, r25
    1cec:	88 23       	and	r24, r24
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <Timer_enu_SetDutyCycleForPWM+0x7e>
    1cf0:	4f c1       	rjmp	.+670    	; 0x1f90 <Timer_enu_SetDutyCycleForPWM+0x31c>
    {
        switch (Copy_u8_TimerNumber)
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	e8 2f       	mov	r30, r24
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	fa 87       	std	Y+10, r31	; 0x0a
    1cfa:	e9 87       	std	Y+9, r30	; 0x09
    1cfc:	29 85       	ldd	r18, Y+9	; 0x09
    1cfe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d00:	21 30       	cpi	r18, 0x01	; 1
    1d02:	31 05       	cpc	r19, r1
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <Timer_enu_SetDutyCycleForPWM+0x94>
    1d06:	46 c1       	rjmp	.+652    	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
    1d08:	89 85       	ldd	r24, Y+9	; 0x09
    1d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0c:	82 30       	cpi	r24, 0x02	; 2
    1d0e:	91 05       	cpc	r25, r1
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <Timer_enu_SetDutyCycleForPWM+0xa0>
    1d12:	a0 c0       	rjmp	.+320    	; 0x1e54 <Timer_enu_SetDutyCycleForPWM+0x1e0>
    1d14:	e9 85       	ldd	r30, Y+9	; 0x09
    1d16:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d18:	30 97       	sbiw	r30, 0x00	; 0
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <Timer_enu_SetDutyCycleForPWM+0xaa>
    1d1c:	36 c1       	rjmp	.+620    	; 0x1f8a <Timer_enu_SetDutyCycleForPWM+0x316>
        {
            case TIMER_0:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	82 30       	cpi	r24, 0x02	; 2
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <Timer_enu_SetDutyCycleForPWM+0xb2>
    1d24:	43 c0       	rjmp	.+134    	; 0x1dac <Timer_enu_SetDutyCycleForPWM+0x138>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    1d26:	8c 81       	ldd	r24, Y+4	; 0x04
    1d28:	86 30       	cpi	r24, 0x06	; 6
    1d2a:	c1 f4       	brne	.+48     	; 0x1d5c <Timer_enu_SetDutyCycleForPWM+0xe8>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = Copy_f32_DutyCyclePercentage*TIMER_TCNT0_TOP;
    1d2c:	0c e5       	ldi	r16, 0x5C	; 92
    1d2e:	10 e0       	ldi	r17, 0x00	; 0
    1d30:	6d 81       	ldd	r22, Y+5	; 0x05
    1d32:	7e 81       	ldd	r23, Y+6	; 0x06
    1d34:	8f 81       	ldd	r24, Y+7	; 0x07
    1d36:	98 85       	ldd	r25, Y+8	; 0x08
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	53 e4       	ldi	r21, 0x43	; 67
    1d40:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	f8 01       	movw	r30, r16
    1d56:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1d58:	19 82       	std	Y+1, r1	; 0x01
    1d5a:	1c c1       	rjmp	.+568    	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    1d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5e:	87 30       	cpi	r24, 0x07	; 7
    1d60:	11 f5       	brne	.+68     	; 0x1da6 <Timer_enu_SetDutyCycleForPWM+0x132>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP* (1 - Copy_f32_DutyCyclePercentage );
    1d62:	0c e5       	ldi	r16, 0x5C	; 92
    1d64:	10 e0       	ldi	r17, 0x00	; 0
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	80 e8       	ldi	r24, 0x80	; 128
    1d6c:	9f e3       	ldi	r25, 0x3F	; 63
    1d6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d70:	3e 81       	ldd	r19, Y+6	; 0x06
    1d72:	4f 81       	ldd	r20, Y+7	; 0x07
    1d74:	58 85       	ldd	r21, Y+8	; 0x08
    1d76:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4f e7       	ldi	r20, 0x7F	; 127
    1d88:	53 e4       	ldi	r21, 0x43	; 67
    1d8a:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	f8 01       	movw	r30, r16
    1da0:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1da2:	19 82       	std	Y+1, r1	; 0x01
    1da4:	f7 c0       	rjmp	.+494    	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	f4 c0       	rjmp	.+488    	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	83 30       	cpi	r24, 0x03	; 3
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <Timer_enu_SetDutyCycleForPWM+0x140>
    1db2:	4d c0       	rjmp	.+154    	; 0x1e4e <Timer_enu_SetDutyCycleForPWM+0x1da>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1db4:	8c 81       	ldd	r24, Y+4	; 0x04
    1db6:	84 30       	cpi	r24, 0x04	; 4
    1db8:	11 f5       	brne	.+68     	; 0x1dfe <Timer_enu_SetDutyCycleForPWM+0x18a>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1)) - 1;
    1dba:	0c e5       	ldi	r16, 0x5C	; 92
    1dbc:	10 e0       	ldi	r17, 0x00	; 0
    1dbe:	6d 81       	ldd	r22, Y+5	; 0x05
    1dc0:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc2:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc4:	98 85       	ldd	r25, Y+8	; 0x08
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	53 e4       	ldi	r21, 0x43	; 67
    1dce:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	f8 01       	movw	r30, r16
    1df8:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1dfa:	19 82       	std	Y+1, r1	; 0x01
    1dfc:	cb c0       	rjmp	.+406    	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	85 30       	cpi	r24, 0x05	; 5
    1e02:	11 f5       	brne	.+68     	; 0x1e48 <Timer_enu_SetDutyCycleForPWM+0x1d4>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1));
    1e04:	0c e5       	ldi	r16, 0x5C	; 92
    1e06:	10 e0       	ldi	r17, 0x00	; 0
    1e08:	6d 81       	ldd	r22, Y+5	; 0x05
    1e0a:	7e 81       	ldd	r23, Y+6	; 0x06
    1e0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e0e:	98 85       	ldd	r25, Y+8	; 0x08
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	53 ec       	ldi	r21, 0xC3	; 195
    1e18:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	4f e7       	ldi	r20, 0x7F	; 127
    1e2a:	53 e4       	ldi	r21, 0x43	; 67
    1e2c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1e44:	19 82       	std	Y+1, r1	; 0x01
    1e46:	a6 c0       	rjmp	.+332    	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	a3 c0       	rjmp	.+326    	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	a0 c0       	rjmp	.+320    	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                break;
            }

            case TIMER_2:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <Timer_enu_SetDutyCycleForPWM+0x1e8>
    1e5a:	43 c0       	rjmp	.+134    	; 0x1ee2 <Timer_enu_SetDutyCycleForPWM+0x26e>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	86 30       	cpi	r24, 0x06	; 6
    1e60:	c1 f4       	brne	.+48     	; 0x1e92 <Timer_enu_SetDutyCycleForPWM+0x21e>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = Copy_f32_DutyCyclePercentage*TIMER_TCNT2_TOP;
    1e62:	03 e4       	ldi	r16, 0x43	; 67
    1e64:	10 e0       	ldi	r17, 0x00	; 0
    1e66:	6d 81       	ldd	r22, Y+5	; 0x05
    1e68:	7e 81       	ldd	r23, Y+6	; 0x06
    1e6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e6c:	98 85       	ldd	r25, Y+8	; 0x08
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	53 e4       	ldi	r21, 0x43	; 67
    1e76:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1e8e:	19 82       	std	Y+1, r1	; 0x01
    1e90:	81 c0       	rjmp	.+258    	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    1e92:	8c 81       	ldd	r24, Y+4	; 0x04
    1e94:	87 30       	cpi	r24, 0x07	; 7
    1e96:	11 f5       	brne	.+68     	; 0x1edc <Timer_enu_SetDutyCycleForPWM+0x268>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP* (1 - Copy_f32_DutyCyclePercentage );
    1e98:	03 e4       	ldi	r16, 0x43	; 67
    1e9a:	10 e0       	ldi	r17, 0x00	; 0
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	80 e8       	ldi	r24, 0x80	; 128
    1ea2:	9f e3       	ldi	r25, 0x3F	; 63
    1ea4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ea6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ea8:	4f 81       	ldd	r20, Y+7	; 0x07
    1eaa:	58 85       	ldd	r21, Y+8	; 0x08
    1eac:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4f e7       	ldi	r20, 0x7F	; 127
    1ebe:	53 e4       	ldi	r21, 0x43	; 67
    1ec0:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1ed8:	19 82       	std	Y+1, r1	; 0x01
    1eda:	5c c0       	rjmp	.+184    	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	59 c0       	rjmp	.+178    	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	83 30       	cpi	r24, 0x03	; 3
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <Timer_enu_SetDutyCycleForPWM+0x276>
    1ee8:	4d c0       	rjmp	.+154    	; 0x1f84 <Timer_enu_SetDutyCycleForPWM+0x310>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	84 30       	cpi	r24, 0x04	; 4
    1eee:	11 f5       	brne	.+68     	; 0x1f34 <Timer_enu_SetDutyCycleForPWM+0x2c0>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1)) - 1;
    1ef0:	03 e4       	ldi	r16, 0x43	; 67
    1ef2:	10 e0       	ldi	r17, 0x00	; 0
    1ef4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ef6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ef8:	8f 81       	ldd	r24, Y+7	; 0x07
    1efa:	98 85       	ldd	r25, Y+8	; 0x08
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	53 e4       	ldi	r21, 0x43	; 67
    1f04:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1f30:	19 82       	std	Y+1, r1	; 0x01
    1f32:	30 c0       	rjmp	.+96     	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    1f34:	8c 81       	ldd	r24, Y+4	; 0x04
    1f36:	85 30       	cpi	r24, 0x05	; 5
    1f38:	11 f5       	brne	.+68     	; 0x1f7e <Timer_enu_SetDutyCycleForPWM+0x30a>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1));
    1f3a:	03 e4       	ldi	r16, 0x43	; 67
    1f3c:	10 e0       	ldi	r17, 0x00	; 0
    1f3e:	6d 81       	ldd	r22, Y+5	; 0x05
    1f40:	7e 81       	ldd	r23, Y+6	; 0x06
    1f42:	8f 81       	ldd	r24, Y+7	; 0x07
    1f44:	98 85       	ldd	r25, Y+8	; 0x08
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	53 ec       	ldi	r21, 0xC3	; 195
    1f4e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	53 e4       	ldi	r21, 0x43	; 67
    1f62:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	f8 01       	movw	r30, r16
    1f78:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1f7a:	19 82       	std	Y+1, r1	; 0x01
    1f7c:	0b c0       	rjmp	.+22     	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f7e:	82 e0       	ldi	r24, 0x02	; 2
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	08 c0       	rjmp	.+16     	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	05 c0       	rjmp	.+10     	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <Timer_enu_SetDutyCycleForPWM+0x320>
            }
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f96:	2c 96       	adiw	r28, 0x0c	; 12
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	1f 91       	pop	r17
    1fa8:	0f 91       	pop	r16
    1faa:	08 95       	ret

00001fac <Timer_enu_ForceCompareMatch>:

extern ErrorState_t Timer_enu_ForceCompareMatch (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <Timer_enu_ForceCompareMatch+0x6>
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <Timer_enu_ForceCompareMatch+0x8>
    1fb4:	0f 92       	push	r0
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	8a 83       	std	Y+2, r24	; 0x02
    1fbc:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_TimerMode == TIMER_NORMAL) || (TIMER_CTC))
    {
        switch (Copy_u8_TimerNumber)
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	3d 83       	std	Y+5, r19	; 0x05
    1fca:	2c 83       	std	Y+4, r18	; 0x04
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	e9 f0       	breq	.+58     	; 0x2010 <Timer_enu_ForceCompareMatch+0x64>
    1fd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fda:	22 30       	cpi	r18, 0x02	; 2
    1fdc:	31 05       	cpc	r19, r1
    1fde:	69 f0       	breq	.+26     	; 0x1ffa <Timer_enu_ForceCompareMatch+0x4e>
    1fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	91 f4       	brne	.+36     	; 0x200c <Timer_enu_ForceCompareMatch+0x60>
        {
            case TIMER_0:
            {
                //Bit contains 1
                TCCR0 |= (1 << TCCR0_FOC0);
    1fe8:	a3 e5       	ldi	r26, 0x53	; 83
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e3 e5       	ldi	r30, 0x53	; 83
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	80 68       	ori	r24, 0x80	; 128
    1ff4:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1ff6:	19 82       	std	Y+1, r1	; 0x01
    1ff8:	0b c0       	rjmp	.+22     	; 0x2010 <Timer_enu_ForceCompareMatch+0x64>
                break;
            }
            case TIMER_2:
            {
                //Bit contains 1
                TCCR2 |= (1 << TCCR2_FOC2);
    1ffa:	a5 e4       	ldi	r26, 0x45	; 69
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e5 e4       	ldi	r30, 0x45	; 69
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	80 68       	ori	r24, 0x80	; 128
    2006:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2008:	19 82       	std	Y+1, r1	; 0x01
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <Timer_enu_ForceCompareMatch+0x64>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }
    return Local_u8_ErrorFlag;
    2010:	89 81       	ldd	r24, Y+1	; 0x01
}
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <Timer_enu_SetTimerMode>:

extern ErrorState_t Timer_enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_TimerMode)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <Timer_enu_SetTimerMode+0x6>
    2028:	0f 92       	push	r0
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetTimerMode(Copy_u8_TimerNumber, Copy_TimerMode);
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	6b 81       	ldd	r22, Y+3	; 0x03
    203a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <enu_SetTimerMode>
    203e:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    2040:	89 81       	ldd	r24, Y+1	; 0x01
}
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <Timer_enu_SetFOCx>:

extern ErrorState_t Timer_enu_SetFOCx (u8 Copy_u8_TimerNumber)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	00 d0       	rcall	.+0      	; 0x2054 <Timer_enu_SetFOCx+0x6>
    2054:	00 d0       	rcall	.+0      	; 0x2056 <Timer_enu_SetFOCx+0x8>
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	3c 83       	std	Y+4, r19	; 0x04
    2068:	2b 83       	std	Y+3, r18	; 0x03
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	81 30       	cpi	r24, 0x01	; 1
    2070:	91 05       	cpc	r25, r1
    2072:	91 f0       	breq	.+36     	; 0x2098 <Timer_enu_SetFOCx+0x4a>
    2074:	2b 81       	ldd	r18, Y+3	; 0x03
    2076:	3c 81       	ldd	r19, Y+4	; 0x04
    2078:	22 30       	cpi	r18, 0x02	; 2
    207a:	31 05       	cpc	r19, r1
    207c:	79 f0       	breq	.+30     	; 0x209c <Timer_enu_SetFOCx+0x4e>
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	a1 f4       	brne	.+40     	; 0x20ae <Timer_enu_SetFOCx+0x60>
    {
        case TIMER_0:
        {
            TCCR0 |= (1 << TCCR0_FOC0);
    2086:	a3 e5       	ldi	r26, 0x53	; 83
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e3 e5       	ldi	r30, 0x53	; 83
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	80 68       	ori	r24, 0x80	; 128
    2092:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2094:	19 82       	std	Y+1, r1	; 0x01
    2096:	0d c0       	rjmp	.+26     	; 0x20b2 <Timer_enu_SetFOCx+0x64>
        }

        case TIMER_1:
        {

            Local_u8_ErrorFlag = ES_OK;
    2098:	19 82       	std	Y+1, r1	; 0x01
    209a:	0b c0       	rjmp	.+22     	; 0x20b2 <Timer_enu_SetFOCx+0x64>
        }

        case TIMER_2:
        {

            TCCR2 |= (1 << TCCR2_FOC2);
    209c:	a5 e4       	ldi	r26, 0x45	; 69
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e5 e4       	ldi	r30, 0x45	; 69
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 68       	ori	r24, 0x80	; 128
    20a8:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    20aa:	19 82       	std	Y+1, r1	; 0x01
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <Timer_enu_SetFOCx+0x64>
            break;
        }
        
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <Timer_enu_TimeDelay>:

extern ErrorState_t Timer_enu_TimeDelay(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimeinSec)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <Timer_enu_TimeDelay+0x6>
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	8a 83       	std	Y+2, r24	; 0x02
    20d0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	89 83       	std	Y+1, r24	; 0x01


    return Local_u8_ErrorFlag;
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <Timer_enu_SetCallBack>:

extern ErrorState_t Timer_enu_SetCallBack (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, void (*Copy_pfun_AppFunction)(void*), void* Copy_pvid_Parameters)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	29 97       	sbiw	r28, 0x09	; 9
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	8a 83       	std	Y+2, r24	; 0x02
    20fa:	6b 83       	std	Y+3, r22	; 0x03
    20fc:	5d 83       	std	Y+5, r21	; 0x05
    20fe:	4c 83       	std	Y+4, r20	; 0x04
    2100:	3f 83       	std	Y+7, r19	; 0x07
    2102:	2e 83       	std	Y+6, r18	; 0x06
    u8 Local_u8_ErrorFlag = ES_NOK;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pfun_AppFunction)
    2108:	8c 81       	ldd	r24, Y+4	; 0x04
    210a:	9d 81       	ldd	r25, Y+5	; 0x05
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	09 f4       	brne	.+2      	; 0x2112 <Timer_enu_SetCallBack+0x2e>
    2110:	62 c0       	rjmp	.+196    	; 0x21d6 <Timer_enu_SetCallBack+0xf2>
    {
        switch (Copy_u8_TimerNumber)
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	39 87       	std	Y+9, r19	; 0x09
    211a:	28 87       	std	Y+8, r18	; 0x08
    211c:	88 85       	ldd	r24, Y+8	; 0x08
    211e:	99 85       	ldd	r25, Y+9	; 0x09
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	91 05       	cpc	r25, r1
    2124:	09 f4       	brne	.+2      	; 0x2128 <Timer_enu_SetCallBack+0x44>
    2126:	59 c0       	rjmp	.+178    	; 0x21da <Timer_enu_SetCallBack+0xf6>
    2128:	28 85       	ldd	r18, Y+8	; 0x08
    212a:	39 85       	ldd	r19, Y+9	; 0x09
    212c:	22 30       	cpi	r18, 0x02	; 2
    212e:	31 05       	cpc	r19, r1
    2130:	51 f1       	breq	.+84     	; 0x2186 <Timer_enu_SetCallBack+0xa2>
    2132:	88 85       	ldd	r24, Y+8	; 0x08
    2134:	99 85       	ldd	r25, Y+9	; 0x09
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	09 f0       	breq	.+2      	; 0x213c <Timer_enu_SetCallBack+0x58>
    213a:	4a c0       	rjmp	.+148    	; 0x21d0 <Timer_enu_SetCallBack+0xec>
        {
            case TIMER_0:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	88 23       	and	r24, r24
    2140:	71 f4       	brne	.+28     	; 0x215e <Timer_enu_SetCallBack+0x7a>
                {
                    apfun_ISRpointers[TIMER_0_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    2142:	8c 81       	ldd	r24, Y+4	; 0x04
    2144:	9d 81       	ldd	r25, Y+5	; 0x05
    2146:	90 93 d9 01 	sts	0x01D9, r25
    214a:	80 93 d8 01 	sts	0x01D8, r24

                    apvid_ISRParameters[TIMER_0_OVERFLOW_ISR] = Copy_pvid_Parameters;
    214e:	8e 81       	ldd	r24, Y+6	; 0x06
    2150:	9f 81       	ldd	r25, Y+7	; 0x07
    2152:	90 93 e9 01 	sts	0x01E9, r25
    2156:	80 93 e8 01 	sts	0x01E8, r24

                    Local_u8_ErrorFlag = ES_OK;
    215a:	19 82       	std	Y+1, r1	; 0x01
    215c:	3e c0       	rjmp	.+124    	; 0x21da <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	71 f4       	brne	.+28     	; 0x2180 <Timer_enu_SetCallBack+0x9c>
                {
                    apfun_ISRpointers[TIMER_0_CTC_ISR] = Copy_pfun_AppFunction;
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	9d 81       	ldd	r25, Y+5	; 0x05
    2168:	90 93 d7 01 	sts	0x01D7, r25
    216c:	80 93 d6 01 	sts	0x01D6, r24

                    apvid_ISRParameters[TIMER_0_CTC_ISR] = Copy_pvid_Parameters;
    2170:	8e 81       	ldd	r24, Y+6	; 0x06
    2172:	9f 81       	ldd	r25, Y+7	; 0x07
    2174:	90 93 e7 01 	sts	0x01E7, r25
    2178:	80 93 e6 01 	sts	0x01E6, r24

                    Local_u8_ErrorFlag = ES_OK;
    217c:	19 82       	std	Y+1, r1	; 0x01
    217e:	2d c0       	rjmp	.+90     	; 0x21da <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	2a c0       	rjmp	.+84     	; 0x21da <Timer_enu_SetCallBack+0xf6>
                break;
            }

            case TIMER_2:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	88 23       	and	r24, r24
    218a:	71 f4       	brne	.+28     	; 0x21a8 <Timer_enu_SetCallBack+0xc4>
                {
                    apfun_ISRpointers[TIMER_2_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    218c:	8c 81       	ldd	r24, Y+4	; 0x04
    218e:	9d 81       	ldd	r25, Y+5	; 0x05
    2190:	90 93 cd 01 	sts	0x01CD, r25
    2194:	80 93 cc 01 	sts	0x01CC, r24

                    apvid_ISRParameters[TIMER_2_OVERFLOW_ISR] = Copy_pvid_Parameters;
    2198:	8e 81       	ldd	r24, Y+6	; 0x06
    219a:	9f 81       	ldd	r25, Y+7	; 0x07
    219c:	90 93 dd 01 	sts	0x01DD, r25
    21a0:	80 93 dc 01 	sts	0x01DC, r24

                    Local_u8_ErrorFlag = ES_OK;
    21a4:	19 82       	std	Y+1, r1	; 0x01
    21a6:	19 c0       	rjmp	.+50     	; 0x21da <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	81 30       	cpi	r24, 0x01	; 1
    21ac:	71 f4       	brne	.+28     	; 0x21ca <Timer_enu_SetCallBack+0xe6>
                {
                    apfun_ISRpointers[TIMER_2_CTC_ISR] = Copy_pfun_AppFunction;
    21ae:	8c 81       	ldd	r24, Y+4	; 0x04
    21b0:	9d 81       	ldd	r25, Y+5	; 0x05
    21b2:	90 93 cb 01 	sts	0x01CB, r25
    21b6:	80 93 ca 01 	sts	0x01CA, r24

                    apvid_ISRParameters[TIMER_2_CTC_ISR] = Copy_pvid_Parameters;
    21ba:	8e 81       	ldd	r24, Y+6	; 0x06
    21bc:	9f 81       	ldd	r25, Y+7	; 0x07
    21be:	90 93 db 01 	sts	0x01DB, r25
    21c2:	80 93 da 01 	sts	0x01DA, r24

                    Local_u8_ErrorFlag = ES_OK;
    21c6:	19 82       	std	Y+1, r1	; 0x01
    21c8:	08 c0       	rjmp	.+16     	; 0x21da <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	05 c0       	rjmp	.+10     	; 0x21da <Timer_enu_SetCallBack+0xf6>

                break;
            }
            
            default:
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <Timer_enu_SetCallBack+0xf6>
            break;
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    21d6:	83 e0       	ldi	r24, 0x03	; 3
    21d8:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    21da:	89 81       	ldd	r24, Y+1	; 0x01
}
    21dc:	29 96       	adiw	r28, 0x09	; 9
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <Timer_enu_GetPSUsed>:

extern ErrorState_t Timer_enu_GetPSUsed(u8 Copy_u8_TimerNumber, u16* Copy_pu16_PS)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	29 97       	sbiw	r28, 0x09	; 9
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	8b 83       	std	Y+3, r24	; 0x03
    2204:	7d 83       	std	Y+5, r23	; 0x05
    2206:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	8a 83       	std	Y+2, r24	; 0x02

    switch (Copy_u8_TimerNumber)
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	39 87       	std	Y+9, r19	; 0x09
    2214:	28 87       	std	Y+8, r18	; 0x08
    2216:	88 85       	ldd	r24, Y+8	; 0x08
    2218:	99 85       	ldd	r25, Y+9	; 0x09
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	91 05       	cpc	r25, r1
    221e:	09 f4       	brne	.+2      	; 0x2222 <Timer_enu_GetPSUsed+0x34>
    2220:	66 c0       	rjmp	.+204    	; 0x22ee <Timer_enu_GetPSUsed+0x100>
    2222:	28 85       	ldd	r18, Y+8	; 0x08
    2224:	39 85       	ldd	r19, Y+9	; 0x09
    2226:	22 30       	cpi	r18, 0x02	; 2
    2228:	31 05       	cpc	r19, r1
    222a:	09 f4       	brne	.+2      	; 0x222e <Timer_enu_GetPSUsed+0x40>
    222c:	60 c0       	rjmp	.+192    	; 0x22ee <Timer_enu_GetPSUsed+0x100>
    222e:	88 85       	ldd	r24, Y+8	; 0x08
    2230:	99 85       	ldd	r25, Y+9	; 0x09
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	09 f0       	breq	.+2      	; 0x2238 <Timer_enu_GetPSUsed+0x4a>
    2236:	59 c0       	rjmp	.+178    	; 0x22ea <Timer_enu_GetPSUsed+0xfc>
    {
        case TIMER_0:
        {
            u8 Local_u8_CS_Bits = TCCR0 & 0x07; //Acquiring the least significant 3 bits CS2:0\
    2238:	e3 e5       	ldi	r30, 0x53	; 83
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	87 70       	andi	r24, 0x07	; 7
    2240:	89 83       	std	Y+1, r24	; 0x01

            switch (Local_u8_CS_Bits)
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	3f 83       	std	Y+7, r19	; 0x07
    224a:	2e 83       	std	Y+6, r18	; 0x06
    224c:	8e 81       	ldd	r24, Y+6	; 0x06
    224e:	9f 81       	ldd	r25, Y+7	; 0x07
    2250:	82 30       	cpi	r24, 0x02	; 2
    2252:	91 05       	cpc	r25, r1
    2254:	59 f1       	breq	.+86     	; 0x22ac <Timer_enu_GetPSUsed+0xbe>
    2256:	2e 81       	ldd	r18, Y+6	; 0x06
    2258:	3f 81       	ldd	r19, Y+7	; 0x07
    225a:	23 30       	cpi	r18, 0x03	; 3
    225c:	31 05       	cpc	r19, r1
    225e:	54 f4       	brge	.+20     	; 0x2274 <Timer_enu_GetPSUsed+0x86>
    2260:	8e 81       	ldd	r24, Y+6	; 0x06
    2262:	9f 81       	ldd	r25, Y+7	; 0x07
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	b1 f0       	breq	.+44     	; 0x2294 <Timer_enu_GetPSUsed+0xa6>
    2268:	2e 81       	ldd	r18, Y+6	; 0x06
    226a:	3f 81       	ldd	r19, Y+7	; 0x07
    226c:	21 30       	cpi	r18, 0x01	; 1
    226e:	31 05       	cpc	r19, r1
    2270:	b1 f0       	breq	.+44     	; 0x229e <Timer_enu_GetPSUsed+0xb0>
    2272:	38 c0       	rjmp	.+112    	; 0x22e4 <Timer_enu_GetPSUsed+0xf6>
    2274:	8e 81       	ldd	r24, Y+6	; 0x06
    2276:	9f 81       	ldd	r25, Y+7	; 0x07
    2278:	84 30       	cpi	r24, 0x04	; 4
    227a:	91 05       	cpc	r25, r1
    227c:	29 f1       	breq	.+74     	; 0x22c8 <Timer_enu_GetPSUsed+0xda>
    227e:	2e 81       	ldd	r18, Y+6	; 0x06
    2280:	3f 81       	ldd	r19, Y+7	; 0x07
    2282:	24 30       	cpi	r18, 0x04	; 4
    2284:	31 05       	cpc	r19, r1
    2286:	cc f0       	brlt	.+50     	; 0x22ba <Timer_enu_GetPSUsed+0xcc>
    2288:	8e 81       	ldd	r24, Y+6	; 0x06
    228a:	9f 81       	ldd	r25, Y+7	; 0x07
    228c:	85 30       	cpi	r24, 0x05	; 5
    228e:	91 05       	cpc	r25, r1
    2290:	11 f1       	breq	.+68     	; 0x22d6 <Timer_enu_GetPSUsed+0xe8>
    2292:	28 c0       	rjmp	.+80     	; 0x22e4 <Timer_enu_GetPSUsed+0xf6>
            {
            
                case 0:
                {
                    *Copy_pu16_PS = 0;
    2294:	ec 81       	ldd	r30, Y+4	; 0x04
    2296:	fd 81       	ldd	r31, Y+5	; 0x05
    2298:	11 82       	std	Z+1, r1	; 0x01
    229a:	10 82       	st	Z, r1
    229c:	28 c0       	rjmp	.+80     	; 0x22ee <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                case 1:
                {
                    *Copy_pu16_PS = 1;
    229e:	ec 81       	ldd	r30, Y+4	; 0x04
    22a0:	fd 81       	ldd	r31, Y+5	; 0x05
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	91 83       	std	Z+1, r25	; 0x01
    22a8:	80 83       	st	Z, r24
    22aa:	21 c0       	rjmp	.+66     	; 0x22ee <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                case 2:
                {
                    *Copy_pu16_PS = 8;
    22ac:	ec 81       	ldd	r30, Y+4	; 0x04
    22ae:	fd 81       	ldd	r31, Y+5	; 0x05
    22b0:	88 e0       	ldi	r24, 0x08	; 8
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	80 83       	st	Z, r24
    22b8:	1a c0       	rjmp	.+52     	; 0x22ee <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                case 3:
                {
                    *Copy_pu16_PS = 64;
    22ba:	ec 81       	ldd	r30, Y+4	; 0x04
    22bc:	fd 81       	ldd	r31, Y+5	; 0x05
    22be:	80 e4       	ldi	r24, 0x40	; 64
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	80 83       	st	Z, r24
    22c6:	13 c0       	rjmp	.+38     	; 0x22ee <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                case 4:
                {
                    *Copy_pu16_PS = 256;
    22c8:	ec 81       	ldd	r30, Y+4	; 0x04
    22ca:	fd 81       	ldd	r31, Y+5	; 0x05
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	91 e0       	ldi	r25, 0x01	; 1
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
    22d4:	0c c0       	rjmp	.+24     	; 0x22ee <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                case 5:
                {
                    *Copy_pu16_PS = 1024;
    22d6:	ec 81       	ldd	r30, Y+4	; 0x04
    22d8:	fd 81       	ldd	r31, Y+5	; 0x05
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	94 e0       	ldi	r25, 0x04	; 4
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
    22e2:	05 c0       	rjmp	.+10     	; 0x22ee <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                default:
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    22e4:	82 e0       	ldi	r24, 0x02	; 2
    22e6:	8a 83       	std	Y+2, r24	; 0x02
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <Timer_enu_GetPSUsed+0x100>
        {
            break;
        }
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    22ea:	82 e0       	ldi	r24, 0x02	; 2
    22ec:	8a 83       	std	Y+2, r24	; 0x02
            break;
        }
    }

    return Local_u8_ErrorFlag;
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22f0:	29 96       	adiw	r28, 0x09	; 9
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <Timer_enu_GetTovx>:

extern ErrorState_t Timer_enu_GetTovx (u8 Copy_u8_TimerNumber, u8* Copy_pu8_TovxFlag)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	00 d0       	rcall	.+0      	; 0x2308 <Timer_enu_GetTovx+0x6>
    2308:	00 d0       	rcall	.+0      	; 0x230a <Timer_enu_GetTovx+0x8>
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	8a 83       	std	Y+2, r24	; 0x02
    2310:	7c 83       	std	Y+4, r23	; 0x04
    2312:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	41 f4       	brne	.+16     	; 0x2332 <Timer_enu_GetTovx+0x30>
    {
    
        case TIMER_0:
        {
            *Copy_pu8_TovxFlag = (TIFR >> TIFR_TOV0) & 1; //Getting Tov0 Flag
    2322:	e8 e5       	ldi	r30, 0x58	; 88
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	81 70       	andi	r24, 0x01	; 1
    232a:	eb 81       	ldd	r30, Y+3	; 0x03
    232c:	fc 81       	ldd	r31, Y+4	; 0x04
    232e:	80 83       	st	Z, r24
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <Timer_enu_GetTovx+0x34>
            break;
        }

        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2332:	82 e0       	ldi	r24, 0x02	; 2
    2334:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
        
    }
    return Local_u8_ErrorFlag;
    2336:	89 81       	ldd	r24, Y+1	; 0x01
}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <Timer_enu_SetTovx>:

extern ErrorState_t Timer_enu_SetTovx (u8 Copy_u8_TimerNumber)
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	00 d0       	rcall	.+0      	; 0x234c <Timer_enu_SetTovx+0x6>
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	88 2f       	mov	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	41 f4       	brne	.+16     	; 0x2370 <Timer_enu_SetTovx+0x2a>
    {
        case TIMER_0:
        {
            TIFR |= ( 1 << TIFR_TOV0);
    2360:	a8 e5       	ldi	r26, 0x58	; 88
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e8 e5       	ldi	r30, 0x58	; 88
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	81 60       	ori	r24, 0x01	; 1
    236c:	8c 93       	st	X, r24
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <Timer_enu_SetTovx+0x2e>
            break;
        }

        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2370:	82 e0       	ldi	r24, 0x02	; 2
    2372:	89 83       	std	Y+1, r24	; 0x01

            break;
        }
    }

    return Local_u8_ErrorFlag;
    2374:	89 81       	ldd	r24, Y+1	; 0x01
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <Timer_enu_EnableInterruptMode>:

extern ErrorState_t Timer_enu_EnableInterruptMode (u8 Copy_u8_TimerNumber, u8 Copu_u8_TimerMode)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	00 d0       	rcall	.+0      	; 0x2386 <Timer_enu_EnableInterruptMode+0x6>
    2386:	0f 92       	push	r0
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	8a 83       	std	Y+2, r24	; 0x02
    238e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = enu_SetInterruptMode(Copy_u8_TimerNumber, Copu_u8_TimerMode, TIMER_INT_MODE);
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	6b 81       	ldd	r22, Y+3	; 0x03
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <enu_SetInterruptMode>
    239a:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    239c:	89 81       	ldd	r24, Y+1	; 0x01
}
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <Timer_enu_DisableInterruptMode>:

extern ErrorState_t Timer_enu_DisableInterruptMode (u8 Copy_u8_TimerNumber, u8 Copu_u8_TimerMode)
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <Timer_enu_DisableInterruptMode+0x6>
    23b0:	0f 92       	push	r0
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	8a 83       	std	Y+2, r24	; 0x02
    23b8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = enu_SetInterruptMode(Copy_u8_TimerNumber, Copu_u8_TimerMode, TIMER_POLLING_MODE);
    23ba:	8a 81       	ldd	r24, Y+2	; 0x02
    23bc:	6b 81       	ldd	r22, Y+3	; 0x03
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <enu_SetInterruptMode>
    23c4:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <__vector_4>:
// void __vector_10 (void)__attribute__((signal));
void __vector_11 (void)__attribute__((signal));


void __vector_4 (void)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    23dc:	80 91 ca 01 	lds	r24, 0x01CA
    23e0:	90 91 cb 01 	lds	r25, 0x01CB
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	49 f0       	breq	.+18     	; 0x23fa <__vector_4+0x26>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    23e8:	e0 91 ca 01 	lds	r30, 0x01CA
    23ec:	f0 91 cb 01 	lds	r31, 0x01CB
    23f0:	80 91 da 01 	lds	r24, 0x01DA
    23f4:	90 91 db 01 	lds	r25, 0x01DB
    23f8:	09 95       	icall
    }
}
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <__vector_5>:

void __vector_5 (void)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    2408:	80 91 ca 01 	lds	r24, 0x01CA
    240c:	90 91 cb 01 	lds	r25, 0x01CB
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	49 f0       	breq	.+18     	; 0x2426 <__vector_5+0x26>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    2414:	e0 91 ca 01 	lds	r30, 0x01CA
    2418:	f0 91 cb 01 	lds	r31, 0x01CB
    241c:	80 91 da 01 	lds	r24, 0x01DA
    2420:	90 91 db 01 	lds	r25, 0x01DB
    2424:	09 95       	icall
    }
}
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <__vector_10>:

void __vector_10 (void)
{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_CTC_ISR])
    2434:	80 91 d6 01 	lds	r24, 0x01D6
    2438:	90 91 d7 01 	lds	r25, 0x01D7
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	49 f0       	breq	.+18     	; 0x2452 <__vector_10+0x26>
    {
       apfun_ISRpointers[TIMER_0_CTC_ISR](apvid_ISRParameters[TIMER_0_CTC_ISR]);
    2440:	e0 91 d6 01 	lds	r30, 0x01D6
    2444:	f0 91 d7 01 	lds	r31, 0x01D7
    2448:	80 91 e6 01 	lds	r24, 0x01E6
    244c:	90 91 e7 01 	lds	r25, 0x01E7
    2450:	09 95       	icall
    }
}
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <__vector_11>:

void __vector_11 (void)
{
    2458:	1f 92       	push	r1
    245a:	0f 92       	push	r0
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	0f 92       	push	r0
    2460:	11 24       	eor	r1, r1
    2462:	2f 93       	push	r18
    2464:	3f 93       	push	r19
    2466:	4f 93       	push	r20
    2468:	5f 93       	push	r21
    246a:	6f 93       	push	r22
    246c:	7f 93       	push	r23
    246e:	8f 93       	push	r24
    2470:	9f 93       	push	r25
    2472:	af 93       	push	r26
    2474:	bf 93       	push	r27
    2476:	ef 93       	push	r30
    2478:	ff 93       	push	r31
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_OVERFLOW_ISR])
    2482:	80 91 d8 01 	lds	r24, 0x01D8
    2486:	90 91 d9 01 	lds	r25, 0x01D9
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	49 f0       	breq	.+18     	; 0x24a0 <__vector_11+0x48>
    {
        apfun_ISRpointers[TIMER_0_OVERFLOW_ISR](apvid_ISRParameters[TIMER_0_OVERFLOW_ISR]);
    248e:	e0 91 d8 01 	lds	r30, 0x01D8
    2492:	f0 91 d9 01 	lds	r31, 0x01D9
    2496:	80 91 e8 01 	lds	r24, 0x01E8
    249a:	90 91 e9 01 	lds	r25, 0x01E9
    249e:	09 95       	icall
    }
}
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	ff 91       	pop	r31
    24a6:	ef 91       	pop	r30
    24a8:	bf 91       	pop	r27
    24aa:	af 91       	pop	r26
    24ac:	9f 91       	pop	r25
    24ae:	8f 91       	pop	r24
    24b0:	7f 91       	pop	r23
    24b2:	6f 91       	pop	r22
    24b4:	5f 91       	pop	r21
    24b6:	4f 91       	pop	r20
    24b8:	3f 91       	pop	r19
    24ba:	2f 91       	pop	r18
    24bc:	0f 90       	pop	r0
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	0f 90       	pop	r0
    24c2:	1f 90       	pop	r1
    24c4:	18 95       	reti

000024c6 <enu_SetTimerMode>:



//Local functions' implementation
static ErrorState_t enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <enu_SetTimerMode+0x6>
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <enu_SetTimerMode+0x8>
    24ce:	0f 92       	push	r0
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	8a 83       	std	Y+2, r24	; 0x02
    24d6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	89 83       	std	Y+1, r24	; 0x01

    switch(Copy_u8_TimerNumber)
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	3d 83       	std	Y+5, r19	; 0x05
    24e4:	2c 83       	std	Y+4, r18	; 0x04
    24e6:	8c 81       	ldd	r24, Y+4	; 0x04
    24e8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	91 05       	cpc	r25, r1
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <enu_SetTimerMode+0x2c>
    24f0:	ab c0       	rjmp	.+342    	; 0x2648 <enu_SetTimerMode+0x182>
    24f2:	2c 81       	ldd	r18, Y+4	; 0x04
    24f4:	3d 81       	ldd	r19, Y+5	; 0x05
    24f6:	22 30       	cpi	r18, 0x02	; 2
    24f8:	31 05       	cpc	r19, r1
    24fa:	09 f4       	brne	.+2      	; 0x24fe <enu_SetTimerMode+0x38>
    24fc:	54 c0       	rjmp	.+168    	; 0x25a6 <enu_SetTimerMode+0xe0>
    24fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2500:	9d 81       	ldd	r25, Y+5	; 0x05
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	09 f0       	breq	.+2      	; 0x2508 <enu_SetTimerMode+0x42>
    2506:	9e c0       	rjmp	.+316    	; 0x2644 <enu_SetTimerMode+0x17e>
    {
        case TIMER_0:
        {

            if(Copy_u8_TimerMode == TIMER_NORMAL)
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	88 23       	and	r24, r24
    250c:	81 f4       	brne	.+32     	; 0x252e <enu_SetTimerMode+0x68>
            {
                //Bits contain 00
                TCCR0 &= ~(1 << TCCR0_WGM00);
    250e:	a3 e5       	ldi	r26, 0x53	; 83
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e3 e5       	ldi	r30, 0x53	; 83
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	8f 7b       	andi	r24, 0xBF	; 191
    251a:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    251c:	a3 e5       	ldi	r26, 0x53	; 83
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e3 e5       	ldi	r30, 0x53	; 83
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	87 7f       	andi	r24, 0xF7	; 247
    2528:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    252a:	19 82       	std	Y+1, r1	; 0x01
    252c:	8d c0       	rjmp	.+282    	; 0x2648 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	82 30       	cpi	r24, 0x02	; 2
    2532:	81 f4       	brne	.+32     	; 0x2554 <enu_SetTimerMode+0x8e>
            {
                //Bits contain 01
                TCCR0 |= (1 << TCCR0_WGM00);
    2534:	a3 e5       	ldi	r26, 0x53	; 83
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e3 e5       	ldi	r30, 0x53	; 83
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	80 64       	ori	r24, 0x40	; 64
    2540:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    2542:	a3 e5       	ldi	r26, 0x53	; 83
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e3 e5       	ldi	r30, 0x53	; 83
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	87 7f       	andi	r24, 0xF7	; 247
    254e:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    2550:	19 82       	std	Y+1, r1	; 0x01
    2552:	7a c0       	rjmp	.+244    	; 0x2648 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	81 30       	cpi	r24, 0x01	; 1
    2558:	81 f4       	brne	.+32     	; 0x257a <enu_SetTimerMode+0xb4>
            {
                //Bits contain 10
                TCCR0 &= ~(1 << TCCR0_WGM00);
    255a:	a3 e5       	ldi	r26, 0x53	; 83
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e3 e5       	ldi	r30, 0x53	; 83
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	8f 7b       	andi	r24, 0xBF	; 191
    2566:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    2568:	a3 e5       	ldi	r26, 0x53	; 83
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e3 e5       	ldi	r30, 0x53	; 83
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	88 60       	ori	r24, 0x08	; 8
    2574:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    2576:	19 82       	std	Y+1, r1	; 0x01
    2578:	67 c0       	rjmp	.+206    	; 0x2648 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	81 f4       	brne	.+32     	; 0x25a0 <enu_SetTimerMode+0xda>
            {
                //Bits contain 11
                TCCR0 |= (1 << TCCR0_WGM00);
    2580:	a3 e5       	ldi	r26, 0x53	; 83
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	e3 e5       	ldi	r30, 0x53	; 83
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	80 64       	ori	r24, 0x40	; 64
    258c:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    258e:	a3 e5       	ldi	r26, 0x53	; 83
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e3 e5       	ldi	r30, 0x53	; 83
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	88 60       	ori	r24, 0x08	; 8
    259a:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    259c:	19 82       	std	Y+1, r1	; 0x01
    259e:	54 c0       	rjmp	.+168    	; 0x2648 <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	51 c0       	rjmp	.+162    	; 0x2648 <enu_SetTimerMode+0x182>
        break;
     
        case TIMER_2:
        {
            
            if(Copy_u8_TimerMode == TIMER_NORMAL)
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	88 23       	and	r24, r24
    25aa:	81 f4       	brne	.+32     	; 0x25cc <enu_SetTimerMode+0x106>
            {
                //Bits contain 00
                TCCR2 &= ~(1 << TCCR2_WGM20);
    25ac:	a5 e4       	ldi	r26, 0x45	; 69
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e5 e4       	ldi	r30, 0x45	; 69
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	8f 7b       	andi	r24, 0xBF	; 191
    25b8:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    25ba:	a5 e4       	ldi	r26, 0x45	; 69
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e5 e4       	ldi	r30, 0x45	; 69
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	87 7f       	andi	r24, 0xF7	; 247
    25c6:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    25c8:	19 82       	std	Y+1, r1	; 0x01
    25ca:	3e c0       	rjmp	.+124    	; 0x2648 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	82 30       	cpi	r24, 0x02	; 2
    25d0:	81 f4       	brne	.+32     	; 0x25f2 <enu_SetTimerMode+0x12c>
            {
                //Bits contain 01
                TCCR2 |= (1 << TCCR2_WGM20);
    25d2:	a5 e4       	ldi	r26, 0x45	; 69
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e5 e4       	ldi	r30, 0x45	; 69
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	80 64       	ori	r24, 0x40	; 64
    25de:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    25e0:	a5 e4       	ldi	r26, 0x45	; 69
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e5 e4       	ldi	r30, 0x45	; 69
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	87 7f       	andi	r24, 0xF7	; 247
    25ec:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    25ee:	19 82       	std	Y+1, r1	; 0x01
    25f0:	2b c0       	rjmp	.+86     	; 0x2648 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	81 f4       	brne	.+32     	; 0x2618 <enu_SetTimerMode+0x152>
            {
                //Bits contain 10
                TCCR2 &= ~(1 << TCCR2_WGM20);
    25f8:	a5 e4       	ldi	r26, 0x45	; 69
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e5 e4       	ldi	r30, 0x45	; 69
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	8f 7b       	andi	r24, 0xBF	; 191
    2604:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    2606:	a5 e4       	ldi	r26, 0x45	; 69
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e5 e4       	ldi	r30, 0x45	; 69
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	88 60       	ori	r24, 0x08	; 8
    2612:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    2614:	19 82       	std	Y+1, r1	; 0x01
    2616:	18 c0       	rjmp	.+48     	; 0x2648 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	83 30       	cpi	r24, 0x03	; 3
    261c:	81 f4       	brne	.+32     	; 0x263e <enu_SetTimerMode+0x178>
            {
                //Bits contain 11
                TCCR2 |= (1 << TCCR2_WGM20);
    261e:	a5 e4       	ldi	r26, 0x45	; 69
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e5 e4       	ldi	r30, 0x45	; 69
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	80 64       	ori	r24, 0x40	; 64
    262a:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    262c:	a5 e4       	ldi	r26, 0x45	; 69
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e5 e4       	ldi	r30, 0x45	; 69
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	88 60       	ori	r24, 0x08	; 8
    2638:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    263a:	19 82       	std	Y+1, r1	; 0x01
    263c:	05 c0       	rjmp	.+10     	; 0x2648 <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <enu_SetTimerMode+0x182>
        
     


        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;
    2648:	89 81       	ldd	r24, Y+1	; 0x01
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <enu_SetClockSelection>:

static ErrorState_t enu_SetClockSelection(u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	29 97       	sbiw	r28, 0x09	; 9
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	8a 83       	std	Y+2, r24	; 0x02
    2670:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_TimerNumber)
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	39 87       	std	Y+9, r19	; 0x09
    267e:	28 87       	std	Y+8, r18	; 0x08
    2680:	88 85       	ldd	r24, Y+8	; 0x08
    2682:	99 85       	ldd	r25, Y+9	; 0x09
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	91 05       	cpc	r25, r1
    2688:	09 f4       	brne	.+2      	; 0x268c <enu_SetClockSelection+0x32>
    268a:	03 c2       	rjmp	.+1030   	; 0x2a92 <enu_SetClockSelection+0x438>
    268c:	28 85       	ldd	r18, Y+8	; 0x08
    268e:	39 85       	ldd	r19, Y+9	; 0x09
    2690:	22 30       	cpi	r18, 0x02	; 2
    2692:	31 05       	cpc	r19, r1
    2694:	09 f4       	brne	.+2      	; 0x2698 <enu_SetClockSelection+0x3e>
    2696:	00 c1       	rjmp	.+512    	; 0x2898 <enu_SetClockSelection+0x23e>
    2698:	88 85       	ldd	r24, Y+8	; 0x08
    269a:	99 85       	ldd	r25, Y+9	; 0x09
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	09 f0       	breq	.+2      	; 0x26a2 <enu_SetClockSelection+0x48>
    26a0:	f6 c1       	rjmp	.+1004   	; 0x2a8e <enu_SetClockSelection+0x434>
    {
        case TIMER_0:
        {
            switch (Copy_u8_ClockSelection)
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	3f 83       	std	Y+7, r19	; 0x07
    26aa:	2e 83       	std	Y+6, r18	; 0x06
    26ac:	8e 81       	ldd	r24, Y+6	; 0x06
    26ae:	9f 81       	ldd	r25, Y+7	; 0x07
    26b0:	84 30       	cpi	r24, 0x04	; 4
    26b2:	91 05       	cpc	r25, r1
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <enu_SetClockSelection+0x5e>
    26b6:	7a c0       	rjmp	.+244    	; 0x27ac <enu_SetClockSelection+0x152>
    26b8:	2e 81       	ldd	r18, Y+6	; 0x06
    26ba:	3f 81       	ldd	r19, Y+7	; 0x07
    26bc:	25 30       	cpi	r18, 0x05	; 5
    26be:	31 05       	cpc	r19, r1
    26c0:	8c f4       	brge	.+34     	; 0x26e4 <enu_SetClockSelection+0x8a>
    26c2:	8e 81       	ldd	r24, Y+6	; 0x06
    26c4:	9f 81       	ldd	r25, Y+7	; 0x07
    26c6:	81 30       	cpi	r24, 0x01	; 1
    26c8:	91 05       	cpc	r25, r1
    26ca:	09 f4       	brne	.+2      	; 0x26ce <enu_SetClockSelection+0x74>
    26cc:	41 c0       	rjmp	.+130    	; 0x2750 <enu_SetClockSelection+0xf6>
    26ce:	2e 81       	ldd	r18, Y+6	; 0x06
    26d0:	3f 81       	ldd	r19, Y+7	; 0x07
    26d2:	22 30       	cpi	r18, 0x02	; 2
    26d4:	31 05       	cpc	r19, r1
    26d6:	09 f4       	brne	.+2      	; 0x26da <enu_SetClockSelection+0x80>
    26d8:	52 c0       	rjmp	.+164    	; 0x277e <enu_SetClockSelection+0x124>
    26da:	8e 81       	ldd	r24, Y+6	; 0x06
    26dc:	9f 81       	ldd	r25, Y+7	; 0x07
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	01 f1       	breq	.+64     	; 0x2722 <enu_SetClockSelection+0xc8>
    26e2:	d7 c0       	rjmp	.+430    	; 0x2892 <enu_SetClockSelection+0x238>
    26e4:	2e 81       	ldd	r18, Y+6	; 0x06
    26e6:	3f 81       	ldd	r19, Y+7	; 0x07
    26e8:	27 30       	cpi	r18, 0x07	; 7
    26ea:	31 05       	cpc	r19, r1
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <enu_SetClockSelection+0x96>
    26ee:	8c c0       	rjmp	.+280    	; 0x2808 <enu_SetClockSelection+0x1ae>
    26f0:	8e 81       	ldd	r24, Y+6	; 0x06
    26f2:	9f 81       	ldd	r25, Y+7	; 0x07
    26f4:	88 30       	cpi	r24, 0x08	; 8
    26f6:	91 05       	cpc	r25, r1
    26f8:	3c f4       	brge	.+14     	; 0x2708 <enu_SetClockSelection+0xae>
    26fa:	2e 81       	ldd	r18, Y+6	; 0x06
    26fc:	3f 81       	ldd	r19, Y+7	; 0x07
    26fe:	26 30       	cpi	r18, 0x06	; 6
    2700:	31 05       	cpc	r19, r1
    2702:	09 f4       	brne	.+2      	; 0x2706 <enu_SetClockSelection+0xac>
    2704:	6a c0       	rjmp	.+212    	; 0x27da <enu_SetClockSelection+0x180>
    2706:	c5 c0       	rjmp	.+394    	; 0x2892 <enu_SetClockSelection+0x238>
    2708:	8e 81       	ldd	r24, Y+6	; 0x06
    270a:	9f 81       	ldd	r25, Y+7	; 0x07
    270c:	88 30       	cpi	r24, 0x08	; 8
    270e:	91 05       	cpc	r25, r1
    2710:	09 f4       	brne	.+2      	; 0x2714 <enu_SetClockSelection+0xba>
    2712:	91 c0       	rjmp	.+290    	; 0x2836 <enu_SetClockSelection+0x1dc>
    2714:	2e 81       	ldd	r18, Y+6	; 0x06
    2716:	3f 81       	ldd	r19, Y+7	; 0x07
    2718:	29 30       	cpi	r18, 0x09	; 9
    271a:	31 05       	cpc	r19, r1
    271c:	09 f4       	brne	.+2      	; 0x2720 <enu_SetClockSelection+0xc6>
    271e:	a2 c0       	rjmp	.+324    	; 0x2864 <enu_SetClockSelection+0x20a>
    2720:	b8 c0       	rjmp	.+368    	; 0x2892 <enu_SetClockSelection+0x238>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR0 &= ~ (1 << TCCR0_CS00);
    2722:	a3 e5       	ldi	r26, 0x53	; 83
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e3 e5       	ldi	r30, 0x53	; 83
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	8e 7f       	andi	r24, 0xFE	; 254
    272e:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    2730:	a3 e5       	ldi	r26, 0x53	; 83
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e3 e5       	ldi	r30, 0x53	; 83
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	8d 7f       	andi	r24, 0xFD	; 253
    273c:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    273e:	a3 e5       	ldi	r26, 0x53	; 83
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e3 e5       	ldi	r30, 0x53	; 83
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	8b 7f       	andi	r24, 0xFB	; 251
    274a:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    274c:	19 82       	std	Y+1, r1	; 0x01
    274e:	a1 c1       	rjmp	.+834    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR0 |= (1 << TCCR0_CS00);
    2750:	a3 e5       	ldi	r26, 0x53	; 83
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	e3 e5       	ldi	r30, 0x53	; 83
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	81 60       	ori	r24, 0x01	; 1
    275c:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    275e:	a3 e5       	ldi	r26, 0x53	; 83
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	e3 e5       	ldi	r30, 0x53	; 83
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	8d 7f       	andi	r24, 0xFD	; 253
    276a:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    276c:	a3 e5       	ldi	r26, 0x53	; 83
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e3 e5       	ldi	r30, 0x53	; 83
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	8b 7f       	andi	r24, 0xFB	; 251
    2778:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    277a:	19 82       	std	Y+1, r1	; 0x01
    277c:	8a c1       	rjmp	.+788    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR0 &= ~(1 << TCCR0_CS00);
    277e:	a3 e5       	ldi	r26, 0x53	; 83
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e3 e5       	ldi	r30, 0x53	; 83
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	8e 7f       	andi	r24, 0xFE	; 254
    278a:	8c 93       	st	X, r24
                    TCCR0 |= (1  << TCCR0_CS01);
    278c:	a3 e5       	ldi	r26, 0x53	; 83
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e3 e5       	ldi	r30, 0x53	; 83
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	82 60       	ori	r24, 0x02	; 2
    2798:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS02);
    279a:	a3 e5       	ldi	r26, 0x53	; 83
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e3 e5       	ldi	r30, 0x53	; 83
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	8b 7f       	andi	r24, 0xFB	; 251
    27a6:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    27a8:	19 82       	std	Y+1, r1	; 0x01
    27aa:	73 c1       	rjmp	.+742    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 011
                    TCCR0 |= (1 << TCCR0_CS00);
    27ac:	a3 e5       	ldi	r26, 0x53	; 83
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	e3 e5       	ldi	r30, 0x53	; 83
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	81 60       	ori	r24, 0x01	; 1
    27b8:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    27ba:	a3 e5       	ldi	r26, 0x53	; 83
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	e3 e5       	ldi	r30, 0x53	; 83
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	82 60       	ori	r24, 0x02	; 2
    27c6:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    27c8:	a3 e5       	ldi	r26, 0x53	; 83
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e3 e5       	ldi	r30, 0x53	; 83
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	8b 7f       	andi	r24, 0xFB	; 251
    27d4:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    27d6:	19 82       	std	Y+1, r1	; 0x01
    27d8:	5c c1       	rjmp	.+696    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 100
                    TCCR0 &= ~(1 << TCCR0_CS00);
    27da:	a3 e5       	ldi	r26, 0x53	; 83
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e3 e5       	ldi	r30, 0x53	; 83
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	8e 7f       	andi	r24, 0xFE	; 254
    27e6:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS01);
    27e8:	a3 e5       	ldi	r26, 0x53	; 83
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e3 e5       	ldi	r30, 0x53	; 83
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	8d 7f       	andi	r24, 0xFD	; 253
    27f4:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    27f6:	a3 e5       	ldi	r26, 0x53	; 83
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e3 e5       	ldi	r30, 0x53	; 83
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	84 60       	ori	r24, 0x04	; 4
    2802:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2804:	19 82       	std	Y+1, r1	; 0x01
    2806:	45 c1       	rjmp	.+650    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 101
                    TCCR0 |= (1 << TCCR0_CS00);
    2808:	a3 e5       	ldi	r26, 0x53	; 83
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e3 e5       	ldi	r30, 0x53	; 83
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	81 60       	ori	r24, 0x01	; 1
    2814:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    2816:	a3 e5       	ldi	r26, 0x53	; 83
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e3 e5       	ldi	r30, 0x53	; 83
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	8d 7f       	andi	r24, 0xFD	; 253
    2822:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    2824:	a3 e5       	ldi	r26, 0x53	; 83
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e3 e5       	ldi	r30, 0x53	; 83
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	84 60       	ori	r24, 0x04	; 4
    2830:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2832:	19 82       	std	Y+1, r1	; 0x01
    2834:	2e c1       	rjmp	.+604    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_FALLING_EGDE:
                {
                    //Bits contain 110
                    TCCR0 &= ~(1 << TCCR0_CS00);
    2836:	a3 e5       	ldi	r26, 0x53	; 83
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	e3 e5       	ldi	r30, 0x53	; 83
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	8e 7f       	andi	r24, 0xFE	; 254
    2842:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    2844:	a3 e5       	ldi	r26, 0x53	; 83
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e3 e5       	ldi	r30, 0x53	; 83
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	82 60       	ori	r24, 0x02	; 2
    2850:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    2852:	a3 e5       	ldi	r26, 0x53	; 83
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e3 e5       	ldi	r30, 0x53	; 83
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	84 60       	ori	r24, 0x04	; 4
    285e:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2860:	19 82       	std	Y+1, r1	; 0x01
    2862:	17 c1       	rjmp	.+558    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_RISING_EGDE:
                {
                    //Bits contain 111
                    TCCR0 |= (1 << TCCR0_CS00);
    2864:	a3 e5       	ldi	r26, 0x53	; 83
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e3 e5       	ldi	r30, 0x53	; 83
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	81 60       	ori	r24, 0x01	; 1
    2870:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    2872:	a3 e5       	ldi	r26, 0x53	; 83
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	e3 e5       	ldi	r30, 0x53	; 83
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	82 60       	ori	r24, 0x02	; 2
    287e:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    2880:	a3 e5       	ldi	r26, 0x53	; 83
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	e3 e5       	ldi	r30, 0x53	; 83
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	84 60       	ori	r24, 0x04	; 4
    288c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    288e:	19 82       	std	Y+1, r1	; 0x01
    2890:	00 c1       	rjmp	.+512    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	fd c0       	rjmp	.+506    	; 0x2a92 <enu_SetClockSelection+0x438>
    
        case TIMER_2:
        {
            //Choosing I/O clock each time 
            //Bit contains 0
            ASSR &= ~( 1 << ASSR_AS2);
    2898:	a2 e4       	ldi	r26, 0x42	; 66
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e2 e4       	ldi	r30, 0x42	; 66
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	87 7f       	andi	r24, 0xF7	; 247
    28a4:	8c 93       	st	X, r24
            
            switch (Copy_u8_ClockSelection)
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	28 2f       	mov	r18, r24
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	3d 83       	std	Y+5, r19	; 0x05
    28ae:	2c 83       	std	Y+4, r18	; 0x04
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	9d 81       	ldd	r25, Y+5	; 0x05
    28b4:	83 30       	cpi	r24, 0x03	; 3
    28b6:	91 05       	cpc	r25, r1
    28b8:	09 f4       	brne	.+2      	; 0x28bc <enu_SetClockSelection+0x262>
    28ba:	73 c0       	rjmp	.+230    	; 0x29a2 <enu_SetClockSelection+0x348>
    28bc:	2c 81       	ldd	r18, Y+4	; 0x04
    28be:	3d 81       	ldd	r19, Y+5	; 0x05
    28c0:	24 30       	cpi	r18, 0x04	; 4
    28c2:	31 05       	cpc	r19, r1
    28c4:	84 f4       	brge	.+32     	; 0x28e6 <enu_SetClockSelection+0x28c>
    28c6:	8c 81       	ldd	r24, Y+4	; 0x04
    28c8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ca:	81 30       	cpi	r24, 0x01	; 1
    28cc:	91 05       	cpc	r25, r1
    28ce:	d9 f1       	breq	.+118    	; 0x2946 <enu_SetClockSelection+0x2ec>
    28d0:	2c 81       	ldd	r18, Y+4	; 0x04
    28d2:	3d 81       	ldd	r19, Y+5	; 0x05
    28d4:	22 30       	cpi	r18, 0x02	; 2
    28d6:	31 05       	cpc	r19, r1
    28d8:	0c f0       	brlt	.+2      	; 0x28dc <enu_SetClockSelection+0x282>
    28da:	4c c0       	rjmp	.+152    	; 0x2974 <enu_SetClockSelection+0x31a>
    28dc:	8c 81       	ldd	r24, Y+4	; 0x04
    28de:	9d 81       	ldd	r25, Y+5	; 0x05
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	d1 f0       	breq	.+52     	; 0x2918 <enu_SetClockSelection+0x2be>
    28e4:	d1 c0       	rjmp	.+418    	; 0x2a88 <enu_SetClockSelection+0x42e>
    28e6:	2c 81       	ldd	r18, Y+4	; 0x04
    28e8:	3d 81       	ldd	r19, Y+5	; 0x05
    28ea:	25 30       	cpi	r18, 0x05	; 5
    28ec:	31 05       	cpc	r19, r1
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <enu_SetClockSelection+0x298>
    28f0:	86 c0       	rjmp	.+268    	; 0x29fe <enu_SetClockSelection+0x3a4>
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	9d 81       	ldd	r25, Y+5	; 0x05
    28f6:	85 30       	cpi	r24, 0x05	; 5
    28f8:	91 05       	cpc	r25, r1
    28fa:	0c f4       	brge	.+2      	; 0x28fe <enu_SetClockSelection+0x2a4>
    28fc:	69 c0       	rjmp	.+210    	; 0x29d0 <enu_SetClockSelection+0x376>
    28fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2900:	3d 81       	ldd	r19, Y+5	; 0x05
    2902:	26 30       	cpi	r18, 0x06	; 6
    2904:	31 05       	cpc	r19, r1
    2906:	09 f4       	brne	.+2      	; 0x290a <enu_SetClockSelection+0x2b0>
    2908:	91 c0       	rjmp	.+290    	; 0x2a2c <enu_SetClockSelection+0x3d2>
    290a:	8c 81       	ldd	r24, Y+4	; 0x04
    290c:	9d 81       	ldd	r25, Y+5	; 0x05
    290e:	87 30       	cpi	r24, 0x07	; 7
    2910:	91 05       	cpc	r25, r1
    2912:	09 f4       	brne	.+2      	; 0x2916 <enu_SetClockSelection+0x2bc>
    2914:	a2 c0       	rjmp	.+324    	; 0x2a5a <enu_SetClockSelection+0x400>
    2916:	b8 c0       	rjmp	.+368    	; 0x2a88 <enu_SetClockSelection+0x42e>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR2 &= ~ (1 << TCCR2_CS20);
    2918:	a5 e4       	ldi	r26, 0x45	; 69
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e5 e4       	ldi	r30, 0x45	; 69
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	8e 7f       	andi	r24, 0xFE	; 254
    2924:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    2926:	a5 e4       	ldi	r26, 0x45	; 69
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e5 e4       	ldi	r30, 0x45	; 69
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	8d 7f       	andi	r24, 0xFD	; 253
    2932:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    2934:	a5 e4       	ldi	r26, 0x45	; 69
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e5 e4       	ldi	r30, 0x45	; 69
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	8b 7f       	andi	r24, 0xFB	; 251
    2940:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2942:	19 82       	std	Y+1, r1	; 0x01
    2944:	a6 c0       	rjmp	.+332    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR2 |= (1 << TCCR2_CS20);
    2946:	a5 e4       	ldi	r26, 0x45	; 69
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e5 e4       	ldi	r30, 0x45	; 69
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	81 60       	ori	r24, 0x01	; 1
    2952:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    2954:	a5 e4       	ldi	r26, 0x45	; 69
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e5 e4       	ldi	r30, 0x45	; 69
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	8d 7f       	andi	r24, 0xFD	; 253
    2960:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    2962:	a5 e4       	ldi	r26, 0x45	; 69
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e5 e4       	ldi	r30, 0x45	; 69
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	8b 7f       	andi	r24, 0xFB	; 251
    296e:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2970:	19 82       	std	Y+1, r1	; 0x01
    2972:	8f c0       	rjmp	.+286    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR2 &= ~(1 << TCCR2_CS20);
    2974:	a5 e4       	ldi	r26, 0x45	; 69
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e5 e4       	ldi	r30, 0x45	; 69
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	8e 7f       	andi	r24, 0xFE	; 254
    2980:	8c 93       	st	X, r24
                    TCCR2 |= (1  << TCCR2_CS21);
    2982:	a5 e4       	ldi	r26, 0x45	; 69
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e5 e4       	ldi	r30, 0x45	; 69
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	82 60       	ori	r24, 0x02	; 2
    298e:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS22);
    2990:	a5 e4       	ldi	r26, 0x45	; 69
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e5 e4       	ldi	r30, 0x45	; 69
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	8b 7f       	andi	r24, 0xFB	; 251
    299c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    299e:	19 82       	std	Y+1, r1	; 0x01
    29a0:	78 c0       	rjmp	.+240    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_32:
                {
                    //Bits contain 011
                    TCCR2 |= (1 << TCCR2_CS20);
    29a2:	a5 e4       	ldi	r26, 0x45	; 69
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e5 e4       	ldi	r30, 0x45	; 69
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	81 60       	ori	r24, 0x01	; 1
    29ae:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    29b0:	a5 e4       	ldi	r26, 0x45	; 69
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e5 e4       	ldi	r30, 0x45	; 69
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	82 60       	ori	r24, 0x02	; 2
    29bc:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    29be:	a5 e4       	ldi	r26, 0x45	; 69
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	e5 e4       	ldi	r30, 0x45	; 69
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	8b 7f       	andi	r24, 0xFB	; 251
    29ca:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    29cc:	19 82       	std	Y+1, r1	; 0x01
    29ce:	61 c0       	rjmp	.+194    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 100
                    TCCR2 &= ~(1 << TCCR2_CS20);
    29d0:	a5 e4       	ldi	r26, 0x45	; 69
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e5 e4       	ldi	r30, 0x45	; 69
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	8e 7f       	andi	r24, 0xFE	; 254
    29dc:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS21);
    29de:	a5 e4       	ldi	r26, 0x45	; 69
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e5 e4       	ldi	r30, 0x45	; 69
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	8d 7f       	andi	r24, 0xFD	; 253
    29ea:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    29ec:	a5 e4       	ldi	r26, 0x45	; 69
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e5 e4       	ldi	r30, 0x45	; 69
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	84 60       	ori	r24, 0x04	; 4
    29f8:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    29fa:	19 82       	std	Y+1, r1	; 0x01
    29fc:	4a c0       	rjmp	.+148    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_128:
                {
                    //Bits contain 101
                    TCCR2 |= (1 << TCCR2_CS20);
    29fe:	a5 e4       	ldi	r26, 0x45	; 69
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e5 e4       	ldi	r30, 0x45	; 69
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	81 60       	ori	r24, 0x01	; 1
    2a0a:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    2a0c:	a5 e4       	ldi	r26, 0x45	; 69
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e5 e4       	ldi	r30, 0x45	; 69
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	8d 7f       	andi	r24, 0xFD	; 253
    2a18:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    2a1a:	a5 e4       	ldi	r26, 0x45	; 69
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e5 e4       	ldi	r30, 0x45	; 69
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	84 60       	ori	r24, 0x04	; 4
    2a26:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2a28:	19 82       	std	Y+1, r1	; 0x01
    2a2a:	33 c0       	rjmp	.+102    	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 110
                    TCCR2 &= ~(1 << TCCR2_CS20);
    2a2c:	a5 e4       	ldi	r26, 0x45	; 69
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	e5 e4       	ldi	r30, 0x45	; 69
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	8e 7f       	andi	r24, 0xFE	; 254
    2a38:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    2a3a:	a5 e4       	ldi	r26, 0x45	; 69
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	e5 e4       	ldi	r30, 0x45	; 69
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	82 60       	ori	r24, 0x02	; 2
    2a46:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    2a48:	a5 e4       	ldi	r26, 0x45	; 69
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	e5 e4       	ldi	r30, 0x45	; 69
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	84 60       	ori	r24, 0x04	; 4
    2a54:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2a56:	19 82       	std	Y+1, r1	; 0x01
    2a58:	1c c0       	rjmp	.+56     	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 111
                    TCCR2 |= (1 << TCCR2_CS20);
    2a5a:	a5 e4       	ldi	r26, 0x45	; 69
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e5 e4       	ldi	r30, 0x45	; 69
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	81 60       	ori	r24, 0x01	; 1
    2a66:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    2a68:	a5 e4       	ldi	r26, 0x45	; 69
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	e5 e4       	ldi	r30, 0x45	; 69
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	82 60       	ori	r24, 0x02	; 2
    2a74:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    2a76:	a5 e4       	ldi	r26, 0x45	; 69
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e5 e4       	ldi	r30, 0x45	; 69
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	84 60       	ori	r24, 0x04	; 4
    2a82:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2a84:	19 82       	std	Y+1, r1	; 0x01
    2a86:	05 c0       	rjmp	.+10     	; 0x2a92 <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2a88:	82 e0       	ldi	r24, 0x02	; 2
    2a8a:	89 83       	std	Y+1, r24	; 0x01
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <enu_SetClockSelection+0x438>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2a8e:	82 e0       	ldi	r24, 0x02	; 2
    2a90:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return Local_u8_ErrorFlag;
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a94:	29 96       	adiw	r28, 0x09	; 9
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <enu_SetInterruptMode>:

static ErrorState_t enu_SetInterruptMode(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_InterruptMode)
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <enu_SetInterruptMode+0x6>
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <enu_SetInterruptMode+0x8>
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <enu_SetInterruptMode+0xa>
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	8a 83       	std	Y+2, r24	; 0x02
    2ab6:	6b 83       	std	Y+3, r22	; 0x03
    2ab8:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_TimerNumber)
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	3e 83       	std	Y+6, r19	; 0x06
    2ac6:	2d 83       	std	Y+5, r18	; 0x05
    2ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aca:	9e 81       	ldd	r25, Y+6	; 0x06
    2acc:	81 30       	cpi	r24, 0x01	; 1
    2ace:	91 05       	cpc	r25, r1
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <enu_SetInterruptMode+0x2e>
    2ad2:	7b c0       	rjmp	.+246    	; 0x2bca <enu_SetInterruptMode+0x124>
    2ad4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ad6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ad8:	22 30       	cpi	r18, 0x02	; 2
    2ada:	31 05       	cpc	r19, r1
    2adc:	a9 f1       	breq	.+106    	; 0x2b48 <enu_SetInterruptMode+0xa2>
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <enu_SetInterruptMode+0x42>
    2ae6:	6f c0       	rjmp	.+222    	; 0x2bc6 <enu_SetInterruptMode+0x120>
    {
        case TIMER_0:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	88 23       	and	r24, r24
    2aec:	89 f4       	brne	.+34     	; 0x2b10 <enu_SetInterruptMode+0x6a>
            {
                //Clearing bit 0 (TOIE0)
                TIMSK &= (0xFE);
    2aee:	a9 e5       	ldi	r26, 0x59	; 89
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e9 e5       	ldi	r30, 0x59	; 89
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	8e 7f       	andi	r24, 0xFE	; 254
    2afa:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE0);
    2afc:	a9 e5       	ldi	r26, 0x59	; 89
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e9 e5       	ldi	r30, 0x59	; 89
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	90 81       	ld	r25, Z
    2b06:	8c 81       	ldd	r24, Y+4	; 0x04
    2b08:	89 2b       	or	r24, r25
    2b0a:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2b0c:	19 82       	std	Y+1, r1	; 0x01
    2b0e:	5d c0       	rjmp	.+186    	; 0x2bca <enu_SetInterruptMode+0x124>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	81 30       	cpi	r24, 0x01	; 1
    2b14:	b1 f4       	brne	.+44     	; 0x2b42 <enu_SetInterruptMode+0x9c>
            {
                //Clearing bit 1 (OCIE0)
                TIMSK &= (0xFD);
    2b16:	a9 e5       	ldi	r26, 0x59	; 89
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e9 e5       	ldi	r30, 0x59	; 89
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	8d 7f       	andi	r24, 0xFD	; 253
    2b22:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE0);
    2b24:	a9 e5       	ldi	r26, 0x59	; 89
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	e9 e5       	ldi	r30, 0x59	; 89
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	28 2f       	mov	r18, r24
    2b30:	8c 81       	ldd	r24, Y+4	; 0x04
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	82 2b       	or	r24, r18
    2b3c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2b3e:	19 82       	std	Y+1, r1	; 0x01
    2b40:	44 c0       	rjmp	.+136    	; 0x2bca <enu_SetInterruptMode+0x124>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	41 c0       	rjmp	.+130    	; 0x2bca <enu_SetInterruptMode+0x124>
            break;
        }

        case TIMER_2:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	88 23       	and	r24, r24
    2b4c:	e9 f4       	brne	.+58     	; 0x2b88 <enu_SetInterruptMode+0xe2>
            {
                //Clearing bit 6 (TOIE2)
                TIMSK &= (0xBF);
    2b4e:	a9 e5       	ldi	r26, 0x59	; 89
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	e9 e5       	ldi	r30, 0x59	; 89
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	8f 7b       	andi	r24, 0xBF	; 191
    2b5a:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE2);
    2b5c:	a9 e5       	ldi	r26, 0x59	; 89
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	e9 e5       	ldi	r30, 0x59	; 89
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	28 2f       	mov	r18, r24
    2b68:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6a:	88 2f       	mov	r24, r24
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	00 24       	eor	r0, r0
    2b70:	96 95       	lsr	r25
    2b72:	87 95       	ror	r24
    2b74:	07 94       	ror	r0
    2b76:	96 95       	lsr	r25
    2b78:	87 95       	ror	r24
    2b7a:	07 94       	ror	r0
    2b7c:	98 2f       	mov	r25, r24
    2b7e:	80 2d       	mov	r24, r0
    2b80:	82 2b       	or	r24, r18
    2b82:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2b84:	19 82       	std	Y+1, r1	; 0x01
    2b86:	21 c0       	rjmp	.+66     	; 0x2bca <enu_SetInterruptMode+0x124>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	81 30       	cpi	r24, 0x01	; 1
    2b8c:	c9 f4       	brne	.+50     	; 0x2bc0 <enu_SetInterruptMode+0x11a>
            {
                //Clearing bit 7 (OCIE2)
                TIMSK &= (0x7F);
    2b8e:	a9 e5       	ldi	r26, 0x59	; 89
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	e9 e5       	ldi	r30, 0x59	; 89
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	8f 77       	andi	r24, 0x7F	; 127
    2b9a:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE2);
    2b9c:	a9 e5       	ldi	r26, 0x59	; 89
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	e9 e5       	ldi	r30, 0x59	; 89
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    2baa:	88 2f       	mov	r24, r24
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	96 95       	lsr	r25
    2bb0:	98 2f       	mov	r25, r24
    2bb2:	88 27       	eor	r24, r24
    2bb4:	97 95       	ror	r25
    2bb6:	87 95       	ror	r24
    2bb8:	82 2b       	or	r24, r18
    2bba:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2bbc:	19 82       	std	Y+1, r1	; 0x01
    2bbe:	05 c0       	rjmp	.+10     	; 0x2bca <enu_SetInterruptMode+0x124>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2bc0:	82 e0       	ldi	r24, 0x02	; 2
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <enu_SetInterruptMode+0x124>
                        
            break;
        }

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2bc6:	82 e0       	ldi	r24, 0x02	; 2
    2bc8:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bcc:	26 96       	adiw	r28, 0x06	; 6
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <enu_SetOCxBehavior>:

static ErrorState_t enu_SetOCxBehavior(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_OCxPinBehavior)
{
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <enu_SetOCxBehavior+0x6>
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <enu_SetOCxBehavior+0x8>
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <enu_SetOCxBehavior+0xa>
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	8a 83       	std	Y+2, r24	; 0x02
    2bee:	6b 83       	std	Y+3, r22	; 0x03
    2bf0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	3e 83       	std	Y+6, r19	; 0x06
    2bfe:	2d 83       	std	Y+5, r18	; 0x05
    2c00:	8d 81       	ldd	r24, Y+5	; 0x05
    2c02:	9e 81       	ldd	r25, Y+6	; 0x06
    2c04:	81 30       	cpi	r24, 0x01	; 1
    2c06:	91 05       	cpc	r25, r1
    2c08:	09 f4       	brne	.+2      	; 0x2c0c <enu_SetOCxBehavior+0x2e>
    2c0a:	d3 c0       	rjmp	.+422    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
    2c0c:	2d 81       	ldd	r18, Y+5	; 0x05
    2c0e:	3e 81       	ldd	r19, Y+6	; 0x06
    2c10:	22 30       	cpi	r18, 0x02	; 2
    2c12:	31 05       	cpc	r19, r1
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <enu_SetOCxBehavior+0x3a>
    2c16:	68 c0       	rjmp	.+208    	; 0x2ce8 <enu_SetOCxBehavior+0x10a>
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <enu_SetOCxBehavior+0x44>
    2c20:	c6 c0       	rjmp	.+396    	; 0x2dae <enu_SetOCxBehavior+0x1d0>
    {
        case TIMER_0:
        {   
            //Clearing bits 5 and 4
            TCCR0 &= (0xCF);
    2c22:	a3 e5       	ldi	r26, 0x53	; 83
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e3 e5       	ldi	r30, 0x53	; 83
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	8f 7c       	andi	r24, 0xCF	; 207
    2c2e:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    2c30:	8c 81       	ldd	r24, Y+4	; 0x04
    2c32:	88 23       	and	r24, r24
    2c34:	11 f4       	brne	.+4      	; 0x2c3a <enu_SetOCxBehavior+0x5c>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    2c36:	19 82       	std	Y+1, r1	; 0x01
    2c38:	bc c0       	rjmp	.+376    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    2c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3c:	88 23       	and	r24, r24
    2c3e:	19 f0       	breq	.+6      	; 0x2c46 <enu_SetOCxBehavior+0x68>
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	81 30       	cpi	r24, 0x01	; 1
    2c44:	39 f5       	brne	.+78     	; 0x2c94 <enu_SetOCxBehavior+0xb6>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    2c46:	8c 81       	ldd	r24, Y+4	; 0x04
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	49 f4       	brne	.+18     	; 0x2c5e <enu_SetOCxBehavior+0x80>
                {
                    //Bits contain 01
                    TCCR0 |= (1 << TCCR0_COM00);
    2c4c:	a3 e5       	ldi	r26, 0x53	; 83
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e3 e5       	ldi	r30, 0x53	; 83
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	80 61       	ori	r24, 0x10	; 16
    2c58:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2c5a:	19 82       	std	Y+1, r1	; 0x01
    2c5c:	aa c0       	rjmp	.+340    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    2c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c60:	82 30       	cpi	r24, 0x02	; 2
    2c62:	49 f4       	brne	.+18     	; 0x2c76 <enu_SetOCxBehavior+0x98>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    2c64:	a3 e5       	ldi	r26, 0x53	; 83
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e3 e5       	ldi	r30, 0x53	; 83
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	80 62       	ori	r24, 0x20	; 32
    2c70:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2c72:	19 82       	std	Y+1, r1	; 0x01
    2c74:	9e c0       	rjmp	.+316    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    2c76:	8c 81       	ldd	r24, Y+4	; 0x04
    2c78:	83 30       	cpi	r24, 0x03	; 3
    2c7a:	49 f4       	brne	.+18     	; 0x2c8e <enu_SetOCxBehavior+0xb0>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    2c7c:	a3 e5       	ldi	r26, 0x53	; 83
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	e3 e5       	ldi	r30, 0x53	; 83
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	80 63       	ori	r24, 0x30	; 48
    2c88:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2c8a:	19 82       	std	Y+1, r1	; 0x01
    2c8c:	92 c0       	rjmp	.+292    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2c8e:	82 e0       	ldi	r24, 0x02	; 2
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	8f c0       	rjmp	.+286    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	82 30       	cpi	r24, 0x02	; 2
    2c98:	19 f0       	breq	.+6      	; 0x2ca0 <enu_SetOCxBehavior+0xc2>
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	83 30       	cpi	r24, 0x03	; 3
    2c9e:	09 f5       	brne	.+66     	; 0x2ce2 <enu_SetOCxBehavior+0x104>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    2ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca2:	84 30       	cpi	r24, 0x04	; 4
    2ca4:	19 f0       	breq	.+6      	; 0x2cac <enu_SetOCxBehavior+0xce>
    2ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca8:	86 30       	cpi	r24, 0x06	; 6
    2caa:	49 f4       	brne	.+18     	; 0x2cbe <enu_SetOCxBehavior+0xe0>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    2cac:	a3 e5       	ldi	r26, 0x53	; 83
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e3 e5       	ldi	r30, 0x53	; 83
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	80 62       	ori	r24, 0x20	; 32
    2cb8:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2cba:	19 82       	std	Y+1, r1	; 0x01
    2cbc:	7a c0       	rjmp	.+244    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    2cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc0:	85 30       	cpi	r24, 0x05	; 5
    2cc2:	19 f0       	breq	.+6      	; 0x2cca <enu_SetOCxBehavior+0xec>
    2cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc6:	87 30       	cpi	r24, 0x07	; 7
    2cc8:	49 f4       	brne	.+18     	; 0x2cdc <enu_SetOCxBehavior+0xfe>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    2cca:	a3 e5       	ldi	r26, 0x53	; 83
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e3 e5       	ldi	r30, 0x53	; 83
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	80 63       	ori	r24, 0x30	; 48
    2cd6:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2cd8:	19 82       	std	Y+1, r1	; 0x01
    2cda:	6b c0       	rjmp	.+214    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2cdc:	82 e0       	ldi	r24, 0x02	; 2
    2cde:	89 83       	std	Y+1, r24	; 0x01
    2ce0:	68 c0       	rjmp	.+208    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	89 83       	std	Y+1, r24	; 0x01
    2ce6:	65 c0       	rjmp	.+202    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
        
        case TIMER_2:
        {
            
            //Clearing bits 5 and 4
            TCCR2 &= (0xCF);
    2ce8:	a5 e4       	ldi	r26, 0x45	; 69
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e5 e4       	ldi	r30, 0x45	; 69
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	8f 7c       	andi	r24, 0xCF	; 207
    2cf4:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    2cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf8:	88 23       	and	r24, r24
    2cfa:	11 f4       	brne	.+4      	; 0x2d00 <enu_SetOCxBehavior+0x122>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    2cfc:	19 82       	std	Y+1, r1	; 0x01
    2cfe:	59 c0       	rjmp	.+178    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	88 23       	and	r24, r24
    2d04:	19 f0       	breq	.+6      	; 0x2d0c <enu_SetOCxBehavior+0x12e>
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	39 f5       	brne	.+78     	; 0x2d5a <enu_SetOCxBehavior+0x17c>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    2d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0e:	81 30       	cpi	r24, 0x01	; 1
    2d10:	49 f4       	brne	.+18     	; 0x2d24 <enu_SetOCxBehavior+0x146>
                {
                    //Bits contain 01
                    TCCR2 |= (1 << TCCR2_COM20);
    2d12:	a5 e4       	ldi	r26, 0x45	; 69
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e5 e4       	ldi	r30, 0x45	; 69
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	80 61       	ori	r24, 0x10	; 16
    2d1e:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2d20:	19 82       	std	Y+1, r1	; 0x01
    2d22:	47 c0       	rjmp	.+142    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    2d24:	8c 81       	ldd	r24, Y+4	; 0x04
    2d26:	82 30       	cpi	r24, 0x02	; 2
    2d28:	49 f4       	brne	.+18     	; 0x2d3c <enu_SetOCxBehavior+0x15e>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    2d2a:	a5 e4       	ldi	r26, 0x45	; 69
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e5 e4       	ldi	r30, 0x45	; 69
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	80 62       	ori	r24, 0x20	; 32
    2d36:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2d38:	19 82       	std	Y+1, r1	; 0x01
    2d3a:	3b c0       	rjmp	.+118    	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    2d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d3e:	83 30       	cpi	r24, 0x03	; 3
    2d40:	49 f4       	brne	.+18     	; 0x2d54 <enu_SetOCxBehavior+0x176>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    2d42:	a5 e4       	ldi	r26, 0x45	; 69
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e5 e4       	ldi	r30, 0x45	; 69
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	80 63       	ori	r24, 0x30	; 48
    2d4e:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2d50:	19 82       	std	Y+1, r1	; 0x01
    2d52:	2f c0       	rjmp	.+94     	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2d54:	82 e0       	ldi	r24, 0x02	; 2
    2d56:	89 83       	std	Y+1, r24	; 0x01
    2d58:	2c c0       	rjmp	.+88     	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    2d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5c:	82 30       	cpi	r24, 0x02	; 2
    2d5e:	19 f0       	breq	.+6      	; 0x2d66 <enu_SetOCxBehavior+0x188>
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	83 30       	cpi	r24, 0x03	; 3
    2d64:	09 f5       	brne	.+66     	; 0x2da8 <enu_SetOCxBehavior+0x1ca>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    2d66:	8c 81       	ldd	r24, Y+4	; 0x04
    2d68:	84 30       	cpi	r24, 0x04	; 4
    2d6a:	19 f0       	breq	.+6      	; 0x2d72 <enu_SetOCxBehavior+0x194>
    2d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6e:	86 30       	cpi	r24, 0x06	; 6
    2d70:	49 f4       	brne	.+18     	; 0x2d84 <enu_SetOCxBehavior+0x1a6>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    2d72:	a5 e4       	ldi	r26, 0x45	; 69
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	e5 e4       	ldi	r30, 0x45	; 69
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	80 62       	ori	r24, 0x20	; 32
    2d7e:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2d80:	19 82       	std	Y+1, r1	; 0x01
    2d82:	17 c0       	rjmp	.+46     	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    2d84:	8c 81       	ldd	r24, Y+4	; 0x04
    2d86:	85 30       	cpi	r24, 0x05	; 5
    2d88:	19 f0       	breq	.+6      	; 0x2d90 <enu_SetOCxBehavior+0x1b2>
    2d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8c:	87 30       	cpi	r24, 0x07	; 7
    2d8e:	49 f4       	brne	.+18     	; 0x2da2 <enu_SetOCxBehavior+0x1c4>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    2d90:	a5 e4       	ldi	r26, 0x45	; 69
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	e5 e4       	ldi	r30, 0x45	; 69
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	80 63       	ori	r24, 0x30	; 48
    2d9c:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2d9e:	19 82       	std	Y+1, r1	; 0x01
    2da0:	08 c0       	rjmp	.+16     	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	89 83       	std	Y+1, r24	; 0x01
    2da6:	05 c0       	rjmp	.+10     	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2da8:	82 e0       	ldi	r24, 0x02	; 2
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <enu_SetOCxBehavior+0x1d4>
            }
            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2dae:	82 e0       	ldi	r24, 0x02	; 2
    2db0:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2db4:	26 96       	adiw	r28, 0x06	; 6
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	cf 91       	pop	r28
    2dc2:	df 91       	pop	r29
    2dc4:	08 95       	ret

00002dc6 <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
    2dce:	78 94       	sei
}
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
    2dde:	f8 94       	cli

    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <EXTI_enu_Initialization+0x6>
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    2df4:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    2df6:	19 82       	std	Y+1, r1	; 0x01
    2df8:	3b c0       	rjmp	.+118    	; 0x2e70 <EXTI_enu_Initialization+0x8a>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	28 2f       	mov	r18, r24
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	c9 01       	movw	r24, r18
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	82 0f       	add	r24, r18
    2e08:	93 1f       	adc	r25, r19
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	ee 57       	subi	r30, 0x7E	; 126
    2e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e10:	40 81       	ld	r20, Z
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	c9 01       	movw	r24, r18
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	82 0f       	add	r24, r18
    2e20:	93 1f       	adc	r25, r19
    2e22:	fc 01       	movw	r30, r24
    2e24:	ed 57       	subi	r30, 0x7D	; 125
    2e26:	fe 4f       	sbci	r31, 0xFE	; 254
    2e28:	90 81       	ld	r25, Z
    2e2a:	84 2f       	mov	r24, r20
    2e2c:	69 2f       	mov	r22, r25
    2e2e:	0e 94 b5 18 	call	0x316a	; 0x316a <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	28 2f       	mov	r18, r24
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	c9 01       	movw	r24, r18
    2e3a:	88 0f       	add	r24, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	82 0f       	add	r24, r18
    2e40:	93 1f       	adc	r25, r19
    2e42:	fc 01       	movw	r30, r24
    2e44:	ee 57       	subi	r30, 0x7E	; 126
    2e46:	fe 4f       	sbci	r31, 0xFE	; 254
    2e48:	40 81       	ld	r20, Z
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	28 2f       	mov	r18, r24
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	c9 01       	movw	r24, r18
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	82 0f       	add	r24, r18
    2e58:	93 1f       	adc	r25, r19
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	ec 57       	subi	r30, 0x7C	; 124
    2e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e60:	90 81       	ld	r25, Z
    2e62:	84 2f       	mov	r24, r20
    2e64:	69 2f       	mov	r22, r25
    2e66:	0e 94 30 19 	call	0x3260	; 0x3260 <enu_SetSenseLevel>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	8f 5f       	subi	r24, 0xFF	; 255
    2e6e:	89 83       	std	Y+1, r24	; 0x01
    2e70:	90 91 81 01 	lds	r25, 0x0181
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	89 17       	cp	r24, r25
    2e78:	08 f4       	brcc	.+2      	; 0x2e7c <EXTI_enu_Initialization+0x96>
    2e7a:	bf cf       	rjmp	.-130    	; 0x2dfa <EXTI_enu_Initialization+0x14>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    }
    
    Local_u8_ErrorFlag = ES_OK;
    2e7c:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	08 95       	ret

00002e8a <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <EXTI_enu_ISC+0x6>
    2e90:	0f 92       	push	r0
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	8a 83       	std	Y+2, r24	; 0x02
    2e98:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	6b 81       	ldd	r22, Y+3	; 0x03
    2ea2:	0e 94 30 19 	call	0x3260	; 0x3260 <enu_SetSenseLevel>
    2ea6:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <EXTI_enu_INTMode+0x6>
    2ebc:	0f 92       	push	r0
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	8a 83       	std	Y+2, r24	; 0x02
    2ec4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
    2eca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ecc:	6b 81       	ldd	r22, Y+3	; 0x03
    2ece:	0e 94 b5 18 	call	0x316a	; 0x316a <enu_SetMode>
    2ed2:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	00 d0       	rcall	.+0      	; 0x2ee8 <EXTI_enu_GetPIF+0x6>
    2ee8:	00 d0       	rcall	.+0      	; 0x2eea <EXTI_enu_GetPIF+0x8>
    2eea:	00 d0       	rcall	.+0      	; 0x2eec <EXTI_enu_GetPIF+0xa>
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	8a 83       	std	Y+2, r24	; 0x02
    2ef2:	7c 83       	std	Y+4, r23	; 0x04
    2ef4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	9c 81       	ldd	r25, Y+4	; 0x04
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	d1 f1       	breq	.+116    	; 0x2f76 <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	28 2f       	mov	r18, r24
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	3e 83       	std	Y+6, r19	; 0x06
    2f0a:	2d 83       	std	Y+5, r18	; 0x05
    2f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f10:	81 30       	cpi	r24, 0x01	; 1
    2f12:	91 05       	cpc	r25, r1
    2f14:	b1 f0       	breq	.+44     	; 0x2f42 <EXTI_enu_GetPIF+0x60>
    2f16:	2d 81       	ldd	r18, Y+5	; 0x05
    2f18:	3e 81       	ldd	r19, Y+6	; 0x06
    2f1a:	22 30       	cpi	r18, 0x02	; 2
    2f1c:	31 05       	cpc	r19, r1
    2f1e:	e1 f0       	breq	.+56     	; 0x2f58 <EXTI_enu_GetPIF+0x76>
    2f20:	8d 81       	ldd	r24, Y+5	; 0x05
    2f22:	9e 81       	ldd	r25, Y+6	; 0x06
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	21 f5       	brne	.+72     	; 0x2f70 <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
    2f28:	ea e5       	ldi	r30, 0x5A	; 90
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	82 95       	swap	r24
    2f30:	86 95       	lsr	r24
    2f32:	86 95       	lsr	r24
    2f34:	83 70       	andi	r24, 0x03	; 3
    2f36:	81 70       	andi	r24, 0x01	; 1
    2f38:	eb 81       	ldd	r30, Y+3	; 0x03
    2f3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f3c:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    2f3e:	19 82       	std	Y+1, r1	; 0x01
    2f40:	1c c0       	rjmp	.+56     	; 0x2f7a <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
    2f42:	ea e5       	ldi	r30, 0x5A	; 90
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	88 1f       	adc	r24, r24
    2f4a:	88 27       	eor	r24, r24
    2f4c:	88 1f       	adc	r24, r24
    2f4e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f50:	fc 81       	ldd	r31, Y+4	; 0x04
    2f52:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    2f54:	19 82       	std	Y+1, r1	; 0x01
    2f56:	11 c0       	rjmp	.+34     	; 0x2f7a <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
    2f58:	ea e5       	ldi	r30, 0x5A	; 90
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	82 95       	swap	r24
    2f60:	86 95       	lsr	r24
    2f62:	87 70       	andi	r24, 0x07	; 7
    2f64:	81 70       	andi	r24, 0x01	; 1
    2f66:	eb 81       	ldd	r30, Y+3	; 0x03
    2f68:	fc 81       	ldd	r31, Y+4	; 0x04
    2f6a:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    2f6c:	19 82       	std	Y+1, r1	; 0x01
    2f6e:	05 c0       	rjmp	.+10     	; 0x2f7a <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2f76:	83 e0       	ldi	r24, 0x03	; 3
    2f78:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f7c:	26 96       	adiw	r28, 0x06	; 6
    2f7e:	0f b6       	in	r0, 0x3f	; 63
    2f80:	f8 94       	cli
    2f82:	de bf       	out	0x3e, r29	; 62
    2f84:	0f be       	out	0x3f, r0	; 63
    2f86:	cd bf       	out	0x3d, r28	; 61
    2f88:	cf 91       	pop	r28
    2f8a:	df 91       	pop	r29
    2f8c:	08 95       	ret

00002f8e <EXTI_enu_ClearINTFx>:

extern ErrorState_t EXTI_enu_ClearINTFx (u8 Copy_u8_INTNumber)
{
    2f8e:	df 93       	push	r29
    2f90:	cf 93       	push	r28
    2f92:	00 d0       	rcall	.+0      	; 0x2f94 <EXTI_enu_ClearINTFx+0x6>
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, EXTI_HIGH);
    2f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa0:	61 e0       	ldi	r22, 0x01	; 1
    2fa2:	0e 94 d7 19 	call	0x33ae	; 0x33ae <enu_SetFlagValue>
    2fa6:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	08 95       	ret

00002fb4 <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void), void* Copy_pvid_Parameters)
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <EXTI_enu_SetCallBack+0x6>
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <EXTI_enu_SetCallBack+0x8>
    2fbc:	00 d0       	rcall	.+0      	; 0x2fbe <EXTI_enu_SetCallBack+0xa>
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	8a 83       	std	Y+2, r24	; 0x02
    2fc4:	7c 83       	std	Y+4, r23	; 0x04
    2fc6:	6b 83       	std	Y+3, r22	; 0x03
    2fc8:	5e 83       	std	Y+6, r21	; 0x06
    2fca:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	d1 f0       	breq	.+52     	; 0x300c <EXTI_enu_SetCallBack+0x58>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	88 2f       	mov	r24, r24
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	2b 81       	ldd	r18, Y+3	; 0x03
    2fe0:	3c 81       	ldd	r19, Y+4	; 0x04
    2fe2:	88 0f       	add	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	e6 51       	subi	r30, 0x16	; 22
    2fea:	fe 4f       	sbci	r31, 0xFE	; 254
    2fec:	31 83       	std	Z+1, r19	; 0x01
    2fee:	20 83       	st	Z, r18

        apvid_ISRParameters[Copy_u8_INTNumber] = Copy_pvid_Parameters;
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	88 2f       	mov	r24, r24
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	e0 51       	subi	r30, 0x10	; 16
    2ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    3000:	8d 81       	ldd	r24, Y+5	; 0x05
    3002:	9e 81       	ldd	r25, Y+6	; 0x06
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    3008:	19 82       	std	Y+1, r1	; 0x01
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <EXTI_enu_SetCallBack+0x5c>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    300c:	82 e0       	ldi	r24, 0x02	; 2
    300e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3010:	89 81       	ldd	r24, Y+1	; 0x01
}
    3012:	26 96       	adiw	r28, 0x06	; 6
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
    3024:	1f 92       	push	r1
    3026:	0f 92       	push	r0
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	0f 92       	push	r0
    302c:	11 24       	eor	r1, r1
    302e:	2f 93       	push	r18
    3030:	3f 93       	push	r19
    3032:	4f 93       	push	r20
    3034:	5f 93       	push	r21
    3036:	6f 93       	push	r22
    3038:	7f 93       	push	r23
    303a:	8f 93       	push	r24
    303c:	9f 93       	push	r25
    303e:	af 93       	push	r26
    3040:	bf 93       	push	r27
    3042:	ef 93       	push	r30
    3044:	ff 93       	push	r31
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
    304e:	80 91 ea 01 	lds	r24, 0x01EA
    3052:	90 91 eb 01 	lds	r25, 0x01EB
    3056:	00 97       	sbiw	r24, 0x00	; 0
    3058:	49 f0       	breq	.+18     	; 0x306c <__vector_1+0x48>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
    305a:	e0 91 ea 01 	lds	r30, 0x01EA
    305e:	f0 91 eb 01 	lds	r31, 0x01EB
    3062:	80 91 f0 01 	lds	r24, 0x01F0
    3066:	90 91 f1 01 	lds	r25, 0x01F1
    306a:	09 95       	icall
    }
}
    306c:	cf 91       	pop	r28
    306e:	df 91       	pop	r29
    3070:	ff 91       	pop	r31
    3072:	ef 91       	pop	r30
    3074:	bf 91       	pop	r27
    3076:	af 91       	pop	r26
    3078:	9f 91       	pop	r25
    307a:	8f 91       	pop	r24
    307c:	7f 91       	pop	r23
    307e:	6f 91       	pop	r22
    3080:	5f 91       	pop	r21
    3082:	4f 91       	pop	r20
    3084:	3f 91       	pop	r19
    3086:	2f 91       	pop	r18
    3088:	0f 90       	pop	r0
    308a:	0f be       	out	0x3f, r0	; 63
    308c:	0f 90       	pop	r0
    308e:	1f 90       	pop	r1
    3090:	18 95       	reti

00003092 <__vector_2>:
//INT1
void __vector_2 (void)
{
    3092:	1f 92       	push	r1
    3094:	0f 92       	push	r0
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	0f 92       	push	r0
    309a:	11 24       	eor	r1, r1
    309c:	2f 93       	push	r18
    309e:	3f 93       	push	r19
    30a0:	4f 93       	push	r20
    30a2:	5f 93       	push	r21
    30a4:	6f 93       	push	r22
    30a6:	7f 93       	push	r23
    30a8:	8f 93       	push	r24
    30aa:	9f 93       	push	r25
    30ac:	af 93       	push	r26
    30ae:	bf 93       	push	r27
    30b0:	ef 93       	push	r30
    30b2:	ff 93       	push	r31
    30b4:	df 93       	push	r29
    30b6:	cf 93       	push	r28
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
    30bc:	80 91 ec 01 	lds	r24, 0x01EC
    30c0:	90 91 ed 01 	lds	r25, 0x01ED
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	49 f0       	breq	.+18     	; 0x30da <__vector_2+0x48>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
    30c8:	e0 91 ec 01 	lds	r30, 0x01EC
    30cc:	f0 91 ed 01 	lds	r31, 0x01ED
    30d0:	80 91 f2 01 	lds	r24, 0x01F2
    30d4:	90 91 f3 01 	lds	r25, 0x01F3
    30d8:	09 95       	icall
    }
}
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	ff 91       	pop	r31
    30e0:	ef 91       	pop	r30
    30e2:	bf 91       	pop	r27
    30e4:	af 91       	pop	r26
    30e6:	9f 91       	pop	r25
    30e8:	8f 91       	pop	r24
    30ea:	7f 91       	pop	r23
    30ec:	6f 91       	pop	r22
    30ee:	5f 91       	pop	r21
    30f0:	4f 91       	pop	r20
    30f2:	3f 91       	pop	r19
    30f4:	2f 91       	pop	r18
    30f6:	0f 90       	pop	r0
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	0f 90       	pop	r0
    30fc:	1f 90       	pop	r1
    30fe:	18 95       	reti

00003100 <__vector_3>:
//INT2
void __vector_3 (void)
{
    3100:	1f 92       	push	r1
    3102:	0f 92       	push	r0
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	0f 92       	push	r0
    3108:	11 24       	eor	r1, r1
    310a:	2f 93       	push	r18
    310c:	3f 93       	push	r19
    310e:	4f 93       	push	r20
    3110:	5f 93       	push	r21
    3112:	6f 93       	push	r22
    3114:	7f 93       	push	r23
    3116:	8f 93       	push	r24
    3118:	9f 93       	push	r25
    311a:	af 93       	push	r26
    311c:	bf 93       	push	r27
    311e:	ef 93       	push	r30
    3120:	ff 93       	push	r31
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
    312a:	80 91 ee 01 	lds	r24, 0x01EE
    312e:	90 91 ef 01 	lds	r25, 0x01EF
    3132:	00 97       	sbiw	r24, 0x00	; 0
    3134:	39 f0       	breq	.+14     	; 0x3144 <__vector_3+0x44>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
    3136:	e0 91 ee 01 	lds	r30, 0x01EE
    313a:	f0 91 ef 01 	lds	r31, 0x01EF
    313e:	82 e0       	ldi	r24, 0x02	; 2
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	09 95       	icall
    }
    
}
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	ff 91       	pop	r31
    314a:	ef 91       	pop	r30
    314c:	bf 91       	pop	r27
    314e:	af 91       	pop	r26
    3150:	9f 91       	pop	r25
    3152:	8f 91       	pop	r24
    3154:	7f 91       	pop	r23
    3156:	6f 91       	pop	r22
    3158:	5f 91       	pop	r21
    315a:	4f 91       	pop	r20
    315c:	3f 91       	pop	r19
    315e:	2f 91       	pop	r18
    3160:	0f 90       	pop	r0
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	0f 90       	pop	r0
    3166:	1f 90       	pop	r1
    3168:	18 95       	reti

0000316a <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    316a:	df 93       	push	r29
    316c:	cf 93       	push	r28
    316e:	00 d0       	rcall	.+0      	; 0x3170 <enu_SetMode+0x6>
    3170:	00 d0       	rcall	.+0      	; 0x3172 <enu_SetMode+0x8>
    3172:	0f 92       	push	r0
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	8a 83       	std	Y+2, r24	; 0x02
    317a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    3180:	8a 81       	ldd	r24, Y+2	; 0x02
    3182:	28 2f       	mov	r18, r24
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	3d 83       	std	Y+5, r19	; 0x05
    3188:	2c 83       	std	Y+4, r18	; 0x04
    318a:	8c 81       	ldd	r24, Y+4	; 0x04
    318c:	9d 81       	ldd	r25, Y+5	; 0x05
    318e:	81 30       	cpi	r24, 0x01	; 1
    3190:	91 05       	cpc	r25, r1
    3192:	29 f1       	breq	.+74     	; 0x31de <enu_SetMode+0x74>
    3194:	2c 81       	ldd	r18, Y+4	; 0x04
    3196:	3d 81       	ldd	r19, Y+5	; 0x05
    3198:	22 30       	cpi	r18, 0x02	; 2
    319a:	31 05       	cpc	r19, r1
    319c:	d9 f1       	breq	.+118    	; 0x3214 <enu_SetMode+0xaa>
    319e:	8c 81       	ldd	r24, Y+4	; 0x04
    31a0:	9d 81       	ldd	r25, Y+5	; 0x05
    31a2:	00 97       	sbiw	r24, 0x00	; 0
    31a4:	09 f0       	breq	.+2      	; 0x31a8 <enu_SetMode+0x3e>
    31a6:	51 c0       	rjmp	.+162    	; 0x324a <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	81 30       	cpi	r24, 0x01	; 1
    31ac:	49 f4       	brne	.+18     	; 0x31c0 <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
    31ae:	ab e5       	ldi	r26, 0x5B	; 91
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	eb e5       	ldi	r30, 0x5B	; 91
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	80 64       	ori	r24, 0x40	; 64
    31ba:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    31bc:	19 82       	std	Y+1, r1	; 0x01
    31be:	47 c0       	rjmp	.+142    	; 0x324e <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	88 23       	and	r24, r24
    31c4:	49 f4       	brne	.+18     	; 0x31d8 <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
    31c6:	ab e5       	ldi	r26, 0x5B	; 91
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	eb e5       	ldi	r30, 0x5B	; 91
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	80 81       	ld	r24, Z
    31d0:	8f 7b       	andi	r24, 0xBF	; 191
    31d2:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    31d4:	19 82       	std	Y+1, r1	; 0x01
    31d6:	3b c0       	rjmp	.+118    	; 0x324e <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    31d8:	82 e0       	ldi	r24, 0x02	; 2
    31da:	89 83       	std	Y+1, r24	; 0x01
    31dc:	38 c0       	rjmp	.+112    	; 0x324e <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    31de:	8b 81       	ldd	r24, Y+3	; 0x03
    31e0:	81 30       	cpi	r24, 0x01	; 1
    31e2:	49 f4       	brne	.+18     	; 0x31f6 <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
    31e4:	ab e5       	ldi	r26, 0x5B	; 91
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	eb e5       	ldi	r30, 0x5B	; 91
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	80 68       	ori	r24, 0x80	; 128
    31f0:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    31f2:	19 82       	std	Y+1, r1	; 0x01
    31f4:	2c c0       	rjmp	.+88     	; 0x324e <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	88 23       	and	r24, r24
    31fa:	49 f4       	brne	.+18     	; 0x320e <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
    31fc:	ab e5       	ldi	r26, 0x5B	; 91
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	eb e5       	ldi	r30, 0x5B	; 91
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	8f 77       	andi	r24, 0x7F	; 127
    3208:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    320a:	19 82       	std	Y+1, r1	; 0x01
    320c:	20 c0       	rjmp	.+64     	; 0x324e <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    320e:	82 e0       	ldi	r24, 0x02	; 2
    3210:	89 83       	std	Y+1, r24	; 0x01
    3212:	1d c0       	rjmp	.+58     	; 0x324e <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    3214:	8b 81       	ldd	r24, Y+3	; 0x03
    3216:	81 30       	cpi	r24, 0x01	; 1
    3218:	49 f4       	brne	.+18     	; 0x322c <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
    321a:	ab e5       	ldi	r26, 0x5B	; 91
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	eb e5       	ldi	r30, 0x5B	; 91
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	80 62       	ori	r24, 0x20	; 32
    3226:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    3228:	19 82       	std	Y+1, r1	; 0x01
    322a:	11 c0       	rjmp	.+34     	; 0x324e <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    322c:	8b 81       	ldd	r24, Y+3	; 0x03
    322e:	88 23       	and	r24, r24
    3230:	49 f4       	brne	.+18     	; 0x3244 <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
    3232:	ab e5       	ldi	r26, 0x5B	; 91
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	eb e5       	ldi	r30, 0x5B	; 91
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	8f 7d       	andi	r24, 0xDF	; 223
    323e:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    3240:	19 82       	std	Y+1, r1	; 0x01
    3242:	05 c0       	rjmp	.+10     	; 0x324e <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3244:	82 e0       	ldi	r24, 0x02	; 2
    3246:	89 83       	std	Y+1, r24	; 0x01
    3248:	02 c0       	rjmp	.+4      	; 0x324e <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    324a:	82 e0       	ldi	r24, 0x02	; 2
    324c:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    324e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	08 95       	ret

00003260 <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    3260:	df 93       	push	r29
    3262:	cf 93       	push	r28
    3264:	00 d0       	rcall	.+0      	; 0x3266 <enu_SetSenseLevel+0x6>
    3266:	00 d0       	rcall	.+0      	; 0x3268 <enu_SetSenseLevel+0x8>
    3268:	0f 92       	push	r0
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
    326e:	8a 83       	std	Y+2, r24	; 0x02
    3270:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	28 2f       	mov	r18, r24
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	3d 83       	std	Y+5, r19	; 0x05
    327e:	2c 83       	std	Y+4, r18	; 0x04
    3280:	8c 81       	ldd	r24, Y+4	; 0x04
    3282:	9d 81       	ldd	r25, Y+5	; 0x05
    3284:	81 30       	cpi	r24, 0x01	; 1
    3286:	91 05       	cpc	r25, r1
    3288:	e9 f1       	breq	.+122    	; 0x3304 <enu_SetSenseLevel+0xa4>
    328a:	2c 81       	ldd	r18, Y+4	; 0x04
    328c:	3d 81       	ldd	r19, Y+5	; 0x05
    328e:	22 30       	cpi	r18, 0x02	; 2
    3290:	31 05       	cpc	r19, r1
    3292:	09 f4       	brne	.+2      	; 0x3296 <enu_SetSenseLevel+0x36>
    3294:	69 c0       	rjmp	.+210    	; 0x3368 <enu_SetSenseLevel+0x108>
    3296:	8c 81       	ldd	r24, Y+4	; 0x04
    3298:	9d 81       	ldd	r25, Y+5	; 0x05
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	09 f0       	breq	.+2      	; 0x32a0 <enu_SetSenseLevel+0x40>
    329e:	7c c0       	rjmp	.+248    	; 0x3398 <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
    32a0:	a5 e5       	ldi	r26, 0x55	; 85
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e5 e5       	ldi	r30, 0x55	; 85
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	8c 7f       	andi	r24, 0xFC	; 252
    32ac:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    32ae:	8b 81       	ldd	r24, Y+3	; 0x03
    32b0:	88 23       	and	r24, r24
    32b2:	11 f4       	brne	.+4      	; 0x32b8 <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    32b4:	19 82       	std	Y+1, r1	; 0x01
    32b6:	72 c0       	rjmp	.+228    	; 0x339c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	81 30       	cpi	r24, 0x01	; 1
    32bc:	49 f4       	brne	.+18     	; 0x32d0 <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
    32be:	a5 e5       	ldi	r26, 0x55	; 85
    32c0:	b0 e0       	ldi	r27, 0x00	; 0
    32c2:	e5 e5       	ldi	r30, 0x55	; 85
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	80 81       	ld	r24, Z
    32c8:	81 60       	ori	r24, 0x01	; 1
    32ca:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    32cc:	19 82       	std	Y+1, r1	; 0x01
    32ce:	66 c0       	rjmp	.+204    	; 0x339c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	82 30       	cpi	r24, 0x02	; 2
    32d4:	41 f4       	brne	.+16     	; 0x32e6 <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
    32d6:	a5 e5       	ldi	r26, 0x55	; 85
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	e5 e5       	ldi	r30, 0x55	; 85
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
    32e0:	82 60       	ori	r24, 0x02	; 2
    32e2:	8c 93       	st	X, r24
    32e4:	5b c0       	rjmp	.+182    	; 0x339c <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	83 30       	cpi	r24, 0x03	; 3
    32ea:	49 f4       	brne	.+18     	; 0x32fe <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
    32ec:	a5 e5       	ldi	r26, 0x55	; 85
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	e5 e5       	ldi	r30, 0x55	; 85
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	83 60       	ori	r24, 0x03	; 3
    32f8:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    32fa:	19 82       	std	Y+1, r1	; 0x01
    32fc:	4f c0       	rjmp	.+158    	; 0x339c <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    32fe:	82 e0       	ldi	r24, 0x02	; 2
    3300:	89 83       	std	Y+1, r24	; 0x01
    3302:	4c c0       	rjmp	.+152    	; 0x339c <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
    3304:	a5 e5       	ldi	r26, 0x55	; 85
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	e5 e5       	ldi	r30, 0x55	; 85
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	83 7f       	andi	r24, 0xF3	; 243
    3310:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	88 23       	and	r24, r24
    3316:	11 f4       	brne	.+4      	; 0x331c <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    3318:	19 82       	std	Y+1, r1	; 0x01
    331a:	40 c0       	rjmp	.+128    	; 0x339c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	81 30       	cpi	r24, 0x01	; 1
    3320:	49 f4       	brne	.+18     	; 0x3334 <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
    3322:	a5 e5       	ldi	r26, 0x55	; 85
    3324:	b0 e0       	ldi	r27, 0x00	; 0
    3326:	e5 e5       	ldi	r30, 0x55	; 85
    3328:	f0 e0       	ldi	r31, 0x00	; 0
    332a:	80 81       	ld	r24, Z
    332c:	84 60       	ori	r24, 0x04	; 4
    332e:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    3330:	19 82       	std	Y+1, r1	; 0x01
    3332:	34 c0       	rjmp	.+104    	; 0x339c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	82 30       	cpi	r24, 0x02	; 2
    3338:	41 f4       	brne	.+16     	; 0x334a <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
    333a:	a5 e5       	ldi	r26, 0x55	; 85
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e5 e5       	ldi	r30, 0x55	; 85
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	88 60       	ori	r24, 0x08	; 8
    3346:	8c 93       	st	X, r24
    3348:	29 c0       	rjmp	.+82     	; 0x339c <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    334a:	8b 81       	ldd	r24, Y+3	; 0x03
    334c:	83 30       	cpi	r24, 0x03	; 3
    334e:	49 f4       	brne	.+18     	; 0x3362 <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
    3350:	a5 e5       	ldi	r26, 0x55	; 85
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	e5 e5       	ldi	r30, 0x55	; 85
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	8c 60       	ori	r24, 0x0C	; 12
    335c:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    335e:	19 82       	std	Y+1, r1	; 0x01
    3360:	1d c0       	rjmp	.+58     	; 0x339c <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3362:	82 e0       	ldi	r24, 0x02	; 2
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	1a c0       	rjmp	.+52     	; 0x339c <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    3368:	8b 81       	ldd	r24, Y+3	; 0x03
    336a:	82 30       	cpi	r24, 0x02	; 2
    336c:	49 f4       	brne	.+18     	; 0x3380 <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
    336e:	a4 e5       	ldi	r26, 0x54	; 84
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	e4 e5       	ldi	r30, 0x54	; 84
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	8f 7b       	andi	r24, 0xBF	; 191
    337a:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    337c:	19 82       	std	Y+1, r1	; 0x01
    337e:	0e c0       	rjmp	.+28     	; 0x339c <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	83 30       	cpi	r24, 0x03	; 3
    3384:	59 f4       	brne	.+22     	; 0x339c <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
    3386:	a4 e5       	ldi	r26, 0x54	; 84
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	e4 e5       	ldi	r30, 0x54	; 84
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	80 64       	ori	r24, 0x40	; 64
    3392:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    3394:	19 82       	std	Y+1, r1	; 0x01
    3396:	02 c0       	rjmp	.+4      	; 0x339c <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3398:	82 e0       	ldi	r24, 0x02	; 2
    339a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
    339c:	89 81       	ldd	r24, Y+1	; 0x01
}
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	cf 91       	pop	r28
    33aa:	df 91       	pop	r29
    33ac:	08 95       	ret

000033ae <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    33ae:	df 93       	push	r29
    33b0:	cf 93       	push	r28
    33b2:	00 d0       	rcall	.+0      	; 0x33b4 <enu_SetFlagValue+0x6>
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <enu_SetFlagValue+0x8>
    33b6:	0f 92       	push	r0
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	8a 83       	std	Y+2, r24	; 0x02
    33be:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    33c4:	8a 81       	ldd	r24, Y+2	; 0x02
    33c6:	28 2f       	mov	r18, r24
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	3d 83       	std	Y+5, r19	; 0x05
    33cc:	2c 83       	std	Y+4, r18	; 0x04
    33ce:	8c 81       	ldd	r24, Y+4	; 0x04
    33d0:	9d 81       	ldd	r25, Y+5	; 0x05
    33d2:	81 30       	cpi	r24, 0x01	; 1
    33d4:	91 05       	cpc	r25, r1
    33d6:	29 f1       	breq	.+74     	; 0x3422 <enu_SetFlagValue+0x74>
    33d8:	2c 81       	ldd	r18, Y+4	; 0x04
    33da:	3d 81       	ldd	r19, Y+5	; 0x05
    33dc:	22 30       	cpi	r18, 0x02	; 2
    33de:	31 05       	cpc	r19, r1
    33e0:	d9 f1       	breq	.+118    	; 0x3458 <enu_SetFlagValue+0xaa>
    33e2:	8c 81       	ldd	r24, Y+4	; 0x04
    33e4:	9d 81       	ldd	r25, Y+5	; 0x05
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	09 f0       	breq	.+2      	; 0x33ec <enu_SetFlagValue+0x3e>
    33ea:	51 c0       	rjmp	.+162    	; 0x348e <enu_SetFlagValue+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	81 30       	cpi	r24, 0x01	; 1
    33f0:	49 f4       	brne	.+18     	; 0x3404 <enu_SetFlagValue+0x56>
            {
                GIFR |= ( 1 << GIFR_INTF0);
    33f2:	aa e5       	ldi	r26, 0x5A	; 90
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	ea e5       	ldi	r30, 0x5A	; 90
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	80 81       	ld	r24, Z
    33fc:	80 64       	ori	r24, 0x40	; 64
    33fe:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    3400:	19 82       	std	Y+1, r1	; 0x01
    3402:	47 c0       	rjmp	.+142    	; 0x3492 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	88 23       	and	r24, r24
    3408:	49 f4       	brne	.+18     	; 0x341c <enu_SetFlagValue+0x6e>
            {
                GIFR &= ~( 1 << GIFR_INTF0);
    340a:	aa e5       	ldi	r26, 0x5A	; 90
    340c:	b0 e0       	ldi	r27, 0x00	; 0
    340e:	ea e5       	ldi	r30, 0x5A	; 90
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	80 81       	ld	r24, Z
    3414:	8f 7b       	andi	r24, 0xBF	; 191
    3416:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    3418:	19 82       	std	Y+1, r1	; 0x01
    341a:	3b c0       	rjmp	.+118    	; 0x3492 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    341c:	82 e0       	ldi	r24, 0x02	; 2
    341e:	89 83       	std	Y+1, r24	; 0x01
    3420:	38 c0       	rjmp	.+112    	; 0x3492 <enu_SetFlagValue+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	81 30       	cpi	r24, 0x01	; 1
    3426:	49 f4       	brne	.+18     	; 0x343a <enu_SetFlagValue+0x8c>
            {
                GIFR |= ( 1 << GIFR_INTF1);
    3428:	aa e5       	ldi	r26, 0x5A	; 90
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	ea e5       	ldi	r30, 0x5A	; 90
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	80 68       	ori	r24, 0x80	; 128
    3434:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    3436:	19 82       	std	Y+1, r1	; 0x01
    3438:	2c c0       	rjmp	.+88     	; 0x3492 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	88 23       	and	r24, r24
    343e:	49 f4       	brne	.+18     	; 0x3452 <enu_SetFlagValue+0xa4>
            {
                GIFR &= ~( 1 << GIFR_INTF1);
    3440:	aa e5       	ldi	r26, 0x5A	; 90
    3442:	b0 e0       	ldi	r27, 0x00	; 0
    3444:	ea e5       	ldi	r30, 0x5A	; 90
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	80 81       	ld	r24, Z
    344a:	8f 77       	andi	r24, 0x7F	; 127
    344c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    344e:	19 82       	std	Y+1, r1	; 0x01
    3450:	20 c0       	rjmp	.+64     	; 0x3492 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3452:	82 e0       	ldi	r24, 0x02	; 2
    3454:	89 83       	std	Y+1, r24	; 0x01
    3456:	1d c0       	rjmp	.+58     	; 0x3492 <enu_SetFlagValue+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    3458:	8b 81       	ldd	r24, Y+3	; 0x03
    345a:	81 30       	cpi	r24, 0x01	; 1
    345c:	49 f4       	brne	.+18     	; 0x3470 <enu_SetFlagValue+0xc2>
            {
                GIFR |= ( 1 << GIFR_INTF2);
    345e:	aa e5       	ldi	r26, 0x5A	; 90
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	ea e5       	ldi	r30, 0x5A	; 90
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	80 62       	ori	r24, 0x20	; 32
    346a:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    346c:	19 82       	std	Y+1, r1	; 0x01
    346e:	11 c0       	rjmp	.+34     	; 0x3492 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	88 23       	and	r24, r24
    3474:	49 f4       	brne	.+18     	; 0x3488 <enu_SetFlagValue+0xda>
            {
                GIFR &= ~( 1 << GIFR_INTF2);
    3476:	aa e5       	ldi	r26, 0x5A	; 90
    3478:	b0 e0       	ldi	r27, 0x00	; 0
    347a:	ea e5       	ldi	r30, 0x5A	; 90
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	8f 7d       	andi	r24, 0xDF	; 223
    3482:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    3484:	19 82       	std	Y+1, r1	; 0x01
    3486:	05 c0       	rjmp	.+10     	; 0x3492 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3488:	82 e0       	ldi	r24, 0x02	; 2
    348a:	89 83       	std	Y+1, r24	; 0x01
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <enu_SetFlagValue+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    348e:	82 e0       	ldi	r24, 0x02	; 2
    3490:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	0f 90       	pop	r0
    349a:	0f 90       	pop	r0
    349c:	0f 90       	pop	r0
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	08 95       	ret

000034a4 <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	0f 92       	push	r0
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    34b2:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    34b6:	0f 90       	pop	r0
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	00 d0       	rcall	.+0      	; 0x34c4 <DIO_enu_SetPinDiretion+0x6>
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <DIO_enu_SetPinDiretion+0x8>
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <DIO_enu_SetPinDiretion+0xa>
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	8a 83       	std	Y+2, r24	; 0x02
    34ce:	6b 83       	std	Y+3, r22	; 0x03
    34d0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    34d6:	8a 81       	ldd	r24, Y+2	; 0x02
    34d8:	84 30       	cpi	r24, 0x04	; 4
    34da:	08 f0       	brcs	.+2      	; 0x34de <DIO_enu_SetPinDiretion+0x20>
    34dc:	d0 c0       	rjmp	.+416    	; 0x367e <DIO_enu_SetPinDiretion+0x1c0>
    34de:	8b 81       	ldd	r24, Y+3	; 0x03
    34e0:	88 30       	cpi	r24, 0x08	; 8
    34e2:	08 f0       	brcs	.+2      	; 0x34e6 <DIO_enu_SetPinDiretion+0x28>
    34e4:	cc c0       	rjmp	.+408    	; 0x367e <DIO_enu_SetPinDiretion+0x1c0>
    34e6:	8c 81       	ldd	r24, Y+4	; 0x04
    34e8:	82 30       	cpi	r24, 0x02	; 2
    34ea:	08 f0       	brcs	.+2      	; 0x34ee <DIO_enu_SetPinDiretion+0x30>
    34ec:	c8 c0       	rjmp	.+400    	; 0x367e <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	28 2f       	mov	r18, r24
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	3e 83       	std	Y+6, r19	; 0x06
    34f6:	2d 83       	std	Y+5, r18	; 0x05
    34f8:	6d 81       	ldd	r22, Y+5	; 0x05
    34fa:	7e 81       	ldd	r23, Y+6	; 0x06
    34fc:	61 30       	cpi	r22, 0x01	; 1
    34fe:	71 05       	cpc	r23, r1
    3500:	09 f4       	brne	.+2      	; 0x3504 <DIO_enu_SetPinDiretion+0x46>
    3502:	41 c0       	rjmp	.+130    	; 0x3586 <DIO_enu_SetPinDiretion+0xc8>
    3504:	8d 81       	ldd	r24, Y+5	; 0x05
    3506:	9e 81       	ldd	r25, Y+6	; 0x06
    3508:	82 30       	cpi	r24, 0x02	; 2
    350a:	91 05       	cpc	r25, r1
    350c:	34 f4       	brge	.+12     	; 0x351a <DIO_enu_SetPinDiretion+0x5c>
    350e:	2d 81       	ldd	r18, Y+5	; 0x05
    3510:	3e 81       	ldd	r19, Y+6	; 0x06
    3512:	21 15       	cp	r18, r1
    3514:	31 05       	cpc	r19, r1
    3516:	71 f0       	breq	.+28     	; 0x3534 <DIO_enu_SetPinDiretion+0x76>
    3518:	b0 c0       	rjmp	.+352    	; 0x367a <DIO_enu_SetPinDiretion+0x1bc>
    351a:	6d 81       	ldd	r22, Y+5	; 0x05
    351c:	7e 81       	ldd	r23, Y+6	; 0x06
    351e:	62 30       	cpi	r22, 0x02	; 2
    3520:	71 05       	cpc	r23, r1
    3522:	09 f4       	brne	.+2      	; 0x3526 <DIO_enu_SetPinDiretion+0x68>
    3524:	59 c0       	rjmp	.+178    	; 0x35d8 <DIO_enu_SetPinDiretion+0x11a>
    3526:	8d 81       	ldd	r24, Y+5	; 0x05
    3528:	9e 81       	ldd	r25, Y+6	; 0x06
    352a:	83 30       	cpi	r24, 0x03	; 3
    352c:	91 05       	cpc	r25, r1
    352e:	09 f4       	brne	.+2      	; 0x3532 <DIO_enu_SetPinDiretion+0x74>
    3530:	7c c0       	rjmp	.+248    	; 0x362a <DIO_enu_SetPinDiretion+0x16c>
    3532:	a3 c0       	rjmp	.+326    	; 0x367a <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    3534:	aa e3       	ldi	r26, 0x3A	; 58
    3536:	b0 e0       	ldi	r27, 0x00	; 0
    3538:	ea e3       	ldi	r30, 0x3A	; 58
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	80 81       	ld	r24, Z
    353e:	48 2f       	mov	r20, r24
    3540:	8b 81       	ldd	r24, Y+3	; 0x03
    3542:	28 2f       	mov	r18, r24
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	02 c0       	rjmp	.+4      	; 0x3550 <DIO_enu_SetPinDiretion+0x92>
    354c:	88 0f       	add	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	2a 95       	dec	r18
    3552:	e2 f7       	brpl	.-8      	; 0x354c <DIO_enu_SetPinDiretion+0x8e>
    3554:	80 95       	com	r24
    3556:	84 23       	and	r24, r20
    3558:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    355a:	aa e3       	ldi	r26, 0x3A	; 58
    355c:	b0 e0       	ldi	r27, 0x00	; 0
    355e:	ea e3       	ldi	r30, 0x3A	; 58
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	80 81       	ld	r24, Z
    3564:	48 2f       	mov	r20, r24
    3566:	8c 81       	ldd	r24, Y+4	; 0x04
    3568:	28 2f       	mov	r18, r24
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	8b 81       	ldd	r24, Y+3	; 0x03
    356e:	88 2f       	mov	r24, r24
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	b9 01       	movw	r22, r18
    3574:	02 c0       	rjmp	.+4      	; 0x357a <DIO_enu_SetPinDiretion+0xbc>
    3576:	66 0f       	add	r22, r22
    3578:	77 1f       	adc	r23, r23
    357a:	8a 95       	dec	r24
    357c:	e2 f7       	brpl	.-8      	; 0x3576 <DIO_enu_SetPinDiretion+0xb8>
    357e:	cb 01       	movw	r24, r22
    3580:	84 2b       	or	r24, r20
    3582:	8c 93       	st	X, r24
    3584:	7a c0       	rjmp	.+244    	; 0x367a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    3586:	a7 e3       	ldi	r26, 0x37	; 55
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	e7 e3       	ldi	r30, 0x37	; 55
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	80 81       	ld	r24, Z
    3590:	48 2f       	mov	r20, r24
    3592:	8b 81       	ldd	r24, Y+3	; 0x03
    3594:	28 2f       	mov	r18, r24
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <DIO_enu_SetPinDiretion+0xe4>
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	2a 95       	dec	r18
    35a4:	e2 f7       	brpl	.-8      	; 0x359e <DIO_enu_SetPinDiretion+0xe0>
    35a6:	80 95       	com	r24
    35a8:	84 23       	and	r24, r20
    35aa:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    35ac:	a7 e3       	ldi	r26, 0x37	; 55
    35ae:	b0 e0       	ldi	r27, 0x00	; 0
    35b0:	e7 e3       	ldi	r30, 0x37	; 55
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	48 2f       	mov	r20, r24
    35b8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	88 2f       	mov	r24, r24
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	b9 01       	movw	r22, r18
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <DIO_enu_SetPinDiretion+0x10e>
    35c8:	66 0f       	add	r22, r22
    35ca:	77 1f       	adc	r23, r23
    35cc:	8a 95       	dec	r24
    35ce:	e2 f7       	brpl	.-8      	; 0x35c8 <DIO_enu_SetPinDiretion+0x10a>
    35d0:	cb 01       	movw	r24, r22
    35d2:	84 2b       	or	r24, r20
    35d4:	8c 93       	st	X, r24
    35d6:	51 c0       	rjmp	.+162    	; 0x367a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    35d8:	a4 e3       	ldi	r26, 0x34	; 52
    35da:	b0 e0       	ldi	r27, 0x00	; 0
    35dc:	e4 e3       	ldi	r30, 0x34	; 52
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	80 81       	ld	r24, Z
    35e2:	48 2f       	mov	r20, r24
    35e4:	8b 81       	ldd	r24, Y+3	; 0x03
    35e6:	28 2f       	mov	r18, r24
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	02 c0       	rjmp	.+4      	; 0x35f4 <DIO_enu_SetPinDiretion+0x136>
    35f0:	88 0f       	add	r24, r24
    35f2:	99 1f       	adc	r25, r25
    35f4:	2a 95       	dec	r18
    35f6:	e2 f7       	brpl	.-8      	; 0x35f0 <DIO_enu_SetPinDiretion+0x132>
    35f8:	80 95       	com	r24
    35fa:	84 23       	and	r24, r20
    35fc:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    35fe:	a4 e3       	ldi	r26, 0x34	; 52
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	e4 e3       	ldi	r30, 0x34	; 52
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	48 2f       	mov	r20, r24
    360a:	8c 81       	ldd	r24, Y+4	; 0x04
    360c:	28 2f       	mov	r18, r24
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	8b 81       	ldd	r24, Y+3	; 0x03
    3612:	88 2f       	mov	r24, r24
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	b9 01       	movw	r22, r18
    3618:	02 c0       	rjmp	.+4      	; 0x361e <DIO_enu_SetPinDiretion+0x160>
    361a:	66 0f       	add	r22, r22
    361c:	77 1f       	adc	r23, r23
    361e:	8a 95       	dec	r24
    3620:	e2 f7       	brpl	.-8      	; 0x361a <DIO_enu_SetPinDiretion+0x15c>
    3622:	cb 01       	movw	r24, r22
    3624:	84 2b       	or	r24, r20
    3626:	8c 93       	st	X, r24
    3628:	28 c0       	rjmp	.+80     	; 0x367a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    362a:	a1 e3       	ldi	r26, 0x31	; 49
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	e1 e3       	ldi	r30, 0x31	; 49
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	48 2f       	mov	r20, r24
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	28 2f       	mov	r18, r24
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <DIO_enu_SetPinDiretion+0x188>
    3642:	88 0f       	add	r24, r24
    3644:	99 1f       	adc	r25, r25
    3646:	2a 95       	dec	r18
    3648:	e2 f7       	brpl	.-8      	; 0x3642 <DIO_enu_SetPinDiretion+0x184>
    364a:	80 95       	com	r24
    364c:	84 23       	and	r24, r20
    364e:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    3650:	a1 e3       	ldi	r26, 0x31	; 49
    3652:	b0 e0       	ldi	r27, 0x00	; 0
    3654:	e1 e3       	ldi	r30, 0x31	; 49
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	80 81       	ld	r24, Z
    365a:	48 2f       	mov	r20, r24
    365c:	8c 81       	ldd	r24, Y+4	; 0x04
    365e:	28 2f       	mov	r18, r24
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	8b 81       	ldd	r24, Y+3	; 0x03
    3664:	88 2f       	mov	r24, r24
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	b9 01       	movw	r22, r18
    366a:	02 c0       	rjmp	.+4      	; 0x3670 <DIO_enu_SetPinDiretion+0x1b2>
    366c:	66 0f       	add	r22, r22
    366e:	77 1f       	adc	r23, r23
    3670:	8a 95       	dec	r24
    3672:	e2 f7       	brpl	.-8      	; 0x366c <DIO_enu_SetPinDiretion+0x1ae>
    3674:	cb 01       	movw	r24, r22
    3676:	84 2b       	or	r24, r20
    3678:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    367a:	19 82       	std	Y+1, r1	; 0x01
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    367e:	82 e0       	ldi	r24, 0x02	; 2
    3680:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3682:	89 81       	ldd	r24, Y+1	; 0x01
}
    3684:	26 96       	adiw	r28, 0x06	; 6
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	f8 94       	cli
    368a:	de bf       	out	0x3e, r29	; 62
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	cd bf       	out	0x3d, r28	; 61
    3690:	cf 91       	pop	r28
    3692:	df 91       	pop	r29
    3694:	08 95       	ret

00003696 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	00 d0       	rcall	.+0      	; 0x369c <DIO_enu_SetPinState+0x6>
    369c:	00 d0       	rcall	.+0      	; 0x369e <DIO_enu_SetPinState+0x8>
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <DIO_enu_SetPinState+0xa>
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	8a 83       	std	Y+2, r24	; 0x02
    36a6:	6b 83       	std	Y+3, r22	; 0x03
    36a8:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    36ae:	8a 81       	ldd	r24, Y+2	; 0x02
    36b0:	84 30       	cpi	r24, 0x04	; 4
    36b2:	08 f0       	brcs	.+2      	; 0x36b6 <DIO_enu_SetPinState+0x20>
    36b4:	d0 c0       	rjmp	.+416    	; 0x3856 <DIO_enu_SetPinState+0x1c0>
    36b6:	8b 81       	ldd	r24, Y+3	; 0x03
    36b8:	88 30       	cpi	r24, 0x08	; 8
    36ba:	08 f0       	brcs	.+2      	; 0x36be <DIO_enu_SetPinState+0x28>
    36bc:	cc c0       	rjmp	.+408    	; 0x3856 <DIO_enu_SetPinState+0x1c0>
    36be:	8c 81       	ldd	r24, Y+4	; 0x04
    36c0:	82 30       	cpi	r24, 0x02	; 2
    36c2:	08 f0       	brcs	.+2      	; 0x36c6 <DIO_enu_SetPinState+0x30>
    36c4:	c8 c0       	rjmp	.+400    	; 0x3856 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	28 2f       	mov	r18, r24
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	3e 83       	std	Y+6, r19	; 0x06
    36ce:	2d 83       	std	Y+5, r18	; 0x05
    36d0:	6d 81       	ldd	r22, Y+5	; 0x05
    36d2:	7e 81       	ldd	r23, Y+6	; 0x06
    36d4:	61 30       	cpi	r22, 0x01	; 1
    36d6:	71 05       	cpc	r23, r1
    36d8:	09 f4       	brne	.+2      	; 0x36dc <DIO_enu_SetPinState+0x46>
    36da:	41 c0       	rjmp	.+130    	; 0x375e <DIO_enu_SetPinState+0xc8>
    36dc:	8d 81       	ldd	r24, Y+5	; 0x05
    36de:	9e 81       	ldd	r25, Y+6	; 0x06
    36e0:	82 30       	cpi	r24, 0x02	; 2
    36e2:	91 05       	cpc	r25, r1
    36e4:	34 f4       	brge	.+12     	; 0x36f2 <DIO_enu_SetPinState+0x5c>
    36e6:	2d 81       	ldd	r18, Y+5	; 0x05
    36e8:	3e 81       	ldd	r19, Y+6	; 0x06
    36ea:	21 15       	cp	r18, r1
    36ec:	31 05       	cpc	r19, r1
    36ee:	71 f0       	breq	.+28     	; 0x370c <DIO_enu_SetPinState+0x76>
    36f0:	b0 c0       	rjmp	.+352    	; 0x3852 <DIO_enu_SetPinState+0x1bc>
    36f2:	6d 81       	ldd	r22, Y+5	; 0x05
    36f4:	7e 81       	ldd	r23, Y+6	; 0x06
    36f6:	62 30       	cpi	r22, 0x02	; 2
    36f8:	71 05       	cpc	r23, r1
    36fa:	09 f4       	brne	.+2      	; 0x36fe <DIO_enu_SetPinState+0x68>
    36fc:	59 c0       	rjmp	.+178    	; 0x37b0 <DIO_enu_SetPinState+0x11a>
    36fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3700:	9e 81       	ldd	r25, Y+6	; 0x06
    3702:	83 30       	cpi	r24, 0x03	; 3
    3704:	91 05       	cpc	r25, r1
    3706:	09 f4       	brne	.+2      	; 0x370a <DIO_enu_SetPinState+0x74>
    3708:	7c c0       	rjmp	.+248    	; 0x3802 <DIO_enu_SetPinState+0x16c>
    370a:	a3 c0       	rjmp	.+326    	; 0x3852 <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    370c:	ab e3       	ldi	r26, 0x3B	; 59
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	eb e3       	ldi	r30, 0x3B	; 59
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	80 81       	ld	r24, Z
    3716:	48 2f       	mov	r20, r24
    3718:	8b 81       	ldd	r24, Y+3	; 0x03
    371a:	28 2f       	mov	r18, r24
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	02 c0       	rjmp	.+4      	; 0x3728 <DIO_enu_SetPinState+0x92>
    3724:	88 0f       	add	r24, r24
    3726:	99 1f       	adc	r25, r25
    3728:	2a 95       	dec	r18
    372a:	e2 f7       	brpl	.-8      	; 0x3724 <DIO_enu_SetPinState+0x8e>
    372c:	80 95       	com	r24
    372e:	84 23       	and	r24, r20
    3730:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    3732:	ab e3       	ldi	r26, 0x3B	; 59
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	eb e3       	ldi	r30, 0x3B	; 59
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	80 81       	ld	r24, Z
    373c:	48 2f       	mov	r20, r24
    373e:	8c 81       	ldd	r24, Y+4	; 0x04
    3740:	28 2f       	mov	r18, r24
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	88 2f       	mov	r24, r24
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	b9 01       	movw	r22, r18
    374c:	02 c0       	rjmp	.+4      	; 0x3752 <DIO_enu_SetPinState+0xbc>
    374e:	66 0f       	add	r22, r22
    3750:	77 1f       	adc	r23, r23
    3752:	8a 95       	dec	r24
    3754:	e2 f7       	brpl	.-8      	; 0x374e <DIO_enu_SetPinState+0xb8>
    3756:	cb 01       	movw	r24, r22
    3758:	84 2b       	or	r24, r20
    375a:	8c 93       	st	X, r24
    375c:	7a c0       	rjmp	.+244    	; 0x3852 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    375e:	a8 e3       	ldi	r26, 0x38	; 56
    3760:	b0 e0       	ldi	r27, 0x00	; 0
    3762:	e8 e3       	ldi	r30, 0x38	; 56
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	80 81       	ld	r24, Z
    3768:	48 2f       	mov	r20, r24
    376a:	8b 81       	ldd	r24, Y+3	; 0x03
    376c:	28 2f       	mov	r18, r24
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	02 c0       	rjmp	.+4      	; 0x377a <DIO_enu_SetPinState+0xe4>
    3776:	88 0f       	add	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	2a 95       	dec	r18
    377c:	e2 f7       	brpl	.-8      	; 0x3776 <DIO_enu_SetPinState+0xe0>
    377e:	80 95       	com	r24
    3780:	84 23       	and	r24, r20
    3782:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    3784:	a8 e3       	ldi	r26, 0x38	; 56
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	e8 e3       	ldi	r30, 0x38	; 56
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	48 2f       	mov	r20, r24
    3790:	8c 81       	ldd	r24, Y+4	; 0x04
    3792:	28 2f       	mov	r18, r24
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	88 2f       	mov	r24, r24
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	b9 01       	movw	r22, r18
    379e:	02 c0       	rjmp	.+4      	; 0x37a4 <DIO_enu_SetPinState+0x10e>
    37a0:	66 0f       	add	r22, r22
    37a2:	77 1f       	adc	r23, r23
    37a4:	8a 95       	dec	r24
    37a6:	e2 f7       	brpl	.-8      	; 0x37a0 <DIO_enu_SetPinState+0x10a>
    37a8:	cb 01       	movw	r24, r22
    37aa:	84 2b       	or	r24, r20
    37ac:	8c 93       	st	X, r24
    37ae:	51 c0       	rjmp	.+162    	; 0x3852 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    37b0:	a5 e3       	ldi	r26, 0x35	; 53
    37b2:	b0 e0       	ldi	r27, 0x00	; 0
    37b4:	e5 e3       	ldi	r30, 0x35	; 53
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	48 2f       	mov	r20, r24
    37bc:	8b 81       	ldd	r24, Y+3	; 0x03
    37be:	28 2f       	mov	r18, r24
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <DIO_enu_SetPinState+0x136>
    37c8:	88 0f       	add	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	2a 95       	dec	r18
    37ce:	e2 f7       	brpl	.-8      	; 0x37c8 <DIO_enu_SetPinState+0x132>
    37d0:	80 95       	com	r24
    37d2:	84 23       	and	r24, r20
    37d4:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    37d6:	a5 e3       	ldi	r26, 0x35	; 53
    37d8:	b0 e0       	ldi	r27, 0x00	; 0
    37da:	e5 e3       	ldi	r30, 0x35	; 53
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	48 2f       	mov	r20, r24
    37e2:	8c 81       	ldd	r24, Y+4	; 0x04
    37e4:	28 2f       	mov	r18, r24
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ea:	88 2f       	mov	r24, r24
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	b9 01       	movw	r22, r18
    37f0:	02 c0       	rjmp	.+4      	; 0x37f6 <DIO_enu_SetPinState+0x160>
    37f2:	66 0f       	add	r22, r22
    37f4:	77 1f       	adc	r23, r23
    37f6:	8a 95       	dec	r24
    37f8:	e2 f7       	brpl	.-8      	; 0x37f2 <DIO_enu_SetPinState+0x15c>
    37fa:	cb 01       	movw	r24, r22
    37fc:	84 2b       	or	r24, r20
    37fe:	8c 93       	st	X, r24
    3800:	28 c0       	rjmp	.+80     	; 0x3852 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    3802:	a2 e3       	ldi	r26, 0x32	; 50
    3804:	b0 e0       	ldi	r27, 0x00	; 0
    3806:	e2 e3       	ldi	r30, 0x32	; 50
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	48 2f       	mov	r20, r24
    380e:	8b 81       	ldd	r24, Y+3	; 0x03
    3810:	28 2f       	mov	r18, r24
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	02 c0       	rjmp	.+4      	; 0x381e <DIO_enu_SetPinState+0x188>
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	2a 95       	dec	r18
    3820:	e2 f7       	brpl	.-8      	; 0x381a <DIO_enu_SetPinState+0x184>
    3822:	80 95       	com	r24
    3824:	84 23       	and	r24, r20
    3826:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    3828:	a2 e3       	ldi	r26, 0x32	; 50
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	e2 e3       	ldi	r30, 0x32	; 50
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	80 81       	ld	r24, Z
    3832:	48 2f       	mov	r20, r24
    3834:	8c 81       	ldd	r24, Y+4	; 0x04
    3836:	28 2f       	mov	r18, r24
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	8b 81       	ldd	r24, Y+3	; 0x03
    383c:	88 2f       	mov	r24, r24
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	b9 01       	movw	r22, r18
    3842:	02 c0       	rjmp	.+4      	; 0x3848 <DIO_enu_SetPinState+0x1b2>
    3844:	66 0f       	add	r22, r22
    3846:	77 1f       	adc	r23, r23
    3848:	8a 95       	dec	r24
    384a:	e2 f7       	brpl	.-8      	; 0x3844 <DIO_enu_SetPinState+0x1ae>
    384c:	cb 01       	movw	r24, r22
    384e:	84 2b       	or	r24, r20
    3850:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    3852:	19 82       	std	Y+1, r1	; 0x01
    3854:	02 c0       	rjmp	.+4      	; 0x385a <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3856:	82 e0       	ldi	r24, 0x02	; 2
    3858:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    385a:	89 81       	ldd	r24, Y+1	; 0x01
}
    385c:	26 96       	adiw	r28, 0x06	; 6
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	f8 94       	cli
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	cd bf       	out	0x3d, r28	; 61
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	08 95       	ret

0000386e <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    386e:	df 93       	push	r29
    3870:	cf 93       	push	r28
    3872:	00 d0       	rcall	.+0      	; 0x3874 <DIO_enu_SetPinValue+0x6>
    3874:	00 d0       	rcall	.+0      	; 0x3876 <DIO_enu_SetPinValue+0x8>
    3876:	00 d0       	rcall	.+0      	; 0x3878 <DIO_enu_SetPinValue+0xa>
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	8a 83       	std	Y+2, r24	; 0x02
    387e:	6b 83       	std	Y+3, r22	; 0x03
    3880:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    3886:	8a 81       	ldd	r24, Y+2	; 0x02
    3888:	84 30       	cpi	r24, 0x04	; 4
    388a:	08 f0       	brcs	.+2      	; 0x388e <DIO_enu_SetPinValue+0x20>
    388c:	db c0       	rjmp	.+438    	; 0x3a44 <DIO_enu_SetPinValue+0x1d6>
    388e:	8b 81       	ldd	r24, Y+3	; 0x03
    3890:	88 30       	cpi	r24, 0x08	; 8
    3892:	08 f0       	brcs	.+2      	; 0x3896 <DIO_enu_SetPinValue+0x28>
    3894:	d7 c0       	rjmp	.+430    	; 0x3a44 <DIO_enu_SetPinValue+0x1d6>
    3896:	8c 81       	ldd	r24, Y+4	; 0x04
    3898:	82 30       	cpi	r24, 0x02	; 2
    389a:	08 f0       	brcs	.+2      	; 0x389e <DIO_enu_SetPinValue+0x30>
    389c:	d3 c0       	rjmp	.+422    	; 0x3a44 <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    389e:	8a 81       	ldd	r24, Y+2	; 0x02
    38a0:	28 2f       	mov	r18, r24
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	3e 83       	std	Y+6, r19	; 0x06
    38a6:	2d 83       	std	Y+5, r18	; 0x05
    38a8:	8d 81       	ldd	r24, Y+5	; 0x05
    38aa:	9e 81       	ldd	r25, Y+6	; 0x06
    38ac:	81 30       	cpi	r24, 0x01	; 1
    38ae:	91 05       	cpc	r25, r1
    38b0:	09 f4       	brne	.+2      	; 0x38b4 <DIO_enu_SetPinValue+0x46>
    38b2:	43 c0       	rjmp	.+134    	; 0x393a <DIO_enu_SetPinValue+0xcc>
    38b4:	2d 81       	ldd	r18, Y+5	; 0x05
    38b6:	3e 81       	ldd	r19, Y+6	; 0x06
    38b8:	22 30       	cpi	r18, 0x02	; 2
    38ba:	31 05       	cpc	r19, r1
    38bc:	2c f4       	brge	.+10     	; 0x38c8 <DIO_enu_SetPinValue+0x5a>
    38be:	8d 81       	ldd	r24, Y+5	; 0x05
    38c0:	9e 81       	ldd	r25, Y+6	; 0x06
    38c2:	00 97       	sbiw	r24, 0x00	; 0
    38c4:	71 f0       	breq	.+28     	; 0x38e2 <DIO_enu_SetPinValue+0x74>
    38c6:	bc c0       	rjmp	.+376    	; 0x3a40 <DIO_enu_SetPinValue+0x1d2>
    38c8:	2d 81       	ldd	r18, Y+5	; 0x05
    38ca:	3e 81       	ldd	r19, Y+6	; 0x06
    38cc:	22 30       	cpi	r18, 0x02	; 2
    38ce:	31 05       	cpc	r19, r1
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <DIO_enu_SetPinValue+0x66>
    38d2:	5f c0       	rjmp	.+190    	; 0x3992 <DIO_enu_SetPinValue+0x124>
    38d4:	8d 81       	ldd	r24, Y+5	; 0x05
    38d6:	9e 81       	ldd	r25, Y+6	; 0x06
    38d8:	83 30       	cpi	r24, 0x03	; 3
    38da:	91 05       	cpc	r25, r1
    38dc:	09 f4       	brne	.+2      	; 0x38e0 <DIO_enu_SetPinValue+0x72>
    38de:	85 c0       	rjmp	.+266    	; 0x39ea <DIO_enu_SetPinValue+0x17c>
    38e0:	af c0       	rjmp	.+350    	; 0x3a40 <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    38e2:	8c 81       	ldd	r24, Y+4	; 0x04
    38e4:	81 30       	cpi	r24, 0x01	; 1
    38e6:	a1 f4       	brne	.+40     	; 0x3910 <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    38e8:	ab e3       	ldi	r26, 0x3B	; 59
    38ea:	b0 e0       	ldi	r27, 0x00	; 0
    38ec:	eb e3       	ldi	r30, 0x3B	; 59
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	80 81       	ld	r24, Z
    38f2:	48 2f       	mov	r20, r24
    38f4:	8b 81       	ldd	r24, Y+3	; 0x03
    38f6:	28 2f       	mov	r18, r24
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	02 2e       	mov	r0, r18
    3900:	02 c0       	rjmp	.+4      	; 0x3906 <DIO_enu_SetPinValue+0x98>
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	0a 94       	dec	r0
    3908:	e2 f7       	brpl	.-8      	; 0x3902 <DIO_enu_SetPinValue+0x94>
    390a:	84 2b       	or	r24, r20
    390c:	8c 93       	st	X, r24
    390e:	98 c0       	rjmp	.+304    	; 0x3a40 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    3910:	ab e3       	ldi	r26, 0x3B	; 59
    3912:	b0 e0       	ldi	r27, 0x00	; 0
    3914:	eb e3       	ldi	r30, 0x3B	; 59
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	80 81       	ld	r24, Z
    391a:	48 2f       	mov	r20, r24
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	28 2f       	mov	r18, r24
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	02 2e       	mov	r0, r18
    3928:	02 c0       	rjmp	.+4      	; 0x392e <DIO_enu_SetPinValue+0xc0>
    392a:	88 0f       	add	r24, r24
    392c:	99 1f       	adc	r25, r25
    392e:	0a 94       	dec	r0
    3930:	e2 f7       	brpl	.-8      	; 0x392a <DIO_enu_SetPinValue+0xbc>
    3932:	80 95       	com	r24
    3934:	84 23       	and	r24, r20
    3936:	8c 93       	st	X, r24
    3938:	83 c0       	rjmp	.+262    	; 0x3a40 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    393a:	8c 81       	ldd	r24, Y+4	; 0x04
    393c:	81 30       	cpi	r24, 0x01	; 1
    393e:	a1 f4       	brne	.+40     	; 0x3968 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    3940:	a8 e3       	ldi	r26, 0x38	; 56
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e8 e3       	ldi	r30, 0x38	; 56
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	48 2f       	mov	r20, r24
    394c:	8b 81       	ldd	r24, Y+3	; 0x03
    394e:	28 2f       	mov	r18, r24
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	02 2e       	mov	r0, r18
    3958:	02 c0       	rjmp	.+4      	; 0x395e <DIO_enu_SetPinValue+0xf0>
    395a:	88 0f       	add	r24, r24
    395c:	99 1f       	adc	r25, r25
    395e:	0a 94       	dec	r0
    3960:	e2 f7       	brpl	.-8      	; 0x395a <DIO_enu_SetPinValue+0xec>
    3962:	84 2b       	or	r24, r20
    3964:	8c 93       	st	X, r24
    3966:	6c c0       	rjmp	.+216    	; 0x3a40 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    3968:	a8 e3       	ldi	r26, 0x38	; 56
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	e8 e3       	ldi	r30, 0x38	; 56
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	48 2f       	mov	r20, r24
    3974:	8b 81       	ldd	r24, Y+3	; 0x03
    3976:	28 2f       	mov	r18, r24
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	02 2e       	mov	r0, r18
    3980:	02 c0       	rjmp	.+4      	; 0x3986 <DIO_enu_SetPinValue+0x118>
    3982:	88 0f       	add	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	0a 94       	dec	r0
    3988:	e2 f7       	brpl	.-8      	; 0x3982 <DIO_enu_SetPinValue+0x114>
    398a:	80 95       	com	r24
    398c:	84 23       	and	r24, r20
    398e:	8c 93       	st	X, r24
    3990:	57 c0       	rjmp	.+174    	; 0x3a40 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    3992:	8c 81       	ldd	r24, Y+4	; 0x04
    3994:	81 30       	cpi	r24, 0x01	; 1
    3996:	a1 f4       	brne	.+40     	; 0x39c0 <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    3998:	a5 e3       	ldi	r26, 0x35	; 53
    399a:	b0 e0       	ldi	r27, 0x00	; 0
    399c:	e5 e3       	ldi	r30, 0x35	; 53
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	80 81       	ld	r24, Z
    39a2:	48 2f       	mov	r20, r24
    39a4:	8b 81       	ldd	r24, Y+3	; 0x03
    39a6:	28 2f       	mov	r18, r24
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	02 2e       	mov	r0, r18
    39b0:	02 c0       	rjmp	.+4      	; 0x39b6 <DIO_enu_SetPinValue+0x148>
    39b2:	88 0f       	add	r24, r24
    39b4:	99 1f       	adc	r25, r25
    39b6:	0a 94       	dec	r0
    39b8:	e2 f7       	brpl	.-8      	; 0x39b2 <DIO_enu_SetPinValue+0x144>
    39ba:	84 2b       	or	r24, r20
    39bc:	8c 93       	st	X, r24
    39be:	40 c0       	rjmp	.+128    	; 0x3a40 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    39c0:	a5 e3       	ldi	r26, 0x35	; 53
    39c2:	b0 e0       	ldi	r27, 0x00	; 0
    39c4:	e5 e3       	ldi	r30, 0x35	; 53
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	80 81       	ld	r24, Z
    39ca:	48 2f       	mov	r20, r24
    39cc:	8b 81       	ldd	r24, Y+3	; 0x03
    39ce:	28 2f       	mov	r18, r24
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	02 2e       	mov	r0, r18
    39d8:	02 c0       	rjmp	.+4      	; 0x39de <DIO_enu_SetPinValue+0x170>
    39da:	88 0f       	add	r24, r24
    39dc:	99 1f       	adc	r25, r25
    39de:	0a 94       	dec	r0
    39e0:	e2 f7       	brpl	.-8      	; 0x39da <DIO_enu_SetPinValue+0x16c>
    39e2:	80 95       	com	r24
    39e4:	84 23       	and	r24, r20
    39e6:	8c 93       	st	X, r24
    39e8:	2b c0       	rjmp	.+86     	; 0x3a40 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    39ea:	8c 81       	ldd	r24, Y+4	; 0x04
    39ec:	81 30       	cpi	r24, 0x01	; 1
    39ee:	a1 f4       	brne	.+40     	; 0x3a18 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    39f0:	a2 e3       	ldi	r26, 0x32	; 50
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	e2 e3       	ldi	r30, 0x32	; 50
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	48 2f       	mov	r20, r24
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	28 2f       	mov	r18, r24
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	02 2e       	mov	r0, r18
    3a08:	02 c0       	rjmp	.+4      	; 0x3a0e <DIO_enu_SetPinValue+0x1a0>
    3a0a:	88 0f       	add	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	0a 94       	dec	r0
    3a10:	e2 f7       	brpl	.-8      	; 0x3a0a <DIO_enu_SetPinValue+0x19c>
    3a12:	84 2b       	or	r24, r20
    3a14:	8c 93       	st	X, r24
    3a16:	14 c0       	rjmp	.+40     	; 0x3a40 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    3a18:	a2 e3       	ldi	r26, 0x32	; 50
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	e2 e3       	ldi	r30, 0x32	; 50
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	80 81       	ld	r24, Z
    3a22:	48 2f       	mov	r20, r24
    3a24:	8b 81       	ldd	r24, Y+3	; 0x03
    3a26:	28 2f       	mov	r18, r24
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	02 2e       	mov	r0, r18
    3a30:	02 c0       	rjmp	.+4      	; 0x3a36 <DIO_enu_SetPinValue+0x1c8>
    3a32:	88 0f       	add	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	0a 94       	dec	r0
    3a38:	e2 f7       	brpl	.-8      	; 0x3a32 <DIO_enu_SetPinValue+0x1c4>
    3a3a:	80 95       	com	r24
    3a3c:	84 23       	and	r24, r20
    3a3e:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    3a40:	19 82       	std	Y+1, r1	; 0x01
    3a42:	02 c0       	rjmp	.+4      	; 0x3a48 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3a44:	82 e0       	ldi	r24, 0x02	; 2
    3a46:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a4a:	26 96       	adiw	r28, 0x06	; 6
    3a4c:	0f b6       	in	r0, 0x3f	; 63
    3a4e:	f8 94       	cli
    3a50:	de bf       	out	0x3e, r29	; 62
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	cd bf       	out	0x3d, r28	; 61
    3a56:	cf 91       	pop	r28
    3a58:	df 91       	pop	r29
    3a5a:	08 95       	ret

00003a5c <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    3a5c:	df 93       	push	r29
    3a5e:	cf 93       	push	r28
    3a60:	00 d0       	rcall	.+0      	; 0x3a62 <DIO_enu_TogglePinValue+0x6>
    3a62:	00 d0       	rcall	.+0      	; 0x3a64 <DIO_enu_TogglePinValue+0x8>
    3a64:	0f 92       	push	r0
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
    3a6a:	8a 83       	std	Y+2, r24	; 0x02
    3a6c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    3a72:	8a 81       	ldd	r24, Y+2	; 0x02
    3a74:	84 30       	cpi	r24, 0x04	; 4
    3a76:	08 f0       	brcs	.+2      	; 0x3a7a <DIO_enu_TogglePinValue+0x1e>
    3a78:	73 c0       	rjmp	.+230    	; 0x3b60 <DIO_enu_TogglePinValue+0x104>
    3a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7c:	88 30       	cpi	r24, 0x08	; 8
    3a7e:	08 f0       	brcs	.+2      	; 0x3a82 <DIO_enu_TogglePinValue+0x26>
    3a80:	6f c0       	rjmp	.+222    	; 0x3b60 <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    3a82:	8a 81       	ldd	r24, Y+2	; 0x02
    3a84:	28 2f       	mov	r18, r24
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	3d 83       	std	Y+5, r19	; 0x05
    3a8a:	2c 83       	std	Y+4, r18	; 0x04
    3a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a90:	81 30       	cpi	r24, 0x01	; 1
    3a92:	91 05       	cpc	r25, r1
    3a94:	49 f1       	breq	.+82     	; 0x3ae8 <DIO_enu_TogglePinValue+0x8c>
    3a96:	2c 81       	ldd	r18, Y+4	; 0x04
    3a98:	3d 81       	ldd	r19, Y+5	; 0x05
    3a9a:	22 30       	cpi	r18, 0x02	; 2
    3a9c:	31 05       	cpc	r19, r1
    3a9e:	2c f4       	brge	.+10     	; 0x3aaa <DIO_enu_TogglePinValue+0x4e>
    3aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	61 f0       	breq	.+24     	; 0x3ac0 <DIO_enu_TogglePinValue+0x64>
    3aa8:	5a c0       	rjmp	.+180    	; 0x3b5e <DIO_enu_TogglePinValue+0x102>
    3aaa:	2c 81       	ldd	r18, Y+4	; 0x04
    3aac:	3d 81       	ldd	r19, Y+5	; 0x05
    3aae:	22 30       	cpi	r18, 0x02	; 2
    3ab0:	31 05       	cpc	r19, r1
    3ab2:	71 f1       	breq	.+92     	; 0x3b10 <DIO_enu_TogglePinValue+0xb4>
    3ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ab8:	83 30       	cpi	r24, 0x03	; 3
    3aba:	91 05       	cpc	r25, r1
    3abc:	e9 f1       	breq	.+122    	; 0x3b38 <DIO_enu_TogglePinValue+0xdc>
    3abe:	4f c0       	rjmp	.+158    	; 0x3b5e <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    3ac0:	ab e3       	ldi	r26, 0x3B	; 59
    3ac2:	b0 e0       	ldi	r27, 0x00	; 0
    3ac4:	eb e3       	ldi	r30, 0x3B	; 59
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	80 81       	ld	r24, Z
    3aca:	48 2f       	mov	r20, r24
    3acc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ace:	28 2f       	mov	r18, r24
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	02 2e       	mov	r0, r18
    3ad8:	02 c0       	rjmp	.+4      	; 0x3ade <DIO_enu_TogglePinValue+0x82>
    3ada:	88 0f       	add	r24, r24
    3adc:	99 1f       	adc	r25, r25
    3ade:	0a 94       	dec	r0
    3ae0:	e2 f7       	brpl	.-8      	; 0x3ada <DIO_enu_TogglePinValue+0x7e>
    3ae2:	84 27       	eor	r24, r20
    3ae4:	8c 93       	st	X, r24
    3ae6:	3b c0       	rjmp	.+118    	; 0x3b5e <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    3ae8:	a8 e3       	ldi	r26, 0x38	; 56
    3aea:	b0 e0       	ldi	r27, 0x00	; 0
    3aec:	e8 e3       	ldi	r30, 0x38	; 56
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	80 81       	ld	r24, Z
    3af2:	48 2f       	mov	r20, r24
    3af4:	8b 81       	ldd	r24, Y+3	; 0x03
    3af6:	28 2f       	mov	r18, r24
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	02 2e       	mov	r0, r18
    3b00:	02 c0       	rjmp	.+4      	; 0x3b06 <DIO_enu_TogglePinValue+0xaa>
    3b02:	88 0f       	add	r24, r24
    3b04:	99 1f       	adc	r25, r25
    3b06:	0a 94       	dec	r0
    3b08:	e2 f7       	brpl	.-8      	; 0x3b02 <DIO_enu_TogglePinValue+0xa6>
    3b0a:	84 27       	eor	r24, r20
    3b0c:	8c 93       	st	X, r24
    3b0e:	27 c0       	rjmp	.+78     	; 0x3b5e <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    3b10:	a5 e3       	ldi	r26, 0x35	; 53
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	e5 e3       	ldi	r30, 0x35	; 53
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	80 81       	ld	r24, Z
    3b1a:	48 2f       	mov	r20, r24
    3b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1e:	28 2f       	mov	r18, r24
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	02 2e       	mov	r0, r18
    3b28:	02 c0       	rjmp	.+4      	; 0x3b2e <DIO_enu_TogglePinValue+0xd2>
    3b2a:	88 0f       	add	r24, r24
    3b2c:	99 1f       	adc	r25, r25
    3b2e:	0a 94       	dec	r0
    3b30:	e2 f7       	brpl	.-8      	; 0x3b2a <DIO_enu_TogglePinValue+0xce>
    3b32:	84 27       	eor	r24, r20
    3b34:	8c 93       	st	X, r24
    3b36:	13 c0       	rjmp	.+38     	; 0x3b5e <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    3b38:	a2 e3       	ldi	r26, 0x32	; 50
    3b3a:	b0 e0       	ldi	r27, 0x00	; 0
    3b3c:	e2 e3       	ldi	r30, 0x32	; 50
    3b3e:	f0 e0       	ldi	r31, 0x00	; 0
    3b40:	80 81       	ld	r24, Z
    3b42:	48 2f       	mov	r20, r24
    3b44:	8b 81       	ldd	r24, Y+3	; 0x03
    3b46:	28 2f       	mov	r18, r24
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	02 2e       	mov	r0, r18
    3b50:	02 c0       	rjmp	.+4      	; 0x3b56 <DIO_enu_TogglePinValue+0xfa>
    3b52:	88 0f       	add	r24, r24
    3b54:	99 1f       	adc	r25, r25
    3b56:	0a 94       	dec	r0
    3b58:	e2 f7       	brpl	.-8      	; 0x3b52 <DIO_enu_TogglePinValue+0xf6>
    3b5a:	84 27       	eor	r24, r20
    3b5c:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    3b5e:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    3b60:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	0f 90       	pop	r0
    3b68:	0f 90       	pop	r0
    3b6a:	0f 90       	pop	r0
    3b6c:	cf 91       	pop	r28
    3b6e:	df 91       	pop	r29
    3b70:	08 95       	ret

00003b72 <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    3b72:	df 93       	push	r29
    3b74:	cf 93       	push	r28
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
    3b7a:	27 97       	sbiw	r28, 0x07	; 7
    3b7c:	0f b6       	in	r0, 0x3f	; 63
    3b7e:	f8 94       	cli
    3b80:	de bf       	out	0x3e, r29	; 62
    3b82:	0f be       	out	0x3f, r0	; 63
    3b84:	cd bf       	out	0x3d, r28	; 61
    3b86:	8a 83       	std	Y+2, r24	; 0x02
    3b88:	6b 83       	std	Y+3, r22	; 0x03
    3b8a:	5d 83       	std	Y+5, r21	; 0x05
    3b8c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    3b92:	8c 81       	ldd	r24, Y+4	; 0x04
    3b94:	9d 81       	ldd	r25, Y+5	; 0x05
    3b96:	00 97       	sbiw	r24, 0x00	; 0
    3b98:	09 f4       	brne	.+2      	; 0x3b9c <DIO_enu_GetPinValue+0x2a>
    3b9a:	7d c0       	rjmp	.+250    	; 0x3c96 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    3b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9e:	84 30       	cpi	r24, 0x04	; 4
    3ba0:	08 f0       	brcs	.+2      	; 0x3ba4 <DIO_enu_GetPinValue+0x32>
    3ba2:	76 c0       	rjmp	.+236    	; 0x3c90 <DIO_enu_GetPinValue+0x11e>
    3ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba6:	88 30       	cpi	r24, 0x08	; 8
    3ba8:	08 f0       	brcs	.+2      	; 0x3bac <DIO_enu_GetPinValue+0x3a>
    3baa:	72 c0       	rjmp	.+228    	; 0x3c90 <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    3bac:	8a 81       	ldd	r24, Y+2	; 0x02
    3bae:	28 2f       	mov	r18, r24
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	3f 83       	std	Y+7, r19	; 0x07
    3bb4:	2e 83       	std	Y+6, r18	; 0x06
    3bb6:	4e 81       	ldd	r20, Y+6	; 0x06
    3bb8:	5f 81       	ldd	r21, Y+7	; 0x07
    3bba:	41 30       	cpi	r20, 0x01	; 1
    3bbc:	51 05       	cpc	r21, r1
    3bbe:	59 f1       	breq	.+86     	; 0x3c16 <DIO_enu_GetPinValue+0xa4>
    3bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    3bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    3bc4:	82 30       	cpi	r24, 0x02	; 2
    3bc6:	91 05       	cpc	r25, r1
    3bc8:	34 f4       	brge	.+12     	; 0x3bd6 <DIO_enu_GetPinValue+0x64>
    3bca:	2e 81       	ldd	r18, Y+6	; 0x06
    3bcc:	3f 81       	ldd	r19, Y+7	; 0x07
    3bce:	21 15       	cp	r18, r1
    3bd0:	31 05       	cpc	r19, r1
    3bd2:	69 f0       	breq	.+26     	; 0x3bee <DIO_enu_GetPinValue+0x7c>
    3bd4:	5b c0       	rjmp	.+182    	; 0x3c8c <DIO_enu_GetPinValue+0x11a>
    3bd6:	4e 81       	ldd	r20, Y+6	; 0x06
    3bd8:	5f 81       	ldd	r21, Y+7	; 0x07
    3bda:	42 30       	cpi	r20, 0x02	; 2
    3bdc:	51 05       	cpc	r21, r1
    3bde:	79 f1       	breq	.+94     	; 0x3c3e <DIO_enu_GetPinValue+0xcc>
    3be0:	8e 81       	ldd	r24, Y+6	; 0x06
    3be2:	9f 81       	ldd	r25, Y+7	; 0x07
    3be4:	83 30       	cpi	r24, 0x03	; 3
    3be6:	91 05       	cpc	r25, r1
    3be8:	09 f4       	brne	.+2      	; 0x3bec <DIO_enu_GetPinValue+0x7a>
    3bea:	3d c0       	rjmp	.+122    	; 0x3c66 <DIO_enu_GetPinValue+0xf4>
    3bec:	4f c0       	rjmp	.+158    	; 0x3c8c <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    3bee:	e9 e3       	ldi	r30, 0x39	; 57
    3bf0:	f0 e0       	ldi	r31, 0x00	; 0
    3bf2:	80 81       	ld	r24, Z
    3bf4:	28 2f       	mov	r18, r24
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfa:	88 2f       	mov	r24, r24
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	a9 01       	movw	r20, r18
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <DIO_enu_GetPinValue+0x94>
    3c02:	55 95       	asr	r21
    3c04:	47 95       	ror	r20
    3c06:	8a 95       	dec	r24
    3c08:	e2 f7       	brpl	.-8      	; 0x3c02 <DIO_enu_GetPinValue+0x90>
    3c0a:	ca 01       	movw	r24, r20
    3c0c:	81 70       	andi	r24, 0x01	; 1
    3c0e:	ec 81       	ldd	r30, Y+4	; 0x04
    3c10:	fd 81       	ldd	r31, Y+5	; 0x05
    3c12:	80 83       	st	Z, r24
    3c14:	3b c0       	rjmp	.+118    	; 0x3c8c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    3c16:	e6 e3       	ldi	r30, 0x36	; 54
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	80 81       	ld	r24, Z
    3c1c:	28 2f       	mov	r18, r24
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	8b 81       	ldd	r24, Y+3	; 0x03
    3c22:	88 2f       	mov	r24, r24
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	a9 01       	movw	r20, r18
    3c28:	02 c0       	rjmp	.+4      	; 0x3c2e <DIO_enu_GetPinValue+0xbc>
    3c2a:	55 95       	asr	r21
    3c2c:	47 95       	ror	r20
    3c2e:	8a 95       	dec	r24
    3c30:	e2 f7       	brpl	.-8      	; 0x3c2a <DIO_enu_GetPinValue+0xb8>
    3c32:	ca 01       	movw	r24, r20
    3c34:	81 70       	andi	r24, 0x01	; 1
    3c36:	ec 81       	ldd	r30, Y+4	; 0x04
    3c38:	fd 81       	ldd	r31, Y+5	; 0x05
    3c3a:	80 83       	st	Z, r24
    3c3c:	27 c0       	rjmp	.+78     	; 0x3c8c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    3c3e:	e3 e3       	ldi	r30, 0x33	; 51
    3c40:	f0 e0       	ldi	r31, 0x00	; 0
    3c42:	80 81       	ld	r24, Z
    3c44:	28 2f       	mov	r18, r24
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4a:	88 2f       	mov	r24, r24
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	a9 01       	movw	r20, r18
    3c50:	02 c0       	rjmp	.+4      	; 0x3c56 <DIO_enu_GetPinValue+0xe4>
    3c52:	55 95       	asr	r21
    3c54:	47 95       	ror	r20
    3c56:	8a 95       	dec	r24
    3c58:	e2 f7       	brpl	.-8      	; 0x3c52 <DIO_enu_GetPinValue+0xe0>
    3c5a:	ca 01       	movw	r24, r20
    3c5c:	81 70       	andi	r24, 0x01	; 1
    3c5e:	ec 81       	ldd	r30, Y+4	; 0x04
    3c60:	fd 81       	ldd	r31, Y+5	; 0x05
    3c62:	80 83       	st	Z, r24
    3c64:	13 c0       	rjmp	.+38     	; 0x3c8c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    3c66:	e0 e3       	ldi	r30, 0x30	; 48
    3c68:	f0 e0       	ldi	r31, 0x00	; 0
    3c6a:	80 81       	ld	r24, Z
    3c6c:	28 2f       	mov	r18, r24
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	8b 81       	ldd	r24, Y+3	; 0x03
    3c72:	88 2f       	mov	r24, r24
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	a9 01       	movw	r20, r18
    3c78:	02 c0       	rjmp	.+4      	; 0x3c7e <DIO_enu_GetPinValue+0x10c>
    3c7a:	55 95       	asr	r21
    3c7c:	47 95       	ror	r20
    3c7e:	8a 95       	dec	r24
    3c80:	e2 f7       	brpl	.-8      	; 0x3c7a <DIO_enu_GetPinValue+0x108>
    3c82:	ca 01       	movw	r24, r20
    3c84:	81 70       	andi	r24, 0x01	; 1
    3c86:	ec 81       	ldd	r30, Y+4	; 0x04
    3c88:	fd 81       	ldd	r31, Y+5	; 0x05
    3c8a:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    3c8c:	19 82       	std	Y+1, r1	; 0x01
    3c8e:	05 c0       	rjmp	.+10     	; 0x3c9a <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3c90:	82 e0       	ldi	r24, 0x02	; 2
    3c92:	89 83       	std	Y+1, r24	; 0x01
    3c94:	02 c0       	rjmp	.+4      	; 0x3c9a <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3c96:	83 e0       	ldi	r24, 0x03	; 3
    3c98:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c9c:	27 96       	adiw	r28, 0x07	; 7
    3c9e:	0f b6       	in	r0, 0x3f	; 63
    3ca0:	f8 94       	cli
    3ca2:	de bf       	out	0x3e, r29	; 62
    3ca4:	0f be       	out	0x3f, r0	; 63
    3ca6:	cd bf       	out	0x3d, r28	; 61
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	08 95       	ret

00003cae <ADC_enu_Initialization>:
static void* pvid_ISRParameters = NULL;

//APIs implementation

extern ErrorState_t ADC_enu_Initialization(void)
{
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	0f 92       	push	r0
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	89 83       	std	Y+1, r24	; 0x01

    //Bits contain 00
    ADMUX &= ~(3 << ADMUX_REFS0 );
    3cbc:	a7 e2       	ldi	r26, 0x27	; 39
    3cbe:	b0 e0       	ldi	r27, 0x00	; 0
    3cc0:	e7 e2       	ldi	r30, 0x27	; 39
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	8f 73       	andi	r24, 0x3F	; 63
    3cc8:	8c 93       	st	X, r24
        //bITS ALREADY CONTAIN 00  
    
    #elif ADC_V_REFERENCE_SOURCE == ADC_AVCC
       
        //Bits contain 01
        ADMUX |= (1 < ADMUX_REFS0);
    3cca:	a7 e2       	ldi	r26, 0x27	; 39
    3ccc:	b0 e0       	ldi	r27, 0x00	; 0
    3cce:	e7 e2       	ldi	r30, 0x27	; 39
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	80 81       	ld	r24, Z
    3cd4:	81 60       	ori	r24, 0x01	; 1
    3cd6:	8c 93       	st	X, r24


    //Handling Data adjustment direction
    #if  ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED
        //Setting ADLAR bit
        ADMUX |= ( 1 << ADMUX_ADLAR);
    3cd8:	a7 e2       	ldi	r26, 0x27	; 39
    3cda:	b0 e0       	ldi	r27, 0x00	; 0
    3cdc:	e7 e2       	ldi	r30, 0x27	; 39
    3cde:	f0 e0       	ldi	r31, 0x00	; 0
    3ce0:	80 81       	ld	r24, Z
    3ce2:	80 62       	ori	r24, 0x20	; 32
    3ce4:	8c 93       	st	X, r24
        ADCSRA &= ~( 1 << ADCSRA_ADATE);

    #elif  ADC_TRIGGER_SOURCE >= ADC_FREE_RUNNING &&  ADC_TRIGGER_SOURCE <= ADC_TIMER1_CAPTURE_EVENT

        //Clearing ADTS bits
        SFIOR &= (0X1F);
    3ce6:	a0 e5       	ldi	r26, 0x50	; 80
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	e0 e5       	ldi	r30, 0x50	; 80
    3cec:	f0 e0       	ldi	r31, 0x00	; 0
    3cee:	80 81       	ld	r24, Z
    3cf0:	8f 71       	andi	r24, 0x1F	; 31
    3cf2:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (ADC_TRIGGER_SOURCE << SFIOR_ADTS0); 
    3cf4:	a0 e5       	ldi	r26, 0x50	; 80
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	e0 e5       	ldi	r30, 0x50	; 80
    3cfa:	f0 e0       	ldi	r31, 0x00	; 0
    3cfc:	80 81       	ld	r24, Z
    3cfe:	8c 93       	st	X, r24
        
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    3d00:	a6 e2       	ldi	r26, 0x26	; 38
    3d02:	b0 e0       	ldi	r27, 0x00	; 0
    3d04:	e6 e2       	ldi	r30, 0x26	; 38
    3d06:	f0 e0       	ldi	r31, 0x00	; 0
    3d08:	80 81       	ld	r24, Z
    3d0a:	80 62       	ori	r24, 0x20	; 32
    3d0c:	8c 93       	st	X, r24
    #endif


    //Handling Interrupt Event Status (PIE)
    #if ADC_INT_EVENT_STATUS == ADC_INT_ENABLE
        ADCSRA |= ( 1 << ADCSRA_ADIE); //Bit contains 1 
    3d0e:	a6 e2       	ldi	r26, 0x26	; 38
    3d10:	b0 e0       	ldi	r27, 0x00	; 0
    3d12:	e6 e2       	ldi	r30, 0x26	; 38
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	80 81       	ld	r24, Z
    3d18:	88 60       	ori	r24, 0x08	; 8
    3d1a:	8c 93       	st	X, r24
    #endif


    //Handling ADC clock speed
    //Clearing PS bits
    ADCSRA &= (0xF8);
    3d1c:	a6 e2       	ldi	r26, 0x26	; 38
    3d1e:	b0 e0       	ldi	r27, 0x00	; 0
    3d20:	e6 e2       	ldi	r30, 0x26	; 38
    3d22:	f0 e0       	ldi	r31, 0x00	; 0
    3d24:	80 81       	ld	r24, Z
    3d26:	88 7f       	andi	r24, 0xF8	; 248
    3d28:	8c 93       	st	X, r24
    #if ADC_PS_FACTOR >= ADC_PS_2 && ADC_PS_FACTOR <= ADC_PS_128 
        
        ADCSRA |= (ADC_PS_FACTOR << ADCSRA_ADPS0);
    3d2a:	a6 e2       	ldi	r26, 0x26	; 38
    3d2c:	b0 e0       	ldi	r27, 0x00	; 0
    3d2e:	e6 e2       	ldi	r30, 0x26	; 38
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	80 81       	ld	r24, Z
    3d34:	86 60       	ori	r24, 0x06	; 6
    3d36:	8c 93       	st	X, r24

    #endif


    //Handling input channels
    ADMUX &= (0xE0); //Clearing bits
    3d38:	a7 e2       	ldi	r26, 0x27	; 39
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	e7 e2       	ldi	r30, 0x27	; 39
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	80 81       	ld	r24, Z
    3d42:	80 7e       	andi	r24, 0xE0	; 224
    3d44:	8c 93       	st	X, r24
    #if ADC_INPUT_CHANNEL >= ADC_ADC0 && ADC_INPUT_CHANNEL <= ADC_V_GND
        //Channel Selection
        ADMUX |= (ADC_INPUT_CHANNEL << ADMUX_MUX0);
    3d46:	a7 e2       	ldi	r26, 0x27	; 39
    3d48:	b0 e0       	ldi	r27, 0x00	; 0
    3d4a:	e7 e2       	ldi	r30, 0x27	; 39
    3d4c:	f0 e0       	ldi	r31, 0x00	; 0
    3d4e:	80 81       	ld	r24, Z
    3d50:	8c 93       	st	X, r24

    #endif


    // /Powering ADC
    ADCSRA |= (1 << ADCSRA_ADEN );
    3d52:	a6 e2       	ldi	r26, 0x26	; 38
    3d54:	b0 e0       	ldi	r27, 0x00	; 0
    3d56:	e6 e2       	ldi	r30, 0x26	; 38
    3d58:	f0 e0       	ldi	r31, 0x00	; 0
    3d5a:	80 81       	ld	r24, Z
    3d5c:	80 68       	ori	r24, 0x80	; 128
    3d5e:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3d60:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag; 
    3d62:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d64:	0f 90       	pop	r0
    3d66:	cf 91       	pop	r28
    3d68:	df 91       	pop	r29
    3d6a:	08 95       	ret

00003d6c <ADC_enu_ReadPolling>:

extern ErrorState_t ADC_enu_ReadPolling(u8 Copy_u8_Channel, u16* Copy_pu16_Result)
{
    3d6c:	df 93       	push	r29
    3d6e:	cf 93       	push	r28
    3d70:	00 d0       	rcall	.+0      	; 0x3d72 <ADC_enu_ReadPolling+0x6>
    3d72:	00 d0       	rcall	.+0      	; 0x3d74 <ADC_enu_ReadPolling+0x8>
    3d74:	cd b7       	in	r28, 0x3d	; 61
    3d76:	de b7       	in	r29, 0x3e	; 62
    3d78:	8a 83       	std	Y+2, r24	; 0x02
    3d7a:	7c 83       	std	Y+4, r23	; 0x04
    3d7c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8_Channel >= ADC_ADC0) && (Copy_u8_Channel <= ADC_V_GND))
    3d82:	8a 81       	ldd	r24, Y+2	; 0x02
    3d84:	80 32       	cpi	r24, 0x20	; 32
    3d86:	08 f0       	brcs	.+2      	; 0x3d8a <ADC_enu_ReadPolling+0x1e>
    3d88:	50 c0       	rjmp	.+160    	; 0x3e2a <ADC_enu_ReadPolling+0xbe>
    {
        //Clearing PIF, Assuming that the ADC is in Polling mode.
        ADCSRA |= (1 << ADCSRA_ADIF);
    3d8a:	a6 e2       	ldi	r26, 0x26	; 38
    3d8c:	b0 e0       	ldi	r27, 0x00	; 0
    3d8e:	e6 e2       	ldi	r30, 0x26	; 38
    3d90:	f0 e0       	ldi	r31, 0x00	; 0
    3d92:	80 81       	ld	r24, Z
    3d94:	80 61       	ori	r24, 0x10	; 16
    3d96:	8c 93       	st	X, r24
        
        //Clearing MUX it
        ADMUX &= (0xE0);
    3d98:	a7 e2       	ldi	r26, 0x27	; 39
    3d9a:	b0 e0       	ldi	r27, 0x00	; 0
    3d9c:	e7 e2       	ldi	r30, 0x27	; 39
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	80 81       	ld	r24, Z
    3da2:	80 7e       	andi	r24, 0xE0	; 224
    3da4:	8c 93       	st	X, r24

        //Choosing channel
        ADMUX |= (Copy_u8_Channel << ADMUX_MUX0);
    3da6:	a7 e2       	ldi	r26, 0x27	; 39
    3da8:	b0 e0       	ldi	r27, 0x00	; 0
    3daa:	e7 e2       	ldi	r30, 0x27	; 39
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	90 81       	ld	r25, Z
    3db0:	8a 81       	ldd	r24, Y+2	; 0x02
    3db2:	89 2b       	or	r24, r25
    3db4:	8c 93       	st	X, r24
       
        //Setting ADSC to start a conversion
        ADCSRA |= (1 << ADCSRA_ADSC);
    3db6:	a6 e2       	ldi	r26, 0x26	; 38
    3db8:	b0 e0       	ldi	r27, 0x00	; 0
    3dba:	e6 e2       	ldi	r30, 0x26	; 38
    3dbc:	f0 e0       	ldi	r31, 0x00	; 0
    3dbe:	80 81       	ld	r24, Z
    3dc0:	80 64       	ori	r24, 0x40	; 64
    3dc2:	8c 93       	st	X, r24

        //Waiting for ADC to raise ADIF
        while (((ADCSRA >> ADCSRA_ADIF) & 1) == False);
    3dc4:	e6 e2       	ldi	r30, 0x26	; 38
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	80 81       	ld	r24, Z
    3dca:	82 95       	swap	r24
    3dcc:	8f 70       	andi	r24, 0x0F	; 15
    3dce:	88 2f       	mov	r24, r24
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	81 70       	andi	r24, 0x01	; 1
    3dd4:	90 70       	andi	r25, 0x00	; 0
    3dd6:	00 97       	sbiw	r24, 0x00	; 0
    3dd8:	a9 f3       	breq	.-22     	; 0x3dc4 <ADC_enu_ReadPolling+0x58>

        
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    3dda:	e4 e2       	ldi	r30, 0x24	; 36
    3ddc:	f0 e0       	ldi	r31, 0x00	; 0
    3dde:	80 81       	ld	r24, Z
    3de0:	82 95       	swap	r24
    3de2:	86 95       	lsr	r24
    3de4:	86 95       	lsr	r24
    3de6:	83 70       	andi	r24, 0x03	; 3
    3de8:	88 2f       	mov	r24, r24
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	eb 81       	ldd	r30, Y+3	; 0x03
    3dee:	fc 81       	ldd	r31, Y+4	; 0x04
    3df0:	91 83       	std	Z+1, r25	; 0x01
    3df2:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    3df4:	eb 81       	ldd	r30, Y+3	; 0x03
    3df6:	fc 81       	ldd	r31, Y+4	; 0x04
    3df8:	20 81       	ld	r18, Z
    3dfa:	31 81       	ldd	r19, Z+1	; 0x01
    3dfc:	e5 e2       	ldi	r30, 0x25	; 37
    3dfe:	f0 e0       	ldi	r31, 0x00	; 0
    3e00:	80 81       	ld	r24, Z
    3e02:	88 2f       	mov	r24, r24
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	88 0f       	add	r24, r24
    3e08:	99 1f       	adc	r25, r25
    3e0a:	88 0f       	add	r24, r24
    3e0c:	99 1f       	adc	r25, r25
    3e0e:	82 2b       	or	r24, r18
    3e10:	93 2b       	or	r25, r19
    3e12:	eb 81       	ldd	r30, Y+3	; 0x03
    3e14:	fc 81       	ldd	r31, Y+4	; 0x04
    3e16:	91 83       	std	Z+1, r25	; 0x01
    3e18:	80 83       	st	Z, r24
            *Copy_pu16_Result |= (u16)ADCH << 8;

        #endif
   
        //Clearing PIF
        ADCSRA |= (1 << ADCSRA_ADIF);
    3e1a:	a6 e2       	ldi	r26, 0x26	; 38
    3e1c:	b0 e0       	ldi	r27, 0x00	; 0
    3e1e:	e6 e2       	ldi	r30, 0x26	; 38
    3e20:	f0 e0       	ldi	r31, 0x00	; 0
    3e22:	80 81       	ld	r24, Z
    3e24:	80 61       	ori	r24, 0x10	; 16
    3e26:	8c 93       	st	X, r24
    3e28:	02 c0       	rjmp	.+4      	; 0x3e2e <ADC_enu_ReadPolling+0xc2>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3e2a:	82 e0       	ldi	r24, 0x02	; 2
    3e2c:	89 83       	std	Y+1, r24	; 0x01
    }


    Local_u8_ErrorFlag = ES_OK;
    3e2e:	19 82       	std	Y+1, r1	; 0x01
    

    


    return Local_u8_ErrorFlag;
    3e30:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e32:	0f 90       	pop	r0
    3e34:	0f 90       	pop	r0
    3e36:	0f 90       	pop	r0
    3e38:	0f 90       	pop	r0
    3e3a:	cf 91       	pop	r28
    3e3c:	df 91       	pop	r29
    3e3e:	08 95       	ret

00003e40 <ADC_enu_StartConversion>:

extern ErrorState_t ADC_enu_StartConversion(void)
{
    3e40:	df 93       	push	r29
    3e42:	cf 93       	push	r28
    3e44:	0f 92       	push	r0
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3e4a:	81 e0       	ldi	r24, 0x01	; 1
    3e4c:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 <<ADCSRA_ADSC);
    3e4e:	a6 e2       	ldi	r26, 0x26	; 38
    3e50:	b0 e0       	ldi	r27, 0x00	; 0
    3e52:	e6 e2       	ldi	r30, 0x26	; 38
    3e54:	f0 e0       	ldi	r31, 0x00	; 0
    3e56:	80 81       	ld	r24, Z
    3e58:	80 64       	ori	r24, 0x40	; 64
    3e5a:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3e5c:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e60:	0f 90       	pop	r0
    3e62:	cf 91       	pop	r28
    3e64:	df 91       	pop	r29
    3e66:	08 95       	ret

00003e68 <ADC_enu_SetTriggerringSource>:

extern ErrorState_t ADC_enu_SetTriggerringSource(u8 Copy_u8_TriggeringSource)
{
    3e68:	df 93       	push	r29
    3e6a:	cf 93       	push	r28
    3e6c:	00 d0       	rcall	.+0      	; 0x3e6e <ADC_enu_SetTriggerringSource+0x6>
    3e6e:	cd b7       	in	r28, 0x3d	; 61
    3e70:	de b7       	in	r29, 0x3e	; 62
    3e72:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3e74:	81 e0       	ldi	r24, 0x01	; 1
    3e76:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_u8_TriggeringSource == ADC_SINGLE_CONVERSION)
    3e78:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7a:	88 30       	cpi	r24, 0x08	; 8
    3e7c:	49 f4       	brne	.+18     	; 0x3e90 <ADC_enu_SetTriggerringSource+0x28>
    {
        //Clearing ADATE bit
        ADCSRA &= ~(1 << ADCSRA_ADATE);
    3e7e:	a6 e2       	ldi	r26, 0x26	; 38
    3e80:	b0 e0       	ldi	r27, 0x00	; 0
    3e82:	e6 e2       	ldi	r30, 0x26	; 38
    3e84:	f0 e0       	ldi	r31, 0x00	; 0
    3e86:	80 81       	ld	r24, Z
    3e88:	8f 7d       	andi	r24, 0xDF	; 223
    3e8a:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    3e8c:	19 82       	std	Y+1, r1	; 0x01
    3e8e:	28 c0       	rjmp	.+80     	; 0x3ee0 <ADC_enu_SetTriggerringSource+0x78>
    }
    else if((Copy_u8_TriggeringSource >= ADC_FREE_RUNNING) && (Copy_u8_TriggeringSource <= ADC_TIMER1_CAPTURE_EVENT))
    3e90:	8a 81       	ldd	r24, Y+2	; 0x02
    3e92:	88 30       	cpi	r24, 0x08	; 8
    3e94:	18 f5       	brcc	.+70     	; 0x3edc <ADC_enu_SetTriggerringSource+0x74>
    {
        //Clearing ADTS bits
        SFIOR &= ~ (1 << SFIOR_ADTS0);
    3e96:	a0 e5       	ldi	r26, 0x50	; 80
    3e98:	b0 e0       	ldi	r27, 0x00	; 0
    3e9a:	e0 e5       	ldi	r30, 0x50	; 80
    3e9c:	f0 e0       	ldi	r31, 0x00	; 0
    3e9e:	80 81       	ld	r24, Z
    3ea0:	8f 7d       	andi	r24, 0xDF	; 223
    3ea2:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (Copy_u8_TriggeringSource << SFIOR_ADTS0);
    3ea4:	a0 e5       	ldi	r26, 0x50	; 80
    3ea6:	b0 e0       	ldi	r27, 0x00	; 0
    3ea8:	e0 e5       	ldi	r30, 0x50	; 80
    3eaa:	f0 e0       	ldi	r31, 0x00	; 0
    3eac:	80 81       	ld	r24, Z
    3eae:	28 2f       	mov	r18, r24
    3eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb2:	88 2f       	mov	r24, r24
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	88 0f       	add	r24, r24
    3eb8:	99 1f       	adc	r25, r25
    3eba:	82 95       	swap	r24
    3ebc:	92 95       	swap	r25
    3ebe:	90 7f       	andi	r25, 0xF0	; 240
    3ec0:	98 27       	eor	r25, r24
    3ec2:	80 7f       	andi	r24, 0xF0	; 240
    3ec4:	98 27       	eor	r25, r24
    3ec6:	82 2b       	or	r24, r18
    3ec8:	8c 93       	st	X, r24

        //Setting ADATE bit
        ADCSRA |= (1 << ADCSRA_ADATE);
    3eca:	a6 e2       	ldi	r26, 0x26	; 38
    3ecc:	b0 e0       	ldi	r27, 0x00	; 0
    3ece:	e6 e2       	ldi	r30, 0x26	; 38
    3ed0:	f0 e0       	ldi	r31, 0x00	; 0
    3ed2:	80 81       	ld	r24, Z
    3ed4:	80 62       	ori	r24, 0x20	; 32
    3ed6:	8c 93       	st	X, r24

        Local_u8_ErrorFlag =ES_OK;
    3ed8:	19 82       	std	Y+1, r1	; 0x01
    3eda:	02 c0       	rjmp	.+4      	; 0x3ee0 <ADC_enu_SetTriggerringSource+0x78>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3edc:	82 e0       	ldi	r24, 0x02	; 2
    3ede:	89 83       	std	Y+1, r24	; 0x01
    }
        
        

    return Local_u8_ErrorFlag;
    3ee0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	cf 91       	pop	r28
    3ee8:	df 91       	pop	r29
    3eea:	08 95       	ret

00003eec <ADC_enu_ChangePrescalerFactor>:

extern ErrorState_t ADC_enu_ChangePrescalerFactor(u8 Copy_u8_DivisonFactor)
{
    3eec:	df 93       	push	r29
    3eee:	cf 93       	push	r28
    3ef0:	00 d0       	rcall	.+0      	; 0x3ef2 <ADC_enu_ChangePrescalerFactor+0x6>
    3ef2:	cd b7       	in	r28, 0x3d	; 61
    3ef4:	de b7       	in	r29, 0x3e	; 62
    3ef6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
    3efa:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_DivisonFactor >= ADC_PS_2) && (Copy_u8_DivisonFactor <= ADC_PS_128))
    3efc:	8a 81       	ldd	r24, Y+2	; 0x02
    3efe:	88 23       	and	r24, r24
    3f00:	a1 f0       	breq	.+40     	; 0x3f2a <ADC_enu_ChangePrescalerFactor+0x3e>
    3f02:	8a 81       	ldd	r24, Y+2	; 0x02
    3f04:	88 30       	cpi	r24, 0x08	; 8
    3f06:	88 f4       	brcc	.+34     	; 0x3f2a <ADC_enu_ChangePrescalerFactor+0x3e>
    {
        //Clearins PS bits
        ADCSRA &= ~ (7 << ADCSRA_ADPS0);
    3f08:	a6 e2       	ldi	r26, 0x26	; 38
    3f0a:	b0 e0       	ldi	r27, 0x00	; 0
    3f0c:	e6 e2       	ldi	r30, 0x26	; 38
    3f0e:	f0 e0       	ldi	r31, 0x00	; 0
    3f10:	80 81       	ld	r24, Z
    3f12:	88 7f       	andi	r24, 0xF8	; 248
    3f14:	8c 93       	st	X, r24

        //Choosing divisuon factor
        ADCSRA |=  (Copy_u8_DivisonFactor << ADCSRA_ADPS0);
    3f16:	a6 e2       	ldi	r26, 0x26	; 38
    3f18:	b0 e0       	ldi	r27, 0x00	; 0
    3f1a:	e6 e2       	ldi	r30, 0x26	; 38
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	90 81       	ld	r25, Z
    3f20:	8a 81       	ldd	r24, Y+2	; 0x02
    3f22:	89 2b       	or	r24, r25
    3f24:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    3f26:	19 82       	std	Y+1, r1	; 0x01
    3f28:	02 c0       	rjmp	.+4      	; 0x3f2e <ADC_enu_ChangePrescalerFactor+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3f2a:	82 e0       	ldi	r24, 0x02	; 2
    3f2c:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	cf 91       	pop	r28
    3f36:	df 91       	pop	r29
    3f38:	08 95       	ret

00003f3a <ADC_enu_ReadADCH>:

extern ErrorState_t ADC_enu_ReadADCH(u16* Copy_pu16_Result)
{
    3f3a:	df 93       	push	r29
    3f3c:	cf 93       	push	r28
    3f3e:	00 d0       	rcall	.+0      	; 0x3f40 <ADC_enu_ReadADCH+0x6>
    3f40:	0f 92       	push	r0
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
    3f46:	9b 83       	std	Y+3, r25	; 0x03
    3f48:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	89 83       	std	Y+1, r24	; 0x01


    if(Copy_pu16_Result)
    3f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f50:	9b 81       	ldd	r25, Y+3	; 0x03
    3f52:	00 97       	sbiw	r24, 0x00	; 0
    3f54:	79 f0       	breq	.+30     	; 0x3f74 <ADC_enu_ReadADCH+0x3a>
            
            *Copy_pu16_Result = (u16)ADCH << 8;
        
        #else ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED

                *Copy_pu16_Result = (u16)ADCH << 2;
    3f56:	e5 e2       	ldi	r30, 0x25	; 37
    3f58:	f0 e0       	ldi	r31, 0x00	; 0
    3f5a:	80 81       	ld	r24, Z
    3f5c:	88 2f       	mov	r24, r24
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	88 0f       	add	r24, r24
    3f62:	99 1f       	adc	r25, r25
    3f64:	88 0f       	add	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	ea 81       	ldd	r30, Y+2	; 0x02
    3f6a:	fb 81       	ldd	r31, Y+3	; 0x03
    3f6c:	91 83       	std	Z+1, r25	; 0x01
    3f6e:	80 83       	st	Z, r24

        #endif

        Local_u8_ErrorFlag = ES_OK;
    3f70:	19 82       	std	Y+1, r1	; 0x01
    3f72:	02 c0       	rjmp	.+4      	; 0x3f78 <ADC_enu_ReadADCH+0x3e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3f74:	83 e0       	ldi	r24, 0x03	; 3
    3f76:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    3f78:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f7a:	0f 90       	pop	r0
    3f7c:	0f 90       	pop	r0
    3f7e:	0f 90       	pop	r0
    3f80:	cf 91       	pop	r28
    3f82:	df 91       	pop	r29
    3f84:	08 95       	ret

00003f86 <ADC_enu_ReadADCL>:

extern ErrorState_t ADC_enu_ReadADCL(u16* Copy_pu16_Result)
{
    3f86:	df 93       	push	r29
    3f88:	cf 93       	push	r28
    3f8a:	00 d0       	rcall	.+0      	; 0x3f8c <ADC_enu_ReadADCL+0x6>
    3f8c:	0f 92       	push	r0
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	9b 83       	std	Y+3, r25	; 0x03
    3f94:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    3f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	11 f0       	breq	.+4      	; 0x3fa6 <ADC_enu_ReadADCL+0x20>

            

        #endif

        Local_u8_ErrorFlag = ES_OK;
    3fa2:	19 82       	std	Y+1, r1	; 0x01
    3fa4:	02 c0       	rjmp	.+4      	; 0x3faa <ADC_enu_ReadADCL+0x24>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3fa6:	83 e0       	ldi	r24, 0x03	; 3
    3fa8:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    3faa:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fac:	0f 90       	pop	r0
    3fae:	0f 90       	pop	r0
    3fb0:	0f 90       	pop	r0
    3fb2:	cf 91       	pop	r28
    3fb4:	df 91       	pop	r29
    3fb6:	08 95       	ret

00003fb8 <ADC_enu_ReadData>:

extern ErrorState_t ADC_enu_ReadData(u16* Copy_pu16_Result)
{
    3fb8:	df 93       	push	r29
    3fba:	cf 93       	push	r28
    3fbc:	00 d0       	rcall	.+0      	; 0x3fbe <ADC_enu_ReadData+0x6>
    3fbe:	0f 92       	push	r0
    3fc0:	cd b7       	in	r28, 0x3d	; 61
    3fc2:	de b7       	in	r29, 0x3e	; 62
    3fc4:	9b 83       	std	Y+3, r25	; 0x03
    3fc6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    3fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fce:	9b 81       	ldd	r25, Y+3	; 0x03
    3fd0:	00 97       	sbiw	r24, 0x00	; 0
    3fd2:	11 f1       	breq	.+68     	; 0x4018 <ADC_enu_ReadData+0x60>
    {
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    3fd4:	e4 e2       	ldi	r30, 0x24	; 36
    3fd6:	f0 e0       	ldi	r31, 0x00	; 0
    3fd8:	80 81       	ld	r24, Z
    3fda:	82 95       	swap	r24
    3fdc:	86 95       	lsr	r24
    3fde:	86 95       	lsr	r24
    3fe0:	83 70       	andi	r24, 0x03	; 3
    3fe2:	88 2f       	mov	r24, r24
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	ea 81       	ldd	r30, Y+2	; 0x02
    3fe8:	fb 81       	ldd	r31, Y+3	; 0x03
    3fea:	91 83       	std	Z+1, r25	; 0x01
    3fec:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    3fee:	ea 81       	ldd	r30, Y+2	; 0x02
    3ff0:	fb 81       	ldd	r31, Y+3	; 0x03
    3ff2:	20 81       	ld	r18, Z
    3ff4:	31 81       	ldd	r19, Z+1	; 0x01
    3ff6:	e5 e2       	ldi	r30, 0x25	; 37
    3ff8:	f0 e0       	ldi	r31, 0x00	; 0
    3ffa:	80 81       	ld	r24, Z
    3ffc:	88 2f       	mov	r24, r24
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	88 0f       	add	r24, r24
    4002:	99 1f       	adc	r25, r25
    4004:	88 0f       	add	r24, r24
    4006:	99 1f       	adc	r25, r25
    4008:	82 2b       	or	r24, r18
    400a:	93 2b       	or	r25, r19
    400c:	ea 81       	ldd	r30, Y+2	; 0x02
    400e:	fb 81       	ldd	r31, Y+3	; 0x03
    4010:	91 83       	std	Z+1, r25	; 0x01
    4012:	80 83       	st	Z, r24

        #endif

        

        Local_u8_ErrorFlag = ES_OK;
    4014:	19 82       	std	Y+1, r1	; 0x01
    4016:	02 c0       	rjmp	.+4      	; 0x401c <ADC_enu_ReadData+0x64>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4018:	83 e0       	ldi	r24, 0x03	; 3
    401a:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    401c:	89 81       	ldd	r24, Y+1	; 0x01
}
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	0f 90       	pop	r0
    4024:	cf 91       	pop	r28
    4026:	df 91       	pop	r29
    4028:	08 95       	ret

0000402a <ADC_enu_EnableINT>:

extern ErrorState_t ADC_enu_EnableINT(void)
{
    402a:	df 93       	push	r29
    402c:	cf 93       	push	r28
    402e:	0f 92       	push	r0
    4030:	cd b7       	in	r28, 0x3d	; 61
    4032:	de b7       	in	r29, 0x3e	; 62
    
    u8 Local_u8_ErrorFlag = ES_NOK;
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADIE);
    4038:	a6 e2       	ldi	r26, 0x26	; 38
    403a:	b0 e0       	ldi	r27, 0x00	; 0
    403c:	e6 e2       	ldi	r30, 0x26	; 38
    403e:	f0 e0       	ldi	r31, 0x00	; 0
    4040:	80 81       	ld	r24, Z
    4042:	88 60       	ori	r24, 0x08	; 8
    4044:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    4046:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    4048:	89 81       	ldd	r24, Y+1	; 0x01
}
    404a:	0f 90       	pop	r0
    404c:	cf 91       	pop	r28
    404e:	df 91       	pop	r29
    4050:	08 95       	ret

00004052 <ADC_enu_DisableINT>:

extern ErrorState_t ADC_enu_DisableINT(void)
{
    4052:	df 93       	push	r29
    4054:	cf 93       	push	r28
    4056:	0f 92       	push	r0
    4058:	cd b7       	in	r28, 0x3d	; 61
    405a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADIE);
    4060:	a6 e2       	ldi	r26, 0x26	; 38
    4062:	b0 e0       	ldi	r27, 0x00	; 0
    4064:	e6 e2       	ldi	r30, 0x26	; 38
    4066:	f0 e0       	ldi	r31, 0x00	; 0
    4068:	80 81       	ld	r24, Z
    406a:	87 7f       	andi	r24, 0xF7	; 247
    406c:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    406e:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    4070:	89 81       	ldd	r24, Y+1	; 0x01
}
    4072:	0f 90       	pop	r0
    4074:	cf 91       	pop	r28
    4076:	df 91       	pop	r29
    4078:	08 95       	ret

0000407a <ADC_enu_EnableADC>:

extern ErrorState_t ADC_enu_EnableADC(void)
{
    407a:	df 93       	push	r29
    407c:	cf 93       	push	r28
    407e:	0f 92       	push	r0
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADEN);
    4088:	a6 e2       	ldi	r26, 0x26	; 38
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	e6 e2       	ldi	r30, 0x26	; 38
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	80 68       	ori	r24, 0x80	; 128
    4094:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    4096:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    4098:	89 81       	ldd	r24, Y+1	; 0x01

}
    409a:	0f 90       	pop	r0
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	08 95       	ret

000040a2 <ADC_enu_DisableADC>:

extern ErrorState_t ADC_enu_DisableADC(void)
{
    40a2:	df 93       	push	r29
    40a4:	cf 93       	push	r28
    40a6:	0f 92       	push	r0
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADEN);
    40b0:	a6 e2       	ldi	r26, 0x26	; 38
    40b2:	b0 e0       	ldi	r27, 0x00	; 0
    40b4:	e6 e2       	ldi	r30, 0x26	; 38
    40b6:	f0 e0       	ldi	r31, 0x00	; 0
    40b8:	80 81       	ld	r24, Z
    40ba:	8f 77       	andi	r24, 0x7F	; 127
    40bc:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    40be:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    40c0:	89 81       	ldd	r24, Y+1	; 0x01

}
    40c2:	0f 90       	pop	r0
    40c4:	cf 91       	pop	r28
    40c6:	df 91       	pop	r29
    40c8:	08 95       	ret

000040ca <ADC_enu_SetCallBack>:

extern ErrorState_t ADC_enu_SetCallBack(void (*Copy_pfun_AppFunction)(void), void* Copy_u8_Parameters)
{
    40ca:	df 93       	push	r29
    40cc:	cf 93       	push	r28
    40ce:	00 d0       	rcall	.+0      	; 0x40d0 <ADC_enu_SetCallBack+0x6>
    40d0:	00 d0       	rcall	.+0      	; 0x40d2 <ADC_enu_SetCallBack+0x8>
    40d2:	0f 92       	push	r0
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
    40d8:	9b 83       	std	Y+3, r25	; 0x03
    40da:	8a 83       	std	Y+2, r24	; 0x02
    40dc:	7d 83       	std	Y+5, r23	; 0x05
    40de:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    40e4:	8a 81       	ldd	r24, Y+2	; 0x02
    40e6:	9b 81       	ldd	r25, Y+3	; 0x03
    40e8:	00 97       	sbiw	r24, 0x00	; 0
    40ea:	69 f0       	breq	.+26     	; 0x4106 <ADC_enu_SetCallBack+0x3c>
    {
        pfun_ISRPointer = Copy_pfun_AppFunction;
    40ec:	8a 81       	ldd	r24, Y+2	; 0x02
    40ee:	9b 81       	ldd	r25, Y+3	; 0x03
    40f0:	90 93 f7 01 	sts	0x01F7, r25
    40f4:	80 93 f6 01 	sts	0x01F6, r24

        pvid_ISRParameters = Copy_u8_Parameters;
    40f8:	8c 81       	ldd	r24, Y+4	; 0x04
    40fa:	9d 81       	ldd	r25, Y+5	; 0x05
    40fc:	90 93 f9 01 	sts	0x01F9, r25
    4100:	80 93 f8 01 	sts	0x01F8, r24
        
        Local_u8_ErrorFlag = ES_OK;
    4104:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_ErrorFlag;
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	0f 90       	pop	r0
    4112:	cf 91       	pop	r28
    4114:	df 91       	pop	r29
    4116:	08 95       	ret

00004118 <__vector_16>:

//ISR functions

void __vector_16 (void)__attribute__((signal));
void __vector_16 (void)
{
    4118:	1f 92       	push	r1
    411a:	0f 92       	push	r0
    411c:	0f b6       	in	r0, 0x3f	; 63
    411e:	0f 92       	push	r0
    4120:	11 24       	eor	r1, r1
    4122:	2f 93       	push	r18
    4124:	3f 93       	push	r19
    4126:	4f 93       	push	r20
    4128:	5f 93       	push	r21
    412a:	6f 93       	push	r22
    412c:	7f 93       	push	r23
    412e:	8f 93       	push	r24
    4130:	9f 93       	push	r25
    4132:	af 93       	push	r26
    4134:	bf 93       	push	r27
    4136:	ef 93       	push	r30
    4138:	ff 93       	push	r31
    413a:	df 93       	push	r29
    413c:	cf 93       	push	r28
    413e:	cd b7       	in	r28, 0x3d	; 61
    4140:	de b7       	in	r29, 0x3e	; 62
    if (pfun_ISRPointer != NULL)
    4142:	80 91 f6 01 	lds	r24, 0x01F6
    4146:	90 91 f7 01 	lds	r25, 0x01F7
    414a:	00 97       	sbiw	r24, 0x00	; 0
    414c:	49 f0       	breq	.+18     	; 0x4160 <__vector_16+0x48>
    {
        pfun_ISRPointer (pvid_ISRParameters);
    414e:	e0 91 f6 01 	lds	r30, 0x01F6
    4152:	f0 91 f7 01 	lds	r31, 0x01F7
    4156:	80 91 f8 01 	lds	r24, 0x01F8
    415a:	90 91 f9 01 	lds	r25, 0x01F9
    415e:	09 95       	icall
    }
    4160:	cf 91       	pop	r28
    4162:	df 91       	pop	r29
    4164:	ff 91       	pop	r31
    4166:	ef 91       	pop	r30
    4168:	bf 91       	pop	r27
    416a:	af 91       	pop	r26
    416c:	9f 91       	pop	r25
    416e:	8f 91       	pop	r24
    4170:	7f 91       	pop	r23
    4172:	6f 91       	pop	r22
    4174:	5f 91       	pop	r21
    4176:	4f 91       	pop	r20
    4178:	3f 91       	pop	r19
    417a:	2f 91       	pop	r18
    417c:	0f 90       	pop	r0
    417e:	0f be       	out	0x3f, r0	; 63
    4180:	0f 90       	pop	r0
    4182:	1f 90       	pop	r1
    4184:	18 95       	reti

00004186 <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    4186:	df 93       	push	r29
    4188:	cf 93       	push	r28
    418a:	00 d0       	rcall	.+0      	; 0x418c <SW_enu_Initialization+0x6>
    418c:	00 d0       	rcall	.+0      	; 0x418e <SW_enu_Initialization+0x8>
    418e:	cd b7       	in	r28, 0x3d	; 61
    4190:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
    4192:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};
    4194:	1b 82       	std	Y+3, r1	; 0x03
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	8c 83       	std	Y+4, r24	; 0x04

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    419a:	19 82       	std	Y+1, r1	; 0x01
    419c:	53 c0       	rjmp	.+166    	; 0x4244 <SW_enu_Initialization+0xbe>
    {
        
       Local_au8_ErrorStates[0] = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	28 2f       	mov	r18, r24
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	c9 01       	movw	r24, r18
    41a6:	88 0f       	add	r24, r24
    41a8:	99 1f       	adc	r25, r25
    41aa:	82 0f       	add	r24, r18
    41ac:	93 1f       	adc	r25, r19
    41ae:	fc 01       	movw	r30, r24
    41b0:	ea 57       	subi	r30, 0x7A	; 122
    41b2:	fe 4f       	sbci	r31, 0xFE	; 254
    41b4:	40 81       	ld	r20, Z
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	28 2f       	mov	r18, r24
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	c9 01       	movw	r24, r18
    41be:	88 0f       	add	r24, r24
    41c0:	99 1f       	adc	r25, r25
    41c2:	82 0f       	add	r24, r18
    41c4:	93 1f       	adc	r25, r19
    41c6:	fc 01       	movw	r30, r24
    41c8:	e9 57       	subi	r30, 0x79	; 121
    41ca:	fe 4f       	sbci	r31, 0xFE	; 254
    41cc:	90 81       	ld	r25, Z
    41ce:	84 2f       	mov	r24, r20
    41d0:	69 2f       	mov	r22, r25
    41d2:	40 e0       	ldi	r20, 0x00	; 0
    41d4:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
    41d8:	8b 83       	std	Y+3, r24	; 0x03

       Local_au8_ErrorStates[1] = DIO_enu_SetPinState(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    41da:	89 81       	ldd	r24, Y+1	; 0x01
    41dc:	28 2f       	mov	r18, r24
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	c9 01       	movw	r24, r18
    41e2:	88 0f       	add	r24, r24
    41e4:	99 1f       	adc	r25, r25
    41e6:	82 0f       	add	r24, r18
    41e8:	93 1f       	adc	r25, r19
    41ea:	fc 01       	movw	r30, r24
    41ec:	ea 57       	subi	r30, 0x7A	; 122
    41ee:	fe 4f       	sbci	r31, 0xFE	; 254
    41f0:	50 81       	ld	r21, Z
    41f2:	89 81       	ldd	r24, Y+1	; 0x01
    41f4:	28 2f       	mov	r18, r24
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	c9 01       	movw	r24, r18
    41fa:	88 0f       	add	r24, r24
    41fc:	99 1f       	adc	r25, r25
    41fe:	82 0f       	add	r24, r18
    4200:	93 1f       	adc	r25, r19
    4202:	fc 01       	movw	r30, r24
    4204:	e9 57       	subi	r30, 0x79	; 121
    4206:	fe 4f       	sbci	r31, 0xFE	; 254
    4208:	40 81       	ld	r20, Z
    420a:	89 81       	ldd	r24, Y+1	; 0x01
    420c:	28 2f       	mov	r18, r24
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	c9 01       	movw	r24, r18
    4212:	88 0f       	add	r24, r24
    4214:	99 1f       	adc	r25, r25
    4216:	82 0f       	add	r24, r18
    4218:	93 1f       	adc	r25, r19
    421a:	fc 01       	movw	r30, r24
    421c:	e8 57       	subi	r30, 0x78	; 120
    421e:	fe 4f       	sbci	r31, 0xFE	; 254
    4220:	90 81       	ld	r25, Z
    4222:	85 2f       	mov	r24, r21
    4224:	64 2f       	mov	r22, r20
    4226:	49 2f       	mov	r20, r25
    4228:	0e 94 4b 1b 	call	0x3696	; 0x3696 <DIO_enu_SetPinState>
    422c:	8c 83       	std	Y+4, r24	; 0x04
   
        if((Local_au8_ErrorStates[0] == ES_NOK ) || (Local_au8_ErrorStates[1] == ES_NOK) )
    422e:	8b 81       	ldd	r24, Y+3	; 0x03
    4230:	81 30       	cpi	r24, 0x01	; 1
    4232:	19 f0       	breq	.+6      	; 0x423a <SW_enu_Initialization+0xb4>
    4234:	8c 81       	ldd	r24, Y+4	; 0x04
    4236:	81 30       	cpi	r24, 0x01	; 1
    4238:	11 f4       	brne	.+4      	; 0x423e <SW_enu_Initialization+0xb8>
        {
            Local_u8_ErrorFlag = ES_NOK;
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	8a 83       	std	Y+2, r24	; 0x02
{
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    423e:	89 81       	ldd	r24, Y+1	; 0x01
    4240:	8f 5f       	subi	r24, 0xFF	; 255
    4242:	89 83       	std	Y+1, r24	; 0x01
    4244:	90 91 85 01 	lds	r25, 0x0185
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	89 17       	cp	r24, r25
    424c:	08 f4       	brcc	.+2      	; 0x4250 <SW_enu_Initialization+0xca>
    424e:	a7 cf       	rjmp	.-178    	; 0x419e <SW_enu_Initialization+0x18>
        }

    }


    return Local_u8_ErrorFlag;
    4250:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4252:	0f 90       	pop	r0
    4254:	0f 90       	pop	r0
    4256:	0f 90       	pop	r0
    4258:	0f 90       	pop	r0
    425a:	cf 91       	pop	r28
    425c:	df 91       	pop	r29
    425e:	08 95       	ret

00004260 <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    4260:	df 93       	push	r29
    4262:	cf 93       	push	r28
    4264:	00 d0       	rcall	.+0      	; 0x4266 <SW_enu_GetSwValue+0x6>
    4266:	00 d0       	rcall	.+0      	; 0x4268 <SW_enu_GetSwValue+0x8>
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	8a 83       	std	Y+2, r24	; 0x02
    426e:	7c 83       	std	Y+4, r23	; 0x04
    4270:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    4276:	8b 81       	ldd	r24, Y+3	; 0x03
    4278:	9c 81       	ldd	r25, Y+4	; 0x04
    427a:	00 97       	sbiw	r24, 0x00	; 0
    427c:	49 f1       	breq	.+82     	; 0x42d0 <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    427e:	90 91 85 01 	lds	r25, 0x0185
    4282:	8a 81       	ldd	r24, Y+2	; 0x02
    4284:	98 17       	cp	r25, r24
    4286:	08 f1       	brcs	.+66     	; 0x42ca <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    4288:	8a 81       	ldd	r24, Y+2	; 0x02
    428a:	28 2f       	mov	r18, r24
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	c9 01       	movw	r24, r18
    4290:	88 0f       	add	r24, r24
    4292:	99 1f       	adc	r25, r25
    4294:	82 0f       	add	r24, r18
    4296:	93 1f       	adc	r25, r19
    4298:	fc 01       	movw	r30, r24
    429a:	ea 57       	subi	r30, 0x7A	; 122
    429c:	fe 4f       	sbci	r31, 0xFE	; 254
    429e:	40 81       	ld	r20, Z
    42a0:	8a 81       	ldd	r24, Y+2	; 0x02
    42a2:	28 2f       	mov	r18, r24
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	c9 01       	movw	r24, r18
    42a8:	88 0f       	add	r24, r24
    42aa:	99 1f       	adc	r25, r25
    42ac:	82 0f       	add	r24, r18
    42ae:	93 1f       	adc	r25, r19
    42b0:	fc 01       	movw	r30, r24
    42b2:	e9 57       	subi	r30, 0x79	; 121
    42b4:	fe 4f       	sbci	r31, 0xFE	; 254
    42b6:	90 81       	ld	r25, Z
    42b8:	2b 81       	ldd	r18, Y+3	; 0x03
    42ba:	3c 81       	ldd	r19, Y+4	; 0x04
    42bc:	84 2f       	mov	r24, r20
    42be:	69 2f       	mov	r22, r25
    42c0:	a9 01       	movw	r20, r18
    42c2:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <DIO_enu_GetPinValue>
    42c6:	89 83       	std	Y+1, r24	; 0x01
    42c8:	05 c0       	rjmp	.+10     	; 0x42d4 <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    42ca:	82 e0       	ldi	r24, 0x02	; 2
    42cc:	89 83       	std	Y+1, r24	; 0x01
    42ce:	02 c0       	rjmp	.+4      	; 0x42d4 <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    42d0:	83 e0       	ldi	r24, 0x03	; 3
    42d2:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    42d4:	89 81       	ldd	r24, Y+1	; 0x01

}
    42d6:	0f 90       	pop	r0
    42d8:	0f 90       	pop	r0
    42da:	0f 90       	pop	r0
    42dc:	0f 90       	pop	r0
    42de:	cf 91       	pop	r28
    42e0:	df 91       	pop	r29
    42e2:	08 95       	ret

000042e4 <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    42e4:	df 93       	push	r29
    42e6:	cf 93       	push	r28
    42e8:	00 d0       	rcall	.+0      	; 0x42ea <Relay_enu_Initialization+0x6>
    42ea:	cd b7       	in	r28, 0x3d	; 61
    42ec:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    42f2:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    42f4:	19 82       	std	Y+1, r1	; 0x01
    42f6:	31 c0       	rjmp	.+98     	; 0x435a <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    42f8:	89 81       	ldd	r24, Y+1	; 0x01
    42fa:	88 2f       	mov	r24, r24
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	88 0f       	add	r24, r24
    4300:	99 1f       	adc	r25, r25
    4302:	fc 01       	movw	r30, r24
    4304:	e6 57       	subi	r30, 0x76	; 118
    4306:	fe 4f       	sbci	r31, 0xFE	; 254
    4308:	20 81       	ld	r18, Z
    430a:	89 81       	ldd	r24, Y+1	; 0x01
    430c:	88 2f       	mov	r24, r24
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	88 0f       	add	r24, r24
    4312:	99 1f       	adc	r25, r25
    4314:	fc 01       	movw	r30, r24
    4316:	e5 57       	subi	r30, 0x75	; 117
    4318:	fe 4f       	sbci	r31, 0xFE	; 254
    431a:	90 81       	ld	r25, Z
    431c:	82 2f       	mov	r24, r18
    431e:	69 2f       	mov	r22, r25
    4320:	41 e0       	ldi	r20, 0x01	; 1
    4322:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    4326:	89 81       	ldd	r24, Y+1	; 0x01
    4328:	88 2f       	mov	r24, r24
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	88 0f       	add	r24, r24
    432e:	99 1f       	adc	r25, r25
    4330:	fc 01       	movw	r30, r24
    4332:	e6 57       	subi	r30, 0x76	; 118
    4334:	fe 4f       	sbci	r31, 0xFE	; 254
    4336:	20 81       	ld	r18, Z
    4338:	89 81       	ldd	r24, Y+1	; 0x01
    433a:	88 2f       	mov	r24, r24
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	88 0f       	add	r24, r24
    4340:	99 1f       	adc	r25, r25
    4342:	fc 01       	movw	r30, r24
    4344:	e5 57       	subi	r30, 0x75	; 117
    4346:	fe 4f       	sbci	r31, 0xFE	; 254
    4348:	90 81       	ld	r25, Z
    434a:	82 2f       	mov	r24, r18
    434c:	69 2f       	mov	r22, r25
    434e:	40 e0       	ldi	r20, 0x00	; 0
    4350:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    4354:	89 81       	ldd	r24, Y+1	; 0x01
    4356:	8f 5f       	subi	r24, 0xFF	; 255
    4358:	89 83       	std	Y+1, r24	; 0x01
    435a:	90 91 89 01 	lds	r25, 0x0189
    435e:	89 81       	ldd	r24, Y+1	; 0x01
    4360:	89 17       	cp	r24, r25
    4362:	50 f2       	brcs	.-108    	; 0x42f8 <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    4364:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    4366:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4368:	0f 90       	pop	r0
    436a:	0f 90       	pop	r0
    436c:	cf 91       	pop	r28
    436e:	df 91       	pop	r29
    4370:	08 95       	ret

00004372 <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    4372:	df 93       	push	r29
    4374:	cf 93       	push	r28
    4376:	00 d0       	rcall	.+0      	; 0x4378 <Relay_enu_TuronOnRelay+0x6>
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
    437c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    437e:	81 e0       	ldi	r24, 0x01	; 1
    4380:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    4382:	90 91 89 01 	lds	r25, 0x0189
    4386:	8a 81       	ldd	r24, Y+2	; 0x02
    4388:	89 17       	cp	r24, r25
    438a:	c8 f4       	brcc	.+50     	; 0x43be <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    438c:	8a 81       	ldd	r24, Y+2	; 0x02
    438e:	88 2f       	mov	r24, r24
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	88 0f       	add	r24, r24
    4394:	99 1f       	adc	r25, r25
    4396:	fc 01       	movw	r30, r24
    4398:	e6 57       	subi	r30, 0x76	; 118
    439a:	fe 4f       	sbci	r31, 0xFE	; 254
    439c:	20 81       	ld	r18, Z
    439e:	8a 81       	ldd	r24, Y+2	; 0x02
    43a0:	88 2f       	mov	r24, r24
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	88 0f       	add	r24, r24
    43a6:	99 1f       	adc	r25, r25
    43a8:	fc 01       	movw	r30, r24
    43aa:	e5 57       	subi	r30, 0x75	; 117
    43ac:	fe 4f       	sbci	r31, 0xFE	; 254
    43ae:	90 81       	ld	r25, Z
    43b0:	82 2f       	mov	r24, r18
    43b2:	69 2f       	mov	r22, r25
    43b4:	41 e0       	ldi	r20, 0x01	; 1
    43b6:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    43ba:	89 83       	std	Y+1, r24	; 0x01
    43bc:	02 c0       	rjmp	.+4      	; 0x43c2 <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    43be:	82 e0       	ldi	r24, 0x02	; 2
    43c0:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    43c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    43c4:	0f 90       	pop	r0
    43c6:	0f 90       	pop	r0
    43c8:	cf 91       	pop	r28
    43ca:	df 91       	pop	r29
    43cc:	08 95       	ret

000043ce <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    43ce:	df 93       	push	r29
    43d0:	cf 93       	push	r28
    43d2:	00 d0       	rcall	.+0      	; 0x43d4 <Relay_enu_TuronOffRelay+0x6>
    43d4:	cd b7       	in	r28, 0x3d	; 61
    43d6:	de b7       	in	r29, 0x3e	; 62
    43d8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    43da:	81 e0       	ldi	r24, 0x01	; 1
    43dc:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    43de:	90 91 89 01 	lds	r25, 0x0189
    43e2:	8a 81       	ldd	r24, Y+2	; 0x02
    43e4:	89 17       	cp	r24, r25
    43e6:	c8 f4       	brcc	.+50     	; 0x441a <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    43e8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ea:	88 2f       	mov	r24, r24
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	88 0f       	add	r24, r24
    43f0:	99 1f       	adc	r25, r25
    43f2:	fc 01       	movw	r30, r24
    43f4:	e6 57       	subi	r30, 0x76	; 118
    43f6:	fe 4f       	sbci	r31, 0xFE	; 254
    43f8:	20 81       	ld	r18, Z
    43fa:	8a 81       	ldd	r24, Y+2	; 0x02
    43fc:	88 2f       	mov	r24, r24
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	88 0f       	add	r24, r24
    4402:	99 1f       	adc	r25, r25
    4404:	fc 01       	movw	r30, r24
    4406:	e5 57       	subi	r30, 0x75	; 117
    4408:	fe 4f       	sbci	r31, 0xFE	; 254
    440a:	90 81       	ld	r25, Z
    440c:	82 2f       	mov	r24, r18
    440e:	69 2f       	mov	r22, r25
    4410:	40 e0       	ldi	r20, 0x00	; 0
    4412:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    4416:	89 83       	std	Y+1, r24	; 0x01
    4418:	02 c0       	rjmp	.+4      	; 0x441e <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    441a:	82 e0       	ldi	r24, 0x02	; 2
    441c:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    441e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4420:	0f 90       	pop	r0
    4422:	0f 90       	pop	r0
    4424:	cf 91       	pop	r28
    4426:	df 91       	pop	r29
    4428:	08 95       	ret

0000442a <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    442a:	df 93       	push	r29
    442c:	cf 93       	push	r28
    442e:	00 d0       	rcall	.+0      	; 0x4430 <Relay_enu_TurnOnAllRelays+0x6>
    4430:	cd b7       	in	r28, 0x3d	; 61
    4432:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    4438:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    443a:	19 82       	std	Y+1, r1	; 0x01
    443c:	1a c0       	rjmp	.+52     	; 0x4472 <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    443e:	89 81       	ldd	r24, Y+1	; 0x01
    4440:	88 2f       	mov	r24, r24
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	88 0f       	add	r24, r24
    4446:	99 1f       	adc	r25, r25
    4448:	fc 01       	movw	r30, r24
    444a:	e6 57       	subi	r30, 0x76	; 118
    444c:	fe 4f       	sbci	r31, 0xFE	; 254
    444e:	20 81       	ld	r18, Z
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	88 2f       	mov	r24, r24
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	88 0f       	add	r24, r24
    4458:	99 1f       	adc	r25, r25
    445a:	fc 01       	movw	r30, r24
    445c:	e5 57       	subi	r30, 0x75	; 117
    445e:	fe 4f       	sbci	r31, 0xFE	; 254
    4460:	90 81       	ld	r25, Z
    4462:	82 2f       	mov	r24, r18
    4464:	69 2f       	mov	r22, r25
    4466:	41 e0       	ldi	r20, 0x01	; 1
    4468:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    446c:	89 81       	ldd	r24, Y+1	; 0x01
    446e:	8f 5f       	subi	r24, 0xFF	; 255
    4470:	89 83       	std	Y+1, r24	; 0x01
    4472:	90 91 89 01 	lds	r25, 0x0189
    4476:	89 81       	ldd	r24, Y+1	; 0x01
    4478:	89 17       	cp	r24, r25
    447a:	08 f3       	brcs	.-62     	; 0x443e <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    447c:	82 e0       	ldi	r24, 0x02	; 2
    447e:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    4480:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4482:	0f 90       	pop	r0
    4484:	0f 90       	pop	r0
    4486:	cf 91       	pop	r28
    4488:	df 91       	pop	r29
    448a:	08 95       	ret

0000448c <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    448c:	df 93       	push	r29
    448e:	cf 93       	push	r28
    4490:	00 d0       	rcall	.+0      	; 0x4492 <Relay_enu_TurnOffAllRelays+0x6>
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    449a:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    449c:	19 82       	std	Y+1, r1	; 0x01
    449e:	1a c0       	rjmp	.+52     	; 0x44d4 <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    44a0:	89 81       	ldd	r24, Y+1	; 0x01
    44a2:	88 2f       	mov	r24, r24
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	88 0f       	add	r24, r24
    44a8:	99 1f       	adc	r25, r25
    44aa:	fc 01       	movw	r30, r24
    44ac:	e6 57       	subi	r30, 0x76	; 118
    44ae:	fe 4f       	sbci	r31, 0xFE	; 254
    44b0:	20 81       	ld	r18, Z
    44b2:	89 81       	ldd	r24, Y+1	; 0x01
    44b4:	88 2f       	mov	r24, r24
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	88 0f       	add	r24, r24
    44ba:	99 1f       	adc	r25, r25
    44bc:	fc 01       	movw	r30, r24
    44be:	e5 57       	subi	r30, 0x75	; 117
    44c0:	fe 4f       	sbci	r31, 0xFE	; 254
    44c2:	90 81       	ld	r25, Z
    44c4:	82 2f       	mov	r24, r18
    44c6:	69 2f       	mov	r22, r25
    44c8:	40 e0       	ldi	r20, 0x00	; 0
    44ca:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    44ce:	89 81       	ldd	r24, Y+1	; 0x01
    44d0:	8f 5f       	subi	r24, 0xFF	; 255
    44d2:	89 83       	std	Y+1, r24	; 0x01
    44d4:	90 91 89 01 	lds	r25, 0x0189
    44d8:	89 81       	ldd	r24, Y+1	; 0x01
    44da:	89 17       	cp	r24, r25
    44dc:	08 f3       	brcs	.-62     	; 0x44a0 <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    44de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    44e0:	0f 90       	pop	r0
    44e2:	0f 90       	pop	r0
    44e4:	cf 91       	pop	r28
    44e6:	df 91       	pop	r29
    44e8:	08 95       	ret

000044ea <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    44ea:	df 93       	push	r29
    44ec:	cf 93       	push	r28
    44ee:	00 d0       	rcall	.+0      	; 0x44f0 <LED_enu_Initialization+0x6>
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    44f4:	81 e0       	ldi	r24, 0x01	; 1
    44f6:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    44f8:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    44fa:	19 82       	std	Y+1, r1	; 0x01
    44fc:	31 c0       	rjmp	.+98     	; 0x4560 <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    44fe:	89 81       	ldd	r24, Y+1	; 0x01
    4500:	88 2f       	mov	r24, r24
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	88 0f       	add	r24, r24
    4506:	99 1f       	adc	r25, r25
    4508:	fc 01       	movw	r30, r24
    450a:	e3 57       	subi	r30, 0x73	; 115
    450c:	fe 4f       	sbci	r31, 0xFE	; 254
    450e:	20 81       	ld	r18, Z
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	88 2f       	mov	r24, r24
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	88 0f       	add	r24, r24
    4518:	99 1f       	adc	r25, r25
    451a:	fc 01       	movw	r30, r24
    451c:	e2 57       	subi	r30, 0x72	; 114
    451e:	fe 4f       	sbci	r31, 0xFE	; 254
    4520:	90 81       	ld	r25, Z
    4522:	82 2f       	mov	r24, r18
    4524:	69 2f       	mov	r22, r25
    4526:	41 e0       	ldi	r20, 0x01	; 1
    4528:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    452c:	89 81       	ldd	r24, Y+1	; 0x01
    452e:	88 2f       	mov	r24, r24
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	88 0f       	add	r24, r24
    4534:	99 1f       	adc	r25, r25
    4536:	fc 01       	movw	r30, r24
    4538:	e3 57       	subi	r30, 0x73	; 115
    453a:	fe 4f       	sbci	r31, 0xFE	; 254
    453c:	20 81       	ld	r18, Z
    453e:	89 81       	ldd	r24, Y+1	; 0x01
    4540:	88 2f       	mov	r24, r24
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	88 0f       	add	r24, r24
    4546:	99 1f       	adc	r25, r25
    4548:	fc 01       	movw	r30, r24
    454a:	e2 57       	subi	r30, 0x72	; 114
    454c:	fe 4f       	sbci	r31, 0xFE	; 254
    454e:	90 81       	ld	r25, Z
    4550:	82 2f       	mov	r24, r18
    4552:	69 2f       	mov	r22, r25
    4554:	40 e0       	ldi	r20, 0x00	; 0
    4556:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    455a:	89 81       	ldd	r24, Y+1	; 0x01
    455c:	8f 5f       	subi	r24, 0xFF	; 255
    455e:	89 83       	std	Y+1, r24	; 0x01
    4560:	90 91 8c 01 	lds	r25, 0x018C
    4564:	89 81       	ldd	r24, Y+1	; 0x01
    4566:	89 17       	cp	r24, r25
    4568:	50 f2       	brcs	.-108    	; 0x44fe <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    456a:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    456c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    456e:	0f 90       	pop	r0
    4570:	0f 90       	pop	r0
    4572:	cf 91       	pop	r28
    4574:	df 91       	pop	r29
    4576:	08 95       	ret

00004578 <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    4578:	df 93       	push	r29
    457a:	cf 93       	push	r28
    457c:	00 d0       	rcall	.+0      	; 0x457e <LED_enu_TurnOnLED+0x6>
    457e:	cd b7       	in	r28, 0x3d	; 61
    4580:	de b7       	in	r29, 0x3e	; 62
    4582:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    4588:	90 91 8c 01 	lds	r25, 0x018C
    458c:	8a 81       	ldd	r24, Y+2	; 0x02
    458e:	89 17       	cp	r24, r25
    4590:	c8 f4       	brcc	.+50     	; 0x45c4 <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    4592:	8a 81       	ldd	r24, Y+2	; 0x02
    4594:	88 2f       	mov	r24, r24
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	88 0f       	add	r24, r24
    459a:	99 1f       	adc	r25, r25
    459c:	fc 01       	movw	r30, r24
    459e:	e3 57       	subi	r30, 0x73	; 115
    45a0:	fe 4f       	sbci	r31, 0xFE	; 254
    45a2:	20 81       	ld	r18, Z
    45a4:	8a 81       	ldd	r24, Y+2	; 0x02
    45a6:	88 2f       	mov	r24, r24
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	88 0f       	add	r24, r24
    45ac:	99 1f       	adc	r25, r25
    45ae:	fc 01       	movw	r30, r24
    45b0:	e2 57       	subi	r30, 0x72	; 114
    45b2:	fe 4f       	sbci	r31, 0xFE	; 254
    45b4:	90 81       	ld	r25, Z
    45b6:	82 2f       	mov	r24, r18
    45b8:	69 2f       	mov	r22, r25
    45ba:	41 e0       	ldi	r20, 0x01	; 1
    45bc:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    45c0:	89 83       	std	Y+1, r24	; 0x01
    45c2:	02 c0       	rjmp	.+4      	; 0x45c8 <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    45c4:	82 e0       	ldi	r24, 0x02	; 2
    45c6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    45c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	cf 91       	pop	r28
    45d0:	df 91       	pop	r29
    45d2:	08 95       	ret

000045d4 <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    45d4:	df 93       	push	r29
    45d6:	cf 93       	push	r28
    45d8:	00 d0       	rcall	.+0      	; 0x45da <LED_enu_TurnOffLED+0x6>
    45da:	cd b7       	in	r28, 0x3d	; 61
    45dc:	de b7       	in	r29, 0x3e	; 62
    45de:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    45e0:	81 e0       	ldi	r24, 0x01	; 1
    45e2:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    45e4:	90 91 8c 01 	lds	r25, 0x018C
    45e8:	8a 81       	ldd	r24, Y+2	; 0x02
    45ea:	98 17       	cp	r25, r24
    45ec:	c8 f0       	brcs	.+50     	; 0x4620 <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    45ee:	8a 81       	ldd	r24, Y+2	; 0x02
    45f0:	88 2f       	mov	r24, r24
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	88 0f       	add	r24, r24
    45f6:	99 1f       	adc	r25, r25
    45f8:	fc 01       	movw	r30, r24
    45fa:	e3 57       	subi	r30, 0x73	; 115
    45fc:	fe 4f       	sbci	r31, 0xFE	; 254
    45fe:	20 81       	ld	r18, Z
    4600:	8a 81       	ldd	r24, Y+2	; 0x02
    4602:	88 2f       	mov	r24, r24
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	88 0f       	add	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	fc 01       	movw	r30, r24
    460c:	e2 57       	subi	r30, 0x72	; 114
    460e:	fe 4f       	sbci	r31, 0xFE	; 254
    4610:	90 81       	ld	r25, Z
    4612:	82 2f       	mov	r24, r18
    4614:	69 2f       	mov	r22, r25
    4616:	40 e0       	ldi	r20, 0x00	; 0
    4618:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    461c:	89 83       	std	Y+1, r24	; 0x01
    461e:	02 c0       	rjmp	.+4      	; 0x4624 <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4620:	82 e0       	ldi	r24, 0x02	; 2
    4622:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    4624:	89 81       	ldd	r24, Y+1	; 0x01
}
    4626:	0f 90       	pop	r0
    4628:	0f 90       	pop	r0
    462a:	cf 91       	pop	r28
    462c:	df 91       	pop	r29
    462e:	08 95       	ret

00004630 <LED_enu_TurnOnCombination>:

extern ErrorState_t LED_enu_TurnOnCombination(u8 Copy_u8_Combination)
{
    4630:	df 93       	push	r29
    4632:	cf 93       	push	r28
    4634:	00 d0       	rcall	.+0      	; 0x4636 <LED_enu_TurnOnCombination+0x6>
    4636:	00 d0       	rcall	.+0      	; 0x4638 <LED_enu_TurnOnCombination+0x8>
    4638:	cd b7       	in	r28, 0x3d	; 61
    463a:	de b7       	in	r29, 0x3e	; 62
    463c:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_OK;
    463e:	1b 82       	std	Y+3, r1	; 0x03
    
    u8 Local_u8_TempErrorFlag = ES_OK;
    4640:	1a 82       	std	Y+2, r1	; 0x02


    if(Copy_u8_Combination <= 7 )
    4642:	8c 81       	ldd	r24, Y+4	; 0x04
    4644:	88 30       	cpi	r24, 0x08	; 8
    4646:	d8 f5       	brcc	.+118    	; 0x46be <LED_enu_TurnOnCombination+0x8e>
    {
        s8 Local_s8_Counter = 0;
    4648:	19 82       	std	Y+1, r1	; 0x01

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    464a:	8c 81       	ldd	r24, Y+4	; 0x04
    464c:	81 50       	subi	r24, 0x01	; 1
    464e:	89 83       	std	Y+1, r24	; 0x01
    4650:	32 c0       	rjmp	.+100    	; 0x46b6 <LED_enu_TurnOnCombination+0x86>
        {
           Local_u8_TempErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Local_s8_Counter].LED_Group, LED_astr_LEDsList[Local_s8_Counter].LED_Pin, (Copy_u8_Combination >> Local_s8_Counter) & 1 );
    4652:	89 81       	ldd	r24, Y+1	; 0x01
    4654:	99 27       	eor	r25, r25
    4656:	87 fd       	sbrc	r24, 7
    4658:	90 95       	com	r25
    465a:	88 0f       	add	r24, r24
    465c:	99 1f       	adc	r25, r25
    465e:	fc 01       	movw	r30, r24
    4660:	e3 57       	subi	r30, 0x73	; 115
    4662:	fe 4f       	sbci	r31, 0xFE	; 254
    4664:	50 81       	ld	r21, Z
    4666:	89 81       	ldd	r24, Y+1	; 0x01
    4668:	99 27       	eor	r25, r25
    466a:	87 fd       	sbrc	r24, 7
    466c:	90 95       	com	r25
    466e:	88 0f       	add	r24, r24
    4670:	99 1f       	adc	r25, r25
    4672:	fc 01       	movw	r30, r24
    4674:	e2 57       	subi	r30, 0x72	; 114
    4676:	fe 4f       	sbci	r31, 0xFE	; 254
    4678:	40 81       	ld	r20, Z
    467a:	8c 81       	ldd	r24, Y+4	; 0x04
    467c:	28 2f       	mov	r18, r24
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	89 81       	ldd	r24, Y+1	; 0x01
    4682:	99 27       	eor	r25, r25
    4684:	87 fd       	sbrc	r24, 7
    4686:	90 95       	com	r25
    4688:	b9 01       	movw	r22, r18
    468a:	02 c0       	rjmp	.+4      	; 0x4690 <LED_enu_TurnOnCombination+0x60>
    468c:	75 95       	asr	r23
    468e:	67 95       	ror	r22
    4690:	8a 95       	dec	r24
    4692:	e2 f7       	brpl	.-8      	; 0x468c <LED_enu_TurnOnCombination+0x5c>
    4694:	cb 01       	movw	r24, r22
    4696:	98 2f       	mov	r25, r24
    4698:	91 70       	andi	r25, 0x01	; 1
    469a:	85 2f       	mov	r24, r21
    469c:	64 2f       	mov	r22, r20
    469e:	49 2f       	mov	r20, r25
    46a0:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    46a4:	8a 83       	std	Y+2, r24	; 0x02

            if(Local_u8_TempErrorFlag == ES_NOK)
    46a6:	8a 81       	ldd	r24, Y+2	; 0x02
    46a8:	81 30       	cpi	r24, 0x01	; 1
    46aa:	11 f4       	brne	.+4      	; 0x46b0 <LED_enu_TurnOnCombination+0x80>
            {
                Local_u8_ErrorFlag = ES_NOK;
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	8b 83       	std	Y+3, r24	; 0x03

    if(Copy_u8_Combination <= 7 )
    {
        s8 Local_s8_Counter = 0;

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    46b0:	89 81       	ldd	r24, Y+1	; 0x01
    46b2:	81 50       	subi	r24, 0x01	; 1
    46b4:	89 83       	std	Y+1, r24	; 0x01
    46b6:	89 81       	ldd	r24, Y+1	; 0x01
    46b8:	88 23       	and	r24, r24
    46ba:	5c f6       	brge	.-106    	; 0x4652 <LED_enu_TurnOnCombination+0x22>
    46bc:	02 c0       	rjmp	.+4      	; 0x46c2 <LED_enu_TurnOnCombination+0x92>
        }
        
    } 
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    46be:	82 e0       	ldi	r24, 0x02	; 2
    46c0:	8b 83       	std	Y+3, r24	; 0x03
    }

    return Local_u8_ErrorFlag;
    46c2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	0f 90       	pop	r0
    46ca:	0f 90       	pop	r0
    46cc:	cf 91       	pop	r28
    46ce:	df 91       	pop	r29
    46d0:	08 95       	ret

000046d2 <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    46d2:	df 93       	push	r29
    46d4:	cf 93       	push	r28
    46d6:	00 d0       	rcall	.+0      	; 0x46d8 <LED_enu_TurnOnAllLEDs+0x6>
    46d8:	cd b7       	in	r28, 0x3d	; 61
    46da:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    46e0:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    46e2:	19 82       	std	Y+1, r1	; 0x01
    46e4:	1a c0       	rjmp	.+52     	; 0x471a <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    46e6:	89 81       	ldd	r24, Y+1	; 0x01
    46e8:	88 2f       	mov	r24, r24
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	88 0f       	add	r24, r24
    46ee:	99 1f       	adc	r25, r25
    46f0:	fc 01       	movw	r30, r24
    46f2:	e3 57       	subi	r30, 0x73	; 115
    46f4:	fe 4f       	sbci	r31, 0xFE	; 254
    46f6:	20 81       	ld	r18, Z
    46f8:	89 81       	ldd	r24, Y+1	; 0x01
    46fa:	88 2f       	mov	r24, r24
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	88 0f       	add	r24, r24
    4700:	99 1f       	adc	r25, r25
    4702:	fc 01       	movw	r30, r24
    4704:	e2 57       	subi	r30, 0x72	; 114
    4706:	fe 4f       	sbci	r31, 0xFE	; 254
    4708:	90 81       	ld	r25, Z
    470a:	82 2f       	mov	r24, r18
    470c:	69 2f       	mov	r22, r25
    470e:	41 e0       	ldi	r20, 0x01	; 1
    4710:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    4714:	89 81       	ldd	r24, Y+1	; 0x01
    4716:	8f 5f       	subi	r24, 0xFF	; 255
    4718:	89 83       	std	Y+1, r24	; 0x01
    471a:	90 91 8c 01 	lds	r25, 0x018C
    471e:	89 81       	ldd	r24, Y+1	; 0x01
    4720:	89 17       	cp	r24, r25
    4722:	08 f3       	brcs	.-62     	; 0x46e6 <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    4724:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    4726:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4728:	0f 90       	pop	r0
    472a:	0f 90       	pop	r0
    472c:	cf 91       	pop	r28
    472e:	df 91       	pop	r29
    4730:	08 95       	ret

00004732 <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    4732:	df 93       	push	r29
    4734:	cf 93       	push	r28
    4736:	00 d0       	rcall	.+0      	; 0x4738 <LED_enu_TurnOffAllLEDs+0x6>
    4738:	cd b7       	in	r28, 0x3d	; 61
    473a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    4740:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    4742:	19 82       	std	Y+1, r1	; 0x01
    4744:	1a c0       	rjmp	.+52     	; 0x477a <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    4746:	89 81       	ldd	r24, Y+1	; 0x01
    4748:	88 2f       	mov	r24, r24
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	88 0f       	add	r24, r24
    474e:	99 1f       	adc	r25, r25
    4750:	fc 01       	movw	r30, r24
    4752:	e3 57       	subi	r30, 0x73	; 115
    4754:	fe 4f       	sbci	r31, 0xFE	; 254
    4756:	20 81       	ld	r18, Z
    4758:	89 81       	ldd	r24, Y+1	; 0x01
    475a:	88 2f       	mov	r24, r24
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	88 0f       	add	r24, r24
    4760:	99 1f       	adc	r25, r25
    4762:	fc 01       	movw	r30, r24
    4764:	e2 57       	subi	r30, 0x72	; 114
    4766:	fe 4f       	sbci	r31, 0xFE	; 254
    4768:	90 81       	ld	r25, Z
    476a:	82 2f       	mov	r24, r18
    476c:	69 2f       	mov	r22, r25
    476e:	40 e0       	ldi	r20, 0x00	; 0
    4770:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    4774:	89 81       	ldd	r24, Y+1	; 0x01
    4776:	8f 5f       	subi	r24, 0xFF	; 255
    4778:	89 83       	std	Y+1, r24	; 0x01
    477a:	90 91 8c 01 	lds	r25, 0x018C
    477e:	89 81       	ldd	r24, Y+1	; 0x01
    4780:	89 17       	cp	r24, r25
    4782:	08 f3       	brcs	.-62     	; 0x4746 <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    4784:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    4786:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4788:	0f 90       	pop	r0
    478a:	0f 90       	pop	r0
    478c:	cf 91       	pop	r28
    478e:	df 91       	pop	r29
    4790:	08 95       	ret

00004792 <LED_enu_GetLEDCount>:

extern ErrorState_t LED_enu_GetLEDCount(u8* Copy_u8_Count)
{
    4792:	df 93       	push	r29
    4794:	cf 93       	push	r28
    4796:	00 d0       	rcall	.+0      	; 0x4798 <LED_enu_GetLEDCount+0x6>
    4798:	0f 92       	push	r0
    479a:	cd b7       	in	r28, 0x3d	; 61
    479c:	de b7       	in	r29, 0x3e	; 62
    479e:	9b 83       	std	Y+3, r25	; 0x03
    47a0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    47a2:	81 e0       	ldi	r24, 0x01	; 1
    47a4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Count)
    47a6:	8a 81       	ldd	r24, Y+2	; 0x02
    47a8:	9b 81       	ldd	r25, Y+3	; 0x03
    47aa:	00 97       	sbiw	r24, 0x00	; 0
    47ac:	39 f0       	breq	.+14     	; 0x47bc <LED_enu_GetLEDCount+0x2a>
    {
        *Copy_u8_Count = LED_u8_LEDsCount;
    47ae:	80 91 8c 01 	lds	r24, 0x018C
    47b2:	ea 81       	ldd	r30, Y+2	; 0x02
    47b4:	fb 81       	ldd	r31, Y+3	; 0x03
    47b6:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    47b8:	19 82       	std	Y+1, r1	; 0x01
    47ba:	02 c0       	rjmp	.+4      	; 0x47c0 <LED_enu_GetLEDCount+0x2e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    47bc:	83 e0       	ldi	r24, 0x03	; 3
    47be:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    47c0:	89 81       	ldd	r24, Y+1	; 0x01
    47c2:	0f 90       	pop	r0
    47c4:	0f 90       	pop	r0
    47c6:	0f 90       	pop	r0
    47c8:	cf 91       	pop	r28
    47ca:	df 91       	pop	r29
    47cc:	08 95       	ret

000047ce <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    47ce:	df 93       	push	r29
    47d0:	cf 93       	push	r28
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
    47d6:	6d 97       	sbiw	r28, 0x1d	; 29
    47d8:	0f b6       	in	r0, 0x3f	; 63
    47da:	f8 94       	cli
    47dc:	de bf       	out	0x3e, r29	; 62
    47de:	0f be       	out	0x3f, r0	; 63
    47e0:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	8d 8f       	std	Y+29, r24	; 0x1d
    47e6:	80 e0       	ldi	r24, 0x00	; 0
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	ac e0       	ldi	r26, 0x0C	; 12
    47ec:	b2 e4       	ldi	r27, 0x42	; 66
    47ee:	89 8f       	std	Y+25, r24	; 0x19
    47f0:	9a 8f       	std	Y+26, r25	; 0x1a
    47f2:	ab 8f       	std	Y+27, r26	; 0x1b
    47f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47f6:	69 8d       	ldd	r22, Y+25	; 0x19
    47f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	4a e7       	ldi	r20, 0x7A	; 122
    4804:	55 e4       	ldi	r21, 0x45	; 69
    4806:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	8d 8b       	std	Y+21, r24	; 0x15
    4810:	9e 8b       	std	Y+22, r25	; 0x16
    4812:	af 8b       	std	Y+23, r26	; 0x17
    4814:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4816:	6d 89       	ldd	r22, Y+21	; 0x15
    4818:	7e 89       	ldd	r23, Y+22	; 0x16
    481a:	8f 89       	ldd	r24, Y+23	; 0x17
    481c:	98 8d       	ldd	r25, Y+24	; 0x18
    481e:	20 e0       	ldi	r18, 0x00	; 0
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	40 e8       	ldi	r20, 0x80	; 128
    4824:	5f e3       	ldi	r21, 0x3F	; 63
    4826:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    482a:	88 23       	and	r24, r24
    482c:	2c f4       	brge	.+10     	; 0x4838 <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	9c 8b       	std	Y+20, r25	; 0x14
    4834:	8b 8b       	std	Y+19, r24	; 0x13
    4836:	3f c0       	rjmp	.+126    	; 0x48b6 <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    4838:	6d 89       	ldd	r22, Y+21	; 0x15
    483a:	7e 89       	ldd	r23, Y+22	; 0x16
    483c:	8f 89       	ldd	r24, Y+23	; 0x17
    483e:	98 8d       	ldd	r25, Y+24	; 0x18
    4840:	20 e0       	ldi	r18, 0x00	; 0
    4842:	3f ef       	ldi	r19, 0xFF	; 255
    4844:	4f e7       	ldi	r20, 0x7F	; 127
    4846:	57 e4       	ldi	r21, 0x47	; 71
    4848:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    484c:	18 16       	cp	r1, r24
    484e:	4c f5       	brge	.+82     	; 0x48a2 <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4850:	69 8d       	ldd	r22, Y+25	; 0x19
    4852:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4854:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4856:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	40 e2       	ldi	r20, 0x20	; 32
    485e:	51 e4       	ldi	r21, 0x41	; 65
    4860:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    4864:	dc 01       	movw	r26, r24
    4866:	cb 01       	movw	r24, r22
    4868:	bc 01       	movw	r22, r24
    486a:	cd 01       	movw	r24, r26
    486c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4870:	dc 01       	movw	r26, r24
    4872:	cb 01       	movw	r24, r22
    4874:	9c 8b       	std	Y+20, r25	; 0x14
    4876:	8b 8b       	std	Y+19, r24	; 0x13
    4878:	0f c0       	rjmp	.+30     	; 0x4898 <LCD_enu_Initialization+0xca>
    487a:	80 e9       	ldi	r24, 0x90	; 144
    487c:	91 e0       	ldi	r25, 0x01	; 1
    487e:	9a 8b       	std	Y+18, r25	; 0x12
    4880:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4882:	89 89       	ldd	r24, Y+17	; 0x11
    4884:	9a 89       	ldd	r25, Y+18	; 0x12
    4886:	01 97       	sbiw	r24, 0x01	; 1
    4888:	f1 f7       	brne	.-4      	; 0x4886 <LCD_enu_Initialization+0xb8>
    488a:	9a 8b       	std	Y+18, r25	; 0x12
    488c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    488e:	8b 89       	ldd	r24, Y+19	; 0x13
    4890:	9c 89       	ldd	r25, Y+20	; 0x14
    4892:	01 97       	sbiw	r24, 0x01	; 1
    4894:	9c 8b       	std	Y+20, r25	; 0x14
    4896:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4898:	8b 89       	ldd	r24, Y+19	; 0x13
    489a:	9c 89       	ldd	r25, Y+20	; 0x14
    489c:	00 97       	sbiw	r24, 0x00	; 0
    489e:	69 f7       	brne	.-38     	; 0x487a <LCD_enu_Initialization+0xac>
    48a0:	14 c0       	rjmp	.+40     	; 0x48ca <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48a2:	6d 89       	ldd	r22, Y+21	; 0x15
    48a4:	7e 89       	ldd	r23, Y+22	; 0x16
    48a6:	8f 89       	ldd	r24, Y+23	; 0x17
    48a8:	98 8d       	ldd	r25, Y+24	; 0x18
    48aa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    48ae:	dc 01       	movw	r26, r24
    48b0:	cb 01       	movw	r24, r22
    48b2:	9c 8b       	std	Y+20, r25	; 0x14
    48b4:	8b 8b       	std	Y+19, r24	; 0x13
    48b6:	8b 89       	ldd	r24, Y+19	; 0x13
    48b8:	9c 89       	ldd	r25, Y+20	; 0x14
    48ba:	98 8b       	std	Y+16, r25	; 0x10
    48bc:	8f 87       	std	Y+15, r24	; 0x0f
    48be:	8f 85       	ldd	r24, Y+15	; 0x0f
    48c0:	98 89       	ldd	r25, Y+16	; 0x10
    48c2:	01 97       	sbiw	r24, 0x01	; 1
    48c4:	f1 f7       	brne	.-4      	; 0x48c2 <LCD_enu_Initialization+0xf4>
    48c6:	98 8b       	std	Y+16, r25	; 0x10
    48c8:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    48ca:	81 e0       	ldi	r24, 0x01	; 1
    48cc:	61 e0       	ldi	r22, 0x01	; 1
    48ce:	41 e0       	ldi	r20, 0x01	; 1
    48d0:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    48d4:	81 e0       	ldi	r24, 0x01	; 1
    48d6:	62 e0       	ldi	r22, 0x02	; 2
    48d8:	41 e0       	ldi	r20, 0x01	; 1
    48da:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    48de:	81 e0       	ldi	r24, 0x01	; 1
    48e0:	63 e0       	ldi	r22, 0x03	; 3
    48e2:	41 e0       	ldi	r20, 0x01	; 1
    48e4:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    48e8:	80 e0       	ldi	r24, 0x00	; 0
    48ea:	67 e0       	ldi	r22, 0x07	; 7
    48ec:	41 e0       	ldi	r20, 0x01	; 1
    48ee:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	66 e0       	ldi	r22, 0x06	; 6
    48f6:	41 e0       	ldi	r20, 0x01	; 1
    48f8:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	65 e0       	ldi	r22, 0x05	; 5
    4900:	41 e0       	ldi	r20, 0x01	; 1
    4902:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    4906:	80 e0       	ldi	r24, 0x00	; 0
    4908:	64 e0       	ldi	r22, 0x04	; 4
    490a:	41 e0       	ldi	r20, 0x01	; 1
    490c:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	61 e0       	ldi	r22, 0x01	; 1
    4914:	40 e0       	ldi	r20, 0x00	; 0
    4916:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    491a:	80 e0       	ldi	r24, 0x00	; 0
    491c:	67 e0       	ldi	r22, 0x07	; 7
    491e:	40 e0       	ldi	r20, 0x00	; 0
    4920:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	66 e0       	ldi	r22, 0x06	; 6
    4928:	40 e0       	ldi	r20, 0x00	; 0
    492a:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    492e:	80 e0       	ldi	r24, 0x00	; 0
    4930:	65 e0       	ldi	r22, 0x05	; 5
    4932:	41 e0       	ldi	r20, 0x01	; 1
    4934:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    4938:	80 e0       	ldi	r24, 0x00	; 0
    493a:	64 e0       	ldi	r22, 0x04	; 4
    493c:	40 e0       	ldi	r20, 0x00	; 0
    493e:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    4942:	81 e0       	ldi	r24, 0x01	; 1
    4944:	63 e0       	ldi	r22, 0x03	; 3
    4946:	41 e0       	ldi	r20, 0x01	; 1
    4948:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    494c:	80 e0       	ldi	r24, 0x00	; 0
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	a0 e8       	ldi	r26, 0x80	; 128
    4952:	bf e3       	ldi	r27, 0x3F	; 63
    4954:	8b 87       	std	Y+11, r24	; 0x0b
    4956:	9c 87       	std	Y+12, r25	; 0x0c
    4958:	ad 87       	std	Y+13, r26	; 0x0d
    495a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    495c:	6b 85       	ldd	r22, Y+11	; 0x0b
    495e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4960:	8d 85       	ldd	r24, Y+13	; 0x0d
    4962:	9e 85       	ldd	r25, Y+14	; 0x0e
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	30 e0       	ldi	r19, 0x00	; 0
    4968:	4a e7       	ldi	r20, 0x7A	; 122
    496a:	55 e4       	ldi	r21, 0x45	; 69
    496c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    4970:	dc 01       	movw	r26, r24
    4972:	cb 01       	movw	r24, r22
    4974:	8f 83       	std	Y+7, r24	; 0x07
    4976:	98 87       	std	Y+8, r25	; 0x08
    4978:	a9 87       	std	Y+9, r26	; 0x09
    497a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    497c:	6f 81       	ldd	r22, Y+7	; 0x07
    497e:	78 85       	ldd	r23, Y+8	; 0x08
    4980:	89 85       	ldd	r24, Y+9	; 0x09
    4982:	9a 85       	ldd	r25, Y+10	; 0x0a
    4984:	20 e0       	ldi	r18, 0x00	; 0
    4986:	30 e0       	ldi	r19, 0x00	; 0
    4988:	40 e8       	ldi	r20, 0x80	; 128
    498a:	5f e3       	ldi	r21, 0x3F	; 63
    498c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    4990:	88 23       	and	r24, r24
    4992:	2c f4       	brge	.+10     	; 0x499e <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	9e 83       	std	Y+6, r25	; 0x06
    499a:	8d 83       	std	Y+5, r24	; 0x05
    499c:	3f c0       	rjmp	.+126    	; 0x4a1c <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    499e:	6f 81       	ldd	r22, Y+7	; 0x07
    49a0:	78 85       	ldd	r23, Y+8	; 0x08
    49a2:	89 85       	ldd	r24, Y+9	; 0x09
    49a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49a6:	20 e0       	ldi	r18, 0x00	; 0
    49a8:	3f ef       	ldi	r19, 0xFF	; 255
    49aa:	4f e7       	ldi	r20, 0x7F	; 127
    49ac:	57 e4       	ldi	r21, 0x47	; 71
    49ae:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    49b2:	18 16       	cp	r1, r24
    49b4:	4c f5       	brge	.+82     	; 0x4a08 <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    49b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    49ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    49bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    49be:	20 e0       	ldi	r18, 0x00	; 0
    49c0:	30 e0       	ldi	r19, 0x00	; 0
    49c2:	40 e2       	ldi	r20, 0x20	; 32
    49c4:	51 e4       	ldi	r21, 0x41	; 65
    49c6:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    49ca:	dc 01       	movw	r26, r24
    49cc:	cb 01       	movw	r24, r22
    49ce:	bc 01       	movw	r22, r24
    49d0:	cd 01       	movw	r24, r26
    49d2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    49d6:	dc 01       	movw	r26, r24
    49d8:	cb 01       	movw	r24, r22
    49da:	9e 83       	std	Y+6, r25	; 0x06
    49dc:	8d 83       	std	Y+5, r24	; 0x05
    49de:	0f c0       	rjmp	.+30     	; 0x49fe <LCD_enu_Initialization+0x230>
    49e0:	80 e9       	ldi	r24, 0x90	; 144
    49e2:	91 e0       	ldi	r25, 0x01	; 1
    49e4:	9c 83       	std	Y+4, r25	; 0x04
    49e6:	8b 83       	std	Y+3, r24	; 0x03
    49e8:	8b 81       	ldd	r24, Y+3	; 0x03
    49ea:	9c 81       	ldd	r25, Y+4	; 0x04
    49ec:	01 97       	sbiw	r24, 0x01	; 1
    49ee:	f1 f7       	brne	.-4      	; 0x49ec <LCD_enu_Initialization+0x21e>
    49f0:	9c 83       	std	Y+4, r25	; 0x04
    49f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49f4:	8d 81       	ldd	r24, Y+5	; 0x05
    49f6:	9e 81       	ldd	r25, Y+6	; 0x06
    49f8:	01 97       	sbiw	r24, 0x01	; 1
    49fa:	9e 83       	std	Y+6, r25	; 0x06
    49fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4a00:	9e 81       	ldd	r25, Y+6	; 0x06
    4a02:	00 97       	sbiw	r24, 0x00	; 0
    4a04:	69 f7       	brne	.-38     	; 0x49e0 <LCD_enu_Initialization+0x212>
    4a06:	14 c0       	rjmp	.+40     	; 0x4a30 <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a08:	6f 81       	ldd	r22, Y+7	; 0x07
    4a0a:	78 85       	ldd	r23, Y+8	; 0x08
    4a0c:	89 85       	ldd	r24, Y+9	; 0x09
    4a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a10:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4a14:	dc 01       	movw	r26, r24
    4a16:	cb 01       	movw	r24, r22
    4a18:	9e 83       	std	Y+6, r25	; 0x06
    4a1a:	8d 83       	std	Y+5, r24	; 0x05
    4a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a20:	9a 83       	std	Y+2, r25	; 0x02
    4a22:	89 83       	std	Y+1, r24	; 0x01
    4a24:	89 81       	ldd	r24, Y+1	; 0x01
    4a26:	9a 81       	ldd	r25, Y+2	; 0x02
    4a28:	01 97       	sbiw	r24, 0x01	; 1
    4a2a:	f1 f7       	brne	.-4      	; 0x4a28 <LCD_enu_Initialization+0x25a>
    4a2c:	9a 83       	std	Y+2, r25	; 0x02
    4a2e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    4a30:	81 e0       	ldi	r24, 0x01	; 1
    4a32:	63 e0       	ldi	r22, 0x03	; 3
    4a34:	40 e0       	ldi	r20, 0x00	; 0
    4a36:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	61 e0       	ldi	r22, 0x01	; 1
    4a3e:	40 e0       	ldi	r20, 0x00	; 0
    4a40:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    4a44:	88 e2       	ldi	r24, 0x28	; 40
    4a46:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4a4a:	81 e0       	ldi	r24, 0x01	; 1
    4a4c:	61 e0       	ldi	r22, 0x01	; 1
    4a4e:	40 e0       	ldi	r20, 0x00	; 0
    4a50:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0F);
    4a54:	8f e0       	ldi	r24, 0x0F	; 15
    4a56:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4a5a:	81 e0       	ldi	r24, 0x01	; 1
    4a5c:	61 e0       	ldi	r22, 0x01	; 1
    4a5e:	40 e0       	ldi	r20, 0x00	; 0
    4a60:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    4a64:	81 e0       	ldi	r24, 0x01	; 1
    4a66:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4a6a:	81 e0       	ldi	r24, 0x01	; 1
    4a6c:	61 e0       	ldi	r22, 0x01	; 1
    4a6e:	40 e0       	ldi	r20, 0x00	; 0
    4a70:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    4a74:	86 e0       	ldi	r24, 0x06	; 6
    4a76:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    4a7a:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    4a7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4a7e:	6d 96       	adiw	r28, 0x1d	; 29
    4a80:	0f b6       	in	r0, 0x3f	; 63
    4a82:	f8 94       	cli
    4a84:	de bf       	out	0x3e, r29	; 62
    4a86:	0f be       	out	0x3f, r0	; 63
    4a88:	cd bf       	out	0x3d, r28	; 61
    4a8a:	cf 91       	pop	r28
    4a8c:	df 91       	pop	r29
    4a8e:	08 95       	ret

00004a90 <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    4a90:	df 93       	push	r29
    4a92:	cf 93       	push	r28
    4a94:	00 d0       	rcall	.+0      	; 0x4a96 <LCD_enu_SendCommand+0x6>
    4a96:	cd b7       	in	r28, 0x3d	; 61
    4a98:	de b7       	in	r29, 0x3e	; 62
    4a9a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    4a9c:	81 e0       	ldi	r24, 0x01	; 1
    4a9e:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	61 e0       	ldi	r22, 0x01	; 1
    4aa4:	40 e0       	ldi	r20, 0x00	; 0
    4aa6:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    4aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    4aac:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    4ab0:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    4ab2:	89 81       	ldd	r24, Y+1	; 0x01

}
    4ab4:	0f 90       	pop	r0
    4ab6:	0f 90       	pop	r0
    4ab8:	cf 91       	pop	r28
    4aba:	df 91       	pop	r29
    4abc:	08 95       	ret

00004abe <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    4abe:	df 93       	push	r29
    4ac0:	cf 93       	push	r28
    4ac2:	00 d0       	rcall	.+0      	; 0x4ac4 <LCD_enu_SendData+0x6>
    4ac4:	cd b7       	in	r28, 0x3d	; 61
    4ac6:	de b7       	in	r29, 0x3e	; 62
    4ac8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    4aca:	81 e0       	ldi	r24, 0x01	; 1
    4acc:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	61 e0       	ldi	r22, 0x01	; 1
    4ad2:	41 e0       	ldi	r20, 0x01	; 1
    4ad4:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    4ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    4ada:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    4ade:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    4ae0:	89 81       	ldd	r24, Y+1	; 0x01

}
    4ae2:	0f 90       	pop	r0
    4ae4:	0f 90       	pop	r0
    4ae6:	cf 91       	pop	r28
    4ae8:	df 91       	pop	r29
    4aea:	08 95       	ret

00004aec <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    4aec:	df 93       	push	r29
    4aee:	cf 93       	push	r28
    4af0:	00 d0       	rcall	.+0      	; 0x4af2 <LCD_enu_GoToPosition+0x6>
    4af2:	00 d0       	rcall	.+0      	; 0x4af4 <LCD_enu_GoToPosition+0x8>
    4af4:	cd b7       	in	r28, 0x3d	; 61
    4af6:	de b7       	in	r29, 0x3e	; 62
    4af8:	8a 83       	std	Y+2, r24	; 0x02
    4afa:	6b 83       	std	Y+3, r22	; 0x03
    4afc:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    4b02:	8b 81       	ldd	r24, Y+3	; 0x03
    4b04:	81 31       	cpi	r24, 0x11	; 17
    4b06:	88 f5       	brcc	.+98     	; 0x4b6a <LCD_enu_GoToPosition+0x7e>
    4b08:	8b 81       	ldd	r24, Y+3	; 0x03
    4b0a:	88 23       	and	r24, r24
    4b0c:	71 f1       	breq	.+92     	; 0x4b6a <LCD_enu_GoToPosition+0x7e>
    4b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b10:	83 30       	cpi	r24, 0x03	; 3
    4b12:	58 f5       	brcc	.+86     	; 0x4b6a <LCD_enu_GoToPosition+0x7e>
    4b14:	8a 81       	ldd	r24, Y+2	; 0x02
    4b16:	88 23       	and	r24, r24
    4b18:	41 f1       	breq	.+80     	; 0x4b6a <LCD_enu_GoToPosition+0x7e>
    4b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b1c:	85 30       	cpi	r24, 0x05	; 5
    4b1e:	28 f5       	brcc	.+74     	; 0x4b6a <LCD_enu_GoToPosition+0x7e>
    4b20:	8c 81       	ldd	r24, Y+4	; 0x04
    4b22:	88 23       	and	r24, r24
    4b24:	11 f1       	breq	.+68     	; 0x4b6a <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    4b26:	81 e0       	ldi	r24, 0x01	; 1
    4b28:	61 e0       	ldi	r22, 0x01	; 1
    4b2a:	40 e0       	ldi	r20, 0x00	; 0
    4b2c:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    4b30:	8c 81       	ldd	r24, Y+4	; 0x04
    4b32:	88 2f       	mov	r24, r24
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	9c 01       	movw	r18, r24
    4b38:	21 50       	subi	r18, 0x01	; 1
    4b3a:	30 40       	sbci	r19, 0x00	; 0
    4b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b3e:	88 2f       	mov	r24, r24
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	01 97       	sbiw	r24, 0x01	; 1
    4b44:	88 0f       	add	r24, r24
    4b46:	99 1f       	adc	r25, r25
    4b48:	88 0f       	add	r24, r24
    4b4a:	99 1f       	adc	r25, r25
    4b4c:	82 0f       	add	r24, r18
    4b4e:	93 1f       	adc	r25, r19
    4b50:	82 95       	swap	r24
    4b52:	92 95       	swap	r25
    4b54:	90 7f       	andi	r25, 0xF0	; 240
    4b56:	98 27       	eor	r25, r24
    4b58:	80 7f       	andi	r24, 0xF0	; 240
    4b5a:	98 27       	eor	r25, r24
    4b5c:	98 2f       	mov	r25, r24
    4b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b60:	89 0f       	add	r24, r25
    4b62:	81 58       	subi	r24, 0x81	; 129
    4b64:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
    4b68:	02 c0       	rjmp	.+4      	; 0x4b6e <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4b6a:	82 e0       	ldi	r24, 0x02	; 2
    4b6c:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    4b6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b70:	0f 90       	pop	r0
    4b72:	0f 90       	pop	r0
    4b74:	0f 90       	pop	r0
    4b76:	0f 90       	pop	r0
    4b78:	cf 91       	pop	r28
    4b7a:	df 91       	pop	r29
    4b7c:	08 95       	ret

00004b7e <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    4b7e:	df 93       	push	r29
    4b80:	cf 93       	push	r28
    4b82:	00 d0       	rcall	.+0      	; 0x4b84 <LCD_enu_SendString+0x6>
    4b84:	0f 92       	push	r0
    4b86:	cd b7       	in	r28, 0x3d	; 61
    4b88:	de b7       	in	r29, 0x3e	; 62
    4b8a:	9b 83       	std	Y+3, r25	; 0x03
    4b8c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    4b8e:	81 e0       	ldi	r24, 0x01	; 1
    4b90:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    4b92:	8a 81       	ldd	r24, Y+2	; 0x02
    4b94:	9b 81       	ldd	r25, Y+3	; 0x03
    4b96:	00 97       	sbiw	r24, 0x00	; 0
    4b98:	c1 f0       	breq	.+48     	; 0x4bca <LCD_enu_SendString+0x4c>
    4b9a:	10 c0       	rjmp	.+32     	; 0x4bbc <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	61 e0       	ldi	r22, 0x01	; 1
    4ba0:	41 e0       	ldi	r20, 0x01	; 1
    4ba2:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    4ba6:	ea 81       	ldd	r30, Y+2	; 0x02
    4ba8:	fb 81       	ldd	r31, Y+3	; 0x03
    4baa:	20 81       	ld	r18, Z
    4bac:	8a 81       	ldd	r24, Y+2	; 0x02
    4bae:	9b 81       	ldd	r25, Y+3	; 0x03
    4bb0:	01 96       	adiw	r24, 0x01	; 1
    4bb2:	9b 83       	std	Y+3, r25	; 0x03
    4bb4:	8a 83       	std	Y+2, r24	; 0x02
    4bb6:	82 2f       	mov	r24, r18
    4bb8:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    4bbc:	ea 81       	ldd	r30, Y+2	; 0x02
    4bbe:	fb 81       	ldd	r31, Y+3	; 0x03
    4bc0:	80 81       	ld	r24, Z
    4bc2:	88 23       	and	r24, r24
    4bc4:	59 f7       	brne	.-42     	; 0x4b9c <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    4bc6:	19 82       	std	Y+1, r1	; 0x01
    4bc8:	02 c0       	rjmp	.+4      	; 0x4bce <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4bca:	83 e0       	ldi	r24, 0x03	; 3
    4bcc:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    4bce:	89 81       	ldd	r24, Y+1	; 0x01
}
    4bd0:	0f 90       	pop	r0
    4bd2:	0f 90       	pop	r0
    4bd4:	0f 90       	pop	r0
    4bd6:	cf 91       	pop	r28
    4bd8:	df 91       	pop	r29
    4bda:	08 95       	ret

00004bdc <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    4bdc:	df 93       	push	r29
    4bde:	cf 93       	push	r28
    4be0:	00 d0       	rcall	.+0      	; 0x4be2 <LCD_enu_ClearPage+0x6>
    4be2:	0f 92       	push	r0
    4be4:	cd b7       	in	r28, 0x3d	; 61
    4be6:	de b7       	in	r29, 0x3e	; 62
    4be8:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    4bee:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf0:	88 23       	and	r24, r24
    4bf2:	09 f4       	brne	.+2      	; 0x4bf6 <LCD_enu_ClearPage+0x1a>
    4bf4:	49 c0       	rjmp	.+146    	; 0x4c88 <LCD_enu_ClearPage+0xac>
    4bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf8:	85 30       	cpi	r24, 0x05	; 5
    4bfa:	08 f0       	brcs	.+2      	; 0x4bfe <LCD_enu_ClearPage+0x22>
    4bfc:	45 c0       	rjmp	.+138    	; 0x4c88 <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    4bfe:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	61 e0       	ldi	r22, 0x01	; 1
    4c04:	40 e0       	ldi	r20, 0x00	; 0
    4c06:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    4c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c0c:	88 2f       	mov	r24, r24
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	07 96       	adiw	r24, 0x07	; 7
    4c12:	82 95       	swap	r24
    4c14:	92 95       	swap	r25
    4c16:	90 7f       	andi	r25, 0xF0	; 240
    4c18:	98 27       	eor	r25, r24
    4c1a:	80 7f       	andi	r24, 0xF0	; 240
    4c1c:	98 27       	eor	r25, r24
    4c1e:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    4c22:	81 e0       	ldi	r24, 0x01	; 1
    4c24:	61 e0       	ldi	r22, 0x01	; 1
    4c26:	41 e0       	ldi	r20, 0x01	; 1
    4c28:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    4c2c:	19 82       	std	Y+1, r1	; 0x01
    4c2e:	06 c0       	rjmp	.+12     	; 0x4c3c <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    4c30:	80 e2       	ldi	r24, 0x20	; 32
    4c32:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    4c36:	89 81       	ldd	r24, Y+1	; 0x01
    4c38:	8f 5f       	subi	r24, 0xFF	; 255
    4c3a:	89 83       	std	Y+1, r24	; 0x01
    4c3c:	89 81       	ldd	r24, Y+1	; 0x01
    4c3e:	80 31       	cpi	r24, 0x10	; 16
    4c40:	b8 f3       	brcs	.-18     	; 0x4c30 <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4c42:	81 e0       	ldi	r24, 0x01	; 1
    4c44:	61 e0       	ldi	r22, 0x01	; 1
    4c46:	40 e0       	ldi	r20, 0x00	; 0
    4c48:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    4c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c4e:	88 2f       	mov	r24, r24
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	0b 96       	adiw	r24, 0x0b	; 11
    4c54:	82 95       	swap	r24
    4c56:	92 95       	swap	r25
    4c58:	90 7f       	andi	r25, 0xF0	; 240
    4c5a:	98 27       	eor	r25, r24
    4c5c:	80 7f       	andi	r24, 0xF0	; 240
    4c5e:	98 27       	eor	r25, r24
    4c60:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    4c64:	81 e0       	ldi	r24, 0x01	; 1
    4c66:	61 e0       	ldi	r22, 0x01	; 1
    4c68:	41 e0       	ldi	r20, 0x01	; 1
    4c6a:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    4c6e:	19 82       	std	Y+1, r1	; 0x01
    4c70:	06 c0       	rjmp	.+12     	; 0x4c7e <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    4c72:	80 e2       	ldi	r24, 0x20	; 32
    4c74:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    4c78:	89 81       	ldd	r24, Y+1	; 0x01
    4c7a:	8f 5f       	subi	r24, 0xFF	; 255
    4c7c:	89 83       	std	Y+1, r24	; 0x01
    4c7e:	89 81       	ldd	r24, Y+1	; 0x01
    4c80:	80 31       	cpi	r24, 0x10	; 16
    4c82:	b8 f3       	brcs	.-18     	; 0x4c72 <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    4c84:	1a 82       	std	Y+2, r1	; 0x02
    4c86:	02 c0       	rjmp	.+4      	; 0x4c8c <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4c88:	82 e0       	ldi	r24, 0x02	; 2
    4c8a:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    4c8c:	8a 81       	ldd	r24, Y+2	; 0x02

}
    4c8e:	0f 90       	pop	r0
    4c90:	0f 90       	pop	r0
    4c92:	0f 90       	pop	r0
    4c94:	cf 91       	pop	r28
    4c96:	df 91       	pop	r29
    4c98:	08 95       	ret

00004c9a <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    4c9a:	cf 92       	push	r12
    4c9c:	ef 92       	push	r14
    4c9e:	0f 93       	push	r16
    4ca0:	df 93       	push	r29
    4ca2:	cf 93       	push	r28
    4ca4:	cd b7       	in	r28, 0x3d	; 61
    4ca6:	de b7       	in	r29, 0x3e	; 62
    4ca8:	2e 97       	sbiw	r28, 0x0e	; 14
    4caa:	0f b6       	in	r0, 0x3f	; 63
    4cac:	f8 94       	cli
    4cae:	de bf       	out	0x3e, r29	; 62
    4cb0:	0f be       	out	0x3f, r0	; 63
    4cb2:	cd bf       	out	0x3d, r28	; 61
    4cb4:	9e 83       	std	Y+6, r25	; 0x06
    4cb6:	8d 83       	std	Y+5, r24	; 0x05
    4cb8:	6f 83       	std	Y+7, r22	; 0x07
    4cba:	48 87       	std	Y+8, r20	; 0x08
    4cbc:	29 87       	std	Y+9, r18	; 0x09
    4cbe:	0a 87       	std	Y+10, r16	; 0x0a
    4cc0:	eb 86       	std	Y+11, r14	; 0x0b
    4cc2:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    4cc4:	81 e0       	ldi	r24, 0x01	; 1
    4cc6:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    4cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cca:	9e 81       	ldd	r25, Y+6	; 0x06
    4ccc:	00 97       	sbiw	r24, 0x00	; 0
    4cce:	09 f4       	brne	.+2      	; 0x4cd2 <LCD_enu_DrawSpecialCharacter+0x38>
    4cd0:	b3 c0       	rjmp	.+358    	; 0x4e38 <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    4cd2:	1b 82       	std	Y+3, r1	; 0x03
    4cd4:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    4cd6:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    4cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    4cda:	88 23       	and	r24, r24
    4cdc:	09 f4       	brne	.+2      	; 0x4ce0 <LCD_enu_DrawSpecialCharacter+0x46>
    4cde:	a9 c0       	rjmp	.+338    	; 0x4e32 <LCD_enu_DrawSpecialCharacter+0x198>
    4ce0:	8f 81       	ldd	r24, Y+7	; 0x07
    4ce2:	89 30       	cpi	r24, 0x09	; 9
    4ce4:	08 f0       	brcs	.+2      	; 0x4ce8 <LCD_enu_DrawSpecialCharacter+0x4e>
    4ce6:	a5 c0       	rjmp	.+330    	; 0x4e32 <LCD_enu_DrawSpecialCharacter+0x198>
    4ce8:	88 85       	ldd	r24, Y+8	; 0x08
    4cea:	88 30       	cpi	r24, 0x08	; 8
    4cec:	08 f0       	brcs	.+2      	; 0x4cf0 <LCD_enu_DrawSpecialCharacter+0x56>
    4cee:	a1 c0       	rjmp	.+322    	; 0x4e32 <LCD_enu_DrawSpecialCharacter+0x198>
    4cf0:	88 85       	ldd	r24, Y+8	; 0x08
    4cf2:	28 2f       	mov	r18, r24
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	88 e0       	ldi	r24, 0x08	; 8
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	ac 01       	movw	r20, r24
    4cfc:	42 1b       	sub	r20, r18
    4cfe:	53 0b       	sbc	r21, r19
    4d00:	9a 01       	movw	r18, r20
    4d02:	8f 81       	ldd	r24, Y+7	; 0x07
    4d04:	88 2f       	mov	r24, r24
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	28 17       	cp	r18, r24
    4d0a:	39 07       	cpc	r19, r25
    4d0c:	0c f4       	brge	.+2      	; 0x4d10 <LCD_enu_DrawSpecialCharacter+0x76>
    4d0e:	91 c0       	rjmp	.+290    	; 0x4e32 <LCD_enu_DrawSpecialCharacter+0x198>
    4d10:	89 85       	ldd	r24, Y+9	; 0x09
    4d12:	88 23       	and	r24, r24
    4d14:	09 f4       	brne	.+2      	; 0x4d18 <LCD_enu_DrawSpecialCharacter+0x7e>
    4d16:	8d c0       	rjmp	.+282    	; 0x4e32 <LCD_enu_DrawSpecialCharacter+0x198>
    4d18:	89 85       	ldd	r24, Y+9	; 0x09
    4d1a:	83 30       	cpi	r24, 0x03	; 3
    4d1c:	08 f0       	brcs	.+2      	; 0x4d20 <LCD_enu_DrawSpecialCharacter+0x86>
    4d1e:	89 c0       	rjmp	.+274    	; 0x4e32 <LCD_enu_DrawSpecialCharacter+0x198>
    4d20:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d22:	88 23       	and	r24, r24
    4d24:	09 f4       	brne	.+2      	; 0x4d28 <LCD_enu_DrawSpecialCharacter+0x8e>
    4d26:	85 c0       	rjmp	.+266    	; 0x4e32 <LCD_enu_DrawSpecialCharacter+0x198>
    4d28:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d2a:	81 31       	cpi	r24, 0x11	; 17
    4d2c:	08 f0       	brcs	.+2      	; 0x4d30 <LCD_enu_DrawSpecialCharacter+0x96>
    4d2e:	81 c0       	rjmp	.+258    	; 0x4e32 <LCD_enu_DrawSpecialCharacter+0x198>
    4d30:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d32:	82 30       	cpi	r24, 0x02	; 2
    4d34:	08 f0       	brcs	.+2      	; 0x4d38 <LCD_enu_DrawSpecialCharacter+0x9e>
    4d36:	7d c0       	rjmp	.+250    	; 0x4e32 <LCD_enu_DrawSpecialCharacter+0x198>
    4d38:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d3a:	85 30       	cpi	r24, 0x05	; 5
    4d3c:	08 f0       	brcs	.+2      	; 0x4d40 <LCD_enu_DrawSpecialCharacter+0xa6>
    4d3e:	79 c0       	rjmp	.+242    	; 0x4e32 <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    4d40:	19 82       	std	Y+1, r1	; 0x01
    4d42:	19 c0       	rjmp	.+50     	; 0x4d76 <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    4d44:	89 81       	ldd	r24, Y+1	; 0x01
    4d46:	28 2f       	mov	r18, r24
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d4e:	82 0f       	add	r24, r18
    4d50:	93 1f       	adc	r25, r19
    4d52:	9b 83       	std	Y+3, r25	; 0x03
    4d54:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    4d56:	89 81       	ldd	r24, Y+1	; 0x01
    4d58:	98 2f       	mov	r25, r24
    4d5a:	96 95       	lsr	r25
    4d5c:	96 95       	lsr	r25
    4d5e:	96 95       	lsr	r25
    4d60:	88 85       	ldd	r24, Y+8	; 0x08
    4d62:	29 2f       	mov	r18, r25
    4d64:	28 0f       	add	r18, r24
    4d66:	8a 81       	ldd	r24, Y+2	; 0x02
    4d68:	9b 81       	ldd	r25, Y+3	; 0x03
    4d6a:	62 2f       	mov	r22, r18
    4d6c:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    4d70:	89 81       	ldd	r24, Y+1	; 0x01
    4d72:	88 5f       	subi	r24, 0xF8	; 248
    4d74:	89 83       	std	Y+1, r24	; 0x01
    4d76:	89 81       	ldd	r24, Y+1	; 0x01
    4d78:	28 2f       	mov	r18, r24
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	8f 81       	ldd	r24, Y+7	; 0x07
    4d7e:	88 2f       	mov	r24, r24
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	88 0f       	add	r24, r24
    4d84:	99 1f       	adc	r25, r25
    4d86:	88 0f       	add	r24, r24
    4d88:	99 1f       	adc	r25, r25
    4d8a:	88 0f       	add	r24, r24
    4d8c:	99 1f       	adc	r25, r25
    4d8e:	28 17       	cp	r18, r24
    4d90:	39 07       	cpc	r19, r25
    4d92:	c4 f2       	brlt	.-80     	; 0x4d44 <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4d94:	81 e0       	ldi	r24, 0x01	; 1
    4d96:	61 e0       	ldi	r22, 0x01	; 1
    4d98:	40 e0       	ldi	r20, 0x00	; 0
    4d9a:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    4d9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4da0:	28 2f       	mov	r18, r24
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	3e 87       	std	Y+14, r19	; 0x0e
    4da6:	2d 87       	std	Y+13, r18	; 0x0d
    4da8:	4d 85       	ldd	r20, Y+13	; 0x0d
    4daa:	5e 85       	ldd	r21, Y+14	; 0x0e
    4dac:	41 15       	cp	r20, r1
    4dae:	51 05       	cpc	r21, r1
    4db0:	49 f0       	breq	.+18     	; 0x4dc4 <LCD_enu_DrawSpecialCharacter+0x12a>
    4db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4db6:	81 30       	cpi	r24, 0x01	; 1
    4db8:	91 05       	cpc	r25, r1
    4dba:	39 f4       	brne	.+14     	; 0x4dca <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    4dbc:	86 e0       	ldi	r24, 0x06	; 6
    4dbe:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
    4dc2:	03 c0       	rjmp	.+6      	; 0x4dca <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    4dc4:	84 e0       	ldi	r24, 0x04	; 4
    4dc6:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4dca:	81 e0       	ldi	r24, 0x01	; 1
    4dcc:	61 e0       	ldi	r22, 0x01	; 1
    4dce:	40 e0       	ldi	r20, 0x00	; 0
    4dd0:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    4dd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4dd6:	88 2f       	mov	r24, r24
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	9c 01       	movw	r18, r24
    4ddc:	21 50       	subi	r18, 0x01	; 1
    4dde:	30 40       	sbci	r19, 0x00	; 0
    4de0:	89 85       	ldd	r24, Y+9	; 0x09
    4de2:	88 2f       	mov	r24, r24
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	01 97       	sbiw	r24, 0x01	; 1
    4de8:	88 0f       	add	r24, r24
    4dea:	99 1f       	adc	r25, r25
    4dec:	88 0f       	add	r24, r24
    4dee:	99 1f       	adc	r25, r25
    4df0:	82 0f       	add	r24, r18
    4df2:	93 1f       	adc	r25, r19
    4df4:	82 95       	swap	r24
    4df6:	92 95       	swap	r25
    4df8:	90 7f       	andi	r25, 0xF0	; 240
    4dfa:	98 27       	eor	r25, r24
    4dfc:	80 7f       	andi	r24, 0xF0	; 240
    4dfe:	98 27       	eor	r25, r24
    4e00:	98 2f       	mov	r25, r24
    4e02:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e04:	89 0f       	add	r24, r25
    4e06:	81 58       	subi	r24, 0x81	; 129
    4e08:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    4e0c:	81 e0       	ldi	r24, 0x01	; 1
    4e0e:	61 e0       	ldi	r22, 0x01	; 1
    4e10:	41 e0       	ldi	r20, 0x01	; 1
    4e12:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    4e16:	19 82       	std	Y+1, r1	; 0x01
    4e18:	06 c0       	rjmp	.+12     	; 0x4e26 <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    4e1a:	89 81       	ldd	r24, Y+1	; 0x01
    4e1c:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    4e20:	89 81       	ldd	r24, Y+1	; 0x01
    4e22:	8f 5f       	subi	r24, 0xFF	; 255
    4e24:	89 83       	std	Y+1, r24	; 0x01
    4e26:	99 81       	ldd	r25, Y+1	; 0x01
    4e28:	8f 81       	ldd	r24, Y+7	; 0x07
    4e2a:	98 17       	cp	r25, r24
    4e2c:	b0 f3       	brcs	.-20     	; 0x4e1a <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    4e2e:	1c 82       	std	Y+4, r1	; 0x04
    4e30:	05 c0       	rjmp	.+10     	; 0x4e3c <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    4e32:	82 e0       	ldi	r24, 0x02	; 2
    4e34:	8c 83       	std	Y+4, r24	; 0x04
    4e36:	02 c0       	rjmp	.+4      	; 0x4e3c <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    4e38:	83 e0       	ldi	r24, 0x03	; 3
    4e3a:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    4e3c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4e3e:	2e 96       	adiw	r28, 0x0e	; 14
    4e40:	0f b6       	in	r0, 0x3f	; 63
    4e42:	f8 94       	cli
    4e44:	de bf       	out	0x3e, r29	; 62
    4e46:	0f be       	out	0x3f, r0	; 63
    4e48:	cd bf       	out	0x3d, r28	; 61
    4e4a:	cf 91       	pop	r28
    4e4c:	df 91       	pop	r29
    4e4e:	0f 91       	pop	r16
    4e50:	ef 90       	pop	r14
    4e52:	cf 90       	pop	r12
    4e54:	08 95       	ret

00004e56 <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    4e56:	0f 93       	push	r16
    4e58:	df 93       	push	r29
    4e5a:	cf 93       	push	r28
    4e5c:	cd b7       	in	r28, 0x3d	; 61
    4e5e:	de b7       	in	r29, 0x3e	; 62
    4e60:	2e 97       	sbiw	r28, 0x0e	; 14
    4e62:	0f b6       	in	r0, 0x3f	; 63
    4e64:	f8 94       	cli
    4e66:	de bf       	out	0x3e, r29	; 62
    4e68:	0f be       	out	0x3f, r0	; 63
    4e6a:	cd bf       	out	0x3d, r28	; 61
    4e6c:	68 87       	std	Y+8, r22	; 0x08
    4e6e:	79 87       	std	Y+9, r23	; 0x09
    4e70:	8a 87       	std	Y+10, r24	; 0x0a
    4e72:	9b 87       	std	Y+11, r25	; 0x0b
    4e74:	4c 87       	std	Y+12, r20	; 0x0c
    4e76:	2d 87       	std	Y+13, r18	; 0x0d
    4e78:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    4e7a:	81 e0       	ldi	r24, 0x01	; 1
    4e7c:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    4e7e:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    4e80:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    4e82:	88 85       	ldd	r24, Y+8	; 0x08
    4e84:	99 85       	ldd	r25, Y+9	; 0x09
    4e86:	aa 85       	ldd	r26, Y+10	; 0x0a
    4e88:	bb 85       	ldd	r27, Y+11	; 0x0b
    4e8a:	bb 23       	and	r27, r27
    4e8c:	8c f4       	brge	.+34     	; 0x4eb0 <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    4e92:	88 85       	ldd	r24, Y+8	; 0x08
    4e94:	99 85       	ldd	r25, Y+9	; 0x09
    4e96:	aa 85       	ldd	r26, Y+10	; 0x0a
    4e98:	bb 85       	ldd	r27, Y+11	; 0x0b
    4e9a:	b0 95       	com	r27
    4e9c:	a0 95       	com	r26
    4e9e:	90 95       	com	r25
    4ea0:	81 95       	neg	r24
    4ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ea4:	af 4f       	sbci	r26, 0xFF	; 255
    4ea6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ea8:	88 87       	std	Y+8, r24	; 0x08
    4eaa:	99 87       	std	Y+9, r25	; 0x09
    4eac:	aa 87       	std	Y+10, r26	; 0x0a
    4eae:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    4eb0:	88 85       	ldd	r24, Y+8	; 0x08
    4eb2:	99 85       	ldd	r25, Y+9	; 0x09
    4eb4:	aa 85       	ldd	r26, Y+10	; 0x0a
    4eb6:	bb 85       	ldd	r27, Y+11	; 0x0b
    4eb8:	8c 83       	std	Y+4, r24	; 0x04
    4eba:	9d 83       	std	Y+5, r25	; 0x05
    4ebc:	ae 83       	std	Y+6, r26	; 0x06
    4ebe:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    4ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec2:	8f 5f       	subi	r24, 0xFF	; 255
    4ec4:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    4ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    4ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    4eca:	ae 81       	ldd	r26, Y+6	; 0x06
    4ecc:	bf 81       	ldd	r27, Y+7	; 0x07
    4ece:	2a e0       	ldi	r18, 0x0A	; 10
    4ed0:	30 e0       	ldi	r19, 0x00	; 0
    4ed2:	40 e0       	ldi	r20, 0x00	; 0
    4ed4:	50 e0       	ldi	r21, 0x00	; 0
    4ed6:	bc 01       	movw	r22, r24
    4ed8:	cd 01       	movw	r24, r26
    4eda:	0e 94 2b 34 	call	0x6856	; 0x6856 <__divmodsi4>
    4ede:	da 01       	movw	r26, r20
    4ee0:	c9 01       	movw	r24, r18
    4ee2:	8c 83       	std	Y+4, r24	; 0x04
    4ee4:	9d 83       	std	Y+5, r25	; 0x05
    4ee6:	ae 83       	std	Y+6, r26	; 0x06
    4ee8:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    4eea:	8c 81       	ldd	r24, Y+4	; 0x04
    4eec:	9d 81       	ldd	r25, Y+5	; 0x05
    4eee:	ae 81       	ldd	r26, Y+6	; 0x06
    4ef0:	bf 81       	ldd	r27, Y+7	; 0x07
    4ef2:	00 97       	sbiw	r24, 0x00	; 0
    4ef4:	a1 05       	cpc	r26, r1
    4ef6:	b1 05       	cpc	r27, r1
    4ef8:	19 f7       	brne	.-58     	; 0x4ec0 <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    4efa:	8c 85       	ldd	r24, Y+12	; 0x0c
    4efc:	88 23       	and	r24, r24
    4efe:	09 f4       	brne	.+2      	; 0x4f02 <LCD_enu_WriteIntegerNum+0xac>
    4f00:	87 c0       	rjmp	.+270    	; 0x5010 <LCD_enu_WriteIntegerNum+0x1ba>
    4f02:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f04:	83 30       	cpi	r24, 0x03	; 3
    4f06:	08 f0       	brcs	.+2      	; 0x4f0a <LCD_enu_WriteIntegerNum+0xb4>
    4f08:	83 c0       	rjmp	.+262    	; 0x5010 <LCD_enu_WriteIntegerNum+0x1ba>
    4f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f0c:	88 23       	and	r24, r24
    4f0e:	09 f4       	brne	.+2      	; 0x4f12 <LCD_enu_WriteIntegerNum+0xbc>
    4f10:	7f c0       	rjmp	.+254    	; 0x5010 <LCD_enu_WriteIntegerNum+0x1ba>
    4f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f14:	81 31       	cpi	r24, 0x11	; 17
    4f16:	08 f0       	brcs	.+2      	; 0x4f1a <LCD_enu_WriteIntegerNum+0xc4>
    4f18:	7b c0       	rjmp	.+246    	; 0x5010 <LCD_enu_WriteIntegerNum+0x1ba>
    4f1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f1c:	85 30       	cpi	r24, 0x05	; 5
    4f1e:	08 f0       	brcs	.+2      	; 0x4f22 <LCD_enu_WriteIntegerNum+0xcc>
    4f20:	77 c0       	rjmp	.+238    	; 0x5010 <LCD_enu_WriteIntegerNum+0x1ba>
    4f22:	8a 81       	ldd	r24, Y+2	; 0x02
    4f24:	81 31       	cpi	r24, 0x11	; 17
    4f26:	08 f0       	brcs	.+2      	; 0x4f2a <LCD_enu_WriteIntegerNum+0xd4>
    4f28:	73 c0       	rjmp	.+230    	; 0x5010 <LCD_enu_WriteIntegerNum+0x1ba>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    4f2a:	88 85       	ldd	r24, Y+8	; 0x08
    4f2c:	99 85       	ldd	r25, Y+9	; 0x09
    4f2e:	aa 85       	ldd	r26, Y+10	; 0x0a
    4f30:	bb 85       	ldd	r27, Y+11	; 0x0b
    4f32:	8c 83       	std	Y+4, r24	; 0x04
    4f34:	9d 83       	std	Y+5, r25	; 0x05
    4f36:	ae 83       	std	Y+6, r26	; 0x06
    4f38:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    4f3a:	ce 01       	movw	r24, r28
    4f3c:	04 96       	adiw	r24, 0x04	; 4
    4f3e:	0e 94 1a 2c 	call	0x5834	; 0x5834 <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    4f42:	81 e0       	ldi	r24, 0x01	; 1
    4f44:	61 e0       	ldi	r22, 0x01	; 1
    4f46:	40 e0       	ldi	r20, 0x00	; 0
    4f48:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        //Placing Cursor
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    4f4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f4e:	88 2f       	mov	r24, r24
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	9c 01       	movw	r18, r24
    4f54:	21 50       	subi	r18, 0x01	; 1
    4f56:	30 40       	sbci	r19, 0x00	; 0
    4f58:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f5a:	88 2f       	mov	r24, r24
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	01 97       	sbiw	r24, 0x01	; 1
    4f60:	88 0f       	add	r24, r24
    4f62:	99 1f       	adc	r25, r25
    4f64:	88 0f       	add	r24, r24
    4f66:	99 1f       	adc	r25, r25
    4f68:	82 0f       	add	r24, r18
    4f6a:	93 1f       	adc	r25, r19
    4f6c:	82 95       	swap	r24
    4f6e:	92 95       	swap	r25
    4f70:	90 7f       	andi	r25, 0xF0	; 240
    4f72:	98 27       	eor	r25, r24
    4f74:	80 7f       	andi	r24, 0xF0	; 240
    4f76:	98 27       	eor	r25, r24
    4f78:	98 2f       	mov	r25, r24
    4f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f7c:	89 0f       	add	r24, r25
    4f7e:	81 58       	subi	r24, 0x81	; 129
    4f80:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    4f84:	81 e0       	ldi	r24, 0x01	; 1
    4f86:	61 e0       	ldi	r22, 0x01	; 1
    4f88:	41 e0       	ldi	r20, 0x01	; 1
    4f8a:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    4f8e:	89 81       	ldd	r24, Y+1	; 0x01
    4f90:	88 23       	and	r24, r24
    4f92:	51 f1       	breq	.+84     	; 0x4fe8 <LCD_enu_WriteIntegerNum+0x192>
        {
            enu_PassByteAndLatch('-');
    4f94:	8d e2       	ldi	r24, 0x2D	; 45
    4f96:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
    4f9a:	26 c0       	rjmp	.+76     	; 0x4fe8 <LCD_enu_WriteIntegerNum+0x192>
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    4f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    4fa0:	ae 81       	ldd	r26, Y+6	; 0x06
    4fa2:	bf 81       	ldd	r27, Y+7	; 0x07
    4fa4:	2a e0       	ldi	r18, 0x0A	; 10
    4fa6:	30 e0       	ldi	r19, 0x00	; 0
    4fa8:	40 e0       	ldi	r20, 0x00	; 0
    4faa:	50 e0       	ldi	r21, 0x00	; 0
    4fac:	bc 01       	movw	r22, r24
    4fae:	cd 01       	movw	r24, r26
    4fb0:	0e 94 2b 34 	call	0x6856	; 0x6856 <__divmodsi4>
    4fb4:	dc 01       	movw	r26, r24
    4fb6:	cb 01       	movw	r24, r22
    4fb8:	80 5d       	subi	r24, 0xD0	; 208
    4fba:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    4fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    4fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    4fc2:	ae 81       	ldd	r26, Y+6	; 0x06
    4fc4:	bf 81       	ldd	r27, Y+7	; 0x07
    4fc6:	2a e0       	ldi	r18, 0x0A	; 10
    4fc8:	30 e0       	ldi	r19, 0x00	; 0
    4fca:	40 e0       	ldi	r20, 0x00	; 0
    4fcc:	50 e0       	ldi	r21, 0x00	; 0
    4fce:	bc 01       	movw	r22, r24
    4fd0:	cd 01       	movw	r24, r26
    4fd2:	0e 94 2b 34 	call	0x6856	; 0x6856 <__divmodsi4>
    4fd6:	da 01       	movw	r26, r20
    4fd8:	c9 01       	movw	r24, r18
    4fda:	8c 83       	std	Y+4, r24	; 0x04
    4fdc:	9d 83       	std	Y+5, r25	; 0x05
    4fde:	ae 83       	std	Y+6, r26	; 0x06
    4fe0:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    4fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe4:	81 50       	subi	r24, 0x01	; 1
    4fe6:	8a 83       	std	Y+2, r24	; 0x02
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
    4fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    4fea:	9d 81       	ldd	r25, Y+5	; 0x05
    4fec:	ae 81       	ldd	r26, Y+6	; 0x06
    4fee:	bf 81       	ldd	r27, Y+7	; 0x07
    4ff0:	00 97       	sbiw	r24, 0x00	; 0
    4ff2:	a1 05       	cpc	r26, r1
    4ff4:	b1 05       	cpc	r27, r1
    4ff6:	91 f6       	brne	.-92     	; 0x4f9c <LCD_enu_WriteIntegerNum+0x146>
    4ff8:	06 c0       	rjmp	.+12     	; 0x5006 <LCD_enu_WriteIntegerNum+0x1b0>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    4ffa:	80 e3       	ldi	r24, 0x30	; 48
    4ffc:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    5000:	8a 81       	ldd	r24, Y+2	; 0x02
    5002:	81 50       	subi	r24, 0x01	; 1
    5004:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    5006:	8a 81       	ldd	r24, Y+2	; 0x02
    5008:	88 23       	and	r24, r24
    500a:	b9 f7       	brne	.-18     	; 0x4ffa <LCD_enu_WriteIntegerNum+0x1a4>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    500c:	1b 82       	std	Y+3, r1	; 0x03
    500e:	02 c0       	rjmp	.+4      	; 0x5014 <LCD_enu_WriteIntegerNum+0x1be>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5010:	82 e0       	ldi	r24, 0x02	; 2
    5012:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    5014:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5016:	2e 96       	adiw	r28, 0x0e	; 14
    5018:	0f b6       	in	r0, 0x3f	; 63
    501a:	f8 94       	cli
    501c:	de bf       	out	0x3e, r29	; 62
    501e:	0f be       	out	0x3f, r0	; 63
    5020:	cd bf       	out	0x3d, r28	; 61
    5022:	cf 91       	pop	r28
    5024:	df 91       	pop	r29
    5026:	0f 91       	pop	r16
    5028:	08 95       	ret

0000502a <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    502a:	0f 93       	push	r16
    502c:	df 93       	push	r29
    502e:	cf 93       	push	r28
    5030:	cd b7       	in	r28, 0x3d	; 61
    5032:	de b7       	in	r29, 0x3e	; 62
    5034:	67 97       	sbiw	r28, 0x17	; 23
    5036:	0f b6       	in	r0, 0x3f	; 63
    5038:	f8 94       	cli
    503a:	de bf       	out	0x3e, r29	; 62
    503c:	0f be       	out	0x3f, r0	; 63
    503e:	cd bf       	out	0x3d, r28	; 61
    5040:	69 8b       	std	Y+17, r22	; 0x11
    5042:	7a 8b       	std	Y+18, r23	; 0x12
    5044:	8b 8b       	std	Y+19, r24	; 0x13
    5046:	9c 8b       	std	Y+20, r25	; 0x14
    5048:	4d 8b       	std	Y+21, r20	; 0x15
    504a:	2e 8b       	std	Y+22, r18	; 0x16
    504c:	0f 8b       	std	Y+23, r16	; 0x17
    u8 Local_u8_ErrorFlag = ES_NOK;
    504e:	81 e0       	ldi	r24, 0x01	; 1
    5050:	8c 83       	std	Y+4, r24	; 0x04
    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    u32 Local_u32_TempDecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    5052:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = LCD_FLOAT_PRECISION;
    5054:	81 e0       	ldi	r24, 0x01	; 1
    5056:	8a 83       	std	Y+2, r24	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    5058:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    505a:	69 89       	ldd	r22, Y+17	; 0x11
    505c:	7a 89       	ldd	r23, Y+18	; 0x12
    505e:	8b 89       	ldd	r24, Y+19	; 0x13
    5060:	9c 89       	ldd	r25, Y+20	; 0x14
    5062:	20 e0       	ldi	r18, 0x00	; 0
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	40 e0       	ldi	r20, 0x00	; 0
    5068:	50 e0       	ldi	r21, 0x00	; 0
    506a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    506e:	88 23       	and	r24, r24
    5070:	5c f4       	brge	.+22     	; 0x5088 <LCD_enu_WriteFloatNum+0x5e>
    {
        local_u8_NegativeFlag = True;
    5072:	81 e0       	ldi	r24, 0x01	; 1
    5074:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    5076:	89 89       	ldd	r24, Y+17	; 0x11
    5078:	9a 89       	ldd	r25, Y+18	; 0x12
    507a:	ab 89       	ldd	r26, Y+19	; 0x13
    507c:	bc 89       	ldd	r27, Y+20	; 0x14
    507e:	b0 58       	subi	r27, 0x80	; 128
    5080:	89 8b       	std	Y+17, r24	; 0x11
    5082:	9a 8b       	std	Y+18, r25	; 0x12
    5084:	ab 8b       	std	Y+19, r26	; 0x13
    5086:	bc 8b       	std	Y+20, r27	; 0x14
    }

    

    Local_u32_WholeDigits = Copy_f32_Num;
    5088:	69 89       	ldd	r22, Y+17	; 0x11
    508a:	7a 89       	ldd	r23, Y+18	; 0x12
    508c:	8b 89       	ldd	r24, Y+19	; 0x13
    508e:	9c 89       	ldd	r25, Y+20	; 0x14
    5090:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5094:	dc 01       	movw	r26, r24
    5096:	cb 01       	movw	r24, r22
    5098:	8d 83       	std	Y+5, r24	; 0x05
    509a:	9e 83       	std	Y+6, r25	; 0x06
    509c:	af 83       	std	Y+7, r26	; 0x07
    509e:	b8 87       	std	Y+8, r27	; 0x08

    Local_f32_DecimalDigits = Copy_f32_Num - Local_u32_WholeDigits;
    50a0:	8d 81       	ldd	r24, Y+5	; 0x05
    50a2:	9e 81       	ldd	r25, Y+6	; 0x06
    50a4:	af 81       	ldd	r26, Y+7	; 0x07
    50a6:	b8 85       	ldd	r27, Y+8	; 0x08
    50a8:	bc 01       	movw	r22, r24
    50aa:	cd 01       	movw	r24, r26
    50ac:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatunsisf>
    50b0:	9b 01       	movw	r18, r22
    50b2:	ac 01       	movw	r20, r24
    50b4:	69 89       	ldd	r22, Y+17	; 0x11
    50b6:	7a 89       	ldd	r23, Y+18	; 0x12
    50b8:	8b 89       	ldd	r24, Y+19	; 0x13
    50ba:	9c 89       	ldd	r25, Y+20	; 0x14
    50bc:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    50c0:	dc 01       	movw	r26, r24
    50c2:	cb 01       	movw	r24, r22
    50c4:	89 87       	std	Y+9, r24	; 0x09
    50c6:	9a 87       	std	Y+10, r25	; 0x0a
    50c8:	ab 87       	std	Y+11, r26	; 0x0b
    50ca:	bc 87       	std	Y+12, r27	; 0x0c


    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    50cc:	8b 81       	ldd	r24, Y+3	; 0x03
    50ce:	8f 5f       	subi	r24, 0xFF	; 255
    50d0:	8b 83       	std	Y+3, r24	; 0x03

        Local_u32_WholeDigits  /= 10;
    50d2:	8d 81       	ldd	r24, Y+5	; 0x05
    50d4:	9e 81       	ldd	r25, Y+6	; 0x06
    50d6:	af 81       	ldd	r26, Y+7	; 0x07
    50d8:	b8 85       	ldd	r27, Y+8	; 0x08
    50da:	2a e0       	ldi	r18, 0x0A	; 10
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	40 e0       	ldi	r20, 0x00	; 0
    50e0:	50 e0       	ldi	r21, 0x00	; 0
    50e2:	bc 01       	movw	r22, r24
    50e4:	cd 01       	movw	r24, r26
    50e6:	0e 94 09 34 	call	0x6812	; 0x6812 <__udivmodsi4>
    50ea:	da 01       	movw	r26, r20
    50ec:	c9 01       	movw	r24, r18
    50ee:	8d 83       	std	Y+5, r24	; 0x05
    50f0:	9e 83       	std	Y+6, r25	; 0x06
    50f2:	af 83       	std	Y+7, r26	; 0x07
    50f4:	b8 87       	std	Y+8, r27	; 0x08

    }while(Local_u32_WholeDigits);
    50f6:	8d 81       	ldd	r24, Y+5	; 0x05
    50f8:	9e 81       	ldd	r25, Y+6	; 0x06
    50fa:	af 81       	ldd	r26, Y+7	; 0x07
    50fc:	b8 85       	ldd	r27, Y+8	; 0x08
    50fe:	00 97       	sbiw	r24, 0x00	; 0
    5100:	a1 05       	cpc	r26, r1
    5102:	b1 05       	cpc	r27, r1
    5104:	19 f7       	brne	.-58     	; 0x50cc <LCD_enu_WriteFloatNum+0xa2>

    //Converting Decimals into Whole numbers ex: 0.451 -> 451
    enu_ConvertFloatToInteger(&Local_f32_DecimalDigits, LCD_FLOAT_PRECISION);
    5106:	ce 01       	movw	r24, r28
    5108:	09 96       	adiw	r24, 0x09	; 9
    510a:	61 e0       	ldi	r22, 0x01	; 1
    510c:	0e 94 98 2c 	call	0x5930	; 0x5930 <enu_ConvertFloatToInteger>


    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DecimalDigitCount <= LCD_MAX_INTEGER_LENGTH))
    5110:	8d 89       	ldd	r24, Y+21	; 0x15
    5112:	88 23       	and	r24, r24
    5114:	09 f4       	brne	.+2      	; 0x5118 <LCD_enu_WriteFloatNum+0xee>
    5116:	e3 c0       	rjmp	.+454    	; 0x52de <LCD_enu_WriteFloatNum+0x2b4>
    5118:	8d 89       	ldd	r24, Y+21	; 0x15
    511a:	83 30       	cpi	r24, 0x03	; 3
    511c:	08 f0       	brcs	.+2      	; 0x5120 <LCD_enu_WriteFloatNum+0xf6>
    511e:	df c0       	rjmp	.+446    	; 0x52de <LCD_enu_WriteFloatNum+0x2b4>
    5120:	8e 89       	ldd	r24, Y+22	; 0x16
    5122:	88 23       	and	r24, r24
    5124:	09 f4       	brne	.+2      	; 0x5128 <LCD_enu_WriteFloatNum+0xfe>
    5126:	db c0       	rjmp	.+438    	; 0x52de <LCD_enu_WriteFloatNum+0x2b4>
    5128:	8e 89       	ldd	r24, Y+22	; 0x16
    512a:	81 31       	cpi	r24, 0x11	; 17
    512c:	08 f0       	brcs	.+2      	; 0x5130 <LCD_enu_WriteFloatNum+0x106>
    512e:	d7 c0       	rjmp	.+430    	; 0x52de <LCD_enu_WriteFloatNum+0x2b4>
    5130:	8f 89       	ldd	r24, Y+23	; 0x17
    5132:	85 30       	cpi	r24, 0x05	; 5
    5134:	08 f0       	brcs	.+2      	; 0x5138 <LCD_enu_WriteFloatNum+0x10e>
    5136:	d3 c0       	rjmp	.+422    	; 0x52de <LCD_enu_WriteFloatNum+0x2b4>
    5138:	8a 81       	ldd	r24, Y+2	; 0x02
    513a:	81 31       	cpi	r24, 0x11	; 17
    513c:	08 f0       	brcs	.+2      	; 0x5140 <LCD_enu_WriteFloatNum+0x116>
    513e:	cf c0       	rjmp	.+414    	; 0x52de <LCD_enu_WriteFloatNum+0x2b4>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    5140:	81 e0       	ldi	r24, 0x01	; 1
    5142:	61 e0       	ldi	r22, 0x01	; 1
    5144:	40 e0       	ldi	r20, 0x00	; 0
    5146:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    514a:	8f 89       	ldd	r24, Y+23	; 0x17
    514c:	88 2f       	mov	r24, r24
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	9c 01       	movw	r18, r24
    5152:	21 50       	subi	r18, 0x01	; 1
    5154:	30 40       	sbci	r19, 0x00	; 0
    5156:	8d 89       	ldd	r24, Y+21	; 0x15
    5158:	88 2f       	mov	r24, r24
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	01 97       	sbiw	r24, 0x01	; 1
    515e:	88 0f       	add	r24, r24
    5160:	99 1f       	adc	r25, r25
    5162:	88 0f       	add	r24, r24
    5164:	99 1f       	adc	r25, r25
    5166:	82 0f       	add	r24, r18
    5168:	93 1f       	adc	r25, r19
    516a:	82 95       	swap	r24
    516c:	92 95       	swap	r25
    516e:	90 7f       	andi	r25, 0xF0	; 240
    5170:	98 27       	eor	r25, r24
    5172:	80 7f       	andi	r24, 0xF0	; 240
    5174:	98 27       	eor	r25, r24
    5176:	98 2f       	mov	r25, r24
    5178:	8e 89       	ldd	r24, Y+22	; 0x16
    517a:	89 0f       	add	r24, r25
    517c:	81 58       	subi	r24, 0x81	; 129
    517e:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
        
        
        //Choosing DR to pass numbers 
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    5182:	81 e0       	ldi	r24, 0x01	; 1
    5184:	61 e0       	ldi	r22, 0x01	; 1
    5186:	41 e0       	ldi	r20, 0x01	; 1
    5188:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>

        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    518c:	89 81       	ldd	r24, Y+1	; 0x01
    518e:	88 23       	and	r24, r24
    5190:	19 f0       	breq	.+6      	; 0x5198 <LCD_enu_WriteFloatNum+0x16e>
        {
            enu_PassByteAndLatch('-');
    5192:	8d e2       	ldi	r24, 0x2D	; 45
    5194:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
        }


        //A] Printing whole digits 

        Local_u32_WholeDigits = Copy_f32_Num;
    5198:	69 89       	ldd	r22, Y+17	; 0x11
    519a:	7a 89       	ldd	r23, Y+18	; 0x12
    519c:	8b 89       	ldd	r24, Y+19	; 0x13
    519e:	9c 89       	ldd	r25, Y+20	; 0x14
    51a0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    51a4:	dc 01       	movw	r26, r24
    51a6:	cb 01       	movw	r24, r22
    51a8:	8d 83       	std	Y+5, r24	; 0x05
    51aa:	9e 83       	std	Y+6, r25	; 0x06
    51ac:	af 83       	std	Y+7, r26	; 0x07
    51ae:	b8 87       	std	Y+8, r27	; 0x08
        enu_ReverseInteger(&Local_u32_WholeDigits);
    51b0:	ce 01       	movw	r24, r28
    51b2:	05 96       	adiw	r24, 0x05	; 5
    51b4:	0e 94 1a 2c 	call	0x5834	; 0x5834 <enu_ReverseInteger>
    51b8:	26 c0       	rjmp	.+76     	; 0x5206 <LCD_enu_WriteFloatNum+0x1dc>

        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    51ba:	8d 81       	ldd	r24, Y+5	; 0x05
    51bc:	9e 81       	ldd	r25, Y+6	; 0x06
    51be:	af 81       	ldd	r26, Y+7	; 0x07
    51c0:	b8 85       	ldd	r27, Y+8	; 0x08
    51c2:	2a e0       	ldi	r18, 0x0A	; 10
    51c4:	30 e0       	ldi	r19, 0x00	; 0
    51c6:	40 e0       	ldi	r20, 0x00	; 0
    51c8:	50 e0       	ldi	r21, 0x00	; 0
    51ca:	bc 01       	movw	r22, r24
    51cc:	cd 01       	movw	r24, r26
    51ce:	0e 94 09 34 	call	0x6812	; 0x6812 <__udivmodsi4>
    51d2:	dc 01       	movw	r26, r24
    51d4:	cb 01       	movw	r24, r22
    51d6:	80 5d       	subi	r24, 0xD0	; 208
    51d8:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
           
            Local_u32_WholeDigits /= 10;
    51dc:	8d 81       	ldd	r24, Y+5	; 0x05
    51de:	9e 81       	ldd	r25, Y+6	; 0x06
    51e0:	af 81       	ldd	r26, Y+7	; 0x07
    51e2:	b8 85       	ldd	r27, Y+8	; 0x08
    51e4:	2a e0       	ldi	r18, 0x0A	; 10
    51e6:	30 e0       	ldi	r19, 0x00	; 0
    51e8:	40 e0       	ldi	r20, 0x00	; 0
    51ea:	50 e0       	ldi	r21, 0x00	; 0
    51ec:	bc 01       	movw	r22, r24
    51ee:	cd 01       	movw	r24, r26
    51f0:	0e 94 09 34 	call	0x6812	; 0x6812 <__udivmodsi4>
    51f4:	da 01       	movw	r26, r20
    51f6:	c9 01       	movw	r24, r18
    51f8:	8d 83       	std	Y+5, r24	; 0x05
    51fa:	9e 83       	std	Y+6, r25	; 0x06
    51fc:	af 83       	std	Y+7, r26	; 0x07
    51fe:	b8 87       	std	Y+8, r27	; 0x08
           
            Local_u8_WholeDigitCount--;
    5200:	8b 81       	ldd	r24, Y+3	; 0x03
    5202:	81 50       	subi	r24, 0x01	; 1
    5204:	8b 83       	std	Y+3, r24	; 0x03

        Local_u32_WholeDigits = Copy_f32_Num;
        enu_ReverseInteger(&Local_u32_WholeDigits);

        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    5206:	8d 81       	ldd	r24, Y+5	; 0x05
    5208:	9e 81       	ldd	r25, Y+6	; 0x06
    520a:	af 81       	ldd	r26, Y+7	; 0x07
    520c:	b8 85       	ldd	r27, Y+8	; 0x08
    520e:	00 97       	sbiw	r24, 0x00	; 0
    5210:	a1 05       	cpc	r26, r1
    5212:	b1 05       	cpc	r27, r1
    5214:	91 f6       	brne	.-92     	; 0x51ba <LCD_enu_WriteFloatNum+0x190>
    5216:	06 c0       	rjmp	.+12     	; 0x5224 <LCD_enu_WriteFloatNum+0x1fa>
        }

        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    5218:	80 e3       	ldi	r24, 0x30	; 48
    521a:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
           
            Local_u8_WholeDigitCount--;
    521e:	8b 81       	ldd	r24, Y+3	; 0x03
    5220:	81 50       	subi	r24, 0x01	; 1
    5222:	8b 83       	std	Y+3, r24	; 0x03
           
            Local_u8_WholeDigitCount--;
        }

        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    5224:	8b 81       	ldd	r24, Y+3	; 0x03
    5226:	88 23       	and	r24, r24
    5228:	b9 f7       	brne	.-18     	; 0x5218 <LCD_enu_WriteFloatNum+0x1ee>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    522a:	89 85       	ldd	r24, Y+9	; 0x09
    522c:	9a 85       	ldd	r25, Y+10	; 0x0a
    522e:	ab 85       	ldd	r26, Y+11	; 0x0b
    5230:	bc 85       	ldd	r27, Y+12	; 0x0c
    5232:	bc 01       	movw	r22, r24
    5234:	cd 01       	movw	r24, r26
    5236:	20 e0       	ldi	r18, 0x00	; 0
    5238:	30 e0       	ldi	r19, 0x00	; 0
    523a:	40 e0       	ldi	r20, 0x00	; 0
    523c:	50 e0       	ldi	r21, 0x00	; 0
    523e:	0e 94 44 04 	call	0x888	; 0x888 <__nesf2>
    5242:	88 23       	and	r24, r24
    5244:	09 f4       	brne	.+2      	; 0x5248 <LCD_enu_WriteFloatNum+0x21e>
    5246:	49 c0       	rjmp	.+146    	; 0x52da <LCD_enu_WriteFloatNum+0x2b0>
        {
            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    5248:	8e e2       	ldi	r24, 0x2E	; 46
    524a:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>

            //Saving the float digits in an u32 variable to pass to other functions easily (step for Safety reasons not neaded)
            Local_u32_TempDecimalDigits = Local_f32_DecimalDigits;
    524e:	89 85       	ldd	r24, Y+9	; 0x09
    5250:	9a 85       	ldd	r25, Y+10	; 0x0a
    5252:	ab 85       	ldd	r26, Y+11	; 0x0b
    5254:	bc 85       	ldd	r27, Y+12	; 0x0c
    5256:	bc 01       	movw	r22, r24
    5258:	cd 01       	movw	r24, r26
    525a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    525e:	dc 01       	movw	r26, r24
    5260:	cb 01       	movw	r24, r22
    5262:	8d 87       	std	Y+13, r24	; 0x0d
    5264:	9e 87       	std	Y+14, r25	; 0x0e
    5266:	af 87       	std	Y+15, r26	; 0x0f
    5268:	b8 8b       	std	Y+16, r27	; 0x10
            
            //Reversing Number
            enu_ReverseInteger(&Local_u32_TempDecimalDigits);
    526a:	ce 01       	movw	r24, r28
    526c:	0d 96       	adiw	r24, 0x0d	; 13
    526e:	0e 94 1a 2c 	call	0x5834	; 0x5834 <enu_ReverseInteger>
    5272:	26 c0       	rjmp	.+76     	; 0x52c0 <LCD_enu_WriteFloatNum+0x296>

            //Printing one digit at a time
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch((Local_u32_TempDecimalDigits % 10) + 48);
    5274:	8d 85       	ldd	r24, Y+13	; 0x0d
    5276:	9e 85       	ldd	r25, Y+14	; 0x0e
    5278:	af 85       	ldd	r26, Y+15	; 0x0f
    527a:	b8 89       	ldd	r27, Y+16	; 0x10
    527c:	2a e0       	ldi	r18, 0x0A	; 10
    527e:	30 e0       	ldi	r19, 0x00	; 0
    5280:	40 e0       	ldi	r20, 0x00	; 0
    5282:	50 e0       	ldi	r21, 0x00	; 0
    5284:	bc 01       	movw	r22, r24
    5286:	cd 01       	movw	r24, r26
    5288:	0e 94 09 34 	call	0x6812	; 0x6812 <__udivmodsi4>
    528c:	dc 01       	movw	r26, r24
    528e:	cb 01       	movw	r24, r22
    5290:	80 5d       	subi	r24, 0xD0	; 208
    5292:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
                
                Local_u32_TempDecimalDigits /= 10;
    5296:	8d 85       	ldd	r24, Y+13	; 0x0d
    5298:	9e 85       	ldd	r25, Y+14	; 0x0e
    529a:	af 85       	ldd	r26, Y+15	; 0x0f
    529c:	b8 89       	ldd	r27, Y+16	; 0x10
    529e:	2a e0       	ldi	r18, 0x0A	; 10
    52a0:	30 e0       	ldi	r19, 0x00	; 0
    52a2:	40 e0       	ldi	r20, 0x00	; 0
    52a4:	50 e0       	ldi	r21, 0x00	; 0
    52a6:	bc 01       	movw	r22, r24
    52a8:	cd 01       	movw	r24, r26
    52aa:	0e 94 09 34 	call	0x6812	; 0x6812 <__udivmodsi4>
    52ae:	da 01       	movw	r26, r20
    52b0:	c9 01       	movw	r24, r18
    52b2:	8d 87       	std	Y+13, r24	; 0x0d
    52b4:	9e 87       	std	Y+14, r25	; 0x0e
    52b6:	af 87       	std	Y+15, r26	; 0x0f
    52b8:	b8 8b       	std	Y+16, r27	; 0x10
                
                Local_u8_DecimalDigitCount--;
    52ba:	8a 81       	ldd	r24, Y+2	; 0x02
    52bc:	81 50       	subi	r24, 0x01	; 1
    52be:	8a 83       	std	Y+2, r24	; 0x02
            
            //Reversing Number
            enu_ReverseInteger(&Local_u32_TempDecimalDigits);

            //Printing one digit at a time
            while(Local_u8_DecimalDigitCount)
    52c0:	8a 81       	ldd	r24, Y+2	; 0x02
    52c2:	88 23       	and	r24, r24
    52c4:	b9 f6       	brne	.-82     	; 0x5274 <LCD_enu_WriteFloatNum+0x24a>
    52c6:	06 c0       	rjmp	.+12     	; 0x52d4 <LCD_enu_WriteFloatNum+0x2aa>
            }

            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    52c8:	80 e3       	ldi	r24, 0x30	; 48
    52ca:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    52ce:	8a 81       	ldd	r24, Y+2	; 0x02
    52d0:	81 50       	subi	r24, 0x01	; 1
    52d2:	8a 83       	std	Y+2, r24	; 0x02
                
                Local_u8_DecimalDigitCount--;
            }

            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    52d4:	8a 81       	ldd	r24, Y+2	; 0x02
    52d6:	88 23       	and	r24, r24
    52d8:	b9 f7       	brne	.-18     	; 0x52c8 <LCD_enu_WriteFloatNum+0x29e>
                Local_u8_DecimalDigitCount--;
            }
            
        }

        Local_u8_ErrorFlag = ES_OK;
    52da:	1c 82       	std	Y+4, r1	; 0x04
    52dc:	02 c0       	rjmp	.+4      	; 0x52e2 <LCD_enu_WriteFloatNum+0x2b8>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    52de:	82 e0       	ldi	r24, 0x02	; 2
    52e0:	8c 83       	std	Y+4, r24	; 0x04
    }

    return Local_u8_ErrorFlag;
    52e2:	8c 81       	ldd	r24, Y+4	; 0x04

}
    52e4:	67 96       	adiw	r28, 0x17	; 23
    52e6:	0f b6       	in	r0, 0x3f	; 63
    52e8:	f8 94       	cli
    52ea:	de bf       	out	0x3e, r29	; 62
    52ec:	0f be       	out	0x3f, r0	; 63
    52ee:	cd bf       	out	0x3d, r28	; 61
    52f0:	cf 91       	pop	r28
    52f2:	df 91       	pop	r29
    52f4:	0f 91       	pop	r16
    52f6:	08 95       	ret

000052f8 <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    52f8:	df 93       	push	r29
    52fa:	cf 93       	push	r28
    52fc:	cd b7       	in	r28, 0x3d	; 61
    52fe:	de b7       	in	r29, 0x3e	; 62
    5300:	ac 97       	sbiw	r28, 0x2c	; 44
    5302:	0f b6       	in	r0, 0x3f	; 63
    5304:	f8 94       	cli
    5306:	de bf       	out	0x3e, r29	; 62
    5308:	0f be       	out	0x3f, r0	; 63
    530a:	cd bf       	out	0x3d, r28	; 61
    530c:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    530e:	81 e0       	ldi	r24, 0x01	; 1
    5310:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    5312:	81 e0       	ldi	r24, 0x01	; 1
    5314:	62 e0       	ldi	r22, 0x02	; 2
    5316:	40 e0       	ldi	r20, 0x00	; 0
    5318:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    531c:	81 e0       	ldi	r24, 0x01	; 1
    531e:	63 e0       	ldi	r22, 0x03	; 3
    5320:	40 e0       	ldi	r20, 0x00	; 0
    5322:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    5326:	8c a5       	ldd	r24, Y+44	; 0x2c
    5328:	98 2f       	mov	r25, r24
    532a:	99 1f       	adc	r25, r25
    532c:	99 27       	eor	r25, r25
    532e:	99 1f       	adc	r25, r25
    5330:	80 e0       	ldi	r24, 0x00	; 0
    5332:	67 e0       	ldi	r22, 0x07	; 7
    5334:	49 2f       	mov	r20, r25
    5336:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    533a:	8c a5       	ldd	r24, Y+44	; 0x2c
    533c:	82 95       	swap	r24
    533e:	86 95       	lsr	r24
    5340:	86 95       	lsr	r24
    5342:	83 70       	andi	r24, 0x03	; 3
    5344:	98 2f       	mov	r25, r24
    5346:	91 70       	andi	r25, 0x01	; 1
    5348:	80 e0       	ldi	r24, 0x00	; 0
    534a:	66 e0       	ldi	r22, 0x06	; 6
    534c:	49 2f       	mov	r20, r25
    534e:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    5352:	8c a5       	ldd	r24, Y+44	; 0x2c
    5354:	82 95       	swap	r24
    5356:	86 95       	lsr	r24
    5358:	87 70       	andi	r24, 0x07	; 7
    535a:	98 2f       	mov	r25, r24
    535c:	91 70       	andi	r25, 0x01	; 1
    535e:	80 e0       	ldi	r24, 0x00	; 0
    5360:	65 e0       	ldi	r22, 0x05	; 5
    5362:	49 2f       	mov	r20, r25
    5364:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    5368:	8c a5       	ldd	r24, Y+44	; 0x2c
    536a:	82 95       	swap	r24
    536c:	8f 70       	andi	r24, 0x0F	; 15
    536e:	98 2f       	mov	r25, r24
    5370:	91 70       	andi	r25, 0x01	; 1
    5372:	80 e0       	ldi	r24, 0x00	; 0
    5374:	64 e0       	ldi	r22, 0x04	; 4
    5376:	49 2f       	mov	r20, r25
    5378:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    537c:	81 e0       	ldi	r24, 0x01	; 1
    537e:	63 e0       	ldi	r22, 0x03	; 3
    5380:	41 e0       	ldi	r20, 0x01	; 1
    5382:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    5386:	80 e0       	ldi	r24, 0x00	; 0
    5388:	90 e0       	ldi	r25, 0x00	; 0
    538a:	a0 e8       	ldi	r26, 0x80	; 128
    538c:	bf e3       	ldi	r27, 0x3F	; 63
    538e:	8f a3       	std	Y+39, r24	; 0x27
    5390:	98 a7       	std	Y+40, r25	; 0x28
    5392:	a9 a7       	std	Y+41, r26	; 0x29
    5394:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5396:	6f a1       	ldd	r22, Y+39	; 0x27
    5398:	78 a5       	ldd	r23, Y+40	; 0x28
    539a:	89 a5       	ldd	r24, Y+41	; 0x29
    539c:	9a a5       	ldd	r25, Y+42	; 0x2a
    539e:	20 e0       	ldi	r18, 0x00	; 0
    53a0:	30 e0       	ldi	r19, 0x00	; 0
    53a2:	4a e7       	ldi	r20, 0x7A	; 122
    53a4:	55 e4       	ldi	r21, 0x45	; 69
    53a6:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    53aa:	dc 01       	movw	r26, r24
    53ac:	cb 01       	movw	r24, r22
    53ae:	8b a3       	std	Y+35, r24	; 0x23
    53b0:	9c a3       	std	Y+36, r25	; 0x24
    53b2:	ad a3       	std	Y+37, r26	; 0x25
    53b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    53b6:	6b a1       	ldd	r22, Y+35	; 0x23
    53b8:	7c a1       	ldd	r23, Y+36	; 0x24
    53ba:	8d a1       	ldd	r24, Y+37	; 0x25
    53bc:	9e a1       	ldd	r25, Y+38	; 0x26
    53be:	20 e0       	ldi	r18, 0x00	; 0
    53c0:	30 e0       	ldi	r19, 0x00	; 0
    53c2:	40 e8       	ldi	r20, 0x80	; 128
    53c4:	5f e3       	ldi	r21, 0x3F	; 63
    53c6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    53ca:	88 23       	and	r24, r24
    53cc:	2c f4       	brge	.+10     	; 0x53d8 <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    53ce:	81 e0       	ldi	r24, 0x01	; 1
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	9a a3       	std	Y+34, r25	; 0x22
    53d4:	89 a3       	std	Y+33, r24	; 0x21
    53d6:	3f c0       	rjmp	.+126    	; 0x5456 <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    53d8:	6b a1       	ldd	r22, Y+35	; 0x23
    53da:	7c a1       	ldd	r23, Y+36	; 0x24
    53dc:	8d a1       	ldd	r24, Y+37	; 0x25
    53de:	9e a1       	ldd	r25, Y+38	; 0x26
    53e0:	20 e0       	ldi	r18, 0x00	; 0
    53e2:	3f ef       	ldi	r19, 0xFF	; 255
    53e4:	4f e7       	ldi	r20, 0x7F	; 127
    53e6:	57 e4       	ldi	r21, 0x47	; 71
    53e8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    53ec:	18 16       	cp	r1, r24
    53ee:	4c f5       	brge	.+82     	; 0x5442 <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53f0:	6f a1       	ldd	r22, Y+39	; 0x27
    53f2:	78 a5       	ldd	r23, Y+40	; 0x28
    53f4:	89 a5       	ldd	r24, Y+41	; 0x29
    53f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    53f8:	20 e0       	ldi	r18, 0x00	; 0
    53fa:	30 e0       	ldi	r19, 0x00	; 0
    53fc:	40 e2       	ldi	r20, 0x20	; 32
    53fe:	51 e4       	ldi	r21, 0x41	; 65
    5400:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5404:	dc 01       	movw	r26, r24
    5406:	cb 01       	movw	r24, r22
    5408:	bc 01       	movw	r22, r24
    540a:	cd 01       	movw	r24, r26
    540c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5410:	dc 01       	movw	r26, r24
    5412:	cb 01       	movw	r24, r22
    5414:	9a a3       	std	Y+34, r25	; 0x22
    5416:	89 a3       	std	Y+33, r24	; 0x21
    5418:	0f c0       	rjmp	.+30     	; 0x5438 <enu_PassByteAndLatch+0x140>
    541a:	80 e9       	ldi	r24, 0x90	; 144
    541c:	91 e0       	ldi	r25, 0x01	; 1
    541e:	98 a3       	std	Y+32, r25	; 0x20
    5420:	8f 8f       	std	Y+31, r24	; 0x1f
    5422:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5424:	98 a1       	ldd	r25, Y+32	; 0x20
    5426:	01 97       	sbiw	r24, 0x01	; 1
    5428:	f1 f7       	brne	.-4      	; 0x5426 <enu_PassByteAndLatch+0x12e>
    542a:	98 a3       	std	Y+32, r25	; 0x20
    542c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    542e:	89 a1       	ldd	r24, Y+33	; 0x21
    5430:	9a a1       	ldd	r25, Y+34	; 0x22
    5432:	01 97       	sbiw	r24, 0x01	; 1
    5434:	9a a3       	std	Y+34, r25	; 0x22
    5436:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5438:	89 a1       	ldd	r24, Y+33	; 0x21
    543a:	9a a1       	ldd	r25, Y+34	; 0x22
    543c:	00 97       	sbiw	r24, 0x00	; 0
    543e:	69 f7       	brne	.-38     	; 0x541a <enu_PassByteAndLatch+0x122>
    5440:	14 c0       	rjmp	.+40     	; 0x546a <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5442:	6b a1       	ldd	r22, Y+35	; 0x23
    5444:	7c a1       	ldd	r23, Y+36	; 0x24
    5446:	8d a1       	ldd	r24, Y+37	; 0x25
    5448:	9e a1       	ldd	r25, Y+38	; 0x26
    544a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    544e:	dc 01       	movw	r26, r24
    5450:	cb 01       	movw	r24, r22
    5452:	9a a3       	std	Y+34, r25	; 0x22
    5454:	89 a3       	std	Y+33, r24	; 0x21
    5456:	89 a1       	ldd	r24, Y+33	; 0x21
    5458:	9a a1       	ldd	r25, Y+34	; 0x22
    545a:	9e 8f       	std	Y+30, r25	; 0x1e
    545c:	8d 8f       	std	Y+29, r24	; 0x1d
    545e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5460:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5462:	01 97       	sbiw	r24, 0x01	; 1
    5464:	f1 f7       	brne	.-4      	; 0x5462 <enu_PassByteAndLatch+0x16a>
    5466:	9e 8f       	std	Y+30, r25	; 0x1e
    5468:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	63 e0       	ldi	r22, 0x03	; 3
    546e:	40 e0       	ldi	r20, 0x00	; 0
    5470:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    5474:	8c a5       	ldd	r24, Y+44	; 0x2c
    5476:	86 95       	lsr	r24
    5478:	86 95       	lsr	r24
    547a:	86 95       	lsr	r24
    547c:	98 2f       	mov	r25, r24
    547e:	91 70       	andi	r25, 0x01	; 1
    5480:	80 e0       	ldi	r24, 0x00	; 0
    5482:	67 e0       	ldi	r22, 0x07	; 7
    5484:	49 2f       	mov	r20, r25
    5486:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    548a:	8c a5       	ldd	r24, Y+44	; 0x2c
    548c:	86 95       	lsr	r24
    548e:	86 95       	lsr	r24
    5490:	98 2f       	mov	r25, r24
    5492:	91 70       	andi	r25, 0x01	; 1
    5494:	80 e0       	ldi	r24, 0x00	; 0
    5496:	66 e0       	ldi	r22, 0x06	; 6
    5498:	49 2f       	mov	r20, r25
    549a:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    549e:	8c a5       	ldd	r24, Y+44	; 0x2c
    54a0:	86 95       	lsr	r24
    54a2:	98 2f       	mov	r25, r24
    54a4:	91 70       	andi	r25, 0x01	; 1
    54a6:	80 e0       	ldi	r24, 0x00	; 0
    54a8:	65 e0       	ldi	r22, 0x05	; 5
    54aa:	49 2f       	mov	r20, r25
    54ac:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    54b0:	8c a5       	ldd	r24, Y+44	; 0x2c
    54b2:	98 2f       	mov	r25, r24
    54b4:	91 70       	andi	r25, 0x01	; 1
    54b6:	80 e0       	ldi	r24, 0x00	; 0
    54b8:	64 e0       	ldi	r22, 0x04	; 4
    54ba:	49 2f       	mov	r20, r25
    54bc:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	63 e0       	ldi	r22, 0x03	; 3
    54c4:	41 e0       	ldi	r20, 0x01	; 1
    54c6:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	a0 e8       	ldi	r26, 0x80	; 128
    54d0:	bf e3       	ldi	r27, 0x3F	; 63
    54d2:	89 8f       	std	Y+25, r24	; 0x19
    54d4:	9a 8f       	std	Y+26, r25	; 0x1a
    54d6:	ab 8f       	std	Y+27, r26	; 0x1b
    54d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54da:	69 8d       	ldd	r22, Y+25	; 0x19
    54dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54e2:	20 e0       	ldi	r18, 0x00	; 0
    54e4:	30 e0       	ldi	r19, 0x00	; 0
    54e6:	4a e7       	ldi	r20, 0x7A	; 122
    54e8:	55 e4       	ldi	r21, 0x45	; 69
    54ea:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    54ee:	dc 01       	movw	r26, r24
    54f0:	cb 01       	movw	r24, r22
    54f2:	8d 8b       	std	Y+21, r24	; 0x15
    54f4:	9e 8b       	std	Y+22, r25	; 0x16
    54f6:	af 8b       	std	Y+23, r26	; 0x17
    54f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    54fa:	6d 89       	ldd	r22, Y+21	; 0x15
    54fc:	7e 89       	ldd	r23, Y+22	; 0x16
    54fe:	8f 89       	ldd	r24, Y+23	; 0x17
    5500:	98 8d       	ldd	r25, Y+24	; 0x18
    5502:	20 e0       	ldi	r18, 0x00	; 0
    5504:	30 e0       	ldi	r19, 0x00	; 0
    5506:	40 e8       	ldi	r20, 0x80	; 128
    5508:	5f e3       	ldi	r21, 0x3F	; 63
    550a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    550e:	88 23       	and	r24, r24
    5510:	2c f4       	brge	.+10     	; 0x551c <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	9c 8b       	std	Y+20, r25	; 0x14
    5518:	8b 8b       	std	Y+19, r24	; 0x13
    551a:	3f c0       	rjmp	.+126    	; 0x559a <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    551c:	6d 89       	ldd	r22, Y+21	; 0x15
    551e:	7e 89       	ldd	r23, Y+22	; 0x16
    5520:	8f 89       	ldd	r24, Y+23	; 0x17
    5522:	98 8d       	ldd	r25, Y+24	; 0x18
    5524:	20 e0       	ldi	r18, 0x00	; 0
    5526:	3f ef       	ldi	r19, 0xFF	; 255
    5528:	4f e7       	ldi	r20, 0x7F	; 127
    552a:	57 e4       	ldi	r21, 0x47	; 71
    552c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    5530:	18 16       	cp	r1, r24
    5532:	4c f5       	brge	.+82     	; 0x5586 <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5534:	69 8d       	ldd	r22, Y+25	; 0x19
    5536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    553a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	40 e2       	ldi	r20, 0x20	; 32
    5542:	51 e4       	ldi	r21, 0x41	; 65
    5544:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5548:	dc 01       	movw	r26, r24
    554a:	cb 01       	movw	r24, r22
    554c:	bc 01       	movw	r22, r24
    554e:	cd 01       	movw	r24, r26
    5550:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5554:	dc 01       	movw	r26, r24
    5556:	cb 01       	movw	r24, r22
    5558:	9c 8b       	std	Y+20, r25	; 0x14
    555a:	8b 8b       	std	Y+19, r24	; 0x13
    555c:	0f c0       	rjmp	.+30     	; 0x557c <enu_PassByteAndLatch+0x284>
    555e:	80 e9       	ldi	r24, 0x90	; 144
    5560:	91 e0       	ldi	r25, 0x01	; 1
    5562:	9a 8b       	std	Y+18, r25	; 0x12
    5564:	89 8b       	std	Y+17, r24	; 0x11
    5566:	89 89       	ldd	r24, Y+17	; 0x11
    5568:	9a 89       	ldd	r25, Y+18	; 0x12
    556a:	01 97       	sbiw	r24, 0x01	; 1
    556c:	f1 f7       	brne	.-4      	; 0x556a <enu_PassByteAndLatch+0x272>
    556e:	9a 8b       	std	Y+18, r25	; 0x12
    5570:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5572:	8b 89       	ldd	r24, Y+19	; 0x13
    5574:	9c 89       	ldd	r25, Y+20	; 0x14
    5576:	01 97       	sbiw	r24, 0x01	; 1
    5578:	9c 8b       	std	Y+20, r25	; 0x14
    557a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    557c:	8b 89       	ldd	r24, Y+19	; 0x13
    557e:	9c 89       	ldd	r25, Y+20	; 0x14
    5580:	00 97       	sbiw	r24, 0x00	; 0
    5582:	69 f7       	brne	.-38     	; 0x555e <enu_PassByteAndLatch+0x266>
    5584:	14 c0       	rjmp	.+40     	; 0x55ae <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5586:	6d 89       	ldd	r22, Y+21	; 0x15
    5588:	7e 89       	ldd	r23, Y+22	; 0x16
    558a:	8f 89       	ldd	r24, Y+23	; 0x17
    558c:	98 8d       	ldd	r25, Y+24	; 0x18
    558e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5592:	dc 01       	movw	r26, r24
    5594:	cb 01       	movw	r24, r22
    5596:	9c 8b       	std	Y+20, r25	; 0x14
    5598:	8b 8b       	std	Y+19, r24	; 0x13
    559a:	8b 89       	ldd	r24, Y+19	; 0x13
    559c:	9c 89       	ldd	r25, Y+20	; 0x14
    559e:	98 8b       	std	Y+16, r25	; 0x10
    55a0:	8f 87       	std	Y+15, r24	; 0x0f
    55a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    55a4:	98 89       	ldd	r25, Y+16	; 0x10
    55a6:	01 97       	sbiw	r24, 0x01	; 1
    55a8:	f1 f7       	brne	.-4      	; 0x55a6 <enu_PassByteAndLatch+0x2ae>
    55aa:	98 8b       	std	Y+16, r25	; 0x10
    55ac:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    55ae:	81 e0       	ldi	r24, 0x01	; 1
    55b0:	63 e0       	ldi	r22, 0x03	; 3
    55b2:	40 e0       	ldi	r20, 0x00	; 0
    55b4:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    55b8:	80 e0       	ldi	r24, 0x00	; 0
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	a0 e0       	ldi	r26, 0x00	; 0
    55be:	b0 e4       	ldi	r27, 0x40	; 64
    55c0:	8b 87       	std	Y+11, r24	; 0x0b
    55c2:	9c 87       	std	Y+12, r25	; 0x0c
    55c4:	ad 87       	std	Y+13, r26	; 0x0d
    55c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    55ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    55cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    55ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    55d0:	20 e0       	ldi	r18, 0x00	; 0
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	4a e7       	ldi	r20, 0x7A	; 122
    55d6:	55 e4       	ldi	r21, 0x45	; 69
    55d8:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    55dc:	dc 01       	movw	r26, r24
    55de:	cb 01       	movw	r24, r22
    55e0:	8f 83       	std	Y+7, r24	; 0x07
    55e2:	98 87       	std	Y+8, r25	; 0x08
    55e4:	a9 87       	std	Y+9, r26	; 0x09
    55e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    55e8:	6f 81       	ldd	r22, Y+7	; 0x07
    55ea:	78 85       	ldd	r23, Y+8	; 0x08
    55ec:	89 85       	ldd	r24, Y+9	; 0x09
    55ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    55f0:	20 e0       	ldi	r18, 0x00	; 0
    55f2:	30 e0       	ldi	r19, 0x00	; 0
    55f4:	40 e8       	ldi	r20, 0x80	; 128
    55f6:	5f e3       	ldi	r21, 0x3F	; 63
    55f8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    55fc:	88 23       	and	r24, r24
    55fe:	2c f4       	brge	.+10     	; 0x560a <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    5600:	81 e0       	ldi	r24, 0x01	; 1
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	9e 83       	std	Y+6, r25	; 0x06
    5606:	8d 83       	std	Y+5, r24	; 0x05
    5608:	3f c0       	rjmp	.+126    	; 0x5688 <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    560a:	6f 81       	ldd	r22, Y+7	; 0x07
    560c:	78 85       	ldd	r23, Y+8	; 0x08
    560e:	89 85       	ldd	r24, Y+9	; 0x09
    5610:	9a 85       	ldd	r25, Y+10	; 0x0a
    5612:	20 e0       	ldi	r18, 0x00	; 0
    5614:	3f ef       	ldi	r19, 0xFF	; 255
    5616:	4f e7       	ldi	r20, 0x7F	; 127
    5618:	57 e4       	ldi	r21, 0x47	; 71
    561a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    561e:	18 16       	cp	r1, r24
    5620:	4c f5       	brge	.+82     	; 0x5674 <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5622:	6b 85       	ldd	r22, Y+11	; 0x0b
    5624:	7c 85       	ldd	r23, Y+12	; 0x0c
    5626:	8d 85       	ldd	r24, Y+13	; 0x0d
    5628:	9e 85       	ldd	r25, Y+14	; 0x0e
    562a:	20 e0       	ldi	r18, 0x00	; 0
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	40 e2       	ldi	r20, 0x20	; 32
    5630:	51 e4       	ldi	r21, 0x41	; 65
    5632:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5636:	dc 01       	movw	r26, r24
    5638:	cb 01       	movw	r24, r22
    563a:	bc 01       	movw	r22, r24
    563c:	cd 01       	movw	r24, r26
    563e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5642:	dc 01       	movw	r26, r24
    5644:	cb 01       	movw	r24, r22
    5646:	9e 83       	std	Y+6, r25	; 0x06
    5648:	8d 83       	std	Y+5, r24	; 0x05
    564a:	0f c0       	rjmp	.+30     	; 0x566a <enu_PassByteAndLatch+0x372>
    564c:	80 e9       	ldi	r24, 0x90	; 144
    564e:	91 e0       	ldi	r25, 0x01	; 1
    5650:	9c 83       	std	Y+4, r25	; 0x04
    5652:	8b 83       	std	Y+3, r24	; 0x03
    5654:	8b 81       	ldd	r24, Y+3	; 0x03
    5656:	9c 81       	ldd	r25, Y+4	; 0x04
    5658:	01 97       	sbiw	r24, 0x01	; 1
    565a:	f1 f7       	brne	.-4      	; 0x5658 <enu_PassByteAndLatch+0x360>
    565c:	9c 83       	std	Y+4, r25	; 0x04
    565e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5660:	8d 81       	ldd	r24, Y+5	; 0x05
    5662:	9e 81       	ldd	r25, Y+6	; 0x06
    5664:	01 97       	sbiw	r24, 0x01	; 1
    5666:	9e 83       	std	Y+6, r25	; 0x06
    5668:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    566a:	8d 81       	ldd	r24, Y+5	; 0x05
    566c:	9e 81       	ldd	r25, Y+6	; 0x06
    566e:	00 97       	sbiw	r24, 0x00	; 0
    5670:	69 f7       	brne	.-38     	; 0x564c <enu_PassByteAndLatch+0x354>
    5672:	14 c0       	rjmp	.+40     	; 0x569c <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5674:	6f 81       	ldd	r22, Y+7	; 0x07
    5676:	78 85       	ldd	r23, Y+8	; 0x08
    5678:	89 85       	ldd	r24, Y+9	; 0x09
    567a:	9a 85       	ldd	r25, Y+10	; 0x0a
    567c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5680:	dc 01       	movw	r26, r24
    5682:	cb 01       	movw	r24, r22
    5684:	9e 83       	std	Y+6, r25	; 0x06
    5686:	8d 83       	std	Y+5, r24	; 0x05
    5688:	8d 81       	ldd	r24, Y+5	; 0x05
    568a:	9e 81       	ldd	r25, Y+6	; 0x06
    568c:	9a 83       	std	Y+2, r25	; 0x02
    568e:	89 83       	std	Y+1, r24	; 0x01
    5690:	89 81       	ldd	r24, Y+1	; 0x01
    5692:	9a 81       	ldd	r25, Y+2	; 0x02
    5694:	01 97       	sbiw	r24, 0x01	; 1
    5696:	f1 f7       	brne	.-4      	; 0x5694 <enu_PassByteAndLatch+0x39c>
    5698:	9a 83       	std	Y+2, r25	; 0x02
    569a:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    569c:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    569e:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    56a0:	ac 96       	adiw	r28, 0x2c	; 44
    56a2:	0f b6       	in	r0, 0x3f	; 63
    56a4:	f8 94       	cli
    56a6:	de bf       	out	0x3e, r29	; 62
    56a8:	0f be       	out	0x3f, r0	; 63
    56aa:	cd bf       	out	0x3d, r28	; 61
    56ac:	cf 91       	pop	r28
    56ae:	df 91       	pop	r29
    56b0:	08 95       	ret

000056b2 <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    56b2:	df 93       	push	r29
    56b4:	cf 93       	push	r28
    56b6:	cd b7       	in	r28, 0x3d	; 61
    56b8:	de b7       	in	r29, 0x3e	; 62
    56ba:	27 97       	sbiw	r28, 0x07	; 7
    56bc:	0f b6       	in	r0, 0x3f	; 63
    56be:	f8 94       	cli
    56c0:	de bf       	out	0x3e, r29	; 62
    56c2:	0f be       	out	0x3f, r0	; 63
    56c4:	cd bf       	out	0x3d, r28	; 61
    56c6:	9c 83       	std	Y+4, r25	; 0x04
    56c8:	8b 83       	std	Y+3, r24	; 0x03
    56ca:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    56d0:	8b 81       	ldd	r24, Y+3	; 0x03
    56d2:	9c 81       	ldd	r25, Y+4	; 0x04
    56d4:	00 97       	sbiw	r24, 0x00	; 0
    56d6:	09 f4       	brne	.+2      	; 0x56da <enu_AddCustomCharacter+0x28>
    56d8:	79 c0       	rjmp	.+242    	; 0x57cc <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    56da:	8d 81       	ldd	r24, Y+5	; 0x05
    56dc:	88 30       	cpi	r24, 0x08	; 8
    56de:	08 f0       	brcs	.+2      	; 0x56e2 <enu_AddCustomCharacter+0x30>
    56e0:	72 c0       	rjmp	.+228    	; 0x57c6 <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    56e2:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    56e4:	81 e0       	ldi	r24, 0x01	; 1
    56e6:	61 e0       	ldi	r22, 0x01	; 1
    56e8:	40 e0       	ldi	r20, 0x00	; 0
    56ea:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    56ee:	8d 81       	ldd	r24, Y+5	; 0x05
    56f0:	28 2f       	mov	r18, r24
    56f2:	30 e0       	ldi	r19, 0x00	; 0
    56f4:	3f 83       	std	Y+7, r19	; 0x07
    56f6:	2e 83       	std	Y+6, r18	; 0x06
    56f8:	8e 81       	ldd	r24, Y+6	; 0x06
    56fa:	9f 81       	ldd	r25, Y+7	; 0x07
    56fc:	83 30       	cpi	r24, 0x03	; 3
    56fe:	91 05       	cpc	r25, r1
    5700:	a9 f1       	breq	.+106    	; 0x576c <enu_AddCustomCharacter+0xba>
    5702:	2e 81       	ldd	r18, Y+6	; 0x06
    5704:	3f 81       	ldd	r19, Y+7	; 0x07
    5706:	24 30       	cpi	r18, 0x04	; 4
    5708:	31 05       	cpc	r19, r1
    570a:	7c f4       	brge	.+30     	; 0x572a <enu_AddCustomCharacter+0x78>
    570c:	8e 81       	ldd	r24, Y+6	; 0x06
    570e:	9f 81       	ldd	r25, Y+7	; 0x07
    5710:	81 30       	cpi	r24, 0x01	; 1
    5712:	91 05       	cpc	r25, r1
    5714:	19 f1       	breq	.+70     	; 0x575c <enu_AddCustomCharacter+0xaa>
    5716:	2e 81       	ldd	r18, Y+6	; 0x06
    5718:	3f 81       	ldd	r19, Y+7	; 0x07
    571a:	22 30       	cpi	r18, 0x02	; 2
    571c:	31 05       	cpc	r19, r1
    571e:	14 f5       	brge	.+68     	; 0x5764 <enu_AddCustomCharacter+0xb2>
    5720:	8e 81       	ldd	r24, Y+6	; 0x06
    5722:	9f 81       	ldd	r25, Y+7	; 0x07
    5724:	00 97       	sbiw	r24, 0x00	; 0
    5726:	b1 f0       	breq	.+44     	; 0x5754 <enu_AddCustomCharacter+0xa2>
    5728:	34 c0       	rjmp	.+104    	; 0x5792 <enu_AddCustomCharacter+0xe0>
    572a:	2e 81       	ldd	r18, Y+6	; 0x06
    572c:	3f 81       	ldd	r19, Y+7	; 0x07
    572e:	25 30       	cpi	r18, 0x05	; 5
    5730:	31 05       	cpc	r19, r1
    5732:	21 f1       	breq	.+72     	; 0x577c <enu_AddCustomCharacter+0xca>
    5734:	8e 81       	ldd	r24, Y+6	; 0x06
    5736:	9f 81       	ldd	r25, Y+7	; 0x07
    5738:	85 30       	cpi	r24, 0x05	; 5
    573a:	91 05       	cpc	r25, r1
    573c:	dc f0       	brlt	.+54     	; 0x5774 <enu_AddCustomCharacter+0xc2>
    573e:	2e 81       	ldd	r18, Y+6	; 0x06
    5740:	3f 81       	ldd	r19, Y+7	; 0x07
    5742:	26 30       	cpi	r18, 0x06	; 6
    5744:	31 05       	cpc	r19, r1
    5746:	f1 f0       	breq	.+60     	; 0x5784 <enu_AddCustomCharacter+0xd2>
    5748:	8e 81       	ldd	r24, Y+6	; 0x06
    574a:	9f 81       	ldd	r25, Y+7	; 0x07
    574c:	87 30       	cpi	r24, 0x07	; 7
    574e:	91 05       	cpc	r25, r1
    5750:	e9 f0       	breq	.+58     	; 0x578c <enu_AddCustomCharacter+0xda>
    5752:	1f c0       	rjmp	.+62     	; 0x5792 <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    5754:	80 e4       	ldi	r24, 0x40	; 64
    5756:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
    575a:	1b c0       	rjmp	.+54     	; 0x5792 <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    575c:	88 e4       	ldi	r24, 0x48	; 72
    575e:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
    5762:	17 c0       	rjmp	.+46     	; 0x5792 <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    5764:	80 e5       	ldi	r24, 0x50	; 80
    5766:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
    576a:	13 c0       	rjmp	.+38     	; 0x5792 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    576c:	88 e5       	ldi	r24, 0x58	; 88
    576e:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
    5772:	0f c0       	rjmp	.+30     	; 0x5792 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    5774:	80 e6       	ldi	r24, 0x60	; 96
    5776:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
    577a:	0b c0       	rjmp	.+22     	; 0x5792 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    577c:	88 e6       	ldi	r24, 0x68	; 104
    577e:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
    5782:	07 c0       	rjmp	.+14     	; 0x5792 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    5784:	80 e7       	ldi	r24, 0x70	; 112
    5786:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
    578a:	03 c0       	rjmp	.+6      	; 0x5792 <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    578c:	88 e7       	ldi	r24, 0x78	; 120
    578e:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    5792:	81 e0       	ldi	r24, 0x01	; 1
    5794:	61 e0       	ldi	r22, 0x01	; 1
    5796:	41 e0       	ldi	r20, 0x01	; 1
    5798:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    579c:	19 82       	std	Y+1, r1	; 0x01
    579e:	0e c0       	rjmp	.+28     	; 0x57bc <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    57a0:	89 81       	ldd	r24, Y+1	; 0x01
    57a2:	28 2f       	mov	r18, r24
    57a4:	30 e0       	ldi	r19, 0x00	; 0
    57a6:	8b 81       	ldd	r24, Y+3	; 0x03
    57a8:	9c 81       	ldd	r25, Y+4	; 0x04
    57aa:	fc 01       	movw	r30, r24
    57ac:	e2 0f       	add	r30, r18
    57ae:	f3 1f       	adc	r31, r19
    57b0:	80 81       	ld	r24, Z
    57b2:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    57b6:	89 81       	ldd	r24, Y+1	; 0x01
    57b8:	8f 5f       	subi	r24, 0xFF	; 255
    57ba:	89 83       	std	Y+1, r24	; 0x01
    57bc:	89 81       	ldd	r24, Y+1	; 0x01
    57be:	88 30       	cpi	r24, 0x08	; 8
    57c0:	78 f3       	brcs	.-34     	; 0x57a0 <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    57c2:	1a 82       	std	Y+2, r1	; 0x02
    57c4:	05 c0       	rjmp	.+10     	; 0x57d0 <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    57c6:	82 e0       	ldi	r24, 0x02	; 2
    57c8:	8a 83       	std	Y+2, r24	; 0x02
    57ca:	02 c0       	rjmp	.+4      	; 0x57d0 <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    57cc:	83 e0       	ldi	r24, 0x03	; 3
    57ce:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    57d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    57d2:	27 96       	adiw	r28, 0x07	; 7
    57d4:	0f b6       	in	r0, 0x3f	; 63
    57d6:	f8 94       	cli
    57d8:	de bf       	out	0x3e, r29	; 62
    57da:	0f be       	out	0x3f, r0	; 63
    57dc:	cd bf       	out	0x3d, r28	; 61
    57de:	cf 91       	pop	r28
    57e0:	df 91       	pop	r29
    57e2:	08 95       	ret

000057e4 <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    57e4:	df 93       	push	r29
    57e6:	cf 93       	push	r28
    57e8:	00 d0       	rcall	.+0      	; 0x57ea <enu_ConvertDigitToASCII+0x6>
    57ea:	0f 92       	push	r0
    57ec:	cd b7       	in	r28, 0x3d	; 61
    57ee:	de b7       	in	r29, 0x3e	; 62
    57f0:	9b 83       	std	Y+3, r25	; 0x03
    57f2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    57f4:	81 e0       	ldi	r24, 0x01	; 1
    57f6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    57f8:	8a 81       	ldd	r24, Y+2	; 0x02
    57fa:	9b 81       	ldd	r25, Y+3	; 0x03
    57fc:	00 97       	sbiw	r24, 0x00	; 0
    57fe:	89 f0       	breq	.+34     	; 0x5822 <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    5800:	ea 81       	ldd	r30, Y+2	; 0x02
    5802:	fb 81       	ldd	r31, Y+3	; 0x03
    5804:	80 81       	ld	r24, Z
    5806:	8a 30       	cpi	r24, 0x0A	; 10
    5808:	48 f4       	brcc	.+18     	; 0x581c <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    580a:	ea 81       	ldd	r30, Y+2	; 0x02
    580c:	fb 81       	ldd	r31, Y+3	; 0x03
    580e:	80 81       	ld	r24, Z
    5810:	80 5d       	subi	r24, 0xD0	; 208
    5812:	ea 81       	ldd	r30, Y+2	; 0x02
    5814:	fb 81       	ldd	r31, Y+3	; 0x03
    5816:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    5818:	19 82       	std	Y+1, r1	; 0x01
    581a:	05 c0       	rjmp	.+10     	; 0x5826 <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    581c:	82 e0       	ldi	r24, 0x02	; 2
    581e:	89 83       	std	Y+1, r24	; 0x01
    5820:	02 c0       	rjmp	.+4      	; 0x5826 <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    5822:	83 e0       	ldi	r24, 0x03	; 3
    5824:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    5826:	89 81       	ldd	r24, Y+1	; 0x01
}
    5828:	0f 90       	pop	r0
    582a:	0f 90       	pop	r0
    582c:	0f 90       	pop	r0
    582e:	cf 91       	pop	r28
    5830:	df 91       	pop	r29
    5832:	08 95       	ret

00005834 <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    5834:	ef 92       	push	r14
    5836:	ff 92       	push	r15
    5838:	0f 93       	push	r16
    583a:	1f 93       	push	r17
    583c:	df 93       	push	r29
    583e:	cf 93       	push	r28
    5840:	cd b7       	in	r28, 0x3d	; 61
    5842:	de b7       	in	r29, 0x3e	; 62
    5844:	27 97       	sbiw	r28, 0x07	; 7
    5846:	0f b6       	in	r0, 0x3f	; 63
    5848:	f8 94       	cli
    584a:	de bf       	out	0x3e, r29	; 62
    584c:	0f be       	out	0x3f, r0	; 63
    584e:	cd bf       	out	0x3d, r28	; 61
    5850:	9f 83       	std	Y+7, r25	; 0x07
    5852:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    5854:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    5856:	8e 81       	ldd	r24, Y+6	; 0x06
    5858:	9f 81       	ldd	r25, Y+7	; 0x07
    585a:	00 97       	sbiw	r24, 0x00	; 0
    585c:	09 f4       	brne	.+2      	; 0x5860 <enu_ReverseInteger+0x2c>
    585e:	58 c0       	rjmp	.+176    	; 0x5910 <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    5860:	19 82       	std	Y+1, r1	; 0x01
    5862:	1a 82       	std	Y+2, r1	; 0x02
    5864:	1b 82       	std	Y+3, r1	; 0x03
    5866:	1c 82       	std	Y+4, r1	; 0x04
    5868:	3c c0       	rjmp	.+120    	; 0x58e2 <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    586a:	89 81       	ldd	r24, Y+1	; 0x01
    586c:	9a 81       	ldd	r25, Y+2	; 0x02
    586e:	ab 81       	ldd	r26, Y+3	; 0x03
    5870:	bc 81       	ldd	r27, Y+4	; 0x04
    5872:	2a e0       	ldi	r18, 0x0A	; 10
    5874:	30 e0       	ldi	r19, 0x00	; 0
    5876:	40 e0       	ldi	r20, 0x00	; 0
    5878:	50 e0       	ldi	r21, 0x00	; 0
    587a:	bc 01       	movw	r22, r24
    587c:	cd 01       	movw	r24, r26
    587e:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <__mulsi3>
    5882:	7b 01       	movw	r14, r22
    5884:	8c 01       	movw	r16, r24
    5886:	ee 81       	ldd	r30, Y+6	; 0x06
    5888:	ff 81       	ldd	r31, Y+7	; 0x07
    588a:	80 81       	ld	r24, Z
    588c:	91 81       	ldd	r25, Z+1	; 0x01
    588e:	a2 81       	ldd	r26, Z+2	; 0x02
    5890:	b3 81       	ldd	r27, Z+3	; 0x03
    5892:	2a e0       	ldi	r18, 0x0A	; 10
    5894:	30 e0       	ldi	r19, 0x00	; 0
    5896:	40 e0       	ldi	r20, 0x00	; 0
    5898:	50 e0       	ldi	r21, 0x00	; 0
    589a:	bc 01       	movw	r22, r24
    589c:	cd 01       	movw	r24, r26
    589e:	0e 94 09 34 	call	0x6812	; 0x6812 <__udivmodsi4>
    58a2:	dc 01       	movw	r26, r24
    58a4:	cb 01       	movw	r24, r22
    58a6:	8e 0d       	add	r24, r14
    58a8:	9f 1d       	adc	r25, r15
    58aa:	a0 1f       	adc	r26, r16
    58ac:	b1 1f       	adc	r27, r17
    58ae:	89 83       	std	Y+1, r24	; 0x01
    58b0:	9a 83       	std	Y+2, r25	; 0x02
    58b2:	ab 83       	std	Y+3, r26	; 0x03
    58b4:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    58b6:	ee 81       	ldd	r30, Y+6	; 0x06
    58b8:	ff 81       	ldd	r31, Y+7	; 0x07
    58ba:	80 81       	ld	r24, Z
    58bc:	91 81       	ldd	r25, Z+1	; 0x01
    58be:	a2 81       	ldd	r26, Z+2	; 0x02
    58c0:	b3 81       	ldd	r27, Z+3	; 0x03
    58c2:	2a e0       	ldi	r18, 0x0A	; 10
    58c4:	30 e0       	ldi	r19, 0x00	; 0
    58c6:	40 e0       	ldi	r20, 0x00	; 0
    58c8:	50 e0       	ldi	r21, 0x00	; 0
    58ca:	bc 01       	movw	r22, r24
    58cc:	cd 01       	movw	r24, r26
    58ce:	0e 94 09 34 	call	0x6812	; 0x6812 <__udivmodsi4>
    58d2:	da 01       	movw	r26, r20
    58d4:	c9 01       	movw	r24, r18
    58d6:	ee 81       	ldd	r30, Y+6	; 0x06
    58d8:	ff 81       	ldd	r31, Y+7	; 0x07
    58da:	80 83       	st	Z, r24
    58dc:	91 83       	std	Z+1, r25	; 0x01
    58de:	a2 83       	std	Z+2, r26	; 0x02
    58e0:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    58e2:	ee 81       	ldd	r30, Y+6	; 0x06
    58e4:	ff 81       	ldd	r31, Y+7	; 0x07
    58e6:	80 81       	ld	r24, Z
    58e8:	91 81       	ldd	r25, Z+1	; 0x01
    58ea:	a2 81       	ldd	r26, Z+2	; 0x02
    58ec:	b3 81       	ldd	r27, Z+3	; 0x03
    58ee:	00 97       	sbiw	r24, 0x00	; 0
    58f0:	a1 05       	cpc	r26, r1
    58f2:	b1 05       	cpc	r27, r1
    58f4:	09 f0       	breq	.+2      	; 0x58f8 <enu_ReverseInteger+0xc4>
    58f6:	b9 cf       	rjmp	.-142    	; 0x586a <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    58f8:	ee 81       	ldd	r30, Y+6	; 0x06
    58fa:	ff 81       	ldd	r31, Y+7	; 0x07
    58fc:	89 81       	ldd	r24, Y+1	; 0x01
    58fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5900:	ab 81       	ldd	r26, Y+3	; 0x03
    5902:	bc 81       	ldd	r27, Y+4	; 0x04
    5904:	80 83       	st	Z, r24
    5906:	91 83       	std	Z+1, r25	; 0x01
    5908:	a2 83       	std	Z+2, r26	; 0x02
    590a:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    590c:	1d 82       	std	Y+5, r1	; 0x05
    590e:	02 c0       	rjmp	.+4      	; 0x5914 <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    5910:	83 e0       	ldi	r24, 0x03	; 3
    5912:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    5914:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5916:	27 96       	adiw	r28, 0x07	; 7
    5918:	0f b6       	in	r0, 0x3f	; 63
    591a:	f8 94       	cli
    591c:	de bf       	out	0x3e, r29	; 62
    591e:	0f be       	out	0x3f, r0	; 63
    5920:	cd bf       	out	0x3d, r28	; 61
    5922:	cf 91       	pop	r28
    5924:	df 91       	pop	r29
    5926:	1f 91       	pop	r17
    5928:	0f 91       	pop	r16
    592a:	ff 90       	pop	r15
    592c:	ef 90       	pop	r14
    592e:	08 95       	ret

00005930 <enu_ConvertFloatToInteger>:

static ErrorState_t enu_ConvertFloatToInteger(f32* Copy_f32_DecimalDigits, u8 Copy_u8_FloatPrecision)
{
    5930:	ef 92       	push	r14
    5932:	ff 92       	push	r15
    5934:	0f 93       	push	r16
    5936:	1f 93       	push	r17
    5938:	df 93       	push	r29
    593a:	cf 93       	push	r28
    593c:	cd b7       	in	r28, 0x3d	; 61
    593e:	de b7       	in	r29, 0x3e	; 62
    5940:	2c 97       	sbiw	r28, 0x0c	; 12
    5942:	0f b6       	in	r0, 0x3f	; 63
    5944:	f8 94       	cli
    5946:	de bf       	out	0x3e, r29	; 62
    5948:	0f be       	out	0x3f, r0	; 63
    594a:	cd bf       	out	0x3d, r28	; 61
    594c:	9b 87       	std	Y+11, r25	; 0x0b
    594e:	8a 87       	std	Y+10, r24	; 0x0a
    5950:	6c 87       	std	Y+12, r22	; 0x0c
    u8 Local_u8_ErrorFlag = ES_OK;
    5952:	19 86       	std	Y+9, r1	; 0x09
    u32 Local_u32_CheckVariable = 0;
    5954:	1d 82       	std	Y+5, r1	; 0x05
    5956:	1e 82       	std	Y+6, r1	; 0x06
    5958:	1f 82       	std	Y+7, r1	; 0x07
    595a:	18 86       	std	Y+8, r1	; 0x08
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    595c:	8a 85       	ldd	r24, Y+10	; 0x0a
    595e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5960:	00 97       	sbiw	r24, 0x00	; 0
    5962:	09 f4       	brne	.+2      	; 0x5966 <enu_ConvertFloatToInteger+0x36>
    5964:	90 c0       	rjmp	.+288    	; 0x5a86 <enu_ConvertFloatToInteger+0x156>
    5966:	29 c0       	rjmp	.+82     	; 0x59ba <enu_ConvertFloatToInteger+0x8a>
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
        {
            *Copy_f32_DecimalDigits *= 10;
    5968:	ea 85       	ldd	r30, Y+10	; 0x0a
    596a:	fb 85       	ldd	r31, Y+11	; 0x0b
    596c:	80 81       	ld	r24, Z
    596e:	91 81       	ldd	r25, Z+1	; 0x01
    5970:	a2 81       	ldd	r26, Z+2	; 0x02
    5972:	b3 81       	ldd	r27, Z+3	; 0x03
    5974:	bc 01       	movw	r22, r24
    5976:	cd 01       	movw	r24, r26
    5978:	20 e0       	ldi	r18, 0x00	; 0
    597a:	30 e0       	ldi	r19, 0x00	; 0
    597c:	40 e2       	ldi	r20, 0x20	; 32
    597e:	51 e4       	ldi	r21, 0x41	; 65
    5980:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5984:	dc 01       	movw	r26, r24
    5986:	cb 01       	movw	r24, r22
    5988:	ea 85       	ldd	r30, Y+10	; 0x0a
    598a:	fb 85       	ldd	r31, Y+11	; 0x0b
    598c:	80 83       	st	Z, r24
    598e:	91 83       	std	Z+1, r25	; 0x01
    5990:	a2 83       	std	Z+2, r26	; 0x02
    5992:	b3 83       	std	Z+3, r27	; 0x03

            
            Local_u32_CheckVariable = (u32)(*Copy_f32_DecimalDigits);
    5994:	ea 85       	ldd	r30, Y+10	; 0x0a
    5996:	fb 85       	ldd	r31, Y+11	; 0x0b
    5998:	80 81       	ld	r24, Z
    599a:	91 81       	ldd	r25, Z+1	; 0x01
    599c:	a2 81       	ldd	r26, Z+2	; 0x02
    599e:	b3 81       	ldd	r27, Z+3	; 0x03
    59a0:	bc 01       	movw	r22, r24
    59a2:	cd 01       	movw	r24, r26
    59a4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    59a8:	dc 01       	movw	r26, r24
    59aa:	cb 01       	movw	r24, r22
    59ac:	8d 83       	std	Y+5, r24	; 0x05
    59ae:	9e 83       	std	Y+6, r25	; 0x06
    59b0:	af 83       	std	Y+7, r26	; 0x07
    59b2:	b8 87       	std	Y+8, r27	; 0x08

            Copy_u8_FloatPrecision--;
    59b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    59b6:	81 50       	subi	r24, 0x01	; 1
    59b8:	8c 87       	std	Y+12, r24	; 0x0c
    u32 Local_u32_CheckVariable = 0;
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
    59ba:	ea 85       	ldd	r30, Y+10	; 0x0a
    59bc:	fb 85       	ldd	r31, Y+11	; 0x0b
    59be:	e0 80       	ld	r14, Z
    59c0:	f1 80       	ldd	r15, Z+1	; 0x01
    59c2:	02 81       	ldd	r16, Z+2	; 0x02
    59c4:	13 81       	ldd	r17, Z+3	; 0x03
    59c6:	6d 81       	ldd	r22, Y+5	; 0x05
    59c8:	7e 81       	ldd	r23, Y+6	; 0x06
    59ca:	8f 81       	ldd	r24, Y+7	; 0x07
    59cc:	98 85       	ldd	r25, Y+8	; 0x08
    59ce:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatunsisf>
    59d2:	9b 01       	movw	r18, r22
    59d4:	ac 01       	movw	r20, r24
    59d6:	c8 01       	movw	r24, r16
    59d8:	b7 01       	movw	r22, r14
    59da:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    59de:	dc 01       	movw	r26, r24
    59e0:	cb 01       	movw	r24, r22
    59e2:	bc 01       	movw	r22, r24
    59e4:	cd 01       	movw	r24, r26
    59e6:	20 e0       	ldi	r18, 0x00	; 0
    59e8:	30 e0       	ldi	r19, 0x00	; 0
    59ea:	40 e0       	ldi	r20, 0x00	; 0
    59ec:	50 e0       	ldi	r21, 0x00	; 0
    59ee:	0e 94 44 04 	call	0x888	; 0x888 <__nesf2>
    59f2:	88 23       	and	r24, r24
    59f4:	09 f0       	breq	.+2      	; 0x59f8 <enu_ConvertFloatToInteger+0xc8>
    59f6:	b8 cf       	rjmp	.-144    	; 0x5968 <enu_ConvertFloatToInteger+0x38>
    59f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    59fa:	88 23       	and	r24, r24
    59fc:	09 f4       	brne	.+2      	; 0x5a00 <enu_ConvertFloatToInteger+0xd0>
    59fe:	b4 cf       	rjmp	.-152    	; 0x5968 <enu_ConvertFloatToInteger+0x38>
            Copy_u8_FloatPrecision--;

        }


        Local_f32_TempDecimalDigits = *Copy_f32_DecimalDigits - Local_u32_CheckVariable;
    5a00:	ea 85       	ldd	r30, Y+10	; 0x0a
    5a02:	fb 85       	ldd	r31, Y+11	; 0x0b
    5a04:	e0 80       	ld	r14, Z
    5a06:	f1 80       	ldd	r15, Z+1	; 0x01
    5a08:	02 81       	ldd	r16, Z+2	; 0x02
    5a0a:	13 81       	ldd	r17, Z+3	; 0x03
    5a0c:	6d 81       	ldd	r22, Y+5	; 0x05
    5a0e:	7e 81       	ldd	r23, Y+6	; 0x06
    5a10:	8f 81       	ldd	r24, Y+7	; 0x07
    5a12:	98 85       	ldd	r25, Y+8	; 0x08
    5a14:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatunsisf>
    5a18:	9b 01       	movw	r18, r22
    5a1a:	ac 01       	movw	r20, r24
    5a1c:	c8 01       	movw	r24, r16
    5a1e:	b7 01       	movw	r22, r14
    5a20:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    5a24:	dc 01       	movw	r26, r24
    5a26:	cb 01       	movw	r24, r22
    5a28:	89 83       	std	Y+1, r24	; 0x01
    5a2a:	9a 83       	std	Y+2, r25	; 0x02
    5a2c:	ab 83       	std	Y+3, r26	; 0x03
    5a2e:	bc 83       	std	Y+4, r27	; 0x04
        Local_f32_TempDecimalDigits *= 10;
    5a30:	69 81       	ldd	r22, Y+1	; 0x01
    5a32:	7a 81       	ldd	r23, Y+2	; 0x02
    5a34:	8b 81       	ldd	r24, Y+3	; 0x03
    5a36:	9c 81       	ldd	r25, Y+4	; 0x04
    5a38:	20 e0       	ldi	r18, 0x00	; 0
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	40 e2       	ldi	r20, 0x20	; 32
    5a3e:	51 e4       	ldi	r21, 0x41	; 65
    5a40:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5a44:	dc 01       	movw	r26, r24
    5a46:	cb 01       	movw	r24, r22
    5a48:	89 83       	std	Y+1, r24	; 0x01
    5a4a:	9a 83       	std	Y+2, r25	; 0x02
    5a4c:	ab 83       	std	Y+3, r26	; 0x03
    5a4e:	bc 83       	std	Y+4, r27	; 0x04

        // First decimal digit is acquired
        Local_u32_CheckVariable = Local_f32_TempDecimalDigits;
    5a50:	69 81       	ldd	r22, Y+1	; 0x01
    5a52:	7a 81       	ldd	r23, Y+2	; 0x02
    5a54:	8b 81       	ldd	r24, Y+3	; 0x03
    5a56:	9c 81       	ldd	r25, Y+4	; 0x04
    5a58:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5a5c:	dc 01       	movw	r26, r24
    5a5e:	cb 01       	movw	r24, r22
    5a60:	8d 83       	std	Y+5, r24	; 0x05
    5a62:	9e 83       	std	Y+6, r25	; 0x06
    5a64:	af 83       	std	Y+7, r26	; 0x07
    5a66:	b8 87       	std	Y+8, r27	; 0x08

        //Rounding number
        if(Local_u32_CheckVariable >= 5)
    5a68:	8d 81       	ldd	r24, Y+5	; 0x05
    5a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    5a6c:	af 81       	ldd	r26, Y+7	; 0x07
    5a6e:	b8 85       	ldd	r27, Y+8	; 0x08
    5a70:	85 30       	cpi	r24, 0x05	; 5
    5a72:	91 05       	cpc	r25, r1
    5a74:	a1 05       	cpc	r26, r1
    5a76:	b1 05       	cpc	r27, r1
    5a78:	40 f0       	brcs	.+16     	; 0x5a8a <enu_ConvertFloatToInteger+0x15a>
        {
            *Copy_f32_DecimalDigits++;
    5a7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5a7e:	04 96       	adiw	r24, 0x04	; 4
    5a80:	9b 87       	std	Y+11, r25	; 0x0b
    5a82:	8a 87       	std	Y+10, r24	; 0x0a
    5a84:	02 c0       	rjmp	.+4      	; 0x5a8a <enu_ConvertFloatToInteger+0x15a>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    5a86:	83 e0       	ldi	r24, 0x03	; 3
    5a88:	89 87       	std	Y+9, r24	; 0x09
    }

    return Local_u8_ErrorFlag;
    5a8a:	89 85       	ldd	r24, Y+9	; 0x09
}
    5a8c:	2c 96       	adiw	r28, 0x0c	; 12
    5a8e:	0f b6       	in	r0, 0x3f	; 63
    5a90:	f8 94       	cli
    5a92:	de bf       	out	0x3e, r29	; 62
    5a94:	0f be       	out	0x3f, r0	; 63
    5a96:	cd bf       	out	0x3d, r28	; 61
    5a98:	cf 91       	pop	r28
    5a9a:	df 91       	pop	r29
    5a9c:	1f 91       	pop	r17
    5a9e:	0f 91       	pop	r16
    5aa0:	ff 90       	pop	r15
    5aa2:	ef 90       	pop	r14
    5aa4:	08 95       	ret

00005aa6 <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    5aa6:	df 93       	push	r29
    5aa8:	cf 93       	push	r28
    5aaa:	00 d0       	rcall	.+0      	; 0x5aac <Keypad_enu_Initialization+0x6>
    5aac:	cd b7       	in	r28, 0x3d	; 61
    5aae:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5ab0:	81 e0       	ldi	r24, 0x01	; 1
    5ab2:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    5ab4:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    5ab6:	19 82       	std	Y+1, r1	; 0x01
    5ab8:	31 c0       	rjmp	.+98     	; 0x5b1c <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    5aba:	89 81       	ldd	r24, Y+1	; 0x01
    5abc:	88 2f       	mov	r24, r24
    5abe:	90 e0       	ldi	r25, 0x00	; 0
    5ac0:	88 0f       	add	r24, r24
    5ac2:	99 1f       	adc	r25, r25
    5ac4:	fc 01       	movw	r30, r24
    5ac6:	ed 56       	subi	r30, 0x6D	; 109
    5ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    5aca:	20 81       	ld	r18, Z
    5acc:	89 81       	ldd	r24, Y+1	; 0x01
    5ace:	88 2f       	mov	r24, r24
    5ad0:	90 e0       	ldi	r25, 0x00	; 0
    5ad2:	88 0f       	add	r24, r24
    5ad4:	99 1f       	adc	r25, r25
    5ad6:	fc 01       	movw	r30, r24
    5ad8:	ec 56       	subi	r30, 0x6C	; 108
    5ada:	fe 4f       	sbci	r31, 0xFE	; 254
    5adc:	90 81       	ld	r25, Z
    5ade:	82 2f       	mov	r24, r18
    5ae0:	69 2f       	mov	r22, r25
    5ae2:	40 e0       	ldi	r20, 0x00	; 0
    5ae4:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    5ae8:	89 81       	ldd	r24, Y+1	; 0x01
    5aea:	88 2f       	mov	r24, r24
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	88 0f       	add	r24, r24
    5af0:	99 1f       	adc	r25, r25
    5af2:	fc 01       	movw	r30, r24
    5af4:	ed 56       	subi	r30, 0x6D	; 109
    5af6:	fe 4f       	sbci	r31, 0xFE	; 254
    5af8:	20 81       	ld	r18, Z
    5afa:	89 81       	ldd	r24, Y+1	; 0x01
    5afc:	88 2f       	mov	r24, r24
    5afe:	90 e0       	ldi	r25, 0x00	; 0
    5b00:	88 0f       	add	r24, r24
    5b02:	99 1f       	adc	r25, r25
    5b04:	fc 01       	movw	r30, r24
    5b06:	ec 56       	subi	r30, 0x6C	; 108
    5b08:	fe 4f       	sbci	r31, 0xFE	; 254
    5b0a:	90 81       	ld	r25, Z
    5b0c:	82 2f       	mov	r24, r18
    5b0e:	69 2f       	mov	r22, r25
    5b10:	41 e0       	ldi	r20, 0x01	; 1
    5b12:	0e 94 4b 1b 	call	0x3696	; 0x3696 <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    5b16:	89 81       	ldd	r24, Y+1	; 0x01
    5b18:	8f 5f       	subi	r24, 0xFF	; 255
    5b1a:	89 83       	std	Y+1, r24	; 0x01
    5b1c:	89 81       	ldd	r24, Y+1	; 0x01
    5b1e:	84 30       	cpi	r24, 0x04	; 4
    5b20:	60 f2       	brcs	.-104    	; 0x5aba <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    5b22:	19 82       	std	Y+1, r1	; 0x01
    5b24:	31 c0       	rjmp	.+98     	; 0x5b88 <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    5b26:	89 81       	ldd	r24, Y+1	; 0x01
    5b28:	88 2f       	mov	r24, r24
    5b2a:	90 e0       	ldi	r25, 0x00	; 0
    5b2c:	88 0f       	add	r24, r24
    5b2e:	99 1f       	adc	r25, r25
    5b30:	fc 01       	movw	r30, r24
    5b32:	e5 56       	subi	r30, 0x65	; 101
    5b34:	fe 4f       	sbci	r31, 0xFE	; 254
    5b36:	20 81       	ld	r18, Z
    5b38:	89 81       	ldd	r24, Y+1	; 0x01
    5b3a:	88 2f       	mov	r24, r24
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	88 0f       	add	r24, r24
    5b40:	99 1f       	adc	r25, r25
    5b42:	fc 01       	movw	r30, r24
    5b44:	e4 56       	subi	r30, 0x64	; 100
    5b46:	fe 4f       	sbci	r31, 0xFE	; 254
    5b48:	90 81       	ld	r25, Z
    5b4a:	82 2f       	mov	r24, r18
    5b4c:	69 2f       	mov	r22, r25
    5b4e:	41 e0       	ldi	r20, 0x01	; 1
    5b50:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    5b54:	89 81       	ldd	r24, Y+1	; 0x01
    5b56:	88 2f       	mov	r24, r24
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	88 0f       	add	r24, r24
    5b5c:	99 1f       	adc	r25, r25
    5b5e:	fc 01       	movw	r30, r24
    5b60:	e5 56       	subi	r30, 0x65	; 101
    5b62:	fe 4f       	sbci	r31, 0xFE	; 254
    5b64:	20 81       	ld	r18, Z
    5b66:	89 81       	ldd	r24, Y+1	; 0x01
    5b68:	88 2f       	mov	r24, r24
    5b6a:	90 e0       	ldi	r25, 0x00	; 0
    5b6c:	88 0f       	add	r24, r24
    5b6e:	99 1f       	adc	r25, r25
    5b70:	fc 01       	movw	r30, r24
    5b72:	e4 56       	subi	r30, 0x64	; 100
    5b74:	fe 4f       	sbci	r31, 0xFE	; 254
    5b76:	90 81       	ld	r25, Z
    5b78:	82 2f       	mov	r24, r18
    5b7a:	69 2f       	mov	r22, r25
    5b7c:	40 e0       	ldi	r20, 0x00	; 0
    5b7e:	0e 94 4b 1b 	call	0x3696	; 0x3696 <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    5b82:	89 81       	ldd	r24, Y+1	; 0x01
    5b84:	8f 5f       	subi	r24, 0xFF	; 255
    5b86:	89 83       	std	Y+1, r24	; 0x01
    5b88:	89 81       	ldd	r24, Y+1	; 0x01
    5b8a:	84 30       	cpi	r24, 0x04	; 4
    5b8c:	60 f2       	brcs	.-104    	; 0x5b26 <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    5b8e:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    5b90:	8a 81       	ldd	r24, Y+2	; 0x02

}
    5b92:	0f 90       	pop	r0
    5b94:	0f 90       	pop	r0
    5b96:	cf 91       	pop	r28
    5b98:	df 91       	pop	r29
    5b9a:	08 95       	ret

00005b9c <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    5b9c:	df 93       	push	r29
    5b9e:	cf 93       	push	r28
    5ba0:	cd b7       	in	r28, 0x3d	; 61
    5ba2:	de b7       	in	r29, 0x3e	; 62
    5ba4:	aa 97       	sbiw	r28, 0x2a	; 42
    5ba6:	0f b6       	in	r0, 0x3f	; 63
    5ba8:	f8 94       	cli
    5baa:	de bf       	out	0x3e, r29	; 62
    5bac:	0f be       	out	0x3f, r0	; 63
    5bae:	cd bf       	out	0x3d, r28	; 61
    5bb0:	9d a3       	std	Y+37, r25	; 0x25
    5bb2:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    5bb4:	81 e0       	ldi	r24, 0x01	; 1
    5bb6:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    5bb8:	8c a1       	ldd	r24, Y+36	; 0x24
    5bba:	9d a1       	ldd	r25, Y+37	; 0x25
    5bbc:	00 97       	sbiw	r24, 0x00	; 0
    5bbe:	09 f4       	brne	.+2      	; 0x5bc2 <Keypad_enu_GetButtonPressedValue+0x26>
    5bc0:	68 c1       	rjmp	.+720    	; 0x5e92 <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    5bc2:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    5bc4:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    5bc6:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    5bc8:	ec a1       	ldd	r30, Y+36	; 0x24
    5bca:	fd a1       	ldd	r31, Y+37	; 0x25
    5bcc:	8f ef       	ldi	r24, 0xFF	; 255
    5bce:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    5bd0:	19 8a       	std	Y+17, r1	; 0x11
    5bd2:	5a c1       	rjmp	.+692    	; 0x5e88 <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    5bd4:	89 89       	ldd	r24, Y+17	; 0x11
    5bd6:	88 2f       	mov	r24, r24
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	88 0f       	add	r24, r24
    5bdc:	99 1f       	adc	r25, r25
    5bde:	fc 01       	movw	r30, r24
    5be0:	ed 56       	subi	r30, 0x6D	; 109
    5be2:	fe 4f       	sbci	r31, 0xFE	; 254
    5be4:	40 81       	ld	r20, Z
    5be6:	89 89       	ldd	r24, Y+17	; 0x11
    5be8:	88 2f       	mov	r24, r24
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	88 0f       	add	r24, r24
    5bee:	99 1f       	adc	r25, r25
    5bf0:	fc 01       	movw	r30, r24
    5bf2:	ec 56       	subi	r30, 0x6C	; 108
    5bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    5bf6:	90 81       	ld	r25, Z
    5bf8:	9e 01       	movw	r18, r28
    5bfa:	2d 5e       	subi	r18, 0xED	; 237
    5bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    5bfe:	84 2f       	mov	r24, r20
    5c00:	69 2f       	mov	r22, r25
    5c02:	a9 01       	movw	r20, r18
    5c04:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    5c08:	8b 89       	ldd	r24, Y+19	; 0x13
    5c0a:	88 23       	and	r24, r24
    5c0c:	09 f0       	breq	.+2      	; 0x5c10 <Keypad_enu_GetButtonPressedValue+0x74>
    5c0e:	36 c1       	rjmp	.+620    	; 0x5e7c <Keypad_enu_GetButtonPressedValue+0x2e0>
    5c10:	80 e0       	ldi	r24, 0x00	; 0
    5c12:	90 e0       	ldi	r25, 0x00	; 0
    5c14:	a0 e4       	ldi	r26, 0x40	; 64
    5c16:	b0 e4       	ldi	r27, 0x40	; 64
    5c18:	8b 87       	std	Y+11, r24	; 0x0b
    5c1a:	9c 87       	std	Y+12, r25	; 0x0c
    5c1c:	ad 87       	std	Y+13, r26	; 0x0d
    5c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c28:	20 e0       	ldi	r18, 0x00	; 0
    5c2a:	30 e0       	ldi	r19, 0x00	; 0
    5c2c:	4a e7       	ldi	r20, 0x7A	; 122
    5c2e:	55 e4       	ldi	r21, 0x45	; 69
    5c30:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5c34:	dc 01       	movw	r26, r24
    5c36:	cb 01       	movw	r24, r22
    5c38:	8f 83       	std	Y+7, r24	; 0x07
    5c3a:	98 87       	std	Y+8, r25	; 0x08
    5c3c:	a9 87       	std	Y+9, r26	; 0x09
    5c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c40:	6f 81       	ldd	r22, Y+7	; 0x07
    5c42:	78 85       	ldd	r23, Y+8	; 0x08
    5c44:	89 85       	ldd	r24, Y+9	; 0x09
    5c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c48:	20 e0       	ldi	r18, 0x00	; 0
    5c4a:	30 e0       	ldi	r19, 0x00	; 0
    5c4c:	40 e8       	ldi	r20, 0x80	; 128
    5c4e:	5f e3       	ldi	r21, 0x3F	; 63
    5c50:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    5c54:	88 23       	and	r24, r24
    5c56:	2c f4       	brge	.+10     	; 0x5c62 <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    5c58:	81 e0       	ldi	r24, 0x01	; 1
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	9e 83       	std	Y+6, r25	; 0x06
    5c5e:	8d 83       	std	Y+5, r24	; 0x05
    5c60:	3f c0       	rjmp	.+126    	; 0x5ce0 <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    5c62:	6f 81       	ldd	r22, Y+7	; 0x07
    5c64:	78 85       	ldd	r23, Y+8	; 0x08
    5c66:	89 85       	ldd	r24, Y+9	; 0x09
    5c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c6a:	20 e0       	ldi	r18, 0x00	; 0
    5c6c:	3f ef       	ldi	r19, 0xFF	; 255
    5c6e:	4f e7       	ldi	r20, 0x7F	; 127
    5c70:	57 e4       	ldi	r21, 0x47	; 71
    5c72:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    5c76:	18 16       	cp	r1, r24
    5c78:	4c f5       	brge	.+82     	; 0x5ccc <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c82:	20 e0       	ldi	r18, 0x00	; 0
    5c84:	30 e0       	ldi	r19, 0x00	; 0
    5c86:	40 e2       	ldi	r20, 0x20	; 32
    5c88:	51 e4       	ldi	r21, 0x41	; 65
    5c8a:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    5c8e:	dc 01       	movw	r26, r24
    5c90:	cb 01       	movw	r24, r22
    5c92:	bc 01       	movw	r22, r24
    5c94:	cd 01       	movw	r24, r26
    5c96:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5c9a:	dc 01       	movw	r26, r24
    5c9c:	cb 01       	movw	r24, r22
    5c9e:	9e 83       	std	Y+6, r25	; 0x06
    5ca0:	8d 83       	std	Y+5, r24	; 0x05
    5ca2:	0f c0       	rjmp	.+30     	; 0x5cc2 <Keypad_enu_GetButtonPressedValue+0x126>
    5ca4:	80 e9       	ldi	r24, 0x90	; 144
    5ca6:	91 e0       	ldi	r25, 0x01	; 1
    5ca8:	9c 83       	std	Y+4, r25	; 0x04
    5caa:	8b 83       	std	Y+3, r24	; 0x03
    5cac:	8b 81       	ldd	r24, Y+3	; 0x03
    5cae:	9c 81       	ldd	r25, Y+4	; 0x04
    5cb0:	01 97       	sbiw	r24, 0x01	; 1
    5cb2:	f1 f7       	brne	.-4      	; 0x5cb0 <Keypad_enu_GetButtonPressedValue+0x114>
    5cb4:	9c 83       	std	Y+4, r25	; 0x04
    5cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    5cba:	9e 81       	ldd	r25, Y+6	; 0x06
    5cbc:	01 97       	sbiw	r24, 0x01	; 1
    5cbe:	9e 83       	std	Y+6, r25	; 0x06
    5cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    5cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    5cc6:	00 97       	sbiw	r24, 0x00	; 0
    5cc8:	69 f7       	brne	.-38     	; 0x5ca4 <Keypad_enu_GetButtonPressedValue+0x108>
    5cca:	14 c0       	rjmp	.+40     	; 0x5cf4 <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    5cce:	78 85       	ldd	r23, Y+8	; 0x08
    5cd0:	89 85       	ldd	r24, Y+9	; 0x09
    5cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cd4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5cd8:	dc 01       	movw	r26, r24
    5cda:	cb 01       	movw	r24, r22
    5cdc:	9e 83       	std	Y+6, r25	; 0x06
    5cde:	8d 83       	std	Y+5, r24	; 0x05
    5ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ce4:	9a 83       	std	Y+2, r25	; 0x02
    5ce6:	89 83       	std	Y+1, r24	; 0x01
    5ce8:	89 81       	ldd	r24, Y+1	; 0x01
    5cea:	9a 81       	ldd	r25, Y+2	; 0x02
    5cec:	01 97       	sbiw	r24, 0x01	; 1
    5cee:	f1 f7       	brne	.-4      	; 0x5cec <Keypad_enu_GetButtonPressedValue+0x150>
    5cf0:	9a 83       	std	Y+2, r25	; 0x02
    5cf2:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    5cf4:	89 89       	ldd	r24, Y+17	; 0x11
    5cf6:	88 2f       	mov	r24, r24
    5cf8:	90 e0       	ldi	r25, 0x00	; 0
    5cfa:	88 0f       	add	r24, r24
    5cfc:	99 1f       	adc	r25, r25
    5cfe:	fc 01       	movw	r30, r24
    5d00:	ed 56       	subi	r30, 0x6D	; 109
    5d02:	fe 4f       	sbci	r31, 0xFE	; 254
    5d04:	40 81       	ld	r20, Z
    5d06:	89 89       	ldd	r24, Y+17	; 0x11
    5d08:	88 2f       	mov	r24, r24
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	88 0f       	add	r24, r24
    5d0e:	99 1f       	adc	r25, r25
    5d10:	fc 01       	movw	r30, r24
    5d12:	ec 56       	subi	r30, 0x6C	; 108
    5d14:	fe 4f       	sbci	r31, 0xFE	; 254
    5d16:	90 81       	ld	r25, Z
    5d18:	9e 01       	movw	r18, r28
    5d1a:	2d 5e       	subi	r18, 0xED	; 237
    5d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5d1e:	84 2f       	mov	r24, r20
    5d20:	69 2f       	mov	r22, r25
    5d22:	a9 01       	movw	r20, r18
    5d24:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    5d28:	8b 89       	ldd	r24, Y+19	; 0x13
    5d2a:	88 23       	and	r24, r24
    5d2c:	09 f0       	breq	.+2      	; 0x5d30 <Keypad_enu_GetButtonPressedValue+0x194>
    5d2e:	a6 c0       	rjmp	.+332    	; 0x5e7c <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    5d30:	18 8a       	std	Y+16, r1	; 0x10
    5d32:	a0 c0       	rjmp	.+320    	; 0x5e74 <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    5d34:	88 89       	ldd	r24, Y+16	; 0x10
    5d36:	88 2f       	mov	r24, r24
    5d38:	90 e0       	ldi	r25, 0x00	; 0
    5d3a:	88 0f       	add	r24, r24
    5d3c:	99 1f       	adc	r25, r25
    5d3e:	fc 01       	movw	r30, r24
    5d40:	e5 56       	subi	r30, 0x65	; 101
    5d42:	fe 4f       	sbci	r31, 0xFE	; 254
    5d44:	20 81       	ld	r18, Z
    5d46:	88 89       	ldd	r24, Y+16	; 0x10
    5d48:	88 2f       	mov	r24, r24
    5d4a:	90 e0       	ldi	r25, 0x00	; 0
    5d4c:	88 0f       	add	r24, r24
    5d4e:	99 1f       	adc	r25, r25
    5d50:	fc 01       	movw	r30, r24
    5d52:	e4 56       	subi	r30, 0x64	; 100
    5d54:	fe 4f       	sbci	r31, 0xFE	; 254
    5d56:	90 81       	ld	r25, Z
    5d58:	82 2f       	mov	r24, r18
    5d5a:	69 2f       	mov	r22, r25
    5d5c:	41 e0       	ldi	r20, 0x01	; 1
    5d5e:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    5d62:	89 89       	ldd	r24, Y+17	; 0x11
    5d64:	88 2f       	mov	r24, r24
    5d66:	90 e0       	ldi	r25, 0x00	; 0
    5d68:	88 0f       	add	r24, r24
    5d6a:	99 1f       	adc	r25, r25
    5d6c:	fc 01       	movw	r30, r24
    5d6e:	ed 56       	subi	r30, 0x6D	; 109
    5d70:	fe 4f       	sbci	r31, 0xFE	; 254
    5d72:	40 81       	ld	r20, Z
    5d74:	89 89       	ldd	r24, Y+17	; 0x11
    5d76:	88 2f       	mov	r24, r24
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	88 0f       	add	r24, r24
    5d7c:	99 1f       	adc	r25, r25
    5d7e:	fc 01       	movw	r30, r24
    5d80:	ec 56       	subi	r30, 0x6C	; 108
    5d82:	fe 4f       	sbci	r31, 0xFE	; 254
    5d84:	90 81       	ld	r25, Z
    5d86:	9e 01       	movw	r18, r28
    5d88:	2d 5e       	subi	r18, 0xED	; 237
    5d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d8c:	84 2f       	mov	r24, r20
    5d8e:	69 2f       	mov	r22, r25
    5d90:	a9 01       	movw	r20, r18
    5d92:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    5d96:	8b 89       	ldd	r24, Y+19	; 0x13
    5d98:	81 30       	cpi	r24, 0x01	; 1
    5d9a:	09 f0       	breq	.+2      	; 0x5d9e <Keypad_enu_GetButtonPressedValue+0x202>
    5d9c:	51 c0       	rjmp	.+162    	; 0x5e40 <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    5d9e:	ce 01       	movw	r24, r28
    5da0:	44 96       	adiw	r24, 0x14	; 20
    5da2:	9f a3       	std	Y+39, r25	; 0x27
    5da4:	8e a3       	std	Y+38, r24	; 0x26
    5da6:	e6 ea       	ldi	r30, 0xA6	; 166
    5da8:	f1 e0       	ldi	r31, 0x01	; 1
    5daa:	f9 a7       	std	Y+41, r31	; 0x29
    5dac:	e8 a7       	std	Y+40, r30	; 0x28
    5dae:	f0 e1       	ldi	r31, 0x10	; 16
    5db0:	fa a7       	std	Y+42, r31	; 0x2a
    5db2:	e8 a5       	ldd	r30, Y+40	; 0x28
    5db4:	f9 a5       	ldd	r31, Y+41	; 0x29
    5db6:	00 80       	ld	r0, Z
    5db8:	88 a5       	ldd	r24, Y+40	; 0x28
    5dba:	99 a5       	ldd	r25, Y+41	; 0x29
    5dbc:	01 96       	adiw	r24, 0x01	; 1
    5dbe:	99 a7       	std	Y+41, r25	; 0x29
    5dc0:	88 a7       	std	Y+40, r24	; 0x28
    5dc2:	ee a1       	ldd	r30, Y+38	; 0x26
    5dc4:	ff a1       	ldd	r31, Y+39	; 0x27
    5dc6:	00 82       	st	Z, r0
    5dc8:	8e a1       	ldd	r24, Y+38	; 0x26
    5dca:	9f a1       	ldd	r25, Y+39	; 0x27
    5dcc:	01 96       	adiw	r24, 0x01	; 1
    5dce:	9f a3       	std	Y+39, r25	; 0x27
    5dd0:	8e a3       	std	Y+38, r24	; 0x26
    5dd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    5dd4:	91 50       	subi	r25, 0x01	; 1
    5dd6:	9a a7       	std	Y+42, r25	; 0x2a
    5dd8:	ea a5       	ldd	r30, Y+42	; 0x2a
    5dda:	ee 23       	and	r30, r30
    5ddc:	51 f7       	brne	.-44     	; 0x5db2 <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    5dde:	89 89       	ldd	r24, Y+17	; 0x11
    5de0:	28 2f       	mov	r18, r24
    5de2:	30 e0       	ldi	r19, 0x00	; 0
    5de4:	88 89       	ldd	r24, Y+16	; 0x10
    5de6:	48 2f       	mov	r20, r24
    5de8:	50 e0       	ldi	r21, 0x00	; 0
    5dea:	22 0f       	add	r18, r18
    5dec:	33 1f       	adc	r19, r19
    5dee:	22 0f       	add	r18, r18
    5df0:	33 1f       	adc	r19, r19
    5df2:	ce 01       	movw	r24, r28
    5df4:	01 96       	adiw	r24, 0x01	; 1
    5df6:	82 0f       	add	r24, r18
    5df8:	93 1f       	adc	r25, r19
    5dfa:	84 0f       	add	r24, r20
    5dfc:	95 1f       	adc	r25, r21
    5dfe:	fc 01       	movw	r30, r24
    5e00:	73 96       	adiw	r30, 0x13	; 19
    5e02:	80 81       	ld	r24, Z
    5e04:	ec a1       	ldd	r30, Y+36	; 0x24
    5e06:	fd a1       	ldd	r31, Y+37	; 0x25
    5e08:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    5e0e:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    5e10:	88 89       	ldd	r24, Y+16	; 0x10
    5e12:	88 2f       	mov	r24, r24
    5e14:	90 e0       	ldi	r25, 0x00	; 0
    5e16:	88 0f       	add	r24, r24
    5e18:	99 1f       	adc	r25, r25
    5e1a:	fc 01       	movw	r30, r24
    5e1c:	e5 56       	subi	r30, 0x65	; 101
    5e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    5e20:	20 81       	ld	r18, Z
    5e22:	88 89       	ldd	r24, Y+16	; 0x10
    5e24:	88 2f       	mov	r24, r24
    5e26:	90 e0       	ldi	r25, 0x00	; 0
    5e28:	88 0f       	add	r24, r24
    5e2a:	99 1f       	adc	r25, r25
    5e2c:	fc 01       	movw	r30, r24
    5e2e:	e4 56       	subi	r30, 0x64	; 100
    5e30:	fe 4f       	sbci	r31, 0xFE	; 254
    5e32:	90 81       	ld	r25, Z
    5e34:	82 2f       	mov	r24, r18
    5e36:	69 2f       	mov	r22, r25
    5e38:	40 e0       	ldi	r20, 0x00	; 0
    5e3a:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    5e3e:	1e c0       	rjmp	.+60     	; 0x5e7c <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    5e40:	88 89       	ldd	r24, Y+16	; 0x10
    5e42:	88 2f       	mov	r24, r24
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	88 0f       	add	r24, r24
    5e48:	99 1f       	adc	r25, r25
    5e4a:	fc 01       	movw	r30, r24
    5e4c:	e5 56       	subi	r30, 0x65	; 101
    5e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    5e50:	20 81       	ld	r18, Z
    5e52:	88 89       	ldd	r24, Y+16	; 0x10
    5e54:	88 2f       	mov	r24, r24
    5e56:	90 e0       	ldi	r25, 0x00	; 0
    5e58:	88 0f       	add	r24, r24
    5e5a:	99 1f       	adc	r25, r25
    5e5c:	fc 01       	movw	r30, r24
    5e5e:	e4 56       	subi	r30, 0x64	; 100
    5e60:	fe 4f       	sbci	r31, 0xFE	; 254
    5e62:	90 81       	ld	r25, Z
    5e64:	82 2f       	mov	r24, r18
    5e66:	69 2f       	mov	r22, r25
    5e68:	40 e0       	ldi	r20, 0x00	; 0
    5e6a:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    5e6e:	88 89       	ldd	r24, Y+16	; 0x10
    5e70:	8f 5f       	subi	r24, 0xFF	; 255
    5e72:	88 8b       	std	Y+16, r24	; 0x10
    5e74:	88 89       	ldd	r24, Y+16	; 0x10
    5e76:	84 30       	cpi	r24, 0x04	; 4
    5e78:	08 f4       	brcc	.+2      	; 0x5e7c <Keypad_enu_GetButtonPressedValue+0x2e0>
    5e7a:	5c cf       	rjmp	.-328    	; 0x5d34 <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    5e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e7e:	88 23       	and	r24, r24
    5e80:	51 f4       	brne	.+20     	; 0x5e96 <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    5e82:	89 89       	ldd	r24, Y+17	; 0x11
    5e84:	8f 5f       	subi	r24, 0xFF	; 255
    5e86:	89 8b       	std	Y+17, r24	; 0x11
    5e88:	89 89       	ldd	r24, Y+17	; 0x11
    5e8a:	84 30       	cpi	r24, 0x04	; 4
    5e8c:	08 f4       	brcc	.+2      	; 0x5e90 <Keypad_enu_GetButtonPressedValue+0x2f4>
    5e8e:	a2 ce       	rjmp	.-700    	; 0x5bd4 <Keypad_enu_GetButtonPressedValue+0x38>
    5e90:	02 c0       	rjmp	.+4      	; 0x5e96 <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    5e92:	83 e0       	ldi	r24, 0x03	; 3
    5e94:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    5e96:	8a 89       	ldd	r24, Y+18	; 0x12

}
    5e98:	aa 96       	adiw	r28, 0x2a	; 42
    5e9a:	0f b6       	in	r0, 0x3f	; 63
    5e9c:	f8 94       	cli
    5e9e:	de bf       	out	0x3e, r29	; 62
    5ea0:	0f be       	out	0x3f, r0	; 63
    5ea2:	cd bf       	out	0x3d, r28	; 61
    5ea4:	cf 91       	pop	r28
    5ea6:	df 91       	pop	r29
    5ea8:	08 95       	ret

00005eaa <ICU_enu_Initialization>:
static u32 LOC_au32_NumberOfOverflowsArray[3];  //To sotre the number of overflows performed by ICU_TIMER_USED (Total, Falling Edge, Second Rising Edge)
static u16 LOC_u16_Timer_PS;


extern ErrorState_t ICU_enu_Initialization()
{
    5eaa:	df 93       	push	r29
    5eac:	cf 93       	push	r28
    5eae:	0f 92       	push	r0
    5eb0:	cd b7       	in	r28, 0x3d	; 61
    5eb2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5eb4:	81 e0       	ldi	r24, 0x01	; 1
    5eb6:	89 83       	std	Y+1, r24	; 0x01

    //Initialize Timer peripheral: Timer1, Normal, PS 1024, and  Interrupt Mode for overflow and input capture
    Timer1_enu_Initialization();
    5eb8:	0e 94 31 09 	call	0x1262	; 0x1262 <Timer1_enu_Initialization>
    Timer1_enu_DisableInterrupt(TIMER1_CAPTURE_EVENT_ISR);
    5ebc:	80 e0       	ldi	r24, 0x00	; 0
    5ebe:	0e 94 31 0a 	call	0x1462	; 0x1462 <Timer1_enu_DisableInterrupt>
    Timer1_enu_SetCallBackFunction(TIMER1_CAPTURE_EVENT_ISR, vid_CapturingFunction, NULL);
    5ec2:	21 e0       	ldi	r18, 0x01	; 1
    5ec4:	31 e3       	ldi	r19, 0x31	; 49
    5ec6:	80 e0       	ldi	r24, 0x00	; 0
    5ec8:	b9 01       	movw	r22, r18
    5eca:	40 e0       	ldi	r20, 0x00	; 0
    5ecc:	50 e0       	ldi	r21, 0x00	; 0
    5ece:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <Timer1_enu_SetCallBackFunction>
    Timer1_enu_SetCallBackFunction(TIMER1_OVERFLOW_ISR, vid_IncrementOverFlowCounter, NULL);
    5ed2:	20 e7       	ldi	r18, 0x70	; 112
    5ed4:	31 e3       	ldi	r19, 0x31	; 49
    5ed6:	83 e0       	ldi	r24, 0x03	; 3
    5ed8:	b9 01       	movw	r22, r18
    5eda:	40 e0       	ldi	r20, 0x00	; 0
    5edc:	50 e0       	ldi	r21, 0x00	; 0
    5ede:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <Timer1_enu_SetCallBackFunction>
    Timer1_enu_DisableInterrupt(TIMER1_OVERFLOW_ISR);
    5ee2:	83 e0       	ldi	r24, 0x03	; 3
    5ee4:	0e 94 31 0a 	call	0x1462	; 0x1462 <Timer1_enu_DisableInterrupt>


    //Initialize ICU module
    LOC_u8_State = ICU_IDLE; //State machine must start as IDLE until activation
    5ee8:	10 92 fa 01 	sts	0x01FA, r1
    // EXTI_enu_SetCallBack(ICU_EXTI_USED, vid_CapturingFunction, NULL); //Setting CapturingFunction as the EXTI ISR
    // Timer_enu_Initialization();
    // Timer_enu_DisableInterruptMode(ICU_TIMER_USED, TIMER_NORMAL); //Disabling Timer Interrupt
    // Timer_enu_SetCallBack(ICU_TIMER_USED, TIMER_NORMAL, vid_IncrementOverFlowCounter, NULL);//Setting Call Back Function

    return Local_u8_ErrorFlag;
    5eec:	89 81       	ldd	r24, Y+1	; 0x01

}
    5eee:	0f 90       	pop	r0
    5ef0:	cf 91       	pop	r28
    5ef2:	df 91       	pop	r29
    5ef4:	08 95       	ret

00005ef6 <ICU_enu_StartCapture>:

extern ErrorState_t ICU_enu_StartCapture()
{
    5ef6:	df 93       	push	r29
    5ef8:	cf 93       	push	r28
    5efa:	0f 92       	push	r0
    5efc:	cd b7       	in	r28, 0x3d	; 61
    5efe:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5f00:	81 e0       	ldi	r24, 0x01	; 1
    5f02:	89 83       	std	Y+1, r24	; 0x01
    
    if(LOC_u8_State == ICU_IDLE)
    5f04:	80 91 fa 01 	lds	r24, 0x01FA
    5f08:	88 23       	and	r24, r24
    5f0a:	b1 f4       	brne	.+44     	; 0x5f38 <ICU_enu_StartCapture+0x42>
    {
        
        LOC_u8_State = ICU_FIRST_RISING_EDGE; //State machine will begin from the 'FIRS_RISING_EGDE' State
    5f0c:	81 e0       	ldi	r24, 0x01	; 1
    5f0e:	80 93 fa 01 	sts	0x01FA, r24
        
        Timer1_enu_GetPS(&LOC_u16_Timer_PS);
    5f12:	8f e0       	ldi	r24, 0x0F	; 15
    5f14:	92 e0       	ldi	r25, 0x02	; 2
    5f16:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <Timer1_enu_GetPS>
        
        Timer1_enu_SetInputCaptureEdge(TIMER1_ICU_RISING_EDGE);
    5f1a:	81 e0       	ldi	r24, 0x01	; 1
    5f1c:	0e 94 45 0b 	call	0x168a	; 0x168a <Timer1_enu_SetInputCaptureEdge>

        Timer1_enu_ClearFlag(TIMER1_CAPTURE_EVENT_ISR); //Clearing Flag incase of pending interrupts
    5f20:	80 e0       	ldi	r24, 0x00	; 0
    5f22:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <Timer1_enu_ClearFlag>
        
        Timer1_enu_ClearFlag(TIMER1_OVERFLOW_ISR); //Clearing Flag incase of pending interrupts
    5f26:	83 e0       	ldi	r24, 0x03	; 3
    5f28:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <Timer1_enu_ClearFlag>

        Timer1_enu_EnableInterrupt(TIMER1_CAPTURE_EVENT_ISR);
    5f2c:	80 e0       	ldi	r24, 0x00	; 0
    5f2e:	0e 94 83 0a 	call	0x1506	; 0x1506 <Timer1_enu_EnableInterrupt>
    
        Timer1_enu_EnableInterrupt(TIMER1_OVERFLOW_ISR);
    5f32:	83 e0       	ldi	r24, 0x03	; 3
    5f34:	0e 94 83 0a 	call	0x1506	; 0x1506 <Timer1_enu_EnableInterrupt>
    }

    return Local_u8_ErrorFlag;
    5f38:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f3a:	0f 90       	pop	r0
    5f3c:	cf 91       	pop	r28
    5f3e:	df 91       	pop	r29
    5f40:	08 95       	ret

00005f42 <ICU_enu_CalculateParameters>:

extern ErrorState_t ICU_enu_CalculateParameters(f32* Copy_pf32_SignalParametersArray)
{
    5f42:	af 92       	push	r10
    5f44:	bf 92       	push	r11
    5f46:	cf 92       	push	r12
    5f48:	df 92       	push	r13
    5f4a:	ef 92       	push	r14
    5f4c:	ff 92       	push	r15
    5f4e:	0f 93       	push	r16
    5f50:	1f 93       	push	r17
    5f52:	df 93       	push	r29
    5f54:	cf 93       	push	r28
    5f56:	cd b7       	in	r28, 0x3d	; 61
    5f58:	de b7       	in	r29, 0x3e	; 62
    5f5a:	27 97       	sbiw	r28, 0x07	; 7
    5f5c:	0f b6       	in	r0, 0x3f	; 63
    5f5e:	f8 94       	cli
    5f60:	de bf       	out	0x3e, r29	; 62
    5f62:	0f be       	out	0x3f, r0	; 63
    5f64:	cd bf       	out	0x3d, r28	; 61
    5f66:	9f 83       	std	Y+7, r25	; 0x07
    5f68:	8e 83       	std	Y+6, r24	; 0x06
    u8 Local_u8_ErrorFlag = ES_NOK;
    5f6a:	81 e0       	ldi	r24, 0x01	; 1
    5f6c:	8d 83       	std	Y+5, r24	; 0x05
    f32 Local_f32_TimerFrequency = 16000000.0/LOC_u16_Timer_PS; 
    5f6e:	80 91 0f 02 	lds	r24, 0x020F
    5f72:	90 91 10 02 	lds	r25, 0x0210
    5f76:	cc 01       	movw	r24, r24
    5f78:	a0 e0       	ldi	r26, 0x00	; 0
    5f7a:	b0 e0       	ldi	r27, 0x00	; 0
    5f7c:	bc 01       	movw	r22, r24
    5f7e:	cd 01       	movw	r24, r26
    5f80:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatunsisf>
    5f84:	9b 01       	movw	r18, r22
    5f86:	ac 01       	movw	r20, r24
    5f88:	60 e0       	ldi	r22, 0x00	; 0
    5f8a:	74 e2       	ldi	r23, 0x24	; 36
    5f8c:	84 e7       	ldi	r24, 0x74	; 116
    5f8e:	9b e4       	ldi	r25, 0x4B	; 75
    5f90:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    5f94:	dc 01       	movw	r26, r24
    5f96:	cb 01       	movw	r24, r22
    5f98:	89 83       	std	Y+1, r24	; 0x01
    5f9a:	9a 83       	std	Y+2, r25	; 0x02
    5f9c:	ab 83       	std	Y+3, r26	; 0x03
    5f9e:	bc 83       	std	Y+4, r27	; 0x04
    
    if(LOC_u8_State == ICU_IDLE)
    5fa0:	80 91 fa 01 	lds	r24, 0x01FA
    5fa4:	88 23       	and	r24, r24
    5fa6:	09 f0       	breq	.+2      	; 0x5faa <ICU_enu_CalculateParameters+0x68>
    5fa8:	ff c0       	rjmp	.+510    	; 0x61a8 <ICU_enu_CalculateParameters+0x266>
    {

        LOC_u32_PeriodCounts += 65536ULL*LOC_au32_NumberOfOverflowsArray[2]; //Total Number of Period Counts
    5faa:	80 91 0b 02 	lds	r24, 0x020B
    5fae:	90 91 0c 02 	lds	r25, 0x020C
    5fb2:	a0 91 0d 02 	lds	r26, 0x020D
    5fb6:	b0 91 0e 02 	lds	r27, 0x020E
    5fba:	5c 01       	movw	r10, r24
    5fbc:	6d 01       	movw	r12, r26
    5fbe:	ee 24       	eor	r14, r14
    5fc0:	ff 24       	eor	r15, r15
    5fc2:	87 01       	movw	r16, r14
    5fc4:	2a 2d       	mov	r18, r10
    5fc6:	3b 2d       	mov	r19, r11
    5fc8:	4c 2d       	mov	r20, r12
    5fca:	5d 2d       	mov	r21, r13
    5fcc:	6e 2d       	mov	r22, r14
    5fce:	7f 2d       	mov	r23, r15
    5fd0:	80 2f       	mov	r24, r16
    5fd2:	91 2f       	mov	r25, r17
    5fd4:	00 e1       	ldi	r16, 0x10	; 16
    5fd6:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    5fda:	a2 2e       	mov	r10, r18
    5fdc:	b3 2e       	mov	r11, r19
    5fde:	c4 2e       	mov	r12, r20
    5fe0:	d5 2e       	mov	r13, r21
    5fe2:	e6 2e       	mov	r14, r22
    5fe4:	f7 2e       	mov	r15, r23
    5fe6:	08 2f       	mov	r16, r24
    5fe8:	19 2f       	mov	r17, r25
    5fea:	2a 2d       	mov	r18, r10
    5fec:	3b 2d       	mov	r19, r11
    5fee:	4c 2d       	mov	r20, r12
    5ff0:	5d 2d       	mov	r21, r13
    5ff2:	6e 2d       	mov	r22, r14
    5ff4:	7f 2d       	mov	r23, r15
    5ff6:	80 2f       	mov	r24, r16
    5ff8:	91 2f       	mov	r25, r17
    5ffa:	80 91 fb 01 	lds	r24, 0x01FB
    5ffe:	90 91 fc 01 	lds	r25, 0x01FC
    6002:	a0 91 fd 01 	lds	r26, 0x01FD
    6006:	b0 91 fe 01 	lds	r27, 0x01FE
    600a:	82 0f       	add	r24, r18
    600c:	93 1f       	adc	r25, r19
    600e:	a4 1f       	adc	r26, r20
    6010:	b5 1f       	adc	r27, r21
    6012:	80 93 fb 01 	sts	0x01FB, r24
    6016:	90 93 fc 01 	sts	0x01FC, r25
    601a:	a0 93 fd 01 	sts	0x01FD, r26
    601e:	b0 93 fe 01 	sts	0x01FE, r27

        LOC_u32_TonCounts += 65536ULL*LOC_au32_NumberOfOverflowsArray[1]; //Total Number of Duty Counts
    6022:	80 91 07 02 	lds	r24, 0x0207
    6026:	90 91 08 02 	lds	r25, 0x0208
    602a:	a0 91 09 02 	lds	r26, 0x0209
    602e:	b0 91 0a 02 	lds	r27, 0x020A
    6032:	5c 01       	movw	r10, r24
    6034:	6d 01       	movw	r12, r26
    6036:	ee 24       	eor	r14, r14
    6038:	ff 24       	eor	r15, r15
    603a:	87 01       	movw	r16, r14
    603c:	2a 2d       	mov	r18, r10
    603e:	3b 2d       	mov	r19, r11
    6040:	4c 2d       	mov	r20, r12
    6042:	5d 2d       	mov	r21, r13
    6044:	6e 2d       	mov	r22, r14
    6046:	7f 2d       	mov	r23, r15
    6048:	80 2f       	mov	r24, r16
    604a:	91 2f       	mov	r25, r17
    604c:	00 e1       	ldi	r16, 0x10	; 16
    604e:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    6052:	a2 2e       	mov	r10, r18
    6054:	b3 2e       	mov	r11, r19
    6056:	c4 2e       	mov	r12, r20
    6058:	d5 2e       	mov	r13, r21
    605a:	e6 2e       	mov	r14, r22
    605c:	f7 2e       	mov	r15, r23
    605e:	08 2f       	mov	r16, r24
    6060:	19 2f       	mov	r17, r25
    6062:	2a 2d       	mov	r18, r10
    6064:	3b 2d       	mov	r19, r11
    6066:	4c 2d       	mov	r20, r12
    6068:	5d 2d       	mov	r21, r13
    606a:	6e 2d       	mov	r22, r14
    606c:	7f 2d       	mov	r23, r15
    606e:	80 2f       	mov	r24, r16
    6070:	91 2f       	mov	r25, r17
    6072:	80 91 ff 01 	lds	r24, 0x01FF
    6076:	90 91 00 02 	lds	r25, 0x0200
    607a:	a0 91 01 02 	lds	r26, 0x0201
    607e:	b0 91 02 02 	lds	r27, 0x0202
    6082:	82 0f       	add	r24, r18
    6084:	93 1f       	adc	r25, r19
    6086:	a4 1f       	adc	r26, r20
    6088:	b5 1f       	adc	r27, r21
    608a:	80 93 ff 01 	sts	0x01FF, r24
    608e:	90 93 00 02 	sts	0x0200, r25
    6092:	a0 93 01 02 	sts	0x0201, r26
    6096:	b0 93 02 02 	sts	0x0202, r27

        //Calculating Frequency in Hz
        if(LOC_u32_PeriodCounts != 0)
    609a:	80 91 fb 01 	lds	r24, 0x01FB
    609e:	90 91 fc 01 	lds	r25, 0x01FC
    60a2:	a0 91 fd 01 	lds	r26, 0x01FD
    60a6:	b0 91 fe 01 	lds	r27, 0x01FE
    60aa:	00 97       	sbiw	r24, 0x00	; 0
    60ac:	a1 05       	cpc	r26, r1
    60ae:	b1 05       	cpc	r27, r1
    60b0:	e9 f0       	breq	.+58     	; 0x60ec <ICU_enu_CalculateParameters+0x1aa>
        {
            Copy_pf32_SignalParametersArray[0] = (Local_f32_TimerFrequency/LOC_u32_PeriodCounts);
    60b2:	80 91 fb 01 	lds	r24, 0x01FB
    60b6:	90 91 fc 01 	lds	r25, 0x01FC
    60ba:	a0 91 fd 01 	lds	r26, 0x01FD
    60be:	b0 91 fe 01 	lds	r27, 0x01FE
    60c2:	bc 01       	movw	r22, r24
    60c4:	cd 01       	movw	r24, r26
    60c6:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatunsisf>
    60ca:	9b 01       	movw	r18, r22
    60cc:	ac 01       	movw	r20, r24
    60ce:	69 81       	ldd	r22, Y+1	; 0x01
    60d0:	7a 81       	ldd	r23, Y+2	; 0x02
    60d2:	8b 81       	ldd	r24, Y+3	; 0x03
    60d4:	9c 81       	ldd	r25, Y+4	; 0x04
    60d6:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    60da:	dc 01       	movw	r26, r24
    60dc:	cb 01       	movw	r24, r22
    60de:	ee 81       	ldd	r30, Y+6	; 0x06
    60e0:	ff 81       	ldd	r31, Y+7	; 0x07
    60e2:	80 83       	st	Z, r24
    60e4:	91 83       	std	Z+1, r25	; 0x01
    60e6:	a2 83       	std	Z+2, r26	; 0x02
    60e8:	b3 83       	std	Z+3, r27	; 0x03
    60ea:	0a c0       	rjmp	.+20     	; 0x6100 <ICU_enu_CalculateParameters+0x1be>
        }
        else
        {
            Copy_pf32_SignalParametersArray[0] = 0; //dc
    60ec:	ee 81       	ldd	r30, Y+6	; 0x06
    60ee:	ff 81       	ldd	r31, Y+7	; 0x07
    60f0:	80 e0       	ldi	r24, 0x00	; 0
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	a0 e0       	ldi	r26, 0x00	; 0
    60f6:	b0 e0       	ldi	r27, 0x00	; 0
    60f8:	80 83       	st	Z, r24
    60fa:	91 83       	std	Z+1, r25	; 0x01
    60fc:	a2 83       	std	Z+2, r26	; 0x02
    60fe:	b3 83       	std	Z+3, r27	; 0x03
        }

        if(LOC_u32_PeriodCounts != 0)
    6100:	80 91 fb 01 	lds	r24, 0x01FB
    6104:	90 91 fc 01 	lds	r25, 0x01FC
    6108:	a0 91 fd 01 	lds	r26, 0x01FD
    610c:	b0 91 fe 01 	lds	r27, 0x01FE
    6110:	00 97       	sbiw	r24, 0x00	; 0
    6112:	a1 05       	cpc	r26, r1
    6114:	b1 05       	cpc	r27, r1
    6116:	e1 f1       	breq	.+120    	; 0x6190 <ICU_enu_CalculateParameters+0x24e>
        {
            //Calculating Duty Ratio in %
            Copy_pf32_SignalParametersArray[1] = ((f32)LOC_u32_TonCounts*100UL)/(LOC_u32_PeriodCounts);
    6118:	8e 81       	ldd	r24, Y+6	; 0x06
    611a:	9f 81       	ldd	r25, Y+7	; 0x07
    611c:	cc 24       	eor	r12, r12
    611e:	dd 24       	eor	r13, r13
    6120:	68 94       	set
    6122:	c2 f8       	bld	r12, 2
    6124:	c8 0e       	add	r12, r24
    6126:	d9 1e       	adc	r13, r25
    6128:	80 91 ff 01 	lds	r24, 0x01FF
    612c:	90 91 00 02 	lds	r25, 0x0200
    6130:	a0 91 01 02 	lds	r26, 0x0201
    6134:	b0 91 02 02 	lds	r27, 0x0202
    6138:	bc 01       	movw	r22, r24
    613a:	cd 01       	movw	r24, r26
    613c:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatunsisf>
    6140:	dc 01       	movw	r26, r24
    6142:	cb 01       	movw	r24, r22
    6144:	bc 01       	movw	r22, r24
    6146:	cd 01       	movw	r24, r26
    6148:	20 e0       	ldi	r18, 0x00	; 0
    614a:	30 e0       	ldi	r19, 0x00	; 0
    614c:	48 ec       	ldi	r20, 0xC8	; 200
    614e:	52 e4       	ldi	r21, 0x42	; 66
    6150:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    6154:	dc 01       	movw	r26, r24
    6156:	cb 01       	movw	r24, r22
    6158:	7c 01       	movw	r14, r24
    615a:	8d 01       	movw	r16, r26
    615c:	80 91 fb 01 	lds	r24, 0x01FB
    6160:	90 91 fc 01 	lds	r25, 0x01FC
    6164:	a0 91 fd 01 	lds	r26, 0x01FD
    6168:	b0 91 fe 01 	lds	r27, 0x01FE
    616c:	bc 01       	movw	r22, r24
    616e:	cd 01       	movw	r24, r26
    6170:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatunsisf>
    6174:	9b 01       	movw	r18, r22
    6176:	ac 01       	movw	r20, r24
    6178:	c8 01       	movw	r24, r16
    617a:	b7 01       	movw	r22, r14
    617c:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    6180:	dc 01       	movw	r26, r24
    6182:	cb 01       	movw	r24, r22
    6184:	f6 01       	movw	r30, r12
    6186:	80 83       	st	Z, r24
    6188:	91 83       	std	Z+1, r25	; 0x01
    618a:	a2 83       	std	Z+2, r26	; 0x02
    618c:	b3 83       	std	Z+3, r27	; 0x03
    618e:	0c c0       	rjmp	.+24     	; 0x61a8 <ICU_enu_CalculateParameters+0x266>
        }   
        else
        {
            Copy_pf32_SignalParametersArray[1] = 100; 
    6190:	8e 81       	ldd	r24, Y+6	; 0x06
    6192:	9f 81       	ldd	r25, Y+7	; 0x07
    6194:	fc 01       	movw	r30, r24
    6196:	34 96       	adiw	r30, 0x04	; 4
    6198:	80 e0       	ldi	r24, 0x00	; 0
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	a8 ec       	ldi	r26, 0xC8	; 200
    619e:	b2 e4       	ldi	r27, 0x42	; 66
    61a0:	80 83       	st	Z, r24
    61a2:	91 83       	std	Z+1, r25	; 0x01
    61a4:	a2 83       	std	Z+2, r26	; 0x02
    61a6:	b3 83       	std	Z+3, r27	; 0x03
        }
    
    }

    return Local_u8_ErrorFlag;
    61a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    61aa:	27 96       	adiw	r28, 0x07	; 7
    61ac:	0f b6       	in	r0, 0x3f	; 63
    61ae:	f8 94       	cli
    61b0:	de bf       	out	0x3e, r29	; 62
    61b2:	0f be       	out	0x3f, r0	; 63
    61b4:	cd bf       	out	0x3d, r28	; 61
    61b6:	cf 91       	pop	r28
    61b8:	df 91       	pop	r29
    61ba:	1f 91       	pop	r17
    61bc:	0f 91       	pop	r16
    61be:	ff 90       	pop	r15
    61c0:	ef 90       	pop	r14
    61c2:	df 90       	pop	r13
    61c4:	cf 90       	pop	r12
    61c6:	bf 90       	pop	r11
    61c8:	af 90       	pop	r10
    61ca:	08 95       	ret

000061cc <ICU_enu_GetState>:

extern ErrorState_t ICU_enu_GetState(u8* Copy_pu8_SystemState)
{
    61cc:	df 93       	push	r29
    61ce:	cf 93       	push	r28
    61d0:	00 d0       	rcall	.+0      	; 0x61d2 <ICU_enu_GetState+0x6>
    61d2:	0f 92       	push	r0
    61d4:	cd b7       	in	r28, 0x3d	; 61
    61d6:	de b7       	in	r29, 0x3e	; 62
    61d8:	9b 83       	std	Y+3, r25	; 0x03
    61da:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag;

    if(Copy_pu8_SystemState)
    61dc:	8a 81       	ldd	r24, Y+2	; 0x02
    61de:	9b 81       	ldd	r25, Y+3	; 0x03
    61e0:	00 97       	sbiw	r24, 0x00	; 0
    61e2:	31 f0       	breq	.+12     	; 0x61f0 <ICU_enu_GetState+0x24>
    {
        *Copy_pu8_SystemState = LOC_u8_State;
    61e4:	80 91 fa 01 	lds	r24, 0x01FA
    61e8:	ea 81       	ldd	r30, Y+2	; 0x02
    61ea:	fb 81       	ldd	r31, Y+3	; 0x03
    61ec:	80 83       	st	Z, r24
    61ee:	02 c0       	rjmp	.+4      	; 0x61f4 <ICU_enu_GetState+0x28>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    61f0:	83 e0       	ldi	r24, 0x03	; 3
    61f2:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    61f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    61f6:	0f 90       	pop	r0
    61f8:	0f 90       	pop	r0
    61fa:	0f 90       	pop	r0
    61fc:	cf 91       	pop	r28
    61fe:	df 91       	pop	r29
    6200:	08 95       	ret

00006202 <vid_CapturingFunction>:

u16 TestVariable;
void vid_CapturingFunction(void* Copy_pvid_FunctionParameters)
{
    6202:	df 93       	push	r29
    6204:	cf 93       	push	r28
    6206:	00 d0       	rcall	.+0      	; 0x6208 <vid_CapturingFunction+0x6>
    6208:	00 d0       	rcall	.+0      	; 0x620a <vid_CapturingFunction+0x8>
    620a:	cd b7       	in	r28, 0x3d	; 61
    620c:	de b7       	in	r29, 0x3e	; 62
    620e:	9a 83       	std	Y+2, r25	; 0x02
    6210:	89 83       	std	Y+1, r24	; 0x01

    switch (LOC_u8_State)
    6212:	80 91 fa 01 	lds	r24, 0x01FA
    6216:	28 2f       	mov	r18, r24
    6218:	30 e0       	ldi	r19, 0x00	; 0
    621a:	3c 83       	std	Y+4, r19	; 0x04
    621c:	2b 83       	std	Y+3, r18	; 0x03
    621e:	8b 81       	ldd	r24, Y+3	; 0x03
    6220:	9c 81       	ldd	r25, Y+4	; 0x04
    6222:	82 30       	cpi	r24, 0x02	; 2
    6224:	91 05       	cpc	r25, r1
    6226:	c9 f1       	breq	.+114    	; 0x629a <vid_CapturingFunction+0x98>
    6228:	2b 81       	ldd	r18, Y+3	; 0x03
    622a:	3c 81       	ldd	r19, Y+4	; 0x04
    622c:	23 30       	cpi	r18, 0x03	; 3
    622e:	31 05       	cpc	r19, r1
    6230:	c9 f0       	breq	.+50     	; 0x6264 <vid_CapturingFunction+0x62>
    6232:	8b 81       	ldd	r24, Y+3	; 0x03
    6234:	9c 81       	ldd	r25, Y+4	; 0x04
    6236:	81 30       	cpi	r24, 0x01	; 1
    6238:	91 05       	cpc	r25, r1
    623a:	09 f0       	breq	.+2      	; 0x623e <vid_CapturingFunction+0x3c>
    623c:	4a c0       	rjmp	.+148    	; 0x62d2 <vid_CapturingFunction+0xd0>
        
        
        case ICU_FIRST_RISING_EDGE:
        {
            
            Timer1_enu_SetTCNT1(0);
    623e:	80 e0       	ldi	r24, 0x00	; 0
    6240:	90 e0       	ldi	r25, 0x00	; 0
    6242:	0e 94 ae 09 	call	0x135c	; 0x135c <Timer1_enu_SetTCNT1>

            LOC_au32_NumberOfOverflowsArray[0] = 0; //Resetting Overflow Counter
    6246:	10 92 03 02 	sts	0x0203, r1
    624a:	10 92 04 02 	sts	0x0204, r1
    624e:	10 92 05 02 	sts	0x0205, r1
    6252:	10 92 06 02 	sts	0x0206, r1

            Timer1_enu_SetInputCaptureEdge(TIMER1_ICU_FALLING_EDGE);            
    6256:	80 e0       	ldi	r24, 0x00	; 0
    6258:	0e 94 45 0b 	call	0x168a	; 0x168a <Timer1_enu_SetInputCaptureEdge>
            
            LOC_u8_State = ICU_FALLING_EDGE;  //Setting state machine to Falling edge
    625c:	83 e0       	ldi	r24, 0x03	; 3
    625e:	80 93 fa 01 	sts	0x01FA, r24
    6262:	37 c0       	rjmp	.+110    	; 0x62d2 <vid_CapturingFunction+0xd0>
        }

        case ICU_FALLING_EDGE:
        {
            
            Timer1_enu_GetICR1(&LOC_u32_TonCounts);
    6264:	8f ef       	ldi	r24, 0xFF	; 255
    6266:	91 e0       	ldi	r25, 0x01	; 1
    6268:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer1_enu_GetICR1>

            LOC_au32_NumberOfOverflowsArray[1] = LOC_au32_NumberOfOverflowsArray[0];
    626c:	80 91 03 02 	lds	r24, 0x0203
    6270:	90 91 04 02 	lds	r25, 0x0204
    6274:	a0 91 05 02 	lds	r26, 0x0205
    6278:	b0 91 06 02 	lds	r27, 0x0206
    627c:	80 93 07 02 	sts	0x0207, r24
    6280:	90 93 08 02 	sts	0x0208, r25
    6284:	a0 93 09 02 	sts	0x0209, r26
    6288:	b0 93 0a 02 	sts	0x020A, r27
            
            Timer1_enu_SetInputCaptureEdge(TIMER1_ICU_RISING_EDGE);
    628c:	81 e0       	ldi	r24, 0x01	; 1
    628e:	0e 94 45 0b 	call	0x168a	; 0x168a <Timer1_enu_SetInputCaptureEdge>
            
            LOC_u8_State = ICU_SECOND_RISING_EDGE; //Setting state machine to Falling edge
    6292:	82 e0       	ldi	r24, 0x02	; 2
    6294:	80 93 fa 01 	sts	0x01FA, r24
    6298:	1c c0       	rjmp	.+56     	; 0x62d2 <vid_CapturingFunction+0xd0>
            break;
        }
        
        case ICU_SECOND_RISING_EDGE:
        {
            Timer1_enu_GetICR1(&LOC_u32_PeriodCounts);
    629a:	8b ef       	ldi	r24, 0xFB	; 251
    629c:	91 e0       	ldi	r25, 0x01	; 1
    629e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer1_enu_GetICR1>
            
            LOC_au32_NumberOfOverflowsArray[2] = LOC_au32_NumberOfOverflowsArray[0];
    62a2:	80 91 03 02 	lds	r24, 0x0203
    62a6:	90 91 04 02 	lds	r25, 0x0204
    62aa:	a0 91 05 02 	lds	r26, 0x0205
    62ae:	b0 91 06 02 	lds	r27, 0x0206
    62b2:	80 93 0b 02 	sts	0x020B, r24
    62b6:	90 93 0c 02 	sts	0x020C, r25
    62ba:	a0 93 0d 02 	sts	0x020D, r26
    62be:	b0 93 0e 02 	sts	0x020E, r27

            #if ICU_MODE == ICU_SNGLE_CAPTURE_MODE
            Timer1_enu_DisableInterrupt(TIMER1_CAPTURE_EVENT_ISR);
    62c2:	80 e0       	ldi	r24, 0x00	; 0
    62c4:	0e 94 31 0a 	call	0x1462	; 0x1462 <Timer1_enu_DisableInterrupt>
            Timer1_enu_DisableInterrupt(TIMER1_OVERFLOW_ISR);
    62c8:	83 e0       	ldi	r24, 0x03	; 3
    62ca:	0e 94 31 0a 	call	0x1462	; 0x1462 <Timer1_enu_DisableInterrupt>
            LOC_u8_State = ICU_IDLE;
    62ce:	10 92 fa 01 	sts	0x01FA, r1
            break;
        }

    }
    
}
    62d2:	0f 90       	pop	r0
    62d4:	0f 90       	pop	r0
    62d6:	0f 90       	pop	r0
    62d8:	0f 90       	pop	r0
    62da:	cf 91       	pop	r28
    62dc:	df 91       	pop	r29
    62de:	08 95       	ret

000062e0 <vid_IncrementOverFlowCounter>:

void vid_IncrementOverFlowCounter()
{
    62e0:	df 93       	push	r29
    62e2:	cf 93       	push	r28
    62e4:	cd b7       	in	r28, 0x3d	; 61
    62e6:	de b7       	in	r29, 0x3e	; 62

    LOC_au32_NumberOfOverflowsArray[0]++;
    62e8:	80 91 03 02 	lds	r24, 0x0203
    62ec:	90 91 04 02 	lds	r25, 0x0204
    62f0:	a0 91 05 02 	lds	r26, 0x0205
    62f4:	b0 91 06 02 	lds	r27, 0x0206
    62f8:	01 96       	adiw	r24, 0x01	; 1
    62fa:	a1 1d       	adc	r26, r1
    62fc:	b1 1d       	adc	r27, r1
    62fe:	80 93 03 02 	sts	0x0203, r24
    6302:	90 93 04 02 	sts	0x0204, r25
    6306:	a0 93 05 02 	sts	0x0205, r26
    630a:	b0 93 06 02 	sts	0x0206, r27
    
}
    630e:	cf 91       	pop	r28
    6310:	df 91       	pop	r29
    6312:	08 95       	ret

00006314 <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    6314:	df 93       	push	r29
    6316:	cf 93       	push	r28
    6318:	0f 92       	push	r0
    631a:	cd b7       	in	r28, 0x3d	; 61
    631c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    631e:	81 e0       	ldi	r24, 0x01	; 1
    6320:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    6322:	80 e0       	ldi	r24, 0x00	; 0
    6324:	64 e0       	ldi	r22, 0x04	; 4
    6326:	41 e0       	ldi	r20, 0x01	; 1
    6328:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    632c:	80 e0       	ldi	r24, 0x00	; 0
    632e:	65 e0       	ldi	r22, 0x05	; 5
    6330:	41 e0       	ldi	r20, 0x01	; 1
    6332:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    6336:	80 e0       	ldi	r24, 0x00	; 0
    6338:	66 e0       	ldi	r22, 0x06	; 6
    633a:	41 e0       	ldi	r20, 0x01	; 1
    633c:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    6340:	80 e0       	ldi	r24, 0x00	; 0
    6342:	67 e0       	ldi	r22, 0x07	; 7
    6344:	41 e0       	ldi	r20, 0x01	; 1
    6346:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    634a:	81 e0       	ldi	r24, 0x01	; 1
    634c:	62 e0       	ldi	r22, 0x02	; 2
    634e:	41 e0       	ldi	r20, 0x01	; 1
    6350:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    6354:	81 e0       	ldi	r24, 0x01	; 1
    6356:	61 e0       	ldi	r22, 0x01	; 1
    6358:	41 e0       	ldi	r20, 0x01	; 1
    635a:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    635e:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    6360:	89 81       	ldd	r24, Y+1	; 0x01

}
    6362:	0f 90       	pop	r0
    6364:	cf 91       	pop	r28
    6366:	df 91       	pop	r29
    6368:	08 95       	ret

0000636a <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    636a:	df 93       	push	r29
    636c:	cf 93       	push	r28
    636e:	00 d0       	rcall	.+0      	; 0x6370 <Hexadecoder_enu_DisplayNum+0x6>
    6370:	cd b7       	in	r28, 0x3d	; 61
    6372:	de b7       	in	r29, 0x3e	; 62
    6374:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    6376:	81 e0       	ldi	r24, 0x01	; 1
    6378:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    637a:	8a 81       	ldd	r24, Y+2	; 0x02
    637c:	8a 30       	cpi	r24, 0x0A	; 10
    637e:	40 f5       	brcc	.+80     	; 0x63d0 <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    6380:	8a 81       	ldd	r24, Y+2	; 0x02
    6382:	98 2f       	mov	r25, r24
    6384:	91 70       	andi	r25, 0x01	; 1
    6386:	80 e0       	ldi	r24, 0x00	; 0
    6388:	64 e0       	ldi	r22, 0x04	; 4
    638a:	49 2f       	mov	r20, r25
    638c:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    6390:	8a 81       	ldd	r24, Y+2	; 0x02
    6392:	86 95       	lsr	r24
    6394:	98 2f       	mov	r25, r24
    6396:	91 70       	andi	r25, 0x01	; 1
    6398:	80 e0       	ldi	r24, 0x00	; 0
    639a:	65 e0       	ldi	r22, 0x05	; 5
    639c:	49 2f       	mov	r20, r25
    639e:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    63a2:	8a 81       	ldd	r24, Y+2	; 0x02
    63a4:	86 95       	lsr	r24
    63a6:	86 95       	lsr	r24
    63a8:	98 2f       	mov	r25, r24
    63aa:	91 70       	andi	r25, 0x01	; 1
    63ac:	80 e0       	ldi	r24, 0x00	; 0
    63ae:	66 e0       	ldi	r22, 0x06	; 6
    63b0:	49 2f       	mov	r20, r25
    63b2:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    63b6:	8a 81       	ldd	r24, Y+2	; 0x02
    63b8:	86 95       	lsr	r24
    63ba:	86 95       	lsr	r24
    63bc:	86 95       	lsr	r24
    63be:	98 2f       	mov	r25, r24
    63c0:	91 70       	andi	r25, 0x01	; 1
    63c2:	80 e0       	ldi	r24, 0x00	; 0
    63c4:	67 e0       	ldi	r22, 0x07	; 7
    63c6:	49 2f       	mov	r20, r25
    63c8:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    63cc:	19 82       	std	Y+1, r1	; 0x01
    63ce:	02 c0       	rjmp	.+4      	; 0x63d4 <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    63d0:	82 e0       	ldi	r24, 0x02	; 2
    63d2:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    63d4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    63d6:	0f 90       	pop	r0
    63d8:	0f 90       	pop	r0
    63da:	cf 91       	pop	r28
    63dc:	df 91       	pop	r29
    63de:	08 95       	ret

000063e0 <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    63e0:	df 93       	push	r29
    63e2:	cf 93       	push	r28
    63e4:	00 d0       	rcall	.+0      	; 0x63e6 <Hexadecoder_enu_EnableSSG+0x6>
    63e6:	00 d0       	rcall	.+0      	; 0x63e8 <Hexadecoder_enu_EnableSSG+0x8>
    63e8:	cd b7       	in	r28, 0x3d	; 61
    63ea:	de b7       	in	r29, 0x3e	; 62
    63ec:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    63ee:	81 e0       	ldi	r24, 0x01	; 1
    63f0:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    63f2:	8a 81       	ldd	r24, Y+2	; 0x02
    63f4:	28 2f       	mov	r18, r24
    63f6:	30 e0       	ldi	r19, 0x00	; 0
    63f8:	3c 83       	std	Y+4, r19	; 0x04
    63fa:	2b 83       	std	Y+3, r18	; 0x03
    63fc:	8b 81       	ldd	r24, Y+3	; 0x03
    63fe:	9c 81       	ldd	r25, Y+4	; 0x04
    6400:	00 97       	sbiw	r24, 0x00	; 0
    6402:	31 f0       	breq	.+12     	; 0x6410 <Hexadecoder_enu_EnableSSG+0x30>
    6404:	2b 81       	ldd	r18, Y+3	; 0x03
    6406:	3c 81       	ldd	r19, Y+4	; 0x04
    6408:	21 30       	cpi	r18, 0x01	; 1
    640a:	31 05       	cpc	r19, r1
    640c:	41 f0       	breq	.+16     	; 0x641e <Hexadecoder_enu_EnableSSG+0x3e>
    640e:	0e c0       	rjmp	.+28     	; 0x642c <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    6410:	81 e0       	ldi	r24, 0x01	; 1
    6412:	62 e0       	ldi	r22, 0x02	; 2
    6414:	41 e0       	ldi	r20, 0x01	; 1
    6416:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    641a:	19 82       	std	Y+1, r1	; 0x01
    641c:	09 c0       	rjmp	.+18     	; 0x6430 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    641e:	81 e0       	ldi	r24, 0x01	; 1
    6420:	61 e0       	ldi	r22, 0x01	; 1
    6422:	41 e0       	ldi	r20, 0x01	; 1
    6424:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    6428:	19 82       	std	Y+1, r1	; 0x01
    642a:	02 c0       	rjmp	.+4      	; 0x6430 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    642c:	82 e0       	ldi	r24, 0x02	; 2
    642e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    6430:	89 81       	ldd	r24, Y+1	; 0x01
}
    6432:	0f 90       	pop	r0
    6434:	0f 90       	pop	r0
    6436:	0f 90       	pop	r0
    6438:	0f 90       	pop	r0
    643a:	cf 91       	pop	r28
    643c:	df 91       	pop	r29
    643e:	08 95       	ret

00006440 <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    6440:	df 93       	push	r29
    6442:	cf 93       	push	r28
    6444:	00 d0       	rcall	.+0      	; 0x6446 <Hexadecoder_enu_DisableSSG+0x6>
    6446:	00 d0       	rcall	.+0      	; 0x6448 <Hexadecoder_enu_DisableSSG+0x8>
    6448:	cd b7       	in	r28, 0x3d	; 61
    644a:	de b7       	in	r29, 0x3e	; 62
    644c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    644e:	81 e0       	ldi	r24, 0x01	; 1
    6450:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    6452:	8a 81       	ldd	r24, Y+2	; 0x02
    6454:	28 2f       	mov	r18, r24
    6456:	30 e0       	ldi	r19, 0x00	; 0
    6458:	3c 83       	std	Y+4, r19	; 0x04
    645a:	2b 83       	std	Y+3, r18	; 0x03
    645c:	8b 81       	ldd	r24, Y+3	; 0x03
    645e:	9c 81       	ldd	r25, Y+4	; 0x04
    6460:	00 97       	sbiw	r24, 0x00	; 0
    6462:	31 f0       	breq	.+12     	; 0x6470 <Hexadecoder_enu_DisableSSG+0x30>
    6464:	2b 81       	ldd	r18, Y+3	; 0x03
    6466:	3c 81       	ldd	r19, Y+4	; 0x04
    6468:	21 30       	cpi	r18, 0x01	; 1
    646a:	31 05       	cpc	r19, r1
    646c:	41 f0       	breq	.+16     	; 0x647e <Hexadecoder_enu_DisableSSG+0x3e>
    646e:	0e c0       	rjmp	.+28     	; 0x648c <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    6470:	81 e0       	ldi	r24, 0x01	; 1
    6472:	62 e0       	ldi	r22, 0x02	; 2
    6474:	40 e0       	ldi	r20, 0x00	; 0
    6476:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    647a:	19 82       	std	Y+1, r1	; 0x01
    647c:	09 c0       	rjmp	.+18     	; 0x6490 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    647e:	81 e0       	ldi	r24, 0x01	; 1
    6480:	61 e0       	ldi	r22, 0x01	; 1
    6482:	40 e0       	ldi	r20, 0x00	; 0
    6484:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    6488:	19 82       	std	Y+1, r1	; 0x01
    648a:	02 c0       	rjmp	.+4      	; 0x6490 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    648c:	82 e0       	ldi	r24, 0x02	; 2
    648e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    6490:	89 81       	ldd	r24, Y+1	; 0x01
}
    6492:	0f 90       	pop	r0
    6494:	0f 90       	pop	r0
    6496:	0f 90       	pop	r0
    6498:	0f 90       	pop	r0
    649a:	cf 91       	pop	r28
    649c:	df 91       	pop	r29
    649e:	08 95       	ret

000064a0 <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    64a0:	df 93       	push	r29
    64a2:	cf 93       	push	r28
    64a4:	0f 92       	push	r0
    64a6:	cd b7       	in	r28, 0x3d	; 61
    64a8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    64aa:	81 e0       	ldi	r24, 0x01	; 1
    64ac:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    64ae:	81 e0       	ldi	r24, 0x01	; 1
    64b0:	62 e0       	ldi	r22, 0x02	; 2
    64b2:	40 e0       	ldi	r20, 0x00	; 0
    64b4:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    64b8:	81 e0       	ldi	r24, 0x01	; 1
    64ba:	61 e0       	ldi	r22, 0x01	; 1
    64bc:	40 e0       	ldi	r20, 0x00	; 0
    64be:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    64c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    64c4:	0f 90       	pop	r0
    64c6:	cf 91       	pop	r28
    64c8:	df 91       	pop	r29
    64ca:	08 95       	ret

000064cc <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    64cc:	df 93       	push	r29
    64ce:	cf 93       	push	r28
    64d0:	00 d0       	rcall	.+0      	; 0x64d2 <Buzzer_enu_Initialization+0x6>
    64d2:	cd b7       	in	r28, 0x3d	; 61
    64d4:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    64d6:	81 e0       	ldi	r24, 0x01	; 1
    64d8:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    64da:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    64dc:	19 82       	std	Y+1, r1	; 0x01
    64de:	31 c0       	rjmp	.+98     	; 0x6542 <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    64e0:	89 81       	ldd	r24, Y+1	; 0x01
    64e2:	88 2f       	mov	r24, r24
    64e4:	90 e0       	ldi	r25, 0x00	; 0
    64e6:	88 0f       	add	r24, r24
    64e8:	99 1f       	adc	r25, r25
    64ea:	fc 01       	movw	r30, r24
    64ec:	ec 55       	subi	r30, 0x5C	; 92
    64ee:	fe 4f       	sbci	r31, 0xFE	; 254
    64f0:	20 81       	ld	r18, Z
    64f2:	89 81       	ldd	r24, Y+1	; 0x01
    64f4:	88 2f       	mov	r24, r24
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	88 0f       	add	r24, r24
    64fa:	99 1f       	adc	r25, r25
    64fc:	fc 01       	movw	r30, r24
    64fe:	eb 55       	subi	r30, 0x5B	; 91
    6500:	fe 4f       	sbci	r31, 0xFE	; 254
    6502:	90 81       	ld	r25, Z
    6504:	82 2f       	mov	r24, r18
    6506:	69 2f       	mov	r22, r25
    6508:	41 e0       	ldi	r20, 0x01	; 1
    650a:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    650e:	89 81       	ldd	r24, Y+1	; 0x01
    6510:	88 2f       	mov	r24, r24
    6512:	90 e0       	ldi	r25, 0x00	; 0
    6514:	88 0f       	add	r24, r24
    6516:	99 1f       	adc	r25, r25
    6518:	fc 01       	movw	r30, r24
    651a:	ec 55       	subi	r30, 0x5C	; 92
    651c:	fe 4f       	sbci	r31, 0xFE	; 254
    651e:	20 81       	ld	r18, Z
    6520:	89 81       	ldd	r24, Y+1	; 0x01
    6522:	88 2f       	mov	r24, r24
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	88 0f       	add	r24, r24
    6528:	99 1f       	adc	r25, r25
    652a:	fc 01       	movw	r30, r24
    652c:	eb 55       	subi	r30, 0x5B	; 91
    652e:	fe 4f       	sbci	r31, 0xFE	; 254
    6530:	90 81       	ld	r25, Z
    6532:	82 2f       	mov	r24, r18
    6534:	69 2f       	mov	r22, r25
    6536:	40 e0       	ldi	r20, 0x00	; 0
    6538:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    653c:	89 81       	ldd	r24, Y+1	; 0x01
    653e:	8f 5f       	subi	r24, 0xFF	; 255
    6540:	89 83       	std	Y+1, r24	; 0x01
    6542:	90 91 a3 01 	lds	r25, 0x01A3
    6546:	89 81       	ldd	r24, Y+1	; 0x01
    6548:	89 17       	cp	r24, r25
    654a:	50 f2       	brcs	.-108    	; 0x64e0 <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    654c:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    654e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6550:	0f 90       	pop	r0
    6552:	0f 90       	pop	r0
    6554:	cf 91       	pop	r28
    6556:	df 91       	pop	r29
    6558:	08 95       	ret

0000655a <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    655a:	df 93       	push	r29
    655c:	cf 93       	push	r28
    655e:	00 d0       	rcall	.+0      	; 0x6560 <Buzzer_enu_TuronOnBuzzer+0x6>
    6560:	cd b7       	in	r28, 0x3d	; 61
    6562:	de b7       	in	r29, 0x3e	; 62
    6564:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    6566:	81 e0       	ldi	r24, 0x01	; 1
    6568:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    656a:	90 91 a3 01 	lds	r25, 0x01A3
    656e:	8a 81       	ldd	r24, Y+2	; 0x02
    6570:	89 17       	cp	r24, r25
    6572:	c8 f4       	brcc	.+50     	; 0x65a6 <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    6574:	8a 81       	ldd	r24, Y+2	; 0x02
    6576:	88 2f       	mov	r24, r24
    6578:	90 e0       	ldi	r25, 0x00	; 0
    657a:	88 0f       	add	r24, r24
    657c:	99 1f       	adc	r25, r25
    657e:	fc 01       	movw	r30, r24
    6580:	ec 55       	subi	r30, 0x5C	; 92
    6582:	fe 4f       	sbci	r31, 0xFE	; 254
    6584:	20 81       	ld	r18, Z
    6586:	8a 81       	ldd	r24, Y+2	; 0x02
    6588:	88 2f       	mov	r24, r24
    658a:	90 e0       	ldi	r25, 0x00	; 0
    658c:	88 0f       	add	r24, r24
    658e:	99 1f       	adc	r25, r25
    6590:	fc 01       	movw	r30, r24
    6592:	eb 55       	subi	r30, 0x5B	; 91
    6594:	fe 4f       	sbci	r31, 0xFE	; 254
    6596:	90 81       	ld	r25, Z
    6598:	82 2f       	mov	r24, r18
    659a:	69 2f       	mov	r22, r25
    659c:	41 e0       	ldi	r20, 0x01	; 1
    659e:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    65a2:	89 83       	std	Y+1, r24	; 0x01
    65a4:	02 c0       	rjmp	.+4      	; 0x65aa <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    65a6:	82 e0       	ldi	r24, 0x02	; 2
    65a8:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    65aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    65ac:	0f 90       	pop	r0
    65ae:	0f 90       	pop	r0
    65b0:	cf 91       	pop	r28
    65b2:	df 91       	pop	r29
    65b4:	08 95       	ret

000065b6 <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    65b6:	df 93       	push	r29
    65b8:	cf 93       	push	r28
    65ba:	00 d0       	rcall	.+0      	; 0x65bc <Buzzer_enu_TuronOffBuzzer+0x6>
    65bc:	cd b7       	in	r28, 0x3d	; 61
    65be:	de b7       	in	r29, 0x3e	; 62
    65c0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    65c2:	81 e0       	ldi	r24, 0x01	; 1
    65c4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    65c6:	90 91 a3 01 	lds	r25, 0x01A3
    65ca:	8a 81       	ldd	r24, Y+2	; 0x02
    65cc:	89 17       	cp	r24, r25
    65ce:	c8 f4       	brcc	.+50     	; 0x6602 <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    65d0:	8a 81       	ldd	r24, Y+2	; 0x02
    65d2:	88 2f       	mov	r24, r24
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	88 0f       	add	r24, r24
    65d8:	99 1f       	adc	r25, r25
    65da:	fc 01       	movw	r30, r24
    65dc:	ec 55       	subi	r30, 0x5C	; 92
    65de:	fe 4f       	sbci	r31, 0xFE	; 254
    65e0:	20 81       	ld	r18, Z
    65e2:	8a 81       	ldd	r24, Y+2	; 0x02
    65e4:	88 2f       	mov	r24, r24
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	88 0f       	add	r24, r24
    65ea:	99 1f       	adc	r25, r25
    65ec:	fc 01       	movw	r30, r24
    65ee:	eb 55       	subi	r30, 0x5B	; 91
    65f0:	fe 4f       	sbci	r31, 0xFE	; 254
    65f2:	90 81       	ld	r25, Z
    65f4:	82 2f       	mov	r24, r18
    65f6:	69 2f       	mov	r22, r25
    65f8:	40 e0       	ldi	r20, 0x00	; 0
    65fa:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
    65fe:	89 83       	std	Y+1, r24	; 0x01
    6600:	02 c0       	rjmp	.+4      	; 0x6606 <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    6602:	82 e0       	ldi	r24, 0x02	; 2
    6604:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    6606:	89 81       	ldd	r24, Y+1	; 0x01
}
    6608:	0f 90       	pop	r0
    660a:	0f 90       	pop	r0
    660c:	cf 91       	pop	r28
    660e:	df 91       	pop	r29
    6610:	08 95       	ret

00006612 <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    6612:	df 93       	push	r29
    6614:	cf 93       	push	r28
    6616:	00 d0       	rcall	.+0      	; 0x6618 <Buzzer_enu_TurnOnAllBuzzers+0x6>
    6618:	cd b7       	in	r28, 0x3d	; 61
    661a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    661c:	81 e0       	ldi	r24, 0x01	; 1
    661e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    6620:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    6622:	19 82       	std	Y+1, r1	; 0x01
    6624:	1a c0       	rjmp	.+52     	; 0x665a <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    6626:	89 81       	ldd	r24, Y+1	; 0x01
    6628:	88 2f       	mov	r24, r24
    662a:	90 e0       	ldi	r25, 0x00	; 0
    662c:	88 0f       	add	r24, r24
    662e:	99 1f       	adc	r25, r25
    6630:	fc 01       	movw	r30, r24
    6632:	ec 55       	subi	r30, 0x5C	; 92
    6634:	fe 4f       	sbci	r31, 0xFE	; 254
    6636:	20 81       	ld	r18, Z
    6638:	89 81       	ldd	r24, Y+1	; 0x01
    663a:	88 2f       	mov	r24, r24
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	88 0f       	add	r24, r24
    6640:	99 1f       	adc	r25, r25
    6642:	fc 01       	movw	r30, r24
    6644:	eb 55       	subi	r30, 0x5B	; 91
    6646:	fe 4f       	sbci	r31, 0xFE	; 254
    6648:	90 81       	ld	r25, Z
    664a:	82 2f       	mov	r24, r18
    664c:	69 2f       	mov	r22, r25
    664e:	41 e0       	ldi	r20, 0x01	; 1
    6650:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    6654:	89 81       	ldd	r24, Y+1	; 0x01
    6656:	8f 5f       	subi	r24, 0xFF	; 255
    6658:	89 83       	std	Y+1, r24	; 0x01
    665a:	90 91 a3 01 	lds	r25, 0x01A3
    665e:	89 81       	ldd	r24, Y+1	; 0x01
    6660:	89 17       	cp	r24, r25
    6662:	08 f3       	brcs	.-62     	; 0x6626 <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    6664:	82 e0       	ldi	r24, 0x02	; 2
    6666:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    6668:	8a 81       	ldd	r24, Y+2	; 0x02
}
    666a:	0f 90       	pop	r0
    666c:	0f 90       	pop	r0
    666e:	cf 91       	pop	r28
    6670:	df 91       	pop	r29
    6672:	08 95       	ret

00006674 <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    6674:	df 93       	push	r29
    6676:	cf 93       	push	r28
    6678:	00 d0       	rcall	.+0      	; 0x667a <Buzzer_enu_TurnOffAllBuzzers+0x6>
    667a:	cd b7       	in	r28, 0x3d	; 61
    667c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    667e:	81 e0       	ldi	r24, 0x01	; 1
    6680:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    6682:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    6684:	19 82       	std	Y+1, r1	; 0x01
    6686:	1a c0       	rjmp	.+52     	; 0x66bc <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    6688:	89 81       	ldd	r24, Y+1	; 0x01
    668a:	88 2f       	mov	r24, r24
    668c:	90 e0       	ldi	r25, 0x00	; 0
    668e:	88 0f       	add	r24, r24
    6690:	99 1f       	adc	r25, r25
    6692:	fc 01       	movw	r30, r24
    6694:	ec 55       	subi	r30, 0x5C	; 92
    6696:	fe 4f       	sbci	r31, 0xFE	; 254
    6698:	20 81       	ld	r18, Z
    669a:	89 81       	ldd	r24, Y+1	; 0x01
    669c:	88 2f       	mov	r24, r24
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	88 0f       	add	r24, r24
    66a2:	99 1f       	adc	r25, r25
    66a4:	fc 01       	movw	r30, r24
    66a6:	eb 55       	subi	r30, 0x5B	; 91
    66a8:	fe 4f       	sbci	r31, 0xFE	; 254
    66aa:	90 81       	ld	r25, Z
    66ac:	82 2f       	mov	r24, r18
    66ae:	69 2f       	mov	r22, r25
    66b0:	40 e0       	ldi	r20, 0x00	; 0
    66b2:	0e 94 37 1c 	call	0x386e	; 0x386e <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    66b6:	89 81       	ldd	r24, Y+1	; 0x01
    66b8:	8f 5f       	subi	r24, 0xFF	; 255
    66ba:	89 83       	std	Y+1, r24	; 0x01
    66bc:	90 91 a3 01 	lds	r25, 0x01A3
    66c0:	89 81       	ldd	r24, Y+1	; 0x01
    66c2:	89 17       	cp	r24, r25
    66c4:	08 f3       	brcs	.-62     	; 0x6688 <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    66c6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    66c8:	0f 90       	pop	r0
    66ca:	0f 90       	pop	r0
    66cc:	cf 91       	pop	r28
    66ce:	df 91       	pop	r29
    66d0:	08 95       	ret

000066d2 <testing>:
#include <util/delay.h>
#include "../MCAL/Timer1/Timer1_Interface.h"
#define F_CPU 16000000UL

void testing(void* pa)
{
    66d2:	df 93       	push	r29
    66d4:	cf 93       	push	r28
    66d6:	00 d0       	rcall	.+0      	; 0x66d8 <testing+0x6>
    66d8:	cd b7       	in	r28, 0x3d	; 61
    66da:	de b7       	in	r29, 0x3e	; 62
    66dc:	9a 83       	std	Y+2, r25	; 0x02
    66de:	89 83       	std	Y+1, r24	; 0x01
	DIO_enu_TogglePinValue(DIO_PIN_GROUP_C, DIO_PIN_1);
    66e0:	82 e0       	ldi	r24, 0x02	; 2
    66e2:	61 e0       	ldi	r22, 0x01	; 1
    66e4:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <DIO_enu_TogglePinValue>
}
    66e8:	0f 90       	pop	r0
    66ea:	0f 90       	pop	r0
    66ec:	cf 91       	pop	r28
    66ee:	df 91       	pop	r29
    66f0:	08 95       	ret

000066f2 <main>:

void main()
{
    66f2:	0f 93       	push	r16
    66f4:	df 93       	push	r29
    66f6:	cf 93       	push	r28
    66f8:	cd b7       	in	r28, 0x3d	; 61
    66fa:	de b7       	in	r29, 0x3e	; 62
    66fc:	61 97       	sbiw	r28, 0x11	; 17
    66fe:	0f b6       	in	r0, 0x3f	; 63
    6700:	f8 94       	cli
    6702:	de bf       	out	0x3e, r29	; 62
    6704:	0f be       	out	0x3f, r0	; 63
    6706:	cd bf       	out	0x3d, r28	; 61
	//Variables	
	f32 Local_af32_SignalsParameters[2] = {0}; //An array to place signal parameters in [0] Period and [1] Duty
    6708:	88 e0       	ldi	r24, 0x08	; 8
    670a:	fe 01       	movw	r30, r28
    670c:	3a 96       	adiw	r30, 0x0a	; 10
    670e:	df 01       	movw	r26, r30
    6710:	98 2f       	mov	r25, r24
    6712:	1d 92       	st	X+, r1
    6714:	9a 95       	dec	r25
    6716:	e9 f7       	brne	.-6      	; 0x6712 <main+0x20>
	f32 Local_f32_FrequencyHz;
	f32 Local_f32_DutyPercentage;
	u8 Local_u8_SystemState = 0xff;
    6718:	8f ef       	ldi	r24, 0xFF	; 255
    671a:	89 83       	std	Y+1, r24	; 0x01



	//Initializations
	LCD_enu_Initialization();
    671c:	0e 94 e7 23 	call	0x47ce	; 0x47ce <LCD_enu_Initialization>
	
	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_C, DIO_PIN_1, DIO_PIN_WRITE);
    6720:	82 e0       	ldi	r24, 0x02	; 2
    6722:	61 e0       	ldi	r22, 0x01	; 1
    6724:	41 e0       	ldi	r20, 0x01	; 1
    6726:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_enu_SetPinDiretion>

	ICU_enu_Initialization();
    672a:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <ICU_enu_Initialization>


 	// Printing the display screen
	LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_1,LCD_PAGE_1);
    672e:	81 e0       	ldi	r24, 0x01	; 1
    6730:	61 e0       	ldi	r22, 0x01	; 1
    6732:	41 e0       	ldi	r20, 0x01	; 1
    6734:	0e 94 76 25 	call	0x4aec	; 0x4aec <LCD_enu_GoToPosition>
	LCD_enu_SendString("Freq: ");
    6738:	80 e6       	ldi	r24, 0x60	; 96
    673a:	90 e0       	ldi	r25, 0x00	; 0
    673c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <LCD_enu_SendString>
	LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_15,LCD_PAGE_1);
    6740:	81 e0       	ldi	r24, 0x01	; 1
    6742:	6f e0       	ldi	r22, 0x0F	; 15
    6744:	41 e0       	ldi	r20, 0x01	; 1
    6746:	0e 94 76 25 	call	0x4aec	; 0x4aec <LCD_enu_GoToPosition>
	LCD_enu_SendString("Hz");
    674a:	87 e6       	ldi	r24, 0x67	; 103
    674c:	90 e0       	ldi	r25, 0x00	; 0
    674e:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <LCD_enu_SendString>

	LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_1,LCD_PAGE_1);
    6752:	82 e0       	ldi	r24, 0x02	; 2
    6754:	61 e0       	ldi	r22, 0x01	; 1
    6756:	41 e0       	ldi	r20, 0x01	; 1
    6758:	0e 94 76 25 	call	0x4aec	; 0x4aec <LCD_enu_GoToPosition>
	LCD_enu_SendString("Duty: ");
    675c:	8a e6       	ldi	r24, 0x6A	; 106
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <LCD_enu_SendString>
	LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_15,LCD_PAGE_1);
    6764:	82 e0       	ldi	r24, 0x02	; 2
    6766:	6f e0       	ldi	r22, 0x0F	; 15
    6768:	41 e0       	ldi	r20, 0x01	; 1
    676a:	0e 94 76 25 	call	0x4aec	; 0x4aec <LCD_enu_GoToPosition>
	LCD_enu_SendString("%");
    676e:	81 e7       	ldi	r24, 0x71	; 113
    6770:	90 e0       	ldi	r25, 0x00	; 0
    6772:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <LCD_enu_SendString>



	// Enabling GIE
	SREG_vid_EnableBitI();
    6776:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <SREG_vid_EnableBitI>

	



	ICU_enu_StartCapture();
    677a:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <ICU_enu_StartCapture>
	//Superloop
	while(1)
	{

		ICU_enu_CalculateParameters(Local_af32_SignalsParameters); //Calculating Parameters
    677e:	ce 01       	movw	r24, r28
    6780:	0a 96       	adiw	r24, 0x0a	; 10
    6782:	0e 94 a1 2f 	call	0x5f42	; 0x5f42 <ICU_enu_CalculateParameters>
		
		Local_f32_FrequencyHz = Local_af32_SignalsParameters[0];
    6786:	8a 85       	ldd	r24, Y+10	; 0x0a
    6788:	9b 85       	ldd	r25, Y+11	; 0x0b
    678a:	ac 85       	ldd	r26, Y+12	; 0x0c
    678c:	bd 85       	ldd	r27, Y+13	; 0x0d
    678e:	8e 83       	std	Y+6, r24	; 0x06
    6790:	9f 83       	std	Y+7, r25	; 0x07
    6792:	a8 87       	std	Y+8, r26	; 0x08
    6794:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32_DutyPercentage = Local_af32_SignalsParameters[1];
    6796:	8e 85       	ldd	r24, Y+14	; 0x0e
    6798:	9f 85       	ldd	r25, Y+15	; 0x0f
    679a:	a8 89       	ldd	r26, Y+16	; 0x10
    679c:	b9 89       	ldd	r27, Y+17	; 0x11
    679e:	8a 83       	std	Y+2, r24	; 0x02
    67a0:	9b 83       	std	Y+3, r25	; 0x03
    67a2:	ac 83       	std	Y+4, r26	; 0x04
    67a4:	bd 83       	std	Y+5, r27	; 0x05
		
		LCD_enu_WriteFloatNum(Local_af32_SignalsParameters[0], LCD_ROW_1, LCD_COLUMN_8, LCD_PAGE_1);
    67a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    67a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    67aa:	ac 85       	ldd	r26, Y+12	; 0x0c
    67ac:	bd 85       	ldd	r27, Y+13	; 0x0d
    67ae:	bc 01       	movw	r22, r24
    67b0:	cd 01       	movw	r24, r26
    67b2:	41 e0       	ldi	r20, 0x01	; 1
    67b4:	28 e0       	ldi	r18, 0x08	; 8
    67b6:	01 e0       	ldi	r16, 0x01	; 1
    67b8:	0e 94 15 28 	call	0x502a	; 0x502a <LCD_enu_WriteFloatNum>
		LCD_enu_WriteFloatNum(Local_f32_DutyPercentage,LCD_ROW_2,LCD_COLUMN_8,LCD_PAGE_1);	
    67bc:	8a 81       	ldd	r24, Y+2	; 0x02
    67be:	9b 81       	ldd	r25, Y+3	; 0x03
    67c0:	ac 81       	ldd	r26, Y+4	; 0x04
    67c2:	bd 81       	ldd	r27, Y+5	; 0x05
    67c4:	bc 01       	movw	r22, r24
    67c6:	cd 01       	movw	r24, r26
    67c8:	42 e0       	ldi	r20, 0x02	; 2
    67ca:	28 e0       	ldi	r18, 0x08	; 8
    67cc:	01 e0       	ldi	r16, 0x01	; 1
    67ce:	0e 94 15 28 	call	0x502a	; 0x502a <LCD_enu_WriteFloatNum>
    67d2:	d5 cf       	rjmp	.-86     	; 0x677e <main+0x8c>

000067d4 <__mulsi3>:
    67d4:	62 9f       	mul	r22, r18
    67d6:	d0 01       	movw	r26, r0
    67d8:	73 9f       	mul	r23, r19
    67da:	f0 01       	movw	r30, r0
    67dc:	82 9f       	mul	r24, r18
    67de:	e0 0d       	add	r30, r0
    67e0:	f1 1d       	adc	r31, r1
    67e2:	64 9f       	mul	r22, r20
    67e4:	e0 0d       	add	r30, r0
    67e6:	f1 1d       	adc	r31, r1
    67e8:	92 9f       	mul	r25, r18
    67ea:	f0 0d       	add	r31, r0
    67ec:	83 9f       	mul	r24, r19
    67ee:	f0 0d       	add	r31, r0
    67f0:	74 9f       	mul	r23, r20
    67f2:	f0 0d       	add	r31, r0
    67f4:	65 9f       	mul	r22, r21
    67f6:	f0 0d       	add	r31, r0
    67f8:	99 27       	eor	r25, r25
    67fa:	72 9f       	mul	r23, r18
    67fc:	b0 0d       	add	r27, r0
    67fe:	e1 1d       	adc	r30, r1
    6800:	f9 1f       	adc	r31, r25
    6802:	63 9f       	mul	r22, r19
    6804:	b0 0d       	add	r27, r0
    6806:	e1 1d       	adc	r30, r1
    6808:	f9 1f       	adc	r31, r25
    680a:	bd 01       	movw	r22, r26
    680c:	cf 01       	movw	r24, r30
    680e:	11 24       	eor	r1, r1
    6810:	08 95       	ret

00006812 <__udivmodsi4>:
    6812:	a1 e2       	ldi	r26, 0x21	; 33
    6814:	1a 2e       	mov	r1, r26
    6816:	aa 1b       	sub	r26, r26
    6818:	bb 1b       	sub	r27, r27
    681a:	fd 01       	movw	r30, r26
    681c:	0d c0       	rjmp	.+26     	; 0x6838 <__udivmodsi4_ep>

0000681e <__udivmodsi4_loop>:
    681e:	aa 1f       	adc	r26, r26
    6820:	bb 1f       	adc	r27, r27
    6822:	ee 1f       	adc	r30, r30
    6824:	ff 1f       	adc	r31, r31
    6826:	a2 17       	cp	r26, r18
    6828:	b3 07       	cpc	r27, r19
    682a:	e4 07       	cpc	r30, r20
    682c:	f5 07       	cpc	r31, r21
    682e:	20 f0       	brcs	.+8      	; 0x6838 <__udivmodsi4_ep>
    6830:	a2 1b       	sub	r26, r18
    6832:	b3 0b       	sbc	r27, r19
    6834:	e4 0b       	sbc	r30, r20
    6836:	f5 0b       	sbc	r31, r21

00006838 <__udivmodsi4_ep>:
    6838:	66 1f       	adc	r22, r22
    683a:	77 1f       	adc	r23, r23
    683c:	88 1f       	adc	r24, r24
    683e:	99 1f       	adc	r25, r25
    6840:	1a 94       	dec	r1
    6842:	69 f7       	brne	.-38     	; 0x681e <__udivmodsi4_loop>
    6844:	60 95       	com	r22
    6846:	70 95       	com	r23
    6848:	80 95       	com	r24
    684a:	90 95       	com	r25
    684c:	9b 01       	movw	r18, r22
    684e:	ac 01       	movw	r20, r24
    6850:	bd 01       	movw	r22, r26
    6852:	cf 01       	movw	r24, r30
    6854:	08 95       	ret

00006856 <__divmodsi4>:
    6856:	97 fb       	bst	r25, 7
    6858:	09 2e       	mov	r0, r25
    685a:	05 26       	eor	r0, r21
    685c:	0e d0       	rcall	.+28     	; 0x687a <__divmodsi4_neg1>
    685e:	57 fd       	sbrc	r21, 7
    6860:	04 d0       	rcall	.+8      	; 0x686a <__divmodsi4_neg2>
    6862:	d7 df       	rcall	.-82     	; 0x6812 <__udivmodsi4>
    6864:	0a d0       	rcall	.+20     	; 0x687a <__divmodsi4_neg1>
    6866:	00 1c       	adc	r0, r0
    6868:	38 f4       	brcc	.+14     	; 0x6878 <__divmodsi4_exit>

0000686a <__divmodsi4_neg2>:
    686a:	50 95       	com	r21
    686c:	40 95       	com	r20
    686e:	30 95       	com	r19
    6870:	21 95       	neg	r18
    6872:	3f 4f       	sbci	r19, 0xFF	; 255
    6874:	4f 4f       	sbci	r20, 0xFF	; 255
    6876:	5f 4f       	sbci	r21, 0xFF	; 255

00006878 <__divmodsi4_exit>:
    6878:	08 95       	ret

0000687a <__divmodsi4_neg1>:
    687a:	f6 f7       	brtc	.-4      	; 0x6878 <__divmodsi4_exit>
    687c:	90 95       	com	r25
    687e:	80 95       	com	r24
    6880:	70 95       	com	r23
    6882:	61 95       	neg	r22
    6884:	7f 4f       	sbci	r23, 0xFF	; 255
    6886:	8f 4f       	sbci	r24, 0xFF	; 255
    6888:	9f 4f       	sbci	r25, 0xFF	; 255
    688a:	08 95       	ret

0000688c <__prologue_saves__>:
    688c:	2f 92       	push	r2
    688e:	3f 92       	push	r3
    6890:	4f 92       	push	r4
    6892:	5f 92       	push	r5
    6894:	6f 92       	push	r6
    6896:	7f 92       	push	r7
    6898:	8f 92       	push	r8
    689a:	9f 92       	push	r9
    689c:	af 92       	push	r10
    689e:	bf 92       	push	r11
    68a0:	cf 92       	push	r12
    68a2:	df 92       	push	r13
    68a4:	ef 92       	push	r14
    68a6:	ff 92       	push	r15
    68a8:	0f 93       	push	r16
    68aa:	1f 93       	push	r17
    68ac:	cf 93       	push	r28
    68ae:	df 93       	push	r29
    68b0:	cd b7       	in	r28, 0x3d	; 61
    68b2:	de b7       	in	r29, 0x3e	; 62
    68b4:	ca 1b       	sub	r28, r26
    68b6:	db 0b       	sbc	r29, r27
    68b8:	0f b6       	in	r0, 0x3f	; 63
    68ba:	f8 94       	cli
    68bc:	de bf       	out	0x3e, r29	; 62
    68be:	0f be       	out	0x3f, r0	; 63
    68c0:	cd bf       	out	0x3d, r28	; 61
    68c2:	09 94       	ijmp

000068c4 <__epilogue_restores__>:
    68c4:	2a 88       	ldd	r2, Y+18	; 0x12
    68c6:	39 88       	ldd	r3, Y+17	; 0x11
    68c8:	48 88       	ldd	r4, Y+16	; 0x10
    68ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    68cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    68ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    68d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    68d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    68d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    68d6:	b9 84       	ldd	r11, Y+9	; 0x09
    68d8:	c8 84       	ldd	r12, Y+8	; 0x08
    68da:	df 80       	ldd	r13, Y+7	; 0x07
    68dc:	ee 80       	ldd	r14, Y+6	; 0x06
    68de:	fd 80       	ldd	r15, Y+5	; 0x05
    68e0:	0c 81       	ldd	r16, Y+4	; 0x04
    68e2:	1b 81       	ldd	r17, Y+3	; 0x03
    68e4:	aa 81       	ldd	r26, Y+2	; 0x02
    68e6:	b9 81       	ldd	r27, Y+1	; 0x01
    68e8:	ce 0f       	add	r28, r30
    68ea:	d1 1d       	adc	r29, r1
    68ec:	0f b6       	in	r0, 0x3f	; 63
    68ee:	f8 94       	cli
    68f0:	de bf       	out	0x3e, r29	; 62
    68f2:	0f be       	out	0x3f, r0	; 63
    68f4:	cd bf       	out	0x3d, r28	; 61
    68f6:	ed 01       	movw	r28, r26
    68f8:	08 95       	ret

000068fa <_exit>:
    68fa:	f8 94       	cli

000068fc <__stop_program>:
    68fc:	ff cf       	rjmp	.-2      	; 0x68fc <__stop_program>
