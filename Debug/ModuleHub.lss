
ModuleHub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  00003a48  00003adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001aa  008001aa  00003c26  2**0
                  ALLOC
  3 .stab         00004e00  00000000  00000000  00003c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000021b1  00000000  00000000  00008a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000abd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f1  00000000  00000000  0000ad79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228e  00000000  00000000  0000af6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ca  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d4  00000000  00000000  0000e4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f598  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c9  00000000  00000000  0000f758  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ea  00000000  00000000  0000fa21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001030b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__vector_1>
       8:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__vector_2>
       c:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <main>
      8a:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <__epilogue_restores__+0x18>

000007b2 <__fixsfsi>:
     7b2:	ac e0       	ldi	r26, 0x0C	; 12
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__prologue_saves__+0x20>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	be 01       	movw	r22, r28
     7cc:	6b 5f       	subi	r22, 0xFB	; 251
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f1       	breq	.+88     	; 0x832 <__fixsfsi+0x80>
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	50 f1       	brcs	.+84     	; 0x832 <__fixsfsi+0x80>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	21 f4       	brne	.+8      	; 0x7ea <__fixsfsi+0x38>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	88 23       	and	r24, r24
     7e6:	51 f1       	breq	.+84     	; 0x83c <__fixsfsi+0x8a>
     7e8:	2e c0       	rjmp	.+92     	; 0x846 <__fixsfsi+0x94>
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	38 85       	ldd	r19, Y+8	; 0x08
     7ee:	37 fd       	sbrc	r19, 7
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <__fixsfsi+0x80>
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	2f 31       	cpi	r18, 0x1F	; 31
     7f6:	31 05       	cpc	r19, r1
     7f8:	1c f0       	brlt	.+6      	; 0x800 <__fixsfsi+0x4e>
     7fa:	66 23       	and	r22, r22
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__fixsfsi+0x8a>
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <__fixsfsi+0x94>
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	29 85       	ldd	r18, Y+9	; 0x09
     80a:	3a 85       	ldd	r19, Y+10	; 0x0a
     80c:	4b 85       	ldd	r20, Y+11	; 0x0b
     80e:	5c 85       	ldd	r21, Y+12	; 0x0c
     810:	04 c0       	rjmp	.+8      	; 0x81a <__fixsfsi+0x68>
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	37 95       	ror	r19
     818:	27 95       	ror	r18
     81a:	8a 95       	dec	r24
     81c:	d2 f7       	brpl	.-12     	; 0x812 <__fixsfsi+0x60>
     81e:	66 23       	and	r22, r22
     820:	b1 f0       	breq	.+44     	; 0x84e <__fixsfsi+0x9c>
     822:	50 95       	com	r21
     824:	40 95       	com	r20
     826:	30 95       	com	r19
     828:	21 95       	neg	r18
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	0e c0       	rjmp	.+28     	; 0x84e <__fixsfsi+0x9c>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__fixsfsi+0x9c>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f ef       	ldi	r20, 0xFF	; 255
     842:	5f e7       	ldi	r21, 0x7F	; 127
     844:	04 c0       	rjmp	.+8      	; 0x84e <__fixsfsi+0x9c>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e8       	ldi	r21, 0x80	; 128
     84e:	b9 01       	movw	r22, r18
     850:	ca 01       	movw	r24, r20
     852:	2c 96       	adiw	r28, 0x0c	; 12
     854:	e2 e0       	ldi	r30, 0x02	; 2
     856:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__epilogue_restores__+0x20>

0000085a <__floatunsisf>:
     85a:	a8 e0       	ldi	r26, 0x08	; 8
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e3 e3       	ldi	r30, 0x33	; 51
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__prologue_saves__+0x10>
     866:	7b 01       	movw	r14, r22
     868:	8c 01       	movw	r16, r24
     86a:	61 15       	cp	r22, r1
     86c:	71 05       	cpc	r23, r1
     86e:	81 05       	cpc	r24, r1
     870:	91 05       	cpc	r25, r1
     872:	19 f4       	brne	.+6      	; 0x87a <__stack+0x1b>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	60 c0       	rjmp	.+192    	; 0x93a <__stack+0xdb>
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	c8 2e       	mov	r12, r24
     882:	d1 2c       	mov	r13, r1
     884:	dc 82       	std	Y+4, r13	; 0x04
     886:	cb 82       	std	Y+3, r12	; 0x03
     888:	ed 82       	std	Y+5, r14	; 0x05
     88a:	fe 82       	std	Y+6, r15	; 0x06
     88c:	0f 83       	std	Y+7, r16	; 0x07
     88e:	18 87       	std	Y+8, r17	; 0x08
     890:	c8 01       	movw	r24, r16
     892:	b7 01       	movw	r22, r14
     894:	0e 94 a6 04 	call	0x94c	; 0x94c <__clzsi2>
     898:	fc 01       	movw	r30, r24
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f7 ff       	sbrs	r31, 7
     89e:	3b c0       	rjmp	.+118    	; 0x916 <__stack+0xb7>
     8a0:	22 27       	eor	r18, r18
     8a2:	33 27       	eor	r19, r19
     8a4:	2e 1b       	sub	r18, r30
     8a6:	3f 0b       	sbc	r19, r31
     8a8:	57 01       	movw	r10, r14
     8aa:	68 01       	movw	r12, r16
     8ac:	02 2e       	mov	r0, r18
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	d6 94       	lsr	r13
     8b2:	c7 94       	ror	r12
     8b4:	b7 94       	ror	r11
     8b6:	a7 94       	ror	r10
     8b8:	0a 94       	dec	r0
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <__stack+0x51>
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	2a 95       	dec	r18
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__stack+0x6f>
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	a1 09       	sbc	r26, r1
     8de:	b1 09       	sbc	r27, r1
     8e0:	8e 21       	and	r24, r14
     8e2:	9f 21       	and	r25, r15
     8e4:	a0 23       	and	r26, r16
     8e6:	b1 23       	and	r27, r17
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	4a 29       	or	r20, r10
     8fa:	5b 29       	or	r21, r11
     8fc:	6c 29       	or	r22, r12
     8fe:	7d 29       	or	r23, r13
     900:	4d 83       	std	Y+5, r20	; 0x05
     902:	5e 83       	std	Y+6, r21	; 0x06
     904:	6f 83       	std	Y+7, r22	; 0x07
     906:	78 87       	std	Y+8, r23	; 0x08
     908:	8e e1       	ldi	r24, 0x1E	; 30
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	8e 1b       	sub	r24, r30
     90e:	9f 0b       	sbc	r25, r31
     910:	9c 83       	std	Y+4, r25	; 0x04
     912:	8b 83       	std	Y+3, r24	; 0x03
     914:	12 c0       	rjmp	.+36     	; 0x93a <__stack+0xdb>
     916:	30 97       	sbiw	r30, 0x00	; 0
     918:	81 f0       	breq	.+32     	; 0x93a <__stack+0xdb>
     91a:	0e 2e       	mov	r0, r30
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0xc7>
     91e:	ee 0c       	add	r14, r14
     920:	ff 1c       	adc	r15, r15
     922:	00 1f       	adc	r16, r16
     924:	11 1f       	adc	r17, r17
     926:	0a 94       	dec	r0
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0xbf>
     92a:	ed 82       	std	Y+5, r14	; 0x05
     92c:	fe 82       	std	Y+6, r15	; 0x06
     92e:	0f 83       	std	Y+7, r16	; 0x07
     930:	18 87       	std	Y+8, r17	; 0x08
     932:	ce 1a       	sub	r12, r30
     934:	df 0a       	sbc	r13, r31
     936:	dc 82       	std	Y+4, r13	; 0x04
     938:	cb 82       	std	Y+3, r12	; 0x03
     93a:	1a 82       	std	Y+2, r1	; 0x02
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     944:	28 96       	adiw	r28, 0x08	; 8
     946:	ea e0       	ldi	r30, 0x0A	; 10
     948:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__epilogue_restores__+0x10>

0000094c <__clzsi2>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	7b 01       	movw	r14, r22
     956:	8c 01       	movw	r16, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	e8 16       	cp	r14, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	f8 06       	cpc	r15, r24
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 07       	cpc	r16, r24
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	18 07       	cpc	r17, r24
     968:	88 f4       	brcc	.+34     	; 0x98c <__clzsi2+0x40>
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	e8 16       	cp	r14, r24
     96e:	f1 04       	cpc	r15, r1
     970:	01 05       	cpc	r16, r1
     972:	11 05       	cpc	r17, r1
     974:	31 f0       	breq	.+12     	; 0x982 <__clzsi2+0x36>
     976:	28 f0       	brcs	.+10     	; 0x982 <__clzsi2+0x36>
     978:	88 e0       	ldi	r24, 0x08	; 8
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	17 c0       	rjmp	.+46     	; 0x9b0 <__clzsi2+0x64>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <__clzsi2+0x64>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	e8 16       	cp	r14, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	f8 06       	cpc	r15, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	08 07       	cpc	r16, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	18 07       	cpc	r17, r24
     99c:	28 f0       	brcs	.+10     	; 0x9a8 <__clzsi2+0x5c>
     99e:	88 e1       	ldi	r24, 0x18	; 24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__clzsi2+0x64>
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	20 e2       	ldi	r18, 0x20	; 32
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	4a 0b       	sbc	r20, r26
     9be:	5b 0b       	sbc	r21, r27
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__clzsi2+0x7e>
     9c2:	16 95       	lsr	r17
     9c4:	07 95       	ror	r16
     9c6:	f7 94       	ror	r15
     9c8:	e7 94       	ror	r14
     9ca:	8a 95       	dec	r24
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__clzsi2+0x76>
     9ce:	f7 01       	movw	r30, r14
     9d0:	e8 59       	subi	r30, 0x98	; 152
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	80 81       	ld	r24, Z
     9d6:	28 1b       	sub	r18, r24
     9d8:	31 09       	sbc	r19, r1
     9da:	41 09       	sbc	r20, r1
     9dc:	51 09       	sbc	r21, r1
     9de:	c9 01       	movw	r24, r18
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <__pack_f>:
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	fc 01       	movw	r30, r24
     9f6:	e4 80       	ldd	r14, Z+4	; 0x04
     9f8:	f5 80       	ldd	r15, Z+5	; 0x05
     9fa:	06 81       	ldd	r16, Z+6	; 0x06
     9fc:	17 81       	ldd	r17, Z+7	; 0x07
     9fe:	d1 80       	ldd	r13, Z+1	; 0x01
     a00:	80 81       	ld	r24, Z
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	48 f4       	brcc	.+18     	; 0xa18 <__pack_f+0x2e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e1       	ldi	r26, 0x10	; 16
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 2a       	or	r14, r24
     a10:	f9 2a       	or	r15, r25
     a12:	0a 2b       	or	r16, r26
     a14:	1b 2b       	or	r17, r27
     a16:	a5 c0       	rjmp	.+330    	; 0xb62 <__pack_f+0x178>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__pack_f+0x34>
     a1c:	9f c0       	rjmp	.+318    	; 0xb5c <__pack_f+0x172>
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	21 f4       	brne	.+8      	; 0xa2a <__pack_f+0x40>
     a22:	ee 24       	eor	r14, r14
     a24:	ff 24       	eor	r15, r15
     a26:	87 01       	movw	r16, r14
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <__pack_f+0x4a>
     a2a:	e1 14       	cp	r14, r1
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__pack_f+0x50>
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	96 c0       	rjmp	.+300    	; 0xb66 <__pack_f+0x17c>
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	62 38       	cpi	r22, 0x82	; 130
     a42:	79 07       	cpc	r23, r25
     a44:	0c f0       	brlt	.+2      	; 0xa48 <__pack_f+0x5e>
     a46:	5b c0       	rjmp	.+182    	; 0xafe <__pack_f+0x114>
     a48:	22 e8       	ldi	r18, 0x82	; 130
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	26 1b       	sub	r18, r22
     a4e:	37 0b       	sbc	r19, r23
     a50:	2a 31       	cpi	r18, 0x1A	; 26
     a52:	31 05       	cpc	r19, r1
     a54:	2c f0       	brlt	.+10     	; 0xa60 <__pack_f+0x76>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	2a c0       	rjmp	.+84     	; 0xab4 <__pack_f+0xca>
     a60:	b8 01       	movw	r22, r16
     a62:	a7 01       	movw	r20, r14
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0x86>
     a68:	76 95       	lsr	r23
     a6a:	67 95       	ror	r22
     a6c:	57 95       	ror	r21
     a6e:	47 95       	ror	r20
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__pack_f+0x7e>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__pack_f+0x9c>
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	2a 95       	dec	r18
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__pack_f+0x94>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	a1 09       	sbc	r26, r1
     a8e:	b1 09       	sbc	r27, r1
     a90:	8e 21       	and	r24, r14
     a92:	9f 21       	and	r25, r15
     a94:	a0 23       	and	r26, r16
     a96:	b1 23       	and	r27, r17
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 05       	cpc	r26, r1
     a9c:	b1 05       	cpc	r27, r1
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <__pack_f+0xbe>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	9a 01       	movw	r18, r20
     aaa:	ab 01       	movw	r20, r22
     aac:	28 2b       	or	r18, r24
     aae:	39 2b       	or	r19, r25
     ab0:	4a 2b       	or	r20, r26
     ab2:	5b 2b       	or	r21, r27
     ab4:	da 01       	movw	r26, r20
     ab6:	c9 01       	movw	r24, r18
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	a0 70       	andi	r26, 0x00	; 0
     abe:	b0 70       	andi	r27, 0x00	; 0
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__pack_f+0xee>
     aca:	27 ff       	sbrs	r18, 7
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__pack_f+0xf6>
     ace:	20 5c       	subi	r18, 0xC0	; 192
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	4f 4f       	sbci	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__pack_f+0xf6>
     ad8:	21 5c       	subi	r18, 0xC1	; 193
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	3a 07       	cpc	r19, r26
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	4a 07       	cpc	r20, r26
     aee:	a0 e4       	ldi	r26, 0x40	; 64
     af0:	5a 07       	cpc	r21, r26
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <__pack_f+0x10e>
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	79 01       	movw	r14, r18
     afa:	8a 01       	movw	r16, r20
     afc:	27 c0       	rjmp	.+78     	; 0xb4c <__pack_f+0x162>
     afe:	60 38       	cpi	r22, 0x80	; 128
     b00:	71 05       	cpc	r23, r1
     b02:	64 f5       	brge	.+88     	; 0xb5c <__pack_f+0x172>
     b04:	fb 01       	movw	r30, r22
     b06:	e1 58       	subi	r30, 0x81	; 129
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	d8 01       	movw	r26, r16
     b0c:	c7 01       	movw	r24, r14
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	90 70       	andi	r25, 0x00	; 0
     b12:	a0 70       	andi	r26, 0x00	; 0
     b14:	b0 70       	andi	r27, 0x00	; 0
     b16:	80 34       	cpi	r24, 0x40	; 64
     b18:	91 05       	cpc	r25, r1
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__pack_f+0x144>
     b20:	e7 fe       	sbrs	r14, 7
     b22:	0d c0       	rjmp	.+26     	; 0xb3e <__pack_f+0x154>
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__pack_f+0x14c>
     b2e:	8f e3       	ldi	r24, 0x3F	; 63
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e8 0e       	add	r14, r24
     b38:	f9 1e       	adc	r15, r25
     b3a:	0a 1f       	adc	r16, r26
     b3c:	1b 1f       	adc	r17, r27
     b3e:	17 ff       	sbrs	r17, 7
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__pack_f+0x162>
     b42:	16 95       	lsr	r17
     b44:	07 95       	ror	r16
     b46:	f7 94       	ror	r15
     b48:	e7 94       	ror	r14
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	16 95       	lsr	r17
     b50:	07 95       	ror	r16
     b52:	f7 94       	ror	r15
     b54:	e7 94       	ror	r14
     b56:	8a 95       	dec	r24
     b58:	d1 f7       	brne	.-12     	; 0xb4e <__pack_f+0x164>
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <__pack_f+0x17c>
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	87 01       	movw	r16, r14
     b62:	ef ef       	ldi	r30, 0xFF	; 255
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	6e 2f       	mov	r22, r30
     b68:	67 95       	ror	r22
     b6a:	66 27       	eor	r22, r22
     b6c:	67 95       	ror	r22
     b6e:	90 2f       	mov	r25, r16
     b70:	9f 77       	andi	r25, 0x7F	; 127
     b72:	d7 94       	ror	r13
     b74:	dd 24       	eor	r13, r13
     b76:	d7 94       	ror	r13
     b78:	8e 2f       	mov	r24, r30
     b7a:	86 95       	lsr	r24
     b7c:	49 2f       	mov	r20, r25
     b7e:	46 2b       	or	r20, r22
     b80:	58 2f       	mov	r21, r24
     b82:	5d 29       	or	r21, r13
     b84:	b7 01       	movw	r22, r14
     b86:	ca 01       	movw	r24, r20
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <__unpack_f>:
     b94:	fc 01       	movw	r30, r24
     b96:	db 01       	movw	r26, r22
     b98:	40 81       	ld	r20, Z
     b9a:	51 81       	ldd	r21, Z+1	; 0x01
     b9c:	22 81       	ldd	r18, Z+2	; 0x02
     b9e:	62 2f       	mov	r22, r18
     ba0:	6f 77       	andi	r22, 0x7F	; 127
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	22 1f       	adc	r18, r18
     ba6:	22 27       	eor	r18, r18
     ba8:	22 1f       	adc	r18, r18
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	89 2f       	mov	r24, r25
     bae:	88 0f       	add	r24, r24
     bb0:	82 2b       	or	r24, r18
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	99 1f       	adc	r25, r25
     bb8:	99 27       	eor	r25, r25
     bba:	99 1f       	adc	r25, r25
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	11 97       	sbiw	r26, 0x01	; 1
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	a9 f5       	brne	.+106    	; 0xc32 <__unpack_f+0x9e>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <__unpack_f+0x42>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	37 c0       	rjmp	.+110    	; 0xc44 <__unpack_f+0xb0>
     bd6:	82 e8       	ldi	r24, 0x82	; 130
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	9c 93       	st	X, r25
     bde:	8e 93       	st	-X, r24
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	9a 01       	movw	r18, r20
     be4:	ab 01       	movw	r20, r22
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	6a 95       	dec	r22
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__unpack_f+0x54>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	8c 93       	st	X, r24
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__unpack_f+0x80>
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	44 1f       	adc	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 93       	st	X, r25
     c10:	8e 93       	st	-X, r24
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	20 30       	cpi	r18, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	38 07       	cpc	r19, r24
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	48 07       	cpc	r20, r24
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	58 07       	cpc	r21, r24
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__unpack_f+0x66>
     c24:	14 96       	adiw	r26, 0x04	; 4
     c26:	2d 93       	st	X+, r18
     c28:	3d 93       	st	X+, r19
     c2a:	4d 93       	st	X+, r20
     c2c:	5c 93       	st	X, r21
     c2e:	17 97       	sbiw	r26, 0x07	; 7
     c30:	08 95       	ret
     c32:	2f 3f       	cpi	r18, 0xFF	; 255
     c34:	31 05       	cpc	r19, r1
     c36:	79 f4       	brne	.+30     	; 0xc56 <__unpack_f+0xc2>
     c38:	41 15       	cp	r20, r1
     c3a:	51 05       	cpc	r21, r1
     c3c:	61 05       	cpc	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	19 f4       	brne	.+6      	; 0xc48 <__unpack_f+0xb4>
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	08 95       	ret
     c48:	64 ff       	sbrs	r22, 4
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <__unpack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	8c 93       	st	X, r24
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <__unpack_f+0xe2>
     c52:	1c 92       	st	X, r1
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <__unpack_f+0xe2>
     c56:	2f 57       	subi	r18, 0x7F	; 127
     c58:	30 40       	sbci	r19, 0x00	; 0
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	3c 93       	st	X, r19
     c5e:	2e 93       	st	-X, r18
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	8c 93       	st	X, r24
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	8a 95       	dec	r24
     c72:	d1 f7       	brne	.-12     	; 0xc68 <__unpack_f+0xd4>
     c74:	70 64       	ori	r23, 0x40	; 64
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	4d 93       	st	X+, r20
     c7a:	5d 93       	st	X+, r21
     c7c:	6d 93       	st	X+, r22
     c7e:	7c 93       	st	X, r23
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	08 95       	ret

00000c84 <__fpcmp_parts_f>:
     c84:	1f 93       	push	r17
     c86:	dc 01       	movw	r26, r24
     c88:	fb 01       	movw	r30, r22
     c8a:	9c 91       	ld	r25, X
     c8c:	92 30       	cpi	r25, 0x02	; 2
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <__fpcmp_parts_f+0xe>
     c90:	47 c0       	rjmp	.+142    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c92:	80 81       	ld	r24, Z
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__fpcmp_parts_f+0x16>
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c9a:	94 30       	cpi	r25, 0x04	; 4
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <__fpcmp_parts_f+0x2e>
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	1c 91       	ld	r17, X
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	99 f5       	brne	.+102    	; 0xd0c <__fpcmp_parts_f+0x88>
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	68 2f       	mov	r22, r24
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	61 1b       	sub	r22, r17
     cae:	71 09       	sbc	r23, r1
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <__fpcmp_parts_f+0xac>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__fpcmp_parts_f+0x3a>
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__fpcmp_parts_f+0x42>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	b9 f1       	breq	.+110    	; 0xd2c <__fpcmp_parts_f+0xa8>
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	89 f1       	breq	.+98     	; 0xd26 <__fpcmp_parts_f+0xa2>
     cc4:	2d c0       	rjmp	.+90     	; 0xd20 <__fpcmp_parts_f+0x9c>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 91       	ld	r17, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	f1 f0       	breq	.+60     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	18 17       	cp	r17, r24
     cd4:	d9 f4       	brne	.+54     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	94 f0       	brlt	.+36     	; 0xd0c <__fpcmp_parts_f+0x88>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	bc f0       	brlt	.+46     	; 0xd1c <__fpcmp_parts_f+0x98>
     cee:	14 96       	adiw	r26, 0x04	; 4
     cf0:	8d 91       	ld	r24, X+
     cf2:	9d 91       	ld	r25, X+
     cf4:	0d 90       	ld	r0, X+
     cf6:	bc 91       	ld	r27, X
     cf8:	a0 2d       	mov	r26, r0
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	46 81       	ldd	r20, Z+6	; 0x06
     d00:	57 81       	ldd	r21, Z+7	; 0x07
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	4a 07       	cpc	r20, r26
     d08:	5b 07       	cpc	r21, r27
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <__fpcmp_parts_f+0x8e>
     d0c:	11 23       	and	r17, r17
     d0e:	41 f0       	breq	.+16     	; 0xd20 <__fpcmp_parts_f+0x9c>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <__fpcmp_parts_f+0xa2>
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	a4 07       	cpc	r26, r20
     d18:	b5 07       	cpc	r27, r21
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fpcmp_parts_f+0xa8>
     d1c:	11 23       	and	r17, r17
     d1e:	19 f0       	breq	.+6      	; 0xd26 <__fpcmp_parts_f+0xa2>
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <__fpcmp_parts_f+0xac>
     d26:	6f ef       	ldi	r22, 0xFF	; 255
     d28:	7f ef       	ldi	r23, 0xFF	; 255
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <__fpcmp_parts_f+0xac>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	cb 01       	movw	r24, r22
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
     d3e:	78 94       	sei
}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
     d4e:	f8 94       	cli

     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <EXTI_enuInit>:

static void (*LOC_pfunISRFun[3])(void) = {NULL, NULL, NULL};
// static pvFUn ISR[3];

ErrorState_t EXTI_enuInit(void)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <EXTI_enuInit+0x6>
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
    ErrorState_t Local_enuErrorState = ES_NOK;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8Iter = 0;
     d64:	19 82       	std	Y+1, r1	; 0x01
    for (Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTIPinNum ; Local_u8Iter++)
     d66:	19 82       	std	Y+1, r1	; 0x01
     d68:	3b c0       	rjmp	.+118    	; 0xde0 <EXTI_enuInit+0x8a>
    {
        enuSetIntMode   (EXTI_astrEXTIConfig[Local_u8Iter].intPin , EXTI_astrEXTIConfig[Local_u8Iter].intMode );
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	c9 01       	movw	r24, r18
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	82 0f       	add	r24, r18
     d78:	93 1f       	adc	r25, r19
     d7a:	fc 01       	movw	r30, r24
     d7c:	e7 59       	subi	r30, 0x97	; 151
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	40 81       	ld	r20, Z
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	c9 01       	movw	r24, r18
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	82 0f       	add	r24, r18
     d90:	93 1f       	adc	r25, r19
     d92:	fc 01       	movw	r30, r24
     d94:	e5 59       	subi	r30, 0x95	; 149
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	90 81       	ld	r25, Z
     d9a:	84 2f       	mov	r24, r20
     d9c:	69 2f       	mov	r22, r25
     d9e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <enuSetIntMode>
        enuSetSenseLevel(EXTI_astrEXTIConfig[Local_u8Iter].intPin , EXTI_astrEXTIConfig[Local_u8Iter].senseLevel );
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	c9 01       	movw	r24, r18
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	fc 01       	movw	r30, r24
     db4:	e7 59       	subi	r30, 0x97	; 151
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	40 81       	ld	r20, Z
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	c9 01       	movw	r24, r18
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	82 0f       	add	r24, r18
     dc8:	93 1f       	adc	r25, r19
     dca:	fc 01       	movw	r30, r24
     dcc:	e6 59       	subi	r30, 0x96	; 150
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	90 81       	ld	r25, Z
     dd2:	84 2f       	mov	r24, r20
     dd4:	69 2f       	mov	r22, r25
     dd6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <enuSetSenseLevel>
ErrorState_t EXTI_enuInit(void)
{
    ErrorState_t Local_enuErrorState = ES_NOK;

    u8 Local_u8Iter = 0;
    for (Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTIPinNum ; Local_u8Iter++)
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	90 91 68 01 	lds	r25, 0x0168
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	89 17       	cp	r24, r25
     de8:	08 f4       	brcc	.+2      	; 0xdec <EXTI_enuInit+0x96>
     dea:	bf cf       	rjmp	.-130    	; 0xd6a <EXTI_enuInit+0x14>
    {
        enuSetIntMode   (EXTI_astrEXTIConfig[Local_u8Iter].intPin , EXTI_astrEXTIConfig[Local_u8Iter].intMode );
        enuSetSenseLevel(EXTI_astrEXTIConfig[Local_u8Iter].intPin , EXTI_astrEXTIConfig[Local_u8Iter].senseLevel );
    }

    return Local_enuErrorState;
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
}
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <EXTI_enuSetSenseLevel>:

ErrorState_t EXTI_enuSetSenseLevel(u8 Copy_u8IntPin , u8 Copy_u8SenseLevel)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <EXTI_enuSetSenseLevel+0x6>
     dfe:	0f 92       	push	r0
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	8a 83       	std	Y+2, r24	; 0x02
     e06:	6b 83       	std	Y+3, r22	; 0x03
    ErrorState_t Local_enuErrorState = ES_NOK;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	89 83       	std	Y+1, r24	; 0x01

    enuSetSenseLevel(Copy_u8IntPin , Copy_u8SenseLevel );
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	6b 81       	ldd	r22, Y+3	; 0x03
     e10:	0e 94 50 08 	call	0x10a0	; 0x10a0 <enuSetSenseLevel>

    return Local_enuErrorState;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
}
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <EXTI_enuEnableInterrupt>:

ErrorState_t EXTI_enuEnableInterrupt(u8 Copy_u8IntPin)
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	00 d0       	rcall	.+0      	; 0xe28 <EXTI_enuEnableInterrupt+0x6>
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	8a 83       	std	Y+2, r24	; 0x02
    ErrorState_t Local_enuErrorState = ES_NOK;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	89 83       	std	Y+1, r24	; 0x01

    enuSetIntMode(Copy_u8IntPin, EXTI_INTERRUPT_MODE );
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	6a e4       	ldi	r22, 0x4A	; 74
     e36:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <enuSetIntMode>

    return Local_enuErrorState;
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <EXTI_enuDisableInterrupt>:

ErrorState_t EXTI_enuDisableInterrupt(u8 Copy_u8IntPin)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <EXTI_enuDisableInterrupt+0x6>
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	8a 83       	std	Y+2, r24	; 0x02
    ErrorState_t Local_enuErrorState = ES_NOK;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	89 83       	std	Y+1, r24	; 0x01

    enuSetIntMode(Copy_u8IntPin, EXTI_POLLING_MODE );
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	65 e4       	ldi	r22, 0x45	; 69
     e5a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <enuSetIntMode>

    return Local_enuErrorState;
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <EXTI_enuSetCallBack>:

ErrorState_t EXTI_enuSetCallBack(u8 Copy_u8IntPin , void(*Copy_pFunAppFun)(void))
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <EXTI_enuSetCallBack+0x6>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <EXTI_enuSetCallBack+0x8>
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	8a 83       	std	Y+2, r24	; 0x02
     e78:	7c 83       	std	Y+4, r23	; 0x04
     e7a:	6b 83       	std	Y+3, r22	; 0x03
    ErrorState_t Local_enuErrorState = ES_NOK;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pFunAppFun != NULL)
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	69 f0       	breq	.+26     	; 0xea2 <EXTI_enuSetCallBack+0x38>
    {
        LOC_pfunISRFun[Copy_u8IntPin] = Copy_pFunAppFun;
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	fc 01       	movw	r30, r24
     e94:	e6 55       	subi	r30, 0x56	; 86
     e96:	fe 4f       	sbci	r31, 0xFE	; 254
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	91 83       	std	Z+1, r25	; 0x01
     e9e:	80 83       	st	Z, r24
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <EXTI_enuSetCallBack+0x3c>
    }
    else
    {
        Local_enuErrorState = ES_NULL_POINTER;
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));
//INT0
void __vector_1 (void)
{
     eb6:	1f 92       	push	r1
     eb8:	0f 92       	push	r0
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	0f 92       	push	r0
     ebe:	11 24       	eor	r1, r1
     ec0:	2f 93       	push	r18
     ec2:	3f 93       	push	r19
     ec4:	4f 93       	push	r20
     ec6:	5f 93       	push	r21
     ec8:	6f 93       	push	r22
     eca:	7f 93       	push	r23
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
    if(LOC_pfunISRFun[EXTI_INT0] != NULL)
     ee0:	80 91 aa 01 	lds	r24, 0x01AA
     ee4:	90 91 ab 01 	lds	r25, 0x01AB
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	29 f0       	breq	.+10     	; 0xef6 <__vector_1+0x40>
    {
        LOC_pfunISRFun[EXTI_INT0] ();
     eec:	e0 91 aa 01 	lds	r30, 0x01AA
     ef0:	f0 91 ab 01 	lds	r31, 0x01AB
     ef4:	09 95       	icall
    }
}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	ff 91       	pop	r31
     efc:	ef 91       	pop	r30
     efe:	bf 91       	pop	r27
     f00:	af 91       	pop	r26
     f02:	9f 91       	pop	r25
     f04:	8f 91       	pop	r24
     f06:	7f 91       	pop	r23
     f08:	6f 91       	pop	r22
     f0a:	5f 91       	pop	r21
     f0c:	4f 91       	pop	r20
     f0e:	3f 91       	pop	r19
     f10:	2f 91       	pop	r18
     f12:	0f 90       	pop	r0
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	0f 90       	pop	r0
     f18:	1f 90       	pop	r1
     f1a:	18 95       	reti

00000f1c <__vector_2>:
//INT1
void __vector_2 (void)
{
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	2f 93       	push	r18
     f28:	3f 93       	push	r19
     f2a:	4f 93       	push	r20
     f2c:	5f 93       	push	r21
     f2e:	6f 93       	push	r22
     f30:	7f 93       	push	r23
     f32:	8f 93       	push	r24
     f34:	9f 93       	push	r25
     f36:	af 93       	push	r26
     f38:	bf 93       	push	r27
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
    if(LOC_pfunISRFun[EXTI_INT1] != NULL)
     f46:	80 91 ac 01 	lds	r24, 0x01AC
     f4a:	90 91 ad 01 	lds	r25, 0x01AD
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	29 f0       	breq	.+10     	; 0xf5c <__vector_2+0x40>
    {
        LOC_pfunISRFun[EXTI_INT1] ();
     f52:	e0 91 ac 01 	lds	r30, 0x01AC
     f56:	f0 91 ad 01 	lds	r31, 0x01AD
     f5a:	09 95       	icall
    }
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <__vector_3>:
//INT2
void __vector_3 (void)
{
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	ef 93       	push	r30
     fa2:	ff 93       	push	r31
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
    if(LOC_pfunISRFun[EXTI_INT2] != NULL)
     fac:	80 91 ae 01 	lds	r24, 0x01AE
     fb0:	90 91 af 01 	lds	r25, 0x01AF
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	29 f0       	breq	.+10     	; 0xfc2 <__vector_3+0x40>
    {
        LOC_pfunISRFun[EXTI_INT2] ();
     fb8:	e0 91 ae 01 	lds	r30, 0x01AE
     fbc:	f0 91 af 01 	lds	r31, 0x01AF
     fc0:	09 95       	icall
    }

}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <enuSetIntMode>:


static ErrorState_t enuSetIntMode(u8 Copy_u8IntPin, u8 Copy_u8IntMode)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <enuSetIntMode+0x6>
     fee:	00 d0       	rcall	.+0      	; 0xff0 <enuSetIntMode+0x8>
     ff0:	0f 92       	push	r0
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8IntPin)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	3c 83       	std	Y+4, r19	; 0x04
    1002:	2b 83       	std	Y+3, r18	; 0x03
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	e1 f0       	breq	.+56     	; 0x1046 <enuSetIntMode+0x5e>
    100e:	2b 81       	ldd	r18, Y+3	; 0x03
    1010:	3c 81       	ldd	r19, Y+4	; 0x04
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	51 f1       	breq	.+84     	; 0x106c <enuSetIntMode+0x84>
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	c1 f5       	brne	.+112    	; 0x1090 <enuSetIntMode+0xa8>
    {
        case EXTI_INT0:
            if (Copy_u8IntMode == EXTI_INTERRUPT_MODE)
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	8a 34       	cpi	r24, 0x4A	; 74
    1024:	41 f4       	brne	.+16     	; 0x1036 <enuSetIntMode+0x4e>
            {
                GICR |= (1<<6);
    1026:	ab e5       	ldi	r26, 0x5B	; 91
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	eb e5       	ldi	r30, 0x5B	; 91
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	80 64       	ori	r24, 0x40	; 64
    1032:	8c 93       	st	X, r24
    1034:	2d c0       	rjmp	.+90     	; 0x1090 <enuSetIntMode+0xa8>
            }
            else
            {
                GICR &=~ (1<<6);
    1036:	ab e5       	ldi	r26, 0x5B	; 91
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	eb e5       	ldi	r30, 0x5B	; 91
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8f 7b       	andi	r24, 0xBF	; 191
    1042:	8c 93       	st	X, r24
    1044:	25 c0       	rjmp	.+74     	; 0x1090 <enuSetIntMode+0xa8>
            }
            break;

        case EXTI_INT1:
            if (Copy_u8IntMode == EXTI_INTERRUPT_MODE)
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	8a 34       	cpi	r24, 0x4A	; 74
    104a:	41 f4       	brne	.+16     	; 0x105c <enuSetIntMode+0x74>
            {
                GICR |= (1<<7);
    104c:	ab e5       	ldi	r26, 0x5B	; 91
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	eb e5       	ldi	r30, 0x5B	; 91
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 68       	ori	r24, 0x80	; 128
    1058:	8c 93       	st	X, r24
    105a:	1a c0       	rjmp	.+52     	; 0x1090 <enuSetIntMode+0xa8>
            }
            else
            {
                GICR &=~ (1<<7);
    105c:	ab e5       	ldi	r26, 0x5B	; 91
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	eb e5       	ldi	r30, 0x5B	; 91
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 77       	andi	r24, 0x7F	; 127
    1068:	8c 93       	st	X, r24
    106a:	12 c0       	rjmp	.+36     	; 0x1090 <enuSetIntMode+0xa8>
            }
            break;

        case EXTI_INT2:
            if (Copy_u8IntMode == EXTI_INTERRUPT_MODE)
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	8a 34       	cpi	r24, 0x4A	; 74
    1070:	41 f4       	brne	.+16     	; 0x1082 <enuSetIntMode+0x9a>
            {
                GICR |= (1<<5);
    1072:	ab e5       	ldi	r26, 0x5B	; 91
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e5       	ldi	r30, 0x5B	; 91
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 62       	ori	r24, 0x20	; 32
    107e:	8c 93       	st	X, r24
    1080:	07 c0       	rjmp	.+14     	; 0x1090 <enuSetIntMode+0xa8>
            }
            else
            {
                GICR &=~ (1<<5);
    1082:	ab e5       	ldi	r26, 0x5B	; 91
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	eb e5       	ldi	r30, 0x5B	; 91
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8f 7d       	andi	r24, 0xDF	; 223
    108e:	8c 93       	st	X, r24
            }
            break;
    }
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <enuSetSenseLevel>:
static ErrorState_t enuSetSenseLevel(u8 Copy_u8IntPin, u8 Copy_u8SenseLevel)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <enuSetSenseLevel+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <enuSetSenseLevel+0x8>
    10a8:	0f 92       	push	r0
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	89 83       	std	Y+1, r24	; 0x01
    10b0:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8IntPin)
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	3c 83       	std	Y+4, r19	; 0x04
    10ba:	2b 83       	std	Y+3, r18	; 0x03
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	91 05       	cpc	r25, r1
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <enuSetSenseLevel+0x28>
    10c6:	46 c0       	rjmp	.+140    	; 0x1154 <enuSetSenseLevel+0xb4>
    10c8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ca:	3c 81       	ldd	r19, Y+4	; 0x04
    10cc:	22 30       	cpi	r18, 0x02	; 2
    10ce:	31 05       	cpc	r19, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <enuSetSenseLevel+0x34>
    10d2:	7a c0       	rjmp	.+244    	; 0x11c8 <enuSetSenseLevel+0x128>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	09 f0       	breq	.+2      	; 0x10de <enuSetSenseLevel+0x3e>
    10dc:	8a c0       	rjmp	.+276    	; 0x11f2 <enuSetSenseLevel+0x152>
    {
        case EXTI_INT0:
            if (Copy_u8SenseLevel == EXTI_LOW_LEVEL)
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	81 34       	cpi	r24, 0x41	; 65
    10e2:	41 f4       	brne	.+16     	; 0x10f4 <enuSetSenseLevel+0x54>
            {
                MCUCR &= ~(3<<0);
    10e4:	a5 e5       	ldi	r26, 0x55	; 85
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e5       	ldi	r30, 0x55	; 85
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8c 7f       	andi	r24, 0xFC	; 252
    10f0:	8c 93       	st	X, r24
    10f2:	7f c0       	rjmp	.+254    	; 0x11f2 <enuSetSenseLevel+0x152>
            }
            else if (Copy_u8SenseLevel == EXTI_ANY_CHANGE)
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	80 32       	cpi	r24, 0x20	; 32
    10f8:	79 f4       	brne	.+30     	; 0x1118 <enuSetSenseLevel+0x78>
            {
                MCUCR &= ~(3<<0);
    10fa:	a5 e5       	ldi	r26, 0x55	; 85
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e5 e5       	ldi	r30, 0x55	; 85
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8c 7f       	andi	r24, 0xFC	; 252
    1106:	8c 93       	st	X, r24
                MCUCR |=  (1<<0);
    1108:	a5 e5       	ldi	r26, 0x55	; 85
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e5       	ldi	r30, 0x55	; 85
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	81 60       	ori	r24, 0x01	; 1
    1114:	8c 93       	st	X, r24
    1116:	6d c0       	rjmp	.+218    	; 0x11f2 <enuSetSenseLevel+0x152>
            }
            else if (Copy_u8SenseLevel == EXTI_FALLING)
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	8c 30       	cpi	r24, 0x0C	; 12
    111c:	79 f4       	brne	.+30     	; 0x113c <enuSetSenseLevel+0x9c>
            {
                MCUCR &= ~(3<<0);
    111e:	a5 e5       	ldi	r26, 0x55	; 85
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e5       	ldi	r30, 0x55	; 85
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8c 7f       	andi	r24, 0xFC	; 252
    112a:	8c 93       	st	X, r24
                MCUCR |=  (1<<1);
    112c:	a5 e5       	ldi	r26, 0x55	; 85
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e5       	ldi	r30, 0x55	; 85
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	82 60       	ori	r24, 0x02	; 2
    1138:	8c 93       	st	X, r24
    113a:	5b c0       	rjmp	.+182    	; 0x11f2 <enuSetSenseLevel+0x152>
            }
            else if (Copy_u8SenseLevel == EXTI_RISING)
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	8a 35       	cpi	r24, 0x5A	; 90
    1140:	09 f0       	breq	.+2      	; 0x1144 <enuSetSenseLevel+0xa4>
    1142:	57 c0       	rjmp	.+174    	; 0x11f2 <enuSetSenseLevel+0x152>
            {
                MCUCR |=  (3<<0);
    1144:	a5 e5       	ldi	r26, 0x55	; 85
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e5       	ldi	r30, 0x55	; 85
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	83 60       	ori	r24, 0x03	; 3
    1150:	8c 93       	st	X, r24
    1152:	4f c0       	rjmp	.+158    	; 0x11f2 <enuSetSenseLevel+0x152>
            {
            }
            break;

        case EXTI_INT1:
            if (Copy_u8SenseLevel == EXTI_LOW_LEVEL)
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	81 34       	cpi	r24, 0x41	; 65
    1158:	41 f4       	brne	.+16     	; 0x116a <enuSetSenseLevel+0xca>
            {
                MCUCR &= ~(3<<2);
    115a:	a5 e5       	ldi	r26, 0x55	; 85
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e5 e5       	ldi	r30, 0x55	; 85
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	83 7f       	andi	r24, 0xF3	; 243
    1166:	8c 93       	st	X, r24
    1168:	44 c0       	rjmp	.+136    	; 0x11f2 <enuSetSenseLevel+0x152>
            }
            else if (Copy_u8SenseLevel == EXTI_ANY_CHANGE)
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	80 32       	cpi	r24, 0x20	; 32
    116e:	79 f4       	brne	.+30     	; 0x118e <enuSetSenseLevel+0xee>
            {
                MCUCR &= ~(3<<2);
    1170:	a5 e5       	ldi	r26, 0x55	; 85
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e5 e5       	ldi	r30, 0x55	; 85
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	83 7f       	andi	r24, 0xF3	; 243
    117c:	8c 93       	st	X, r24
                MCUCR |=  (1<<2);
    117e:	a5 e5       	ldi	r26, 0x55	; 85
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e5 e5       	ldi	r30, 0x55	; 85
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	84 60       	ori	r24, 0x04	; 4
    118a:	8c 93       	st	X, r24
    118c:	32 c0       	rjmp	.+100    	; 0x11f2 <enuSetSenseLevel+0x152>
            }
            else if (Copy_u8SenseLevel == EXTI_FALLING)
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	8c 30       	cpi	r24, 0x0C	; 12
    1192:	79 f4       	brne	.+30     	; 0x11b2 <enuSetSenseLevel+0x112>
            {
                MCUCR &= ~(3<<2);
    1194:	a5 e5       	ldi	r26, 0x55	; 85
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e5       	ldi	r30, 0x55	; 85
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	83 7f       	andi	r24, 0xF3	; 243
    11a0:	8c 93       	st	X, r24
                MCUCR |=  (1<<3);
    11a2:	a5 e5       	ldi	r26, 0x55	; 85
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e5 e5       	ldi	r30, 0x55	; 85
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	88 60       	ori	r24, 0x08	; 8
    11ae:	8c 93       	st	X, r24
    11b0:	20 c0       	rjmp	.+64     	; 0x11f2 <enuSetSenseLevel+0x152>
            }
            else if (Copy_u8SenseLevel == EXTI_RISING)
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	8a 35       	cpi	r24, 0x5A	; 90
    11b6:	e9 f4       	brne	.+58     	; 0x11f2 <enuSetSenseLevel+0x152>
            {
                MCUCR |=  (3<<2);
    11b8:	a5 e5       	ldi	r26, 0x55	; 85
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e5 e5       	ldi	r30, 0x55	; 85
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8c 60       	ori	r24, 0x0C	; 12
    11c4:	8c 93       	st	X, r24
    11c6:	15 c0       	rjmp	.+42     	; 0x11f2 <enuSetSenseLevel+0x152>
            {
            }
            break;

        case EXTI_INT2:
            if (Copy_u8SenseLevel == EXTI_FALLING)
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	8c 30       	cpi	r24, 0x0C	; 12
    11cc:	41 f4       	brne	.+16     	; 0x11de <enuSetSenseLevel+0x13e>
            {
                MCUCSR &= ~(1<<6);
    11ce:	a4 e5       	ldi	r26, 0x54	; 84
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e4 e5       	ldi	r30, 0x54	; 84
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7b       	andi	r24, 0xBF	; 191
    11da:	8c 93       	st	X, r24
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <enuSetSenseLevel+0x152>
            }
            else if (Copy_u8SenseLevel == EXTI_RISING)
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	8a 35       	cpi	r24, 0x5A	; 90
    11e2:	39 f4       	brne	.+14     	; 0x11f2 <enuSetSenseLevel+0x152>
            {
                MCUCSR |=  (1<<6);
    11e4:	a4 e5       	ldi	r26, 0x54	; 84
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e4 e5       	ldi	r30, 0x54	; 84
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 64       	ori	r24, 0x40	; 64
    11f0:	8c 93       	st	X, r24
            else
            {
            }
            break;
    }
}
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	0f 92       	push	r0
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    1210:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    1212:	89 81       	ldd	r24, Y+1	; 0x01
}
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <DIO_enu_SetPinDiretion+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <DIO_enu_SetPinDiretion+0x8>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <DIO_enu_SetPinDiretion+0xa>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	6b 83       	std	Y+3, r22	; 0x03
    122e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	84 30       	cpi	r24, 0x04	; 4
    1238:	08 f0       	brcs	.+2      	; 0x123c <DIO_enu_SetPinDiretion+0x20>
    123a:	d0 c0       	rjmp	.+416    	; 0x13dc <DIO_enu_SetPinDiretion+0x1c0>
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 30       	cpi	r24, 0x08	; 8
    1240:	08 f0       	brcs	.+2      	; 0x1244 <DIO_enu_SetPinDiretion+0x28>
    1242:	cc c0       	rjmp	.+408    	; 0x13dc <DIO_enu_SetPinDiretion+0x1c0>
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	08 f0       	brcs	.+2      	; 0x124c <DIO_enu_SetPinDiretion+0x30>
    124a:	c8 c0       	rjmp	.+400    	; 0x13dc <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3e 83       	std	Y+6, r19	; 0x06
    1254:	2d 83       	std	Y+5, r18	; 0x05
    1256:	6d 81       	ldd	r22, Y+5	; 0x05
    1258:	7e 81       	ldd	r23, Y+6	; 0x06
    125a:	61 30       	cpi	r22, 0x01	; 1
    125c:	71 05       	cpc	r23, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <DIO_enu_SetPinDiretion+0x46>
    1260:	41 c0       	rjmp	.+130    	; 0x12e4 <DIO_enu_SetPinDiretion+0xc8>
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	91 05       	cpc	r25, r1
    126a:	34 f4       	brge	.+12     	; 0x1278 <DIO_enu_SetPinDiretion+0x5c>
    126c:	2d 81       	ldd	r18, Y+5	; 0x05
    126e:	3e 81       	ldd	r19, Y+6	; 0x06
    1270:	21 15       	cp	r18, r1
    1272:	31 05       	cpc	r19, r1
    1274:	71 f0       	breq	.+28     	; 0x1292 <DIO_enu_SetPinDiretion+0x76>
    1276:	b0 c0       	rjmp	.+352    	; 0x13d8 <DIO_enu_SetPinDiretion+0x1bc>
    1278:	6d 81       	ldd	r22, Y+5	; 0x05
    127a:	7e 81       	ldd	r23, Y+6	; 0x06
    127c:	62 30       	cpi	r22, 0x02	; 2
    127e:	71 05       	cpc	r23, r1
    1280:	09 f4       	brne	.+2      	; 0x1284 <DIO_enu_SetPinDiretion+0x68>
    1282:	59 c0       	rjmp	.+178    	; 0x1336 <DIO_enu_SetPinDiretion+0x11a>
    1284:	8d 81       	ldd	r24, Y+5	; 0x05
    1286:	9e 81       	ldd	r25, Y+6	; 0x06
    1288:	83 30       	cpi	r24, 0x03	; 3
    128a:	91 05       	cpc	r25, r1
    128c:	09 f4       	brne	.+2      	; 0x1290 <DIO_enu_SetPinDiretion+0x74>
    128e:	7c c0       	rjmp	.+248    	; 0x1388 <DIO_enu_SetPinDiretion+0x16c>
    1290:	a3 c0       	rjmp	.+326    	; 0x13d8 <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    1292:	aa e3       	ldi	r26, 0x3A	; 58
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ea e3       	ldi	r30, 0x3A	; 58
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_enu_SetPinDiretion+0x92>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	2a 95       	dec	r18
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_enu_SetPinDiretion+0x8e>
    12b2:	80 95       	com	r24
    12b4:	84 23       	and	r24, r20
    12b6:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    12b8:	aa e3       	ldi	r26, 0x3A	; 58
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ea e3       	ldi	r30, 0x3A	; 58
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	b9 01       	movw	r22, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_enu_SetPinDiretion+0xbc>
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_enu_SetPinDiretion+0xb8>
    12dc:	cb 01       	movw	r24, r22
    12de:	84 2b       	or	r24, r20
    12e0:	8c 93       	st	X, r24
    12e2:	7a c0       	rjmp	.+244    	; 0x13d8 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    12e4:	a7 e3       	ldi	r26, 0x37	; 55
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e7 e3       	ldi	r30, 0x37	; 55
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_enu_SetPinDiretion+0xe4>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	2a 95       	dec	r18
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_enu_SetPinDiretion+0xe0>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    130a:	a7 e3       	ldi	r26, 0x37	; 55
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e7 e3       	ldi	r30, 0x37	; 55
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	b9 01       	movw	r22, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_enu_SetPinDiretion+0x10e>
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	8a 95       	dec	r24
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_enu_SetPinDiretion+0x10a>
    132e:	cb 01       	movw	r24, r22
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	51 c0       	rjmp	.+162    	; 0x13d8 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    1336:	a4 e3       	ldi	r26, 0x34	; 52
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e4 e3       	ldi	r30, 0x34	; 52
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_enu_SetPinDiretion+0x136>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	2a 95       	dec	r18
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_enu_SetPinDiretion+0x132>
    1356:	80 95       	com	r24
    1358:	84 23       	and	r24, r20
    135a:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    135c:	a4 e3       	ldi	r26, 0x34	; 52
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e4 e3       	ldi	r30, 0x34	; 52
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	b9 01       	movw	r22, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_enu_SetPinDiretion+0x160>
    1378:	66 0f       	add	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_enu_SetPinDiretion+0x15c>
    1380:	cb 01       	movw	r24, r22
    1382:	84 2b       	or	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	28 c0       	rjmp	.+80     	; 0x13d8 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    1388:	a1 e3       	ldi	r26, 0x31	; 49
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e1 e3       	ldi	r30, 0x31	; 49
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_enu_SetPinDiretion+0x188>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	2a 95       	dec	r18
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_enu_SetPinDiretion+0x184>
    13a8:	80 95       	com	r24
    13aa:	84 23       	and	r24, r20
    13ac:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    13ae:	a1 e3       	ldi	r26, 0x31	; 49
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e1 e3       	ldi	r30, 0x31	; 49
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	b9 01       	movw	r22, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_enu_SetPinDiretion+0x1b2>
    13ca:	66 0f       	add	r22, r22
    13cc:	77 1f       	adc	r23, r23
    13ce:	8a 95       	dec	r24
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO_enu_SetPinDiretion+0x1ae>
    13d2:	cb 01       	movw	r24, r22
    13d4:	84 2b       	or	r24, r20
    13d6:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    13d8:	19 82       	std	Y+1, r1	; 0x01
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e2:	26 96       	adiw	r28, 0x06	; 6
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <DIO_enu_SetPinState+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <DIO_enu_SetPinState+0x8>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <DIO_enu_SetPinState+0xa>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	8a 83       	std	Y+2, r24	; 0x02
    1404:	6b 83       	std	Y+3, r22	; 0x03
    1406:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	84 30       	cpi	r24, 0x04	; 4
    1410:	08 f0       	brcs	.+2      	; 0x1414 <DIO_enu_SetPinState+0x20>
    1412:	d0 c0       	rjmp	.+416    	; 0x15b4 <DIO_enu_SetPinState+0x1c0>
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	88 30       	cpi	r24, 0x08	; 8
    1418:	08 f0       	brcs	.+2      	; 0x141c <DIO_enu_SetPinState+0x28>
    141a:	cc c0       	rjmp	.+408    	; 0x15b4 <DIO_enu_SetPinState+0x1c0>
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	82 30       	cpi	r24, 0x02	; 2
    1420:	08 f0       	brcs	.+2      	; 0x1424 <DIO_enu_SetPinState+0x30>
    1422:	c8 c0       	rjmp	.+400    	; 0x15b4 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	3e 83       	std	Y+6, r19	; 0x06
    142c:	2d 83       	std	Y+5, r18	; 0x05
    142e:	6d 81       	ldd	r22, Y+5	; 0x05
    1430:	7e 81       	ldd	r23, Y+6	; 0x06
    1432:	61 30       	cpi	r22, 0x01	; 1
    1434:	71 05       	cpc	r23, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <DIO_enu_SetPinState+0x46>
    1438:	41 c0       	rjmp	.+130    	; 0x14bc <DIO_enu_SetPinState+0xc8>
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	9e 81       	ldd	r25, Y+6	; 0x06
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	91 05       	cpc	r25, r1
    1442:	34 f4       	brge	.+12     	; 0x1450 <DIO_enu_SetPinState+0x5c>
    1444:	2d 81       	ldd	r18, Y+5	; 0x05
    1446:	3e 81       	ldd	r19, Y+6	; 0x06
    1448:	21 15       	cp	r18, r1
    144a:	31 05       	cpc	r19, r1
    144c:	71 f0       	breq	.+28     	; 0x146a <DIO_enu_SetPinState+0x76>
    144e:	b0 c0       	rjmp	.+352    	; 0x15b0 <DIO_enu_SetPinState+0x1bc>
    1450:	6d 81       	ldd	r22, Y+5	; 0x05
    1452:	7e 81       	ldd	r23, Y+6	; 0x06
    1454:	62 30       	cpi	r22, 0x02	; 2
    1456:	71 05       	cpc	r23, r1
    1458:	09 f4       	brne	.+2      	; 0x145c <DIO_enu_SetPinState+0x68>
    145a:	59 c0       	rjmp	.+178    	; 0x150e <DIO_enu_SetPinState+0x11a>
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	91 05       	cpc	r25, r1
    1464:	09 f4       	brne	.+2      	; 0x1468 <DIO_enu_SetPinState+0x74>
    1466:	7c c0       	rjmp	.+248    	; 0x1560 <DIO_enu_SetPinState+0x16c>
    1468:	a3 c0       	rjmp	.+326    	; 0x15b0 <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    146a:	ab e3       	ldi	r26, 0x3B	; 59
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_enu_SetPinState+0x92>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	2a 95       	dec	r18
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_enu_SetPinState+0x8e>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1490:	ab e3       	ldi	r26, 0x3B	; 59
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	eb e3       	ldi	r30, 0x3B	; 59
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	b9 01       	movw	r22, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_enu_SetPinState+0xbc>
    14ac:	66 0f       	add	r22, r22
    14ae:	77 1f       	adc	r23, r23
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_enu_SetPinState+0xb8>
    14b4:	cb 01       	movw	r24, r22
    14b6:	84 2b       	or	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	7a c0       	rjmp	.+244    	; 0x15b0 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    14bc:	a8 e3       	ldi	r26, 0x38	; 56
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e8 e3       	ldi	r30, 0x38	; 56
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_enu_SetPinState+0xe4>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	2a 95       	dec	r18
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_enu_SetPinState+0xe0>
    14dc:	80 95       	com	r24
    14de:	84 23       	and	r24, r20
    14e0:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    14e2:	a8 e3       	ldi	r26, 0x38	; 56
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e8 e3       	ldi	r30, 0x38	; 56
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	b9 01       	movw	r22, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_enu_SetPinState+0x10e>
    14fe:	66 0f       	add	r22, r22
    1500:	77 1f       	adc	r23, r23
    1502:	8a 95       	dec	r24
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_enu_SetPinState+0x10a>
    1506:	cb 01       	movw	r24, r22
    1508:	84 2b       	or	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	51 c0       	rjmp	.+162    	; 0x15b0 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    150e:	a5 e3       	ldi	r26, 0x35	; 53
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e5 e3       	ldi	r30, 0x35	; 53
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_enu_SetPinState+0x136>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	2a 95       	dec	r18
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_enu_SetPinState+0x132>
    152e:	80 95       	com	r24
    1530:	84 23       	and	r24, r20
    1532:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1534:	a5 e3       	ldi	r26, 0x35	; 53
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e3       	ldi	r30, 0x35	; 53
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	b9 01       	movw	r22, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <DIO_enu_SetPinState+0x160>
    1550:	66 0f       	add	r22, r22
    1552:	77 1f       	adc	r23, r23
    1554:	8a 95       	dec	r24
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <DIO_enu_SetPinState+0x15c>
    1558:	cb 01       	movw	r24, r22
    155a:	84 2b       	or	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	28 c0       	rjmp	.+80     	; 0x15b0 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    1560:	a2 e3       	ldi	r26, 0x32	; 50
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e2 e3       	ldi	r30, 0x32	; 50
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DIO_enu_SetPinState+0x188>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	2a 95       	dec	r18
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DIO_enu_SetPinState+0x184>
    1580:	80 95       	com	r24
    1582:	84 23       	and	r24, r20
    1584:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1586:	a2 e3       	ldi	r26, 0x32	; 50
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e2 e3       	ldi	r30, 0x32	; 50
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	b9 01       	movw	r22, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_enu_SetPinState+0x1b2>
    15a2:	66 0f       	add	r22, r22
    15a4:	77 1f       	adc	r23, r23
    15a6:	8a 95       	dec	r24
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_enu_SetPinState+0x1ae>
    15aa:	cb 01       	movw	r24, r22
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    15b0:	19 82       	std	Y+1, r1	; 0x01
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ba:	26 96       	adiw	r28, 0x06	; 6
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <DIO_enu_SetPinValue+0x6>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <DIO_enu_SetPinValue+0x8>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <DIO_enu_SetPinValue+0xa>
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	8a 83       	std	Y+2, r24	; 0x02
    15dc:	6b 83       	std	Y+3, r22	; 0x03
    15de:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	84 30       	cpi	r24, 0x04	; 4
    15e8:	08 f0       	brcs	.+2      	; 0x15ec <DIO_enu_SetPinValue+0x20>
    15ea:	db c0       	rjmp	.+438    	; 0x17a2 <DIO_enu_SetPinValue+0x1d6>
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	88 30       	cpi	r24, 0x08	; 8
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <DIO_enu_SetPinValue+0x28>
    15f2:	d7 c0       	rjmp	.+430    	; 0x17a2 <DIO_enu_SetPinValue+0x1d6>
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	82 30       	cpi	r24, 0x02	; 2
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <DIO_enu_SetPinValue+0x30>
    15fa:	d3 c0       	rjmp	.+422    	; 0x17a2 <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3e 83       	std	Y+6, r19	; 0x06
    1604:	2d 83       	std	Y+5, r18	; 0x05
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	91 05       	cpc	r25, r1
    160e:	09 f4       	brne	.+2      	; 0x1612 <DIO_enu_SetPinValue+0x46>
    1610:	43 c0       	rjmp	.+134    	; 0x1698 <DIO_enu_SetPinValue+0xcc>
    1612:	2d 81       	ldd	r18, Y+5	; 0x05
    1614:	3e 81       	ldd	r19, Y+6	; 0x06
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	2c f4       	brge	.+10     	; 0x1626 <DIO_enu_SetPinValue+0x5a>
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	71 f0       	breq	.+28     	; 0x1640 <DIO_enu_SetPinValue+0x74>
    1624:	bc c0       	rjmp	.+376    	; 0x179e <DIO_enu_SetPinValue+0x1d2>
    1626:	2d 81       	ldd	r18, Y+5	; 0x05
    1628:	3e 81       	ldd	r19, Y+6	; 0x06
    162a:	22 30       	cpi	r18, 0x02	; 2
    162c:	31 05       	cpc	r19, r1
    162e:	09 f4       	brne	.+2      	; 0x1632 <DIO_enu_SetPinValue+0x66>
    1630:	5f c0       	rjmp	.+190    	; 0x16f0 <DIO_enu_SetPinValue+0x124>
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	83 30       	cpi	r24, 0x03	; 3
    1638:	91 05       	cpc	r25, r1
    163a:	09 f4       	brne	.+2      	; 0x163e <DIO_enu_SetPinValue+0x72>
    163c:	85 c0       	rjmp	.+266    	; 0x1748 <DIO_enu_SetPinValue+0x17c>
    163e:	af c0       	rjmp	.+350    	; 0x179e <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	a1 f4       	brne	.+40     	; 0x166e <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    1646:	ab e3       	ldi	r26, 0x3B	; 59
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	eb e3       	ldi	r30, 0x3B	; 59
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_enu_SetPinValue+0x98>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_enu_SetPinValue+0x94>
    1668:	84 2b       	or	r24, r20
    166a:	8c 93       	st	X, r24
    166c:	98 c0       	rjmp	.+304    	; 0x179e <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    166e:	ab e3       	ldi	r26, 0x3B	; 59
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	eb e3       	ldi	r30, 0x3B	; 59
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_enu_SetPinValue+0xc0>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <DIO_enu_SetPinValue+0xbc>
    1690:	80 95       	com	r24
    1692:	84 23       	and	r24, r20
    1694:	8c 93       	st	X, r24
    1696:	83 c0       	rjmp	.+262    	; 0x179e <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    1698:	8c 81       	ldd	r24, Y+4	; 0x04
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	a1 f4       	brne	.+40     	; 0x16c6 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    169e:	a8 e3       	ldi	r26, 0x38	; 56
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e8 e3       	ldi	r30, 0x38	; 56
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_enu_SetPinValue+0xf0>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_enu_SetPinValue+0xec>
    16c0:	84 2b       	or	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	6c c0       	rjmp	.+216    	; 0x179e <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    16c6:	a8 e3       	ldi	r26, 0x38	; 56
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e8 e3       	ldi	r30, 0x38	; 56
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_enu_SetPinValue+0x118>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DIO_enu_SetPinValue+0x114>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	57 c0       	rjmp	.+174    	; 0x179e <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	a1 f4       	brne	.+40     	; 0x171e <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    16f6:	a5 e3       	ldi	r26, 0x35	; 53
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e5 e3       	ldi	r30, 0x35	; 53
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_enu_SetPinValue+0x148>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_enu_SetPinValue+0x144>
    1718:	84 2b       	or	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	40 c0       	rjmp	.+128    	; 0x179e <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    171e:	a5 e3       	ldi	r26, 0x35	; 53
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e3       	ldi	r30, 0x35	; 53
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_enu_SetPinValue+0x170>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_enu_SetPinValue+0x16c>
    1740:	80 95       	com	r24
    1742:	84 23       	and	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	2b c0       	rjmp	.+86     	; 0x179e <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	a1 f4       	brne	.+40     	; 0x1776 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    174e:	a2 e3       	ldi	r26, 0x32	; 50
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e2 e3       	ldi	r30, 0x32	; 50
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_enu_SetPinValue+0x1a0>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <DIO_enu_SetPinValue+0x19c>
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	14 c0       	rjmp	.+40     	; 0x179e <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    1776:	a2 e3       	ldi	r26, 0x32	; 50
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e2 e3       	ldi	r30, 0x32	; 50
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_enu_SetPinValue+0x1c8>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_enu_SetPinValue+0x1c4>
    1798:	80 95       	com	r24
    179a:	84 23       	and	r24, r20
    179c:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    179e:	19 82       	std	Y+1, r1	; 0x01
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a8:	26 96       	adiw	r28, 0x06	; 6
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <DIO_enu_TogglePinValue+0x6>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <DIO_enu_TogglePinValue+0x8>
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	8a 83       	std	Y+2, r24	; 0x02
    17ca:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	84 30       	cpi	r24, 0x04	; 4
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <DIO_enu_TogglePinValue+0x1e>
    17d6:	73 c0       	rjmp	.+230    	; 0x18be <DIO_enu_TogglePinValue+0x104>
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	88 30       	cpi	r24, 0x08	; 8
    17dc:	08 f0       	brcs	.+2      	; 0x17e0 <DIO_enu_TogglePinValue+0x26>
    17de:	6f c0       	rjmp	.+222    	; 0x18be <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	3d 83       	std	Y+5, r19	; 0x05
    17e8:	2c 83       	std	Y+4, r18	; 0x04
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	9d 81       	ldd	r25, Y+5	; 0x05
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	91 05       	cpc	r25, r1
    17f2:	49 f1       	breq	.+82     	; 0x1846 <DIO_enu_TogglePinValue+0x8c>
    17f4:	2c 81       	ldd	r18, Y+4	; 0x04
    17f6:	3d 81       	ldd	r19, Y+5	; 0x05
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	2c f4       	brge	.+10     	; 0x1808 <DIO_enu_TogglePinValue+0x4e>
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	61 f0       	breq	.+24     	; 0x181e <DIO_enu_TogglePinValue+0x64>
    1806:	5a c0       	rjmp	.+180    	; 0x18bc <DIO_enu_TogglePinValue+0x102>
    1808:	2c 81       	ldd	r18, Y+4	; 0x04
    180a:	3d 81       	ldd	r19, Y+5	; 0x05
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	71 f1       	breq	.+92     	; 0x186e <DIO_enu_TogglePinValue+0xb4>
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	9d 81       	ldd	r25, Y+5	; 0x05
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	91 05       	cpc	r25, r1
    181a:	e9 f1       	breq	.+122    	; 0x1896 <DIO_enu_TogglePinValue+0xdc>
    181c:	4f c0       	rjmp	.+158    	; 0x18bc <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    181e:	ab e3       	ldi	r26, 0x3B	; 59
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	eb e3       	ldi	r30, 0x3B	; 59
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <DIO_enu_TogglePinValue+0x82>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <DIO_enu_TogglePinValue+0x7e>
    1840:	84 27       	eor	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	3b c0       	rjmp	.+118    	; 0x18bc <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    1846:	a8 e3       	ldi	r26, 0x38	; 56
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e8 e3       	ldi	r30, 0x38	; 56
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_enu_TogglePinValue+0xaa>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_enu_TogglePinValue+0xa6>
    1868:	84 27       	eor	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	27 c0       	rjmp	.+78     	; 0x18bc <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    186e:	a5 e3       	ldi	r26, 0x35	; 53
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e5 e3       	ldi	r30, 0x35	; 53
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_enu_TogglePinValue+0xd2>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_enu_TogglePinValue+0xce>
    1890:	84 27       	eor	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	13 c0       	rjmp	.+38     	; 0x18bc <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    1896:	a2 e3       	ldi	r26, 0x32	; 50
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e2 e3       	ldi	r30, 0x32	; 50
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 2e       	mov	r0, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <DIO_enu_TogglePinValue+0xfa>
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <DIO_enu_TogglePinValue+0xf6>
    18b8:	84 27       	eor	r24, r20
    18ba:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    18bc:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	27 97       	sbiw	r28, 0x07	; 7
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	8a 83       	std	Y+2, r24	; 0x02
    18e6:	6b 83       	std	Y+3, r22	; 0x03
    18e8:	5d 83       	std	Y+5, r21	; 0x05
    18ea:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	09 f4       	brne	.+2      	; 0x18fa <DIO_enu_GetPinValue+0x2a>
    18f8:	7d c0       	rjmp	.+250    	; 0x19f4 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	84 30       	cpi	r24, 0x04	; 4
    18fe:	08 f0       	brcs	.+2      	; 0x1902 <DIO_enu_GetPinValue+0x32>
    1900:	76 c0       	rjmp	.+236    	; 0x19ee <DIO_enu_GetPinValue+0x11e>
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	88 30       	cpi	r24, 0x08	; 8
    1906:	08 f0       	brcs	.+2      	; 0x190a <DIO_enu_GetPinValue+0x3a>
    1908:	72 c0       	rjmp	.+228    	; 0x19ee <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	3f 83       	std	Y+7, r19	; 0x07
    1912:	2e 83       	std	Y+6, r18	; 0x06
    1914:	4e 81       	ldd	r20, Y+6	; 0x06
    1916:	5f 81       	ldd	r21, Y+7	; 0x07
    1918:	41 30       	cpi	r20, 0x01	; 1
    191a:	51 05       	cpc	r21, r1
    191c:	59 f1       	breq	.+86     	; 0x1974 <DIO_enu_GetPinValue+0xa4>
    191e:	8e 81       	ldd	r24, Y+6	; 0x06
    1920:	9f 81       	ldd	r25, Y+7	; 0x07
    1922:	82 30       	cpi	r24, 0x02	; 2
    1924:	91 05       	cpc	r25, r1
    1926:	34 f4       	brge	.+12     	; 0x1934 <DIO_enu_GetPinValue+0x64>
    1928:	2e 81       	ldd	r18, Y+6	; 0x06
    192a:	3f 81       	ldd	r19, Y+7	; 0x07
    192c:	21 15       	cp	r18, r1
    192e:	31 05       	cpc	r19, r1
    1930:	69 f0       	breq	.+26     	; 0x194c <DIO_enu_GetPinValue+0x7c>
    1932:	5b c0       	rjmp	.+182    	; 0x19ea <DIO_enu_GetPinValue+0x11a>
    1934:	4e 81       	ldd	r20, Y+6	; 0x06
    1936:	5f 81       	ldd	r21, Y+7	; 0x07
    1938:	42 30       	cpi	r20, 0x02	; 2
    193a:	51 05       	cpc	r21, r1
    193c:	79 f1       	breq	.+94     	; 0x199c <DIO_enu_GetPinValue+0xcc>
    193e:	8e 81       	ldd	r24, Y+6	; 0x06
    1940:	9f 81       	ldd	r25, Y+7	; 0x07
    1942:	83 30       	cpi	r24, 0x03	; 3
    1944:	91 05       	cpc	r25, r1
    1946:	09 f4       	brne	.+2      	; 0x194a <DIO_enu_GetPinValue+0x7a>
    1948:	3d c0       	rjmp	.+122    	; 0x19c4 <DIO_enu_GetPinValue+0xf4>
    194a:	4f c0       	rjmp	.+158    	; 0x19ea <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    194c:	e9 e3       	ldi	r30, 0x39	; 57
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a9 01       	movw	r20, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <DIO_enu_GetPinValue+0x94>
    1960:	55 95       	asr	r21
    1962:	47 95       	ror	r20
    1964:	8a 95       	dec	r24
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <DIO_enu_GetPinValue+0x90>
    1968:	ca 01       	movw	r24, r20
    196a:	81 70       	andi	r24, 0x01	; 1
    196c:	ec 81       	ldd	r30, Y+4	; 0x04
    196e:	fd 81       	ldd	r31, Y+5	; 0x05
    1970:	80 83       	st	Z, r24
    1972:	3b c0       	rjmp	.+118    	; 0x19ea <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    1974:	e6 e3       	ldi	r30, 0x36	; 54
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a9 01       	movw	r20, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <DIO_enu_GetPinValue+0xbc>
    1988:	55 95       	asr	r21
    198a:	47 95       	ror	r20
    198c:	8a 95       	dec	r24
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <DIO_enu_GetPinValue+0xb8>
    1990:	ca 01       	movw	r24, r20
    1992:	81 70       	andi	r24, 0x01	; 1
    1994:	ec 81       	ldd	r30, Y+4	; 0x04
    1996:	fd 81       	ldd	r31, Y+5	; 0x05
    1998:	80 83       	st	Z, r24
    199a:	27 c0       	rjmp	.+78     	; 0x19ea <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    199c:	e3 e3       	ldi	r30, 0x33	; 51
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	a9 01       	movw	r20, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <DIO_enu_GetPinValue+0xe4>
    19b0:	55 95       	asr	r21
    19b2:	47 95       	ror	r20
    19b4:	8a 95       	dec	r24
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <DIO_enu_GetPinValue+0xe0>
    19b8:	ca 01       	movw	r24, r20
    19ba:	81 70       	andi	r24, 0x01	; 1
    19bc:	ec 81       	ldd	r30, Y+4	; 0x04
    19be:	fd 81       	ldd	r31, Y+5	; 0x05
    19c0:	80 83       	st	Z, r24
    19c2:	13 c0       	rjmp	.+38     	; 0x19ea <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    19c4:	e0 e3       	ldi	r30, 0x30	; 48
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a9 01       	movw	r20, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_enu_GetPinValue+0x10c>
    19d8:	55 95       	asr	r21
    19da:	47 95       	ror	r20
    19dc:	8a 95       	dec	r24
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_enu_GetPinValue+0x108>
    19e0:	ca 01       	movw	r24, r20
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	ec 81       	ldd	r30, Y+4	; 0x04
    19e6:	fd 81       	ldd	r31, Y+5	; 0x05
    19e8:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    19ea:	19 82       	std	Y+1, r1	; 0x01
    19ec:	05 c0       	rjmp	.+10     	; 0x19f8 <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fa:	27 96       	adiw	r28, 0x07	; 7
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <SW_enu_Initialization+0x6>
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    1a1a:	19 82       	std	Y+1, r1	; 0x01
    1a1c:	34 c0       	rjmp	.+104    	; 0x1a86 <SW_enu_Initialization+0x7a>
    {
        
       Local_u8_ErrorFlag = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	c9 01       	movw	r24, r18
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	82 0f       	add	r24, r18
    1a2c:	93 1f       	adc	r25, r19
    1a2e:	fc 01       	movw	r30, r24
    1a30:	ed 58       	subi	r30, 0x8D	; 141
    1a32:	fe 4f       	sbci	r31, 0xFE	; 254
    1a34:	40 81       	ld	r20, Z
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	c9 01       	movw	r24, r18
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	82 0f       	add	r24, r18
    1a44:	93 1f       	adc	r25, r19
    1a46:	fc 01       	movw	r30, r24
    1a48:	ec 58       	subi	r30, 0x8C	; 140
    1a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4c:	90 81       	ld	r25, Z
    1a4e:	84 2f       	mov	r24, r20
    1a50:	69 2f       	mov	r22, r25
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
    1a58:	8a 83       	std	Y+2, r24	; 0x02
       if(Local_u8_ErrorFlag != ES_OK)
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	88 23       	and	r24, r24
    1a5e:	c1 f4       	brne	.+48     	; 0x1a90 <SW_enu_Initialization+0x84>
       {
        break;
       }
       Local_u8_ErrorFlag = (SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	c9 01       	movw	r24, r18
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	82 0f       	add	r24, r18
    1a6e:	93 1f       	adc	r25, r19
    1a70:	fc 01       	movw	r30, r24
    1a72:	eb 58       	subi	r30, 0x8B	; 139
    1a74:	fe 4f       	sbci	r31, 0xFE	; 254
    1a76:	80 81       	ld	r24, Z
    1a78:	8a 83       	std	Y+2, r24	; 0x02

        if(Local_u8_ErrorFlag != ES_OK)
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	88 23       	and	r24, r24
    1a7e:	41 f4       	brne	.+16     	; 0x1a90 <SW_enu_Initialization+0x84>
extern ErrorState_t SW_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	8f 5f       	subi	r24, 0xFF	; 255
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	90 91 72 01 	lds	r25, 0x0172
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	89 17       	cp	r24, r25
    1a8e:	38 f2       	brcs	.-114    	; 0x1a1e <SW_enu_Initialization+0x12>
       {
        break;
       }
    }

    Local_u8_ErrorFlag = ES_OK;
    1a90:	1a 82       	std	Y+2, r1	; 0x02


    return Local_u8_ErrorFlag;
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <SW_enu_GetSwValue+0x6>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <SW_enu_GetSwValue+0x8>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	8a 83       	std	Y+2, r24	; 0x02
    1aac:	7c 83       	std	Y+4, r23	; 0x04
    1aae:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	49 f1       	breq	.+82     	; 0x1b0e <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    1abc:	90 91 72 01 	lds	r25, 0x0172
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	98 17       	cp	r25, r24
    1ac4:	08 f1       	brcs	.+66     	; 0x1b08 <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	c9 01       	movw	r24, r18
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	82 0f       	add	r24, r18
    1ad4:	93 1f       	adc	r25, r19
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	ed 58       	subi	r30, 0x8D	; 141
    1ada:	fe 4f       	sbci	r31, 0xFE	; 254
    1adc:	40 81       	ld	r20, Z
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	c9 01       	movw	r24, r18
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	82 0f       	add	r24, r18
    1aec:	93 1f       	adc	r25, r19
    1aee:	fc 01       	movw	r30, r24
    1af0:	ec 58       	subi	r30, 0x8C	; 140
    1af2:	fe 4f       	sbci	r31, 0xFE	; 254
    1af4:	90 81       	ld	r25, Z
    1af6:	2b 81       	ldd	r18, Y+3	; 0x03
    1af8:	3c 81       	ldd	r19, Y+4	; 0x04
    1afa:	84 2f       	mov	r24, r20
    1afc:	69 2f       	mov	r22, r25
    1afe:	a9 01       	movw	r20, r18
    1b00:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <DIO_enu_GetPinValue>
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1b0e:	83 e0       	ldi	r24, 0x03	; 3
    1b10:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1b12:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <Relay_enu_Initialization+0x6>
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1b30:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1b32:	19 82       	std	Y+1, r1	; 0x01
    1b34:	31 c0       	rjmp	.+98     	; 0x1b98 <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	fc 01       	movw	r30, r24
    1b42:	e3 58       	subi	r30, 0x83	; 131
    1b44:	fe 4f       	sbci	r31, 0xFE	; 254
    1b46:	20 81       	ld	r18, Z
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	88 2f       	mov	r24, r24
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	fc 01       	movw	r30, r24
    1b54:	e2 58       	subi	r30, 0x82	; 130
    1b56:	fe 4f       	sbci	r31, 0xFE	; 254
    1b58:	90 81       	ld	r25, Z
    1b5a:	82 2f       	mov	r24, r18
    1b5c:	69 2f       	mov	r22, r25
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	fc 01       	movw	r30, r24
    1b70:	e3 58       	subi	r30, 0x83	; 131
    1b72:	fe 4f       	sbci	r31, 0xFE	; 254
    1b74:	20 81       	ld	r18, Z
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	88 2f       	mov	r24, r24
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	fc 01       	movw	r30, r24
    1b82:	e2 58       	subi	r30, 0x82	; 130
    1b84:	fe 4f       	sbci	r31, 0xFE	; 254
    1b86:	90 81       	ld	r25, Z
    1b88:	82 2f       	mov	r24, r18
    1b8a:	69 2f       	mov	r22, r25
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	8f 5f       	subi	r24, 0xFF	; 255
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	90 91 7c 01 	lds	r25, 0x017C
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	89 17       	cp	r24, r25
    1ba0:	50 f2       	brcs	.-108    	; 0x1b36 <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    1ba2:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <Relay_enu_TuronOnRelay+0x6>
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    1bc0:	90 91 7c 01 	lds	r25, 0x017C
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	89 17       	cp	r24, r25
    1bc8:	c8 f4       	brcc	.+50     	; 0x1bfc <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	e3 58       	subi	r30, 0x83	; 131
    1bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bda:	20 81       	ld	r18, Z
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	fc 01       	movw	r30, r24
    1be8:	e2 58       	subi	r30, 0x82	; 130
    1bea:	fe 4f       	sbci	r31, 0xFE	; 254
    1bec:	90 81       	ld	r25, Z
    1bee:	82 2f       	mov	r24, r18
    1bf0:	69 2f       	mov	r22, r25
    1bf2:	41 e0       	ldi	r20, 0x01	; 1
    1bf4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <Relay_enu_TuronOffRelay+0x6>
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    1c1c:	90 91 7c 01 	lds	r25, 0x017C
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	89 17       	cp	r24, r25
    1c24:	c8 f4       	brcc	.+50     	; 0x1c58 <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	fc 01       	movw	r30, r24
    1c32:	e3 58       	subi	r30, 0x83	; 131
    1c34:	fe 4f       	sbci	r31, 0xFE	; 254
    1c36:	20 81       	ld	r18, Z
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	88 2f       	mov	r24, r24
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	fc 01       	movw	r30, r24
    1c44:	e2 58       	subi	r30, 0x82	; 130
    1c46:	fe 4f       	sbci	r31, 0xFE	; 254
    1c48:	90 81       	ld	r25, Z
    1c4a:	82 2f       	mov	r24, r18
    1c4c:	69 2f       	mov	r22, r25
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <Relay_enu_TurnOnAllRelays+0x6>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1c76:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1c78:	19 82       	std	Y+1, r1	; 0x01
    1c7a:	1a c0       	rjmp	.+52     	; 0x1cb0 <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	fc 01       	movw	r30, r24
    1c88:	e3 58       	subi	r30, 0x83	; 131
    1c8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8c:	20 81       	ld	r18, Z
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	fc 01       	movw	r30, r24
    1c9a:	e2 58       	subi	r30, 0x82	; 130
    1c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9e:	90 81       	ld	r25, Z
    1ca0:	82 2f       	mov	r24, r18
    1ca2:	69 2f       	mov	r22, r25
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	8f 5f       	subi	r24, 0xFF	; 255
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	90 91 7c 01 	lds	r25, 0x017C
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	89 17       	cp	r24, r25
    1cb8:	08 f3       	brcs	.-62     	; 0x1c7c <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <Relay_enu_TurnOffAllRelays+0x6>
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1cd8:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1cda:	19 82       	std	Y+1, r1	; 0x01
    1cdc:	1a c0       	rjmp	.+52     	; 0x1d12 <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	fc 01       	movw	r30, r24
    1cea:	e3 58       	subi	r30, 0x83	; 131
    1cec:	fe 4f       	sbci	r31, 0xFE	; 254
    1cee:	20 81       	ld	r18, Z
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	e2 58       	subi	r30, 0x82	; 130
    1cfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1d00:	90 81       	ld	r25, Z
    1d02:	82 2f       	mov	r24, r18
    1d04:	69 2f       	mov	r22, r25
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	8f 5f       	subi	r24, 0xFF	; 255
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	90 91 7c 01 	lds	r25, 0x017C
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	89 17       	cp	r24, r25
    1d1a:	08 f3       	brcs	.-62     	; 0x1cde <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <LED_enu_Initialization+0x6>
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    1d36:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    1d38:	19 82       	std	Y+1, r1	; 0x01
    1d3a:	31 c0       	rjmp	.+98     	; 0x1d9e <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	88 2f       	mov	r24, r24
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	fc 01       	movw	r30, r24
    1d48:	e0 58       	subi	r30, 0x80	; 128
    1d4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d4c:	20 81       	ld	r18, Z
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	fc 01       	movw	r30, r24
    1d5a:	ef 57       	subi	r30, 0x7F	; 127
    1d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5e:	90 81       	ld	r25, Z
    1d60:	82 2f       	mov	r24, r18
    1d62:	69 2f       	mov	r22, r25
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	88 2f       	mov	r24, r24
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	fc 01       	movw	r30, r24
    1d76:	e0 58       	subi	r30, 0x80	; 128
    1d78:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7a:	20 81       	ld	r18, Z
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	88 2f       	mov	r24, r24
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	fc 01       	movw	r30, r24
    1d88:	ef 57       	subi	r30, 0x7F	; 127
    1d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d8c:	90 81       	ld	r25, Z
    1d8e:	82 2f       	mov	r24, r18
    1d90:	69 2f       	mov	r22, r25
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	8f 5f       	subi	r24, 0xFF	; 255
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	90 91 7f 01 	lds	r25, 0x017F
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	89 17       	cp	r24, r25
    1da6:	50 f2       	brcs	.-108    	; 0x1d3c <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    1da8:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <LED_enu_TurnOnLED+0x6>
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    1dc6:	90 91 7f 01 	lds	r25, 0x017F
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	89 17       	cp	r24, r25
    1dce:	c8 f4       	brcc	.+50     	; 0x1e02 <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	88 2f       	mov	r24, r24
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	fc 01       	movw	r30, r24
    1ddc:	e0 58       	subi	r30, 0x80	; 128
    1dde:	fe 4f       	sbci	r31, 0xFE	; 254
    1de0:	20 81       	ld	r18, Z
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	fc 01       	movw	r30, r24
    1dee:	ef 57       	subi	r30, 0x7F	; 127
    1df0:	fe 4f       	sbci	r31, 0xFE	; 254
    1df2:	90 81       	ld	r25, Z
    1df4:	82 2f       	mov	r24, r18
    1df6:	69 2f       	mov	r22, r25
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <LED_enu_TurnOffLED+0x6>
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    1e22:	90 91 7f 01 	lds	r25, 0x017F
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	98 17       	cp	r25, r24
    1e2a:	c8 f0       	brcs	.+50     	; 0x1e5e <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	88 2f       	mov	r24, r24
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	fc 01       	movw	r30, r24
    1e38:	e0 58       	subi	r30, 0x80	; 128
    1e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3c:	20 81       	ld	r18, Z
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	fc 01       	movw	r30, r24
    1e4a:	ef 57       	subi	r30, 0x7F	; 127
    1e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e4e:	90 81       	ld	r25, Z
    1e50:	82 2f       	mov	r24, r18
    1e52:	69 2f       	mov	r22, r25
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <LED_enu_TurnOnAllLEDs+0x6>
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1e7c:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1e7e:	19 82       	std	Y+1, r1	; 0x01
    1e80:	1a c0       	rjmp	.+52     	; 0x1eb6 <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	e0 58       	subi	r30, 0x80	; 128
    1e90:	fe 4f       	sbci	r31, 0xFE	; 254
    1e92:	20 81       	ld	r18, Z
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	ef 57       	subi	r30, 0x7F	; 127
    1ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea4:	90 81       	ld	r25, Z
    1ea6:	82 2f       	mov	r24, r18
    1ea8:	69 2f       	mov	r22, r25
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	90 91 7f 01 	lds	r25, 0x017F
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	89 17       	cp	r24, r25
    1ebe:	08 f3       	brcs	.-62     	; 0x1e82 <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    1ec0:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <LED_enu_TurnOffAllLEDs+0x6>
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1edc:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1ede:	19 82       	std	Y+1, r1	; 0x01
    1ee0:	1a c0       	rjmp	.+52     	; 0x1f16 <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	88 2f       	mov	r24, r24
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	fc 01       	movw	r30, r24
    1eee:	e0 58       	subi	r30, 0x80	; 128
    1ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef2:	20 81       	ld	r18, Z
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	88 2f       	mov	r24, r24
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	fc 01       	movw	r30, r24
    1f00:	ef 57       	subi	r30, 0x7F	; 127
    1f02:	fe 4f       	sbci	r31, 0xFE	; 254
    1f04:	90 81       	ld	r25, Z
    1f06:	82 2f       	mov	r24, r18
    1f08:	69 2f       	mov	r22, r25
    1f0a:	40 e0       	ldi	r20, 0x00	; 0
    1f0c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	8f 5f       	subi	r24, 0xFF	; 255
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	90 91 7f 01 	lds	r25, 0x017F
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	89 17       	cp	r24, r25
    1f1e:	08 f3       	brcs	.-62     	; 0x1ee2 <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    1f20:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	6d 97       	sbiw	r28, 0x1d	; 29
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	8d 8f       	std	Y+29, r24	; 0x1d
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	ac e0       	ldi	r26, 0x0C	; 12
    1f4c:	b2 e4       	ldi	r27, 0x42	; 66
    1f4e:	89 8f       	std	Y+25, r24	; 0x19
    1f50:	9a 8f       	std	Y+26, r25	; 0x1a
    1f52:	ab 8f       	std	Y+27, r26	; 0x1b
    1f54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f56:	69 8d       	ldd	r22, Y+25	; 0x19
    1f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	4a e7       	ldi	r20, 0x7A	; 122
    1f64:	55 e4       	ldi	r21, 0x45	; 69
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	8d 8b       	std	Y+21, r24	; 0x15
    1f70:	9e 8b       	std	Y+22, r25	; 0x16
    1f72:	af 8b       	std	Y+23, r26	; 0x17
    1f74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f76:	6d 89       	ldd	r22, Y+21	; 0x15
    1f78:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e8       	ldi	r20, 0x80	; 128
    1f84:	5f e3       	ldi	r21, 0x3F	; 63
    1f86:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1f8a:	88 23       	and	r24, r24
    1f8c:	2c f4       	brge	.+10     	; 0x1f98 <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9c 8b       	std	Y+20, r25	; 0x14
    1f94:	8b 8b       	std	Y+19, r24	; 0x13
    1f96:	3f c0       	rjmp	.+126    	; 0x2016 <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    1f98:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	3f ef       	ldi	r19, 0xFF	; 255
    1fa4:	4f e7       	ldi	r20, 0x7F	; 127
    1fa6:	57 e4       	ldi	r21, 0x47	; 71
    1fa8:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1fac:	18 16       	cp	r1, r24
    1fae:	4c f5       	brge	.+82     	; 0x2002 <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e2       	ldi	r20, 0x20	; 32
    1fbe:	51 e4       	ldi	r21, 0x41	; 65
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9c 8b       	std	Y+20, r25	; 0x14
    1fd6:	8b 8b       	std	Y+19, r24	; 0x13
    1fd8:	0f c0       	rjmp	.+30     	; 0x1ff8 <LCD_enu_Initialization+0xca>
    1fda:	80 e9       	ldi	r24, 0x90	; 144
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	9a 8b       	std	Y+18, r25	; 0x12
    1fe0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fe2:	89 89       	ldd	r24, Y+17	; 0x11
    1fe4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <LCD_enu_Initialization+0xb8>
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	9c 8b       	std	Y+20, r25	; 0x14
    1ff6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	69 f7       	brne	.-38     	; 0x1fda <LCD_enu_Initialization+0xac>
    2000:	14 c0       	rjmp	.+40     	; 0x202a <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2002:	6d 89       	ldd	r22, Y+21	; 0x15
    2004:	7e 89       	ldd	r23, Y+22	; 0x16
    2006:	8f 89       	ldd	r24, Y+23	; 0x17
    2008:	98 8d       	ldd	r25, Y+24	; 0x18
    200a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	9c 8b       	std	Y+20, r25	; 0x14
    2014:	8b 8b       	std	Y+19, r24	; 0x13
    2016:	8b 89       	ldd	r24, Y+19	; 0x13
    2018:	9c 89       	ldd	r25, Y+20	; 0x14
    201a:	98 8b       	std	Y+16, r25	; 0x10
    201c:	8f 87       	std	Y+15, r24	; 0x0f
    201e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2020:	98 89       	ldd	r25, Y+16	; 0x10
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <LCD_enu_Initialization+0xf4>
    2026:	98 8b       	std	Y+16, r25	; 0x10
    2028:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	62 e0       	ldi	r22, 0x02	; 2
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	63 e0       	ldi	r22, 0x03	; 3
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	67 e0       	ldi	r22, 0x07	; 7
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	66 e0       	ldi	r22, 0x06	; 6
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	65 e0       	ldi	r22, 0x05	; 5
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	64 e0       	ldi	r22, 0x04	; 4
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	61 e0       	ldi	r22, 0x01	; 1
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	67 e0       	ldi	r22, 0x07	; 7
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	66 e0       	ldi	r22, 0x06	; 6
    2088:	40 e0       	ldi	r20, 0x00	; 0
    208a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	65 e0       	ldi	r22, 0x05	; 5
    2092:	41 e0       	ldi	r20, 0x01	; 1
    2094:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	63 e0       	ldi	r22, 0x03	; 3
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e8       	ldi	r26, 0x80	; 128
    20b2:	bf e3       	ldi	r27, 0x3F	; 63
    20b4:	8b 87       	std	Y+11, r24	; 0x0b
    20b6:	9c 87       	std	Y+12, r25	; 0x0c
    20b8:	ad 87       	std	Y+13, r26	; 0x0d
    20ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a e7       	ldi	r20, 0x7A	; 122
    20ca:	55 e4       	ldi	r21, 0x45	; 69
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	8f 83       	std	Y+7, r24	; 0x07
    20d6:	98 87       	std	Y+8, r25	; 0x08
    20d8:	a9 87       	std	Y+9, r26	; 0x09
    20da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20dc:	6f 81       	ldd	r22, Y+7	; 0x07
    20de:	78 85       	ldd	r23, Y+8	; 0x08
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	0f c0       	rjmp	.+30     	; 0x215e <LCD_enu_Initialization+0x230>
    2140:	80 e9       	ldi	r24, 0x90	; 144
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_enu_Initialization+0x21e>
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <LCD_enu_Initialization+0x212>
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	6f 81       	ldd	r22, Y+7	; 0x07
    216a:	78 85       	ldd	r23, Y+8	; 0x08
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	9a 83       	std	Y+2, r25	; 0x02
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_enu_Initialization+0x25a>
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	63 e0       	ldi	r22, 0x03	; 3
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	61 e0       	ldi	r22, 0x01	; 1
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    21a4:	88 e2       	ldi	r24, 0x28	; 40
    21a6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0F);
    21b4:	8f e0       	ldi	r24, 0x0F	; 15
    21b6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	61 e0       	ldi	r22, 0x01	; 1
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	61 e0       	ldi	r22, 0x01	; 1
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    21d4:	86 e0       	ldi	r24, 0x06	; 6
    21d6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    21da:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    21dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    21de:	6d 96       	adiw	r28, 0x1d	; 29
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <LCD_enu_SendCommand+0x6>
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    2210:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    2212:	89 81       	ldd	r24, Y+1	; 0x01

}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	00 d0       	rcall	.+0      	; 0x2224 <LCD_enu_SendData+0x6>
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	61 e0       	ldi	r22, 0x01	; 1
    2232:	41 e0       	ldi	r20, 0x01	; 1
    2234:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    223e:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    2240:	89 81       	ldd	r24, Y+1	; 0x01

}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <LCD_enu_GoToPosition+0x6>
    2252:	00 d0       	rcall	.+0      	; 0x2254 <LCD_enu_GoToPosition+0x8>
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	8a 83       	std	Y+2, r24	; 0x02
    225a:	6b 83       	std	Y+3, r22	; 0x03
    225c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	81 31       	cpi	r24, 0x11	; 17
    2266:	88 f5       	brcc	.+98     	; 0x22ca <LCD_enu_GoToPosition+0x7e>
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	88 23       	and	r24, r24
    226c:	71 f1       	breq	.+92     	; 0x22ca <LCD_enu_GoToPosition+0x7e>
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	83 30       	cpi	r24, 0x03	; 3
    2272:	58 f5       	brcc	.+86     	; 0x22ca <LCD_enu_GoToPosition+0x7e>
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	88 23       	and	r24, r24
    2278:	41 f1       	breq	.+80     	; 0x22ca <LCD_enu_GoToPosition+0x7e>
    227a:	8c 81       	ldd	r24, Y+4	; 0x04
    227c:	85 30       	cpi	r24, 0x05	; 5
    227e:	28 f5       	brcc	.+74     	; 0x22ca <LCD_enu_GoToPosition+0x7e>
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	88 23       	and	r24, r24
    2284:	11 f1       	breq	.+68     	; 0x22ca <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    2290:	8c 81       	ldd	r24, Y+4	; 0x04
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9c 01       	movw	r18, r24
    2298:	21 50       	subi	r18, 0x01	; 1
    229a:	30 40       	sbci	r19, 0x00	; 0
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	82 0f       	add	r24, r18
    22ae:	93 1f       	adc	r25, r19
    22b0:	82 95       	swap	r24
    22b2:	92 95       	swap	r25
    22b4:	90 7f       	andi	r25, 0xF0	; 240
    22b6:	98 27       	eor	r25, r24
    22b8:	80 7f       	andi	r24, 0xF0	; 240
    22ba:	98 27       	eor	r25, r24
    22bc:	98 2f       	mov	r25, r24
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	89 0f       	add	r24, r25
    22c2:	81 58       	subi	r24, 0x81	; 129
    22c4:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    22ca:	82 e0       	ldi	r24, 0x02	; 2
    22cc:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <LCD_enu_SendString+0x6>
    22e4:	0f 92       	push	r0
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	9b 83       	std	Y+3, r25	; 0x03
    22ec:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	9b 81       	ldd	r25, Y+3	; 0x03
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	c1 f0       	breq	.+48     	; 0x232a <LCD_enu_SendString+0x4c>
    22fa:	10 c0       	rjmp	.+32     	; 0x231c <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	61 e0       	ldi	r22, 0x01	; 1
    2300:	41 e0       	ldi	r20, 0x01	; 1
    2302:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    2306:	ea 81       	ldd	r30, Y+2	; 0x02
    2308:	fb 81       	ldd	r31, Y+3	; 0x03
    230a:	20 81       	ld	r18, Z
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	9b 81       	ldd	r25, Y+3	; 0x03
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	9b 83       	std	Y+3, r25	; 0x03
    2314:	8a 83       	std	Y+2, r24	; 0x02
    2316:	82 2f       	mov	r24, r18
    2318:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    231c:	ea 81       	ldd	r30, Y+2	; 0x02
    231e:	fb 81       	ldd	r31, Y+3	; 0x03
    2320:	80 81       	ld	r24, Z
    2322:	88 23       	and	r24, r24
    2324:	59 f7       	brne	.-42     	; 0x22fc <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    2326:	19 82       	std	Y+1, r1	; 0x01
    2328:	02 c0       	rjmp	.+4      	; 0x232e <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    232a:	83 e0       	ldi	r24, 0x03	; 3
    232c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    232e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	00 d0       	rcall	.+0      	; 0x2342 <LCD_enu_ClearPage+0x6>
    2342:	0f 92       	push	r0
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	88 23       	and	r24, r24
    2352:	09 f4       	brne	.+2      	; 0x2356 <LCD_enu_ClearPage+0x1a>
    2354:	49 c0       	rjmp	.+146    	; 0x23e8 <LCD_enu_ClearPage+0xac>
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	85 30       	cpi	r24, 0x05	; 5
    235a:	08 f0       	brcs	.+2      	; 0x235e <LCD_enu_ClearPage+0x22>
    235c:	45 c0       	rjmp	.+138    	; 0x23e8 <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    235e:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	61 e0       	ldi	r22, 0x01	; 1
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	07 96       	adiw	r24, 0x07	; 7
    2372:	82 95       	swap	r24
    2374:	92 95       	swap	r25
    2376:	90 7f       	andi	r25, 0xF0	; 240
    2378:	98 27       	eor	r25, r24
    237a:	80 7f       	andi	r24, 0xF0	; 240
    237c:	98 27       	eor	r25, r24
    237e:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	61 e0       	ldi	r22, 0x01	; 1
    2386:	41 e0       	ldi	r20, 0x01	; 1
    2388:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    238c:	19 82       	std	Y+1, r1	; 0x01
    238e:	06 c0       	rjmp	.+12     	; 0x239c <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    2390:	80 e2       	ldi	r24, 0x20	; 32
    2392:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	8f 5f       	subi	r24, 0xFF	; 255
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	80 31       	cpi	r24, 0x10	; 16
    23a0:	b8 f3       	brcs	.-18     	; 0x2390 <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	61 e0       	ldi	r22, 0x01	; 1
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0b 96       	adiw	r24, 0x0b	; 11
    23b4:	82 95       	swap	r24
    23b6:	92 95       	swap	r25
    23b8:	90 7f       	andi	r25, 0xF0	; 240
    23ba:	98 27       	eor	r25, r24
    23bc:	80 7f       	andi	r24, 0xF0	; 240
    23be:	98 27       	eor	r25, r24
    23c0:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	61 e0       	ldi	r22, 0x01	; 1
    23c8:	41 e0       	ldi	r20, 0x01	; 1
    23ca:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    23ce:	19 82       	std	Y+1, r1	; 0x01
    23d0:	06 c0       	rjmp	.+12     	; 0x23de <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    23d2:	80 e2       	ldi	r24, 0x20	; 32
    23d4:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	8f 5f       	subi	r24, 0xFF	; 255
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	80 31       	cpi	r24, 0x10	; 16
    23e2:	b8 f3       	brcs	.-18     	; 0x23d2 <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    23e4:	1a 82       	std	Y+2, r1	; 0x02
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02

}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    23fa:	cf 92       	push	r12
    23fc:	ef 92       	push	r14
    23fe:	0f 93       	push	r16
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	2e 97       	sbiw	r28, 0x0e	; 14
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	6f 83       	std	Y+7, r22	; 0x07
    241a:	48 87       	std	Y+8, r20	; 0x08
    241c:	29 87       	std	Y+9, r18	; 0x09
    241e:	0a 87       	std	Y+10, r16	; 0x0a
    2420:	eb 86       	std	Y+11, r14	; 0x0b
    2422:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	09 f4       	brne	.+2      	; 0x2432 <LCD_enu_DrawSpecialCharacter+0x38>
    2430:	b3 c0       	rjmp	.+358    	; 0x2598 <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    2432:	1b 82       	std	Y+3, r1	; 0x03
    2434:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    2436:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    2438:	8f 81       	ldd	r24, Y+7	; 0x07
    243a:	88 23       	and	r24, r24
    243c:	09 f4       	brne	.+2      	; 0x2440 <LCD_enu_DrawSpecialCharacter+0x46>
    243e:	a9 c0       	rjmp	.+338    	; 0x2592 <LCD_enu_DrawSpecialCharacter+0x198>
    2440:	8f 81       	ldd	r24, Y+7	; 0x07
    2442:	89 30       	cpi	r24, 0x09	; 9
    2444:	08 f0       	brcs	.+2      	; 0x2448 <LCD_enu_DrawSpecialCharacter+0x4e>
    2446:	a5 c0       	rjmp	.+330    	; 0x2592 <LCD_enu_DrawSpecialCharacter+0x198>
    2448:	88 85       	ldd	r24, Y+8	; 0x08
    244a:	88 30       	cpi	r24, 0x08	; 8
    244c:	08 f0       	brcs	.+2      	; 0x2450 <LCD_enu_DrawSpecialCharacter+0x56>
    244e:	a1 c0       	rjmp	.+322    	; 0x2592 <LCD_enu_DrawSpecialCharacter+0x198>
    2450:	88 85       	ldd	r24, Y+8	; 0x08
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	88 e0       	ldi	r24, 0x08	; 8
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	ac 01       	movw	r20, r24
    245c:	42 1b       	sub	r20, r18
    245e:	53 0b       	sbc	r21, r19
    2460:	9a 01       	movw	r18, r20
    2462:	8f 81       	ldd	r24, Y+7	; 0x07
    2464:	88 2f       	mov	r24, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	28 17       	cp	r18, r24
    246a:	39 07       	cpc	r19, r25
    246c:	0c f4       	brge	.+2      	; 0x2470 <LCD_enu_DrawSpecialCharacter+0x76>
    246e:	91 c0       	rjmp	.+290    	; 0x2592 <LCD_enu_DrawSpecialCharacter+0x198>
    2470:	89 85       	ldd	r24, Y+9	; 0x09
    2472:	88 23       	and	r24, r24
    2474:	09 f4       	brne	.+2      	; 0x2478 <LCD_enu_DrawSpecialCharacter+0x7e>
    2476:	8d c0       	rjmp	.+282    	; 0x2592 <LCD_enu_DrawSpecialCharacter+0x198>
    2478:	89 85       	ldd	r24, Y+9	; 0x09
    247a:	83 30       	cpi	r24, 0x03	; 3
    247c:	08 f0       	brcs	.+2      	; 0x2480 <LCD_enu_DrawSpecialCharacter+0x86>
    247e:	89 c0       	rjmp	.+274    	; 0x2592 <LCD_enu_DrawSpecialCharacter+0x198>
    2480:	8a 85       	ldd	r24, Y+10	; 0x0a
    2482:	88 23       	and	r24, r24
    2484:	09 f4       	brne	.+2      	; 0x2488 <LCD_enu_DrawSpecialCharacter+0x8e>
    2486:	85 c0       	rjmp	.+266    	; 0x2592 <LCD_enu_DrawSpecialCharacter+0x198>
    2488:	8a 85       	ldd	r24, Y+10	; 0x0a
    248a:	81 31       	cpi	r24, 0x11	; 17
    248c:	08 f0       	brcs	.+2      	; 0x2490 <LCD_enu_DrawSpecialCharacter+0x96>
    248e:	81 c0       	rjmp	.+258    	; 0x2592 <LCD_enu_DrawSpecialCharacter+0x198>
    2490:	8c 85       	ldd	r24, Y+12	; 0x0c
    2492:	82 30       	cpi	r24, 0x02	; 2
    2494:	08 f0       	brcs	.+2      	; 0x2498 <LCD_enu_DrawSpecialCharacter+0x9e>
    2496:	7d c0       	rjmp	.+250    	; 0x2592 <LCD_enu_DrawSpecialCharacter+0x198>
    2498:	8b 85       	ldd	r24, Y+11	; 0x0b
    249a:	85 30       	cpi	r24, 0x05	; 5
    249c:	08 f0       	brcs	.+2      	; 0x24a0 <LCD_enu_DrawSpecialCharacter+0xa6>
    249e:	79 c0       	rjmp	.+242    	; 0x2592 <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    24a0:	19 82       	std	Y+1, r1	; 0x01
    24a2:	19 c0       	rjmp	.+50     	; 0x24d6 <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	8d 81       	ldd	r24, Y+5	; 0x05
    24ac:	9e 81       	ldd	r25, Y+6	; 0x06
    24ae:	82 0f       	add	r24, r18
    24b0:	93 1f       	adc	r25, r19
    24b2:	9b 83       	std	Y+3, r25	; 0x03
    24b4:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	98 2f       	mov	r25, r24
    24ba:	96 95       	lsr	r25
    24bc:	96 95       	lsr	r25
    24be:	96 95       	lsr	r25
    24c0:	88 85       	ldd	r24, Y+8	; 0x08
    24c2:	29 2f       	mov	r18, r25
    24c4:	28 0f       	add	r18, r24
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ca:	62 2f       	mov	r22, r18
    24cc:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	88 5f       	subi	r24, 0xF8	; 248
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	8f 81       	ldd	r24, Y+7	; 0x07
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	28 17       	cp	r18, r24
    24f0:	39 07       	cpc	r19, r25
    24f2:	c4 f2       	brlt	.-80     	; 0x24a4 <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	61 e0       	ldi	r22, 0x01	; 1
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    24fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	3e 87       	std	Y+14, r19	; 0x0e
    2506:	2d 87       	std	Y+13, r18	; 0x0d
    2508:	4d 85       	ldd	r20, Y+13	; 0x0d
    250a:	5e 85       	ldd	r21, Y+14	; 0x0e
    250c:	41 15       	cp	r20, r1
    250e:	51 05       	cpc	r21, r1
    2510:	49 f0       	breq	.+18     	; 0x2524 <LCD_enu_DrawSpecialCharacter+0x12a>
    2512:	8d 85       	ldd	r24, Y+13	; 0x0d
    2514:	9e 85       	ldd	r25, Y+14	; 0x0e
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	91 05       	cpc	r25, r1
    251a:	39 f4       	brne	.+14     	; 0x252a <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    251c:	86 e0       	ldi	r24, 0x06	; 6
    251e:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
    2522:	03 c0       	rjmp	.+6      	; 0x252a <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    2524:	84 e0       	ldi	r24, 0x04	; 4
    2526:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	61 e0       	ldi	r22, 0x01	; 1
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    2534:	8b 85       	ldd	r24, Y+11	; 0x0b
    2536:	88 2f       	mov	r24, r24
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9c 01       	movw	r18, r24
    253c:	21 50       	subi	r18, 0x01	; 1
    253e:	30 40       	sbci	r19, 0x00	; 0
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	88 2f       	mov	r24, r24
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	88 0f       	add	r24, r24
    254e:	99 1f       	adc	r25, r25
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	82 95       	swap	r24
    2556:	92 95       	swap	r25
    2558:	90 7f       	andi	r25, 0xF0	; 240
    255a:	98 27       	eor	r25, r24
    255c:	80 7f       	andi	r24, 0xF0	; 240
    255e:	98 27       	eor	r25, r24
    2560:	98 2f       	mov	r25, r24
    2562:	8a 85       	ldd	r24, Y+10	; 0x0a
    2564:	89 0f       	add	r24, r25
    2566:	81 58       	subi	r24, 0x81	; 129
    2568:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	61 e0       	ldi	r22, 0x01	; 1
    2570:	41 e0       	ldi	r20, 0x01	; 1
    2572:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    2576:	19 82       	std	Y+1, r1	; 0x01
    2578:	06 c0       	rjmp	.+12     	; 0x2586 <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	8f 5f       	subi	r24, 0xFF	; 255
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	99 81       	ldd	r25, Y+1	; 0x01
    2588:	8f 81       	ldd	r24, Y+7	; 0x07
    258a:	98 17       	cp	r25, r24
    258c:	b0 f3       	brcs	.-20     	; 0x257a <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    258e:	1c 82       	std	Y+4, r1	; 0x04
    2590:	05 c0       	rjmp	.+10     	; 0x259c <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	8c 83       	std	Y+4, r24	; 0x04
    2596:	02 c0       	rjmp	.+4      	; 0x259c <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    259c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    259e:	2e 96       	adiw	r28, 0x0e	; 14
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	0f 91       	pop	r16
    25b0:	ef 90       	pop	r14
    25b2:	cf 90       	pop	r12
    25b4:	08 95       	ret

000025b6 <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    25b6:	0f 93       	push	r16
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	2e 97       	sbiw	r28, 0x0e	; 14
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
    25cc:	68 87       	std	Y+8, r22	; 0x08
    25ce:	79 87       	std	Y+9, r23	; 0x09
    25d0:	8a 87       	std	Y+10, r24	; 0x0a
    25d2:	9b 87       	std	Y+11, r25	; 0x0b
    25d4:	4c 87       	std	Y+12, r20	; 0x0c
    25d6:	2d 87       	std	Y+13, r18	; 0x0d
    25d8:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    25de:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    25e0:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    25e2:	88 85       	ldd	r24, Y+8	; 0x08
    25e4:	99 85       	ldd	r25, Y+9	; 0x09
    25e6:	aa 85       	ldd	r26, Y+10	; 0x0a
    25e8:	bb 85       	ldd	r27, Y+11	; 0x0b
    25ea:	bb 23       	and	r27, r27
    25ec:	8c f4       	brge	.+34     	; 0x2610 <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    25f2:	88 85       	ldd	r24, Y+8	; 0x08
    25f4:	99 85       	ldd	r25, Y+9	; 0x09
    25f6:	aa 85       	ldd	r26, Y+10	; 0x0a
    25f8:	bb 85       	ldd	r27, Y+11	; 0x0b
    25fa:	b0 95       	com	r27
    25fc:	a0 95       	com	r26
    25fe:	90 95       	com	r25
    2600:	81 95       	neg	r24
    2602:	9f 4f       	sbci	r25, 0xFF	; 255
    2604:	af 4f       	sbci	r26, 0xFF	; 255
    2606:	bf 4f       	sbci	r27, 0xFF	; 255
    2608:	88 87       	std	Y+8, r24	; 0x08
    260a:	99 87       	std	Y+9, r25	; 0x09
    260c:	aa 87       	std	Y+10, r26	; 0x0a
    260e:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    2610:	88 85       	ldd	r24, Y+8	; 0x08
    2612:	99 85       	ldd	r25, Y+9	; 0x09
    2614:	aa 85       	ldd	r26, Y+10	; 0x0a
    2616:	bb 85       	ldd	r27, Y+11	; 0x0b
    2618:	8c 83       	std	Y+4, r24	; 0x04
    261a:	9d 83       	std	Y+5, r25	; 0x05
    261c:	ae 83       	std	Y+6, r26	; 0x06
    261e:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    2626:	8c 81       	ldd	r24, Y+4	; 0x04
    2628:	9d 81       	ldd	r25, Y+5	; 0x05
    262a:	ae 81       	ldd	r26, Y+6	; 0x06
    262c:	bf 81       	ldd	r27, Y+7	; 0x07
    262e:	2a e0       	ldi	r18, 0x0A	; 10
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <__divmodsi4>
    263e:	da 01       	movw	r26, r20
    2640:	c9 01       	movw	r24, r18
    2642:	8c 83       	std	Y+4, r24	; 0x04
    2644:	9d 83       	std	Y+5, r25	; 0x05
    2646:	ae 83       	std	Y+6, r26	; 0x06
    2648:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    264a:	8c 81       	ldd	r24, Y+4	; 0x04
    264c:	9d 81       	ldd	r25, Y+5	; 0x05
    264e:	ae 81       	ldd	r26, Y+6	; 0x06
    2650:	bf 81       	ldd	r27, Y+7	; 0x07
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	a1 05       	cpc	r26, r1
    2656:	b1 05       	cpc	r27, r1
    2658:	19 f7       	brne	.-58     	; 0x2620 <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    265a:	8c 85       	ldd	r24, Y+12	; 0x0c
    265c:	88 23       	and	r24, r24
    265e:	09 f4       	brne	.+2      	; 0x2662 <LCD_enu_WriteIntegerNum+0xac>
    2660:	6b c0       	rjmp	.+214    	; 0x2738 <LCD_enu_WriteIntegerNum+0x182>
    2662:	8c 85       	ldd	r24, Y+12	; 0x0c
    2664:	83 30       	cpi	r24, 0x03	; 3
    2666:	08 f0       	brcs	.+2      	; 0x266a <LCD_enu_WriteIntegerNum+0xb4>
    2668:	67 c0       	rjmp	.+206    	; 0x2738 <LCD_enu_WriteIntegerNum+0x182>
    266a:	8d 85       	ldd	r24, Y+13	; 0x0d
    266c:	88 23       	and	r24, r24
    266e:	09 f4       	brne	.+2      	; 0x2672 <LCD_enu_WriteIntegerNum+0xbc>
    2670:	63 c0       	rjmp	.+198    	; 0x2738 <LCD_enu_WriteIntegerNum+0x182>
    2672:	8d 85       	ldd	r24, Y+13	; 0x0d
    2674:	81 31       	cpi	r24, 0x11	; 17
    2676:	08 f0       	brcs	.+2      	; 0x267a <LCD_enu_WriteIntegerNum+0xc4>
    2678:	5f c0       	rjmp	.+190    	; 0x2738 <LCD_enu_WriteIntegerNum+0x182>
    267a:	8e 85       	ldd	r24, Y+14	; 0x0e
    267c:	85 30       	cpi	r24, 0x05	; 5
    267e:	08 f0       	brcs	.+2      	; 0x2682 <LCD_enu_WriteIntegerNum+0xcc>
    2680:	5b c0       	rjmp	.+182    	; 0x2738 <LCD_enu_WriteIntegerNum+0x182>
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	81 31       	cpi	r24, 0x11	; 17
    2686:	08 f0       	brcs	.+2      	; 0x268a <LCD_enu_WriteIntegerNum+0xd4>
    2688:	57 c0       	rjmp	.+174    	; 0x2738 <LCD_enu_WriteIntegerNum+0x182>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    268a:	88 85       	ldd	r24, Y+8	; 0x08
    268c:	99 85       	ldd	r25, Y+9	; 0x09
    268e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2690:	bb 85       	ldd	r27, Y+11	; 0x0b
    2692:	8c 83       	std	Y+4, r24	; 0x04
    2694:	9d 83       	std	Y+5, r25	; 0x05
    2696:	ae 83       	std	Y+6, r26	; 0x06
    2698:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    269a:	ce 01       	movw	r24, r28
    269c:	04 96       	adiw	r24, 0x04	; 4
    269e:	0e 94 07 18 	call	0x300e	; 0x300e <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	61 e0       	ldi	r22, 0x01	; 1
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	41 e0       	ldi	r20, 0x01	; 1
    26b2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	88 23       	and	r24, r24
    26ba:	51 f1       	breq	.+84     	; 0x2710 <LCD_enu_WriteIntegerNum+0x15a>
        {
            enu_PassByteAndLatch('-');
    26bc:	8d e2       	ldi	r24, 0x2D	; 45
    26be:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
    26c2:	26 c0       	rjmp	.+76     	; 0x2710 <LCD_enu_WriteIntegerNum+0x15a>
        }
        //Printing one digit at a time
        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    26c4:	8c 81       	ldd	r24, Y+4	; 0x04
    26c6:	9d 81       	ldd	r25, Y+5	; 0x05
    26c8:	ae 81       	ldd	r26, Y+6	; 0x06
    26ca:	bf 81       	ldd	r27, Y+7	; 0x07
    26cc:	2a e0       	ldi	r18, 0x0A	; 10
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <__divmodsi4>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	80 5d       	subi	r24, 0xD0	; 208
    26e2:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    26e6:	8c 81       	ldd	r24, Y+4	; 0x04
    26e8:	9d 81       	ldd	r25, Y+5	; 0x05
    26ea:	ae 81       	ldd	r26, Y+6	; 0x06
    26ec:	bf 81       	ldd	r27, Y+7	; 0x07
    26ee:	2a e0       	ldi	r18, 0x0A	; 10
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	50 e0       	ldi	r21, 0x00	; 0
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <__divmodsi4>
    26fe:	da 01       	movw	r26, r20
    2700:	c9 01       	movw	r24, r18
    2702:	8c 83       	std	Y+4, r24	; 0x04
    2704:	9d 83       	std	Y+5, r25	; 0x05
    2706:	ae 83       	std	Y+6, r26	; 0x06
    2708:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	81 50       	subi	r24, 0x01	; 1
    270e:	8a 83       	std	Y+2, r24	; 0x02
        if(local_u8_NegativeFlag)
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time
        while (Local_u32_TempVariable)
    2710:	8c 81       	ldd	r24, Y+4	; 0x04
    2712:	9d 81       	ldd	r25, Y+5	; 0x05
    2714:	ae 81       	ldd	r26, Y+6	; 0x06
    2716:	bf 81       	ldd	r27, Y+7	; 0x07
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	a1 05       	cpc	r26, r1
    271c:	b1 05       	cpc	r27, r1
    271e:	91 f6       	brne	.-92     	; 0x26c4 <LCD_enu_WriteIntegerNum+0x10e>
    2720:	06 c0       	rjmp	.+12     	; 0x272e <LCD_enu_WriteIntegerNum+0x178>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    2722:	80 e3       	ldi	r24, 0x30	; 48
    2724:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	81 50       	subi	r24, 0x01	; 1
    272c:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	88 23       	and	r24, r24
    2732:	b9 f7       	brne	.-18     	; 0x2722 <LCD_enu_WriteIntegerNum+0x16c>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    2734:	1b 82       	std	Y+3, r1	; 0x03
    2736:	02 c0       	rjmp	.+4      	; 0x273c <LCD_enu_WriteIntegerNum+0x186>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2738:	82 e0       	ldi	r24, 0x02	; 2
    273a:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    273e:	2e 96       	adiw	r28, 0x0e	; 14
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	0f 91       	pop	r16
    2750:	08 95       	ret

00002752 <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    2752:	0f 93       	push	r16
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	63 97       	sbiw	r28, 0x13	; 19
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	6d 87       	std	Y+13, r22	; 0x0d
    276a:	7e 87       	std	Y+14, r23	; 0x0e
    276c:	8f 87       	std	Y+15, r24	; 0x0f
    276e:	98 8b       	std	Y+16, r25	; 0x10
    2770:	49 8b       	std	Y+17, r20	; 0x11
    2772:	2a 8b       	std	Y+18, r18	; 0x12
    2774:	0b 8b       	std	Y+19, r16	; 0x13
    u8 Local_u8_ErrorFlag = ES_NOK;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	88 87       	std	Y+8, r24	; 0x08

    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    277a:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = 0;
    277c:	1a 82       	std	Y+2, r1	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    277e:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    2780:	6d 85       	ldd	r22, Y+13	; 0x0d
    2782:	7e 85       	ldd	r23, Y+14	; 0x0e
    2784:	8f 85       	ldd	r24, Y+15	; 0x0f
    2786:	98 89       	ldd	r25, Y+16	; 0x10
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e0       	ldi	r20, 0x00	; 0
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	5c f4       	brge	.+22     	; 0x27ae <LCD_enu_WriteFloatNum+0x5c>
    {
        local_u8_NegativeFlag = True;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    279c:	8d 85       	ldd	r24, Y+13	; 0x0d
    279e:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a0:	af 85       	ldd	r26, Y+15	; 0x0f
    27a2:	b8 89       	ldd	r27, Y+16	; 0x10
    27a4:	b0 58       	subi	r27, 0x80	; 128
    27a6:	8d 87       	std	Y+13, r24	; 0x0d
    27a8:	9e 87       	std	Y+14, r25	; 0x0e
    27aa:	af 87       	std	Y+15, r26	; 0x0f
    27ac:	b8 8b       	std	Y+16, r27	; 0x10
    }


    Local_u32_WholeDigits = Copy_f32_Num;
    27ae:	6d 85       	ldd	r22, Y+13	; 0x0d
    27b0:	7e 85       	ldd	r23, Y+14	; 0x0e
    27b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b4:	98 89       	ldd	r25, Y+16	; 0x10
    27b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	89 87       	std	Y+9, r24	; 0x09
    27c0:	9a 87       	std	Y+10, r25	; 0x0a
    27c2:	ab 87       	std	Y+11, r26	; 0x0b
    27c4:	bc 87       	std	Y+12, r27	; 0x0c

    Local_f32_DecimalDigits = Copy_f32_Num - (f32)(Local_u32_WholeDigits);
    27c6:	89 85       	ldd	r24, Y+9	; 0x09
    27c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    27cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    27d6:	9b 01       	movw	r18, r22
    27d8:	ac 01       	movw	r20, r24
    27da:	6d 85       	ldd	r22, Y+13	; 0x0d
    27dc:	7e 85       	ldd	r23, Y+14	; 0x0e
    27de:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e0:	98 89       	ldd	r25, Y+16	; 0x10
    27e2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	8c 83       	std	Y+4, r24	; 0x04
    27ec:	9d 83       	std	Y+5, r25	; 0x05
    27ee:	ae 83       	std	Y+6, r26	; 0x06
    27f0:	bf 83       	std	Y+7, r27	; 0x07
   
    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	8f 5f       	subi	r24, 0xFF	; 255
    27f6:	8b 83       	std	Y+3, r24	; 0x03
        Local_u32_WholeDigits  /= 10;
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    27fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    2800:	2a e0       	ldi	r18, 0x0A	; 10
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	0e 94 ae 1c 	call	0x395c	; 0x395c <__udivmodsi4>
    2810:	da 01       	movw	r26, r20
    2812:	c9 01       	movw	r24, r18
    2814:	89 87       	std	Y+9, r24	; 0x09
    2816:	9a 87       	std	Y+10, r25	; 0x0a
    2818:	ab 87       	std	Y+11, r26	; 0x0b
    281a:	bc 87       	std	Y+12, r27	; 0x0c

    }while(Local_u32_WholeDigits);
    281c:	89 85       	ldd	r24, Y+9	; 0x09
    281e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2820:	ab 85       	ldd	r26, Y+11	; 0x0b
    2822:	bc 85       	ldd	r27, Y+12	; 0x0c
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	a1 05       	cpc	r26, r1
    2828:	b1 05       	cpc	r27, r1
    282a:	19 f7       	brne	.-58     	; 0x27f2 <LCD_enu_WriteFloatNum+0xa0>

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	61 e0       	ldi	r22, 0x01	; 1
    2830:	41 e0       	ldi	r20, 0x01	; 1
    2832:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    2836:	19 86       	std	Y+9, r1	; 0x09
    2838:	1a 86       	std	Y+10, r1	; 0x0a
    283a:	1b 86       	std	Y+11, r1	; 0x0b
    283c:	1c 86       	std	Y+12, r1	; 0x0c
    283e:	1f c0       	rjmp	.+62     	; 0x287e <LCD_enu_WriteFloatNum+0x12c>
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    {
        Local_f32_DecimalDigits *= 10;
    2840:	6c 81       	ldd	r22, Y+4	; 0x04
    2842:	7d 81       	ldd	r23, Y+5	; 0x05
    2844:	8e 81       	ldd	r24, Y+6	; 0x06
    2846:	9f 81       	ldd	r25, Y+7	; 0x07
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e2       	ldi	r20, 0x20	; 32
    284e:	51 e4       	ldi	r21, 0x41	; 65
    2850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	8c 83       	std	Y+4, r24	; 0x04
    285a:	9d 83       	std	Y+5, r25	; 0x05
    285c:	ae 83       	std	Y+6, r26	; 0x06
    285e:	bf 83       	std	Y+7, r27	; 0x07
        Local_u32_WholeDigits = Local_f32_DecimalDigits;
    2860:	6c 81       	ldd	r22, Y+4	; 0x04
    2862:	7d 81       	ldd	r23, Y+5	; 0x05
    2864:	8e 81       	ldd	r24, Y+6	; 0x06
    2866:	9f 81       	ldd	r25, Y+7	; 0x07
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	89 87       	std	Y+9, r24	; 0x09
    2872:	9a 87       	std	Y+10, r25	; 0x0a
    2874:	ab 87       	std	Y+11, r26	; 0x0b
    2876:	bc 87       	std	Y+12, r27	; 0x0c
        Local_u8_DecimalDigitCount++;
    2878:	8a 81       	ldd	r24, Y+2	; 0x02
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	8a 83       	std	Y+2, r24	; 0x02

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	ab 85       	ldd	r26, Y+11	; 0x0b
    2884:	bc 85       	ldd	r27, Y+12	; 0x0c
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    288e:	9b 01       	movw	r18, r22
    2890:	ac 01       	movw	r20, r24
    2892:	6c 81       	ldd	r22, Y+4	; 0x04
    2894:	7d 81       	ldd	r23, Y+5	; 0x05
    2896:	8e 81       	ldd	r24, Y+6	; 0x06
    2898:	9f 81       	ldd	r25, Y+7	; 0x07
    289a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	2c ea       	ldi	r18, 0xAC	; 172
    28a8:	35 ec       	ldi	r19, 0xC5	; 197
    28aa:	47 e2       	ldi	r20, 0x27	; 39
    28ac:	57 e3       	ldi	r21, 0x37	; 55
    28ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
    28b2:	88 23       	and	r24, r24
    28b4:	2c f6       	brge	.-118    	; 0x2840 <LCD_enu_WriteFloatNum+0xee>
        Local_u8_DecimalDigitCount++;
        
    
    }

    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && ((Local_u32_WholeDigits + Local_u8_DecimalDigitCount) <= LCD_MAX_INTEGER_LENGTH))
    28b6:	89 89       	ldd	r24, Y+17	; 0x11
    28b8:	88 23       	and	r24, r24
    28ba:	09 f4       	brne	.+2      	; 0x28be <LCD_enu_WriteFloatNum+0x16c>
    28bc:	fd c0       	rjmp	.+506    	; 0x2ab8 <LCD_enu_WriteFloatNum+0x366>
    28be:	89 89       	ldd	r24, Y+17	; 0x11
    28c0:	83 30       	cpi	r24, 0x03	; 3
    28c2:	08 f0       	brcs	.+2      	; 0x28c6 <LCD_enu_WriteFloatNum+0x174>
    28c4:	f9 c0       	rjmp	.+498    	; 0x2ab8 <LCD_enu_WriteFloatNum+0x366>
    28c6:	8a 89       	ldd	r24, Y+18	; 0x12
    28c8:	88 23       	and	r24, r24
    28ca:	09 f4       	brne	.+2      	; 0x28ce <LCD_enu_WriteFloatNum+0x17c>
    28cc:	f5 c0       	rjmp	.+490    	; 0x2ab8 <LCD_enu_WriteFloatNum+0x366>
    28ce:	8a 89       	ldd	r24, Y+18	; 0x12
    28d0:	81 31       	cpi	r24, 0x11	; 17
    28d2:	08 f0       	brcs	.+2      	; 0x28d6 <LCD_enu_WriteFloatNum+0x184>
    28d4:	f1 c0       	rjmp	.+482    	; 0x2ab8 <LCD_enu_WriteFloatNum+0x366>
    28d6:	8b 89       	ldd	r24, Y+19	; 0x13
    28d8:	85 30       	cpi	r24, 0x05	; 5
    28da:	08 f0       	brcs	.+2      	; 0x28de <LCD_enu_WriteFloatNum+0x18c>
    28dc:	ed c0       	rjmp	.+474    	; 0x2ab8 <LCD_enu_WriteFloatNum+0x366>
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e0       	ldi	r20, 0x00	; 0
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	89 85       	ldd	r24, Y+9	; 0x09
    28ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ec:	ab 85       	ldd	r26, Y+11	; 0x0b
    28ee:	bc 85       	ldd	r27, Y+12	; 0x0c
    28f0:	82 0f       	add	r24, r18
    28f2:	93 1f       	adc	r25, r19
    28f4:	a4 1f       	adc	r26, r20
    28f6:	b5 1f       	adc	r27, r21
    28f8:	81 31       	cpi	r24, 0x11	; 17
    28fa:	91 05       	cpc	r25, r1
    28fc:	a1 05       	cpc	r26, r1
    28fe:	b1 05       	cpc	r27, r1
    2900:	08 f0       	brcs	.+2      	; 0x2904 <LCD_enu_WriteFloatNum+0x1b2>
    2902:	da c0       	rjmp	.+436    	; 0x2ab8 <LCD_enu_WriteFloatNum+0x366>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	61 e0       	ldi	r22, 0x01	; 1
    2908:	40 e0       	ldi	r20, 0x00	; 0
    290a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    290e:	8b 89       	ldd	r24, Y+19	; 0x13
    2910:	88 2f       	mov	r24, r24
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9c 01       	movw	r18, r24
    2916:	21 50       	subi	r18, 0x01	; 1
    2918:	30 40       	sbci	r19, 0x00	; 0
    291a:	89 89       	ldd	r24, Y+17	; 0x11
    291c:	88 2f       	mov	r24, r24
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	88 0f       	add	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	82 0f       	add	r24, r18
    292c:	93 1f       	adc	r25, r19
    292e:	82 95       	swap	r24
    2930:	92 95       	swap	r25
    2932:	90 7f       	andi	r25, 0xF0	; 240
    2934:	98 27       	eor	r25, r24
    2936:	80 7f       	andi	r24, 0xF0	; 240
    2938:	98 27       	eor	r25, r24
    293a:	98 2f       	mov	r25, r24
    293c:	8a 89       	ldd	r24, Y+18	; 0x12
    293e:	89 0f       	add	r24, r25
    2940:	81 58       	subi	r24, 0x81	; 129
    2942:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
        
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	41 e0       	ldi	r20, 0x01	; 1
    294c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	88 23       	and	r24, r24
    2954:	19 f0       	breq	.+6      	; 0x295c <LCD_enu_WriteFloatNum+0x20a>
        {
            enu_PassByteAndLatch('-');
    2956:	8d e2       	ldi	r24, 0x2D	; 45
    2958:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
        }

        //A] Printing whole digits 
        Local_u32_WholeDigits = Copy_f32_Num;
    295c:	6d 85       	ldd	r22, Y+13	; 0x0d
    295e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2960:	8f 85       	ldd	r24, Y+15	; 0x0f
    2962:	98 89       	ldd	r25, Y+16	; 0x10
    2964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	89 87       	std	Y+9, r24	; 0x09
    296e:	9a 87       	std	Y+10, r25	; 0x0a
    2970:	ab 87       	std	Y+11, r26	; 0x0b
    2972:	bc 87       	std	Y+12, r27	; 0x0c
        enu_ReverseInteger(&Local_u32_WholeDigits);
    2974:	ce 01       	movw	r24, r28
    2976:	09 96       	adiw	r24, 0x09	; 9
    2978:	0e 94 07 18 	call	0x300e	; 0x300e <enu_ReverseInteger>


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	61 e0       	ldi	r22, 0x01	; 1
    2980:	41 e0       	ldi	r20, 0x01	; 1
    2982:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    2986:	26 c0       	rjmp	.+76     	; 0x29d4 <LCD_enu_WriteFloatNum+0x282>
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    2988:	89 85       	ldd	r24, Y+9	; 0x09
    298a:	9a 85       	ldd	r25, Y+10	; 0x0a
    298c:	ab 85       	ldd	r26, Y+11	; 0x0b
    298e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2990:	2a e0       	ldi	r18, 0x0A	; 10
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 ae 1c 	call	0x395c	; 0x395c <__udivmodsi4>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	80 5d       	subi	r24, 0xD0	; 208
    29a6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
            Local_u32_WholeDigits /= 10;
    29aa:	89 85       	ldd	r24, Y+9	; 0x09
    29ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    29b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    29b2:	2a e0       	ldi	r18, 0x0A	; 10
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	50 e0       	ldi	r21, 0x00	; 0
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 ae 1c 	call	0x395c	; 0x395c <__udivmodsi4>
    29c2:	da 01       	movw	r26, r20
    29c4:	c9 01       	movw	r24, r18
    29c6:	89 87       	std	Y+9, r24	; 0x09
    29c8:	9a 87       	std	Y+10, r25	; 0x0a
    29ca:	ab 87       	std	Y+11, r26	; 0x0b
    29cc:	bc 87       	std	Y+12, r27	; 0x0c
            Local_u8_WholeDigitCount--;
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	81 50       	subi	r24, 0x01	; 1
    29d2:	8b 83       	std	Y+3, r24	; 0x03


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    29da:	bc 85       	ldd	r27, Y+12	; 0x0c
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	a1 05       	cpc	r26, r1
    29e0:	b1 05       	cpc	r27, r1
    29e2:	91 f6       	brne	.-92     	; 0x2988 <LCD_enu_WriteFloatNum+0x236>
    29e4:	06 c0       	rjmp	.+12     	; 0x29f2 <LCD_enu_WriteFloatNum+0x2a0>
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    29e6:	80 e3       	ldi	r24, 0x30	; 48
    29e8:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
            Local_u8_WholeDigitCount--;
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	81 50       	subi	r24, 0x01	; 1
    29f0:	8b 83       	std	Y+3, r24	; 0x03
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
            Local_u32_WholeDigits /= 10;
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	88 23       	and	r24, r24
    29f6:	b9 f7       	brne	.-18     	; 0x29e6 <LCD_enu_WriteFloatNum+0x294>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    29f8:	6c 81       	ldd	r22, Y+4	; 0x04
    29fa:	7d 81       	ldd	r23, Y+5	; 0x05
    29fc:	8e 81       	ldd	r24, Y+6	; 0x06
    29fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	50 e0       	ldi	r21, 0x00	; 0
    2a08:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    2a0c:	88 23       	and	r24, r24
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <LCD_enu_WriteFloatNum+0x2c0>
    2a10:	51 c0       	rjmp	.+162    	; 0x2ab4 <LCD_enu_WriteFloatNum+0x362>
        {
            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	61 e0       	ldi	r22, 0x01	; 1
    2a16:	41 e0       	ldi	r20, 0x01	; 1
    2a18:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>

            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    2a1c:	8e e2       	ldi	r24, 0x2E	; 46
    2a1e:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>

            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
    2a22:	6c 81       	ldd	r22, Y+4	; 0x04
    2a24:	7d 81       	ldd	r23, Y+5	; 0x05
    2a26:	8e 81       	ldd	r24, Y+6	; 0x06
    2a28:	9f 81       	ldd	r25, Y+7	; 0x07
    2a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	89 87       	std	Y+9, r24	; 0x09
    2a34:	9a 87       	std	Y+10, r25	; 0x0a
    2a36:	ab 87       	std	Y+11, r26	; 0x0b
    2a38:	bc 87       	std	Y+12, r27	; 0x0c
            enu_ReverseInteger(&Local_u32_WholeDigits);
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	09 96       	adiw	r24, 0x09	; 9
    2a3e:	0e 94 07 18 	call	0x300e	; 0x300e <enu_ReverseInteger>
    2a42:	26 c0       	rjmp	.+76     	; 0x2a90 <LCD_enu_WriteFloatNum+0x33e>
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
            {
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    2a44:	89 85       	ldd	r24, Y+9	; 0x09
    2a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a48:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a4a:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a4c:	2a e0       	ldi	r18, 0x0A	; 10
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e0       	ldi	r20, 0x00	; 0
    2a52:	50 e0       	ldi	r21, 0x00	; 0
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	0e 94 ae 1c 	call	0x395c	; 0x395c <__udivmodsi4>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	80 5d       	subi	r24, 0xD0	; 208
    2a62:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
                Local_u32_WholeDigits /= 10;
    2a66:	89 85       	ldd	r24, Y+9	; 0x09
    2a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6a:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a6c:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a6e:	2a e0       	ldi	r18, 0x0A	; 10
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	bc 01       	movw	r22, r24
    2a78:	cd 01       	movw	r24, r26
    2a7a:	0e 94 ae 1c 	call	0x395c	; 0x395c <__udivmodsi4>
    2a7e:	da 01       	movw	r26, r20
    2a80:	c9 01       	movw	r24, r18
    2a82:	89 87       	std	Y+9, r24	; 0x09
    2a84:	9a 87       	std	Y+10, r25	; 0x0a
    2a86:	ab 87       	std	Y+11, r26	; 0x0b
    2a88:	bc 87       	std	Y+12, r27	; 0x0c
                Local_u8_DecimalDigitCount--;
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	81 50       	subi	r24, 0x01	; 1
    2a8e:	8a 83       	std	Y+2, r24	; 0x02
            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
            enu_ReverseInteger(&Local_u32_WholeDigits);
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
    2a90:	89 85       	ldd	r24, Y+9	; 0x09
    2a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a94:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a96:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	a1 05       	cpc	r26, r1
    2a9c:	b1 05       	cpc	r27, r1
    2a9e:	91 f6       	brne	.-92     	; 0x2a44 <LCD_enu_WriteFloatNum+0x2f2>
    2aa0:	06 c0       	rjmp	.+12     	; 0x2aae <LCD_enu_WriteFloatNum+0x35c>
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    2aa2:	80 e3       	ldi	r24, 0x30	; 48
    2aa4:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	81 50       	subi	r24, 0x01	; 1
    2aac:	8a 83       	std	Y+2, r24	; 0x02
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
                Local_u32_WholeDigits /= 10;
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	88 23       	and	r24, r24
    2ab2:	b9 f7       	brne	.-18     	; 0x2aa2 <LCD_enu_WriteFloatNum+0x350>
            
            

        }

        Local_u8_ErrorFlag = ES_OK;
    2ab4:	18 86       	std	Y+8, r1	; 0x08
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <LCD_enu_WriteFloatNum+0x36a>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2ab8:	82 e0       	ldi	r24, 0x02	; 2
    2aba:	88 87       	std	Y+8, r24	; 0x08
    }

    return Local_u8_ErrorFlag;
    2abc:	88 85       	ldd	r24, Y+8	; 0x08

}
    2abe:	63 96       	adiw	r28, 0x13	; 19
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	0f 91       	pop	r16
    2ad0:	08 95       	ret

00002ad2 <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	ac 97       	sbiw	r28, 0x2c	; 44
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	62 e0       	ldi	r22, 0x02	; 2
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	63 e0       	ldi	r22, 0x03	; 3
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    2b00:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b02:	98 2f       	mov	r25, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	99 27       	eor	r25, r25
    2b08:	99 1f       	adc	r25, r25
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	67 e0       	ldi	r22, 0x07	; 7
    2b0e:	49 2f       	mov	r20, r25
    2b10:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    2b14:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b16:	82 95       	swap	r24
    2b18:	86 95       	lsr	r24
    2b1a:	86 95       	lsr	r24
    2b1c:	83 70       	andi	r24, 0x03	; 3
    2b1e:	98 2f       	mov	r25, r24
    2b20:	91 70       	andi	r25, 0x01	; 1
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	66 e0       	ldi	r22, 0x06	; 6
    2b26:	49 2f       	mov	r20, r25
    2b28:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    2b2c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b2e:	82 95       	swap	r24
    2b30:	86 95       	lsr	r24
    2b32:	87 70       	andi	r24, 0x07	; 7
    2b34:	98 2f       	mov	r25, r24
    2b36:	91 70       	andi	r25, 0x01	; 1
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	65 e0       	ldi	r22, 0x05	; 5
    2b3c:	49 2f       	mov	r20, r25
    2b3e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    2b42:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b44:	82 95       	swap	r24
    2b46:	8f 70       	andi	r24, 0x0F	; 15
    2b48:	98 2f       	mov	r25, r24
    2b4a:	91 70       	andi	r25, 0x01	; 1
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	64 e0       	ldi	r22, 0x04	; 4
    2b50:	49 2f       	mov	r20, r25
    2b52:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	63 e0       	ldi	r22, 0x03	; 3
    2b5a:	41 e0       	ldi	r20, 0x01	; 1
    2b5c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a0 e8       	ldi	r26, 0x80	; 128
    2b66:	bf e3       	ldi	r27, 0x3F	; 63
    2b68:	8f a3       	std	Y+39, r24	; 0x27
    2b6a:	98 a7       	std	Y+40, r25	; 0x28
    2b6c:	a9 a7       	std	Y+41, r26	; 0x29
    2b6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b70:	6f a1       	ldd	r22, Y+39	; 0x27
    2b72:	78 a5       	ldd	r23, Y+40	; 0x28
    2b74:	89 a5       	ldd	r24, Y+41	; 0x29
    2b76:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	4a e7       	ldi	r20, 0x7A	; 122
    2b7e:	55 e4       	ldi	r21, 0x45	; 69
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	8b a3       	std	Y+35, r24	; 0x23
    2b8a:	9c a3       	std	Y+36, r25	; 0x24
    2b8c:	ad a3       	std	Y+37, r26	; 0x25
    2b8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b90:	6b a1       	ldd	r22, Y+35	; 0x23
    2b92:	7c a1       	ldd	r23, Y+36	; 0x24
    2b94:	8d a1       	ldd	r24, Y+37	; 0x25
    2b96:	9e a1       	ldd	r25, Y+38	; 0x26
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e8       	ldi	r20, 0x80	; 128
    2b9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ba0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2ba4:	88 23       	and	r24, r24
    2ba6:	2c f4       	brge	.+10     	; 0x2bb2 <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	9a a3       	std	Y+34, r25	; 0x22
    2bae:	89 a3       	std	Y+33, r24	; 0x21
    2bb0:	3f c0       	rjmp	.+126    	; 0x2c30 <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    2bb2:	6b a1       	ldd	r22, Y+35	; 0x23
    2bb4:	7c a1       	ldd	r23, Y+36	; 0x24
    2bb6:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	3f ef       	ldi	r19, 0xFF	; 255
    2bbe:	4f e7       	ldi	r20, 0x7F	; 127
    2bc0:	57 e4       	ldi	r21, 0x47	; 71
    2bc2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2bc6:	18 16       	cp	r1, r24
    2bc8:	4c f5       	brge	.+82     	; 0x2c1c <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bca:	6f a1       	ldd	r22, Y+39	; 0x27
    2bcc:	78 a5       	ldd	r23, Y+40	; 0x28
    2bce:	89 a5       	ldd	r24, Y+41	; 0x29
    2bd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e2       	ldi	r20, 0x20	; 32
    2bd8:	51 e4       	ldi	r21, 0x41	; 65
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	bc 01       	movw	r22, r24
    2be4:	cd 01       	movw	r24, r26
    2be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	9a a3       	std	Y+34, r25	; 0x22
    2bf0:	89 a3       	std	Y+33, r24	; 0x21
    2bf2:	0f c0       	rjmp	.+30     	; 0x2c12 <enu_PassByteAndLatch+0x140>
    2bf4:	80 e9       	ldi	r24, 0x90	; 144
    2bf6:	91 e0       	ldi	r25, 0x01	; 1
    2bf8:	98 a3       	std	Y+32, r25	; 0x20
    2bfa:	8f 8f       	std	Y+31, r24	; 0x1f
    2bfc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bfe:	98 a1       	ldd	r25, Y+32	; 0x20
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <enu_PassByteAndLatch+0x12e>
    2c04:	98 a3       	std	Y+32, r25	; 0x20
    2c06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c08:	89 a1       	ldd	r24, Y+33	; 0x21
    2c0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	9a a3       	std	Y+34, r25	; 0x22
    2c10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c12:	89 a1       	ldd	r24, Y+33	; 0x21
    2c14:	9a a1       	ldd	r25, Y+34	; 0x22
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	69 f7       	brne	.-38     	; 0x2bf4 <enu_PassByteAndLatch+0x122>
    2c1a:	14 c0       	rjmp	.+40     	; 0x2c44 <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c20:	8d a1       	ldd	r24, Y+37	; 0x25
    2c22:	9e a1       	ldd	r25, Y+38	; 0x26
    2c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	9a a3       	std	Y+34, r25	; 0x22
    2c2e:	89 a3       	std	Y+33, r24	; 0x21
    2c30:	89 a1       	ldd	r24, Y+33	; 0x21
    2c32:	9a a1       	ldd	r25, Y+34	; 0x22
    2c34:	9e 8f       	std	Y+30, r25	; 0x1e
    2c36:	8d 8f       	std	Y+29, r24	; 0x1d
    2c38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <enu_PassByteAndLatch+0x16a>
    2c40:	9e 8f       	std	Y+30, r25	; 0x1e
    2c42:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	63 e0       	ldi	r22, 0x03	; 3
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    2c4e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c50:	86 95       	lsr	r24
    2c52:	86 95       	lsr	r24
    2c54:	86 95       	lsr	r24
    2c56:	98 2f       	mov	r25, r24
    2c58:	91 70       	andi	r25, 0x01	; 1
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	67 e0       	ldi	r22, 0x07	; 7
    2c5e:	49 2f       	mov	r20, r25
    2c60:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    2c64:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c66:	86 95       	lsr	r24
    2c68:	86 95       	lsr	r24
    2c6a:	98 2f       	mov	r25, r24
    2c6c:	91 70       	andi	r25, 0x01	; 1
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	66 e0       	ldi	r22, 0x06	; 6
    2c72:	49 2f       	mov	r20, r25
    2c74:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    2c78:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c7a:	86 95       	lsr	r24
    2c7c:	98 2f       	mov	r25, r24
    2c7e:	91 70       	andi	r25, 0x01	; 1
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	65 e0       	ldi	r22, 0x05	; 5
    2c84:	49 2f       	mov	r20, r25
    2c86:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    2c8a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c8c:	98 2f       	mov	r25, r24
    2c8e:	91 70       	andi	r25, 0x01	; 1
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	64 e0       	ldi	r22, 0x04	; 4
    2c94:	49 2f       	mov	r20, r25
    2c96:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	63 e0       	ldi	r22, 0x03	; 3
    2c9e:	41 e0       	ldi	r20, 0x01	; 1
    2ca0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	a0 e8       	ldi	r26, 0x80	; 128
    2caa:	bf e3       	ldi	r27, 0x3F	; 63
    2cac:	89 8f       	std	Y+25, r24	; 0x19
    2cae:	9a 8f       	std	Y+26, r25	; 0x1a
    2cb0:	ab 8f       	std	Y+27, r26	; 0x1b
    2cb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	4a e7       	ldi	r20, 0x7A	; 122
    2cc2:	55 e4       	ldi	r21, 0x45	; 69
    2cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	8d 8b       	std	Y+21, r24	; 0x15
    2cce:	9e 8b       	std	Y+22, r25	; 0x16
    2cd0:	af 8b       	std	Y+23, r26	; 0x17
    2cd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cda:	98 8d       	ldd	r25, Y+24	; 0x18
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	40 e8       	ldi	r20, 0x80	; 128
    2ce2:	5f e3       	ldi	r21, 0x3F	; 63
    2ce4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2ce8:	88 23       	and	r24, r24
    2cea:	2c f4       	brge	.+10     	; 0x2cf6 <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	9c 8b       	std	Y+20, r25	; 0x14
    2cf2:	8b 8b       	std	Y+19, r24	; 0x13
    2cf4:	3f c0       	rjmp	.+126    	; 0x2d74 <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    2cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	3f ef       	ldi	r19, 0xFF	; 255
    2d02:	4f e7       	ldi	r20, 0x7F	; 127
    2d04:	57 e4       	ldi	r21, 0x47	; 71
    2d06:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2d0a:	18 16       	cp	r1, r24
    2d0c:	4c f5       	brge	.+82     	; 0x2d60 <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e2       	ldi	r20, 0x20	; 32
    2d1c:	51 e4       	ldi	r21, 0x41	; 65
    2d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	9c 8b       	std	Y+20, r25	; 0x14
    2d34:	8b 8b       	std	Y+19, r24	; 0x13
    2d36:	0f c0       	rjmp	.+30     	; 0x2d56 <enu_PassByteAndLatch+0x284>
    2d38:	80 e9       	ldi	r24, 0x90	; 144
    2d3a:	91 e0       	ldi	r25, 0x01	; 1
    2d3c:	9a 8b       	std	Y+18, r25	; 0x12
    2d3e:	89 8b       	std	Y+17, r24	; 0x11
    2d40:	89 89       	ldd	r24, Y+17	; 0x11
    2d42:	9a 89       	ldd	r25, Y+18	; 0x12
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	f1 f7       	brne	.-4      	; 0x2d44 <enu_PassByteAndLatch+0x272>
    2d48:	9a 8b       	std	Y+18, r25	; 0x12
    2d4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	9c 8b       	std	Y+20, r25	; 0x14
    2d54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d56:	8b 89       	ldd	r24, Y+19	; 0x13
    2d58:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	69 f7       	brne	.-38     	; 0x2d38 <enu_PassByteAndLatch+0x266>
    2d5e:	14 c0       	rjmp	.+40     	; 0x2d88 <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d60:	6d 89       	ldd	r22, Y+21	; 0x15
    2d62:	7e 89       	ldd	r23, Y+22	; 0x16
    2d64:	8f 89       	ldd	r24, Y+23	; 0x17
    2d66:	98 8d       	ldd	r25, Y+24	; 0x18
    2d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	9c 8b       	std	Y+20, r25	; 0x14
    2d72:	8b 8b       	std	Y+19, r24	; 0x13
    2d74:	8b 89       	ldd	r24, Y+19	; 0x13
    2d76:	9c 89       	ldd	r25, Y+20	; 0x14
    2d78:	98 8b       	std	Y+16, r25	; 0x10
    2d7a:	8f 87       	std	Y+15, r24	; 0x0f
    2d7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d7e:	98 89       	ldd	r25, Y+16	; 0x10
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <enu_PassByteAndLatch+0x2ae>
    2d84:	98 8b       	std	Y+16, r25	; 0x10
    2d86:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	63 e0       	ldi	r22, 0x03	; 3
    2d8c:	40 e0       	ldi	r20, 0x00	; 0
    2d8e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	a0 e0       	ldi	r26, 0x00	; 0
    2d98:	b0 e4       	ldi	r27, 0x40	; 64
    2d9a:	8b 87       	std	Y+11, r24	; 0x0b
    2d9c:	9c 87       	std	Y+12, r25	; 0x0c
    2d9e:	ad 87       	std	Y+13, r26	; 0x0d
    2da0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a e7       	ldi	r20, 0x7A	; 122
    2db0:	55 e4       	ldi	r21, 0x45	; 69
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	8f 83       	std	Y+7, r24	; 0x07
    2dbc:	98 87       	std	Y+8, r25	; 0x08
    2dbe:	a9 87       	std	Y+9, r26	; 0x09
    2dc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc4:	78 85       	ldd	r23, Y+8	; 0x08
    2dc6:	89 85       	ldd	r24, Y+9	; 0x09
    2dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e8       	ldi	r20, 0x80	; 128
    2dd0:	5f e3       	ldi	r21, 0x3F	; 63
    2dd2:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2dd6:	88 23       	and	r24, r24
    2dd8:	2c f4       	brge	.+10     	; 0x2de4 <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9e 83       	std	Y+6, r25	; 0x06
    2de0:	8d 83       	std	Y+5, r24	; 0x05
    2de2:	3f c0       	rjmp	.+126    	; 0x2e62 <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    2de4:	6f 81       	ldd	r22, Y+7	; 0x07
    2de6:	78 85       	ldd	r23, Y+8	; 0x08
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	3f ef       	ldi	r19, 0xFF	; 255
    2df0:	4f e7       	ldi	r20, 0x7F	; 127
    2df2:	57 e4       	ldi	r21, 0x47	; 71
    2df4:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2df8:	18 16       	cp	r1, r24
    2dfa:	4c f5       	brge	.+82     	; 0x2e4e <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e2       	ldi	r20, 0x20	; 32
    2e0a:	51 e4       	ldi	r21, 0x41	; 65
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	9e 83       	std	Y+6, r25	; 0x06
    2e22:	8d 83       	std	Y+5, r24	; 0x05
    2e24:	0f c0       	rjmp	.+30     	; 0x2e44 <enu_PassByteAndLatch+0x372>
    2e26:	80 e9       	ldi	r24, 0x90	; 144
    2e28:	91 e0       	ldi	r25, 0x01	; 1
    2e2a:	9c 83       	std	Y+4, r25	; 0x04
    2e2c:	8b 83       	std	Y+3, r24	; 0x03
    2e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e30:	9c 81       	ldd	r25, Y+4	; 0x04
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <enu_PassByteAndLatch+0x360>
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e44:	8d 81       	ldd	r24, Y+5	; 0x05
    2e46:	9e 81       	ldd	r25, Y+6	; 0x06
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	69 f7       	brne	.-38     	; 0x2e26 <enu_PassByteAndLatch+0x354>
    2e4c:	14 c0       	rjmp	.+40     	; 0x2e76 <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e50:	78 85       	ldd	r23, Y+8	; 0x08
    2e52:	89 85       	ldd	r24, Y+9	; 0x09
    2e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	9e 83       	std	Y+6, r25	; 0x06
    2e60:	8d 83       	std	Y+5, r24	; 0x05
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	89 83       	std	Y+1, r24	; 0x01
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <enu_PassByteAndLatch+0x39c>
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    2e76:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    2e78:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    2e7a:	ac 96       	adiw	r28, 0x2c	; 44
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	27 97       	sbiw	r28, 0x07	; 7
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	9c 83       	std	Y+4, r25	; 0x04
    2ea2:	8b 83       	std	Y+3, r24	; 0x03
    2ea4:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	9c 81       	ldd	r25, Y+4	; 0x04
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <enu_AddCustomCharacter+0x28>
    2eb2:	79 c0       	rjmp	.+242    	; 0x2fa6 <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	88 30       	cpi	r24, 0x08	; 8
    2eb8:	08 f0       	brcs	.+2      	; 0x2ebc <enu_AddCustomCharacter+0x30>
    2eba:	72 c0       	rjmp	.+228    	; 0x2fa0 <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    2ebc:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	61 e0       	ldi	r22, 0x01	; 1
    2ec2:	40 e0       	ldi	r20, 0x00	; 0
    2ec4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    2ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	3f 83       	std	Y+7, r19	; 0x07
    2ed0:	2e 83       	std	Y+6, r18	; 0x06
    2ed2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ed4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ed6:	83 30       	cpi	r24, 0x03	; 3
    2ed8:	91 05       	cpc	r25, r1
    2eda:	a9 f1       	breq	.+106    	; 0x2f46 <enu_AddCustomCharacter+0xba>
    2edc:	2e 81       	ldd	r18, Y+6	; 0x06
    2ede:	3f 81       	ldd	r19, Y+7	; 0x07
    2ee0:	24 30       	cpi	r18, 0x04	; 4
    2ee2:	31 05       	cpc	r19, r1
    2ee4:	7c f4       	brge	.+30     	; 0x2f04 <enu_AddCustomCharacter+0x78>
    2ee6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee8:	9f 81       	ldd	r25, Y+7	; 0x07
    2eea:	81 30       	cpi	r24, 0x01	; 1
    2eec:	91 05       	cpc	r25, r1
    2eee:	19 f1       	breq	.+70     	; 0x2f36 <enu_AddCustomCharacter+0xaa>
    2ef0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ef2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ef4:	22 30       	cpi	r18, 0x02	; 2
    2ef6:	31 05       	cpc	r19, r1
    2ef8:	14 f5       	brge	.+68     	; 0x2f3e <enu_AddCustomCharacter+0xb2>
    2efa:	8e 81       	ldd	r24, Y+6	; 0x06
    2efc:	9f 81       	ldd	r25, Y+7	; 0x07
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	b1 f0       	breq	.+44     	; 0x2f2e <enu_AddCustomCharacter+0xa2>
    2f02:	34 c0       	rjmp	.+104    	; 0x2f6c <enu_AddCustomCharacter+0xe0>
    2f04:	2e 81       	ldd	r18, Y+6	; 0x06
    2f06:	3f 81       	ldd	r19, Y+7	; 0x07
    2f08:	25 30       	cpi	r18, 0x05	; 5
    2f0a:	31 05       	cpc	r19, r1
    2f0c:	21 f1       	breq	.+72     	; 0x2f56 <enu_AddCustomCharacter+0xca>
    2f0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f10:	9f 81       	ldd	r25, Y+7	; 0x07
    2f12:	85 30       	cpi	r24, 0x05	; 5
    2f14:	91 05       	cpc	r25, r1
    2f16:	dc f0       	brlt	.+54     	; 0x2f4e <enu_AddCustomCharacter+0xc2>
    2f18:	2e 81       	ldd	r18, Y+6	; 0x06
    2f1a:	3f 81       	ldd	r19, Y+7	; 0x07
    2f1c:	26 30       	cpi	r18, 0x06	; 6
    2f1e:	31 05       	cpc	r19, r1
    2f20:	f1 f0       	breq	.+60     	; 0x2f5e <enu_AddCustomCharacter+0xd2>
    2f22:	8e 81       	ldd	r24, Y+6	; 0x06
    2f24:	9f 81       	ldd	r25, Y+7	; 0x07
    2f26:	87 30       	cpi	r24, 0x07	; 7
    2f28:	91 05       	cpc	r25, r1
    2f2a:	e9 f0       	breq	.+58     	; 0x2f66 <enu_AddCustomCharacter+0xda>
    2f2c:	1f c0       	rjmp	.+62     	; 0x2f6c <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    2f2e:	80 e4       	ldi	r24, 0x40	; 64
    2f30:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
    2f34:	1b c0       	rjmp	.+54     	; 0x2f6c <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    2f36:	88 e4       	ldi	r24, 0x48	; 72
    2f38:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
    2f3c:	17 c0       	rjmp	.+46     	; 0x2f6c <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    2f3e:	80 e5       	ldi	r24, 0x50	; 80
    2f40:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
    2f44:	13 c0       	rjmp	.+38     	; 0x2f6c <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    2f46:	88 e5       	ldi	r24, 0x58	; 88
    2f48:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
    2f4c:	0f c0       	rjmp	.+30     	; 0x2f6c <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    2f4e:	80 e6       	ldi	r24, 0x60	; 96
    2f50:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
    2f54:	0b c0       	rjmp	.+22     	; 0x2f6c <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    2f56:	88 e6       	ldi	r24, 0x68	; 104
    2f58:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
    2f5c:	07 c0       	rjmp	.+14     	; 0x2f6c <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    2f5e:	80 e7       	ldi	r24, 0x70	; 112
    2f60:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
    2f64:	03 c0       	rjmp	.+6      	; 0x2f6c <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    2f66:	88 e7       	ldi	r24, 0x78	; 120
    2f68:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	61 e0       	ldi	r22, 0x01	; 1
    2f70:	41 e0       	ldi	r20, 0x01	; 1
    2f72:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    2f76:	19 82       	std	Y+1, r1	; 0x01
    2f78:	0e c0       	rjmp	.+28     	; 0x2f96 <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	28 2f       	mov	r18, r24
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	8b 81       	ldd	r24, Y+3	; 0x03
    2f82:	9c 81       	ldd	r25, Y+4	; 0x04
    2f84:	fc 01       	movw	r30, r24
    2f86:	e2 0f       	add	r30, r18
    2f88:	f3 1f       	adc	r31, r19
    2f8a:	80 81       	ld	r24, Z
    2f8c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	8f 5f       	subi	r24, 0xFF	; 255
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	88 30       	cpi	r24, 0x08	; 8
    2f9a:	78 f3       	brcs	.-34     	; 0x2f7a <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    2f9c:	1a 82       	std	Y+2, r1	; 0x02
    2f9e:	05 c0       	rjmp	.+10     	; 0x2faa <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2fa0:	82 e0       	ldi	r24, 0x02	; 2
    2fa2:	8a 83       	std	Y+2, r24	; 0x02
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2fa6:	83 e0       	ldi	r24, 0x03	; 3
    2fa8:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2fac:	27 96       	adiw	r28, 0x07	; 7
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	08 95       	ret

00002fbe <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	00 d0       	rcall	.+0      	; 0x2fc4 <enu_ConvertDigitToASCII+0x6>
    2fc4:	0f 92       	push	r0
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	9b 83       	std	Y+3, r25	; 0x03
    2fcc:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    2fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd6:	00 97       	sbiw	r24, 0x00	; 0
    2fd8:	89 f0       	breq	.+34     	; 0x2ffc <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    2fda:	ea 81       	ldd	r30, Y+2	; 0x02
    2fdc:	fb 81       	ldd	r31, Y+3	; 0x03
    2fde:	80 81       	ld	r24, Z
    2fe0:	8a 30       	cpi	r24, 0x0A	; 10
    2fe2:	48 f4       	brcc	.+18     	; 0x2ff6 <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    2fe4:	ea 81       	ldd	r30, Y+2	; 0x02
    2fe6:	fb 81       	ldd	r31, Y+3	; 0x03
    2fe8:	80 81       	ld	r24, Z
    2fea:	80 5d       	subi	r24, 0xD0	; 208
    2fec:	ea 81       	ldd	r30, Y+2	; 0x02
    2fee:	fb 81       	ldd	r31, Y+3	; 0x03
    2ff0:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    2ff2:	19 82       	std	Y+1, r1	; 0x01
    2ff4:	05 c0       	rjmp	.+10     	; 0x3000 <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	89 83       	std	Y+1, r24	; 0x01
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    3000:	89 81       	ldd	r24, Y+1	; 0x01
}
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    300e:	ef 92       	push	r14
    3010:	ff 92       	push	r15
    3012:	0f 93       	push	r16
    3014:	1f 93       	push	r17
    3016:	df 93       	push	r29
    3018:	cf 93       	push	r28
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62
    301e:	27 97       	sbiw	r28, 0x07	; 7
    3020:	0f b6       	in	r0, 0x3f	; 63
    3022:	f8 94       	cli
    3024:	de bf       	out	0x3e, r29	; 62
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	cd bf       	out	0x3d, r28	; 61
    302a:	9f 83       	std	Y+7, r25	; 0x07
    302c:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    302e:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    3030:	8e 81       	ldd	r24, Y+6	; 0x06
    3032:	9f 81       	ldd	r25, Y+7	; 0x07
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	09 f4       	brne	.+2      	; 0x303a <enu_ReverseInteger+0x2c>
    3038:	58 c0       	rjmp	.+176    	; 0x30ea <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    303a:	19 82       	std	Y+1, r1	; 0x01
    303c:	1a 82       	std	Y+2, r1	; 0x02
    303e:	1b 82       	std	Y+3, r1	; 0x03
    3040:	1c 82       	std	Y+4, r1	; 0x04
    3042:	3c c0       	rjmp	.+120    	; 0x30bc <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	9a 81       	ldd	r25, Y+2	; 0x02
    3048:	ab 81       	ldd	r26, Y+3	; 0x03
    304a:	bc 81       	ldd	r27, Y+4	; 0x04
    304c:	2a e0       	ldi	r18, 0x0A	; 10
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	50 e0       	ldi	r21, 0x00	; 0
    3054:	bc 01       	movw	r22, r24
    3056:	cd 01       	movw	r24, r26
    3058:	0e 94 8f 1c 	call	0x391e	; 0x391e <__mulsi3>
    305c:	7b 01       	movw	r14, r22
    305e:	8c 01       	movw	r16, r24
    3060:	ee 81       	ldd	r30, Y+6	; 0x06
    3062:	ff 81       	ldd	r31, Y+7	; 0x07
    3064:	80 81       	ld	r24, Z
    3066:	91 81       	ldd	r25, Z+1	; 0x01
    3068:	a2 81       	ldd	r26, Z+2	; 0x02
    306a:	b3 81       	ldd	r27, Z+3	; 0x03
    306c:	2a e0       	ldi	r18, 0x0A	; 10
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e0       	ldi	r20, 0x00	; 0
    3072:	50 e0       	ldi	r21, 0x00	; 0
    3074:	bc 01       	movw	r22, r24
    3076:	cd 01       	movw	r24, r26
    3078:	0e 94 ae 1c 	call	0x395c	; 0x395c <__udivmodsi4>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	8e 0d       	add	r24, r14
    3082:	9f 1d       	adc	r25, r15
    3084:	a0 1f       	adc	r26, r16
    3086:	b1 1f       	adc	r27, r17
    3088:	89 83       	std	Y+1, r24	; 0x01
    308a:	9a 83       	std	Y+2, r25	; 0x02
    308c:	ab 83       	std	Y+3, r26	; 0x03
    308e:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    3090:	ee 81       	ldd	r30, Y+6	; 0x06
    3092:	ff 81       	ldd	r31, Y+7	; 0x07
    3094:	80 81       	ld	r24, Z
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	a2 81       	ldd	r26, Z+2	; 0x02
    309a:	b3 81       	ldd	r27, Z+3	; 0x03
    309c:	2a e0       	ldi	r18, 0x0A	; 10
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e0       	ldi	r20, 0x00	; 0
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	bc 01       	movw	r22, r24
    30a6:	cd 01       	movw	r24, r26
    30a8:	0e 94 ae 1c 	call	0x395c	; 0x395c <__udivmodsi4>
    30ac:	da 01       	movw	r26, r20
    30ae:	c9 01       	movw	r24, r18
    30b0:	ee 81       	ldd	r30, Y+6	; 0x06
    30b2:	ff 81       	ldd	r31, Y+7	; 0x07
    30b4:	80 83       	st	Z, r24
    30b6:	91 83       	std	Z+1, r25	; 0x01
    30b8:	a2 83       	std	Z+2, r26	; 0x02
    30ba:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    30bc:	ee 81       	ldd	r30, Y+6	; 0x06
    30be:	ff 81       	ldd	r31, Y+7	; 0x07
    30c0:	80 81       	ld	r24, Z
    30c2:	91 81       	ldd	r25, Z+1	; 0x01
    30c4:	a2 81       	ldd	r26, Z+2	; 0x02
    30c6:	b3 81       	ldd	r27, Z+3	; 0x03
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	a1 05       	cpc	r26, r1
    30cc:	b1 05       	cpc	r27, r1
    30ce:	09 f0       	breq	.+2      	; 0x30d2 <enu_ReverseInteger+0xc4>
    30d0:	b9 cf       	rjmp	.-142    	; 0x3044 <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    30d2:	ee 81       	ldd	r30, Y+6	; 0x06
    30d4:	ff 81       	ldd	r31, Y+7	; 0x07
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	9a 81       	ldd	r25, Y+2	; 0x02
    30da:	ab 81       	ldd	r26, Y+3	; 0x03
    30dc:	bc 81       	ldd	r27, Y+4	; 0x04
    30de:	80 83       	st	Z, r24
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	a2 83       	std	Z+2, r26	; 0x02
    30e4:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    30e6:	1d 82       	std	Y+5, r1	; 0x05
    30e8:	02 c0       	rjmp	.+4      	; 0x30ee <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    30ea:	83 e0       	ldi	r24, 0x03	; 3
    30ec:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    30ee:	8d 81       	ldd	r24, Y+5	; 0x05
}
    30f0:	27 96       	adiw	r28, 0x07	; 7
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	1f 91       	pop	r17
    3102:	0f 91       	pop	r16
    3104:	ff 90       	pop	r15
    3106:	ef 90       	pop	r14
    3108:	08 95       	ret

0000310a <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    310a:	df 93       	push	r29
    310c:	cf 93       	push	r28
    310e:	00 d0       	rcall	.+0      	; 0x3110 <Keypad_enu_Initialization+0x6>
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    3118:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    311a:	19 82       	std	Y+1, r1	; 0x01
    311c:	31 c0       	rjmp	.+98     	; 0x3180 <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	88 2f       	mov	r24, r24
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	fc 01       	movw	r30, r24
    312a:	ea 57       	subi	r30, 0x7A	; 122
    312c:	fe 4f       	sbci	r31, 0xFE	; 254
    312e:	20 81       	ld	r18, Z
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	88 2f       	mov	r24, r24
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	88 0f       	add	r24, r24
    3138:	99 1f       	adc	r25, r25
    313a:	fc 01       	movw	r30, r24
    313c:	e9 57       	subi	r30, 0x79	; 121
    313e:	fe 4f       	sbci	r31, 0xFE	; 254
    3140:	90 81       	ld	r25, Z
    3142:	82 2f       	mov	r24, r18
    3144:	69 2f       	mov	r22, r25
    3146:	40 e0       	ldi	r20, 0x00	; 0
    3148:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	88 2f       	mov	r24, r24
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	fc 01       	movw	r30, r24
    3158:	ea 57       	subi	r30, 0x7A	; 122
    315a:	fe 4f       	sbci	r31, 0xFE	; 254
    315c:	20 81       	ld	r18, Z
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	88 2f       	mov	r24, r24
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	88 0f       	add	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	fc 01       	movw	r30, r24
    316a:	e9 57       	subi	r30, 0x79	; 121
    316c:	fe 4f       	sbci	r31, 0xFE	; 254
    316e:	90 81       	ld	r25, Z
    3170:	82 2f       	mov	r24, r18
    3172:	69 2f       	mov	r22, r25
    3174:	41 e0       	ldi	r20, 0x01	; 1
    3176:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	8f 5f       	subi	r24, 0xFF	; 255
    317e:	89 83       	std	Y+1, r24	; 0x01
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	84 30       	cpi	r24, 0x04	; 4
    3184:	60 f2       	brcs	.-104    	; 0x311e <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    3186:	19 82       	std	Y+1, r1	; 0x01
    3188:	31 c0       	rjmp	.+98     	; 0x31ec <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	88 2f       	mov	r24, r24
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	88 0f       	add	r24, r24
    3192:	99 1f       	adc	r25, r25
    3194:	fc 01       	movw	r30, r24
    3196:	e2 57       	subi	r30, 0x72	; 114
    3198:	fe 4f       	sbci	r31, 0xFE	; 254
    319a:	20 81       	ld	r18, Z
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	88 2f       	mov	r24, r24
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	fc 01       	movw	r30, r24
    31a8:	e1 57       	subi	r30, 0x71	; 113
    31aa:	fe 4f       	sbci	r31, 0xFE	; 254
    31ac:	90 81       	ld	r25, Z
    31ae:	82 2f       	mov	r24, r18
    31b0:	69 2f       	mov	r22, r25
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	88 2f       	mov	r24, r24
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	88 0f       	add	r24, r24
    31c0:	99 1f       	adc	r25, r25
    31c2:	fc 01       	movw	r30, r24
    31c4:	e2 57       	subi	r30, 0x72	; 114
    31c6:	fe 4f       	sbci	r31, 0xFE	; 254
    31c8:	20 81       	ld	r18, Z
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	88 2f       	mov	r24, r24
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	88 0f       	add	r24, r24
    31d2:	99 1f       	adc	r25, r25
    31d4:	fc 01       	movw	r30, r24
    31d6:	e1 57       	subi	r30, 0x71	; 113
    31d8:	fe 4f       	sbci	r31, 0xFE	; 254
    31da:	90 81       	ld	r25, Z
    31dc:	82 2f       	mov	r24, r18
    31de:	69 2f       	mov	r22, r25
    31e0:	40 e0       	ldi	r20, 0x00	; 0
    31e2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	8f 5f       	subi	r24, 0xFF	; 255
    31ea:	89 83       	std	Y+1, r24	; 0x01
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	84 30       	cpi	r24, 0x04	; 4
    31f0:	60 f2       	brcs	.-104    	; 0x318a <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    31f2:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02

}
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	cf 91       	pop	r28
    31fc:	df 91       	pop	r29
    31fe:	08 95       	ret

00003200 <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    3200:	df 93       	push	r29
    3202:	cf 93       	push	r28
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
    3208:	aa 97       	sbiw	r28, 0x2a	; 42
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	f8 94       	cli
    320e:	de bf       	out	0x3e, r29	; 62
    3210:	0f be       	out	0x3f, r0	; 63
    3212:	cd bf       	out	0x3d, r28	; 61
    3214:	9d a3       	std	Y+37, r25	; 0x25
    3216:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    321c:	8c a1       	ldd	r24, Y+36	; 0x24
    321e:	9d a1       	ldd	r25, Y+37	; 0x25
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	09 f4       	brne	.+2      	; 0x3226 <Keypad_enu_GetButtonPressedValue+0x26>
    3224:	68 c1       	rjmp	.+720    	; 0x34f6 <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    3226:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    3228:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    322a:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    322c:	ec a1       	ldd	r30, Y+36	; 0x24
    322e:	fd a1       	ldd	r31, Y+37	; 0x25
    3230:	8f ef       	ldi	r24, 0xFF	; 255
    3232:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    3234:	19 8a       	std	Y+17, r1	; 0x11
    3236:	5a c1       	rjmp	.+692    	; 0x34ec <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    3238:	89 89       	ldd	r24, Y+17	; 0x11
    323a:	88 2f       	mov	r24, r24
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	88 0f       	add	r24, r24
    3240:	99 1f       	adc	r25, r25
    3242:	fc 01       	movw	r30, r24
    3244:	ea 57       	subi	r30, 0x7A	; 122
    3246:	fe 4f       	sbci	r31, 0xFE	; 254
    3248:	40 81       	ld	r20, Z
    324a:	89 89       	ldd	r24, Y+17	; 0x11
    324c:	88 2f       	mov	r24, r24
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	88 0f       	add	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	fc 01       	movw	r30, r24
    3256:	e9 57       	subi	r30, 0x79	; 121
    3258:	fe 4f       	sbci	r31, 0xFE	; 254
    325a:	90 81       	ld	r25, Z
    325c:	9e 01       	movw	r18, r28
    325e:	2d 5e       	subi	r18, 0xED	; 237
    3260:	3f 4f       	sbci	r19, 0xFF	; 255
    3262:	84 2f       	mov	r24, r20
    3264:	69 2f       	mov	r22, r25
    3266:	a9 01       	movw	r20, r18
    3268:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    326c:	8b 89       	ldd	r24, Y+19	; 0x13
    326e:	88 23       	and	r24, r24
    3270:	09 f0       	breq	.+2      	; 0x3274 <Keypad_enu_GetButtonPressedValue+0x74>
    3272:	36 c1       	rjmp	.+620    	; 0x34e0 <Keypad_enu_GetButtonPressedValue+0x2e0>
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	a0 e4       	ldi	r26, 0x40	; 64
    327a:	b0 e4       	ldi	r27, 0x40	; 64
    327c:	8b 87       	std	Y+11, r24	; 0x0b
    327e:	9c 87       	std	Y+12, r25	; 0x0c
    3280:	ad 87       	std	Y+13, r26	; 0x0d
    3282:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3284:	6b 85       	ldd	r22, Y+11	; 0x0b
    3286:	7c 85       	ldd	r23, Y+12	; 0x0c
    3288:	8d 85       	ldd	r24, Y+13	; 0x0d
    328a:	9e 85       	ldd	r25, Y+14	; 0x0e
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	4a e7       	ldi	r20, 0x7A	; 122
    3292:	55 e4       	ldi	r21, 0x45	; 69
    3294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	8f 83       	std	Y+7, r24	; 0x07
    329e:	98 87       	std	Y+8, r25	; 0x08
    32a0:	a9 87       	std	Y+9, r26	; 0x09
    32a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32a4:	6f 81       	ldd	r22, Y+7	; 0x07
    32a6:	78 85       	ldd	r23, Y+8	; 0x08
    32a8:	89 85       	ldd	r24, Y+9	; 0x09
    32aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e8       	ldi	r20, 0x80	; 128
    32b2:	5f e3       	ldi	r21, 0x3F	; 63
    32b4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    32b8:	88 23       	and	r24, r24
    32ba:	2c f4       	brge	.+10     	; 0x32c6 <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	9e 83       	std	Y+6, r25	; 0x06
    32c2:	8d 83       	std	Y+5, r24	; 0x05
    32c4:	3f c0       	rjmp	.+126    	; 0x3344 <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    32c6:	6f 81       	ldd	r22, Y+7	; 0x07
    32c8:	78 85       	ldd	r23, Y+8	; 0x08
    32ca:	89 85       	ldd	r24, Y+9	; 0x09
    32cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	3f ef       	ldi	r19, 0xFF	; 255
    32d2:	4f e7       	ldi	r20, 0x7F	; 127
    32d4:	57 e4       	ldi	r21, 0x47	; 71
    32d6:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    32da:	18 16       	cp	r1, r24
    32dc:	4c f5       	brge	.+82     	; 0x3330 <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32de:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e2       	ldi	r20, 0x20	; 32
    32ec:	51 e4       	ldi	r21, 0x41	; 65
    32ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	bc 01       	movw	r22, r24
    32f8:	cd 01       	movw	r24, r26
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9e 83       	std	Y+6, r25	; 0x06
    3304:	8d 83       	std	Y+5, r24	; 0x05
    3306:	0f c0       	rjmp	.+30     	; 0x3326 <Keypad_enu_GetButtonPressedValue+0x126>
    3308:	80 e9       	ldi	r24, 0x90	; 144
    330a:	91 e0       	ldi	r25, 0x01	; 1
    330c:	9c 83       	std	Y+4, r25	; 0x04
    330e:	8b 83       	std	Y+3, r24	; 0x03
    3310:	8b 81       	ldd	r24, Y+3	; 0x03
    3312:	9c 81       	ldd	r25, Y+4	; 0x04
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	f1 f7       	brne	.-4      	; 0x3314 <Keypad_enu_GetButtonPressedValue+0x114>
    3318:	9c 83       	std	Y+4, r25	; 0x04
    331a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	9e 81       	ldd	r25, Y+6	; 0x06
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3326:	8d 81       	ldd	r24, Y+5	; 0x05
    3328:	9e 81       	ldd	r25, Y+6	; 0x06
    332a:	00 97       	sbiw	r24, 0x00	; 0
    332c:	69 f7       	brne	.-38     	; 0x3308 <Keypad_enu_GetButtonPressedValue+0x108>
    332e:	14 c0       	rjmp	.+40     	; 0x3358 <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3330:	6f 81       	ldd	r22, Y+7	; 0x07
    3332:	78 85       	ldd	r23, Y+8	; 0x08
    3334:	89 85       	ldd	r24, Y+9	; 0x09
    3336:	9a 85       	ldd	r25, Y+10	; 0x0a
    3338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	9e 83       	std	Y+6, r25	; 0x06
    3342:	8d 83       	std	Y+5, r24	; 0x05
    3344:	8d 81       	ldd	r24, Y+5	; 0x05
    3346:	9e 81       	ldd	r25, Y+6	; 0x06
    3348:	9a 83       	std	Y+2, r25	; 0x02
    334a:	89 83       	std	Y+1, r24	; 0x01
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	9a 81       	ldd	r25, Y+2	; 0x02
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <Keypad_enu_GetButtonPressedValue+0x150>
    3354:	9a 83       	std	Y+2, r25	; 0x02
    3356:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    3358:	89 89       	ldd	r24, Y+17	; 0x11
    335a:	88 2f       	mov	r24, r24
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	88 0f       	add	r24, r24
    3360:	99 1f       	adc	r25, r25
    3362:	fc 01       	movw	r30, r24
    3364:	ea 57       	subi	r30, 0x7A	; 122
    3366:	fe 4f       	sbci	r31, 0xFE	; 254
    3368:	40 81       	ld	r20, Z
    336a:	89 89       	ldd	r24, Y+17	; 0x11
    336c:	88 2f       	mov	r24, r24
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	88 0f       	add	r24, r24
    3372:	99 1f       	adc	r25, r25
    3374:	fc 01       	movw	r30, r24
    3376:	e9 57       	subi	r30, 0x79	; 121
    3378:	fe 4f       	sbci	r31, 0xFE	; 254
    337a:	90 81       	ld	r25, Z
    337c:	9e 01       	movw	r18, r28
    337e:	2d 5e       	subi	r18, 0xED	; 237
    3380:	3f 4f       	sbci	r19, 0xFF	; 255
    3382:	84 2f       	mov	r24, r20
    3384:	69 2f       	mov	r22, r25
    3386:	a9 01       	movw	r20, r18
    3388:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    338c:	8b 89       	ldd	r24, Y+19	; 0x13
    338e:	88 23       	and	r24, r24
    3390:	09 f0       	breq	.+2      	; 0x3394 <Keypad_enu_GetButtonPressedValue+0x194>
    3392:	a6 c0       	rjmp	.+332    	; 0x34e0 <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    3394:	18 8a       	std	Y+16, r1	; 0x10
    3396:	a0 c0       	rjmp	.+320    	; 0x34d8 <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    3398:	88 89       	ldd	r24, Y+16	; 0x10
    339a:	88 2f       	mov	r24, r24
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	88 0f       	add	r24, r24
    33a0:	99 1f       	adc	r25, r25
    33a2:	fc 01       	movw	r30, r24
    33a4:	e2 57       	subi	r30, 0x72	; 114
    33a6:	fe 4f       	sbci	r31, 0xFE	; 254
    33a8:	20 81       	ld	r18, Z
    33aa:	88 89       	ldd	r24, Y+16	; 0x10
    33ac:	88 2f       	mov	r24, r24
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	88 0f       	add	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	fc 01       	movw	r30, r24
    33b6:	e1 57       	subi	r30, 0x71	; 113
    33b8:	fe 4f       	sbci	r31, 0xFE	; 254
    33ba:	90 81       	ld	r25, Z
    33bc:	82 2f       	mov	r24, r18
    33be:	69 2f       	mov	r22, r25
    33c0:	41 e0       	ldi	r20, 0x01	; 1
    33c2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    33c6:	89 89       	ldd	r24, Y+17	; 0x11
    33c8:	88 2f       	mov	r24, r24
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	fc 01       	movw	r30, r24
    33d2:	ea 57       	subi	r30, 0x7A	; 122
    33d4:	fe 4f       	sbci	r31, 0xFE	; 254
    33d6:	40 81       	ld	r20, Z
    33d8:	89 89       	ldd	r24, Y+17	; 0x11
    33da:	88 2f       	mov	r24, r24
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	88 0f       	add	r24, r24
    33e0:	99 1f       	adc	r25, r25
    33e2:	fc 01       	movw	r30, r24
    33e4:	e9 57       	subi	r30, 0x79	; 121
    33e6:	fe 4f       	sbci	r31, 0xFE	; 254
    33e8:	90 81       	ld	r25, Z
    33ea:	9e 01       	movw	r18, r28
    33ec:	2d 5e       	subi	r18, 0xED	; 237
    33ee:	3f 4f       	sbci	r19, 0xFF	; 255
    33f0:	84 2f       	mov	r24, r20
    33f2:	69 2f       	mov	r22, r25
    33f4:	a9 01       	movw	r20, r18
    33f6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    33fa:	8b 89       	ldd	r24, Y+19	; 0x13
    33fc:	81 30       	cpi	r24, 0x01	; 1
    33fe:	09 f0       	breq	.+2      	; 0x3402 <Keypad_enu_GetButtonPressedValue+0x202>
    3400:	51 c0       	rjmp	.+162    	; 0x34a4 <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    3402:	ce 01       	movw	r24, r28
    3404:	44 96       	adiw	r24, 0x14	; 20
    3406:	9f a3       	std	Y+39, r25	; 0x27
    3408:	8e a3       	std	Y+38, r24	; 0x26
    340a:	e9 e9       	ldi	r30, 0x99	; 153
    340c:	f1 e0       	ldi	r31, 0x01	; 1
    340e:	f9 a7       	std	Y+41, r31	; 0x29
    3410:	e8 a7       	std	Y+40, r30	; 0x28
    3412:	f0 e1       	ldi	r31, 0x10	; 16
    3414:	fa a7       	std	Y+42, r31	; 0x2a
    3416:	e8 a5       	ldd	r30, Y+40	; 0x28
    3418:	f9 a5       	ldd	r31, Y+41	; 0x29
    341a:	00 80       	ld	r0, Z
    341c:	88 a5       	ldd	r24, Y+40	; 0x28
    341e:	99 a5       	ldd	r25, Y+41	; 0x29
    3420:	01 96       	adiw	r24, 0x01	; 1
    3422:	99 a7       	std	Y+41, r25	; 0x29
    3424:	88 a7       	std	Y+40, r24	; 0x28
    3426:	ee a1       	ldd	r30, Y+38	; 0x26
    3428:	ff a1       	ldd	r31, Y+39	; 0x27
    342a:	00 82       	st	Z, r0
    342c:	8e a1       	ldd	r24, Y+38	; 0x26
    342e:	9f a1       	ldd	r25, Y+39	; 0x27
    3430:	01 96       	adiw	r24, 0x01	; 1
    3432:	9f a3       	std	Y+39, r25	; 0x27
    3434:	8e a3       	std	Y+38, r24	; 0x26
    3436:	9a a5       	ldd	r25, Y+42	; 0x2a
    3438:	91 50       	subi	r25, 0x01	; 1
    343a:	9a a7       	std	Y+42, r25	; 0x2a
    343c:	ea a5       	ldd	r30, Y+42	; 0x2a
    343e:	ee 23       	and	r30, r30
    3440:	51 f7       	brne	.-44     	; 0x3416 <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    3442:	89 89       	ldd	r24, Y+17	; 0x11
    3444:	28 2f       	mov	r18, r24
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	88 89       	ldd	r24, Y+16	; 0x10
    344a:	48 2f       	mov	r20, r24
    344c:	50 e0       	ldi	r21, 0x00	; 0
    344e:	22 0f       	add	r18, r18
    3450:	33 1f       	adc	r19, r19
    3452:	22 0f       	add	r18, r18
    3454:	33 1f       	adc	r19, r19
    3456:	ce 01       	movw	r24, r28
    3458:	01 96       	adiw	r24, 0x01	; 1
    345a:	82 0f       	add	r24, r18
    345c:	93 1f       	adc	r25, r19
    345e:	84 0f       	add	r24, r20
    3460:	95 1f       	adc	r25, r21
    3462:	fc 01       	movw	r30, r24
    3464:	73 96       	adiw	r30, 0x13	; 19
    3466:	80 81       	ld	r24, Z
    3468:	ec a1       	ldd	r30, Y+36	; 0x24
    346a:	fd a1       	ldd	r31, Y+37	; 0x25
    346c:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    3472:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    3474:	88 89       	ldd	r24, Y+16	; 0x10
    3476:	88 2f       	mov	r24, r24
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	88 0f       	add	r24, r24
    347c:	99 1f       	adc	r25, r25
    347e:	fc 01       	movw	r30, r24
    3480:	e2 57       	subi	r30, 0x72	; 114
    3482:	fe 4f       	sbci	r31, 0xFE	; 254
    3484:	20 81       	ld	r18, Z
    3486:	88 89       	ldd	r24, Y+16	; 0x10
    3488:	88 2f       	mov	r24, r24
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	88 0f       	add	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	fc 01       	movw	r30, r24
    3492:	e1 57       	subi	r30, 0x71	; 113
    3494:	fe 4f       	sbci	r31, 0xFE	; 254
    3496:	90 81       	ld	r25, Z
    3498:	82 2f       	mov	r24, r18
    349a:	69 2f       	mov	r22, r25
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    34a2:	1e c0       	rjmp	.+60     	; 0x34e0 <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    34a4:	88 89       	ldd	r24, Y+16	; 0x10
    34a6:	88 2f       	mov	r24, r24
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	88 0f       	add	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	fc 01       	movw	r30, r24
    34b0:	e2 57       	subi	r30, 0x72	; 114
    34b2:	fe 4f       	sbci	r31, 0xFE	; 254
    34b4:	20 81       	ld	r18, Z
    34b6:	88 89       	ldd	r24, Y+16	; 0x10
    34b8:	88 2f       	mov	r24, r24
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	88 0f       	add	r24, r24
    34be:	99 1f       	adc	r25, r25
    34c0:	fc 01       	movw	r30, r24
    34c2:	e1 57       	subi	r30, 0x71	; 113
    34c4:	fe 4f       	sbci	r31, 0xFE	; 254
    34c6:	90 81       	ld	r25, Z
    34c8:	82 2f       	mov	r24, r18
    34ca:	69 2f       	mov	r22, r25
    34cc:	40 e0       	ldi	r20, 0x00	; 0
    34ce:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    34d2:	88 89       	ldd	r24, Y+16	; 0x10
    34d4:	8f 5f       	subi	r24, 0xFF	; 255
    34d6:	88 8b       	std	Y+16, r24	; 0x10
    34d8:	88 89       	ldd	r24, Y+16	; 0x10
    34da:	84 30       	cpi	r24, 0x04	; 4
    34dc:	08 f4       	brcc	.+2      	; 0x34e0 <Keypad_enu_GetButtonPressedValue+0x2e0>
    34de:	5c cf       	rjmp	.-328    	; 0x3398 <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    34e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e2:	88 23       	and	r24, r24
    34e4:	51 f4       	brne	.+20     	; 0x34fa <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    34e6:	89 89       	ldd	r24, Y+17	; 0x11
    34e8:	8f 5f       	subi	r24, 0xFF	; 255
    34ea:	89 8b       	std	Y+17, r24	; 0x11
    34ec:	89 89       	ldd	r24, Y+17	; 0x11
    34ee:	84 30       	cpi	r24, 0x04	; 4
    34f0:	08 f4       	brcc	.+2      	; 0x34f4 <Keypad_enu_GetButtonPressedValue+0x2f4>
    34f2:	a2 ce       	rjmp	.-700    	; 0x3238 <Keypad_enu_GetButtonPressedValue+0x38>
    34f4:	02 c0       	rjmp	.+4      	; 0x34fa <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    34f6:	83 e0       	ldi	r24, 0x03	; 3
    34f8:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    34fa:	8a 89       	ldd	r24, Y+18	; 0x12

}
    34fc:	aa 96       	adiw	r28, 0x2a	; 42
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	f8 94       	cli
    3502:	de bf       	out	0x3e, r29	; 62
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	cd bf       	out	0x3d, r28	; 61
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	0f 92       	push	r0
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	64 e0       	ldi	r22, 0x04	; 4
    3520:	41 e0       	ldi	r20, 0x01	; 1
    3522:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	65 e0       	ldi	r22, 0x05	; 5
    352a:	41 e0       	ldi	r20, 0x01	; 1
    352c:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	66 e0       	ldi	r22, 0x06	; 6
    3534:	41 e0       	ldi	r20, 0x01	; 1
    3536:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	67 e0       	ldi	r22, 0x07	; 7
    353e:	41 e0       	ldi	r20, 0x01	; 1
    3540:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	62 e0       	ldi	r22, 0x02	; 2
    3548:	41 e0       	ldi	r20, 0x01	; 1
    354a:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	61 e0       	ldi	r22, 0x01	; 1
    3552:	41 e0       	ldi	r20, 0x01	; 1
    3554:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    3558:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    355a:	89 81       	ldd	r24, Y+1	; 0x01

}
    355c:	0f 90       	pop	r0
    355e:	cf 91       	pop	r28
    3560:	df 91       	pop	r29
    3562:	08 95       	ret

00003564 <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    3564:	df 93       	push	r29
    3566:	cf 93       	push	r28
    3568:	00 d0       	rcall	.+0      	; 0x356a <Hexadecoder_enu_DisplayNum+0x6>
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
    356e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    3574:	8a 81       	ldd	r24, Y+2	; 0x02
    3576:	8a 30       	cpi	r24, 0x0A	; 10
    3578:	40 f5       	brcc	.+80     	; 0x35ca <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    357a:	8a 81       	ldd	r24, Y+2	; 0x02
    357c:	98 2f       	mov	r25, r24
    357e:	91 70       	andi	r25, 0x01	; 1
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	64 e0       	ldi	r22, 0x04	; 4
    3584:	49 2f       	mov	r20, r25
    3586:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    358a:	8a 81       	ldd	r24, Y+2	; 0x02
    358c:	86 95       	lsr	r24
    358e:	98 2f       	mov	r25, r24
    3590:	91 70       	andi	r25, 0x01	; 1
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	65 e0       	ldi	r22, 0x05	; 5
    3596:	49 2f       	mov	r20, r25
    3598:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    359c:	8a 81       	ldd	r24, Y+2	; 0x02
    359e:	86 95       	lsr	r24
    35a0:	86 95       	lsr	r24
    35a2:	98 2f       	mov	r25, r24
    35a4:	91 70       	andi	r25, 0x01	; 1
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	66 e0       	ldi	r22, 0x06	; 6
    35aa:	49 2f       	mov	r20, r25
    35ac:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	86 95       	lsr	r24
    35b4:	86 95       	lsr	r24
    35b6:	86 95       	lsr	r24
    35b8:	98 2f       	mov	r25, r24
    35ba:	91 70       	andi	r25, 0x01	; 1
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	67 e0       	ldi	r22, 0x07	; 7
    35c0:	49 2f       	mov	r20, r25
    35c2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    35c6:	19 82       	std	Y+1, r1	; 0x01
    35c8:	02 c0       	rjmp	.+4      	; 0x35ce <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    35ca:	82 e0       	ldi	r24, 0x02	; 2
    35cc:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
} 
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	cf 91       	pop	r28
    35d6:	df 91       	pop	r29
    35d8:	08 95       	ret

000035da <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    35da:	df 93       	push	r29
    35dc:	cf 93       	push	r28
    35de:	00 d0       	rcall	.+0      	; 0x35e0 <Hexadecoder_enu_EnableSSG+0x6>
    35e0:	00 d0       	rcall	.+0      	; 0x35e2 <Hexadecoder_enu_EnableSSG+0x8>
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    35ec:	8a 81       	ldd	r24, Y+2	; 0x02
    35ee:	28 2f       	mov	r18, r24
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	3c 83       	std	Y+4, r19	; 0x04
    35f4:	2b 83       	std	Y+3, r18	; 0x03
    35f6:	8b 81       	ldd	r24, Y+3	; 0x03
    35f8:	9c 81       	ldd	r25, Y+4	; 0x04
    35fa:	00 97       	sbiw	r24, 0x00	; 0
    35fc:	31 f0       	breq	.+12     	; 0x360a <Hexadecoder_enu_EnableSSG+0x30>
    35fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3600:	3c 81       	ldd	r19, Y+4	; 0x04
    3602:	21 30       	cpi	r18, 0x01	; 1
    3604:	31 05       	cpc	r19, r1
    3606:	41 f0       	breq	.+16     	; 0x3618 <Hexadecoder_enu_EnableSSG+0x3e>
    3608:	0e c0       	rjmp	.+28     	; 0x3626 <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	62 e0       	ldi	r22, 0x02	; 2
    360e:	41 e0       	ldi	r20, 0x01	; 1
    3610:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    3614:	19 82       	std	Y+1, r1	; 0x01
    3616:	09 c0       	rjmp	.+18     	; 0x362a <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	61 e0       	ldi	r22, 0x01	; 1
    361c:	41 e0       	ldi	r20, 0x01	; 1
    361e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    3622:	19 82       	std	Y+1, r1	; 0x01
    3624:	02 c0       	rjmp	.+4      	; 0x362a <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3626:	82 e0       	ldi	r24, 0x02	; 2
    3628:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    362a:	89 81       	ldd	r24, Y+1	; 0x01
}
    362c:	0f 90       	pop	r0
    362e:	0f 90       	pop	r0
    3630:	0f 90       	pop	r0
    3632:	0f 90       	pop	r0
    3634:	cf 91       	pop	r28
    3636:	df 91       	pop	r29
    3638:	08 95       	ret

0000363a <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    363a:	df 93       	push	r29
    363c:	cf 93       	push	r28
    363e:	00 d0       	rcall	.+0      	; 0x3640 <Hexadecoder_enu_DisableSSG+0x6>
    3640:	00 d0       	rcall	.+0      	; 0x3642 <Hexadecoder_enu_DisableSSG+0x8>
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    364c:	8a 81       	ldd	r24, Y+2	; 0x02
    364e:	28 2f       	mov	r18, r24
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	3c 83       	std	Y+4, r19	; 0x04
    3654:	2b 83       	std	Y+3, r18	; 0x03
    3656:	8b 81       	ldd	r24, Y+3	; 0x03
    3658:	9c 81       	ldd	r25, Y+4	; 0x04
    365a:	00 97       	sbiw	r24, 0x00	; 0
    365c:	31 f0       	breq	.+12     	; 0x366a <Hexadecoder_enu_DisableSSG+0x30>
    365e:	2b 81       	ldd	r18, Y+3	; 0x03
    3660:	3c 81       	ldd	r19, Y+4	; 0x04
    3662:	21 30       	cpi	r18, 0x01	; 1
    3664:	31 05       	cpc	r19, r1
    3666:	41 f0       	breq	.+16     	; 0x3678 <Hexadecoder_enu_DisableSSG+0x3e>
    3668:	0e c0       	rjmp	.+28     	; 0x3686 <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	62 e0       	ldi	r22, 0x02	; 2
    366e:	40 e0       	ldi	r20, 0x00	; 0
    3670:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    3674:	19 82       	std	Y+1, r1	; 0x01
    3676:	09 c0       	rjmp	.+18     	; 0x368a <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	61 e0       	ldi	r22, 0x01	; 1
    367c:	40 e0       	ldi	r20, 0x00	; 0
    367e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    3682:	19 82       	std	Y+1, r1	; 0x01
    3684:	02 c0       	rjmp	.+4      	; 0x368a <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3686:	82 e0       	ldi	r24, 0x02	; 2
    3688:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    368a:	89 81       	ldd	r24, Y+1	; 0x01
}
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	0f 90       	pop	r0
    3694:	cf 91       	pop	r28
    3696:	df 91       	pop	r29
    3698:	08 95       	ret

0000369a <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    369a:	df 93       	push	r29
    369c:	cf 93       	push	r28
    369e:	0f 92       	push	r0
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	62 e0       	ldi	r22, 0x02	; 2
    36ac:	40 e0       	ldi	r20, 0x00	; 0
    36ae:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	61 e0       	ldi	r22, 0x01	; 1
    36b6:	40 e0       	ldi	r20, 0x00	; 0
    36b8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    36be:	0f 90       	pop	r0
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <Buzzer_enu_Initialization+0x6>
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    36d4:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    36d6:	19 82       	std	Y+1, r1	; 0x01
    36d8:	31 c0       	rjmp	.+98     	; 0x373c <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    36da:	89 81       	ldd	r24, Y+1	; 0x01
    36dc:	88 2f       	mov	r24, r24
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	88 0f       	add	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	fc 01       	movw	r30, r24
    36e6:	e9 56       	subi	r30, 0x69	; 105
    36e8:	fe 4f       	sbci	r31, 0xFE	; 254
    36ea:	20 81       	ld	r18, Z
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	88 2f       	mov	r24, r24
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	88 0f       	add	r24, r24
    36f4:	99 1f       	adc	r25, r25
    36f6:	fc 01       	movw	r30, r24
    36f8:	e8 56       	subi	r30, 0x68	; 104
    36fa:	fe 4f       	sbci	r31, 0xFE	; 254
    36fc:	90 81       	ld	r25, Z
    36fe:	82 2f       	mov	r24, r18
    3700:	69 2f       	mov	r22, r25
    3702:	41 e0       	ldi	r20, 0x01	; 1
    3704:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	88 2f       	mov	r24, r24
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	fc 01       	movw	r30, r24
    3714:	e9 56       	subi	r30, 0x69	; 105
    3716:	fe 4f       	sbci	r31, 0xFE	; 254
    3718:	20 81       	ld	r18, Z
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	88 2f       	mov	r24, r24
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	88 0f       	add	r24, r24
    3722:	99 1f       	adc	r25, r25
    3724:	fc 01       	movw	r30, r24
    3726:	e8 56       	subi	r30, 0x68	; 104
    3728:	fe 4f       	sbci	r31, 0xFE	; 254
    372a:	90 81       	ld	r25, Z
    372c:	82 2f       	mov	r24, r18
    372e:	69 2f       	mov	r22, r25
    3730:	40 e0       	ldi	r20, 0x00	; 0
    3732:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	8f 5f       	subi	r24, 0xFF	; 255
    373a:	89 83       	std	Y+1, r24	; 0x01
    373c:	90 91 96 01 	lds	r25, 0x0196
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	89 17       	cp	r24, r25
    3744:	50 f2       	brcs	.-108    	; 0x36da <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    3746:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    3748:	8a 81       	ldd	r24, Y+2	; 0x02
}
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	cf 91       	pop	r28
    3750:	df 91       	pop	r29
    3752:	08 95       	ret

00003754 <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    3754:	df 93       	push	r29
    3756:	cf 93       	push	r28
    3758:	00 d0       	rcall	.+0      	; 0x375a <Buzzer_enu_TuronOnBuzzer+0x6>
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
    375e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    3764:	90 91 96 01 	lds	r25, 0x0196
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	89 17       	cp	r24, r25
    376c:	c8 f4       	brcc	.+50     	; 0x37a0 <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	88 2f       	mov	r24, r24
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	88 0f       	add	r24, r24
    3776:	99 1f       	adc	r25, r25
    3778:	fc 01       	movw	r30, r24
    377a:	e9 56       	subi	r30, 0x69	; 105
    377c:	fe 4f       	sbci	r31, 0xFE	; 254
    377e:	20 81       	ld	r18, Z
    3780:	8a 81       	ldd	r24, Y+2	; 0x02
    3782:	88 2f       	mov	r24, r24
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	fc 01       	movw	r30, r24
    378c:	e8 56       	subi	r30, 0x68	; 104
    378e:	fe 4f       	sbci	r31, 0xFE	; 254
    3790:	90 81       	ld	r25, Z
    3792:	82 2f       	mov	r24, r18
    3794:	69 2f       	mov	r22, r25
    3796:	41 e0       	ldi	r20, 0x01	; 1
    3798:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    379c:	89 83       	std	Y+1, r24	; 0x01
    379e:	02 c0       	rjmp	.+4      	; 0x37a4 <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    37a0:	82 e0       	ldi	r24, 0x02	; 2
    37a2:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    37a6:	0f 90       	pop	r0
    37a8:	0f 90       	pop	r0
    37aa:	cf 91       	pop	r28
    37ac:	df 91       	pop	r29
    37ae:	08 95       	ret

000037b0 <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    37b0:	df 93       	push	r29
    37b2:	cf 93       	push	r28
    37b4:	00 d0       	rcall	.+0      	; 0x37b6 <Buzzer_enu_TuronOffBuzzer+0x6>
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
    37ba:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    37c0:	90 91 96 01 	lds	r25, 0x0196
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	89 17       	cp	r24, r25
    37c8:	c8 f4       	brcc	.+50     	; 0x37fc <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    37ca:	8a 81       	ldd	r24, Y+2	; 0x02
    37cc:	88 2f       	mov	r24, r24
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	88 0f       	add	r24, r24
    37d2:	99 1f       	adc	r25, r25
    37d4:	fc 01       	movw	r30, r24
    37d6:	e9 56       	subi	r30, 0x69	; 105
    37d8:	fe 4f       	sbci	r31, 0xFE	; 254
    37da:	20 81       	ld	r18, Z
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	88 2f       	mov	r24, r24
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	88 0f       	add	r24, r24
    37e4:	99 1f       	adc	r25, r25
    37e6:	fc 01       	movw	r30, r24
    37e8:	e8 56       	subi	r30, 0x68	; 104
    37ea:	fe 4f       	sbci	r31, 0xFE	; 254
    37ec:	90 81       	ld	r25, Z
    37ee:	82 2f       	mov	r24, r18
    37f0:	69 2f       	mov	r22, r25
    37f2:	40 e0       	ldi	r20, 0x00	; 0
    37f4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
    37f8:	89 83       	std	Y+1, r24	; 0x01
    37fa:	02 c0       	rjmp	.+4      	; 0x3800 <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    37fc:	82 e0       	ldi	r24, 0x02	; 2
    37fe:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    3800:	89 81       	ldd	r24, Y+1	; 0x01
}
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	cf 91       	pop	r28
    3808:	df 91       	pop	r29
    380a:	08 95       	ret

0000380c <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    380c:	df 93       	push	r29
    380e:	cf 93       	push	r28
    3810:	00 d0       	rcall	.+0      	; 0x3812 <Buzzer_enu_TurnOnAllBuzzers+0x6>
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    381a:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    381c:	19 82       	std	Y+1, r1	; 0x01
    381e:	1a c0       	rjmp	.+52     	; 0x3854 <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	88 2f       	mov	r24, r24
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	88 0f       	add	r24, r24
    3828:	99 1f       	adc	r25, r25
    382a:	fc 01       	movw	r30, r24
    382c:	e9 56       	subi	r30, 0x69	; 105
    382e:	fe 4f       	sbci	r31, 0xFE	; 254
    3830:	20 81       	ld	r18, Z
    3832:	89 81       	ldd	r24, Y+1	; 0x01
    3834:	88 2f       	mov	r24, r24
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	88 0f       	add	r24, r24
    383a:	99 1f       	adc	r25, r25
    383c:	fc 01       	movw	r30, r24
    383e:	e8 56       	subi	r30, 0x68	; 104
    3840:	fe 4f       	sbci	r31, 0xFE	; 254
    3842:	90 81       	ld	r25, Z
    3844:	82 2f       	mov	r24, r18
    3846:	69 2f       	mov	r22, r25
    3848:	41 e0       	ldi	r20, 0x01	; 1
    384a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    384e:	89 81       	ldd	r24, Y+1	; 0x01
    3850:	8f 5f       	subi	r24, 0xFF	; 255
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	90 91 96 01 	lds	r25, 0x0196
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	89 17       	cp	r24, r25
    385c:	08 f3       	brcs	.-62     	; 0x3820 <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    385e:	82 e0       	ldi	r24, 0x02	; 2
    3860:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    3862:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3864:	0f 90       	pop	r0
    3866:	0f 90       	pop	r0
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	08 95       	ret

0000386e <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    386e:	df 93       	push	r29
    3870:	cf 93       	push	r28
    3872:	00 d0       	rcall	.+0      	; 0x3874 <Buzzer_enu_TurnOffAllBuzzers+0x6>
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    387c:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    387e:	19 82       	std	Y+1, r1	; 0x01
    3880:	1a c0       	rjmp	.+52     	; 0x38b6 <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	88 2f       	mov	r24, r24
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	88 0f       	add	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	fc 01       	movw	r30, r24
    388e:	e9 56       	subi	r30, 0x69	; 105
    3890:	fe 4f       	sbci	r31, 0xFE	; 254
    3892:	20 81       	ld	r18, Z
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	88 2f       	mov	r24, r24
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	88 0f       	add	r24, r24
    389c:	99 1f       	adc	r25, r25
    389e:	fc 01       	movw	r30, r24
    38a0:	e8 56       	subi	r30, 0x68	; 104
    38a2:	fe 4f       	sbci	r31, 0xFE	; 254
    38a4:	90 81       	ld	r25, Z
    38a6:	82 2f       	mov	r24, r18
    38a8:	69 2f       	mov	r22, r25
    38aa:	40 e0       	ldi	r20, 0x00	; 0
    38ac:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	8f 5f       	subi	r24, 0xFF	; 255
    38b4:	89 83       	std	Y+1, r24	; 0x01
    38b6:	90 91 96 01 	lds	r25, 0x0196
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	89 17       	cp	r24, r25
    38be:	08 f3       	brcs	.-62     	; 0x3882 <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    38c0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	cf 91       	pop	r28
    38c8:	df 91       	pop	r29
    38ca:	08 95       	ret

000038cc <tog>:
#include "../MCAL/EXTI/EXTI_Interface.h"
#include "../MCAL/DIO/DIO_Interface.h"
#include "../MCAL/SREG/SREG_Interface.h"
 
void tog (void)
{
    38cc:	df 93       	push	r29
    38ce:	cf 93       	push	r28
    38d0:	cd b7       	in	r28, 0x3d	; 61
    38d2:	de b7       	in	r29, 0x3e	; 62
	DIO_enu_TogglePinValue(DIO_PIN_GROUP_C , DIO_PIN_7);
    38d4:	82 e0       	ldi	r24, 0x02	; 2
    38d6:	67 e0       	ldi	r22, 0x07	; 7
    38d8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <DIO_enu_TogglePinValue>
}
    38dc:	cf 91       	pop	r28
    38de:	df 91       	pop	r29
    38e0:	08 95       	ret

000038e2 <main>:

int 
main(void)
{
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_D , DIO_PIN_2 , DIO_PIN_READ);
    38ea:	83 e0       	ldi	r24, 0x03	; 3
    38ec:	62 e0       	ldi	r22, 0x02	; 2
    38ee:	40 e0       	ldi	r20, 0x00	; 0
    38f0:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
	DIO_enu_SetPinState(DIO_PIN_GROUP_D , DIO_PIN_2 , DIO_FLOAT);
    38f4:	83 e0       	ldi	r24, 0x03	; 3
    38f6:	62 e0       	ldi	r22, 0x02	; 2
    38f8:	40 e0       	ldi	r20, 0x00	; 0
    38fa:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DIO_enu_SetPinState>
	
	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_C , DIO_PIN_7 , DIO_PIN_WRITE);
    38fe:	82 e0       	ldi	r24, 0x02	; 2
    3900:	67 e0       	ldi	r22, 0x07	; 7
    3902:	41 e0       	ldi	r20, 0x01	; 1
    3904:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_enu_SetPinDiretion>
	EXTI_enuInit();
    3908:	0e 94 ab 06 	call	0xd56	; 0xd56 <EXTI_enuInit>

	EXTI_enuSetCallBack(EXTI_INT2 , tog);
    390c:	26 e6       	ldi	r18, 0x66	; 102
    390e:	3c e1       	ldi	r19, 0x1C	; 28
    3910:	82 e0       	ldi	r24, 0x02	; 2
    3912:	b9 01       	movw	r22, r18
    3914:	0e 94 35 07 	call	0xe6a	; 0xe6a <EXTI_enuSetCallBack>

	SREG_vid_EnableBitI();
    3918:	0e 94 9b 06 	call	0xd36	; 0xd36 <SREG_vid_EnableBitI>
    391c:	ff cf       	rjmp	.-2      	; 0x391c <main+0x3a>

0000391e <__mulsi3>:
    391e:	62 9f       	mul	r22, r18
    3920:	d0 01       	movw	r26, r0
    3922:	73 9f       	mul	r23, r19
    3924:	f0 01       	movw	r30, r0
    3926:	82 9f       	mul	r24, r18
    3928:	e0 0d       	add	r30, r0
    392a:	f1 1d       	adc	r31, r1
    392c:	64 9f       	mul	r22, r20
    392e:	e0 0d       	add	r30, r0
    3930:	f1 1d       	adc	r31, r1
    3932:	92 9f       	mul	r25, r18
    3934:	f0 0d       	add	r31, r0
    3936:	83 9f       	mul	r24, r19
    3938:	f0 0d       	add	r31, r0
    393a:	74 9f       	mul	r23, r20
    393c:	f0 0d       	add	r31, r0
    393e:	65 9f       	mul	r22, r21
    3940:	f0 0d       	add	r31, r0
    3942:	99 27       	eor	r25, r25
    3944:	72 9f       	mul	r23, r18
    3946:	b0 0d       	add	r27, r0
    3948:	e1 1d       	adc	r30, r1
    394a:	f9 1f       	adc	r31, r25
    394c:	63 9f       	mul	r22, r19
    394e:	b0 0d       	add	r27, r0
    3950:	e1 1d       	adc	r30, r1
    3952:	f9 1f       	adc	r31, r25
    3954:	bd 01       	movw	r22, r26
    3956:	cf 01       	movw	r24, r30
    3958:	11 24       	eor	r1, r1
    395a:	08 95       	ret

0000395c <__udivmodsi4>:
    395c:	a1 e2       	ldi	r26, 0x21	; 33
    395e:	1a 2e       	mov	r1, r26
    3960:	aa 1b       	sub	r26, r26
    3962:	bb 1b       	sub	r27, r27
    3964:	fd 01       	movw	r30, r26
    3966:	0d c0       	rjmp	.+26     	; 0x3982 <__udivmodsi4_ep>

00003968 <__udivmodsi4_loop>:
    3968:	aa 1f       	adc	r26, r26
    396a:	bb 1f       	adc	r27, r27
    396c:	ee 1f       	adc	r30, r30
    396e:	ff 1f       	adc	r31, r31
    3970:	a2 17       	cp	r26, r18
    3972:	b3 07       	cpc	r27, r19
    3974:	e4 07       	cpc	r30, r20
    3976:	f5 07       	cpc	r31, r21
    3978:	20 f0       	brcs	.+8      	; 0x3982 <__udivmodsi4_ep>
    397a:	a2 1b       	sub	r26, r18
    397c:	b3 0b       	sbc	r27, r19
    397e:	e4 0b       	sbc	r30, r20
    3980:	f5 0b       	sbc	r31, r21

00003982 <__udivmodsi4_ep>:
    3982:	66 1f       	adc	r22, r22
    3984:	77 1f       	adc	r23, r23
    3986:	88 1f       	adc	r24, r24
    3988:	99 1f       	adc	r25, r25
    398a:	1a 94       	dec	r1
    398c:	69 f7       	brne	.-38     	; 0x3968 <__udivmodsi4_loop>
    398e:	60 95       	com	r22
    3990:	70 95       	com	r23
    3992:	80 95       	com	r24
    3994:	90 95       	com	r25
    3996:	9b 01       	movw	r18, r22
    3998:	ac 01       	movw	r20, r24
    399a:	bd 01       	movw	r22, r26
    399c:	cf 01       	movw	r24, r30
    399e:	08 95       	ret

000039a0 <__divmodsi4>:
    39a0:	97 fb       	bst	r25, 7
    39a2:	09 2e       	mov	r0, r25
    39a4:	05 26       	eor	r0, r21
    39a6:	0e d0       	rcall	.+28     	; 0x39c4 <__divmodsi4_neg1>
    39a8:	57 fd       	sbrc	r21, 7
    39aa:	04 d0       	rcall	.+8      	; 0x39b4 <__divmodsi4_neg2>
    39ac:	d7 df       	rcall	.-82     	; 0x395c <__udivmodsi4>
    39ae:	0a d0       	rcall	.+20     	; 0x39c4 <__divmodsi4_neg1>
    39b0:	00 1c       	adc	r0, r0
    39b2:	38 f4       	brcc	.+14     	; 0x39c2 <__divmodsi4_exit>

000039b4 <__divmodsi4_neg2>:
    39b4:	50 95       	com	r21
    39b6:	40 95       	com	r20
    39b8:	30 95       	com	r19
    39ba:	21 95       	neg	r18
    39bc:	3f 4f       	sbci	r19, 0xFF	; 255
    39be:	4f 4f       	sbci	r20, 0xFF	; 255
    39c0:	5f 4f       	sbci	r21, 0xFF	; 255

000039c2 <__divmodsi4_exit>:
    39c2:	08 95       	ret

000039c4 <__divmodsi4_neg1>:
    39c4:	f6 f7       	brtc	.-4      	; 0x39c2 <__divmodsi4_exit>
    39c6:	90 95       	com	r25
    39c8:	80 95       	com	r24
    39ca:	70 95       	com	r23
    39cc:	61 95       	neg	r22
    39ce:	7f 4f       	sbci	r23, 0xFF	; 255
    39d0:	8f 4f       	sbci	r24, 0xFF	; 255
    39d2:	9f 4f       	sbci	r25, 0xFF	; 255
    39d4:	08 95       	ret

000039d6 <__prologue_saves__>:
    39d6:	2f 92       	push	r2
    39d8:	3f 92       	push	r3
    39da:	4f 92       	push	r4
    39dc:	5f 92       	push	r5
    39de:	6f 92       	push	r6
    39e0:	7f 92       	push	r7
    39e2:	8f 92       	push	r8
    39e4:	9f 92       	push	r9
    39e6:	af 92       	push	r10
    39e8:	bf 92       	push	r11
    39ea:	cf 92       	push	r12
    39ec:	df 92       	push	r13
    39ee:	ef 92       	push	r14
    39f0:	ff 92       	push	r15
    39f2:	0f 93       	push	r16
    39f4:	1f 93       	push	r17
    39f6:	cf 93       	push	r28
    39f8:	df 93       	push	r29
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	ca 1b       	sub	r28, r26
    3a00:	db 0b       	sbc	r29, r27
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	de bf       	out	0x3e, r29	; 62
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	cd bf       	out	0x3d, r28	; 61
    3a0c:	09 94       	ijmp

00003a0e <__epilogue_restores__>:
    3a0e:	2a 88       	ldd	r2, Y+18	; 0x12
    3a10:	39 88       	ldd	r3, Y+17	; 0x11
    3a12:	48 88       	ldd	r4, Y+16	; 0x10
    3a14:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a16:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a18:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a20:	b9 84       	ldd	r11, Y+9	; 0x09
    3a22:	c8 84       	ldd	r12, Y+8	; 0x08
    3a24:	df 80       	ldd	r13, Y+7	; 0x07
    3a26:	ee 80       	ldd	r14, Y+6	; 0x06
    3a28:	fd 80       	ldd	r15, Y+5	; 0x05
    3a2a:	0c 81       	ldd	r16, Y+4	; 0x04
    3a2c:	1b 81       	ldd	r17, Y+3	; 0x03
    3a2e:	aa 81       	ldd	r26, Y+2	; 0x02
    3a30:	b9 81       	ldd	r27, Y+1	; 0x01
    3a32:	ce 0f       	add	r28, r30
    3a34:	d1 1d       	adc	r29, r1
    3a36:	0f b6       	in	r0, 0x3f	; 63
    3a38:	f8 94       	cli
    3a3a:	de bf       	out	0x3e, r29	; 62
    3a3c:	0f be       	out	0x3f, r0	; 63
    3a3e:	cd bf       	out	0x3d, r28	; 61
    3a40:	ed 01       	movw	r28, r26
    3a42:	08 95       	ret

00003a44 <_exit>:
    3a44:	f8 94       	cli

00003a46 <__stop_program>:
    3a46:	ff cf       	rjmp	.-2      	; 0x3a46 <__stop_program>
