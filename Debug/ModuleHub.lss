
ModuleHub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000058a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  000058a8  0000593c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  008001a6  008001a6  00005a82  2**0
                  ALLOC
  3 .stab         000084a8  00000000  00000000  00005a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003977  00000000  00000000  0000df2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000118a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020f  00000000  00000000  00011a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000250d  00000000  00000000  00011c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001424  00000000  00000000  0001417f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011a7  00000000  00000000  000155a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001674c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d1  00000000  00000000  0001692c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000926  00000000  00000000  00016bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017523  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__vector_1>
       8:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__vector_2>
       c:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3d       	cpi	r26, 0xDA	; 218
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 2b 	call	0x5706	; 0x5706 <main>
      8a:	0c 94 52 2c 	jmp	0x58a4	; 0x58a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 09 04 	call	0x812	; 0x812 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 09 04 	call	0x812	; 0x812 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 2c 	jmp	0x5836	; 0x5836 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e6       	ldi	r26, 0x62	; 98
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 2c 	jmp	0x586e	; 0x586e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 2c 	jmp	0x584e	; 0x584e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 2c 	jmp	0x5886	; 0x5886 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 2c 	jmp	0x584e	; 0x584e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 2c 	jmp	0x5886	; 0x5886 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 2c 	jmp	0x5836	; 0x5836 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 2c 	jmp	0x586e	; 0x586e <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 27 2c 	jmp	0x584e	; 0x584e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 43 2c 	jmp	0x5886	; 0x5886 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 27 2c 	jmp	0x584e	; 0x584e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 43 2c 	jmp	0x5886	; 0x5886 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 27 2c 	jmp	0x584e	; 0x584e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 43 2c 	jmp	0x5886	; 0x5886 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 27 2c 	jmp	0x584e	; 0x584e <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 43 2c 	jmp	0x5886	; 0x5886 <__epilogue_restores__+0x18>

000007b2 <__lesf2>:
     7b2:	a8 e1       	ldi	r26, 0x18	; 24
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 27 2c 	jmp	0x584e	; 0x584e <__prologue_saves__+0x18>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	2d 83       	std	Y+5, r18	; 0x05
     7c8:	3e 83       	std	Y+6, r19	; 0x06
     7ca:	4f 83       	std	Y+7, r20	; 0x07
     7cc:	58 87       	std	Y+8, r21	; 0x08
     7ce:	89 e0       	ldi	r24, 0x09	; 9
     7d0:	e8 2e       	mov	r14, r24
     7d2:	f1 2c       	mov	r15, r1
     7d4:	ec 0e       	add	r14, r28
     7d6:	fd 1e       	adc	r15, r29
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	b7 01       	movw	r22, r14
     7de:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     7e2:	8e 01       	movw	r16, r28
     7e4:	0f 5e       	subi	r16, 0xEF	; 239
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	ce 01       	movw	r24, r28
     7ea:	05 96       	adiw	r24, 0x05	; 5
     7ec:	b8 01       	movw	r22, r16
     7ee:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     7f2:	89 85       	ldd	r24, Y+9	; 0x09
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	40 f0       	brcs	.+16     	; 0x808 <__lesf2+0x56>
     7f8:	89 89       	ldd	r24, Y+17	; 0x11
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	28 f0       	brcs	.+10     	; 0x808 <__lesf2+0x56>
     7fe:	c7 01       	movw	r24, r14
     800:	b8 01       	movw	r22, r16
     802:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     806:	01 c0       	rjmp	.+2      	; 0x80a <__lesf2+0x58>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	68 96       	adiw	r28, 0x18	; 24
     80c:	e6 e0       	ldi	r30, 0x06	; 6
     80e:	0c 94 43 2c 	jmp	0x5886	; 0x5886 <__epilogue_restores__+0x18>

00000812 <__fixsfsi>:
     812:	ac e0       	ldi	r26, 0x0C	; 12
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	ef e0       	ldi	r30, 0x0F	; 15
     818:	f4 e0       	ldi	r31, 0x04	; 4
     81a:	0c 94 2b 2c 	jmp	0x5856	; 0x5856 <__prologue_saves__+0x20>
     81e:	69 83       	std	Y+1, r22	; 0x01
     820:	7a 83       	std	Y+2, r23	; 0x02
     822:	8b 83       	std	Y+3, r24	; 0x03
     824:	9c 83       	std	Y+4, r25	; 0x04
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	be 01       	movw	r22, r28
     82c:	6b 5f       	subi	r22, 0xFB	; 251
     82e:	7f 4f       	sbci	r23, 0xFF	; 255
     830:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     834:	8d 81       	ldd	r24, Y+5	; 0x05
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	61 f1       	breq	.+88     	; 0x892 <__stack+0x33>
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	50 f1       	brcs	.+84     	; 0x892 <__stack+0x33>
     83e:	84 30       	cpi	r24, 0x04	; 4
     840:	21 f4       	brne	.+8      	; 0x84a <__fixsfsi+0x38>
     842:	8e 81       	ldd	r24, Y+6	; 0x06
     844:	88 23       	and	r24, r24
     846:	51 f1       	breq	.+84     	; 0x89c <__stack+0x3d>
     848:	2e c0       	rjmp	.+92     	; 0x8a6 <__stack+0x47>
     84a:	2f 81       	ldd	r18, Y+7	; 0x07
     84c:	38 85       	ldd	r19, Y+8	; 0x08
     84e:	37 fd       	sbrc	r19, 7
     850:	20 c0       	rjmp	.+64     	; 0x892 <__stack+0x33>
     852:	6e 81       	ldd	r22, Y+6	; 0x06
     854:	2f 31       	cpi	r18, 0x1F	; 31
     856:	31 05       	cpc	r19, r1
     858:	1c f0       	brlt	.+6      	; 0x860 <__stack+0x1>
     85a:	66 23       	and	r22, r22
     85c:	f9 f0       	breq	.+62     	; 0x89c <__stack+0x3d>
     85e:	23 c0       	rjmp	.+70     	; 0x8a6 <__stack+0x47>
     860:	8e e1       	ldi	r24, 0x1E	; 30
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	82 1b       	sub	r24, r18
     866:	93 0b       	sbc	r25, r19
     868:	29 85       	ldd	r18, Y+9	; 0x09
     86a:	3a 85       	ldd	r19, Y+10	; 0x0a
     86c:	4b 85       	ldd	r20, Y+11	; 0x0b
     86e:	5c 85       	ldd	r21, Y+12	; 0x0c
     870:	04 c0       	rjmp	.+8      	; 0x87a <__stack+0x1b>
     872:	56 95       	lsr	r21
     874:	47 95       	ror	r20
     876:	37 95       	ror	r19
     878:	27 95       	ror	r18
     87a:	8a 95       	dec	r24
     87c:	d2 f7       	brpl	.-12     	; 0x872 <__stack+0x13>
     87e:	66 23       	and	r22, r22
     880:	b1 f0       	breq	.+44     	; 0x8ae <__stack+0x4f>
     882:	50 95       	com	r21
     884:	40 95       	com	r20
     886:	30 95       	com	r19
     888:	21 95       	neg	r18
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	4f 4f       	sbci	r20, 0xFF	; 255
     88e:	5f 4f       	sbci	r21, 0xFF	; 255
     890:	0e c0       	rjmp	.+28     	; 0x8ae <__stack+0x4f>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	09 c0       	rjmp	.+18     	; 0x8ae <__stack+0x4f>
     89c:	2f ef       	ldi	r18, 0xFF	; 255
     89e:	3f ef       	ldi	r19, 0xFF	; 255
     8a0:	4f ef       	ldi	r20, 0xFF	; 255
     8a2:	5f e7       	ldi	r21, 0x7F	; 127
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__stack+0x4f>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	50 e8       	ldi	r21, 0x80	; 128
     8ae:	b9 01       	movw	r22, r18
     8b0:	ca 01       	movw	r24, r20
     8b2:	2c 96       	adiw	r28, 0x0c	; 12
     8b4:	e2 e0       	ldi	r30, 0x02	; 2
     8b6:	0c 94 47 2c 	jmp	0x588e	; 0x588e <__epilogue_restores__+0x20>

000008ba <__floatunsisf>:
     8ba:	a8 e0       	ldi	r26, 0x08	; 8
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e3 e6       	ldi	r30, 0x63	; 99
     8c0:	f4 e0       	ldi	r31, 0x04	; 4
     8c2:	0c 94 23 2c 	jmp	0x5846	; 0x5846 <__prologue_saves__+0x10>
     8c6:	7b 01       	movw	r14, r22
     8c8:	8c 01       	movw	r16, r24
     8ca:	61 15       	cp	r22, r1
     8cc:	71 05       	cpc	r23, r1
     8ce:	81 05       	cpc	r24, r1
     8d0:	91 05       	cpc	r25, r1
     8d2:	19 f4       	brne	.+6      	; 0x8da <__floatunsisf+0x20>
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	60 c0       	rjmp	.+192    	; 0x99a <__floatunsisf+0xe0>
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	8e e1       	ldi	r24, 0x1E	; 30
     8e0:	c8 2e       	mov	r12, r24
     8e2:	d1 2c       	mov	r13, r1
     8e4:	dc 82       	std	Y+4, r13	; 0x04
     8e6:	cb 82       	std	Y+3, r12	; 0x03
     8e8:	ed 82       	std	Y+5, r14	; 0x05
     8ea:	fe 82       	std	Y+6, r15	; 0x06
     8ec:	0f 83       	std	Y+7, r16	; 0x07
     8ee:	18 87       	std	Y+8, r17	; 0x08
     8f0:	c8 01       	movw	r24, r16
     8f2:	b7 01       	movw	r22, r14
     8f4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__clzsi2>
     8f8:	fc 01       	movw	r30, r24
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	f7 ff       	sbrs	r31, 7
     8fe:	3b c0       	rjmp	.+118    	; 0x976 <__floatunsisf+0xbc>
     900:	22 27       	eor	r18, r18
     902:	33 27       	eor	r19, r19
     904:	2e 1b       	sub	r18, r30
     906:	3f 0b       	sbc	r19, r31
     908:	57 01       	movw	r10, r14
     90a:	68 01       	movw	r12, r16
     90c:	02 2e       	mov	r0, r18
     90e:	04 c0       	rjmp	.+8      	; 0x918 <__floatunsisf+0x5e>
     910:	d6 94       	lsr	r13
     912:	c7 94       	ror	r12
     914:	b7 94       	ror	r11
     916:	a7 94       	ror	r10
     918:	0a 94       	dec	r0
     91a:	d2 f7       	brpl	.-12     	; 0x910 <__floatunsisf+0x56>
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__floatunsisf+0x7c>
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	aa 1f       	adc	r26, r26
     934:	bb 1f       	adc	r27, r27
     936:	2a 95       	dec	r18
     938:	d2 f7       	brpl	.-12     	; 0x92e <__floatunsisf+0x74>
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	a1 09       	sbc	r26, r1
     93e:	b1 09       	sbc	r27, r1
     940:	8e 21       	and	r24, r14
     942:	9f 21       	and	r25, r15
     944:	a0 23       	and	r26, r16
     946:	b1 23       	and	r27, r17
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	a1 05       	cpc	r26, r1
     94c:	b1 05       	cpc	r27, r1
     94e:	21 f0       	breq	.+8      	; 0x958 <__floatunsisf+0x9e>
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	4a 29       	or	r20, r10
     95a:	5b 29       	or	r21, r11
     95c:	6c 29       	or	r22, r12
     95e:	7d 29       	or	r23, r13
     960:	4d 83       	std	Y+5, r20	; 0x05
     962:	5e 83       	std	Y+6, r21	; 0x06
     964:	6f 83       	std	Y+7, r22	; 0x07
     966:	78 87       	std	Y+8, r23	; 0x08
     968:	8e e1       	ldi	r24, 0x1E	; 30
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	8e 1b       	sub	r24, r30
     96e:	9f 0b       	sbc	r25, r31
     970:	9c 83       	std	Y+4, r25	; 0x04
     972:	8b 83       	std	Y+3, r24	; 0x03
     974:	12 c0       	rjmp	.+36     	; 0x99a <__floatunsisf+0xe0>
     976:	30 97       	sbiw	r30, 0x00	; 0
     978:	81 f0       	breq	.+32     	; 0x99a <__floatunsisf+0xe0>
     97a:	0e 2e       	mov	r0, r30
     97c:	04 c0       	rjmp	.+8      	; 0x986 <__floatunsisf+0xcc>
     97e:	ee 0c       	add	r14, r14
     980:	ff 1c       	adc	r15, r15
     982:	00 1f       	adc	r16, r16
     984:	11 1f       	adc	r17, r17
     986:	0a 94       	dec	r0
     988:	d2 f7       	brpl	.-12     	; 0x97e <__floatunsisf+0xc4>
     98a:	ed 82       	std	Y+5, r14	; 0x05
     98c:	fe 82       	std	Y+6, r15	; 0x06
     98e:	0f 83       	std	Y+7, r16	; 0x07
     990:	18 87       	std	Y+8, r17	; 0x08
     992:	ce 1a       	sub	r12, r30
     994:	df 0a       	sbc	r13, r31
     996:	dc 82       	std	Y+4, r13	; 0x04
     998:	cb 82       	std	Y+3, r12	; 0x03
     99a:	1a 82       	std	Y+2, r1	; 0x02
     99c:	ce 01       	movw	r24, r28
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     9a4:	28 96       	adiw	r28, 0x08	; 8
     9a6:	ea e0       	ldi	r30, 0x0A	; 10
     9a8:	0c 94 3f 2c 	jmp	0x587e	; 0x587e <__epilogue_restores__+0x10>

000009ac <__clzsi2>:
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	7b 01       	movw	r14, r22
     9b6:	8c 01       	movw	r16, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	e8 16       	cp	r14, r24
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	f8 06       	cpc	r15, r24
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	08 07       	cpc	r16, r24
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	18 07       	cpc	r17, r24
     9c8:	88 f4       	brcc	.+34     	; 0x9ec <__clzsi2+0x40>
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	e8 16       	cp	r14, r24
     9ce:	f1 04       	cpc	r15, r1
     9d0:	01 05       	cpc	r16, r1
     9d2:	11 05       	cpc	r17, r1
     9d4:	31 f0       	breq	.+12     	; 0x9e2 <__clzsi2+0x36>
     9d6:	28 f0       	brcs	.+10     	; 0x9e2 <__clzsi2+0x36>
     9d8:	88 e0       	ldi	r24, 0x08	; 8
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	17 c0       	rjmp	.+46     	; 0xa10 <__clzsi2+0x64>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	12 c0       	rjmp	.+36     	; 0xa10 <__clzsi2+0x64>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	e8 16       	cp	r14, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	f8 06       	cpc	r15, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	08 07       	cpc	r16, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	18 07       	cpc	r17, r24
     9fc:	28 f0       	brcs	.+10     	; 0xa08 <__clzsi2+0x5c>
     9fe:	88 e1       	ldi	r24, 0x18	; 24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	a0 e0       	ldi	r26, 0x00	; 0
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__clzsi2+0x64>
     a08:	80 e1       	ldi	r24, 0x10	; 16
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	20 e2       	ldi	r18, 0x20	; 32
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	28 1b       	sub	r18, r24
     a1a:	39 0b       	sbc	r19, r25
     a1c:	4a 0b       	sbc	r20, r26
     a1e:	5b 0b       	sbc	r21, r27
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__clzsi2+0x7e>
     a22:	16 95       	lsr	r17
     a24:	07 95       	ror	r16
     a26:	f7 94       	ror	r15
     a28:	e7 94       	ror	r14
     a2a:	8a 95       	dec	r24
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__clzsi2+0x76>
     a2e:	f7 01       	movw	r30, r14
     a30:	e6 59       	subi	r30, 0x96	; 150
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	80 81       	ld	r24, Z
     a36:	28 1b       	sub	r18, r24
     a38:	31 09       	sbc	r19, r1
     a3a:	41 09       	sbc	r20, r1
     a3c:	51 09       	sbc	r21, r1
     a3e:	c9 01       	movw	r24, r18
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	08 95       	ret

00000a4a <__pack_f>:
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	fc 01       	movw	r30, r24
     a56:	e4 80       	ldd	r14, Z+4	; 0x04
     a58:	f5 80       	ldd	r15, Z+5	; 0x05
     a5a:	06 81       	ldd	r16, Z+6	; 0x06
     a5c:	17 81       	ldd	r17, Z+7	; 0x07
     a5e:	d1 80       	ldd	r13, Z+1	; 0x01
     a60:	80 81       	ld	r24, Z
     a62:	82 30       	cpi	r24, 0x02	; 2
     a64:	48 f4       	brcc	.+18     	; 0xa78 <__pack_f+0x2e>
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	a0 e1       	ldi	r26, 0x10	; 16
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	e8 2a       	or	r14, r24
     a70:	f9 2a       	or	r15, r25
     a72:	0a 2b       	or	r16, r26
     a74:	1b 2b       	or	r17, r27
     a76:	a5 c0       	rjmp	.+330    	; 0xbc2 <__pack_f+0x178>
     a78:	84 30       	cpi	r24, 0x04	; 4
     a7a:	09 f4       	brne	.+2      	; 0xa7e <__pack_f+0x34>
     a7c:	9f c0       	rjmp	.+318    	; 0xbbc <__pack_f+0x172>
     a7e:	82 30       	cpi	r24, 0x02	; 2
     a80:	21 f4       	brne	.+8      	; 0xa8a <__pack_f+0x40>
     a82:	ee 24       	eor	r14, r14
     a84:	ff 24       	eor	r15, r15
     a86:	87 01       	movw	r16, r14
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <__pack_f+0x4a>
     a8a:	e1 14       	cp	r14, r1
     a8c:	f1 04       	cpc	r15, r1
     a8e:	01 05       	cpc	r16, r1
     a90:	11 05       	cpc	r17, r1
     a92:	19 f4       	brne	.+6      	; 0xa9a <__pack_f+0x50>
     a94:	e0 e0       	ldi	r30, 0x00	; 0
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	96 c0       	rjmp	.+300    	; 0xbc6 <__pack_f+0x17c>
     a9a:	62 81       	ldd	r22, Z+2	; 0x02
     a9c:	73 81       	ldd	r23, Z+3	; 0x03
     a9e:	9f ef       	ldi	r25, 0xFF	; 255
     aa0:	62 38       	cpi	r22, 0x82	; 130
     aa2:	79 07       	cpc	r23, r25
     aa4:	0c f0       	brlt	.+2      	; 0xaa8 <__pack_f+0x5e>
     aa6:	5b c0       	rjmp	.+182    	; 0xb5e <__pack_f+0x114>
     aa8:	22 e8       	ldi	r18, 0x82	; 130
     aaa:	3f ef       	ldi	r19, 0xFF	; 255
     aac:	26 1b       	sub	r18, r22
     aae:	37 0b       	sbc	r19, r23
     ab0:	2a 31       	cpi	r18, 0x1A	; 26
     ab2:	31 05       	cpc	r19, r1
     ab4:	2c f0       	brlt	.+10     	; 0xac0 <__pack_f+0x76>
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	2a c0       	rjmp	.+84     	; 0xb14 <__pack_f+0xca>
     ac0:	b8 01       	movw	r22, r16
     ac2:	a7 01       	movw	r20, r14
     ac4:	02 2e       	mov	r0, r18
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__pack_f+0x86>
     ac8:	76 95       	lsr	r23
     aca:	67 95       	ror	r22
     acc:	57 95       	ror	r21
     ace:	47 95       	ror	r20
     ad0:	0a 94       	dec	r0
     ad2:	d2 f7       	brpl	.-12     	; 0xac8 <__pack_f+0x7e>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	a0 e0       	ldi	r26, 0x00	; 0
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <__pack_f+0x9c>
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	aa 1f       	adc	r26, r26
     ae4:	bb 1f       	adc	r27, r27
     ae6:	2a 95       	dec	r18
     ae8:	d2 f7       	brpl	.-12     	; 0xade <__pack_f+0x94>
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	a1 09       	sbc	r26, r1
     aee:	b1 09       	sbc	r27, r1
     af0:	8e 21       	and	r24, r14
     af2:	9f 21       	and	r25, r15
     af4:	a0 23       	and	r26, r16
     af6:	b1 23       	and	r27, r17
     af8:	00 97       	sbiw	r24, 0x00	; 0
     afa:	a1 05       	cpc	r26, r1
     afc:	b1 05       	cpc	r27, r1
     afe:	21 f0       	breq	.+8      	; 0xb08 <__pack_f+0xbe>
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	9a 01       	movw	r18, r20
     b0a:	ab 01       	movw	r20, r22
     b0c:	28 2b       	or	r18, r24
     b0e:	39 2b       	or	r19, r25
     b10:	4a 2b       	or	r20, r26
     b12:	5b 2b       	or	r21, r27
     b14:	da 01       	movw	r26, r20
     b16:	c9 01       	movw	r24, r18
     b18:	8f 77       	andi	r24, 0x7F	; 127
     b1a:	90 70       	andi	r25, 0x00	; 0
     b1c:	a0 70       	andi	r26, 0x00	; 0
     b1e:	b0 70       	andi	r27, 0x00	; 0
     b20:	80 34       	cpi	r24, 0x40	; 64
     b22:	91 05       	cpc	r25, r1
     b24:	a1 05       	cpc	r26, r1
     b26:	b1 05       	cpc	r27, r1
     b28:	39 f4       	brne	.+14     	; 0xb38 <__pack_f+0xee>
     b2a:	27 ff       	sbrs	r18, 7
     b2c:	09 c0       	rjmp	.+18     	; 0xb40 <__pack_f+0xf6>
     b2e:	20 5c       	subi	r18, 0xC0	; 192
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	4f 4f       	sbci	r20, 0xFF	; 255
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <__pack_f+0xf6>
     b38:	21 5c       	subi	r18, 0xC1	; 193
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255
     b3c:	4f 4f       	sbci	r20, 0xFF	; 255
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	e0 e0       	ldi	r30, 0x00	; 0
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	20 30       	cpi	r18, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	3a 07       	cpc	r19, r26
     b4a:	a0 e0       	ldi	r26, 0x00	; 0
     b4c:	4a 07       	cpc	r20, r26
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	5a 07       	cpc	r21, r26
     b52:	10 f0       	brcs	.+4      	; 0xb58 <__pack_f+0x10e>
     b54:	e1 e0       	ldi	r30, 0x01	; 1
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	79 01       	movw	r14, r18
     b5a:	8a 01       	movw	r16, r20
     b5c:	27 c0       	rjmp	.+78     	; 0xbac <__pack_f+0x162>
     b5e:	60 38       	cpi	r22, 0x80	; 128
     b60:	71 05       	cpc	r23, r1
     b62:	64 f5       	brge	.+88     	; 0xbbc <__pack_f+0x172>
     b64:	fb 01       	movw	r30, r22
     b66:	e1 58       	subi	r30, 0x81	; 129
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	d8 01       	movw	r26, r16
     b6c:	c7 01       	movw	r24, r14
     b6e:	8f 77       	andi	r24, 0x7F	; 127
     b70:	90 70       	andi	r25, 0x00	; 0
     b72:	a0 70       	andi	r26, 0x00	; 0
     b74:	b0 70       	andi	r27, 0x00	; 0
     b76:	80 34       	cpi	r24, 0x40	; 64
     b78:	91 05       	cpc	r25, r1
     b7a:	a1 05       	cpc	r26, r1
     b7c:	b1 05       	cpc	r27, r1
     b7e:	39 f4       	brne	.+14     	; 0xb8e <__pack_f+0x144>
     b80:	e7 fe       	sbrs	r14, 7
     b82:	0d c0       	rjmp	.+26     	; 0xb9e <__pack_f+0x154>
     b84:	80 e4       	ldi	r24, 0x40	; 64
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a0 e0       	ldi	r26, 0x00	; 0
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__pack_f+0x14c>
     b8e:	8f e3       	ldi	r24, 0x3F	; 63
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e8 0e       	add	r14, r24
     b98:	f9 1e       	adc	r15, r25
     b9a:	0a 1f       	adc	r16, r26
     b9c:	1b 1f       	adc	r17, r27
     b9e:	17 ff       	sbrs	r17, 7
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <__pack_f+0x162>
     ba2:	16 95       	lsr	r17
     ba4:	07 95       	ror	r16
     ba6:	f7 94       	ror	r15
     ba8:	e7 94       	ror	r14
     baa:	31 96       	adiw	r30, 0x01	; 1
     bac:	87 e0       	ldi	r24, 0x07	; 7
     bae:	16 95       	lsr	r17
     bb0:	07 95       	ror	r16
     bb2:	f7 94       	ror	r15
     bb4:	e7 94       	ror	r14
     bb6:	8a 95       	dec	r24
     bb8:	d1 f7       	brne	.-12     	; 0xbae <__pack_f+0x164>
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <__pack_f+0x17c>
     bbc:	ee 24       	eor	r14, r14
     bbe:	ff 24       	eor	r15, r15
     bc0:	87 01       	movw	r16, r14
     bc2:	ef ef       	ldi	r30, 0xFF	; 255
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	6e 2f       	mov	r22, r30
     bc8:	67 95       	ror	r22
     bca:	66 27       	eor	r22, r22
     bcc:	67 95       	ror	r22
     bce:	90 2f       	mov	r25, r16
     bd0:	9f 77       	andi	r25, 0x7F	; 127
     bd2:	d7 94       	ror	r13
     bd4:	dd 24       	eor	r13, r13
     bd6:	d7 94       	ror	r13
     bd8:	8e 2f       	mov	r24, r30
     bda:	86 95       	lsr	r24
     bdc:	49 2f       	mov	r20, r25
     bde:	46 2b       	or	r20, r22
     be0:	58 2f       	mov	r21, r24
     be2:	5d 29       	or	r21, r13
     be4:	b7 01       	movw	r22, r14
     be6:	ca 01       	movw	r24, r20
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	08 95       	ret

00000bf4 <__unpack_f>:
     bf4:	fc 01       	movw	r30, r24
     bf6:	db 01       	movw	r26, r22
     bf8:	40 81       	ld	r20, Z
     bfa:	51 81       	ldd	r21, Z+1	; 0x01
     bfc:	22 81       	ldd	r18, Z+2	; 0x02
     bfe:	62 2f       	mov	r22, r18
     c00:	6f 77       	andi	r22, 0x7F	; 127
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	22 1f       	adc	r18, r18
     c06:	22 27       	eor	r18, r18
     c08:	22 1f       	adc	r18, r18
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	89 2f       	mov	r24, r25
     c0e:	88 0f       	add	r24, r24
     c10:	82 2b       	or	r24, r18
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	99 1f       	adc	r25, r25
     c18:	99 27       	eor	r25, r25
     c1a:	99 1f       	adc	r25, r25
     c1c:	11 96       	adiw	r26, 0x01	; 1
     c1e:	9c 93       	st	X, r25
     c20:	11 97       	sbiw	r26, 0x01	; 1
     c22:	21 15       	cp	r18, r1
     c24:	31 05       	cpc	r19, r1
     c26:	a9 f5       	brne	.+106    	; 0xc92 <__unpack_f+0x9e>
     c28:	41 15       	cp	r20, r1
     c2a:	51 05       	cpc	r21, r1
     c2c:	61 05       	cpc	r22, r1
     c2e:	71 05       	cpc	r23, r1
     c30:	11 f4       	brne	.+4      	; 0xc36 <__unpack_f+0x42>
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	37 c0       	rjmp	.+110    	; 0xca4 <__unpack_f+0xb0>
     c36:	82 e8       	ldi	r24, 0x82	; 130
     c38:	9f ef       	ldi	r25, 0xFF	; 255
     c3a:	13 96       	adiw	r26, 0x03	; 3
     c3c:	9c 93       	st	X, r25
     c3e:	8e 93       	st	-X, r24
     c40:	12 97       	sbiw	r26, 0x02	; 2
     c42:	9a 01       	movw	r18, r20
     c44:	ab 01       	movw	r20, r22
     c46:	67 e0       	ldi	r22, 0x07	; 7
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	44 1f       	adc	r20, r20
     c4e:	55 1f       	adc	r21, r21
     c50:	6a 95       	dec	r22
     c52:	d1 f7       	brne	.-12     	; 0xc48 <__unpack_f+0x54>
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	8c 93       	st	X, r24
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <__unpack_f+0x80>
     c5a:	22 0f       	add	r18, r18
     c5c:	33 1f       	adc	r19, r19
     c5e:	44 1f       	adc	r20, r20
     c60:	55 1f       	adc	r21, r21
     c62:	12 96       	adiw	r26, 0x02	; 2
     c64:	8d 91       	ld	r24, X+
     c66:	9c 91       	ld	r25, X
     c68:	13 97       	sbiw	r26, 0x03	; 3
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	13 96       	adiw	r26, 0x03	; 3
     c6e:	9c 93       	st	X, r25
     c70:	8e 93       	st	-X, r24
     c72:	12 97       	sbiw	r26, 0x02	; 2
     c74:	20 30       	cpi	r18, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	38 07       	cpc	r19, r24
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	48 07       	cpc	r20, r24
     c7e:	80 e4       	ldi	r24, 0x40	; 64
     c80:	58 07       	cpc	r21, r24
     c82:	58 f3       	brcs	.-42     	; 0xc5a <__unpack_f+0x66>
     c84:	14 96       	adiw	r26, 0x04	; 4
     c86:	2d 93       	st	X+, r18
     c88:	3d 93       	st	X+, r19
     c8a:	4d 93       	st	X+, r20
     c8c:	5c 93       	st	X, r21
     c8e:	17 97       	sbiw	r26, 0x07	; 7
     c90:	08 95       	ret
     c92:	2f 3f       	cpi	r18, 0xFF	; 255
     c94:	31 05       	cpc	r19, r1
     c96:	79 f4       	brne	.+30     	; 0xcb6 <__unpack_f+0xc2>
     c98:	41 15       	cp	r20, r1
     c9a:	51 05       	cpc	r21, r1
     c9c:	61 05       	cpc	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	19 f4       	brne	.+6      	; 0xca8 <__unpack_f+0xb4>
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	8c 93       	st	X, r24
     ca6:	08 95       	ret
     ca8:	64 ff       	sbrs	r22, 4
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <__unpack_f+0xbe>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8c 93       	st	X, r24
     cb0:	12 c0       	rjmp	.+36     	; 0xcd6 <__unpack_f+0xe2>
     cb2:	1c 92       	st	X, r1
     cb4:	10 c0       	rjmp	.+32     	; 0xcd6 <__unpack_f+0xe2>
     cb6:	2f 57       	subi	r18, 0x7F	; 127
     cb8:	30 40       	sbci	r19, 0x00	; 0
     cba:	13 96       	adiw	r26, 0x03	; 3
     cbc:	3c 93       	st	X, r19
     cbe:	2e 93       	st	-X, r18
     cc0:	12 97       	sbiw	r26, 0x02	; 2
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	8c 93       	st	X, r24
     cc6:	87 e0       	ldi	r24, 0x07	; 7
     cc8:	44 0f       	add	r20, r20
     cca:	55 1f       	adc	r21, r21
     ccc:	66 1f       	adc	r22, r22
     cce:	77 1f       	adc	r23, r23
     cd0:	8a 95       	dec	r24
     cd2:	d1 f7       	brne	.-12     	; 0xcc8 <__unpack_f+0xd4>
     cd4:	70 64       	ori	r23, 0x40	; 64
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	4d 93       	st	X+, r20
     cda:	5d 93       	st	X+, r21
     cdc:	6d 93       	st	X+, r22
     cde:	7c 93       	st	X, r23
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret

00000ce4 <__fpcmp_parts_f>:
     ce4:	1f 93       	push	r17
     ce6:	dc 01       	movw	r26, r24
     ce8:	fb 01       	movw	r30, r22
     cea:	9c 91       	ld	r25, X
     cec:	92 30       	cpi	r25, 0x02	; 2
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <__fpcmp_parts_f+0xe>
     cf0:	47 c0       	rjmp	.+142    	; 0xd80 <__fpcmp_parts_f+0x9c>
     cf2:	80 81       	ld	r24, Z
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <__fpcmp_parts_f+0x16>
     cf8:	43 c0       	rjmp	.+134    	; 0xd80 <__fpcmp_parts_f+0x9c>
     cfa:	94 30       	cpi	r25, 0x04	; 4
     cfc:	51 f4       	brne	.+20     	; 0xd12 <__fpcmp_parts_f+0x2e>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	99 f5       	brne	.+102    	; 0xd6c <__fpcmp_parts_f+0x88>
     d06:	81 81       	ldd	r24, Z+1	; 0x01
     d08:	68 2f       	mov	r22, r24
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	61 1b       	sub	r22, r17
     d0e:	71 09       	sbc	r23, r1
     d10:	3f c0       	rjmp	.+126    	; 0xd90 <__fpcmp_parts_f+0xac>
     d12:	84 30       	cpi	r24, 0x04	; 4
     d14:	21 f0       	breq	.+8      	; 0xd1e <__fpcmp_parts_f+0x3a>
     d16:	92 30       	cpi	r25, 0x02	; 2
     d18:	31 f4       	brne	.+12     	; 0xd26 <__fpcmp_parts_f+0x42>
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	b9 f1       	breq	.+110    	; 0xd8c <__fpcmp_parts_f+0xa8>
     d1e:	81 81       	ldd	r24, Z+1	; 0x01
     d20:	88 23       	and	r24, r24
     d22:	89 f1       	breq	.+98     	; 0xd86 <__fpcmp_parts_f+0xa2>
     d24:	2d c0       	rjmp	.+90     	; 0xd80 <__fpcmp_parts_f+0x9c>
     d26:	11 96       	adiw	r26, 0x01	; 1
     d28:	1c 91       	ld	r17, X
     d2a:	11 97       	sbiw	r26, 0x01	; 1
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	f1 f0       	breq	.+60     	; 0xd6c <__fpcmp_parts_f+0x88>
     d30:	81 81       	ldd	r24, Z+1	; 0x01
     d32:	18 17       	cp	r17, r24
     d34:	d9 f4       	brne	.+54     	; 0xd6c <__fpcmp_parts_f+0x88>
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	2d 91       	ld	r18, X+
     d3a:	3c 91       	ld	r19, X
     d3c:	13 97       	sbiw	r26, 0x03	; 3
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	82 17       	cp	r24, r18
     d44:	93 07       	cpc	r25, r19
     d46:	94 f0       	brlt	.+36     	; 0xd6c <__fpcmp_parts_f+0x88>
     d48:	28 17       	cp	r18, r24
     d4a:	39 07       	cpc	r19, r25
     d4c:	bc f0       	brlt	.+46     	; 0xd7c <__fpcmp_parts_f+0x98>
     d4e:	14 96       	adiw	r26, 0x04	; 4
     d50:	8d 91       	ld	r24, X+
     d52:	9d 91       	ld	r25, X+
     d54:	0d 90       	ld	r0, X+
     d56:	bc 91       	ld	r27, X
     d58:	a0 2d       	mov	r26, r0
     d5a:	24 81       	ldd	r18, Z+4	; 0x04
     d5c:	35 81       	ldd	r19, Z+5	; 0x05
     d5e:	46 81       	ldd	r20, Z+6	; 0x06
     d60:	57 81       	ldd	r21, Z+7	; 0x07
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	4a 07       	cpc	r20, r26
     d68:	5b 07       	cpc	r21, r27
     d6a:	18 f4       	brcc	.+6      	; 0xd72 <__fpcmp_parts_f+0x8e>
     d6c:	11 23       	and	r17, r17
     d6e:	41 f0       	breq	.+16     	; 0xd80 <__fpcmp_parts_f+0x9c>
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <__fpcmp_parts_f+0xa2>
     d72:	82 17       	cp	r24, r18
     d74:	93 07       	cpc	r25, r19
     d76:	a4 07       	cpc	r26, r20
     d78:	b5 07       	cpc	r27, r21
     d7a:	40 f4       	brcc	.+16     	; 0xd8c <__fpcmp_parts_f+0xa8>
     d7c:	11 23       	and	r17, r17
     d7e:	19 f0       	breq	.+6      	; 0xd86 <__fpcmp_parts_f+0xa2>
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	05 c0       	rjmp	.+10     	; 0xd90 <__fpcmp_parts_f+0xac>
     d86:	6f ef       	ldi	r22, 0xFF	; 255
     d88:	7f ef       	ldi	r23, 0xFF	; 255
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <__fpcmp_parts_f+0xac>
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	cb 01       	movw	r24, r22
     d92:	1f 91       	pop	r17
     d94:	08 95       	ret

00000d96 <USART_enu_Initialization>:
void (*pfun_ISR)(void*) = NULL;
void* pvid_ParamtersOfISrs = NULL; 

//APIs' implementation
extern ErrorState_t USART_enu_Initialization(void)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <USART_enu_Initialization+0x6>
     d9c:	0f 92       	push	r0
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	8b 83       	std	Y+3, r24	; 0x03
    //****************************************************************************************
    //                                   Initialize Baud Rate                                              
    //****************************************************************************************

    //Wriing to UBBRH
    UBBRH &= ~(1 << UBBRH_URSEL);
     da6:	a0 e4       	ldi	r26, 0x40	; 64
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e0 e4       	ldi	r30, 0x40	; 64
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8f 77       	andi	r24, 0x7F	; 127
     db2:	8c 93       	st	X, r24

    u16 Local_u16_ValueOfUBRR;

    #if  USART_MODE == USART_NORMAL_ASYNCHRONOUS_MODE    
        
        Local_u16_ValueOfUBRR = USART_BAUD_RATE_MACRO(16);
     db4:	87 e6       	ldi	r24, 0x67	; 103
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01

        //Placing Most Signficant 4 bits in UBBRH 3:0
        UBBRH |= (u8)(Local_u16_ValueOfUBRR >> 8);
     dbc:	a0 e4       	ldi	r26, 0x40	; 64
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e0 e4       	ldi	r30, 0x40	; 64
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	20 81       	ld	r18, Z
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	89 2f       	mov	r24, r25
     dcc:	99 27       	eor	r25, r25
     dce:	82 2b       	or	r24, r18
     dd0:	8c 93       	st	X, r24
        //Placing the least significant 8 bits in UBBRL
        UBBRL = (u8)(Local_u16_ValueOfUBRR); 
     dd2:	e9 e2       	ldi	r30, 0x29	; 41
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	80 83       	st	Z, r24
        UCSRB &= ~( 1 << UCSRB_TXEN );

    #elif USART_COMMUNICATION_MODE == USART_ENABLE_TX_ONLY

        //Turning off RX
        UCSRB &= ~( 1 << UCSRB_RXEN );
     dda:	aa e2       	ldi	r26, 0x2A	; 42
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ea e2       	ldi	r30, 0x2A	; 42
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8f 7e       	andi	r24, 0xEF	; 239
     de6:	8c 93       	st	X, r24
        //Turning on TX
        UCSRB |= ( 1 << UCSRB_TXEN );
     de8:	aa e2       	ldi	r26, 0x2A	; 42
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ea e2       	ldi	r30, 0x2A	; 42
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	88 60       	ori	r24, 0x08	; 8
     df4:	8c 93       	st	X, r24
    //****************************************************************************************
    //                                      Initialzing Synchronization                       
    //****************************************************************************************

    //Writing to UCSRA
    UCSRC |= (1 << UCSRC_URSEL);
     df6:	a0 e4       	ldi	r26, 0x40	; 64
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e0 e4       	ldi	r30, 0x40	; 64
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	80 68       	ori	r24, 0x80	; 128
     e02:	8c 93       	st	X, r24
        UCSRC |= (1 << UCSRC_UMSEL);
    
    #elif USART_MODE == USART_NORMAL_ASYNCHRONOUS_MODE

        //Choosing Asynchronous mode
        UCSRC &= ~(1 << UCSRC_UMSEL);
     e04:	a0 e4       	ldi	r26, 0x40	; 64
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e0 e4       	ldi	r30, 0x40	; 64
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8f 7b       	andi	r24, 0xBF	; 191
     e10:	8c 93       	st	X, r24
    //****************************************************************************************
                        
    //1] Character Size:  UCSRB_UCSZ2  UCSRC_UCSZ1  UCSRC_UCSZ0

    //Writing to UCSRC
    UCSRC |= (1 << UCSRC_URSEL);
     e12:	a0 e4       	ldi	r26, 0x40	; 64
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e0 e4       	ldi	r30, 0x40	; 64
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 68       	ori	r24, 0x80	; 128
     e1e:	8c 93       	st	X, r24

    //Clearing UCSZ1 and UCSZ0 
    UCSRC &= ~(3 << UCSRC_UCSZ0);
     e20:	a0 e4       	ldi	r26, 0x40	; 64
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e0 e4       	ldi	r30, 0x40	; 64
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	89 7f       	andi	r24, 0xF9	; 249
     e2c:	8c 93       	st	X, r24
    //Clearing UCSZ2
    UCSRB &= ~(1 << UCSRB_UCSZ2);
     e2e:	aa e2       	ldi	r26, 0x2A	; 42
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	ea e2       	ldi	r30, 0x2A	; 42
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8b 7f       	andi	r24, 0xFB	; 251
     e3a:	8c 93       	st	X, r24
        UCSRC |= (1 << UCSRC_UCSZ1);
    
    #elif USART_CHARACTER_SIZE == USART_8_BITS
      
        //Bits contain 011
        UCSRC |= (1 << UCSRC_UCSZ0);
     e3c:	a0 e4       	ldi	r26, 0x40	; 64
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e0 e4       	ldi	r30, 0x40	; 64
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	82 60       	ori	r24, 0x02	; 2
     e48:	8c 93       	st	X, r24
        UCSRC |= (1 << UCSRC_UCSZ1);
     e4a:	a0 e4       	ldi	r26, 0x40	; 64
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e0 e4       	ldi	r30, 0x40	; 64
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	84 60       	ori	r24, 0x04	; 4
     e56:	8c 93       	st	X, r24


    //2] Stop Bits Selection:    UCSRC_USBS

    //Writing to UCSRC
    UCSRC |= (1 << UCSRC_URSEL);
     e58:	a0 e4       	ldi	r26, 0x40	; 64
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e0 e4       	ldi	r30, 0x40	; 64
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	80 68       	ori	r24, 0x80	; 128
     e64:	8c 93       	st	X, r24

    #if USART_NUMBER_OF_STOP_BITS == USART_1_STOP_BIT 

        //Bit contains 0
        UCSRC &= ~( 1 << UCSRC_USBS);
     e66:	a0 e4       	ldi	r26, 0x40	; 64
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e0 e4       	ldi	r30, 0x40	; 64
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	87 7f       	andi	r24, 0xF7	; 247
     e72:	8c 93       	st	X, r24


    //3] Parity Check Mode Selection: UCSRC_UPM1 UCSRC_UPM0

    //Writing to UCSRC
    UCSRC |= (1 << UCSRC_URSEL);
     e74:	a0 e4       	ldi	r26, 0x40	; 64
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e0 e4       	ldi	r30, 0x40	; 64
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 68       	ori	r24, 0x80	; 128
     e80:	8c 93       	st	X, r24

    //Bits contain 00
    UCSRC &= ~(3 << UCSRC_UPM0);
     e82:	a0 e4       	ldi	r26, 0x40	; 64
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e0 e4       	ldi	r30, 0x40	; 64
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 7c       	andi	r24, 0xCF	; 207
     e8e:	8c 93       	st	X, r24
    //****************************************************************************************
    //                                      Initialzing Interrupts                       
    //****************************************************************************************

    //Clearing 3 bits  RXCIE TXCIE UDRIE
    UCSRB &= ~(7 << UCSRB_UDRIE); 
     e90:	aa e2       	ldi	r26, 0x2A	; 42
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea e2       	ldi	r30, 0x2A	; 42
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8f 71       	andi	r24, 0x1F	; 31
     e9c:	8c 93       	st	X, r24
        UCSRB |= (1 << UCSRB_TXCIE);

    #elif USART_INTERRUPT_MODE == USART_EDRE_INTERRUPT_MODE

        //Bit contains 001
        UCSRB |= (1 << UCSRB_UDRIE);
     e9e:	aa e2       	ldi	r26, 0x2A	; 42
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ea e2       	ldi	r30, 0x2A	; 42
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 62       	ori	r24, 0x20	; 32
     eaa:	8c 93       	st	X, r24





    return Local_u8_ErrorFlag;
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <USART_enu_SendData>:

extern ErrorState_t USART_enu_SendData(u16 Copy_u16_Data)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <USART_enu_SendData+0x6>
     ec0:	0f 92       	push	r0
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	9b 83       	std	Y+3, r25	; 0x03
     ec8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	89 83       	std	Y+1, r24	; 0x01

    //Seeing if Transmitter Buffer is ready to take a new value
    if((UCSRA >> UCSRA_UDRE) & 1)
     ece:	eb e2       	ldi	r30, 0x2B	; 43
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	82 95       	swap	r24
     ed6:	86 95       	lsr	r24
     ed8:	87 70       	andi	r24, 0x07	; 7
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	90 70       	andi	r25, 0x00	; 0
     ee2:	88 23       	and	r24, r24
     ee4:	31 f0       	breq	.+12     	; 0xef2 <USART_enu_SendData+0x38>
            //Placing 9nth-bit in TXB8
            UCSRB |= (Local_u8_ErrorFlag << UCSRB_TXB8);

        #endif
        
        UDR = (u8)(Copy_u16_Data);
     ee6:	ec e2       	ldi	r30, 0x2C	; 44
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
     eee:	19 82       	std	Y+1, r1	; 0x01
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <USART_enu_SendData+0x3c>
    }
    else
    {
        Local_u8_ErrorFlag = ES_WAIT;
     ef2:	84 e0       	ldi	r24, 0x04	; 4
     ef4:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <USART_enu_ReceiveData>:

extern ErrorState_t USART_enu_ReceiveData(u16* Copy_pu16_Data)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	00 d0       	rcall	.+0      	; 0xf0a <USART_enu_ReceiveData+0x6>
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <USART_enu_ReceiveData+0x8>
     f0c:	0f 92       	push	r0
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	9d 83       	std	Y+5, r25	; 0x05
     f14:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	8b 83       	std	Y+3, r24	; 0x03

    u16 Local_u16_TempData = 0x00;
     f1a:	1a 82       	std	Y+2, r1	; 0x02
     f1c:	19 82       	std	Y+1, r1	; 0x01

    //Seeing if Receiver Buffer has a new value
    if((UCSRA >> UCSRA_RXC) & 1)
     f1e:	eb e2       	ldi	r30, 0x2B	; 43
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	88 23       	and	r24, r24
     f26:	4c f4       	brge	.+18     	; 0xf3a <USART_enu_ReceiveData+0x36>
            Local_u16_TempData |= (Local_u8_DataBit8 >> 8); 

        #endif

        //Placing rest of data in Local temp
        Local_u16_TempData = UDR;
     f28:	ec e2       	ldi	r30, 0x2C	; 44
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
        
        Local_u8_ErrorFlag = ES_OK;
     f36:	1b 82       	std	Y+3, r1	; 0x03
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <USART_enu_ReceiveData+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_WAIT;
     f3a:	84 e0       	ldi	r24, 0x04	; 4
     f3c:	8b 83       	std	Y+3, r24	; 0x03

        Local_u16_TempData = USART_NOT_DATA_RECEIVED;
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9a 83       	std	Y+2, r25	; 0x02
     f44:	89 83       	std	Y+1, r24	; 0x01
    }

    
    *Copy_pu16_Data = Local_u16_TempData;
     f46:	ec 81       	ldd	r30, Y+4	; 0x04
     f48:	fd 81       	ldd	r31, Y+5	; 0x05
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	80 83       	st	Z, r24

    return Local_u8_ErrorFlag;
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <USART_enu_SendString>:

extern ErrorState_t USART_enu_SendString (u8* Copy_pu8_String)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <USART_enu_SendString+0x6>
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <USART_enu_SendString+0x8>
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	9d 83       	std	Y+5, r25	; 0x05
     f74:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	8b 83       	std	Y+3, r24	; 0x03

    if(Copy_pu8_String)
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	b9 f0       	breq	.+46     	; 0xfb0 <USART_enu_SendString+0x4c>
    {
        u8* Local_pu8_SendingPoninter = Copy_pu8_String;
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	0c c0       	rjmp	.+24     	; 0xfa4 <USART_enu_SendString+0x40>

        while(*Local_pu8_SendingPoninter)
        {
            USART_enu_SendData(*Local_pu8_SendingPoninter);
     f8c:	e9 81       	ldd	r30, Y+1	; 0x01
     f8e:	fa 81       	ldd	r31, Y+2	; 0x02
     f90:	80 81       	ld	r24, Z
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 5d 07 	call	0xeba	; 0xeba <USART_enu_SendData>

            Local_pu8_SendingPoninter++;
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_String)
    {
        u8* Local_pu8_SendingPoninter = Copy_pu8_String;

        while(*Local_pu8_SendingPoninter)
     fa4:	e9 81       	ldd	r30, Y+1	; 0x01
     fa6:	fa 81       	ldd	r31, Y+2	; 0x02
     fa8:	80 81       	ld	r24, Z
     faa:	88 23       	and	r24, r24
     fac:	79 f7       	brne	.-34     	; 0xf8c <USART_enu_SendString+0x28>
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <USART_enu_SendString+0x50>
            Local_pu8_SendingPoninter++;
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local_u8_ErrorFlag;
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03

}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <USART_enu_SetCallBack>:

extern ErrorState_t USART_enu_SetCallBack (void (*Copy_pfun_AppFun)(void*), void* Copy_pvid_Paramters)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <USART_enu_SetCallBack+0x6>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <USART_enu_SetCallBack+0x8>
     fce:	0f 92       	push	r0
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	9b 83       	std	Y+3, r25	; 0x03
     fd6:	8a 83       	std	Y+2, r24	; 0x02
     fd8:	7d 83       	std	Y+5, r23	; 0x05
     fda:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFun)
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	9b 81       	ldd	r25, Y+3	; 0x03
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	71 f0       	breq	.+28     	; 0x1004 <USART_enu_SetCallBack+0x3e>
    {
        pfun_ISR = Copy_pfun_AppFun;
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	9b 81       	ldd	r25, Y+3	; 0x03
     fec:	90 93 a7 01 	sts	0x01A7, r25
     ff0:	80 93 a6 01 	sts	0x01A6, r24

        pvid_ParamtersOfISrs = Copy_pvid_Paramters;
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	90 93 a9 01 	sts	0x01A9, r25
     ffc:	80 93 a8 01 	sts	0x01A8, r24

        Local_u8_ErrorFlag = ES_OK;
    1000:	19 82       	std	Y+1, r1	; 0x01
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <USART_enu_SetCallBack+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1008:	89 81       	ldd	r24, Y+1	; 0x01
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <__vector_14>:
#elif  USART_INTERRUPT_MODE == USART_EDRE_INTERRUPT_MODE
    
    void __vector_14 (void)__attribute__((signal));
    
    void __vector_14 (void)
    {
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	2f 93       	push	r18
    1026:	3f 93       	push	r19
    1028:	4f 93       	push	r20
    102a:	5f 93       	push	r21
    102c:	6f 93       	push	r22
    102e:	7f 93       	push	r23
    1030:	8f 93       	push	r24
    1032:	9f 93       	push	r25
    1034:	af 93       	push	r26
    1036:	bf 93       	push	r27
    1038:	ef 93       	push	r30
    103a:	ff 93       	push	r31
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
        if(pfun_ISR)
    1044:	80 91 a6 01 	lds	r24, 0x01A6
    1048:	90 91 a7 01 	lds	r25, 0x01A7
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	49 f0       	breq	.+18     	; 0x1062 <__vector_14+0x48>
        {
            pfun_ISR(pvid_ParamtersOfISrs);
    1050:	e0 91 a6 01 	lds	r30, 0x01A6
    1054:	f0 91 a7 01 	lds	r31, 0x01A7
    1058:	80 91 a8 01 	lds	r24, 0x01A8
    105c:	90 91 a9 01 	lds	r25, 0x01A9
    1060:	09 95       	icall
        }
    }
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	ff 91       	pop	r31
    1068:	ef 91       	pop	r30
    106a:	bf 91       	pop	r27
    106c:	af 91       	pop	r26
    106e:	9f 91       	pop	r25
    1070:	8f 91       	pop	r24
    1072:	7f 91       	pop	r23
    1074:	6f 91       	pop	r22
    1076:	5f 91       	pop	r21
    1078:	4f 91       	pop	r20
    107a:	3f 91       	pop	r19
    107c:	2f 91       	pop	r18
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0f 90       	pop	r0
    1084:	1f 90       	pop	r1
    1086:	18 95       	reti

00001088 <Timer_enu_Initialization>:
static void (* apfun_ISRpointers[TIMER_ISR_COUNT])(void*)= { NULL};
static void* apvid_ISRParameters[TIMER_ISR_COUNT] = {NULL};

//APIs implementaion
extern ErrorState_t Timer_enu_Initialization(void)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <Timer_enu_Initialization+0x6>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <Timer_enu_Initialization+0x8>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <Timer_enu_Initialization+0xa>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
    1096:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Counter = 0;
    1098:	19 82       	std	Y+1, r1	; 0x01

    u8 Local_au8_ErrorStates [4] ={0};
    109a:	1b 82       	std	Y+3, r1	; 0x03
    109c:	1c 82       	std	Y+4, r1	; 0x04
    109e:	1d 82       	std	Y+5, r1	; 0x05
    10a0:	1e 82       	std	Y+6, r1	; 0x06

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
    10a2:	19 82       	std	Y+1, r1	; 0x01
    10a4:	b3 c0       	rjmp	.+358    	; 0x120c <Timer_enu_Initialization+0x184>
    {
        
      Local_au8_ErrorStates[0] = enu_SetTimerMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode);
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	c9 01       	movw	r24, r18
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	82 0f       	add	r24, r18
    10b8:	93 1f       	adc	r25, r19
    10ba:	fc 01       	movw	r30, r24
    10bc:	e5 59       	subi	r30, 0x95	; 149
    10be:	fe 4f       	sbci	r31, 0xFE	; 254
    10c0:	40 81       	ld	r20, Z
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	c9 01       	movw	r24, r18
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	82 0f       	add	r24, r18
    10d4:	93 1f       	adc	r25, r19
    10d6:	fc 01       	movw	r30, r24
    10d8:	e4 59       	subi	r30, 0x94	; 148
    10da:	fe 4f       	sbci	r31, 0xFE	; 254
    10dc:	90 81       	ld	r25, Z
    10de:	84 2f       	mov	r24, r20
    10e0:	69 2f       	mov	r22, r25
    10e2:	0e 94 9e 0c 	call	0x193c	; 0x193c <enu_SetTimerMode>
    10e6:	8b 83       	std	Y+3, r24	; 0x03
      Local_au8_ErrorStates[1] = enu_SetClockSelection(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].ClockSelection);
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	c9 01       	movw	r24, r18
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	fc 01       	movw	r30, r24
    10fe:	e5 59       	subi	r30, 0x95	; 149
    1100:	fe 4f       	sbci	r31, 0xFE	; 254
    1102:	40 81       	ld	r20, Z
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	c9 01       	movw	r24, r18
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	82 0f       	add	r24, r18
    1116:	93 1f       	adc	r25, r19
    1118:	fc 01       	movw	r30, r24
    111a:	e3 59       	subi	r30, 0x93	; 147
    111c:	fe 4f       	sbci	r31, 0xFE	; 254
    111e:	90 81       	ld	r25, Z
    1120:	84 2f       	mov	r24, r20
    1122:	69 2f       	mov	r22, r25
    1124:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <enu_SetClockSelection>
    1128:	8c 83       	std	Y+4, r24	; 0x04
      Local_au8_ErrorStates[2] = enu_SetInterruptMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode, Timer_astr_TimerList[Local_u8_Counter].InterruptMode);
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	c9 01       	movw	r24, r18
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	82 0f       	add	r24, r18
    113c:	93 1f       	adc	r25, r19
    113e:	fc 01       	movw	r30, r24
    1140:	e5 59       	subi	r30, 0x95	; 149
    1142:	fe 4f       	sbci	r31, 0xFE	; 254
    1144:	50 81       	ld	r21, Z
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	c9 01       	movw	r24, r18
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	82 0f       	add	r24, r18
    1158:	93 1f       	adc	r25, r19
    115a:	fc 01       	movw	r30, r24
    115c:	e4 59       	subi	r30, 0x94	; 148
    115e:	fe 4f       	sbci	r31, 0xFE	; 254
    1160:	40 81       	ld	r20, Z
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	c9 01       	movw	r24, r18
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	82 0f       	add	r24, r18
    1174:	93 1f       	adc	r25, r19
    1176:	fc 01       	movw	r30, r24
    1178:	e2 59       	subi	r30, 0x92	; 146
    117a:	fe 4f       	sbci	r31, 0xFE	; 254
    117c:	90 81       	ld	r25, Z
    117e:	85 2f       	mov	r24, r21
    1180:	64 2f       	mov	r22, r20
    1182:	49 2f       	mov	r20, r25
    1184:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <enu_SetInterruptMode>
    1188:	8d 83       	std	Y+5, r24	; 0x05
      Local_au8_ErrorStates[3] = enu_SetOCxBehavior(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode ,Timer_astr_TimerList[Local_u8_Counter].OCxPinBehavior);
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	c9 01       	movw	r24, r18
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	82 0f       	add	r24, r18
    119c:	93 1f       	adc	r25, r19
    119e:	fc 01       	movw	r30, r24
    11a0:	e5 59       	subi	r30, 0x95	; 149
    11a2:	fe 4f       	sbci	r31, 0xFE	; 254
    11a4:	50 81       	ld	r21, Z
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	c9 01       	movw	r24, r18
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	82 0f       	add	r24, r18
    11b8:	93 1f       	adc	r25, r19
    11ba:	fc 01       	movw	r30, r24
    11bc:	e4 59       	subi	r30, 0x94	; 148
    11be:	fe 4f       	sbci	r31, 0xFE	; 254
    11c0:	40 81       	ld	r20, Z
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	c9 01       	movw	r24, r18
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	82 0f       	add	r24, r18
    11d4:	93 1f       	adc	r25, r19
    11d6:	fc 01       	movw	r30, r24
    11d8:	e1 59       	subi	r30, 0x91	; 145
    11da:	fe 4f       	sbci	r31, 0xFE	; 254
    11dc:	90 81       	ld	r25, Z
    11de:	85 2f       	mov	r24, r21
    11e0:	64 2f       	mov	r22, r20
    11e2:	49 2f       	mov	r20, r25
    11e4:	0e 94 2a 10 	call	0x2054	; 0x2054 <enu_SetOCxBehavior>
    11e8:	8e 83       	std	Y+6, r24	; 0x06
    
      if((Local_au8_ErrorStates[0] == ES_NOK) || (Local_au8_ErrorStates[1] == ES_NOK) || (Local_au8_ErrorStates[2] == ES_NOK) || (Local_au8_ErrorStates[3] == ES_NOK))
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	49 f0       	breq	.+18     	; 0x1202 <Timer_enu_Initialization+0x17a>
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	31 f0       	breq	.+12     	; 0x1202 <Timer_enu_Initialization+0x17a>
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	19 f0       	breq	.+6      	; 0x1202 <Timer_enu_Initialization+0x17a>
    11fc:	8e 81       	ldd	r24, Y+6	; 0x06
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	11 f4       	brne	.+4      	; 0x1206 <Timer_enu_Initialization+0x17e>
      {
        Local_u8_ErrorFlag = ES_NOK;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Counter = 0;

    u8 Local_au8_ErrorStates [4] ={0};

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	90 91 6a 01 	lds	r25, 0x016A
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	89 17       	cp	r24, r25
    1214:	08 f4       	brcc	.+2      	; 0x1218 <Timer_enu_Initialization+0x190>
    1216:	47 cf       	rjmp	.-370    	; 0x10a6 <Timer_enu_Initialization+0x1e>
      }
    }
    


    return Local_u8_ErrorFlag;
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
}
    121a:	26 96       	adiw	r28, 0x06	; 6
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <Timer_enu_SetOCRxValue>:

extern ErrorState_t Timer_enu_SetOCRxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <Timer_enu_SetOCRxValue+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <Timer_enu_SetOCRxValue+0x8>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <Timer_enu_SetOCRxValue+0xa>
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	8a 83       	std	Y+2, r24	; 0x02
    123c:	7c 83       	std	Y+4, r23	; 0x04
    123e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3e 83       	std	Y+6, r19	; 0x06
    124c:	2d 83       	std	Y+5, r18	; 0x05
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	b9 f0       	breq	.+46     	; 0x1286 <Timer_enu_SetOCRxValue+0x5a>
    1258:	2d 81       	ldd	r18, Y+5	; 0x05
    125a:	3e 81       	ldd	r19, Y+6	; 0x06
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	51 f0       	breq	.+20     	; 0x1276 <Timer_enu_SetOCRxValue+0x4a>
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f4       	brne	.+24     	; 0x1282 <Timer_enu_SetOCRxValue+0x56>
    {
        case TIMER_0:
        {
            OCR0 = Copy_u16_Value;
    126a:	ec e5       	ldi	r30, 0x5C	; 92
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    1272:	19 82       	std	Y+1, r1	; 0x01
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }

        case TIMER_2:
        {
            OCR2 = Copy_u16_Value;
    1276:	e3 e4       	ldi	r30, 0x43	; 67
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    127e:	19 82       	std	Y+1, r1	; 0x01
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    1286:	89 81       	ldd	r24, Y+1	; 0x01
}
    1288:	26 96       	adiw	r28, 0x06	; 6
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <Timer_enu_SetTCNTxValue>:

extern ErrorState_t Timer_enu_SetTCNTxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <Timer_enu_SetTCNTxValue+0x6>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <Timer_enu_SetTCNTxValue+0x8>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <Timer_enu_SetTCNTxValue+0xa>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	8a 83       	std	Y+2, r24	; 0x02
    12aa:	7c 83       	std	Y+4, r23	; 0x04
    12ac:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3e 83       	std	Y+6, r19	; 0x06
    12ba:	2d 83       	std	Y+5, r18	; 0x05
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	b1 f0       	breq	.+44     	; 0x12f2 <Timer_enu_SetTCNTxValue+0x58>
    12c6:	2d 81       	ldd	r18, Y+5	; 0x05
    12c8:	3e 81       	ldd	r19, Y+6	; 0x06
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	51 f0       	breq	.+20     	; 0x12e4 <Timer_enu_SetTCNTxValue+0x4a>
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	59 f4       	brne	.+22     	; 0x12ee <Timer_enu_SetTCNTxValue+0x54>
    {
        case TIMER_0:
        {
            TCNT0 = (u8)Copy_u16_Value;
    12d8:	e2 e5       	ldi	r30, 0x52	; 82
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    12e0:	19 82       	std	Y+1, r1	; 0x01
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }

        case TIMER_2:
        {
            TCNT2 = (u8)Copy_u16_Value;
    12e4:	e4 e4       	ldi	r30, 0x44	; 68
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	80 83       	st	Z, r24
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f4:	26 96       	adiw	r28, 0x06	; 6
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <Timer_enu_ReadTCNTxValue>:

extern ErrorState_t Timer_enu_ReadTCNTxValue(u8 Copy_u8_TimerNumber, u16* Copy_u16_Value)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <Timer_enu_ReadTCNTxValue+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <Timer_enu_ReadTCNTxValue+0x8>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <Timer_enu_ReadTCNTxValue+0xa>
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	8a 83       	std	Y+2, r24	; 0x02
    1316:	7c 83       	std	Y+4, r23	; 0x04
    1318:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u16_Value)
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f1       	breq	.+88     	; 0x137e <Timer_enu_ReadTCNTxValue+0x78>
    {
        switch (Copy_u8_TimerNumber)
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3e 83       	std	Y+6, r19	; 0x06
    132e:	2d 83       	std	Y+5, r18	; 0x05
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	21 f1       	breq	.+72     	; 0x1382 <Timer_enu_ReadTCNTxValue+0x7c>
    133a:	2d 81       	ldd	r18, Y+5	; 0x05
    133c:	3e 81       	ldd	r19, Y+6	; 0x06
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	79 f0       	breq	.+30     	; 0x1362 <Timer_enu_ReadTCNTxValue+0x5c>
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	b1 f4       	brne	.+44     	; 0x1378 <Timer_enu_ReadTCNTxValue+0x72>
        {
            case TIMER_0:
            {
                *Copy_u16_Value = TCNT0;
    134c:	e2 e5       	ldi	r30, 0x52	; 82
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	eb 81       	ldd	r30, Y+3	; 0x03
    1358:	fc 81       	ldd	r31, Y+4	; 0x04
    135a:	91 83       	std	Z+1, r25	; 0x01
    135c:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    135e:	19 82       	std	Y+1, r1	; 0x01
    1360:	10 c0       	rjmp	.+32     	; 0x1382 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }

            case TIMER_2:
            {
                *Copy_u16_Value = TCNT2;
    1362:	e4 e4       	ldi	r30, 0x44	; 68
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	eb 81       	ldd	r30, Y+3	; 0x03
    136e:	fc 81       	ldd	r31, Y+4	; 0x04
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    1374:	19 82       	std	Y+1, r1	; 0x01
    1376:	05 c0       	rjmp	.+10     	; 0x1382 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <Timer_enu_ReadTCNTxValue+0x7c>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    137e:	83 e0       	ldi	r24, 0x03	; 3
    1380:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1382:	89 81       	ldd	r24, Y+1	; 0x01
}
    1384:	26 96       	adiw	r28, 0x06	; 6
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <Timer_enu_SetClock>:

extern ErrorState_t Timer_enu_SetClock (u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <Timer_enu_SetClock+0x6>
    139c:	0f 92       	push	r0
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	8a 83       	std	Y+2, r24	; 0x02
    13a4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetClockSelection(Copy_u8_TimerNumber, Copy_u8_ClockSelection);
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	6b 81       	ldd	r22, Y+3	; 0x03
    13ae:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <enu_SetClockSelection>
    13b2:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <Timer_enu_SetDutyCycleForPWM>:

extern ErrorState_t Timer_enu_SetDutyCycleForPWM(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_PulseType, f32 Copy_f32_DutyCyclePercentage)
{
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	2c 97       	sbiw	r28, 0x0c	; 12
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	8a 83       	std	Y+2, r24	; 0x02
    13dc:	6b 83       	std	Y+3, r22	; 0x03
    13de:	4c 83       	std	Y+4, r20	; 0x04
    13e0:	0d 83       	std	Y+5, r16	; 0x05
    13e2:	1e 83       	std	Y+6, r17	; 0x06
    13e4:	2f 83       	std	Y+7, r18	; 0x07
    13e6:	38 87       	std	Y+8, r19	; 0x08
    u8 Local_u8_ErrorFlag = ES_NOK;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_f32_DutyCyclePercentage >= TIMER_DUTYCYCLE_0) && (Copy_f32_DutyCyclePercentage <= TIMER_DUTYCYCLE_100))
    13ec:	1c 86       	std	Y+12, r1	; 0x0c
    13ee:	6d 81       	ldd	r22, Y+5	; 0x05
    13f0:	7e 81       	ldd	r23, Y+6	; 0x06
    13f2:	8f 81       	ldd	r24, Y+7	; 0x07
    13f4:	98 85       	ldd	r25, Y+8	; 0x08
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
    1402:	88 23       	and	r24, r24
    1404:	14 f0       	brlt	.+4      	; 0x140a <Timer_enu_SetDutyCycleForPWM+0x48>
    1406:	21 e0       	ldi	r18, 0x01	; 1
    1408:	2c 87       	std	Y+12, r18	; 0x0c
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	3c 85       	ldd	r19, Y+12	; 0x0c
    140e:	83 27       	eor	r24, r19
    1410:	88 23       	and	r24, r24
    1412:	09 f0       	breq	.+2      	; 0x1416 <Timer_enu_SetDutyCycleForPWM+0x54>
    1414:	64 c1       	rjmp	.+712    	; 0x16de <Timer_enu_SetDutyCycleForPWM+0x31c>
    1416:	1b 86       	std	Y+11, r1	; 0x0b
    1418:	6d 81       	ldd	r22, Y+5	; 0x05
    141a:	7e 81       	ldd	r23, Y+6	; 0x06
    141c:	8f 81       	ldd	r24, Y+7	; 0x07
    141e:	98 85       	ldd	r25, Y+8	; 0x08
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e8       	ldi	r20, 0x80	; 128
    1426:	5f e3       	ldi	r21, 0x3F	; 63
    1428:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__lesf2>
    142c:	18 16       	cp	r1, r24
    142e:	14 f0       	brlt	.+4      	; 0x1434 <Timer_enu_SetDutyCycleForPWM+0x72>
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	8b 87       	std	Y+11, r24	; 0x0b
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	9b 85       	ldd	r25, Y+11	; 0x0b
    1438:	89 27       	eor	r24, r25
    143a:	88 23       	and	r24, r24
    143c:	09 f0       	breq	.+2      	; 0x1440 <Timer_enu_SetDutyCycleForPWM+0x7e>
    143e:	4f c1       	rjmp	.+670    	; 0x16de <Timer_enu_SetDutyCycleForPWM+0x31c>
    {
        switch (Copy_u8_TimerNumber)
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	e8 2f       	mov	r30, r24
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	fa 87       	std	Y+10, r31	; 0x0a
    1448:	e9 87       	std	Y+9, r30	; 0x09
    144a:	29 85       	ldd	r18, Y+9	; 0x09
    144c:	3a 85       	ldd	r19, Y+10	; 0x0a
    144e:	21 30       	cpi	r18, 0x01	; 1
    1450:	31 05       	cpc	r19, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <Timer_enu_SetDutyCycleForPWM+0x94>
    1454:	46 c1       	rjmp	.+652    	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
    1456:	89 85       	ldd	r24, Y+9	; 0x09
    1458:	9a 85       	ldd	r25, Y+10	; 0x0a
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	91 05       	cpc	r25, r1
    145e:	09 f4       	brne	.+2      	; 0x1462 <Timer_enu_SetDutyCycleForPWM+0xa0>
    1460:	a0 c0       	rjmp	.+320    	; 0x15a2 <Timer_enu_SetDutyCycleForPWM+0x1e0>
    1462:	e9 85       	ldd	r30, Y+9	; 0x09
    1464:	fa 85       	ldd	r31, Y+10	; 0x0a
    1466:	30 97       	sbiw	r30, 0x00	; 0
    1468:	09 f0       	breq	.+2      	; 0x146c <Timer_enu_SetDutyCycleForPWM+0xaa>
    146a:	36 c1       	rjmp	.+620    	; 0x16d8 <Timer_enu_SetDutyCycleForPWM+0x316>
        {
            case TIMER_0:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	82 30       	cpi	r24, 0x02	; 2
    1470:	09 f0       	breq	.+2      	; 0x1474 <Timer_enu_SetDutyCycleForPWM+0xb2>
    1472:	43 c0       	rjmp	.+134    	; 0x14fa <Timer_enu_SetDutyCycleForPWM+0x138>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	86 30       	cpi	r24, 0x06	; 6
    1478:	c1 f4       	brne	.+48     	; 0x14aa <Timer_enu_SetDutyCycleForPWM+0xe8>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = Copy_f32_DutyCyclePercentage*TIMER_TCNT0_TOP;
    147a:	0c e5       	ldi	r16, 0x5C	; 92
    147c:	10 e0       	ldi	r17, 0x00	; 0
    147e:	6d 81       	ldd	r22, Y+5	; 0x05
    1480:	7e 81       	ldd	r23, Y+6	; 0x06
    1482:	8f 81       	ldd	r24, Y+7	; 0x07
    1484:	98 85       	ldd	r25, Y+8	; 0x08
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	4f e7       	ldi	r20, 0x7F	; 127
    148c:	53 e4       	ldi	r21, 0x43	; 67
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	f8 01       	movw	r30, r16
    14a4:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    14a6:	19 82       	std	Y+1, r1	; 0x01
    14a8:	1c c1       	rjmp	.+568    	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	87 30       	cpi	r24, 0x07	; 7
    14ae:	11 f5       	brne	.+68     	; 0x14f4 <Timer_enu_SetDutyCycleForPWM+0x132>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP* (1 - Copy_f32_DutyCyclePercentage );
    14b0:	0c e5       	ldi	r16, 0x5C	; 92
    14b2:	10 e0       	ldi	r17, 0x00	; 0
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	80 e8       	ldi	r24, 0x80	; 128
    14ba:	9f e3       	ldi	r25, 0x3F	; 63
    14bc:	2d 81       	ldd	r18, Y+5	; 0x05
    14be:	3e 81       	ldd	r19, Y+6	; 0x06
    14c0:	4f 81       	ldd	r20, Y+7	; 0x07
    14c2:	58 85       	ldd	r21, Y+8	; 0x08
    14c4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4f e7       	ldi	r20, 0x7F	; 127
    14d6:	53 e4       	ldi	r21, 0x43	; 67
    14d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	f8 01       	movw	r30, r16
    14ee:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    14f0:	19 82       	std	Y+1, r1	; 0x01
    14f2:	f7 c0       	rjmp	.+494    	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	f4 c0       	rjmp	.+488    	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	09 f0       	breq	.+2      	; 0x1502 <Timer_enu_SetDutyCycleForPWM+0x140>
    1500:	4d c0       	rjmp	.+154    	; 0x159c <Timer_enu_SetDutyCycleForPWM+0x1da>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	84 30       	cpi	r24, 0x04	; 4
    1506:	11 f5       	brne	.+68     	; 0x154c <Timer_enu_SetDutyCycleForPWM+0x18a>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1)) - 1;
    1508:	0c e5       	ldi	r16, 0x5C	; 92
    150a:	10 e0       	ldi	r17, 0x00	; 0
    150c:	6d 81       	ldd	r22, Y+5	; 0x05
    150e:	7e 81       	ldd	r23, Y+6	; 0x06
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	98 85       	ldd	r25, Y+8	; 0x08
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e8       	ldi	r20, 0x80	; 128
    151a:	53 e4       	ldi	r21, 0x43	; 67
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	5f e3       	ldi	r21, 0x3F	; 63
    1530:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	f8 01       	movw	r30, r16
    1546:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1548:	19 82       	std	Y+1, r1	; 0x01
    154a:	cb c0       	rjmp	.+406    	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	85 30       	cpi	r24, 0x05	; 5
    1550:	11 f5       	brne	.+68     	; 0x1596 <Timer_enu_SetDutyCycleForPWM+0x1d4>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1));
    1552:	0c e5       	ldi	r16, 0x5C	; 92
    1554:	10 e0       	ldi	r17, 0x00	; 0
    1556:	6d 81       	ldd	r22, Y+5	; 0x05
    1558:	7e 81       	ldd	r23, Y+6	; 0x06
    155a:	8f 81       	ldd	r24, Y+7	; 0x07
    155c:	98 85       	ldd	r25, Y+8	; 0x08
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e8       	ldi	r20, 0x80	; 128
    1564:	53 ec       	ldi	r21, 0xC3	; 195
    1566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4f e7       	ldi	r20, 0x7F	; 127
    1578:	53 e4       	ldi	r21, 0x43	; 67
    157a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	bc 01       	movw	r22, r24
    1584:	cd 01       	movw	r24, r26
    1586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	f8 01       	movw	r30, r16
    1590:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1592:	19 82       	std	Y+1, r1	; 0x01
    1594:	a6 c0       	rjmp	.+332    	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	a3 c0       	rjmp	.+326    	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	a0 c0       	rjmp	.+320    	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                break;
            }

            case TIMER_2:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	09 f0       	breq	.+2      	; 0x15aa <Timer_enu_SetDutyCycleForPWM+0x1e8>
    15a8:	43 c0       	rjmp	.+134    	; 0x1630 <Timer_enu_SetDutyCycleForPWM+0x26e>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	86 30       	cpi	r24, 0x06	; 6
    15ae:	c1 f4       	brne	.+48     	; 0x15e0 <Timer_enu_SetDutyCycleForPWM+0x21e>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = Copy_f32_DutyCyclePercentage*TIMER_TCNT2_TOP;
    15b0:	03 e4       	ldi	r16, 0x43	; 67
    15b2:	10 e0       	ldi	r17, 0x00	; 0
    15b4:	6d 81       	ldd	r22, Y+5	; 0x05
    15b6:	7e 81       	ldd	r23, Y+6	; 0x06
    15b8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ba:	98 85       	ldd	r25, Y+8	; 0x08
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	53 e4       	ldi	r21, 0x43	; 67
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	f8 01       	movw	r30, r16
    15da:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    15dc:	19 82       	std	Y+1, r1	; 0x01
    15de:	81 c0       	rjmp	.+258    	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	87 30       	cpi	r24, 0x07	; 7
    15e4:	11 f5       	brne	.+68     	; 0x162a <Timer_enu_SetDutyCycleForPWM+0x268>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP* (1 - Copy_f32_DutyCyclePercentage );
    15e6:	03 e4       	ldi	r16, 0x43	; 67
    15e8:	10 e0       	ldi	r17, 0x00	; 0
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	80 e8       	ldi	r24, 0x80	; 128
    15f0:	9f e3       	ldi	r25, 0x3F	; 63
    15f2:	2d 81       	ldd	r18, Y+5	; 0x05
    15f4:	3e 81       	ldd	r19, Y+6	; 0x06
    15f6:	4f 81       	ldd	r20, Y+7	; 0x07
    15f8:	58 85       	ldd	r21, Y+8	; 0x08
    15fa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4f e7       	ldi	r20, 0x7F	; 127
    160c:	53 e4       	ldi	r21, 0x43	; 67
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	f8 01       	movw	r30, r16
    1624:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1626:	19 82       	std	Y+1, r1	; 0x01
    1628:	5c c0       	rjmp	.+184    	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	59 c0       	rjmp	.+178    	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	09 f0       	breq	.+2      	; 0x1638 <Timer_enu_SetDutyCycleForPWM+0x276>
    1636:	4d c0       	rjmp	.+154    	; 0x16d2 <Timer_enu_SetDutyCycleForPWM+0x310>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1638:	8c 81       	ldd	r24, Y+4	; 0x04
    163a:	84 30       	cpi	r24, 0x04	; 4
    163c:	11 f5       	brne	.+68     	; 0x1682 <Timer_enu_SetDutyCycleForPWM+0x2c0>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1)) - 1;
    163e:	03 e4       	ldi	r16, 0x43	; 67
    1640:	10 e0       	ldi	r17, 0x00	; 0
    1642:	6d 81       	ldd	r22, Y+5	; 0x05
    1644:	7e 81       	ldd	r23, Y+6	; 0x06
    1646:	8f 81       	ldd	r24, Y+7	; 0x07
    1648:	98 85       	ldd	r25, Y+8	; 0x08
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e8       	ldi	r20, 0x80	; 128
    1650:	53 e4       	ldi	r21, 0x43	; 67
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e8       	ldi	r20, 0x80	; 128
    1664:	5f e3       	ldi	r21, 0x3F	; 63
    1666:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	f8 01       	movw	r30, r16
    167c:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    167e:	19 82       	std	Y+1, r1	; 0x01
    1680:	30 c0       	rjmp	.+96     	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	85 30       	cpi	r24, 0x05	; 5
    1686:	11 f5       	brne	.+68     	; 0x16cc <Timer_enu_SetDutyCycleForPWM+0x30a>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1));
    1688:	03 e4       	ldi	r16, 0x43	; 67
    168a:	10 e0       	ldi	r17, 0x00	; 0
    168c:	6d 81       	ldd	r22, Y+5	; 0x05
    168e:	7e 81       	ldd	r23, Y+6	; 0x06
    1690:	8f 81       	ldd	r24, Y+7	; 0x07
    1692:	98 85       	ldd	r25, Y+8	; 0x08
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e8       	ldi	r20, 0x80	; 128
    169a:	53 ec       	ldi	r21, 0xC3	; 195
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4f e7       	ldi	r20, 0x7F	; 127
    16ae:	53 e4       	ldi	r21, 0x43	; 67
    16b0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	f8 01       	movw	r30, r16
    16c6:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    16c8:	19 82       	std	Y+1, r1	; 0x01
    16ca:	0b c0       	rjmp	.+22     	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	08 c0       	rjmp	.+16     	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	05 c0       	rjmp	.+10     	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <Timer_enu_SetDutyCycleForPWM+0x320>
            }
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e4:	2c 96       	adiw	r28, 0x0c	; 12
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	08 95       	ret

000016fa <Timer_enu_ForceCompareMatch>:

extern ErrorState_t Timer_enu_ForceCompareMatch (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <Timer_enu_ForceCompareMatch+0x6>
    1700:	00 d0       	rcall	.+0      	; 0x1702 <Timer_enu_ForceCompareMatch+0x8>
    1702:	0f 92       	push	r0
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	8a 83       	std	Y+2, r24	; 0x02
    170a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_TimerMode == TIMER_NORMAL) || (TIMER_CTC))
    {
        switch (Copy_u8_TimerNumber)
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	3d 83       	std	Y+5, r19	; 0x05
    1718:	2c 83       	std	Y+4, r18	; 0x04
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	9d 81       	ldd	r25, Y+5	; 0x05
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	91 05       	cpc	r25, r1
    1722:	e9 f0       	breq	.+58     	; 0x175e <Timer_enu_ForceCompareMatch+0x64>
    1724:	2c 81       	ldd	r18, Y+4	; 0x04
    1726:	3d 81       	ldd	r19, Y+5	; 0x05
    1728:	22 30       	cpi	r18, 0x02	; 2
    172a:	31 05       	cpc	r19, r1
    172c:	69 f0       	breq	.+26     	; 0x1748 <Timer_enu_ForceCompareMatch+0x4e>
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	9d 81       	ldd	r25, Y+5	; 0x05
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	91 f4       	brne	.+36     	; 0x175a <Timer_enu_ForceCompareMatch+0x60>
        {
            case TIMER_0:
            {
                //Bit contains 1
                TCCR0 |= (1 << TCCR0_FOC0);
    1736:	a3 e5       	ldi	r26, 0x53	; 83
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e3 e5       	ldi	r30, 0x53	; 83
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	80 68       	ori	r24, 0x80	; 128
    1742:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1744:	19 82       	std	Y+1, r1	; 0x01
    1746:	0b c0       	rjmp	.+22     	; 0x175e <Timer_enu_ForceCompareMatch+0x64>
                break;
            }
            case TIMER_2:
            {
                //Bit contains 1
                TCCR2 |= (1 << TCCR2_FOC2);
    1748:	a5 e4       	ldi	r26, 0x45	; 69
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e4       	ldi	r30, 0x45	; 69
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	80 68       	ori	r24, 0x80	; 128
    1754:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1756:	19 82       	std	Y+1, r1	; 0x01
    1758:	02 c0       	rjmp	.+4      	; 0x175e <Timer_enu_ForceCompareMatch+0x64>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }
    return Local_u8_ErrorFlag;
    175e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <Timer_enu_SetTimerMode>:

extern ErrorState_t Timer_enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_TimerMode)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <Timer_enu_SetTimerMode+0x6>
    1776:	0f 92       	push	r0
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	8a 83       	std	Y+2, r24	; 0x02
    177e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetTimerMode(Copy_u8_TimerNumber, Copy_TimerMode);
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	6b 81       	ldd	r22, Y+3	; 0x03
    1788:	0e 94 9e 0c 	call	0x193c	; 0x193c <enu_SetTimerMode>
    178c:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    178e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <Timer_enu_SetFOCx>:

extern ErrorState_t Timer_enu_SetFOCx (u8 Copy_u8_TimerNumber)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <Timer_enu_SetFOCx+0x6>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <Timer_enu_SetFOCx+0x8>
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	3c 83       	std	Y+4, r19	; 0x04
    17b6:	2b 83       	std	Y+3, r18	; 0x03
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	91 05       	cpc	r25, r1
    17c0:	91 f0       	breq	.+36     	; 0x17e6 <Timer_enu_SetFOCx+0x4a>
    17c2:	2b 81       	ldd	r18, Y+3	; 0x03
    17c4:	3c 81       	ldd	r19, Y+4	; 0x04
    17c6:	22 30       	cpi	r18, 0x02	; 2
    17c8:	31 05       	cpc	r19, r1
    17ca:	79 f0       	breq	.+30     	; 0x17ea <Timer_enu_SetFOCx+0x4e>
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	a1 f4       	brne	.+40     	; 0x17fc <Timer_enu_SetFOCx+0x60>
    {
        case TIMER_0:
        {
            TCCR0 |= (1 << TCCR0_FOC0);
    17d4:	a3 e5       	ldi	r26, 0x53	; 83
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e3 e5       	ldi	r30, 0x53	; 83
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 68       	ori	r24, 0x80	; 128
    17e0:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    17e2:	19 82       	std	Y+1, r1	; 0x01
    17e4:	0d c0       	rjmp	.+26     	; 0x1800 <Timer_enu_SetFOCx+0x64>
        }

        case TIMER_1:
        {

            Local_u8_ErrorFlag = ES_OK;
    17e6:	19 82       	std	Y+1, r1	; 0x01
    17e8:	0b c0       	rjmp	.+22     	; 0x1800 <Timer_enu_SetFOCx+0x64>
        }

        case TIMER_2:
        {

            TCCR2 |= (1 << TCCR2_FOC2);
    17ea:	a5 e4       	ldi	r26, 0x45	; 69
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e5 e4       	ldi	r30, 0x45	; 69
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 68       	ori	r24, 0x80	; 128
    17f6:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    17f8:	19 82       	std	Y+1, r1	; 0x01
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <Timer_enu_SetFOCx+0x64>
            break;
        }
        
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    1800:	89 81       	ldd	r24, Y+1	; 0x01
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <Timer_enu_TimeDelay>:

extern ErrorState_t Timer_enu_TimeDelay(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimeinSec)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <Timer_enu_TimeDelay+0x6>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	8a 83       	std	Y+2, r24	; 0x02
    181e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	89 83       	std	Y+1, r24	; 0x01


    return Local_u8_ErrorFlag;
    1824:	89 81       	ldd	r24, Y+1	; 0x01
}
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <Timer_enu_SetCallBack>:
extern ErrorState_t Timer_enu_SetCallBack (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, void (*Copy_pfun_AppFunction)(void*), void* Copy_pvid_Parameters)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	29 97       	sbiw	r28, 0x09	; 9
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	6b 83       	std	Y+3, r22	; 0x03
    184a:	5d 83       	std	Y+5, r21	; 0x05
    184c:	4c 83       	std	Y+4, r20	; 0x04
    184e:	3f 83       	std	Y+7, r19	; 0x07
    1850:	2e 83       	std	Y+6, r18	; 0x06
    u8 Local_u8_ErrorFlag = ES_NOK;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pfun_AppFunction)
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	09 f4       	brne	.+2      	; 0x1860 <Timer_enu_SetCallBack+0x2e>
    185e:	62 c0       	rjmp	.+196    	; 0x1924 <Timer_enu_SetCallBack+0xf2>
    {
        switch (Copy_u8_TimerNumber)
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	39 87       	std	Y+9, r19	; 0x09
    1868:	28 87       	std	Y+8, r18	; 0x08
    186a:	88 85       	ldd	r24, Y+8	; 0x08
    186c:	99 85       	ldd	r25, Y+9	; 0x09
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <Timer_enu_SetCallBack+0x44>
    1874:	59 c0       	rjmp	.+178    	; 0x1928 <Timer_enu_SetCallBack+0xf6>
    1876:	28 85       	ldd	r18, Y+8	; 0x08
    1878:	39 85       	ldd	r19, Y+9	; 0x09
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	51 f1       	breq	.+84     	; 0x18d4 <Timer_enu_SetCallBack+0xa2>
    1880:	88 85       	ldd	r24, Y+8	; 0x08
    1882:	99 85       	ldd	r25, Y+9	; 0x09
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	09 f0       	breq	.+2      	; 0x188a <Timer_enu_SetCallBack+0x58>
    1888:	4a c0       	rjmp	.+148    	; 0x191e <Timer_enu_SetCallBack+0xec>
        {
            case TIMER_0:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	88 23       	and	r24, r24
    188e:	71 f4       	brne	.+28     	; 0x18ac <Timer_enu_SetCallBack+0x7a>
                {
                    apfun_ISRpointers[TIMER_0_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    1890:	8c 81       	ldd	r24, Y+4	; 0x04
    1892:	9d 81       	ldd	r25, Y+5	; 0x05
    1894:	90 93 b9 01 	sts	0x01B9, r25
    1898:	80 93 b8 01 	sts	0x01B8, r24

                    apvid_ISRParameters[TIMER_0_OVERFLOW_ISR] = Copy_pvid_Parameters;
    189c:	8e 81       	ldd	r24, Y+6	; 0x06
    189e:	9f 81       	ldd	r25, Y+7	; 0x07
    18a0:	90 93 c9 01 	sts	0x01C9, r25
    18a4:	80 93 c8 01 	sts	0x01C8, r24

                    Local_u8_ErrorFlag = ES_OK;
    18a8:	19 82       	std	Y+1, r1	; 0x01
    18aa:	3e c0       	rjmp	.+124    	; 0x1928 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	71 f4       	brne	.+28     	; 0x18ce <Timer_enu_SetCallBack+0x9c>
                {
                    apfun_ISRpointers[TIMER_0_CTC_ISR] = Copy_pfun_AppFunction;
    18b2:	8c 81       	ldd	r24, Y+4	; 0x04
    18b4:	9d 81       	ldd	r25, Y+5	; 0x05
    18b6:	90 93 b7 01 	sts	0x01B7, r25
    18ba:	80 93 b6 01 	sts	0x01B6, r24

                    apvid_ISRParameters[TIMER_0_CTC_ISR] = Copy_pvid_Parameters;
    18be:	8e 81       	ldd	r24, Y+6	; 0x06
    18c0:	9f 81       	ldd	r25, Y+7	; 0x07
    18c2:	90 93 c7 01 	sts	0x01C7, r25
    18c6:	80 93 c6 01 	sts	0x01C6, r24

                    Local_u8_ErrorFlag = ES_OK;
    18ca:	19 82       	std	Y+1, r1	; 0x01
    18cc:	2d c0       	rjmp	.+90     	; 0x1928 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    18ce:	82 e0       	ldi	r24, 0x02	; 2
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	2a c0       	rjmp	.+84     	; 0x1928 <Timer_enu_SetCallBack+0xf6>
                break;
            }

            case TIMER_2:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	88 23       	and	r24, r24
    18d8:	71 f4       	brne	.+28     	; 0x18f6 <Timer_enu_SetCallBack+0xc4>
                {
                    apfun_ISRpointers[TIMER_2_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	90 93 ad 01 	sts	0x01AD, r25
    18e2:	80 93 ac 01 	sts	0x01AC, r24

                    apvid_ISRParameters[TIMER_2_OVERFLOW_ISR] = Copy_pvid_Parameters;
    18e6:	8e 81       	ldd	r24, Y+6	; 0x06
    18e8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ea:	90 93 bd 01 	sts	0x01BD, r25
    18ee:	80 93 bc 01 	sts	0x01BC, r24

                    Local_u8_ErrorFlag = ES_OK;
    18f2:	19 82       	std	Y+1, r1	; 0x01
    18f4:	19 c0       	rjmp	.+50     	; 0x1928 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	71 f4       	brne	.+28     	; 0x1918 <Timer_enu_SetCallBack+0xe6>
                {
                    apfun_ISRpointers[TIMER_2_CTC_ISR] = Copy_pfun_AppFunction;
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1900:	90 93 ab 01 	sts	0x01AB, r25
    1904:	80 93 aa 01 	sts	0x01AA, r24

                    apvid_ISRParameters[TIMER_2_CTC_ISR] = Copy_pvid_Parameters;
    1908:	8e 81       	ldd	r24, Y+6	; 0x06
    190a:	9f 81       	ldd	r25, Y+7	; 0x07
    190c:	90 93 bb 01 	sts	0x01BB, r25
    1910:	80 93 ba 01 	sts	0x01BA, r24

                    Local_u8_ErrorFlag = ES_OK;
    1914:	19 82       	std	Y+1, r1	; 0x01
    1916:	08 c0       	rjmp	.+16     	; 0x1928 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <Timer_enu_SetCallBack+0xf6>

                break;
            }
            
            default:
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <Timer_enu_SetCallBack+0xf6>
            break;
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1924:	83 e0       	ldi	r24, 0x03	; 3
    1926:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1928:	89 81       	ldd	r24, Y+1	; 0x01
}
    192a:	29 96       	adiw	r28, 0x09	; 9
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <enu_SetTimerMode>:



//Local functions' implementation
static ErrorState_t enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <enu_SetTimerMode+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <enu_SetTimerMode+0x8>
    1944:	0f 92       	push	r0
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	8a 83       	std	Y+2, r24	; 0x02
    194c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	89 83       	std	Y+1, r24	; 0x01

    switch(Copy_u8_TimerNumber)
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	3d 83       	std	Y+5, r19	; 0x05
    195a:	2c 83       	std	Y+4, r18	; 0x04
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	9d 81       	ldd	r25, Y+5	; 0x05
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	91 05       	cpc	r25, r1
    1964:	09 f4       	brne	.+2      	; 0x1968 <enu_SetTimerMode+0x2c>
    1966:	ab c0       	rjmp	.+342    	; 0x1abe <enu_SetTimerMode+0x182>
    1968:	2c 81       	ldd	r18, Y+4	; 0x04
    196a:	3d 81       	ldd	r19, Y+5	; 0x05
    196c:	22 30       	cpi	r18, 0x02	; 2
    196e:	31 05       	cpc	r19, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <enu_SetTimerMode+0x38>
    1972:	54 c0       	rjmp	.+168    	; 0x1a1c <enu_SetTimerMode+0xe0>
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	09 f0       	breq	.+2      	; 0x197e <enu_SetTimerMode+0x42>
    197c:	9e c0       	rjmp	.+316    	; 0x1aba <enu_SetTimerMode+0x17e>
    {
        case TIMER_0:
        {

            if(Copy_u8_TimerMode == TIMER_NORMAL)
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	88 23       	and	r24, r24
    1982:	81 f4       	brne	.+32     	; 0x19a4 <enu_SetTimerMode+0x68>
            {
                //Bits contain 00
                TCCR0 &= ~(1 << TCCR0_WGM00);
    1984:	a3 e5       	ldi	r26, 0x53	; 83
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e3 e5       	ldi	r30, 0x53	; 83
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8f 7b       	andi	r24, 0xBF	; 191
    1990:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    1992:	a3 e5       	ldi	r26, 0x53	; 83
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e3 e5       	ldi	r30, 0x53	; 83
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	87 7f       	andi	r24, 0xF7	; 247
    199e:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    19a0:	19 82       	std	Y+1, r1	; 0x01
    19a2:	8d c0       	rjmp	.+282    	; 0x1abe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	82 30       	cpi	r24, 0x02	; 2
    19a8:	81 f4       	brne	.+32     	; 0x19ca <enu_SetTimerMode+0x8e>
            {
                //Bits contain 01
                TCCR0 |= (1 << TCCR0_WGM00);
    19aa:	a3 e5       	ldi	r26, 0x53	; 83
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e3 e5       	ldi	r30, 0x53	; 83
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	80 64       	ori	r24, 0x40	; 64
    19b6:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    19b8:	a3 e5       	ldi	r26, 0x53	; 83
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e3 e5       	ldi	r30, 0x53	; 83
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	87 7f       	andi	r24, 0xF7	; 247
    19c4:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    19c6:	19 82       	std	Y+1, r1	; 0x01
    19c8:	7a c0       	rjmp	.+244    	; 0x1abe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	81 f4       	brne	.+32     	; 0x19f0 <enu_SetTimerMode+0xb4>
            {
                //Bits contain 10
                TCCR0 &= ~(1 << TCCR0_WGM00);
    19d0:	a3 e5       	ldi	r26, 0x53	; 83
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e3 e5       	ldi	r30, 0x53	; 83
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	8f 7b       	andi	r24, 0xBF	; 191
    19dc:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    19de:	a3 e5       	ldi	r26, 0x53	; 83
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e3 e5       	ldi	r30, 0x53	; 83
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	88 60       	ori	r24, 0x08	; 8
    19ea:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    19ec:	19 82       	std	Y+1, r1	; 0x01
    19ee:	67 c0       	rjmp	.+206    	; 0x1abe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	81 f4       	brne	.+32     	; 0x1a16 <enu_SetTimerMode+0xda>
            {
                //Bits contain 11
                TCCR0 |= (1 << TCCR0_WGM00);
    19f6:	a3 e5       	ldi	r26, 0x53	; 83
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e3 e5       	ldi	r30, 0x53	; 83
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	80 64       	ori	r24, 0x40	; 64
    1a02:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    1a04:	a3 e5       	ldi	r26, 0x53	; 83
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e3 e5       	ldi	r30, 0x53	; 83
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	88 60       	ori	r24, 0x08	; 8
    1a10:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1a12:	19 82       	std	Y+1, r1	; 0x01
    1a14:	54 c0       	rjmp	.+168    	; 0x1abe <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	51 c0       	rjmp	.+162    	; 0x1abe <enu_SetTimerMode+0x182>
        break;
     
        case TIMER_2:
        {
            
            if(Copy_u8_TimerMode == TIMER_NORMAL)
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	88 23       	and	r24, r24
    1a20:	81 f4       	brne	.+32     	; 0x1a42 <enu_SetTimerMode+0x106>
            {
                //Bits contain 00
                TCCR2 &= ~(1 << TCCR2_WGM20);
    1a22:	a5 e4       	ldi	r26, 0x45	; 69
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e4       	ldi	r30, 0x45	; 69
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8f 7b       	andi	r24, 0xBF	; 191
    1a2e:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    1a30:	a5 e4       	ldi	r26, 0x45	; 69
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e5 e4       	ldi	r30, 0x45	; 69
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	87 7f       	andi	r24, 0xF7	; 247
    1a3c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1a3e:	19 82       	std	Y+1, r1	; 0x01
    1a40:	3e c0       	rjmp	.+124    	; 0x1abe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	82 30       	cpi	r24, 0x02	; 2
    1a46:	81 f4       	brne	.+32     	; 0x1a68 <enu_SetTimerMode+0x12c>
            {
                //Bits contain 01
                TCCR2 |= (1 << TCCR2_WGM20);
    1a48:	a5 e4       	ldi	r26, 0x45	; 69
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e5 e4       	ldi	r30, 0x45	; 69
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	80 64       	ori	r24, 0x40	; 64
    1a54:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    1a56:	a5 e4       	ldi	r26, 0x45	; 69
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e5 e4       	ldi	r30, 0x45	; 69
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	87 7f       	andi	r24, 0xF7	; 247
    1a62:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1a64:	19 82       	std	Y+1, r1	; 0x01
    1a66:	2b c0       	rjmp	.+86     	; 0x1abe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	81 f4       	brne	.+32     	; 0x1a8e <enu_SetTimerMode+0x152>
            {
                //Bits contain 10
                TCCR2 &= ~(1 << TCCR2_WGM20);
    1a6e:	a5 e4       	ldi	r26, 0x45	; 69
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e5 e4       	ldi	r30, 0x45	; 69
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	8f 7b       	andi	r24, 0xBF	; 191
    1a7a:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    1a7c:	a5 e4       	ldi	r26, 0x45	; 69
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e5 e4       	ldi	r30, 0x45	; 69
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	88 60       	ori	r24, 0x08	; 8
    1a88:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1a8a:	19 82       	std	Y+1, r1	; 0x01
    1a8c:	18 c0       	rjmp	.+48     	; 0x1abe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	83 30       	cpi	r24, 0x03	; 3
    1a92:	81 f4       	brne	.+32     	; 0x1ab4 <enu_SetTimerMode+0x178>
            {
                //Bits contain 11
                TCCR2 |= (1 << TCCR2_WGM20);
    1a94:	a5 e4       	ldi	r26, 0x45	; 69
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e5 e4       	ldi	r30, 0x45	; 69
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	80 64       	ori	r24, 0x40	; 64
    1aa0:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    1aa2:	a5 e4       	ldi	r26, 0x45	; 69
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e5 e4       	ldi	r30, 0x45	; 69
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	88 60       	ori	r24, 0x08	; 8
    1aae:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1ab0:	19 82       	std	Y+1, r1	; 0x01
    1ab2:	05 c0       	rjmp	.+10     	; 0x1abe <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <enu_SetTimerMode+0x182>
        
     


        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <enu_SetClockSelection>:

static ErrorState_t enu_SetClockSelection(u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	29 97       	sbiw	r28, 0x09	; 9
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
    1ae6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_TimerNumber)
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	39 87       	std	Y+9, r19	; 0x09
    1af4:	28 87       	std	Y+8, r18	; 0x08
    1af6:	88 85       	ldd	r24, Y+8	; 0x08
    1af8:	99 85       	ldd	r25, Y+9	; 0x09
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	91 05       	cpc	r25, r1
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <enu_SetClockSelection+0x32>
    1b00:	03 c2       	rjmp	.+1030   	; 0x1f08 <enu_SetClockSelection+0x438>
    1b02:	28 85       	ldd	r18, Y+8	; 0x08
    1b04:	39 85       	ldd	r19, Y+9	; 0x09
    1b06:	22 30       	cpi	r18, 0x02	; 2
    1b08:	31 05       	cpc	r19, r1
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <enu_SetClockSelection+0x3e>
    1b0c:	00 c1       	rjmp	.+512    	; 0x1d0e <enu_SetClockSelection+0x23e>
    1b0e:	88 85       	ldd	r24, Y+8	; 0x08
    1b10:	99 85       	ldd	r25, Y+9	; 0x09
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <enu_SetClockSelection+0x48>
    1b16:	f6 c1       	rjmp	.+1004   	; 0x1f04 <enu_SetClockSelection+0x434>
    {
        case TIMER_0:
        {
            switch (Copy_u8_ClockSelection)
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3f 83       	std	Y+7, r19	; 0x07
    1b20:	2e 83       	std	Y+6, r18	; 0x06
    1b22:	8e 81       	ldd	r24, Y+6	; 0x06
    1b24:	9f 81       	ldd	r25, Y+7	; 0x07
    1b26:	84 30       	cpi	r24, 0x04	; 4
    1b28:	91 05       	cpc	r25, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <enu_SetClockSelection+0x5e>
    1b2c:	7a c0       	rjmp	.+244    	; 0x1c22 <enu_SetClockSelection+0x152>
    1b2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b30:	3f 81       	ldd	r19, Y+7	; 0x07
    1b32:	25 30       	cpi	r18, 0x05	; 5
    1b34:	31 05       	cpc	r19, r1
    1b36:	8c f4       	brge	.+34     	; 0x1b5a <enu_SetClockSelection+0x8a>
    1b38:	8e 81       	ldd	r24, Y+6	; 0x06
    1b3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	91 05       	cpc	r25, r1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <enu_SetClockSelection+0x74>
    1b42:	41 c0       	rjmp	.+130    	; 0x1bc6 <enu_SetClockSelection+0xf6>
    1b44:	2e 81       	ldd	r18, Y+6	; 0x06
    1b46:	3f 81       	ldd	r19, Y+7	; 0x07
    1b48:	22 30       	cpi	r18, 0x02	; 2
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <enu_SetClockSelection+0x80>
    1b4e:	52 c0       	rjmp	.+164    	; 0x1bf4 <enu_SetClockSelection+0x124>
    1b50:	8e 81       	ldd	r24, Y+6	; 0x06
    1b52:	9f 81       	ldd	r25, Y+7	; 0x07
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	01 f1       	breq	.+64     	; 0x1b98 <enu_SetClockSelection+0xc8>
    1b58:	d7 c0       	rjmp	.+430    	; 0x1d08 <enu_SetClockSelection+0x238>
    1b5a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b5c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b5e:	27 30       	cpi	r18, 0x07	; 7
    1b60:	31 05       	cpc	r19, r1
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <enu_SetClockSelection+0x96>
    1b64:	8c c0       	rjmp	.+280    	; 0x1c7e <enu_SetClockSelection+0x1ae>
    1b66:	8e 81       	ldd	r24, Y+6	; 0x06
    1b68:	9f 81       	ldd	r25, Y+7	; 0x07
    1b6a:	88 30       	cpi	r24, 0x08	; 8
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	3c f4       	brge	.+14     	; 0x1b7e <enu_SetClockSelection+0xae>
    1b70:	2e 81       	ldd	r18, Y+6	; 0x06
    1b72:	3f 81       	ldd	r19, Y+7	; 0x07
    1b74:	26 30       	cpi	r18, 0x06	; 6
    1b76:	31 05       	cpc	r19, r1
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <enu_SetClockSelection+0xac>
    1b7a:	6a c0       	rjmp	.+212    	; 0x1c50 <enu_SetClockSelection+0x180>
    1b7c:	c5 c0       	rjmp	.+394    	; 0x1d08 <enu_SetClockSelection+0x238>
    1b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b80:	9f 81       	ldd	r25, Y+7	; 0x07
    1b82:	88 30       	cpi	r24, 0x08	; 8
    1b84:	91 05       	cpc	r25, r1
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <enu_SetClockSelection+0xba>
    1b88:	91 c0       	rjmp	.+290    	; 0x1cac <enu_SetClockSelection+0x1dc>
    1b8a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b8c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b8e:	29 30       	cpi	r18, 0x09	; 9
    1b90:	31 05       	cpc	r19, r1
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <enu_SetClockSelection+0xc6>
    1b94:	a2 c0       	rjmp	.+324    	; 0x1cda <enu_SetClockSelection+0x20a>
    1b96:	b8 c0       	rjmp	.+368    	; 0x1d08 <enu_SetClockSelection+0x238>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR0 &= ~ (1 << TCCR0_CS00);
    1b98:	a3 e5       	ldi	r26, 0x53	; 83
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e3 e5       	ldi	r30, 0x53	; 83
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8e 7f       	andi	r24, 0xFE	; 254
    1ba4:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1ba6:	a3 e5       	ldi	r26, 0x53	; 83
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e3 e5       	ldi	r30, 0x53	; 83
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8d 7f       	andi	r24, 0xFD	; 253
    1bb2:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1bb4:	a3 e5       	ldi	r26, 0x53	; 83
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e3 e5       	ldi	r30, 0x53	; 83
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8b 7f       	andi	r24, 0xFB	; 251
    1bc0:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
    1bc4:	a1 c1       	rjmp	.+834    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR0 |= (1 << TCCR0_CS00);
    1bc6:	a3 e5       	ldi	r26, 0x53	; 83
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e3 e5       	ldi	r30, 0x53	; 83
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	81 60       	ori	r24, 0x01	; 1
    1bd2:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1bd4:	a3 e5       	ldi	r26, 0x53	; 83
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e3 e5       	ldi	r30, 0x53	; 83
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	8d 7f       	andi	r24, 0xFD	; 253
    1be0:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1be2:	a3 e5       	ldi	r26, 0x53	; 83
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e3 e5       	ldi	r30, 0x53	; 83
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8b 7f       	andi	r24, 0xFB	; 251
    1bee:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1bf0:	19 82       	std	Y+1, r1	; 0x01
    1bf2:	8a c1       	rjmp	.+788    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1bf4:	a3 e5       	ldi	r26, 0x53	; 83
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e3 e5       	ldi	r30, 0x53	; 83
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8e 7f       	andi	r24, 0xFE	; 254
    1c00:	8c 93       	st	X, r24
                    TCCR0 |= (1  << TCCR0_CS01);
    1c02:	a3 e5       	ldi	r26, 0x53	; 83
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e3 e5       	ldi	r30, 0x53	; 83
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	82 60       	ori	r24, 0x02	; 2
    1c0e:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS02);
    1c10:	a3 e5       	ldi	r26, 0x53	; 83
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e3 e5       	ldi	r30, 0x53	; 83
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	8b 7f       	andi	r24, 0xFB	; 251
    1c1c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c1e:	19 82       	std	Y+1, r1	; 0x01
    1c20:	73 c1       	rjmp	.+742    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 011
                    TCCR0 |= (1 << TCCR0_CS00);
    1c22:	a3 e5       	ldi	r26, 0x53	; 83
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e3 e5       	ldi	r30, 0x53	; 83
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	81 60       	ori	r24, 0x01	; 1
    1c2e:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1c30:	a3 e5       	ldi	r26, 0x53	; 83
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e3 e5       	ldi	r30, 0x53	; 83
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	82 60       	ori	r24, 0x02	; 2
    1c3c:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1c3e:	a3 e5       	ldi	r26, 0x53	; 83
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e3 e5       	ldi	r30, 0x53	; 83
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	8b 7f       	andi	r24, 0xFB	; 251
    1c4a:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c4c:	19 82       	std	Y+1, r1	; 0x01
    1c4e:	5c c1       	rjmp	.+696    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 100
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1c50:	a3 e5       	ldi	r26, 0x53	; 83
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e3 e5       	ldi	r30, 0x53	; 83
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	8e 7f       	andi	r24, 0xFE	; 254
    1c5c:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS01);
    1c5e:	a3 e5       	ldi	r26, 0x53	; 83
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e3 e5       	ldi	r30, 0x53	; 83
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	8d 7f       	andi	r24, 0xFD	; 253
    1c6a:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1c6c:	a3 e5       	ldi	r26, 0x53	; 83
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e3 e5       	ldi	r30, 0x53	; 83
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	84 60       	ori	r24, 0x04	; 4
    1c78:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c7a:	19 82       	std	Y+1, r1	; 0x01
    1c7c:	45 c1       	rjmp	.+650    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 101
                    TCCR0 |= (1 << TCCR0_CS00);
    1c7e:	a3 e5       	ldi	r26, 0x53	; 83
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e3 e5       	ldi	r30, 0x53	; 83
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	81 60       	ori	r24, 0x01	; 1
    1c8a:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1c8c:	a3 e5       	ldi	r26, 0x53	; 83
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e3 e5       	ldi	r30, 0x53	; 83
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	8d 7f       	andi	r24, 0xFD	; 253
    1c98:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1c9a:	a3 e5       	ldi	r26, 0x53	; 83
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e3 e5       	ldi	r30, 0x53	; 83
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	84 60       	ori	r24, 0x04	; 4
    1ca6:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1ca8:	19 82       	std	Y+1, r1	; 0x01
    1caa:	2e c1       	rjmp	.+604    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_FALLING_EGDE:
                {
                    //Bits contain 110
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1cac:	a3 e5       	ldi	r26, 0x53	; 83
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e3 e5       	ldi	r30, 0x53	; 83
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	8e 7f       	andi	r24, 0xFE	; 254
    1cb8:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1cba:	a3 e5       	ldi	r26, 0x53	; 83
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e3 e5       	ldi	r30, 0x53	; 83
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	82 60       	ori	r24, 0x02	; 2
    1cc6:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1cc8:	a3 e5       	ldi	r26, 0x53	; 83
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e3 e5       	ldi	r30, 0x53	; 83
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	84 60       	ori	r24, 0x04	; 4
    1cd4:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1cd6:	19 82       	std	Y+1, r1	; 0x01
    1cd8:	17 c1       	rjmp	.+558    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_RISING_EGDE:
                {
                    //Bits contain 111
                    TCCR0 |= (1 << TCCR0_CS00);
    1cda:	a3 e5       	ldi	r26, 0x53	; 83
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e3 e5       	ldi	r30, 0x53	; 83
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	81 60       	ori	r24, 0x01	; 1
    1ce6:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1ce8:	a3 e5       	ldi	r26, 0x53	; 83
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e3 e5       	ldi	r30, 0x53	; 83
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	82 60       	ori	r24, 0x02	; 2
    1cf4:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1cf6:	a3 e5       	ldi	r26, 0x53	; 83
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e3 e5       	ldi	r30, 0x53	; 83
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	84 60       	ori	r24, 0x04	; 4
    1d02:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1d04:	19 82       	std	Y+1, r1	; 0x01
    1d06:	00 c1       	rjmp	.+512    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	fd c0       	rjmp	.+506    	; 0x1f08 <enu_SetClockSelection+0x438>
    
        case TIMER_2:
        {
            //Choosing I/O clock each time 
            //Bit contains 0
            ASSR &= ~( 1 << ASSR_AS2);
    1d0e:	a2 e4       	ldi	r26, 0x42	; 66
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e2 e4       	ldi	r30, 0x42	; 66
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	87 7f       	andi	r24, 0xF7	; 247
    1d1a:	8c 93       	st	X, r24
            
            switch (Copy_u8_ClockSelection)
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	3d 83       	std	Y+5, r19	; 0x05
    1d24:	2c 83       	std	Y+4, r18	; 0x04
    1d26:	8c 81       	ldd	r24, Y+4	; 0x04
    1d28:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2a:	83 30       	cpi	r24, 0x03	; 3
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <enu_SetClockSelection+0x262>
    1d30:	73 c0       	rjmp	.+230    	; 0x1e18 <enu_SetClockSelection+0x348>
    1d32:	2c 81       	ldd	r18, Y+4	; 0x04
    1d34:	3d 81       	ldd	r19, Y+5	; 0x05
    1d36:	24 30       	cpi	r18, 0x04	; 4
    1d38:	31 05       	cpc	r19, r1
    1d3a:	84 f4       	brge	.+32     	; 0x1d5c <enu_SetClockSelection+0x28c>
    1d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	91 05       	cpc	r25, r1
    1d44:	d9 f1       	breq	.+118    	; 0x1dbc <enu_SetClockSelection+0x2ec>
    1d46:	2c 81       	ldd	r18, Y+4	; 0x04
    1d48:	3d 81       	ldd	r19, Y+5	; 0x05
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	0c f0       	brlt	.+2      	; 0x1d52 <enu_SetClockSelection+0x282>
    1d50:	4c c0       	rjmp	.+152    	; 0x1dea <enu_SetClockSelection+0x31a>
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
    1d54:	9d 81       	ldd	r25, Y+5	; 0x05
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	d1 f0       	breq	.+52     	; 0x1d8e <enu_SetClockSelection+0x2be>
    1d5a:	d1 c0       	rjmp	.+418    	; 0x1efe <enu_SetClockSelection+0x42e>
    1d5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d60:	25 30       	cpi	r18, 0x05	; 5
    1d62:	31 05       	cpc	r19, r1
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <enu_SetClockSelection+0x298>
    1d66:	86 c0       	rjmp	.+268    	; 0x1e74 <enu_SetClockSelection+0x3a4>
    1d68:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6c:	85 30       	cpi	r24, 0x05	; 5
    1d6e:	91 05       	cpc	r25, r1
    1d70:	0c f4       	brge	.+2      	; 0x1d74 <enu_SetClockSelection+0x2a4>
    1d72:	69 c0       	rjmp	.+210    	; 0x1e46 <enu_SetClockSelection+0x376>
    1d74:	2c 81       	ldd	r18, Y+4	; 0x04
    1d76:	3d 81       	ldd	r19, Y+5	; 0x05
    1d78:	26 30       	cpi	r18, 0x06	; 6
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <enu_SetClockSelection+0x2b0>
    1d7e:	91 c0       	rjmp	.+290    	; 0x1ea2 <enu_SetClockSelection+0x3d2>
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	9d 81       	ldd	r25, Y+5	; 0x05
    1d84:	87 30       	cpi	r24, 0x07	; 7
    1d86:	91 05       	cpc	r25, r1
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <enu_SetClockSelection+0x2bc>
    1d8a:	a2 c0       	rjmp	.+324    	; 0x1ed0 <enu_SetClockSelection+0x400>
    1d8c:	b8 c0       	rjmp	.+368    	; 0x1efe <enu_SetClockSelection+0x42e>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR2 &= ~ (1 << TCCR2_CS20);
    1d8e:	a5 e4       	ldi	r26, 0x45	; 69
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e5 e4       	ldi	r30, 0x45	; 69
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	8e 7f       	andi	r24, 0xFE	; 254
    1d9a:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1d9c:	a5 e4       	ldi	r26, 0x45	; 69
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e5 e4       	ldi	r30, 0x45	; 69
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	8d 7f       	andi	r24, 0xFD	; 253
    1da8:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1daa:	a5 e4       	ldi	r26, 0x45	; 69
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e5 e4       	ldi	r30, 0x45	; 69
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8b 7f       	andi	r24, 0xFB	; 251
    1db6:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1db8:	19 82       	std	Y+1, r1	; 0x01
    1dba:	a6 c0       	rjmp	.+332    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR2 |= (1 << TCCR2_CS20);
    1dbc:	a5 e4       	ldi	r26, 0x45	; 69
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e5 e4       	ldi	r30, 0x45	; 69
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	81 60       	ori	r24, 0x01	; 1
    1dc8:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1dca:	a5 e4       	ldi	r26, 0x45	; 69
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e5 e4       	ldi	r30, 0x45	; 69
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8d 7f       	andi	r24, 0xFD	; 253
    1dd6:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1dd8:	a5 e4       	ldi	r26, 0x45	; 69
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e5 e4       	ldi	r30, 0x45	; 69
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8b 7f       	andi	r24, 0xFB	; 251
    1de4:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1de6:	19 82       	std	Y+1, r1	; 0x01
    1de8:	8f c0       	rjmp	.+286    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1dea:	a5 e4       	ldi	r26, 0x45	; 69
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e5 e4       	ldi	r30, 0x45	; 69
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	8e 7f       	andi	r24, 0xFE	; 254
    1df6:	8c 93       	st	X, r24
                    TCCR2 |= (1  << TCCR2_CS21);
    1df8:	a5 e4       	ldi	r26, 0x45	; 69
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e4       	ldi	r30, 0x45	; 69
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	82 60       	ori	r24, 0x02	; 2
    1e04:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS22);
    1e06:	a5 e4       	ldi	r26, 0x45	; 69
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e5 e4       	ldi	r30, 0x45	; 69
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	8b 7f       	andi	r24, 0xFB	; 251
    1e12:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1e14:	19 82       	std	Y+1, r1	; 0x01
    1e16:	78 c0       	rjmp	.+240    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_32:
                {
                    //Bits contain 011
                    TCCR2 |= (1 << TCCR2_CS20);
    1e18:	a5 e4       	ldi	r26, 0x45	; 69
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e4       	ldi	r30, 0x45	; 69
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	81 60       	ori	r24, 0x01	; 1
    1e24:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1e26:	a5 e4       	ldi	r26, 0x45	; 69
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e5 e4       	ldi	r30, 0x45	; 69
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	82 60       	ori	r24, 0x02	; 2
    1e32:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1e34:	a5 e4       	ldi	r26, 0x45	; 69
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e5 e4       	ldi	r30, 0x45	; 69
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8b 7f       	andi	r24, 0xFB	; 251
    1e40:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1e42:	19 82       	std	Y+1, r1	; 0x01
    1e44:	61 c0       	rjmp	.+194    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 100
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1e46:	a5 e4       	ldi	r26, 0x45	; 69
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e5 e4       	ldi	r30, 0x45	; 69
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8e 7f       	andi	r24, 0xFE	; 254
    1e52:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS21);
    1e54:	a5 e4       	ldi	r26, 0x45	; 69
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e4       	ldi	r30, 0x45	; 69
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8d 7f       	andi	r24, 0xFD	; 253
    1e60:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1e62:	a5 e4       	ldi	r26, 0x45	; 69
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e5 e4       	ldi	r30, 0x45	; 69
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	84 60       	ori	r24, 0x04	; 4
    1e6e:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1e70:	19 82       	std	Y+1, r1	; 0x01
    1e72:	4a c0       	rjmp	.+148    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_128:
                {
                    //Bits contain 101
                    TCCR2 |= (1 << TCCR2_CS20);
    1e74:	a5 e4       	ldi	r26, 0x45	; 69
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e5 e4       	ldi	r30, 0x45	; 69
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	81 60       	ori	r24, 0x01	; 1
    1e80:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1e82:	a5 e4       	ldi	r26, 0x45	; 69
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e5 e4       	ldi	r30, 0x45	; 69
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	8d 7f       	andi	r24, 0xFD	; 253
    1e8e:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1e90:	a5 e4       	ldi	r26, 0x45	; 69
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e5 e4       	ldi	r30, 0x45	; 69
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	84 60       	ori	r24, 0x04	; 4
    1e9c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1e9e:	19 82       	std	Y+1, r1	; 0x01
    1ea0:	33 c0       	rjmp	.+102    	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 110
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1ea2:	a5 e4       	ldi	r26, 0x45	; 69
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e5 e4       	ldi	r30, 0x45	; 69
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	8e 7f       	andi	r24, 0xFE	; 254
    1eae:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1eb0:	a5 e4       	ldi	r26, 0x45	; 69
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e5 e4       	ldi	r30, 0x45	; 69
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	82 60       	ori	r24, 0x02	; 2
    1ebc:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1ebe:	a5 e4       	ldi	r26, 0x45	; 69
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e5 e4       	ldi	r30, 0x45	; 69
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	84 60       	ori	r24, 0x04	; 4
    1eca:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1ecc:	19 82       	std	Y+1, r1	; 0x01
    1ece:	1c c0       	rjmp	.+56     	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 111
                    TCCR2 |= (1 << TCCR2_CS20);
    1ed0:	a5 e4       	ldi	r26, 0x45	; 69
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e5 e4       	ldi	r30, 0x45	; 69
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	81 60       	ori	r24, 0x01	; 1
    1edc:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1ede:	a5 e4       	ldi	r26, 0x45	; 69
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e5 e4       	ldi	r30, 0x45	; 69
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	82 60       	ori	r24, 0x02	; 2
    1eea:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1eec:	a5 e4       	ldi	r26, 0x45	; 69
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e5 e4       	ldi	r30, 0x45	; 69
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	84 60       	ori	r24, 0x04	; 4
    1ef8:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1efa:	19 82       	std	Y+1, r1	; 0x01
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <enu_SetClockSelection+0x438>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f04:	82 e0       	ldi	r24, 0x02	; 2
    1f06:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return Local_u8_ErrorFlag;
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f0a:	29 96       	adiw	r28, 0x09	; 9
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <enu_SetInterruptMode>:

static ErrorState_t enu_SetInterruptMode(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_InterruptMode)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <enu_SetInterruptMode+0x6>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <enu_SetInterruptMode+0x8>
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <enu_SetInterruptMode+0xa>
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	8a 83       	std	Y+2, r24	; 0x02
    1f2c:	6b 83       	std	Y+3, r22	; 0x03
    1f2e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_TimerNumber)
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	3e 83       	std	Y+6, r19	; 0x06
    1f3c:	2d 83       	std	Y+5, r18	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	91 05       	cpc	r25, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <enu_SetInterruptMode+0x2e>
    1f48:	7b c0       	rjmp	.+246    	; 0x2040 <enu_SetInterruptMode+0x124>
    1f4a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f4c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f4e:	22 30       	cpi	r18, 0x02	; 2
    1f50:	31 05       	cpc	r19, r1
    1f52:	a9 f1       	breq	.+106    	; 0x1fbe <enu_SetInterruptMode+0xa2>
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <enu_SetInterruptMode+0x42>
    1f5c:	6f c0       	rjmp	.+222    	; 0x203c <enu_SetInterruptMode+0x120>
    {
        case TIMER_0:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	88 23       	and	r24, r24
    1f62:	89 f4       	brne	.+34     	; 0x1f86 <enu_SetInterruptMode+0x6a>
            {
                //Clearing bit 0 (TOIE0)
                TIMSK &= (0xFE);
    1f64:	a9 e5       	ldi	r26, 0x59	; 89
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e9 e5       	ldi	r30, 0x59	; 89
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8e 7f       	andi	r24, 0xFE	; 254
    1f70:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE0);
    1f72:	a9 e5       	ldi	r26, 0x59	; 89
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e9 e5       	ldi	r30, 0x59	; 89
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	90 81       	ld	r25, Z
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	89 2b       	or	r24, r25
    1f80:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1f82:	19 82       	std	Y+1, r1	; 0x01
    1f84:	5d c0       	rjmp	.+186    	; 0x2040 <enu_SetInterruptMode+0x124>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	81 30       	cpi	r24, 0x01	; 1
    1f8a:	b1 f4       	brne	.+44     	; 0x1fb8 <enu_SetInterruptMode+0x9c>
            {
                //Clearing bit 1 (OCIE0)
                TIMSK &= (0xFD);
    1f8c:	a9 e5       	ldi	r26, 0x59	; 89
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e9 e5       	ldi	r30, 0x59	; 89
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	8d 7f       	andi	r24, 0xFD	; 253
    1f98:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE0);
    1f9a:	a9 e5       	ldi	r26, 0x59	; 89
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e9 e5       	ldi	r30, 0x59	; 89
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	82 2b       	or	r24, r18
    1fb2:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1fb4:	19 82       	std	Y+1, r1	; 0x01
    1fb6:	44 c0       	rjmp	.+136    	; 0x2040 <enu_SetInterruptMode+0x124>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	41 c0       	rjmp	.+130    	; 0x2040 <enu_SetInterruptMode+0x124>
            break;
        }

        case TIMER_2:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	88 23       	and	r24, r24
    1fc2:	e9 f4       	brne	.+58     	; 0x1ffe <enu_SetInterruptMode+0xe2>
            {
                //Clearing bit 6 (TOIE2)
                TIMSK &= (0xBF);
    1fc4:	a9 e5       	ldi	r26, 0x59	; 89
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e9 e5       	ldi	r30, 0x59	; 89
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	8f 7b       	andi	r24, 0xBF	; 191
    1fd0:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE2);
    1fd2:	a9 e5       	ldi	r26, 0x59	; 89
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e9 e5       	ldi	r30, 0x59	; 89
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	28 2f       	mov	r18, r24
    1fde:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe0:	88 2f       	mov	r24, r24
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	00 24       	eor	r0, r0
    1fe6:	96 95       	lsr	r25
    1fe8:	87 95       	ror	r24
    1fea:	07 94       	ror	r0
    1fec:	96 95       	lsr	r25
    1fee:	87 95       	ror	r24
    1ff0:	07 94       	ror	r0
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	80 2d       	mov	r24, r0
    1ff6:	82 2b       	or	r24, r18
    1ff8:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1ffa:	19 82       	std	Y+1, r1	; 0x01
    1ffc:	21 c0       	rjmp	.+66     	; 0x2040 <enu_SetInterruptMode+0x124>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	81 30       	cpi	r24, 0x01	; 1
    2002:	c9 f4       	brne	.+50     	; 0x2036 <enu_SetInterruptMode+0x11a>
            {
                //Clearing bit 7 (OCIE2)
                TIMSK &= (0x7F);
    2004:	a9 e5       	ldi	r26, 0x59	; 89
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e9 e5       	ldi	r30, 0x59	; 89
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	8f 77       	andi	r24, 0x7F	; 127
    2010:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE2);
    2012:	a9 e5       	ldi	r26, 0x59	; 89
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e9 e5       	ldi	r30, 0x59	; 89
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	28 2f       	mov	r18, r24
    201e:	8c 81       	ldd	r24, Y+4	; 0x04
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	96 95       	lsr	r25
    2026:	98 2f       	mov	r25, r24
    2028:	88 27       	eor	r24, r24
    202a:	97 95       	ror	r25
    202c:	87 95       	ror	r24
    202e:	82 2b       	or	r24, r18
    2030:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2032:	19 82       	std	Y+1, r1	; 0x01
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <enu_SetInterruptMode+0x124>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <enu_SetInterruptMode+0x124>
                        
            break;
        }

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    203c:	82 e0       	ldi	r24, 0x02	; 2
    203e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;
    2040:	89 81       	ldd	r24, Y+1	; 0x01
}
    2042:	26 96       	adiw	r28, 0x06	; 6
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <enu_SetOCxBehavior>:

static ErrorState_t enu_SetOCxBehavior(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_OCxPinBehavior)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	00 d0       	rcall	.+0      	; 0x205a <enu_SetOCxBehavior+0x6>
    205a:	00 d0       	rcall	.+0      	; 0x205c <enu_SetOCxBehavior+0x8>
    205c:	00 d0       	rcall	.+0      	; 0x205e <enu_SetOCxBehavior+0xa>
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	8a 83       	std	Y+2, r24	; 0x02
    2064:	6b 83       	std	Y+3, r22	; 0x03
    2066:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	3e 83       	std	Y+6, r19	; 0x06
    2074:	2d 83       	std	Y+5, r18	; 0x05
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	91 05       	cpc	r25, r1
    207e:	09 f4       	brne	.+2      	; 0x2082 <enu_SetOCxBehavior+0x2e>
    2080:	d3 c0       	rjmp	.+422    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
    2082:	2d 81       	ldd	r18, Y+5	; 0x05
    2084:	3e 81       	ldd	r19, Y+6	; 0x06
    2086:	22 30       	cpi	r18, 0x02	; 2
    2088:	31 05       	cpc	r19, r1
    208a:	09 f4       	brne	.+2      	; 0x208e <enu_SetOCxBehavior+0x3a>
    208c:	68 c0       	rjmp	.+208    	; 0x215e <enu_SetOCxBehavior+0x10a>
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	09 f0       	breq	.+2      	; 0x2098 <enu_SetOCxBehavior+0x44>
    2096:	c6 c0       	rjmp	.+396    	; 0x2224 <enu_SetOCxBehavior+0x1d0>
    {
        case TIMER_0:
        {   
            //Clearing bits 5 and 4
            TCCR0 &= (0xCF);
    2098:	a3 e5       	ldi	r26, 0x53	; 83
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e3 e5       	ldi	r30, 0x53	; 83
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	8f 7c       	andi	r24, 0xCF	; 207
    20a4:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	88 23       	and	r24, r24
    20aa:	11 f4       	brne	.+4      	; 0x20b0 <enu_SetOCxBehavior+0x5c>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    20ac:	19 82       	std	Y+1, r1	; 0x01
    20ae:	bc c0       	rjmp	.+376    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	88 23       	and	r24, r24
    20b4:	19 f0       	breq	.+6      	; 0x20bc <enu_SetOCxBehavior+0x68>
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	39 f5       	brne	.+78     	; 0x210a <enu_SetOCxBehavior+0xb6>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    20bc:	8c 81       	ldd	r24, Y+4	; 0x04
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	49 f4       	brne	.+18     	; 0x20d4 <enu_SetOCxBehavior+0x80>
                {
                    //Bits contain 01
                    TCCR0 |= (1 << TCCR0_COM00);
    20c2:	a3 e5       	ldi	r26, 0x53	; 83
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e3 e5       	ldi	r30, 0x53	; 83
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	80 61       	ori	r24, 0x10	; 16
    20ce:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    20d0:	19 82       	std	Y+1, r1	; 0x01
    20d2:	aa c0       	rjmp	.+340    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	82 30       	cpi	r24, 0x02	; 2
    20d8:	49 f4       	brne	.+18     	; 0x20ec <enu_SetOCxBehavior+0x98>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    20da:	a3 e5       	ldi	r26, 0x53	; 83
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e3 e5       	ldi	r30, 0x53	; 83
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	80 62       	ori	r24, 0x20	; 32
    20e6:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    20e8:	19 82       	std	Y+1, r1	; 0x01
    20ea:	9e c0       	rjmp	.+316    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	83 30       	cpi	r24, 0x03	; 3
    20f0:	49 f4       	brne	.+18     	; 0x2104 <enu_SetOCxBehavior+0xb0>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    20f2:	a3 e5       	ldi	r26, 0x53	; 83
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e3 e5       	ldi	r30, 0x53	; 83
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	80 63       	ori	r24, 0x30	; 48
    20fe:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2100:	19 82       	std	Y+1, r1	; 0x01
    2102:	92 c0       	rjmp	.+292    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	8f c0       	rjmp	.+286    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	82 30       	cpi	r24, 0x02	; 2
    210e:	19 f0       	breq	.+6      	; 0x2116 <enu_SetOCxBehavior+0xc2>
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	83 30       	cpi	r24, 0x03	; 3
    2114:	09 f5       	brne	.+66     	; 0x2158 <enu_SetOCxBehavior+0x104>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    2116:	8c 81       	ldd	r24, Y+4	; 0x04
    2118:	84 30       	cpi	r24, 0x04	; 4
    211a:	19 f0       	breq	.+6      	; 0x2122 <enu_SetOCxBehavior+0xce>
    211c:	8c 81       	ldd	r24, Y+4	; 0x04
    211e:	86 30       	cpi	r24, 0x06	; 6
    2120:	49 f4       	brne	.+18     	; 0x2134 <enu_SetOCxBehavior+0xe0>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    2122:	a3 e5       	ldi	r26, 0x53	; 83
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e3 e5       	ldi	r30, 0x53	; 83
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	80 62       	ori	r24, 0x20	; 32
    212e:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2130:	19 82       	std	Y+1, r1	; 0x01
    2132:	7a c0       	rjmp	.+244    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    2134:	8c 81       	ldd	r24, Y+4	; 0x04
    2136:	85 30       	cpi	r24, 0x05	; 5
    2138:	19 f0       	breq	.+6      	; 0x2140 <enu_SetOCxBehavior+0xec>
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	87 30       	cpi	r24, 0x07	; 7
    213e:	49 f4       	brne	.+18     	; 0x2152 <enu_SetOCxBehavior+0xfe>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    2140:	a3 e5       	ldi	r26, 0x53	; 83
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e3 e5       	ldi	r30, 0x53	; 83
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	80 63       	ori	r24, 0x30	; 48
    214c:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    214e:	19 82       	std	Y+1, r1	; 0x01
    2150:	6b c0       	rjmp	.+214    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	68 c0       	rjmp	.+208    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2158:	82 e0       	ldi	r24, 0x02	; 2
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	65 c0       	rjmp	.+202    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
        
        case TIMER_2:
        {
            
            //Clearing bits 5 and 4
            TCCR2 &= (0xCF);
    215e:	a5 e4       	ldi	r26, 0x45	; 69
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e5 e4       	ldi	r30, 0x45	; 69
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	8f 7c       	andi	r24, 0xCF	; 207
    216a:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	88 23       	and	r24, r24
    2170:	11 f4       	brne	.+4      	; 0x2176 <enu_SetOCxBehavior+0x122>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    2172:	19 82       	std	Y+1, r1	; 0x01
    2174:	59 c0       	rjmp	.+178    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	88 23       	and	r24, r24
    217a:	19 f0       	breq	.+6      	; 0x2182 <enu_SetOCxBehavior+0x12e>
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	39 f5       	brne	.+78     	; 0x21d0 <enu_SetOCxBehavior+0x17c>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    2182:	8c 81       	ldd	r24, Y+4	; 0x04
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	49 f4       	brne	.+18     	; 0x219a <enu_SetOCxBehavior+0x146>
                {
                    //Bits contain 01
                    TCCR2 |= (1 << TCCR2_COM20);
    2188:	a5 e4       	ldi	r26, 0x45	; 69
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e5 e4       	ldi	r30, 0x45	; 69
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	80 61       	ori	r24, 0x10	; 16
    2194:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2196:	19 82       	std	Y+1, r1	; 0x01
    2198:	47 c0       	rjmp	.+142    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    219a:	8c 81       	ldd	r24, Y+4	; 0x04
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	49 f4       	brne	.+18     	; 0x21b2 <enu_SetOCxBehavior+0x15e>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    21a0:	a5 e4       	ldi	r26, 0x45	; 69
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e5 e4       	ldi	r30, 0x45	; 69
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	80 62       	ori	r24, 0x20	; 32
    21ac:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    21ae:	19 82       	std	Y+1, r1	; 0x01
    21b0:	3b c0       	rjmp	.+118    	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    21b2:	8c 81       	ldd	r24, Y+4	; 0x04
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	49 f4       	brne	.+18     	; 0x21ca <enu_SetOCxBehavior+0x176>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    21b8:	a5 e4       	ldi	r26, 0x45	; 69
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e5 e4       	ldi	r30, 0x45	; 69
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	80 63       	ori	r24, 0x30	; 48
    21c4:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    21c6:	19 82       	std	Y+1, r1	; 0x01
    21c8:	2f c0       	rjmp	.+94     	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	2c c0       	rjmp	.+88     	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	19 f0       	breq	.+6      	; 0x21dc <enu_SetOCxBehavior+0x188>
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	83 30       	cpi	r24, 0x03	; 3
    21da:	09 f5       	brne	.+66     	; 0x221e <enu_SetOCxBehavior+0x1ca>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    21dc:	8c 81       	ldd	r24, Y+4	; 0x04
    21de:	84 30       	cpi	r24, 0x04	; 4
    21e0:	19 f0       	breq	.+6      	; 0x21e8 <enu_SetOCxBehavior+0x194>
    21e2:	8c 81       	ldd	r24, Y+4	; 0x04
    21e4:	86 30       	cpi	r24, 0x06	; 6
    21e6:	49 f4       	brne	.+18     	; 0x21fa <enu_SetOCxBehavior+0x1a6>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    21e8:	a5 e4       	ldi	r26, 0x45	; 69
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e5 e4       	ldi	r30, 0x45	; 69
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	80 62       	ori	r24, 0x20	; 32
    21f4:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    21f6:	19 82       	std	Y+1, r1	; 0x01
    21f8:	17 c0       	rjmp	.+46     	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    21fa:	8c 81       	ldd	r24, Y+4	; 0x04
    21fc:	85 30       	cpi	r24, 0x05	; 5
    21fe:	19 f0       	breq	.+6      	; 0x2206 <enu_SetOCxBehavior+0x1b2>
    2200:	8c 81       	ldd	r24, Y+4	; 0x04
    2202:	87 30       	cpi	r24, 0x07	; 7
    2204:	49 f4       	brne	.+18     	; 0x2218 <enu_SetOCxBehavior+0x1c4>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    2206:	a5 e4       	ldi	r26, 0x45	; 69
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e5 e4       	ldi	r30, 0x45	; 69
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	80 63       	ori	r24, 0x30	; 48
    2212:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2214:	19 82       	std	Y+1, r1	; 0x01
    2216:	08 c0       	rjmp	.+16     	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <enu_SetOCxBehavior+0x1d4>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    221e:	82 e0       	ldi	r24, 0x02	; 2
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <enu_SetOCxBehavior+0x1d4>
            }
            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
}
    222a:	26 96       	adiw	r28, 0x06	; 6
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
    2244:	78 94       	sei
}
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
    2254:	f8 94       	cli

    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	00 d0       	rcall	.+0      	; 0x2262 <EXTI_enu_Initialization+0x6>
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    226a:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    226c:	19 82       	std	Y+1, r1	; 0x01
    226e:	3b c0       	rjmp	.+118    	; 0x22e6 <EXTI_enu_Initialization+0x8a>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	c9 01       	movw	r24, r18
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	82 0f       	add	r24, r18
    227e:	93 1f       	adc	r25, r19
    2280:	fc 01       	movw	r30, r24
    2282:	ef 58       	subi	r30, 0x8F	; 143
    2284:	fe 4f       	sbci	r31, 0xFE	; 254
    2286:	40 81       	ld	r20, Z
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	c9 01       	movw	r24, r18
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	82 0f       	add	r24, r18
    2296:	93 1f       	adc	r25, r19
    2298:	fc 01       	movw	r30, r24
    229a:	ee 58       	subi	r30, 0x8E	; 142
    229c:	fe 4f       	sbci	r31, 0xFE	; 254
    229e:	90 81       	ld	r25, Z
    22a0:	84 2f       	mov	r24, r20
    22a2:	69 2f       	mov	r22, r25
    22a4:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	c9 01       	movw	r24, r18
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	82 0f       	add	r24, r18
    22b6:	93 1f       	adc	r25, r19
    22b8:	fc 01       	movw	r30, r24
    22ba:	ef 58       	subi	r30, 0x8F	; 143
    22bc:	fe 4f       	sbci	r31, 0xFE	; 254
    22be:	40 81       	ld	r20, Z
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	c9 01       	movw	r24, r18
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	82 0f       	add	r24, r18
    22ce:	93 1f       	adc	r25, r19
    22d0:	fc 01       	movw	r30, r24
    22d2:	ed 58       	subi	r30, 0x8D	; 141
    22d4:	fe 4f       	sbci	r31, 0xFE	; 254
    22d6:	90 81       	ld	r25, Z
    22d8:	84 2f       	mov	r24, r20
    22da:	69 2f       	mov	r22, r25
    22dc:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <enu_SetSenseLevel>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	8f 5f       	subi	r24, 0xFF	; 255
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	90 91 70 01 	lds	r25, 0x0170
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	89 17       	cp	r24, r25
    22ee:	08 f4       	brcc	.+2      	; 0x22f2 <EXTI_enu_Initialization+0x96>
    22f0:	bf cf       	rjmp	.-130    	; 0x2270 <EXTI_enu_Initialization+0x14>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    }
    
    Local_u8_ErrorFlag = ES_OK;
    22f2:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <EXTI_enu_ISC+0x6>
    2306:	0f 92       	push	r0
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	8a 83       	std	Y+2, r24	; 0x02
    230e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	6b 81       	ldd	r22, Y+3	; 0x03
    2318:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <enu_SetSenseLevel>
    231c:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    231e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	00 d0       	rcall	.+0      	; 0x2332 <EXTI_enu_INTMode+0x6>
    2332:	0f 92       	push	r0
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	8a 83       	std	Y+2, r24	; 0x02
    233a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	6b 81       	ldd	r22, Y+3	; 0x03
    2344:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <enu_SetMode>
    2348:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    234a:	89 81       	ldd	r24, Y+1	; 0x01
}
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	00 d0       	rcall	.+0      	; 0x235e <EXTI_enu_GetPIF+0x6>
    235e:	00 d0       	rcall	.+0      	; 0x2360 <EXTI_enu_GetPIF+0x8>
    2360:	00 d0       	rcall	.+0      	; 0x2362 <EXTI_enu_GetPIF+0xa>
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	8a 83       	std	Y+2, r24	; 0x02
    2368:	7c 83       	std	Y+4, r23	; 0x04
    236a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	d1 f1       	breq	.+116    	; 0x23ec <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	3e 83       	std	Y+6, r19	; 0x06
    2380:	2d 83       	std	Y+5, r18	; 0x05
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
    2384:	9e 81       	ldd	r25, Y+6	; 0x06
    2386:	81 30       	cpi	r24, 0x01	; 1
    2388:	91 05       	cpc	r25, r1
    238a:	b1 f0       	breq	.+44     	; 0x23b8 <EXTI_enu_GetPIF+0x60>
    238c:	2d 81       	ldd	r18, Y+5	; 0x05
    238e:	3e 81       	ldd	r19, Y+6	; 0x06
    2390:	22 30       	cpi	r18, 0x02	; 2
    2392:	31 05       	cpc	r19, r1
    2394:	e1 f0       	breq	.+56     	; 0x23ce <EXTI_enu_GetPIF+0x76>
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	21 f5       	brne	.+72     	; 0x23e6 <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
    239e:	ea e5       	ldi	r30, 0x5A	; 90
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	82 95       	swap	r24
    23a6:	86 95       	lsr	r24
    23a8:	86 95       	lsr	r24
    23aa:	83 70       	andi	r24, 0x03	; 3
    23ac:	81 70       	andi	r24, 0x01	; 1
    23ae:	eb 81       	ldd	r30, Y+3	; 0x03
    23b0:	fc 81       	ldd	r31, Y+4	; 0x04
    23b2:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    23b4:	19 82       	std	Y+1, r1	; 0x01
    23b6:	1c c0       	rjmp	.+56     	; 0x23f0 <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
    23b8:	ea e5       	ldi	r30, 0x5A	; 90
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	88 1f       	adc	r24, r24
    23c0:	88 27       	eor	r24, r24
    23c2:	88 1f       	adc	r24, r24
    23c4:	eb 81       	ldd	r30, Y+3	; 0x03
    23c6:	fc 81       	ldd	r31, Y+4	; 0x04
    23c8:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    23ca:	19 82       	std	Y+1, r1	; 0x01
    23cc:	11 c0       	rjmp	.+34     	; 0x23f0 <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
    23ce:	ea e5       	ldi	r30, 0x5A	; 90
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	82 95       	swap	r24
    23d6:	86 95       	lsr	r24
    23d8:	87 70       	andi	r24, 0x07	; 7
    23da:	81 70       	andi	r24, 0x01	; 1
    23dc:	eb 81       	ldd	r30, Y+3	; 0x03
    23de:	fc 81       	ldd	r31, Y+4	; 0x04
    23e0:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    23e2:	19 82       	std	Y+1, r1	; 0x01
    23e4:	05 c0       	rjmp	.+10     	; 0x23f0 <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    23e6:	82 e0       	ldi	r24, 0x02	; 2
    23e8:	89 83       	std	Y+1, r24	; 0x01
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    23ec:	83 e0       	ldi	r24, 0x03	; 3
    23ee:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f2:	26 96       	adiw	r28, 0x06	; 6
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <EXTI_enu_ClearINTFx>:

extern ErrorState_t EXTI_enu_ClearINTFx (u8 Copy_u8_INTNumber)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <EXTI_enu_ClearINTFx+0x6>
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, EXTI_HIGH);
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	0e 94 12 14 	call	0x2824	; 0x2824 <enu_SetFlagValue>
    241c:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    241e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void), void* Copy_pvid_Parameters)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	00 d0       	rcall	.+0      	; 0x2430 <EXTI_enu_SetCallBack+0x6>
    2430:	00 d0       	rcall	.+0      	; 0x2432 <EXTI_enu_SetCallBack+0x8>
    2432:	00 d0       	rcall	.+0      	; 0x2434 <EXTI_enu_SetCallBack+0xa>
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	8a 83       	std	Y+2, r24	; 0x02
    243a:	7c 83       	std	Y+4, r23	; 0x04
    243c:	6b 83       	std	Y+3, r22	; 0x03
    243e:	5e 83       	std	Y+6, r21	; 0x06
    2440:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	d1 f0       	breq	.+52     	; 0x2482 <EXTI_enu_SetCallBack+0x58>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	2b 81       	ldd	r18, Y+3	; 0x03
    2456:	3c 81       	ldd	r19, Y+4	; 0x04
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	fc 01       	movw	r30, r24
    245e:	e6 53       	subi	r30, 0x36	; 54
    2460:	fe 4f       	sbci	r31, 0xFE	; 254
    2462:	31 83       	std	Z+1, r19	; 0x01
    2464:	20 83       	st	Z, r18

        apvid_ISRParameters[Copy_u8_INTNumber] = Copy_pvid_Parameters;
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	fc 01       	movw	r30, r24
    2472:	e0 53       	subi	r30, 0x30	; 48
    2474:	fe 4f       	sbci	r31, 0xFE	; 254
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    247e:	19 82       	std	Y+1, r1	; 0x01
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <EXTI_enu_SetCallBack+0x5c>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2482:	82 e0       	ldi	r24, 0x02	; 2
    2484:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2486:	89 81       	ldd	r24, Y+1	; 0x01
}
    2488:	26 96       	adiw	r28, 0x06	; 6
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
    249a:	1f 92       	push	r1
    249c:	0f 92       	push	r0
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	0f 92       	push	r0
    24a2:	11 24       	eor	r1, r1
    24a4:	2f 93       	push	r18
    24a6:	3f 93       	push	r19
    24a8:	4f 93       	push	r20
    24aa:	5f 93       	push	r21
    24ac:	6f 93       	push	r22
    24ae:	7f 93       	push	r23
    24b0:	8f 93       	push	r24
    24b2:	9f 93       	push	r25
    24b4:	af 93       	push	r26
    24b6:	bf 93       	push	r27
    24b8:	ef 93       	push	r30
    24ba:	ff 93       	push	r31
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
    24c4:	80 91 ca 01 	lds	r24, 0x01CA
    24c8:	90 91 cb 01 	lds	r25, 0x01CB
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	49 f0       	breq	.+18     	; 0x24e2 <__vector_1+0x48>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
    24d0:	e0 91 ca 01 	lds	r30, 0x01CA
    24d4:	f0 91 cb 01 	lds	r31, 0x01CB
    24d8:	80 91 d0 01 	lds	r24, 0x01D0
    24dc:	90 91 d1 01 	lds	r25, 0x01D1
    24e0:	09 95       	icall
    }
}
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	ff 91       	pop	r31
    24e8:	ef 91       	pop	r30
    24ea:	bf 91       	pop	r27
    24ec:	af 91       	pop	r26
    24ee:	9f 91       	pop	r25
    24f0:	8f 91       	pop	r24
    24f2:	7f 91       	pop	r23
    24f4:	6f 91       	pop	r22
    24f6:	5f 91       	pop	r21
    24f8:	4f 91       	pop	r20
    24fa:	3f 91       	pop	r19
    24fc:	2f 91       	pop	r18
    24fe:	0f 90       	pop	r0
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	0f 90       	pop	r0
    2504:	1f 90       	pop	r1
    2506:	18 95       	reti

00002508 <__vector_2>:
//INT1
void __vector_2 (void)
{
    2508:	1f 92       	push	r1
    250a:	0f 92       	push	r0
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	0f 92       	push	r0
    2510:	11 24       	eor	r1, r1
    2512:	2f 93       	push	r18
    2514:	3f 93       	push	r19
    2516:	4f 93       	push	r20
    2518:	5f 93       	push	r21
    251a:	6f 93       	push	r22
    251c:	7f 93       	push	r23
    251e:	8f 93       	push	r24
    2520:	9f 93       	push	r25
    2522:	af 93       	push	r26
    2524:	bf 93       	push	r27
    2526:	ef 93       	push	r30
    2528:	ff 93       	push	r31
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
    2532:	80 91 cc 01 	lds	r24, 0x01CC
    2536:	90 91 cd 01 	lds	r25, 0x01CD
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	49 f0       	breq	.+18     	; 0x2550 <__vector_2+0x48>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
    253e:	e0 91 cc 01 	lds	r30, 0x01CC
    2542:	f0 91 cd 01 	lds	r31, 0x01CD
    2546:	80 91 d2 01 	lds	r24, 0x01D2
    254a:	90 91 d3 01 	lds	r25, 0x01D3
    254e:	09 95       	icall
    }
}
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	ff 91       	pop	r31
    2556:	ef 91       	pop	r30
    2558:	bf 91       	pop	r27
    255a:	af 91       	pop	r26
    255c:	9f 91       	pop	r25
    255e:	8f 91       	pop	r24
    2560:	7f 91       	pop	r23
    2562:	6f 91       	pop	r22
    2564:	5f 91       	pop	r21
    2566:	4f 91       	pop	r20
    2568:	3f 91       	pop	r19
    256a:	2f 91       	pop	r18
    256c:	0f 90       	pop	r0
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	0f 90       	pop	r0
    2572:	1f 90       	pop	r1
    2574:	18 95       	reti

00002576 <__vector_3>:
//INT2
void __vector_3 (void)
{
    2576:	1f 92       	push	r1
    2578:	0f 92       	push	r0
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	0f 92       	push	r0
    257e:	11 24       	eor	r1, r1
    2580:	2f 93       	push	r18
    2582:	3f 93       	push	r19
    2584:	4f 93       	push	r20
    2586:	5f 93       	push	r21
    2588:	6f 93       	push	r22
    258a:	7f 93       	push	r23
    258c:	8f 93       	push	r24
    258e:	9f 93       	push	r25
    2590:	af 93       	push	r26
    2592:	bf 93       	push	r27
    2594:	ef 93       	push	r30
    2596:	ff 93       	push	r31
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
    25a0:	80 91 ce 01 	lds	r24, 0x01CE
    25a4:	90 91 cf 01 	lds	r25, 0x01CF
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	39 f0       	breq	.+14     	; 0x25ba <__vector_3+0x44>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
    25ac:	e0 91 ce 01 	lds	r30, 0x01CE
    25b0:	f0 91 cf 01 	lds	r31, 0x01CF
    25b4:	82 e0       	ldi	r24, 0x02	; 2
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	09 95       	icall
    }
    
}
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	ff 91       	pop	r31
    25c0:	ef 91       	pop	r30
    25c2:	bf 91       	pop	r27
    25c4:	af 91       	pop	r26
    25c6:	9f 91       	pop	r25
    25c8:	8f 91       	pop	r24
    25ca:	7f 91       	pop	r23
    25cc:	6f 91       	pop	r22
    25ce:	5f 91       	pop	r21
    25d0:	4f 91       	pop	r20
    25d2:	3f 91       	pop	r19
    25d4:	2f 91       	pop	r18
    25d6:	0f 90       	pop	r0
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	0f 90       	pop	r0
    25dc:	1f 90       	pop	r1
    25de:	18 95       	reti

000025e0 <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <enu_SetMode+0x6>
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <enu_SetMode+0x8>
    25e8:	0f 92       	push	r0
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	8a 83       	std	Y+2, r24	; 0x02
    25f0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	3d 83       	std	Y+5, r19	; 0x05
    25fe:	2c 83       	std	Y+4, r18	; 0x04
    2600:	8c 81       	ldd	r24, Y+4	; 0x04
    2602:	9d 81       	ldd	r25, Y+5	; 0x05
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	91 05       	cpc	r25, r1
    2608:	29 f1       	breq	.+74     	; 0x2654 <enu_SetMode+0x74>
    260a:	2c 81       	ldd	r18, Y+4	; 0x04
    260c:	3d 81       	ldd	r19, Y+5	; 0x05
    260e:	22 30       	cpi	r18, 0x02	; 2
    2610:	31 05       	cpc	r19, r1
    2612:	d9 f1       	breq	.+118    	; 0x268a <enu_SetMode+0xaa>
    2614:	8c 81       	ldd	r24, Y+4	; 0x04
    2616:	9d 81       	ldd	r25, Y+5	; 0x05
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	09 f0       	breq	.+2      	; 0x261e <enu_SetMode+0x3e>
    261c:	51 c0       	rjmp	.+162    	; 0x26c0 <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	49 f4       	brne	.+18     	; 0x2636 <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
    2624:	ab e5       	ldi	r26, 0x5B	; 91
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	eb e5       	ldi	r30, 0x5B	; 91
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	80 64       	ori	r24, 0x40	; 64
    2630:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    2632:	19 82       	std	Y+1, r1	; 0x01
    2634:	47 c0       	rjmp	.+142    	; 0x26c4 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	88 23       	and	r24, r24
    263a:	49 f4       	brne	.+18     	; 0x264e <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
    263c:	ab e5       	ldi	r26, 0x5B	; 91
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	eb e5       	ldi	r30, 0x5B	; 91
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	8f 7b       	andi	r24, 0xBF	; 191
    2648:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    264a:	19 82       	std	Y+1, r1	; 0x01
    264c:	3b c0       	rjmp	.+118    	; 0x26c4 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	38 c0       	rjmp	.+112    	; 0x26c4 <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	49 f4       	brne	.+18     	; 0x266c <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
    265a:	ab e5       	ldi	r26, 0x5B	; 91
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	eb e5       	ldi	r30, 0x5B	; 91
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	80 68       	ori	r24, 0x80	; 128
    2666:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2668:	19 82       	std	Y+1, r1	; 0x01
    266a:	2c c0       	rjmp	.+88     	; 0x26c4 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	88 23       	and	r24, r24
    2670:	49 f4       	brne	.+18     	; 0x2684 <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
    2672:	ab e5       	ldi	r26, 0x5B	; 91
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	eb e5       	ldi	r30, 0x5B	; 91
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8f 77       	andi	r24, 0x7F	; 127
    267e:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2680:	19 82       	std	Y+1, r1	; 0x01
    2682:	20 c0       	rjmp	.+64     	; 0x26c4 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2684:	82 e0       	ldi	r24, 0x02	; 2
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	1d c0       	rjmp	.+58     	; 0x26c4 <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	81 30       	cpi	r24, 0x01	; 1
    268e:	49 f4       	brne	.+18     	; 0x26a2 <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
    2690:	ab e5       	ldi	r26, 0x5B	; 91
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	eb e5       	ldi	r30, 0x5B	; 91
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	80 62       	ori	r24, 0x20	; 32
    269c:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    269e:	19 82       	std	Y+1, r1	; 0x01
    26a0:	11 c0       	rjmp	.+34     	; 0x26c4 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	88 23       	and	r24, r24
    26a6:	49 f4       	brne	.+18     	; 0x26ba <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
    26a8:	ab e5       	ldi	r26, 0x5B	; 91
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	eb e5       	ldi	r30, 0x5B	; 91
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	8f 7d       	andi	r24, 0xDF	; 223
    26b4:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    26b6:	19 82       	std	Y+1, r1	; 0x01
    26b8:	05 c0       	rjmp	.+10     	; 0x26c4 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	00 d0       	rcall	.+0      	; 0x26dc <enu_SetSenseLevel+0x6>
    26dc:	00 d0       	rcall	.+0      	; 0x26de <enu_SetSenseLevel+0x8>
    26de:	0f 92       	push	r0
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	8a 83       	std	Y+2, r24	; 0x02
    26e6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	3d 83       	std	Y+5, r19	; 0x05
    26f4:	2c 83       	std	Y+4, r18	; 0x04
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	9d 81       	ldd	r25, Y+5	; 0x05
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	91 05       	cpc	r25, r1
    26fe:	e9 f1       	breq	.+122    	; 0x277a <enu_SetSenseLevel+0xa4>
    2700:	2c 81       	ldd	r18, Y+4	; 0x04
    2702:	3d 81       	ldd	r19, Y+5	; 0x05
    2704:	22 30       	cpi	r18, 0x02	; 2
    2706:	31 05       	cpc	r19, r1
    2708:	09 f4       	brne	.+2      	; 0x270c <enu_SetSenseLevel+0x36>
    270a:	69 c0       	rjmp	.+210    	; 0x27de <enu_SetSenseLevel+0x108>
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	9d 81       	ldd	r25, Y+5	; 0x05
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	09 f0       	breq	.+2      	; 0x2716 <enu_SetSenseLevel+0x40>
    2714:	7c c0       	rjmp	.+248    	; 0x280e <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
    2716:	a5 e5       	ldi	r26, 0x55	; 85
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e5 e5       	ldi	r30, 0x55	; 85
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	8c 7f       	andi	r24, 0xFC	; 252
    2722:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	88 23       	and	r24, r24
    2728:	11 f4       	brne	.+4      	; 0x272e <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    272a:	19 82       	std	Y+1, r1	; 0x01
    272c:	72 c0       	rjmp	.+228    	; 0x2812 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	49 f4       	brne	.+18     	; 0x2746 <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
    2734:	a5 e5       	ldi	r26, 0x55	; 85
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e5 e5       	ldi	r30, 0x55	; 85
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	81 60       	ori	r24, 0x01	; 1
    2740:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2742:	19 82       	std	Y+1, r1	; 0x01
    2744:	66 c0       	rjmp	.+204    	; 0x2812 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	82 30       	cpi	r24, 0x02	; 2
    274a:	41 f4       	brne	.+16     	; 0x275c <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
    274c:	a5 e5       	ldi	r26, 0x55	; 85
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e5 e5       	ldi	r30, 0x55	; 85
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	82 60       	ori	r24, 0x02	; 2
    2758:	8c 93       	st	X, r24
    275a:	5b c0       	rjmp	.+182    	; 0x2812 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	83 30       	cpi	r24, 0x03	; 3
    2760:	49 f4       	brne	.+18     	; 0x2774 <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
    2762:	a5 e5       	ldi	r26, 0x55	; 85
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e5 e5       	ldi	r30, 0x55	; 85
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	83 60       	ori	r24, 0x03	; 3
    276e:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2770:	19 82       	std	Y+1, r1	; 0x01
    2772:	4f c0       	rjmp	.+158    	; 0x2812 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	89 83       	std	Y+1, r24	; 0x01
    2778:	4c c0       	rjmp	.+152    	; 0x2812 <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
    277a:	a5 e5       	ldi	r26, 0x55	; 85
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e5 e5       	ldi	r30, 0x55	; 85
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	83 7f       	andi	r24, 0xF3	; 243
    2786:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    2788:	8b 81       	ldd	r24, Y+3	; 0x03
    278a:	88 23       	and	r24, r24
    278c:	11 f4       	brne	.+4      	; 0x2792 <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    278e:	19 82       	std	Y+1, r1	; 0x01
    2790:	40 c0       	rjmp	.+128    	; 0x2812 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	81 30       	cpi	r24, 0x01	; 1
    2796:	49 f4       	brne	.+18     	; 0x27aa <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
    2798:	a5 e5       	ldi	r26, 0x55	; 85
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e5 e5       	ldi	r30, 0x55	; 85
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	84 60       	ori	r24, 0x04	; 4
    27a4:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    27a6:	19 82       	std	Y+1, r1	; 0x01
    27a8:	34 c0       	rjmp	.+104    	; 0x2812 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	82 30       	cpi	r24, 0x02	; 2
    27ae:	41 f4       	brne	.+16     	; 0x27c0 <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
    27b0:	a5 e5       	ldi	r26, 0x55	; 85
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e5 e5       	ldi	r30, 0x55	; 85
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	88 60       	ori	r24, 0x08	; 8
    27bc:	8c 93       	st	X, r24
    27be:	29 c0       	rjmp	.+82     	; 0x2812 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	83 30       	cpi	r24, 0x03	; 3
    27c4:	49 f4       	brne	.+18     	; 0x27d8 <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
    27c6:	a5 e5       	ldi	r26, 0x55	; 85
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e5 e5       	ldi	r30, 0x55	; 85
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	8c 60       	ori	r24, 0x0C	; 12
    27d2:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    27d4:	19 82       	std	Y+1, r1	; 0x01
    27d6:	1d c0       	rjmp	.+58     	; 0x2812 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    27d8:	82 e0       	ldi	r24, 0x02	; 2
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	1a c0       	rjmp	.+52     	; 0x2812 <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	82 30       	cpi	r24, 0x02	; 2
    27e2:	49 f4       	brne	.+18     	; 0x27f6 <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
    27e4:	a4 e5       	ldi	r26, 0x54	; 84
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e4 e5       	ldi	r30, 0x54	; 84
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	8f 7b       	andi	r24, 0xBF	; 191
    27f0:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    27f2:	19 82       	std	Y+1, r1	; 0x01
    27f4:	0e c0       	rjmp	.+28     	; 0x2812 <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	83 30       	cpi	r24, 0x03	; 3
    27fa:	59 f4       	brne	.+22     	; 0x2812 <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
    27fc:	a4 e5       	ldi	r26, 0x54	; 84
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e4 e5       	ldi	r30, 0x54	; 84
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	80 64       	ori	r24, 0x40	; 64
    2808:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    280a:	19 82       	std	Y+1, r1	; 0x01
    280c:	02 c0       	rjmp	.+4      	; 0x2812 <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
    2812:	89 81       	ldd	r24, Y+1	; 0x01
}
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <enu_SetFlagValue+0x6>
    282a:	00 d0       	rcall	.+0      	; 0x282c <enu_SetFlagValue+0x8>
    282c:	0f 92       	push	r0
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	8a 83       	std	Y+2, r24	; 0x02
    2834:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	28 2f       	mov	r18, r24
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	3d 83       	std	Y+5, r19	; 0x05
    2842:	2c 83       	std	Y+4, r18	; 0x04
    2844:	8c 81       	ldd	r24, Y+4	; 0x04
    2846:	9d 81       	ldd	r25, Y+5	; 0x05
    2848:	81 30       	cpi	r24, 0x01	; 1
    284a:	91 05       	cpc	r25, r1
    284c:	29 f1       	breq	.+74     	; 0x2898 <enu_SetFlagValue+0x74>
    284e:	2c 81       	ldd	r18, Y+4	; 0x04
    2850:	3d 81       	ldd	r19, Y+5	; 0x05
    2852:	22 30       	cpi	r18, 0x02	; 2
    2854:	31 05       	cpc	r19, r1
    2856:	d9 f1       	breq	.+118    	; 0x28ce <enu_SetFlagValue+0xaa>
    2858:	8c 81       	ldd	r24, Y+4	; 0x04
    285a:	9d 81       	ldd	r25, Y+5	; 0x05
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	09 f0       	breq	.+2      	; 0x2862 <enu_SetFlagValue+0x3e>
    2860:	51 c0       	rjmp	.+162    	; 0x2904 <enu_SetFlagValue+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	49 f4       	brne	.+18     	; 0x287a <enu_SetFlagValue+0x56>
            {
                GIFR |= ( 1 << GIFR_INTF0);
    2868:	aa e5       	ldi	r26, 0x5A	; 90
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	ea e5       	ldi	r30, 0x5A	; 90
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	80 64       	ori	r24, 0x40	; 64
    2874:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    2876:	19 82       	std	Y+1, r1	; 0x01
    2878:	47 c0       	rjmp	.+142    	; 0x2908 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	88 23       	and	r24, r24
    287e:	49 f4       	brne	.+18     	; 0x2892 <enu_SetFlagValue+0x6e>
            {
                GIFR &= ~( 1 << GIFR_INTF0);
    2880:	aa e5       	ldi	r26, 0x5A	; 90
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	ea e5       	ldi	r30, 0x5A	; 90
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	8f 7b       	andi	r24, 0xBF	; 191
    288c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    288e:	19 82       	std	Y+1, r1	; 0x01
    2890:	3b c0       	rjmp	.+118    	; 0x2908 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	38 c0       	rjmp	.+112    	; 0x2908 <enu_SetFlagValue+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	81 30       	cpi	r24, 0x01	; 1
    289c:	49 f4       	brne	.+18     	; 0x28b0 <enu_SetFlagValue+0x8c>
            {
                GIFR |= ( 1 << GIFR_INTF1);
    289e:	aa e5       	ldi	r26, 0x5A	; 90
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	ea e5       	ldi	r30, 0x5A	; 90
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	80 68       	ori	r24, 0x80	; 128
    28aa:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    28ac:	19 82       	std	Y+1, r1	; 0x01
    28ae:	2c c0       	rjmp	.+88     	; 0x2908 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	88 23       	and	r24, r24
    28b4:	49 f4       	brne	.+18     	; 0x28c8 <enu_SetFlagValue+0xa4>
            {
                GIFR &= ~( 1 << GIFR_INTF1);
    28b6:	aa e5       	ldi	r26, 0x5A	; 90
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	ea e5       	ldi	r30, 0x5A	; 90
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	8f 77       	andi	r24, 0x7F	; 127
    28c2:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    28c4:	19 82       	std	Y+1, r1	; 0x01
    28c6:	20 c0       	rjmp	.+64     	; 0x2908 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	1d c0       	rjmp	.+58     	; 0x2908 <enu_SetFlagValue+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	81 30       	cpi	r24, 0x01	; 1
    28d2:	49 f4       	brne	.+18     	; 0x28e6 <enu_SetFlagValue+0xc2>
            {
                GIFR |= ( 1 << GIFR_INTF2);
    28d4:	aa e5       	ldi	r26, 0x5A	; 90
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	ea e5       	ldi	r30, 0x5A	; 90
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	80 62       	ori	r24, 0x20	; 32
    28e0:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    28e2:	19 82       	std	Y+1, r1	; 0x01
    28e4:	11 c0       	rjmp	.+34     	; 0x2908 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	88 23       	and	r24, r24
    28ea:	49 f4       	brne	.+18     	; 0x28fe <enu_SetFlagValue+0xda>
            {
                GIFR &= ~( 1 << GIFR_INTF2);
    28ec:	aa e5       	ldi	r26, 0x5A	; 90
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	ea e5       	ldi	r30, 0x5A	; 90
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	8f 7d       	andi	r24, 0xDF	; 223
    28f8:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    28fa:	19 82       	std	Y+1, r1	; 0x01
    28fc:	05 c0       	rjmp	.+10     	; 0x2908 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    28fe:	82 e0       	ldi	r24, 0x02	; 2
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <enu_SetFlagValue+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	0f 92       	push	r0
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    2928:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    292a:	89 81       	ldd	r24, Y+1	; 0x01
}
    292c:	0f 90       	pop	r0
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <DIO_enu_SetPinDiretion+0x6>
    293a:	00 d0       	rcall	.+0      	; 0x293c <DIO_enu_SetPinDiretion+0x8>
    293c:	00 d0       	rcall	.+0      	; 0x293e <DIO_enu_SetPinDiretion+0xa>
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	8a 83       	std	Y+2, r24	; 0x02
    2944:	6b 83       	std	Y+3, r22	; 0x03
    2946:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	84 30       	cpi	r24, 0x04	; 4
    2950:	08 f0       	brcs	.+2      	; 0x2954 <DIO_enu_SetPinDiretion+0x20>
    2952:	d0 c0       	rjmp	.+416    	; 0x2af4 <DIO_enu_SetPinDiretion+0x1c0>
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	88 30       	cpi	r24, 0x08	; 8
    2958:	08 f0       	brcs	.+2      	; 0x295c <DIO_enu_SetPinDiretion+0x28>
    295a:	cc c0       	rjmp	.+408    	; 0x2af4 <DIO_enu_SetPinDiretion+0x1c0>
    295c:	8c 81       	ldd	r24, Y+4	; 0x04
    295e:	82 30       	cpi	r24, 0x02	; 2
    2960:	08 f0       	brcs	.+2      	; 0x2964 <DIO_enu_SetPinDiretion+0x30>
    2962:	c8 c0       	rjmp	.+400    	; 0x2af4 <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	3e 83       	std	Y+6, r19	; 0x06
    296c:	2d 83       	std	Y+5, r18	; 0x05
    296e:	6d 81       	ldd	r22, Y+5	; 0x05
    2970:	7e 81       	ldd	r23, Y+6	; 0x06
    2972:	61 30       	cpi	r22, 0x01	; 1
    2974:	71 05       	cpc	r23, r1
    2976:	09 f4       	brne	.+2      	; 0x297a <DIO_enu_SetPinDiretion+0x46>
    2978:	41 c0       	rjmp	.+130    	; 0x29fc <DIO_enu_SetPinDiretion+0xc8>
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	82 30       	cpi	r24, 0x02	; 2
    2980:	91 05       	cpc	r25, r1
    2982:	34 f4       	brge	.+12     	; 0x2990 <DIO_enu_SetPinDiretion+0x5c>
    2984:	2d 81       	ldd	r18, Y+5	; 0x05
    2986:	3e 81       	ldd	r19, Y+6	; 0x06
    2988:	21 15       	cp	r18, r1
    298a:	31 05       	cpc	r19, r1
    298c:	71 f0       	breq	.+28     	; 0x29aa <DIO_enu_SetPinDiretion+0x76>
    298e:	b0 c0       	rjmp	.+352    	; 0x2af0 <DIO_enu_SetPinDiretion+0x1bc>
    2990:	6d 81       	ldd	r22, Y+5	; 0x05
    2992:	7e 81       	ldd	r23, Y+6	; 0x06
    2994:	62 30       	cpi	r22, 0x02	; 2
    2996:	71 05       	cpc	r23, r1
    2998:	09 f4       	brne	.+2      	; 0x299c <DIO_enu_SetPinDiretion+0x68>
    299a:	59 c0       	rjmp	.+178    	; 0x2a4e <DIO_enu_SetPinDiretion+0x11a>
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	83 30       	cpi	r24, 0x03	; 3
    29a2:	91 05       	cpc	r25, r1
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <DIO_enu_SetPinDiretion+0x74>
    29a6:	7c c0       	rjmp	.+248    	; 0x2aa0 <DIO_enu_SetPinDiretion+0x16c>
    29a8:	a3 c0       	rjmp	.+326    	; 0x2af0 <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    29aa:	aa e3       	ldi	r26, 0x3A	; 58
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	ea e3       	ldi	r30, 0x3A	; 58
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	48 2f       	mov	r20, r24
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <DIO_enu_SetPinDiretion+0x92>
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	2a 95       	dec	r18
    29c8:	e2 f7       	brpl	.-8      	; 0x29c2 <DIO_enu_SetPinDiretion+0x8e>
    29ca:	80 95       	com	r24
    29cc:	84 23       	and	r24, r20
    29ce:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    29d0:	aa e3       	ldi	r26, 0x3A	; 58
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	ea e3       	ldi	r30, 0x3A	; 58
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	48 2f       	mov	r20, r24
    29dc:	8c 81       	ldd	r24, Y+4	; 0x04
    29de:	28 2f       	mov	r18, r24
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	88 2f       	mov	r24, r24
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	b9 01       	movw	r22, r18
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <DIO_enu_SetPinDiretion+0xbc>
    29ec:	66 0f       	add	r22, r22
    29ee:	77 1f       	adc	r23, r23
    29f0:	8a 95       	dec	r24
    29f2:	e2 f7       	brpl	.-8      	; 0x29ec <DIO_enu_SetPinDiretion+0xb8>
    29f4:	cb 01       	movw	r24, r22
    29f6:	84 2b       	or	r24, r20
    29f8:	8c 93       	st	X, r24
    29fa:	7a c0       	rjmp	.+244    	; 0x2af0 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    29fc:	a7 e3       	ldi	r26, 0x37	; 55
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e7 e3       	ldi	r30, 0x37	; 55
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	48 2f       	mov	r20, r24
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <DIO_enu_SetPinDiretion+0xe4>
    2a14:	88 0f       	add	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	2a 95       	dec	r18
    2a1a:	e2 f7       	brpl	.-8      	; 0x2a14 <DIO_enu_SetPinDiretion+0xe0>
    2a1c:	80 95       	com	r24
    2a1e:	84 23       	and	r24, r20
    2a20:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    2a22:	a7 e3       	ldi	r26, 0x37	; 55
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	e7 e3       	ldi	r30, 0x37	; 55
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	48 2f       	mov	r20, r24
    2a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	88 2f       	mov	r24, r24
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	b9 01       	movw	r22, r18
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <DIO_enu_SetPinDiretion+0x10e>
    2a3e:	66 0f       	add	r22, r22
    2a40:	77 1f       	adc	r23, r23
    2a42:	8a 95       	dec	r24
    2a44:	e2 f7       	brpl	.-8      	; 0x2a3e <DIO_enu_SetPinDiretion+0x10a>
    2a46:	cb 01       	movw	r24, r22
    2a48:	84 2b       	or	r24, r20
    2a4a:	8c 93       	st	X, r24
    2a4c:	51 c0       	rjmp	.+162    	; 0x2af0 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    2a4e:	a4 e3       	ldi	r26, 0x34	; 52
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e4 e3       	ldi	r30, 0x34	; 52
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	48 2f       	mov	r20, r24
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	02 c0       	rjmp	.+4      	; 0x2a6a <DIO_enu_SetPinDiretion+0x136>
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	2a 95       	dec	r18
    2a6c:	e2 f7       	brpl	.-8      	; 0x2a66 <DIO_enu_SetPinDiretion+0x132>
    2a6e:	80 95       	com	r24
    2a70:	84 23       	and	r24, r20
    2a72:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    2a74:	a4 e3       	ldi	r26, 0x34	; 52
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e4 e3       	ldi	r30, 0x34	; 52
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	48 2f       	mov	r20, r24
    2a80:	8c 81       	ldd	r24, Y+4	; 0x04
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	88 2f       	mov	r24, r24
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	b9 01       	movw	r22, r18
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <DIO_enu_SetPinDiretion+0x160>
    2a90:	66 0f       	add	r22, r22
    2a92:	77 1f       	adc	r23, r23
    2a94:	8a 95       	dec	r24
    2a96:	e2 f7       	brpl	.-8      	; 0x2a90 <DIO_enu_SetPinDiretion+0x15c>
    2a98:	cb 01       	movw	r24, r22
    2a9a:	84 2b       	or	r24, r20
    2a9c:	8c 93       	st	X, r24
    2a9e:	28 c0       	rjmp	.+80     	; 0x2af0 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    2aa0:	a1 e3       	ldi	r26, 0x31	; 49
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e1 e3       	ldi	r30, 0x31	; 49
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	48 2f       	mov	r20, r24
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <DIO_enu_SetPinDiretion+0x188>
    2ab8:	88 0f       	add	r24, r24
    2aba:	99 1f       	adc	r25, r25
    2abc:	2a 95       	dec	r18
    2abe:	e2 f7       	brpl	.-8      	; 0x2ab8 <DIO_enu_SetPinDiretion+0x184>
    2ac0:	80 95       	com	r24
    2ac2:	84 23       	and	r24, r20
    2ac4:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    2ac6:	a1 e3       	ldi	r26, 0x31	; 49
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e1 e3       	ldi	r30, 0x31	; 49
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	48 2f       	mov	r20, r24
    2ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad4:	28 2f       	mov	r18, r24
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	88 2f       	mov	r24, r24
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	b9 01       	movw	r22, r18
    2ae0:	02 c0       	rjmp	.+4      	; 0x2ae6 <DIO_enu_SetPinDiretion+0x1b2>
    2ae2:	66 0f       	add	r22, r22
    2ae4:	77 1f       	adc	r23, r23
    2ae6:	8a 95       	dec	r24
    2ae8:	e2 f7       	brpl	.-8      	; 0x2ae2 <DIO_enu_SetPinDiretion+0x1ae>
    2aea:	cb 01       	movw	r24, r22
    2aec:	84 2b       	or	r24, r20
    2aee:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2af0:	19 82       	std	Y+1, r1	; 0x01
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2afa:	26 96       	adiw	r28, 0x06	; 6
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	00 d0       	rcall	.+0      	; 0x2b12 <DIO_enu_SetPinState+0x6>
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <DIO_enu_SetPinState+0x8>
    2b14:	00 d0       	rcall	.+0      	; 0x2b16 <DIO_enu_SetPinState+0xa>
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	8a 83       	std	Y+2, r24	; 0x02
    2b1c:	6b 83       	std	Y+3, r22	; 0x03
    2b1e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	84 30       	cpi	r24, 0x04	; 4
    2b28:	08 f0       	brcs	.+2      	; 0x2b2c <DIO_enu_SetPinState+0x20>
    2b2a:	d0 c0       	rjmp	.+416    	; 0x2ccc <DIO_enu_SetPinState+0x1c0>
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	88 30       	cpi	r24, 0x08	; 8
    2b30:	08 f0       	brcs	.+2      	; 0x2b34 <DIO_enu_SetPinState+0x28>
    2b32:	cc c0       	rjmp	.+408    	; 0x2ccc <DIO_enu_SetPinState+0x1c0>
    2b34:	8c 81       	ldd	r24, Y+4	; 0x04
    2b36:	82 30       	cpi	r24, 0x02	; 2
    2b38:	08 f0       	brcs	.+2      	; 0x2b3c <DIO_enu_SetPinState+0x30>
    2b3a:	c8 c0       	rjmp	.+400    	; 0x2ccc <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	3e 83       	std	Y+6, r19	; 0x06
    2b44:	2d 83       	std	Y+5, r18	; 0x05
    2b46:	6d 81       	ldd	r22, Y+5	; 0x05
    2b48:	7e 81       	ldd	r23, Y+6	; 0x06
    2b4a:	61 30       	cpi	r22, 0x01	; 1
    2b4c:	71 05       	cpc	r23, r1
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <DIO_enu_SetPinState+0x46>
    2b50:	41 c0       	rjmp	.+130    	; 0x2bd4 <DIO_enu_SetPinState+0xc8>
    2b52:	8d 81       	ldd	r24, Y+5	; 0x05
    2b54:	9e 81       	ldd	r25, Y+6	; 0x06
    2b56:	82 30       	cpi	r24, 0x02	; 2
    2b58:	91 05       	cpc	r25, r1
    2b5a:	34 f4       	brge	.+12     	; 0x2b68 <DIO_enu_SetPinState+0x5c>
    2b5c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b5e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b60:	21 15       	cp	r18, r1
    2b62:	31 05       	cpc	r19, r1
    2b64:	71 f0       	breq	.+28     	; 0x2b82 <DIO_enu_SetPinState+0x76>
    2b66:	b0 c0       	rjmp	.+352    	; 0x2cc8 <DIO_enu_SetPinState+0x1bc>
    2b68:	6d 81       	ldd	r22, Y+5	; 0x05
    2b6a:	7e 81       	ldd	r23, Y+6	; 0x06
    2b6c:	62 30       	cpi	r22, 0x02	; 2
    2b6e:	71 05       	cpc	r23, r1
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <DIO_enu_SetPinState+0x68>
    2b72:	59 c0       	rjmp	.+178    	; 0x2c26 <DIO_enu_SetPinState+0x11a>
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	9e 81       	ldd	r25, Y+6	; 0x06
    2b78:	83 30       	cpi	r24, 0x03	; 3
    2b7a:	91 05       	cpc	r25, r1
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <DIO_enu_SetPinState+0x74>
    2b7e:	7c c0       	rjmp	.+248    	; 0x2c78 <DIO_enu_SetPinState+0x16c>
    2b80:	a3 c0       	rjmp	.+326    	; 0x2cc8 <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    2b82:	ab e3       	ldi	r26, 0x3B	; 59
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	eb e3       	ldi	r30, 0x3B	; 59
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	48 2f       	mov	r20, r24
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <DIO_enu_SetPinState+0x92>
    2b9a:	88 0f       	add	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	2a 95       	dec	r18
    2ba0:	e2 f7       	brpl	.-8      	; 0x2b9a <DIO_enu_SetPinState+0x8e>
    2ba2:	80 95       	com	r24
    2ba4:	84 23       	and	r24, r20
    2ba6:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2ba8:	ab e3       	ldi	r26, 0x3B	; 59
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	eb e3       	ldi	r30, 0x3B	; 59
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	48 2f       	mov	r20, r24
    2bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	b9 01       	movw	r22, r18
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <DIO_enu_SetPinState+0xbc>
    2bc4:	66 0f       	add	r22, r22
    2bc6:	77 1f       	adc	r23, r23
    2bc8:	8a 95       	dec	r24
    2bca:	e2 f7       	brpl	.-8      	; 0x2bc4 <DIO_enu_SetPinState+0xb8>
    2bcc:	cb 01       	movw	r24, r22
    2bce:	84 2b       	or	r24, r20
    2bd0:	8c 93       	st	X, r24
    2bd2:	7a c0       	rjmp	.+244    	; 0x2cc8 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    2bd4:	a8 e3       	ldi	r26, 0x38	; 56
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	e8 e3       	ldi	r30, 0x38	; 56
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	48 2f       	mov	r20, r24
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <DIO_enu_SetPinState+0xe4>
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	2a 95       	dec	r18
    2bf2:	e2 f7       	brpl	.-8      	; 0x2bec <DIO_enu_SetPinState+0xe0>
    2bf4:	80 95       	com	r24
    2bf6:	84 23       	and	r24, r20
    2bf8:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2bfa:	a8 e3       	ldi	r26, 0x38	; 56
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e8 e3       	ldi	r30, 0x38	; 56
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	48 2f       	mov	r20, r24
    2c06:	8c 81       	ldd	r24, Y+4	; 0x04
    2c08:	28 2f       	mov	r18, r24
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	88 2f       	mov	r24, r24
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	b9 01       	movw	r22, r18
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <DIO_enu_SetPinState+0x10e>
    2c16:	66 0f       	add	r22, r22
    2c18:	77 1f       	adc	r23, r23
    2c1a:	8a 95       	dec	r24
    2c1c:	e2 f7       	brpl	.-8      	; 0x2c16 <DIO_enu_SetPinState+0x10a>
    2c1e:	cb 01       	movw	r24, r22
    2c20:	84 2b       	or	r24, r20
    2c22:	8c 93       	st	X, r24
    2c24:	51 c0       	rjmp	.+162    	; 0x2cc8 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    2c26:	a5 e3       	ldi	r26, 0x35	; 53
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	e5 e3       	ldi	r30, 0x35	; 53
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	48 2f       	mov	r20, r24
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	02 c0       	rjmp	.+4      	; 0x2c42 <DIO_enu_SetPinState+0x136>
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	2a 95       	dec	r18
    2c44:	e2 f7       	brpl	.-8      	; 0x2c3e <DIO_enu_SetPinState+0x132>
    2c46:	80 95       	com	r24
    2c48:	84 23       	and	r24, r20
    2c4a:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2c4c:	a5 e3       	ldi	r26, 0x35	; 53
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e5 e3       	ldi	r30, 0x35	; 53
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	48 2f       	mov	r20, r24
    2c58:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5a:	28 2f       	mov	r18, r24
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c60:	88 2f       	mov	r24, r24
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	b9 01       	movw	r22, r18
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <DIO_enu_SetPinState+0x160>
    2c68:	66 0f       	add	r22, r22
    2c6a:	77 1f       	adc	r23, r23
    2c6c:	8a 95       	dec	r24
    2c6e:	e2 f7       	brpl	.-8      	; 0x2c68 <DIO_enu_SetPinState+0x15c>
    2c70:	cb 01       	movw	r24, r22
    2c72:	84 2b       	or	r24, r20
    2c74:	8c 93       	st	X, r24
    2c76:	28 c0       	rjmp	.+80     	; 0x2cc8 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    2c78:	a2 e3       	ldi	r26, 0x32	; 50
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	e2 e3       	ldi	r30, 0x32	; 50
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	48 2f       	mov	r20, r24
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	02 c0       	rjmp	.+4      	; 0x2c94 <DIO_enu_SetPinState+0x188>
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	2a 95       	dec	r18
    2c96:	e2 f7       	brpl	.-8      	; 0x2c90 <DIO_enu_SetPinState+0x184>
    2c98:	80 95       	com	r24
    2c9a:	84 23       	and	r24, r20
    2c9c:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2c9e:	a2 e3       	ldi	r26, 0x32	; 50
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e2 e3       	ldi	r30, 0x32	; 50
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	48 2f       	mov	r20, r24
    2caa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	88 2f       	mov	r24, r24
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	b9 01       	movw	r22, r18
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <DIO_enu_SetPinState+0x1b2>
    2cba:	66 0f       	add	r22, r22
    2cbc:	77 1f       	adc	r23, r23
    2cbe:	8a 95       	dec	r24
    2cc0:	e2 f7       	brpl	.-8      	; 0x2cba <DIO_enu_SetPinState+0x1ae>
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	84 2b       	or	r24, r20
    2cc6:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2cc8:	19 82       	std	Y+1, r1	; 0x01
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2ccc:	82 e0       	ldi	r24, 0x02	; 2
    2cce:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cd2:	26 96       	adiw	r28, 0x06	; 6
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	00 d0       	rcall	.+0      	; 0x2cea <DIO_enu_SetPinValue+0x6>
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <DIO_enu_SetPinValue+0x8>
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <DIO_enu_SetPinValue+0xa>
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	8a 83       	std	Y+2, r24	; 0x02
    2cf4:	6b 83       	std	Y+3, r22	; 0x03
    2cf6:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	84 30       	cpi	r24, 0x04	; 4
    2d00:	08 f0       	brcs	.+2      	; 0x2d04 <DIO_enu_SetPinValue+0x20>
    2d02:	db c0       	rjmp	.+438    	; 0x2eba <DIO_enu_SetPinValue+0x1d6>
    2d04:	8b 81       	ldd	r24, Y+3	; 0x03
    2d06:	88 30       	cpi	r24, 0x08	; 8
    2d08:	08 f0       	brcs	.+2      	; 0x2d0c <DIO_enu_SetPinValue+0x28>
    2d0a:	d7 c0       	rjmp	.+430    	; 0x2eba <DIO_enu_SetPinValue+0x1d6>
    2d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0e:	82 30       	cpi	r24, 0x02	; 2
    2d10:	08 f0       	brcs	.+2      	; 0x2d14 <DIO_enu_SetPinValue+0x30>
    2d12:	d3 c0       	rjmp	.+422    	; 0x2eba <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	3e 83       	std	Y+6, r19	; 0x06
    2d1c:	2d 83       	std	Y+5, r18	; 0x05
    2d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d20:	9e 81       	ldd	r25, Y+6	; 0x06
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	91 05       	cpc	r25, r1
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <DIO_enu_SetPinValue+0x46>
    2d28:	43 c0       	rjmp	.+134    	; 0x2db0 <DIO_enu_SetPinValue+0xcc>
    2d2a:	2d 81       	ldd	r18, Y+5	; 0x05
    2d2c:	3e 81       	ldd	r19, Y+6	; 0x06
    2d2e:	22 30       	cpi	r18, 0x02	; 2
    2d30:	31 05       	cpc	r19, r1
    2d32:	2c f4       	brge	.+10     	; 0x2d3e <DIO_enu_SetPinValue+0x5a>
    2d34:	8d 81       	ldd	r24, Y+5	; 0x05
    2d36:	9e 81       	ldd	r25, Y+6	; 0x06
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	71 f0       	breq	.+28     	; 0x2d58 <DIO_enu_SetPinValue+0x74>
    2d3c:	bc c0       	rjmp	.+376    	; 0x2eb6 <DIO_enu_SetPinValue+0x1d2>
    2d3e:	2d 81       	ldd	r18, Y+5	; 0x05
    2d40:	3e 81       	ldd	r19, Y+6	; 0x06
    2d42:	22 30       	cpi	r18, 0x02	; 2
    2d44:	31 05       	cpc	r19, r1
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <DIO_enu_SetPinValue+0x66>
    2d48:	5f c0       	rjmp	.+190    	; 0x2e08 <DIO_enu_SetPinValue+0x124>
    2d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4e:	83 30       	cpi	r24, 0x03	; 3
    2d50:	91 05       	cpc	r25, r1
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <DIO_enu_SetPinValue+0x72>
    2d54:	85 c0       	rjmp	.+266    	; 0x2e60 <DIO_enu_SetPinValue+0x17c>
    2d56:	af c0       	rjmp	.+350    	; 0x2eb6 <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    2d58:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	a1 f4       	brne	.+40     	; 0x2d86 <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    2d5e:	ab e3       	ldi	r26, 0x3B	; 59
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	eb e3       	ldi	r30, 0x3B	; 59
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	48 2f       	mov	r20, r24
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	02 2e       	mov	r0, r18
    2d76:	02 c0       	rjmp	.+4      	; 0x2d7c <DIO_enu_SetPinValue+0x98>
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	0a 94       	dec	r0
    2d7e:	e2 f7       	brpl	.-8      	; 0x2d78 <DIO_enu_SetPinValue+0x94>
    2d80:	84 2b       	or	r24, r20
    2d82:	8c 93       	st	X, r24
    2d84:	98 c0       	rjmp	.+304    	; 0x2eb6 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    2d86:	ab e3       	ldi	r26, 0x3B	; 59
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	eb e3       	ldi	r30, 0x3B	; 59
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	48 2f       	mov	r20, r24
    2d92:	8b 81       	ldd	r24, Y+3	; 0x03
    2d94:	28 2f       	mov	r18, r24
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	02 2e       	mov	r0, r18
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <DIO_enu_SetPinValue+0xc0>
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	0a 94       	dec	r0
    2da6:	e2 f7       	brpl	.-8      	; 0x2da0 <DIO_enu_SetPinValue+0xbc>
    2da8:	80 95       	com	r24
    2daa:	84 23       	and	r24, r20
    2dac:	8c 93       	st	X, r24
    2dae:	83 c0       	rjmp	.+262    	; 0x2eb6 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    2db0:	8c 81       	ldd	r24, Y+4	; 0x04
    2db2:	81 30       	cpi	r24, 0x01	; 1
    2db4:	a1 f4       	brne	.+40     	; 0x2dde <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    2db6:	a8 e3       	ldi	r26, 0x38	; 56
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	e8 e3       	ldi	r30, 0x38	; 56
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	48 2f       	mov	r20, r24
    2dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	02 2e       	mov	r0, r18
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <DIO_enu_SetPinValue+0xf0>
    2dd0:	88 0f       	add	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	0a 94       	dec	r0
    2dd6:	e2 f7       	brpl	.-8      	; 0x2dd0 <DIO_enu_SetPinValue+0xec>
    2dd8:	84 2b       	or	r24, r20
    2dda:	8c 93       	st	X, r24
    2ddc:	6c c0       	rjmp	.+216    	; 0x2eb6 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    2dde:	a8 e3       	ldi	r26, 0x38	; 56
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	e8 e3       	ldi	r30, 0x38	; 56
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	48 2f       	mov	r20, r24
    2dea:	8b 81       	ldd	r24, Y+3	; 0x03
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	02 2e       	mov	r0, r18
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <DIO_enu_SetPinValue+0x118>
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	0a 94       	dec	r0
    2dfe:	e2 f7       	brpl	.-8      	; 0x2df8 <DIO_enu_SetPinValue+0x114>
    2e00:	80 95       	com	r24
    2e02:	84 23       	and	r24, r20
    2e04:	8c 93       	st	X, r24
    2e06:	57 c0       	rjmp	.+174    	; 0x2eb6 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    2e08:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0a:	81 30       	cpi	r24, 0x01	; 1
    2e0c:	a1 f4       	brne	.+40     	; 0x2e36 <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    2e0e:	a5 e3       	ldi	r26, 0x35	; 53
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	e5 e3       	ldi	r30, 0x35	; 53
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	48 2f       	mov	r20, r24
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	02 2e       	mov	r0, r18
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <DIO_enu_SetPinValue+0x148>
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	0a 94       	dec	r0
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <DIO_enu_SetPinValue+0x144>
    2e30:	84 2b       	or	r24, r20
    2e32:	8c 93       	st	X, r24
    2e34:	40 c0       	rjmp	.+128    	; 0x2eb6 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    2e36:	a5 e3       	ldi	r26, 0x35	; 53
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	e5 e3       	ldi	r30, 0x35	; 53
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	48 2f       	mov	r20, r24
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	28 2f       	mov	r18, r24
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	02 2e       	mov	r0, r18
    2e4e:	02 c0       	rjmp	.+4      	; 0x2e54 <DIO_enu_SetPinValue+0x170>
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	0a 94       	dec	r0
    2e56:	e2 f7       	brpl	.-8      	; 0x2e50 <DIO_enu_SetPinValue+0x16c>
    2e58:	80 95       	com	r24
    2e5a:	84 23       	and	r24, r20
    2e5c:	8c 93       	st	X, r24
    2e5e:	2b c0       	rjmp	.+86     	; 0x2eb6 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    2e60:	8c 81       	ldd	r24, Y+4	; 0x04
    2e62:	81 30       	cpi	r24, 0x01	; 1
    2e64:	a1 f4       	brne	.+40     	; 0x2e8e <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    2e66:	a2 e3       	ldi	r26, 0x32	; 50
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e2 e3       	ldi	r30, 0x32	; 50
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	48 2f       	mov	r20, r24
    2e72:	8b 81       	ldd	r24, Y+3	; 0x03
    2e74:	28 2f       	mov	r18, r24
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	02 2e       	mov	r0, r18
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <DIO_enu_SetPinValue+0x1a0>
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	0a 94       	dec	r0
    2e86:	e2 f7       	brpl	.-8      	; 0x2e80 <DIO_enu_SetPinValue+0x19c>
    2e88:	84 2b       	or	r24, r20
    2e8a:	8c 93       	st	X, r24
    2e8c:	14 c0       	rjmp	.+40     	; 0x2eb6 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    2e8e:	a2 e3       	ldi	r26, 0x32	; 50
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	e2 e3       	ldi	r30, 0x32	; 50
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	48 2f       	mov	r20, r24
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	02 2e       	mov	r0, r18
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <DIO_enu_SetPinValue+0x1c8>
    2ea8:	88 0f       	add	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	0a 94       	dec	r0
    2eae:	e2 f7       	brpl	.-8      	; 0x2ea8 <DIO_enu_SetPinValue+0x1c4>
    2eb0:	80 95       	com	r24
    2eb2:	84 23       	and	r24, r20
    2eb4:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2eb6:	19 82       	std	Y+1, r1	; 0x01
    2eb8:	02 c0       	rjmp	.+4      	; 0x2ebe <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2eba:	82 e0       	ldi	r24, 0x02	; 2
    2ebc:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ec0:	26 96       	adiw	r28, 0x06	; 6
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	f8 94       	cli
    2ec6:	de bf       	out	0x3e, r29	; 62
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	cd bf       	out	0x3d, r28	; 61
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <DIO_enu_TogglePinValue+0x6>
    2ed8:	00 d0       	rcall	.+0      	; 0x2eda <DIO_enu_TogglePinValue+0x8>
    2eda:	0f 92       	push	r0
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	8a 83       	std	Y+2, r24	; 0x02
    2ee2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	84 30       	cpi	r24, 0x04	; 4
    2eec:	08 f0       	brcs	.+2      	; 0x2ef0 <DIO_enu_TogglePinValue+0x1e>
    2eee:	73 c0       	rjmp	.+230    	; 0x2fd6 <DIO_enu_TogglePinValue+0x104>
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	88 30       	cpi	r24, 0x08	; 8
    2ef4:	08 f0       	brcs	.+2      	; 0x2ef8 <DIO_enu_TogglePinValue+0x26>
    2ef6:	6f c0       	rjmp	.+222    	; 0x2fd6 <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    2ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    2efa:	28 2f       	mov	r18, r24
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	3d 83       	std	Y+5, r19	; 0x05
    2f00:	2c 83       	std	Y+4, r18	; 0x04
    2f02:	8c 81       	ldd	r24, Y+4	; 0x04
    2f04:	9d 81       	ldd	r25, Y+5	; 0x05
    2f06:	81 30       	cpi	r24, 0x01	; 1
    2f08:	91 05       	cpc	r25, r1
    2f0a:	49 f1       	breq	.+82     	; 0x2f5e <DIO_enu_TogglePinValue+0x8c>
    2f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f10:	22 30       	cpi	r18, 0x02	; 2
    2f12:	31 05       	cpc	r19, r1
    2f14:	2c f4       	brge	.+10     	; 0x2f20 <DIO_enu_TogglePinValue+0x4e>
    2f16:	8c 81       	ldd	r24, Y+4	; 0x04
    2f18:	9d 81       	ldd	r25, Y+5	; 0x05
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	61 f0       	breq	.+24     	; 0x2f36 <DIO_enu_TogglePinValue+0x64>
    2f1e:	5a c0       	rjmp	.+180    	; 0x2fd4 <DIO_enu_TogglePinValue+0x102>
    2f20:	2c 81       	ldd	r18, Y+4	; 0x04
    2f22:	3d 81       	ldd	r19, Y+5	; 0x05
    2f24:	22 30       	cpi	r18, 0x02	; 2
    2f26:	31 05       	cpc	r19, r1
    2f28:	71 f1       	breq	.+92     	; 0x2f86 <DIO_enu_TogglePinValue+0xb4>
    2f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f2e:	83 30       	cpi	r24, 0x03	; 3
    2f30:	91 05       	cpc	r25, r1
    2f32:	e9 f1       	breq	.+122    	; 0x2fae <DIO_enu_TogglePinValue+0xdc>
    2f34:	4f c0       	rjmp	.+158    	; 0x2fd4 <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    2f36:	ab e3       	ldi	r26, 0x3B	; 59
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	eb e3       	ldi	r30, 0x3B	; 59
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	80 81       	ld	r24, Z
    2f40:	48 2f       	mov	r20, r24
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	02 2e       	mov	r0, r18
    2f4e:	02 c0       	rjmp	.+4      	; 0x2f54 <DIO_enu_TogglePinValue+0x82>
    2f50:	88 0f       	add	r24, r24
    2f52:	99 1f       	adc	r25, r25
    2f54:	0a 94       	dec	r0
    2f56:	e2 f7       	brpl	.-8      	; 0x2f50 <DIO_enu_TogglePinValue+0x7e>
    2f58:	84 27       	eor	r24, r20
    2f5a:	8c 93       	st	X, r24
    2f5c:	3b c0       	rjmp	.+118    	; 0x2fd4 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    2f5e:	a8 e3       	ldi	r26, 0x38	; 56
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	e8 e3       	ldi	r30, 0x38	; 56
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	48 2f       	mov	r20, r24
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	02 2e       	mov	r0, r18
    2f76:	02 c0       	rjmp	.+4      	; 0x2f7c <DIO_enu_TogglePinValue+0xaa>
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	0a 94       	dec	r0
    2f7e:	e2 f7       	brpl	.-8      	; 0x2f78 <DIO_enu_TogglePinValue+0xa6>
    2f80:	84 27       	eor	r24, r20
    2f82:	8c 93       	st	X, r24
    2f84:	27 c0       	rjmp	.+78     	; 0x2fd4 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    2f86:	a5 e3       	ldi	r26, 0x35	; 53
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e5 e3       	ldi	r30, 0x35	; 53
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	48 2f       	mov	r20, r24
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	28 2f       	mov	r18, r24
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	02 2e       	mov	r0, r18
    2f9e:	02 c0       	rjmp	.+4      	; 0x2fa4 <DIO_enu_TogglePinValue+0xd2>
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	0a 94       	dec	r0
    2fa6:	e2 f7       	brpl	.-8      	; 0x2fa0 <DIO_enu_TogglePinValue+0xce>
    2fa8:	84 27       	eor	r24, r20
    2faa:	8c 93       	st	X, r24
    2fac:	13 c0       	rjmp	.+38     	; 0x2fd4 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    2fae:	a2 e3       	ldi	r26, 0x32	; 50
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	e2 e3       	ldi	r30, 0x32	; 50
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	48 2f       	mov	r20, r24
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	02 2e       	mov	r0, r18
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <DIO_enu_TogglePinValue+0xfa>
    2fc8:	88 0f       	add	r24, r24
    2fca:	99 1f       	adc	r25, r25
    2fcc:	0a 94       	dec	r0
    2fce:	e2 f7       	brpl	.-8      	; 0x2fc8 <DIO_enu_TogglePinValue+0xf6>
    2fd0:	84 27       	eor	r24, r20
    2fd2:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2fd4:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	27 97       	sbiw	r28, 0x07	; 7
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	8a 83       	std	Y+2, r24	; 0x02
    2ffe:	6b 83       	std	Y+3, r22	; 0x03
    3000:	5d 83       	std	Y+5, r21	; 0x05
    3002:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    3008:	8c 81       	ldd	r24, Y+4	; 0x04
    300a:	9d 81       	ldd	r25, Y+5	; 0x05
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	09 f4       	brne	.+2      	; 0x3012 <DIO_enu_GetPinValue+0x2a>
    3010:	7d c0       	rjmp	.+250    	; 0x310c <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	84 30       	cpi	r24, 0x04	; 4
    3016:	08 f0       	brcs	.+2      	; 0x301a <DIO_enu_GetPinValue+0x32>
    3018:	76 c0       	rjmp	.+236    	; 0x3106 <DIO_enu_GetPinValue+0x11e>
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	88 30       	cpi	r24, 0x08	; 8
    301e:	08 f0       	brcs	.+2      	; 0x3022 <DIO_enu_GetPinValue+0x3a>
    3020:	72 c0       	rjmp	.+228    	; 0x3106 <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	28 2f       	mov	r18, r24
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	3f 83       	std	Y+7, r19	; 0x07
    302a:	2e 83       	std	Y+6, r18	; 0x06
    302c:	4e 81       	ldd	r20, Y+6	; 0x06
    302e:	5f 81       	ldd	r21, Y+7	; 0x07
    3030:	41 30       	cpi	r20, 0x01	; 1
    3032:	51 05       	cpc	r21, r1
    3034:	59 f1       	breq	.+86     	; 0x308c <DIO_enu_GetPinValue+0xa4>
    3036:	8e 81       	ldd	r24, Y+6	; 0x06
    3038:	9f 81       	ldd	r25, Y+7	; 0x07
    303a:	82 30       	cpi	r24, 0x02	; 2
    303c:	91 05       	cpc	r25, r1
    303e:	34 f4       	brge	.+12     	; 0x304c <DIO_enu_GetPinValue+0x64>
    3040:	2e 81       	ldd	r18, Y+6	; 0x06
    3042:	3f 81       	ldd	r19, Y+7	; 0x07
    3044:	21 15       	cp	r18, r1
    3046:	31 05       	cpc	r19, r1
    3048:	69 f0       	breq	.+26     	; 0x3064 <DIO_enu_GetPinValue+0x7c>
    304a:	5b c0       	rjmp	.+182    	; 0x3102 <DIO_enu_GetPinValue+0x11a>
    304c:	4e 81       	ldd	r20, Y+6	; 0x06
    304e:	5f 81       	ldd	r21, Y+7	; 0x07
    3050:	42 30       	cpi	r20, 0x02	; 2
    3052:	51 05       	cpc	r21, r1
    3054:	79 f1       	breq	.+94     	; 0x30b4 <DIO_enu_GetPinValue+0xcc>
    3056:	8e 81       	ldd	r24, Y+6	; 0x06
    3058:	9f 81       	ldd	r25, Y+7	; 0x07
    305a:	83 30       	cpi	r24, 0x03	; 3
    305c:	91 05       	cpc	r25, r1
    305e:	09 f4       	brne	.+2      	; 0x3062 <DIO_enu_GetPinValue+0x7a>
    3060:	3d c0       	rjmp	.+122    	; 0x30dc <DIO_enu_GetPinValue+0xf4>
    3062:	4f c0       	rjmp	.+158    	; 0x3102 <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    3064:	e9 e3       	ldi	r30, 0x39	; 57
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	8b 81       	ldd	r24, Y+3	; 0x03
    3070:	88 2f       	mov	r24, r24
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	a9 01       	movw	r20, r18
    3076:	02 c0       	rjmp	.+4      	; 0x307c <DIO_enu_GetPinValue+0x94>
    3078:	55 95       	asr	r21
    307a:	47 95       	ror	r20
    307c:	8a 95       	dec	r24
    307e:	e2 f7       	brpl	.-8      	; 0x3078 <DIO_enu_GetPinValue+0x90>
    3080:	ca 01       	movw	r24, r20
    3082:	81 70       	andi	r24, 0x01	; 1
    3084:	ec 81       	ldd	r30, Y+4	; 0x04
    3086:	fd 81       	ldd	r31, Y+5	; 0x05
    3088:	80 83       	st	Z, r24
    308a:	3b c0       	rjmp	.+118    	; 0x3102 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    308c:	e6 e3       	ldi	r30, 0x36	; 54
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	28 2f       	mov	r18, r24
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	88 2f       	mov	r24, r24
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a9 01       	movw	r20, r18
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <DIO_enu_GetPinValue+0xbc>
    30a0:	55 95       	asr	r21
    30a2:	47 95       	ror	r20
    30a4:	8a 95       	dec	r24
    30a6:	e2 f7       	brpl	.-8      	; 0x30a0 <DIO_enu_GetPinValue+0xb8>
    30a8:	ca 01       	movw	r24, r20
    30aa:	81 70       	andi	r24, 0x01	; 1
    30ac:	ec 81       	ldd	r30, Y+4	; 0x04
    30ae:	fd 81       	ldd	r31, Y+5	; 0x05
    30b0:	80 83       	st	Z, r24
    30b2:	27 c0       	rjmp	.+78     	; 0x3102 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    30b4:	e3 e3       	ldi	r30, 0x33	; 51
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	28 2f       	mov	r18, r24
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	8b 81       	ldd	r24, Y+3	; 0x03
    30c0:	88 2f       	mov	r24, r24
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	a9 01       	movw	r20, r18
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <DIO_enu_GetPinValue+0xe4>
    30c8:	55 95       	asr	r21
    30ca:	47 95       	ror	r20
    30cc:	8a 95       	dec	r24
    30ce:	e2 f7       	brpl	.-8      	; 0x30c8 <DIO_enu_GetPinValue+0xe0>
    30d0:	ca 01       	movw	r24, r20
    30d2:	81 70       	andi	r24, 0x01	; 1
    30d4:	ec 81       	ldd	r30, Y+4	; 0x04
    30d6:	fd 81       	ldd	r31, Y+5	; 0x05
    30d8:	80 83       	st	Z, r24
    30da:	13 c0       	rjmp	.+38     	; 0x3102 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    30dc:	e0 e3       	ldi	r30, 0x30	; 48
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	28 2f       	mov	r18, r24
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	8b 81       	ldd	r24, Y+3	; 0x03
    30e8:	88 2f       	mov	r24, r24
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	a9 01       	movw	r20, r18
    30ee:	02 c0       	rjmp	.+4      	; 0x30f4 <DIO_enu_GetPinValue+0x10c>
    30f0:	55 95       	asr	r21
    30f2:	47 95       	ror	r20
    30f4:	8a 95       	dec	r24
    30f6:	e2 f7       	brpl	.-8      	; 0x30f0 <DIO_enu_GetPinValue+0x108>
    30f8:	ca 01       	movw	r24, r20
    30fa:	81 70       	andi	r24, 0x01	; 1
    30fc:	ec 81       	ldd	r30, Y+4	; 0x04
    30fe:	fd 81       	ldd	r31, Y+5	; 0x05
    3100:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    3102:	19 82       	std	Y+1, r1	; 0x01
    3104:	05 c0       	rjmp	.+10     	; 0x3110 <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3106:	82 e0       	ldi	r24, 0x02	; 2
    3108:	89 83       	std	Y+1, r24	; 0x01
    310a:	02 c0       	rjmp	.+4      	; 0x3110 <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    310c:	83 e0       	ldi	r24, 0x03	; 3
    310e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3110:	89 81       	ldd	r24, Y+1	; 0x01
}
    3112:	27 96       	adiw	r28, 0x07	; 7
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	08 95       	ret

00003124 <ADC_enu_Initialization>:
static void* pvid_ISRParameters = NULL;

//APIs implementation

extern ErrorState_t ADC_enu_Initialization(void)
{
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	0f 92       	push	r0
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	89 83       	std	Y+1, r24	; 0x01

    //Bits contain 00
    ADMUX &= ~(3 << ADMUX_REFS0 );
    3132:	a7 e2       	ldi	r26, 0x27	; 39
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	e7 e2       	ldi	r30, 0x27	; 39
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	8f 73       	andi	r24, 0x3F	; 63
    313e:	8c 93       	st	X, r24
        //bITS ALREADY CONTAIN 00  
    
    #elif ADC_V_REFERENCE_SOURCE == ADC_AVCC
       
        //Bits contain 01
        ADMUX |= (1 < ADMUX_REFS0);
    3140:	a7 e2       	ldi	r26, 0x27	; 39
    3142:	b0 e0       	ldi	r27, 0x00	; 0
    3144:	e7 e2       	ldi	r30, 0x27	; 39
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	81 60       	ori	r24, 0x01	; 1
    314c:	8c 93       	st	X, r24


    //Handling Data adjustment direction
    #if  ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED
        //Setting ADLAR bit
        ADMUX |= ( 1 << ADMUX_ADLAR);
    314e:	a7 e2       	ldi	r26, 0x27	; 39
    3150:	b0 e0       	ldi	r27, 0x00	; 0
    3152:	e7 e2       	ldi	r30, 0x27	; 39
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 81       	ld	r24, Z
    3158:	80 62       	ori	r24, 0x20	; 32
    315a:	8c 93       	st	X, r24
        ADCSRA &= ~( 1 << ADCSRA_ADATE);

    #elif  ADC_TRIGGER_SOURCE >= ADC_FREE_RUNNING &&  ADC_TRIGGER_SOURCE <= ADC_TIMER1_CAPTURE_EVENT

        //Clearing ADTS bits
        SFIOR &= (0X1F);
    315c:	a0 e5       	ldi	r26, 0x50	; 80
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	e0 e5       	ldi	r30, 0x50	; 80
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	8f 71       	andi	r24, 0x1F	; 31
    3168:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (ADC_TRIGGER_SOURCE << SFIOR_ADTS0); 
    316a:	a0 e5       	ldi	r26, 0x50	; 80
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	e0 e5       	ldi	r30, 0x50	; 80
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	8c 93       	st	X, r24
        
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    3176:	a6 e2       	ldi	r26, 0x26	; 38
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	e6 e2       	ldi	r30, 0x26	; 38
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	80 62       	ori	r24, 0x20	; 32
    3182:	8c 93       	st	X, r24
    #endif


    //Handling Interrupt Event Status (PIE)
    #if ADC_INT_EVENT_STATUS == ADC_INT_ENABLE
        ADCSRA |= ( 1 << ADCSRA_ADIE); //Bit contains 1 
    3184:	a6 e2       	ldi	r26, 0x26	; 38
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e6 e2       	ldi	r30, 0x26	; 38
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	88 60       	ori	r24, 0x08	; 8
    3190:	8c 93       	st	X, r24
    #endif


    //Handling ADC clock speed
    //Clearing PS bits
    ADCSRA &= (0xF8);
    3192:	a6 e2       	ldi	r26, 0x26	; 38
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	e6 e2       	ldi	r30, 0x26	; 38
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	88 7f       	andi	r24, 0xF8	; 248
    319e:	8c 93       	st	X, r24
    #if ADC_PS_FACTOR >= ADC_PS_2 && ADC_PS_FACTOR <= ADC_PS_128 
        
        ADCSRA |= (ADC_PS_FACTOR << ADCSRA_ADPS0);
    31a0:	a6 e2       	ldi	r26, 0x26	; 38
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	e6 e2       	ldi	r30, 0x26	; 38
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	86 60       	ori	r24, 0x06	; 6
    31ac:	8c 93       	st	X, r24

    #endif


    //Handling input channels
    ADMUX &= (0xE0); //Clearing bits
    31ae:	a7 e2       	ldi	r26, 0x27	; 39
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	e7 e2       	ldi	r30, 0x27	; 39
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	80 7e       	andi	r24, 0xE0	; 224
    31ba:	8c 93       	st	X, r24
    #if ADC_INPUT_CHANNEL >= ADC_ADC0 && ADC_INPUT_CHANNEL <= ADC_V_GND
        //Channel Selection
        ADMUX |= (ADC_INPUT_CHANNEL << ADMUX_MUX0);
    31bc:	a7 e2       	ldi	r26, 0x27	; 39
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	e7 e2       	ldi	r30, 0x27	; 39
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	8c 93       	st	X, r24

    #endif


    // /Powering ADC
    ADCSRA |= (1 << ADCSRA_ADEN );
    31c8:	a6 e2       	ldi	r26, 0x26	; 38
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	e6 e2       	ldi	r30, 0x26	; 38
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	80 68       	ori	r24, 0x80	; 128
    31d4:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    31d6:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag; 
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    31da:	0f 90       	pop	r0
    31dc:	cf 91       	pop	r28
    31de:	df 91       	pop	r29
    31e0:	08 95       	ret

000031e2 <ADC_enu_ReadPolling>:

extern ErrorState_t ADC_enu_ReadPolling(u8 Copy_u8_Channel, u16* Copy_pu16_Result)
{
    31e2:	df 93       	push	r29
    31e4:	cf 93       	push	r28
    31e6:	00 d0       	rcall	.+0      	; 0x31e8 <ADC_enu_ReadPolling+0x6>
    31e8:	00 d0       	rcall	.+0      	; 0x31ea <ADC_enu_ReadPolling+0x8>
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	8a 83       	std	Y+2, r24	; 0x02
    31f0:	7c 83       	std	Y+4, r23	; 0x04
    31f2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8_Channel >= ADC_ADC0) && (Copy_u8_Channel <= ADC_V_GND))
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	80 32       	cpi	r24, 0x20	; 32
    31fc:	08 f0       	brcs	.+2      	; 0x3200 <ADC_enu_ReadPolling+0x1e>
    31fe:	50 c0       	rjmp	.+160    	; 0x32a0 <ADC_enu_ReadPolling+0xbe>
    {
        //Clearing PIF, Assuming that the ADC is in Polling mode.
        ADCSRA |= (1 << ADCSRA_ADIF);
    3200:	a6 e2       	ldi	r26, 0x26	; 38
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e6 e2       	ldi	r30, 0x26	; 38
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	80 61       	ori	r24, 0x10	; 16
    320c:	8c 93       	st	X, r24
        
        //Clearing MUX it
        ADMUX &= (0xE0);
    320e:	a7 e2       	ldi	r26, 0x27	; 39
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	e7 e2       	ldi	r30, 0x27	; 39
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	80 7e       	andi	r24, 0xE0	; 224
    321a:	8c 93       	st	X, r24

        //Choosing channel
        ADMUX |= (Copy_u8_Channel << ADMUX_MUX0);
    321c:	a7 e2       	ldi	r26, 0x27	; 39
    321e:	b0 e0       	ldi	r27, 0x00	; 0
    3220:	e7 e2       	ldi	r30, 0x27	; 39
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	90 81       	ld	r25, Z
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	89 2b       	or	r24, r25
    322a:	8c 93       	st	X, r24
       
        //Setting ADSC to start a conversion
        ADCSRA |= (1 << ADCSRA_ADSC);
    322c:	a6 e2       	ldi	r26, 0x26	; 38
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	e6 e2       	ldi	r30, 0x26	; 38
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	80 81       	ld	r24, Z
    3236:	80 64       	ori	r24, 0x40	; 64
    3238:	8c 93       	st	X, r24

        //Waiting for ADC to raise ADIF
        while (((ADCSRA >> ADCSRA_ADIF) & 1) == False);
    323a:	e6 e2       	ldi	r30, 0x26	; 38
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	82 95       	swap	r24
    3242:	8f 70       	andi	r24, 0x0F	; 15
    3244:	88 2f       	mov	r24, r24
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	81 70       	andi	r24, 0x01	; 1
    324a:	90 70       	andi	r25, 0x00	; 0
    324c:	00 97       	sbiw	r24, 0x00	; 0
    324e:	a9 f3       	breq	.-22     	; 0x323a <ADC_enu_ReadPolling+0x58>

        
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    3250:	e4 e2       	ldi	r30, 0x24	; 36
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	82 95       	swap	r24
    3258:	86 95       	lsr	r24
    325a:	86 95       	lsr	r24
    325c:	83 70       	andi	r24, 0x03	; 3
    325e:	88 2f       	mov	r24, r24
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	eb 81       	ldd	r30, Y+3	; 0x03
    3264:	fc 81       	ldd	r31, Y+4	; 0x04
    3266:	91 83       	std	Z+1, r25	; 0x01
    3268:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    326a:	eb 81       	ldd	r30, Y+3	; 0x03
    326c:	fc 81       	ldd	r31, Y+4	; 0x04
    326e:	20 81       	ld	r18, Z
    3270:	31 81       	ldd	r19, Z+1	; 0x01
    3272:	e5 e2       	ldi	r30, 0x25	; 37
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	80 81       	ld	r24, Z
    3278:	88 2f       	mov	r24, r24
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	88 0f       	add	r24, r24
    327e:	99 1f       	adc	r25, r25
    3280:	88 0f       	add	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	82 2b       	or	r24, r18
    3286:	93 2b       	or	r25, r19
    3288:	eb 81       	ldd	r30, Y+3	; 0x03
    328a:	fc 81       	ldd	r31, Y+4	; 0x04
    328c:	91 83       	std	Z+1, r25	; 0x01
    328e:	80 83       	st	Z, r24
            *Copy_pu16_Result |= (u16)ADCH << 8;

        #endif
   
        //Clearing PIF
        ADCSRA |= (1 << ADCSRA_ADIF);
    3290:	a6 e2       	ldi	r26, 0x26	; 38
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	e6 e2       	ldi	r30, 0x26	; 38
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	80 61       	ori	r24, 0x10	; 16
    329c:	8c 93       	st	X, r24
    329e:	02 c0       	rjmp	.+4      	; 0x32a4 <ADC_enu_ReadPolling+0xc2>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    32a0:	82 e0       	ldi	r24, 0x02	; 2
    32a2:	89 83       	std	Y+1, r24	; 0x01
    }


    Local_u8_ErrorFlag = ES_OK;
    32a4:	19 82       	std	Y+1, r1	; 0x01
    

    


    return Local_u8_ErrorFlag;
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	08 95       	ret

000032b6 <ADC_enu_StartConversion>:

extern ErrorState_t ADC_enu_StartConversion(void)
{
    32b6:	df 93       	push	r29
    32b8:	cf 93       	push	r28
    32ba:	0f 92       	push	r0
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 <<ADCSRA_ADSC);
    32c4:	a6 e2       	ldi	r26, 0x26	; 38
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	e6 e2       	ldi	r30, 0x26	; 38
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	80 64       	ori	r24, 0x40	; 64
    32d0:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    32d2:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    32d6:	0f 90       	pop	r0
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <ADC_enu_SetTriggerringSource>:

extern ErrorState_t ADC_enu_SetTriggerringSource(u8 Copy_u8_TriggeringSource)
{
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	00 d0       	rcall	.+0      	; 0x32e4 <ADC_enu_SetTriggerringSource+0x6>
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
    32e8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_u8_TriggeringSource == ADC_SINGLE_CONVERSION)
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	88 30       	cpi	r24, 0x08	; 8
    32f2:	49 f4       	brne	.+18     	; 0x3306 <ADC_enu_SetTriggerringSource+0x28>
    {
        //Clearing ADATE bit
        ADCSRA &= ~(1 << ADCSRA_ADATE);
    32f4:	a6 e2       	ldi	r26, 0x26	; 38
    32f6:	b0 e0       	ldi	r27, 0x00	; 0
    32f8:	e6 e2       	ldi	r30, 0x26	; 38
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	8f 7d       	andi	r24, 0xDF	; 223
    3300:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    3302:	19 82       	std	Y+1, r1	; 0x01
    3304:	28 c0       	rjmp	.+80     	; 0x3356 <ADC_enu_SetTriggerringSource+0x78>
    }
    else if((Copy_u8_TriggeringSource >= ADC_FREE_RUNNING) && (Copy_u8_TriggeringSource <= ADC_TIMER1_CAPTURE_EVENT))
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	88 30       	cpi	r24, 0x08	; 8
    330a:	18 f5       	brcc	.+70     	; 0x3352 <ADC_enu_SetTriggerringSource+0x74>
    {
        //Clearing ADTS bits
        SFIOR &= ~ (1 << SFIOR_ADTS0);
    330c:	a0 e5       	ldi	r26, 0x50	; 80
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	e0 e5       	ldi	r30, 0x50	; 80
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	8f 7d       	andi	r24, 0xDF	; 223
    3318:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (Copy_u8_TriggeringSource << SFIOR_ADTS0);
    331a:	a0 e5       	ldi	r26, 0x50	; 80
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	e0 e5       	ldi	r30, 0x50	; 80
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	28 2f       	mov	r18, r24
    3326:	8a 81       	ldd	r24, Y+2	; 0x02
    3328:	88 2f       	mov	r24, r24
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	88 0f       	add	r24, r24
    332e:	99 1f       	adc	r25, r25
    3330:	82 95       	swap	r24
    3332:	92 95       	swap	r25
    3334:	90 7f       	andi	r25, 0xF0	; 240
    3336:	98 27       	eor	r25, r24
    3338:	80 7f       	andi	r24, 0xF0	; 240
    333a:	98 27       	eor	r25, r24
    333c:	82 2b       	or	r24, r18
    333e:	8c 93       	st	X, r24

        //Setting ADATE bit
        ADCSRA |= (1 << ADCSRA_ADATE);
    3340:	a6 e2       	ldi	r26, 0x26	; 38
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	e6 e2       	ldi	r30, 0x26	; 38
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	80 62       	ori	r24, 0x20	; 32
    334c:	8c 93       	st	X, r24

        Local_u8_ErrorFlag =ES_OK;
    334e:	19 82       	std	Y+1, r1	; 0x01
    3350:	02 c0       	rjmp	.+4      	; 0x3356 <ADC_enu_SetTriggerringSource+0x78>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3352:	82 e0       	ldi	r24, 0x02	; 2
    3354:	89 83       	std	Y+1, r24	; 0x01
    }
        
        

    return Local_u8_ErrorFlag;
    3356:	89 81       	ldd	r24, Y+1	; 0x01
}
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <ADC_enu_ChangePrescalerFactor>:

extern ErrorState_t ADC_enu_ChangePrescalerFactor(u8 Copy_u8_DivisonFactor)
{
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	00 d0       	rcall	.+0      	; 0x3368 <ADC_enu_ChangePrescalerFactor+0x6>
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_DivisonFactor >= ADC_PS_2) && (Copy_u8_DivisonFactor <= ADC_PS_128))
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	88 23       	and	r24, r24
    3376:	a1 f0       	breq	.+40     	; 0x33a0 <ADC_enu_ChangePrescalerFactor+0x3e>
    3378:	8a 81       	ldd	r24, Y+2	; 0x02
    337a:	88 30       	cpi	r24, 0x08	; 8
    337c:	88 f4       	brcc	.+34     	; 0x33a0 <ADC_enu_ChangePrescalerFactor+0x3e>
    {
        //Clearins PS bits
        ADCSRA &= ~ (7 << ADCSRA_ADPS0);
    337e:	a6 e2       	ldi	r26, 0x26	; 38
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	e6 e2       	ldi	r30, 0x26	; 38
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	80 81       	ld	r24, Z
    3388:	88 7f       	andi	r24, 0xF8	; 248
    338a:	8c 93       	st	X, r24

        //Choosing divisuon factor
        ADCSRA |=  (Copy_u8_DivisonFactor << ADCSRA_ADPS0);
    338c:	a6 e2       	ldi	r26, 0x26	; 38
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	e6 e2       	ldi	r30, 0x26	; 38
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	90 81       	ld	r25, Z
    3396:	8a 81       	ldd	r24, Y+2	; 0x02
    3398:	89 2b       	or	r24, r25
    339a:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    339c:	19 82       	std	Y+1, r1	; 0x01
    339e:	02 c0       	rjmp	.+4      	; 0x33a4 <ADC_enu_ChangePrescalerFactor+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	cf 91       	pop	r28
    33ac:	df 91       	pop	r29
    33ae:	08 95       	ret

000033b0 <ADC_enu_ReadADCH>:

extern ErrorState_t ADC_enu_ReadADCH(u16* Copy_pu16_Result)
{
    33b0:	df 93       	push	r29
    33b2:	cf 93       	push	r28
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <ADC_enu_ReadADCH+0x6>
    33b6:	0f 92       	push	r0
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	9b 83       	std	Y+3, r25	; 0x03
    33be:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	89 83       	std	Y+1, r24	; 0x01


    if(Copy_pu16_Result)
    33c4:	8a 81       	ldd	r24, Y+2	; 0x02
    33c6:	9b 81       	ldd	r25, Y+3	; 0x03
    33c8:	00 97       	sbiw	r24, 0x00	; 0
    33ca:	79 f0       	breq	.+30     	; 0x33ea <ADC_enu_ReadADCH+0x3a>
            
            *Copy_pu16_Result = (u16)ADCH << 8;
        
        #else ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED

                *Copy_pu16_Result = (u16)ADCH << 2;
    33cc:	e5 e2       	ldi	r30, 0x25	; 37
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	88 2f       	mov	r24, r24
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	88 0f       	add	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	ea 81       	ldd	r30, Y+2	; 0x02
    33e0:	fb 81       	ldd	r31, Y+3	; 0x03
    33e2:	91 83       	std	Z+1, r25	; 0x01
    33e4:	80 83       	st	Z, r24

        #endif

        Local_u8_ErrorFlag = ES_OK;
    33e6:	19 82       	std	Y+1, r1	; 0x01
    33e8:	02 c0       	rjmp	.+4      	; 0x33ee <ADC_enu_ReadADCH+0x3e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    33ea:	83 e0       	ldi	r24, 0x03	; 3
    33ec:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    33f0:	0f 90       	pop	r0
    33f2:	0f 90       	pop	r0
    33f4:	0f 90       	pop	r0
    33f6:	cf 91       	pop	r28
    33f8:	df 91       	pop	r29
    33fa:	08 95       	ret

000033fc <ADC_enu_ReadADCL>:

extern ErrorState_t ADC_enu_ReadADCL(u16* Copy_pu16_Result)
{
    33fc:	df 93       	push	r29
    33fe:	cf 93       	push	r28
    3400:	00 d0       	rcall	.+0      	; 0x3402 <ADC_enu_ReadADCL+0x6>
    3402:	0f 92       	push	r0
    3404:	cd b7       	in	r28, 0x3d	; 61
    3406:	de b7       	in	r29, 0x3e	; 62
    3408:	9b 83       	std	Y+3, r25	; 0x03
    340a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    3410:	8a 81       	ldd	r24, Y+2	; 0x02
    3412:	9b 81       	ldd	r25, Y+3	; 0x03
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	11 f0       	breq	.+4      	; 0x341c <ADC_enu_ReadADCL+0x20>

            

        #endif

        Local_u8_ErrorFlag = ES_OK;
    3418:	19 82       	std	Y+1, r1	; 0x01
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <ADC_enu_ReadADCL+0x24>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    341c:	83 e0       	ldi	r24, 0x03	; 3
    341e:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    3420:	89 81       	ldd	r24, Y+1	; 0x01
}
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <ADC_enu_ReadData>:

extern ErrorState_t ADC_enu_ReadData(u16* Copy_pu16_Result)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	00 d0       	rcall	.+0      	; 0x3434 <ADC_enu_ReadData+0x6>
    3434:	0f 92       	push	r0
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	9b 83       	std	Y+3, r25	; 0x03
    343c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	9b 81       	ldd	r25, Y+3	; 0x03
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	11 f1       	breq	.+68     	; 0x348e <ADC_enu_ReadData+0x60>
    {
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    344a:	e4 e2       	ldi	r30, 0x24	; 36
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	82 95       	swap	r24
    3452:	86 95       	lsr	r24
    3454:	86 95       	lsr	r24
    3456:	83 70       	andi	r24, 0x03	; 3
    3458:	88 2f       	mov	r24, r24
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	ea 81       	ldd	r30, Y+2	; 0x02
    345e:	fb 81       	ldd	r31, Y+3	; 0x03
    3460:	91 83       	std	Z+1, r25	; 0x01
    3462:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    3464:	ea 81       	ldd	r30, Y+2	; 0x02
    3466:	fb 81       	ldd	r31, Y+3	; 0x03
    3468:	20 81       	ld	r18, Z
    346a:	31 81       	ldd	r19, Z+1	; 0x01
    346c:	e5 e2       	ldi	r30, 0x25	; 37
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	80 81       	ld	r24, Z
    3472:	88 2f       	mov	r24, r24
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	88 0f       	add	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	88 0f       	add	r24, r24
    347c:	99 1f       	adc	r25, r25
    347e:	82 2b       	or	r24, r18
    3480:	93 2b       	or	r25, r19
    3482:	ea 81       	ldd	r30, Y+2	; 0x02
    3484:	fb 81       	ldd	r31, Y+3	; 0x03
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	80 83       	st	Z, r24

        #endif

        

        Local_u8_ErrorFlag = ES_OK;
    348a:	19 82       	std	Y+1, r1	; 0x01
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <ADC_enu_ReadData+0x64>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    348e:	83 e0       	ldi	r24, 0x03	; 3
    3490:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    3492:	89 81       	ldd	r24, Y+1	; 0x01
}
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	0f 90       	pop	r0
    349a:	cf 91       	pop	r28
    349c:	df 91       	pop	r29
    349e:	08 95       	ret

000034a0 <ADC_enu_EnableINT>:

extern ErrorState_t ADC_enu_EnableINT(void)
{
    34a0:	df 93       	push	r29
    34a2:	cf 93       	push	r28
    34a4:	0f 92       	push	r0
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
    
    u8 Local_u8_ErrorFlag = ES_NOK;
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADIE);
    34ae:	a6 e2       	ldi	r26, 0x26	; 38
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	e6 e2       	ldi	r30, 0x26	; 38
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	80 81       	ld	r24, Z
    34b8:	88 60       	ori	r24, 0x08	; 8
    34ba:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    34bc:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    34be:	89 81       	ldd	r24, Y+1	; 0x01
}
    34c0:	0f 90       	pop	r0
    34c2:	cf 91       	pop	r28
    34c4:	df 91       	pop	r29
    34c6:	08 95       	ret

000034c8 <ADC_enu_DisableINT>:

extern ErrorState_t ADC_enu_DisableINT(void)
{
    34c8:	df 93       	push	r29
    34ca:	cf 93       	push	r28
    34cc:	0f 92       	push	r0
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADIE);
    34d6:	a6 e2       	ldi	r26, 0x26	; 38
    34d8:	b0 e0       	ldi	r27, 0x00	; 0
    34da:	e6 e2       	ldi	r30, 0x26	; 38
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	80 81       	ld	r24, Z
    34e0:	87 7f       	andi	r24, 0xF7	; 247
    34e2:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    34e4:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    34e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    34e8:	0f 90       	pop	r0
    34ea:	cf 91       	pop	r28
    34ec:	df 91       	pop	r29
    34ee:	08 95       	ret

000034f0 <ADC_enu_EnableADC>:

extern ErrorState_t ADC_enu_EnableADC(void)
{
    34f0:	df 93       	push	r29
    34f2:	cf 93       	push	r28
    34f4:	0f 92       	push	r0
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADEN);
    34fe:	a6 e2       	ldi	r26, 0x26	; 38
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	e6 e2       	ldi	r30, 0x26	; 38
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	80 68       	ori	r24, 0x80	; 128
    350a:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    350c:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    350e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3510:	0f 90       	pop	r0
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <ADC_enu_DisableADC>:

extern ErrorState_t ADC_enu_DisableADC(void)
{
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	0f 92       	push	r0
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADEN);
    3526:	a6 e2       	ldi	r26, 0x26	; 38
    3528:	b0 e0       	ldi	r27, 0x00	; 0
    352a:	e6 e2       	ldi	r30, 0x26	; 38
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	80 81       	ld	r24, Z
    3530:	8f 77       	andi	r24, 0x7F	; 127
    3532:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3534:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3536:	89 81       	ldd	r24, Y+1	; 0x01

}
    3538:	0f 90       	pop	r0
    353a:	cf 91       	pop	r28
    353c:	df 91       	pop	r29
    353e:	08 95       	ret

00003540 <ADC_enu_SetCallBack>:

extern ErrorState_t ADC_enu_SetCallBack(void (*Copy_pfun_AppFunction)(void), void* Copy_u8_Parameters)
{
    3540:	df 93       	push	r29
    3542:	cf 93       	push	r28
    3544:	00 d0       	rcall	.+0      	; 0x3546 <ADC_enu_SetCallBack+0x6>
    3546:	00 d0       	rcall	.+0      	; 0x3548 <ADC_enu_SetCallBack+0x8>
    3548:	0f 92       	push	r0
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    354e:	9b 83       	std	Y+3, r25	; 0x03
    3550:	8a 83       	std	Y+2, r24	; 0x02
    3552:	7d 83       	std	Y+5, r23	; 0x05
    3554:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	9b 81       	ldd	r25, Y+3	; 0x03
    355e:	00 97       	sbiw	r24, 0x00	; 0
    3560:	69 f0       	breq	.+26     	; 0x357c <ADC_enu_SetCallBack+0x3c>
    {
        pfun_ISRPointer = Copy_pfun_AppFunction;
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	9b 81       	ldd	r25, Y+3	; 0x03
    3566:	90 93 d7 01 	sts	0x01D7, r25
    356a:	80 93 d6 01 	sts	0x01D6, r24

        pvid_ISRParameters = Copy_u8_Parameters;
    356e:	8c 81       	ldd	r24, Y+4	; 0x04
    3570:	9d 81       	ldd	r25, Y+5	; 0x05
    3572:	90 93 d9 01 	sts	0x01D9, r25
    3576:	80 93 d8 01 	sts	0x01D8, r24
        
        Local_u8_ErrorFlag = ES_OK;
    357a:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_ErrorFlag;
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    357e:	0f 90       	pop	r0
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	cf 91       	pop	r28
    358a:	df 91       	pop	r29
    358c:	08 95       	ret

0000358e <__vector_16>:

//ISR functions

void __vector_16 (void)__attribute__((signal));
void __vector_16 (void)
{
    358e:	1f 92       	push	r1
    3590:	0f 92       	push	r0
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	0f 92       	push	r0
    3596:	11 24       	eor	r1, r1
    3598:	2f 93       	push	r18
    359a:	3f 93       	push	r19
    359c:	4f 93       	push	r20
    359e:	5f 93       	push	r21
    35a0:	6f 93       	push	r22
    35a2:	7f 93       	push	r23
    35a4:	8f 93       	push	r24
    35a6:	9f 93       	push	r25
    35a8:	af 93       	push	r26
    35aa:	bf 93       	push	r27
    35ac:	ef 93       	push	r30
    35ae:	ff 93       	push	r31
    35b0:	df 93       	push	r29
    35b2:	cf 93       	push	r28
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    if (pfun_ISRPointer != NULL)
    35b8:	80 91 d6 01 	lds	r24, 0x01D6
    35bc:	90 91 d7 01 	lds	r25, 0x01D7
    35c0:	00 97       	sbiw	r24, 0x00	; 0
    35c2:	49 f0       	breq	.+18     	; 0x35d6 <__vector_16+0x48>
    {
        pfun_ISRPointer (pvid_ISRParameters);
    35c4:	e0 91 d6 01 	lds	r30, 0x01D6
    35c8:	f0 91 d7 01 	lds	r31, 0x01D7
    35cc:	80 91 d8 01 	lds	r24, 0x01D8
    35d0:	90 91 d9 01 	lds	r25, 0x01D9
    35d4:	09 95       	icall
    }
    35d6:	cf 91       	pop	r28
    35d8:	df 91       	pop	r29
    35da:	ff 91       	pop	r31
    35dc:	ef 91       	pop	r30
    35de:	bf 91       	pop	r27
    35e0:	af 91       	pop	r26
    35e2:	9f 91       	pop	r25
    35e4:	8f 91       	pop	r24
    35e6:	7f 91       	pop	r23
    35e8:	6f 91       	pop	r22
    35ea:	5f 91       	pop	r21
    35ec:	4f 91       	pop	r20
    35ee:	3f 91       	pop	r19
    35f0:	2f 91       	pop	r18
    35f2:	0f 90       	pop	r0
    35f4:	0f be       	out	0x3f, r0	; 63
    35f6:	0f 90       	pop	r0
    35f8:	1f 90       	pop	r1
    35fa:	18 95       	reti

000035fc <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	00 d0       	rcall	.+0      	; 0x3602 <SW_enu_Initialization+0x6>
    3602:	00 d0       	rcall	.+0      	; 0x3604 <SW_enu_Initialization+0x8>
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
    3608:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};
    360a:	1b 82       	std	Y+3, r1	; 0x03
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	8c 83       	std	Y+4, r24	; 0x04

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    3610:	19 82       	std	Y+1, r1	; 0x01
    3612:	53 c0       	rjmp	.+166    	; 0x36ba <SW_enu_Initialization+0xbe>
    {
        
       Local_au8_ErrorStates[0] = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    3614:	89 81       	ldd	r24, Y+1	; 0x01
    3616:	28 2f       	mov	r18, r24
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	c9 01       	movw	r24, r18
    361c:	88 0f       	add	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	82 0f       	add	r24, r18
    3622:	93 1f       	adc	r25, r19
    3624:	fc 01       	movw	r30, r24
    3626:	eb 58       	subi	r30, 0x8B	; 139
    3628:	fe 4f       	sbci	r31, 0xFE	; 254
    362a:	40 81       	ld	r20, Z
    362c:	89 81       	ldd	r24, Y+1	; 0x01
    362e:	28 2f       	mov	r18, r24
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	c9 01       	movw	r24, r18
    3634:	88 0f       	add	r24, r24
    3636:	99 1f       	adc	r25, r25
    3638:	82 0f       	add	r24, r18
    363a:	93 1f       	adc	r25, r19
    363c:	fc 01       	movw	r30, r24
    363e:	ea 58       	subi	r30, 0x8A	; 138
    3640:	fe 4f       	sbci	r31, 0xFE	; 254
    3642:	90 81       	ld	r25, Z
    3644:	84 2f       	mov	r24, r20
    3646:	69 2f       	mov	r22, r25
    3648:	40 e0       	ldi	r20, 0x00	; 0
    364a:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
    364e:	8b 83       	std	Y+3, r24	; 0x03

       Local_au8_ErrorStates[1] = DIO_enu_SetPinState(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	28 2f       	mov	r18, r24
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	c9 01       	movw	r24, r18
    3658:	88 0f       	add	r24, r24
    365a:	99 1f       	adc	r25, r25
    365c:	82 0f       	add	r24, r18
    365e:	93 1f       	adc	r25, r19
    3660:	fc 01       	movw	r30, r24
    3662:	eb 58       	subi	r30, 0x8B	; 139
    3664:	fe 4f       	sbci	r31, 0xFE	; 254
    3666:	50 81       	ld	r21, Z
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	28 2f       	mov	r18, r24
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	c9 01       	movw	r24, r18
    3670:	88 0f       	add	r24, r24
    3672:	99 1f       	adc	r25, r25
    3674:	82 0f       	add	r24, r18
    3676:	93 1f       	adc	r25, r19
    3678:	fc 01       	movw	r30, r24
    367a:	ea 58       	subi	r30, 0x8A	; 138
    367c:	fe 4f       	sbci	r31, 0xFE	; 254
    367e:	40 81       	ld	r20, Z
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	28 2f       	mov	r18, r24
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	c9 01       	movw	r24, r18
    3688:	88 0f       	add	r24, r24
    368a:	99 1f       	adc	r25, r25
    368c:	82 0f       	add	r24, r18
    368e:	93 1f       	adc	r25, r19
    3690:	fc 01       	movw	r30, r24
    3692:	e9 58       	subi	r30, 0x89	; 137
    3694:	fe 4f       	sbci	r31, 0xFE	; 254
    3696:	90 81       	ld	r25, Z
    3698:	85 2f       	mov	r24, r21
    369a:	64 2f       	mov	r22, r20
    369c:	49 2f       	mov	r20, r25
    369e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <DIO_enu_SetPinState>
    36a2:	8c 83       	std	Y+4, r24	; 0x04
   
        if((Local_au8_ErrorStates[0] == ES_NOK ) || (Local_au8_ErrorStates[1] == ES_NOK) )
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	81 30       	cpi	r24, 0x01	; 1
    36a8:	19 f0       	breq	.+6      	; 0x36b0 <SW_enu_Initialization+0xb4>
    36aa:	8c 81       	ldd	r24, Y+4	; 0x04
    36ac:	81 30       	cpi	r24, 0x01	; 1
    36ae:	11 f4       	brne	.+4      	; 0x36b4 <SW_enu_Initialization+0xb8>
        {
            Local_u8_ErrorFlag = ES_NOK;
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	8a 83       	std	Y+2, r24	; 0x02
{
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	8f 5f       	subi	r24, 0xFF	; 255
    36b8:	89 83       	std	Y+1, r24	; 0x01
    36ba:	90 91 74 01 	lds	r25, 0x0174
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	89 17       	cp	r24, r25
    36c2:	08 f4       	brcc	.+2      	; 0x36c6 <SW_enu_Initialization+0xca>
    36c4:	a7 cf       	rjmp	.-178    	; 0x3614 <SW_enu_Initialization+0x18>
        }

    }


    return Local_u8_ErrorFlag;
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	cf 91       	pop	r28
    36d2:	df 91       	pop	r29
    36d4:	08 95       	ret

000036d6 <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    36d6:	df 93       	push	r29
    36d8:	cf 93       	push	r28
    36da:	00 d0       	rcall	.+0      	; 0x36dc <SW_enu_GetSwValue+0x6>
    36dc:	00 d0       	rcall	.+0      	; 0x36de <SW_enu_GetSwValue+0x8>
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	8a 83       	std	Y+2, r24	; 0x02
    36e4:	7c 83       	std	Y+4, r23	; 0x04
    36e6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    36ec:	8b 81       	ldd	r24, Y+3	; 0x03
    36ee:	9c 81       	ldd	r25, Y+4	; 0x04
    36f0:	00 97       	sbiw	r24, 0x00	; 0
    36f2:	49 f1       	breq	.+82     	; 0x3746 <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    36f4:	90 91 74 01 	lds	r25, 0x0174
    36f8:	8a 81       	ldd	r24, Y+2	; 0x02
    36fa:	98 17       	cp	r25, r24
    36fc:	08 f1       	brcs	.+66     	; 0x3740 <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    36fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3700:	28 2f       	mov	r18, r24
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	c9 01       	movw	r24, r18
    3706:	88 0f       	add	r24, r24
    3708:	99 1f       	adc	r25, r25
    370a:	82 0f       	add	r24, r18
    370c:	93 1f       	adc	r25, r19
    370e:	fc 01       	movw	r30, r24
    3710:	eb 58       	subi	r30, 0x8B	; 139
    3712:	fe 4f       	sbci	r31, 0xFE	; 254
    3714:	40 81       	ld	r20, Z
    3716:	8a 81       	ldd	r24, Y+2	; 0x02
    3718:	28 2f       	mov	r18, r24
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	c9 01       	movw	r24, r18
    371e:	88 0f       	add	r24, r24
    3720:	99 1f       	adc	r25, r25
    3722:	82 0f       	add	r24, r18
    3724:	93 1f       	adc	r25, r19
    3726:	fc 01       	movw	r30, r24
    3728:	ea 58       	subi	r30, 0x8A	; 138
    372a:	fe 4f       	sbci	r31, 0xFE	; 254
    372c:	90 81       	ld	r25, Z
    372e:	2b 81       	ldd	r18, Y+3	; 0x03
    3730:	3c 81       	ldd	r19, Y+4	; 0x04
    3732:	84 2f       	mov	r24, r20
    3734:	69 2f       	mov	r22, r25
    3736:	a9 01       	movw	r20, r18
    3738:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <DIO_enu_GetPinValue>
    373c:	89 83       	std	Y+1, r24	; 0x01
    373e:	05 c0       	rjmp	.+10     	; 0x374a <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3740:	82 e0       	ldi	r24, 0x02	; 2
    3742:	89 83       	std	Y+1, r24	; 0x01
    3744:	02 c0       	rjmp	.+4      	; 0x374a <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3746:	83 e0       	ldi	r24, 0x03	; 3
    3748:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    374a:	89 81       	ldd	r24, Y+1	; 0x01

}
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	00 d0       	rcall	.+0      	; 0x3760 <Relay_enu_Initialization+0x6>
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3768:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    376a:	19 82       	std	Y+1, r1	; 0x01
    376c:	31 c0       	rjmp	.+98     	; 0x37d0 <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	88 2f       	mov	r24, r24
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	88 0f       	add	r24, r24
    3776:	99 1f       	adc	r25, r25
    3778:	fc 01       	movw	r30, r24
    377a:	e7 58       	subi	r30, 0x87	; 135
    377c:	fe 4f       	sbci	r31, 0xFE	; 254
    377e:	20 81       	ld	r18, Z
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	88 2f       	mov	r24, r24
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	fc 01       	movw	r30, r24
    378c:	e6 58       	subi	r30, 0x86	; 134
    378e:	fe 4f       	sbci	r31, 0xFE	; 254
    3790:	90 81       	ld	r25, Z
    3792:	82 2f       	mov	r24, r18
    3794:	69 2f       	mov	r22, r25
    3796:	41 e0       	ldi	r20, 0x01	; 1
    3798:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    379c:	89 81       	ldd	r24, Y+1	; 0x01
    379e:	88 2f       	mov	r24, r24
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	88 0f       	add	r24, r24
    37a4:	99 1f       	adc	r25, r25
    37a6:	fc 01       	movw	r30, r24
    37a8:	e7 58       	subi	r30, 0x87	; 135
    37aa:	fe 4f       	sbci	r31, 0xFE	; 254
    37ac:	20 81       	ld	r18, Z
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	88 2f       	mov	r24, r24
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	88 0f       	add	r24, r24
    37b6:	99 1f       	adc	r25, r25
    37b8:	fc 01       	movw	r30, r24
    37ba:	e6 58       	subi	r30, 0x86	; 134
    37bc:	fe 4f       	sbci	r31, 0xFE	; 254
    37be:	90 81       	ld	r25, Z
    37c0:	82 2f       	mov	r24, r18
    37c2:	69 2f       	mov	r22, r25
    37c4:	40 e0       	ldi	r20, 0x00	; 0
    37c6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	8f 5f       	subi	r24, 0xFF	; 255
    37ce:	89 83       	std	Y+1, r24	; 0x01
    37d0:	90 91 78 01 	lds	r25, 0x0178
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	89 17       	cp	r24, r25
    37d8:	50 f2       	brcs	.-108    	; 0x376e <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    37da:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	08 95       	ret

000037e8 <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    37e8:	df 93       	push	r29
    37ea:	cf 93       	push	r28
    37ec:	00 d0       	rcall	.+0      	; 0x37ee <Relay_enu_TuronOnRelay+0x6>
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
    37f2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    37f8:	90 91 78 01 	lds	r25, 0x0178
    37fc:	8a 81       	ldd	r24, Y+2	; 0x02
    37fe:	89 17       	cp	r24, r25
    3800:	c8 f4       	brcc	.+50     	; 0x3834 <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    3802:	8a 81       	ldd	r24, Y+2	; 0x02
    3804:	88 2f       	mov	r24, r24
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	88 0f       	add	r24, r24
    380a:	99 1f       	adc	r25, r25
    380c:	fc 01       	movw	r30, r24
    380e:	e7 58       	subi	r30, 0x87	; 135
    3810:	fe 4f       	sbci	r31, 0xFE	; 254
    3812:	20 81       	ld	r18, Z
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	88 2f       	mov	r24, r24
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	fc 01       	movw	r30, r24
    3820:	e6 58       	subi	r30, 0x86	; 134
    3822:	fe 4f       	sbci	r31, 0xFE	; 254
    3824:	90 81       	ld	r25, Z
    3826:	82 2f       	mov	r24, r18
    3828:	69 2f       	mov	r22, r25
    382a:	41 e0       	ldi	r20, 0x01	; 1
    382c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    3830:	89 83       	std	Y+1, r24	; 0x01
    3832:	02 c0       	rjmp	.+4      	; 0x3838 <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3834:	82 e0       	ldi	r24, 0x02	; 2
    3836:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    3838:	89 81       	ldd	r24, Y+1	; 0x01
}
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	cf 91       	pop	r28
    3840:	df 91       	pop	r29
    3842:	08 95       	ret

00003844 <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    3844:	df 93       	push	r29
    3846:	cf 93       	push	r28
    3848:	00 d0       	rcall	.+0      	; 0x384a <Relay_enu_TuronOffRelay+0x6>
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    3854:	90 91 78 01 	lds	r25, 0x0178
    3858:	8a 81       	ldd	r24, Y+2	; 0x02
    385a:	89 17       	cp	r24, r25
    385c:	c8 f4       	brcc	.+50     	; 0x3890 <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    385e:	8a 81       	ldd	r24, Y+2	; 0x02
    3860:	88 2f       	mov	r24, r24
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	88 0f       	add	r24, r24
    3866:	99 1f       	adc	r25, r25
    3868:	fc 01       	movw	r30, r24
    386a:	e7 58       	subi	r30, 0x87	; 135
    386c:	fe 4f       	sbci	r31, 0xFE	; 254
    386e:	20 81       	ld	r18, Z
    3870:	8a 81       	ldd	r24, Y+2	; 0x02
    3872:	88 2f       	mov	r24, r24
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	88 0f       	add	r24, r24
    3878:	99 1f       	adc	r25, r25
    387a:	fc 01       	movw	r30, r24
    387c:	e6 58       	subi	r30, 0x86	; 134
    387e:	fe 4f       	sbci	r31, 0xFE	; 254
    3880:	90 81       	ld	r25, Z
    3882:	82 2f       	mov	r24, r18
    3884:	69 2f       	mov	r22, r25
    3886:	40 e0       	ldi	r20, 0x00	; 0
    3888:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    388c:	89 83       	std	Y+1, r24	; 0x01
    388e:	02 c0       	rjmp	.+4      	; 0x3894 <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3890:	82 e0       	ldi	r24, 0x02	; 2
    3892:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    3894:	89 81       	ldd	r24, Y+1	; 0x01
}
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	cf 91       	pop	r28
    389c:	df 91       	pop	r29
    389e:	08 95       	ret

000038a0 <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    38a0:	df 93       	push	r29
    38a2:	cf 93       	push	r28
    38a4:	00 d0       	rcall	.+0      	; 0x38a6 <Relay_enu_TurnOnAllRelays+0x6>
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    38ae:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    38b0:	19 82       	std	Y+1, r1	; 0x01
    38b2:	1a c0       	rjmp	.+52     	; 0x38e8 <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    38b4:	89 81       	ldd	r24, Y+1	; 0x01
    38b6:	88 2f       	mov	r24, r24
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	88 0f       	add	r24, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	fc 01       	movw	r30, r24
    38c0:	e7 58       	subi	r30, 0x87	; 135
    38c2:	fe 4f       	sbci	r31, 0xFE	; 254
    38c4:	20 81       	ld	r18, Z
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	88 2f       	mov	r24, r24
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	88 0f       	add	r24, r24
    38ce:	99 1f       	adc	r25, r25
    38d0:	fc 01       	movw	r30, r24
    38d2:	e6 58       	subi	r30, 0x86	; 134
    38d4:	fe 4f       	sbci	r31, 0xFE	; 254
    38d6:	90 81       	ld	r25, Z
    38d8:	82 2f       	mov	r24, r18
    38da:	69 2f       	mov	r22, r25
    38dc:	41 e0       	ldi	r20, 0x01	; 1
    38de:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	8f 5f       	subi	r24, 0xFF	; 255
    38e6:	89 83       	std	Y+1, r24	; 0x01
    38e8:	90 91 78 01 	lds	r25, 0x0178
    38ec:	89 81       	ldd	r24, Y+1	; 0x01
    38ee:	89 17       	cp	r24, r25
    38f0:	08 f3       	brcs	.-62     	; 0x38b4 <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    38f2:	82 e0       	ldi	r24, 0x02	; 2
    38f4:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    38f6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	08 95       	ret

00003902 <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    3902:	df 93       	push	r29
    3904:	cf 93       	push	r28
    3906:	00 d0       	rcall	.+0      	; 0x3908 <Relay_enu_TurnOffAllRelays+0x6>
    3908:	cd b7       	in	r28, 0x3d	; 61
    390a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3910:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3912:	19 82       	std	Y+1, r1	; 0x01
    3914:	1a c0       	rjmp	.+52     	; 0x394a <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    3916:	89 81       	ldd	r24, Y+1	; 0x01
    3918:	88 2f       	mov	r24, r24
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	88 0f       	add	r24, r24
    391e:	99 1f       	adc	r25, r25
    3920:	fc 01       	movw	r30, r24
    3922:	e7 58       	subi	r30, 0x87	; 135
    3924:	fe 4f       	sbci	r31, 0xFE	; 254
    3926:	20 81       	ld	r18, Z
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	88 2f       	mov	r24, r24
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	88 0f       	add	r24, r24
    3930:	99 1f       	adc	r25, r25
    3932:	fc 01       	movw	r30, r24
    3934:	e6 58       	subi	r30, 0x86	; 134
    3936:	fe 4f       	sbci	r31, 0xFE	; 254
    3938:	90 81       	ld	r25, Z
    393a:	82 2f       	mov	r24, r18
    393c:	69 2f       	mov	r22, r25
    393e:	40 e0       	ldi	r20, 0x00	; 0
    3940:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	8f 5f       	subi	r24, 0xFF	; 255
    3948:	89 83       	std	Y+1, r24	; 0x01
    394a:	90 91 78 01 	lds	r25, 0x0178
    394e:	89 81       	ldd	r24, Y+1	; 0x01
    3950:	89 17       	cp	r24, r25
    3952:	08 f3       	brcs	.-62     	; 0x3916 <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    3954:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3956:	0f 90       	pop	r0
    3958:	0f 90       	pop	r0
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	00 d0       	rcall	.+0      	; 0x3966 <LED_enu_Initialization+0x6>
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    396e:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    3970:	19 82       	std	Y+1, r1	; 0x01
    3972:	31 c0       	rjmp	.+98     	; 0x39d6 <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    3974:	89 81       	ldd	r24, Y+1	; 0x01
    3976:	88 2f       	mov	r24, r24
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	88 0f       	add	r24, r24
    397c:	99 1f       	adc	r25, r25
    397e:	fc 01       	movw	r30, r24
    3980:	e4 58       	subi	r30, 0x84	; 132
    3982:	fe 4f       	sbci	r31, 0xFE	; 254
    3984:	20 81       	ld	r18, Z
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	88 2f       	mov	r24, r24
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	fc 01       	movw	r30, r24
    3992:	e3 58       	subi	r30, 0x83	; 131
    3994:	fe 4f       	sbci	r31, 0xFE	; 254
    3996:	90 81       	ld	r25, Z
    3998:	82 2f       	mov	r24, r18
    399a:	69 2f       	mov	r22, r25
    399c:	41 e0       	ldi	r20, 0x01	; 1
    399e:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	88 2f       	mov	r24, r24
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	88 0f       	add	r24, r24
    39aa:	99 1f       	adc	r25, r25
    39ac:	fc 01       	movw	r30, r24
    39ae:	e4 58       	subi	r30, 0x84	; 132
    39b0:	fe 4f       	sbci	r31, 0xFE	; 254
    39b2:	20 81       	ld	r18, Z
    39b4:	89 81       	ldd	r24, Y+1	; 0x01
    39b6:	88 2f       	mov	r24, r24
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	88 0f       	add	r24, r24
    39bc:	99 1f       	adc	r25, r25
    39be:	fc 01       	movw	r30, r24
    39c0:	e3 58       	subi	r30, 0x83	; 131
    39c2:	fe 4f       	sbci	r31, 0xFE	; 254
    39c4:	90 81       	ld	r25, Z
    39c6:	82 2f       	mov	r24, r18
    39c8:	69 2f       	mov	r22, r25
    39ca:	40 e0       	ldi	r20, 0x00	; 0
    39cc:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	8f 5f       	subi	r24, 0xFF	; 255
    39d4:	89 83       	std	Y+1, r24	; 0x01
    39d6:	90 91 7b 01 	lds	r25, 0x017B
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	89 17       	cp	r24, r25
    39de:	50 f2       	brcs	.-108    	; 0x3974 <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    39e0:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    39e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	cf 91       	pop	r28
    39ea:	df 91       	pop	r29
    39ec:	08 95       	ret

000039ee <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    39ee:	df 93       	push	r29
    39f0:	cf 93       	push	r28
    39f2:	00 d0       	rcall	.+0      	; 0x39f4 <LED_enu_TurnOnLED+0x6>
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
    39f8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    39fe:	90 91 7b 01 	lds	r25, 0x017B
    3a02:	8a 81       	ldd	r24, Y+2	; 0x02
    3a04:	89 17       	cp	r24, r25
    3a06:	c8 f4       	brcc	.+50     	; 0x3a3a <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	88 2f       	mov	r24, r24
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	88 0f       	add	r24, r24
    3a10:	99 1f       	adc	r25, r25
    3a12:	fc 01       	movw	r30, r24
    3a14:	e4 58       	subi	r30, 0x84	; 132
    3a16:	fe 4f       	sbci	r31, 0xFE	; 254
    3a18:	20 81       	ld	r18, Z
    3a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1c:	88 2f       	mov	r24, r24
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	88 0f       	add	r24, r24
    3a22:	99 1f       	adc	r25, r25
    3a24:	fc 01       	movw	r30, r24
    3a26:	e3 58       	subi	r30, 0x83	; 131
    3a28:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2a:	90 81       	ld	r25, Z
    3a2c:	82 2f       	mov	r24, r18
    3a2e:	69 2f       	mov	r22, r25
    3a30:	41 e0       	ldi	r20, 0x01	; 1
    3a32:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    3a36:	89 83       	std	Y+1, r24	; 0x01
    3a38:	02 c0       	rjmp	.+4      	; 0x3a3e <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3a3a:	82 e0       	ldi	r24, 0x02	; 2
    3a3c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	cf 91       	pop	r28
    3a46:	df 91       	pop	r29
    3a48:	08 95       	ret

00003a4a <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    3a4a:	df 93       	push	r29
    3a4c:	cf 93       	push	r28
    3a4e:	00 d0       	rcall	.+0      	; 0x3a50 <LED_enu_TurnOffLED+0x6>
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
    3a54:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    3a5a:	90 91 7b 01 	lds	r25, 0x017B
    3a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a60:	98 17       	cp	r25, r24
    3a62:	c8 f0       	brcs	.+50     	; 0x3a96 <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    3a64:	8a 81       	ldd	r24, Y+2	; 0x02
    3a66:	88 2f       	mov	r24, r24
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	88 0f       	add	r24, r24
    3a6c:	99 1f       	adc	r25, r25
    3a6e:	fc 01       	movw	r30, r24
    3a70:	e4 58       	subi	r30, 0x84	; 132
    3a72:	fe 4f       	sbci	r31, 0xFE	; 254
    3a74:	20 81       	ld	r18, Z
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	88 2f       	mov	r24, r24
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	88 0f       	add	r24, r24
    3a7e:	99 1f       	adc	r25, r25
    3a80:	fc 01       	movw	r30, r24
    3a82:	e3 58       	subi	r30, 0x83	; 131
    3a84:	fe 4f       	sbci	r31, 0xFE	; 254
    3a86:	90 81       	ld	r25, Z
    3a88:	82 2f       	mov	r24, r18
    3a8a:	69 2f       	mov	r22, r25
    3a8c:	40 e0       	ldi	r20, 0x00	; 0
    3a8e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    3a92:	89 83       	std	Y+1, r24	; 0x01
    3a94:	02 c0       	rjmp	.+4      	; 0x3a9a <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3a96:	82 e0       	ldi	r24, 0x02	; 2
    3a98:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3a9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	cf 91       	pop	r28
    3aa2:	df 91       	pop	r29
    3aa4:	08 95       	ret

00003aa6 <LED_enu_TurnOnCombination>:

extern ErrorState_t LED_enu_TurnOnCombination(u8 Copy_u8_Combination)
{
    3aa6:	df 93       	push	r29
    3aa8:	cf 93       	push	r28
    3aaa:	00 d0       	rcall	.+0      	; 0x3aac <LED_enu_TurnOnCombination+0x6>
    3aac:	00 d0       	rcall	.+0      	; 0x3aae <LED_enu_TurnOnCombination+0x8>
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    3ab2:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_OK;
    3ab4:	1b 82       	std	Y+3, r1	; 0x03
    
    u8 Local_u8_TempErrorFlag = ES_OK;
    3ab6:	1a 82       	std	Y+2, r1	; 0x02


    if(Copy_u8_Combination <= 7 )
    3ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    3aba:	88 30       	cpi	r24, 0x08	; 8
    3abc:	d8 f5       	brcc	.+118    	; 0x3b34 <LED_enu_TurnOnCombination+0x8e>
    {
        s8 Local_s8_Counter = 0;
    3abe:	19 82       	std	Y+1, r1	; 0x01

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    3ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ac2:	81 50       	subi	r24, 0x01	; 1
    3ac4:	89 83       	std	Y+1, r24	; 0x01
    3ac6:	32 c0       	rjmp	.+100    	; 0x3b2c <LED_enu_TurnOnCombination+0x86>
        {
           Local_u8_TempErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Local_s8_Counter].LED_Group, LED_astr_LEDsList[Local_s8_Counter].LED_Pin, (Copy_u8_Combination >> Local_s8_Counter) & 1 );
    3ac8:	89 81       	ldd	r24, Y+1	; 0x01
    3aca:	99 27       	eor	r25, r25
    3acc:	87 fd       	sbrc	r24, 7
    3ace:	90 95       	com	r25
    3ad0:	88 0f       	add	r24, r24
    3ad2:	99 1f       	adc	r25, r25
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	e4 58       	subi	r30, 0x84	; 132
    3ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    3ada:	50 81       	ld	r21, Z
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	99 27       	eor	r25, r25
    3ae0:	87 fd       	sbrc	r24, 7
    3ae2:	90 95       	com	r25
    3ae4:	88 0f       	add	r24, r24
    3ae6:	99 1f       	adc	r25, r25
    3ae8:	fc 01       	movw	r30, r24
    3aea:	e3 58       	subi	r30, 0x83	; 131
    3aec:	fe 4f       	sbci	r31, 0xFE	; 254
    3aee:	40 81       	ld	r20, Z
    3af0:	8c 81       	ldd	r24, Y+4	; 0x04
    3af2:	28 2f       	mov	r18, r24
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	89 81       	ldd	r24, Y+1	; 0x01
    3af8:	99 27       	eor	r25, r25
    3afa:	87 fd       	sbrc	r24, 7
    3afc:	90 95       	com	r25
    3afe:	b9 01       	movw	r22, r18
    3b00:	02 c0       	rjmp	.+4      	; 0x3b06 <LED_enu_TurnOnCombination+0x60>
    3b02:	75 95       	asr	r23
    3b04:	67 95       	ror	r22
    3b06:	8a 95       	dec	r24
    3b08:	e2 f7       	brpl	.-8      	; 0x3b02 <LED_enu_TurnOnCombination+0x5c>
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	98 2f       	mov	r25, r24
    3b0e:	91 70       	andi	r25, 0x01	; 1
    3b10:	85 2f       	mov	r24, r21
    3b12:	64 2f       	mov	r22, r20
    3b14:	49 2f       	mov	r20, r25
    3b16:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    3b1a:	8a 83       	std	Y+2, r24	; 0x02

            if(Local_u8_TempErrorFlag == ES_NOK)
    3b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1e:	81 30       	cpi	r24, 0x01	; 1
    3b20:	11 f4       	brne	.+4      	; 0x3b26 <LED_enu_TurnOnCombination+0x80>
            {
                Local_u8_ErrorFlag = ES_NOK;
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	8b 83       	std	Y+3, r24	; 0x03

    if(Copy_u8_Combination <= 7 )
    {
        s8 Local_s8_Counter = 0;

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	81 50       	subi	r24, 0x01	; 1
    3b2a:	89 83       	std	Y+1, r24	; 0x01
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	88 23       	and	r24, r24
    3b30:	5c f6       	brge	.-106    	; 0x3ac8 <LED_enu_TurnOnCombination+0x22>
    3b32:	02 c0       	rjmp	.+4      	; 0x3b38 <LED_enu_TurnOnCombination+0x92>
        }
        
    } 
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3b34:	82 e0       	ldi	r24, 0x02	; 2
    3b36:	8b 83       	std	Y+3, r24	; 0x03
    }

    return Local_u8_ErrorFlag;
    3b38:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	cf 91       	pop	r28
    3b44:	df 91       	pop	r29
    3b46:	08 95       	ret

00003b48 <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    3b48:	df 93       	push	r29
    3b4a:	cf 93       	push	r28
    3b4c:	00 d0       	rcall	.+0      	; 0x3b4e <LED_enu_TurnOnAllLEDs+0x6>
    3b4e:	cd b7       	in	r28, 0x3d	; 61
    3b50:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3b56:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3b58:	19 82       	std	Y+1, r1	; 0x01
    3b5a:	1a c0       	rjmp	.+52     	; 0x3b90 <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	88 2f       	mov	r24, r24
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	88 0f       	add	r24, r24
    3b64:	99 1f       	adc	r25, r25
    3b66:	fc 01       	movw	r30, r24
    3b68:	e4 58       	subi	r30, 0x84	; 132
    3b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b6c:	20 81       	ld	r18, Z
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	88 2f       	mov	r24, r24
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	88 0f       	add	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	fc 01       	movw	r30, r24
    3b7a:	e3 58       	subi	r30, 0x83	; 131
    3b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b7e:	90 81       	ld	r25, Z
    3b80:	82 2f       	mov	r24, r18
    3b82:	69 2f       	mov	r22, r25
    3b84:	41 e0       	ldi	r20, 0x01	; 1
    3b86:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	8f 5f       	subi	r24, 0xFF	; 255
    3b8e:	89 83       	std	Y+1, r24	; 0x01
    3b90:	90 91 7b 01 	lds	r25, 0x017B
    3b94:	89 81       	ldd	r24, Y+1	; 0x01
    3b96:	89 17       	cp	r24, r25
    3b98:	08 f3       	brcs	.-62     	; 0x3b5c <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    3b9a:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    3b9c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	cf 91       	pop	r28
    3ba4:	df 91       	pop	r29
    3ba6:	08 95       	ret

00003ba8 <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    3ba8:	df 93       	push	r29
    3baa:	cf 93       	push	r28
    3bac:	00 d0       	rcall	.+0      	; 0x3bae <LED_enu_TurnOffAllLEDs+0x6>
    3bae:	cd b7       	in	r28, 0x3d	; 61
    3bb0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3bb6:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3bb8:	19 82       	std	Y+1, r1	; 0x01
    3bba:	1a c0       	rjmp	.+52     	; 0x3bf0 <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	88 2f       	mov	r24, r24
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	88 0f       	add	r24, r24
    3bc4:	99 1f       	adc	r25, r25
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	e4 58       	subi	r30, 0x84	; 132
    3bca:	fe 4f       	sbci	r31, 0xFE	; 254
    3bcc:	20 81       	ld	r18, Z
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	88 2f       	mov	r24, r24
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	88 0f       	add	r24, r24
    3bd6:	99 1f       	adc	r25, r25
    3bd8:	fc 01       	movw	r30, r24
    3bda:	e3 58       	subi	r30, 0x83	; 131
    3bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    3bde:	90 81       	ld	r25, Z
    3be0:	82 2f       	mov	r24, r18
    3be2:	69 2f       	mov	r22, r25
    3be4:	40 e0       	ldi	r20, 0x00	; 0
    3be6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	8f 5f       	subi	r24, 0xFF	; 255
    3bee:	89 83       	std	Y+1, r24	; 0x01
    3bf0:	90 91 7b 01 	lds	r25, 0x017B
    3bf4:	89 81       	ldd	r24, Y+1	; 0x01
    3bf6:	89 17       	cp	r24, r25
    3bf8:	08 f3       	brcs	.-62     	; 0x3bbc <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    3bfa:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    3bfc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3bfe:	0f 90       	pop	r0
    3c00:	0f 90       	pop	r0
    3c02:	cf 91       	pop	r28
    3c04:	df 91       	pop	r29
    3c06:	08 95       	ret

00003c08 <LED_enu_GetLEDCount>:

extern ErrorState_t LED_enu_GetLEDCount(u8* Copy_u8_Count)
{
    3c08:	df 93       	push	r29
    3c0a:	cf 93       	push	r28
    3c0c:	00 d0       	rcall	.+0      	; 0x3c0e <LED_enu_GetLEDCount+0x6>
    3c0e:	0f 92       	push	r0
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
    3c14:	9b 83       	std	Y+3, r25	; 0x03
    3c16:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Count)
    3c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c20:	00 97       	sbiw	r24, 0x00	; 0
    3c22:	39 f0       	breq	.+14     	; 0x3c32 <LED_enu_GetLEDCount+0x2a>
    {
        *Copy_u8_Count = LED_u8_LEDsCount;
    3c24:	80 91 7b 01 	lds	r24, 0x017B
    3c28:	ea 81       	ldd	r30, Y+2	; 0x02
    3c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    3c2c:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    3c2e:	19 82       	std	Y+1, r1	; 0x01
    3c30:	02 c0       	rjmp	.+4      	; 0x3c36 <LED_enu_GetLEDCount+0x2e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3c32:	83 e0       	ldi	r24, 0x03	; 3
    3c34:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	0f 90       	pop	r0
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	cf 91       	pop	r28
    3c40:	df 91       	pop	r29
    3c42:	08 95       	ret

00003c44 <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	6d 97       	sbiw	r28, 0x1d	; 29
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	8d 8f       	std	Y+29, r24	; 0x1d
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	ac e0       	ldi	r26, 0x0C	; 12
    3c62:	b2 e4       	ldi	r27, 0x42	; 66
    3c64:	89 8f       	std	Y+25, r24	; 0x19
    3c66:	9a 8f       	std	Y+26, r25	; 0x1a
    3c68:	ab 8f       	std	Y+27, r26	; 0x1b
    3c6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c6c:	69 8d       	ldd	r22, Y+25	; 0x19
    3c6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	4a e7       	ldi	r20, 0x7A	; 122
    3c7a:	55 e4       	ldi	r21, 0x45	; 69
    3c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	8d 8b       	std	Y+21, r24	; 0x15
    3c86:	9e 8b       	std	Y+22, r25	; 0x16
    3c88:	af 8b       	std	Y+23, r26	; 0x17
    3c8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c90:	8f 89       	ldd	r24, Y+23	; 0x17
    3c92:	98 8d       	ldd	r25, Y+24	; 0x18
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	40 e8       	ldi	r20, 0x80	; 128
    3c9a:	5f e3       	ldi	r21, 0x3F	; 63
    3c9c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3ca0:	88 23       	and	r24, r24
    3ca2:	2c f4       	brge	.+10     	; 0x3cae <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	9c 8b       	std	Y+20, r25	; 0x14
    3caa:	8b 8b       	std	Y+19, r24	; 0x13
    3cac:	3f c0       	rjmp	.+126    	; 0x3d2c <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    3cae:	6d 89       	ldd	r22, Y+21	; 0x15
    3cb0:	7e 89       	ldd	r23, Y+22	; 0x16
    3cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    3cb4:	98 8d       	ldd	r25, Y+24	; 0x18
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	3f ef       	ldi	r19, 0xFF	; 255
    3cba:	4f e7       	ldi	r20, 0x7F	; 127
    3cbc:	57 e4       	ldi	r21, 0x47	; 71
    3cbe:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3cc2:	18 16       	cp	r1, r24
    3cc4:	4c f5       	brge	.+82     	; 0x3d18 <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc6:	69 8d       	ldd	r22, Y+25	; 0x19
    3cc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ccc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	40 e2       	ldi	r20, 0x20	; 32
    3cd4:	51 e4       	ldi	r21, 0x41	; 65
    3cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	bc 01       	movw	r22, r24
    3ce0:	cd 01       	movw	r24, r26
    3ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	9c 8b       	std	Y+20, r25	; 0x14
    3cec:	8b 8b       	std	Y+19, r24	; 0x13
    3cee:	0f c0       	rjmp	.+30     	; 0x3d0e <LCD_enu_Initialization+0xca>
    3cf0:	80 e9       	ldi	r24, 0x90	; 144
    3cf2:	91 e0       	ldi	r25, 0x01	; 1
    3cf4:	9a 8b       	std	Y+18, r25	; 0x12
    3cf6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cf8:	89 89       	ldd	r24, Y+17	; 0x11
    3cfa:	9a 89       	ldd	r25, Y+18	; 0x12
    3cfc:	01 97       	sbiw	r24, 0x01	; 1
    3cfe:	f1 f7       	brne	.-4      	; 0x3cfc <LCD_enu_Initialization+0xb8>
    3d00:	9a 8b       	std	Y+18, r25	; 0x12
    3d02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d04:	8b 89       	ldd	r24, Y+19	; 0x13
    3d06:	9c 89       	ldd	r25, Y+20	; 0x14
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	9c 8b       	std	Y+20, r25	; 0x14
    3d0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d10:	9c 89       	ldd	r25, Y+20	; 0x14
    3d12:	00 97       	sbiw	r24, 0x00	; 0
    3d14:	69 f7       	brne	.-38     	; 0x3cf0 <LCD_enu_Initialization+0xac>
    3d16:	14 c0       	rjmp	.+40     	; 0x3d40 <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d18:	6d 89       	ldd	r22, Y+21	; 0x15
    3d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	9c 8b       	std	Y+20, r25	; 0x14
    3d2a:	8b 8b       	std	Y+19, r24	; 0x13
    3d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d30:	98 8b       	std	Y+16, r25	; 0x10
    3d32:	8f 87       	std	Y+15, r24	; 0x0f
    3d34:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d36:	98 89       	ldd	r25, Y+16	; 0x10
    3d38:	01 97       	sbiw	r24, 0x01	; 1
    3d3a:	f1 f7       	brne	.-4      	; 0x3d38 <LCD_enu_Initialization+0xf4>
    3d3c:	98 8b       	std	Y+16, r25	; 0x10
    3d3e:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	61 e0       	ldi	r22, 0x01	; 1
    3d44:	41 e0       	ldi	r20, 0x01	; 1
    3d46:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	62 e0       	ldi	r22, 0x02	; 2
    3d4e:	41 e0       	ldi	r20, 0x01	; 1
    3d50:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	63 e0       	ldi	r22, 0x03	; 3
    3d58:	41 e0       	ldi	r20, 0x01	; 1
    3d5a:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	67 e0       	ldi	r22, 0x07	; 7
    3d62:	41 e0       	ldi	r20, 0x01	; 1
    3d64:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	66 e0       	ldi	r22, 0x06	; 6
    3d6c:	41 e0       	ldi	r20, 0x01	; 1
    3d6e:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	65 e0       	ldi	r22, 0x05	; 5
    3d76:	41 e0       	ldi	r20, 0x01	; 1
    3d78:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
    3d7e:	64 e0       	ldi	r22, 0x04	; 4
    3d80:	41 e0       	ldi	r20, 0x01	; 1
    3d82:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	61 e0       	ldi	r22, 0x01	; 1
    3d8a:	40 e0       	ldi	r20, 0x00	; 0
    3d8c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	67 e0       	ldi	r22, 0x07	; 7
    3d94:	40 e0       	ldi	r20, 0x00	; 0
    3d96:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	66 e0       	ldi	r22, 0x06	; 6
    3d9e:	40 e0       	ldi	r20, 0x00	; 0
    3da0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    3da4:	80 e0       	ldi	r24, 0x00	; 0
    3da6:	65 e0       	ldi	r22, 0x05	; 5
    3da8:	41 e0       	ldi	r20, 0x01	; 1
    3daa:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	64 e0       	ldi	r22, 0x04	; 4
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	63 e0       	ldi	r22, 0x03	; 3
    3dbc:	41 e0       	ldi	r20, 0x01	; 1
    3dbe:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	a0 e8       	ldi	r26, 0x80	; 128
    3dc8:	bf e3       	ldi	r27, 0x3F	; 63
    3dca:	8b 87       	std	Y+11, r24	; 0x0b
    3dcc:	9c 87       	std	Y+12, r25	; 0x0c
    3dce:	ad 87       	std	Y+13, r26	; 0x0d
    3dd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	4a e7       	ldi	r20, 0x7A	; 122
    3de0:	55 e4       	ldi	r21, 0x45	; 69
    3de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	8f 83       	std	Y+7, r24	; 0x07
    3dec:	98 87       	std	Y+8, r25	; 0x08
    3dee:	a9 87       	std	Y+9, r26	; 0x09
    3df0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3df2:	6f 81       	ldd	r22, Y+7	; 0x07
    3df4:	78 85       	ldd	r23, Y+8	; 0x08
    3df6:	89 85       	ldd	r24, Y+9	; 0x09
    3df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	40 e8       	ldi	r20, 0x80	; 128
    3e00:	5f e3       	ldi	r21, 0x3F	; 63
    3e02:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3e06:	88 23       	and	r24, r24
    3e08:	2c f4       	brge	.+10     	; 0x3e14 <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	9e 83       	std	Y+6, r25	; 0x06
    3e10:	8d 83       	std	Y+5, r24	; 0x05
    3e12:	3f c0       	rjmp	.+126    	; 0x3e92 <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    3e14:	6f 81       	ldd	r22, Y+7	; 0x07
    3e16:	78 85       	ldd	r23, Y+8	; 0x08
    3e18:	89 85       	ldd	r24, Y+9	; 0x09
    3e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	3f ef       	ldi	r19, 0xFF	; 255
    3e20:	4f e7       	ldi	r20, 0x7F	; 127
    3e22:	57 e4       	ldi	r21, 0x47	; 71
    3e24:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3e28:	18 16       	cp	r1, r24
    3e2a:	4c f5       	brge	.+82     	; 0x3e7e <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	40 e2       	ldi	r20, 0x20	; 32
    3e3a:	51 e4       	ldi	r21, 0x41	; 65
    3e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	bc 01       	movw	r22, r24
    3e46:	cd 01       	movw	r24, r26
    3e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	9e 83       	std	Y+6, r25	; 0x06
    3e52:	8d 83       	std	Y+5, r24	; 0x05
    3e54:	0f c0       	rjmp	.+30     	; 0x3e74 <LCD_enu_Initialization+0x230>
    3e56:	80 e9       	ldi	r24, 0x90	; 144
    3e58:	91 e0       	ldi	r25, 0x01	; 1
    3e5a:	9c 83       	std	Y+4, r25	; 0x04
    3e5c:	8b 83       	std	Y+3, r24	; 0x03
    3e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e60:	9c 81       	ldd	r25, Y+4	; 0x04
    3e62:	01 97       	sbiw	r24, 0x01	; 1
    3e64:	f1 f7       	brne	.-4      	; 0x3e62 <LCD_enu_Initialization+0x21e>
    3e66:	9c 83       	std	Y+4, r25	; 0x04
    3e68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6e:	01 97       	sbiw	r24, 0x01	; 1
    3e70:	9e 83       	std	Y+6, r25	; 0x06
    3e72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e74:	8d 81       	ldd	r24, Y+5	; 0x05
    3e76:	9e 81       	ldd	r25, Y+6	; 0x06
    3e78:	00 97       	sbiw	r24, 0x00	; 0
    3e7a:	69 f7       	brne	.-38     	; 0x3e56 <LCD_enu_Initialization+0x212>
    3e7c:	14 c0       	rjmp	.+40     	; 0x3ea6 <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e80:	78 85       	ldd	r23, Y+8	; 0x08
    3e82:	89 85       	ldd	r24, Y+9	; 0x09
    3e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	9e 83       	std	Y+6, r25	; 0x06
    3e90:	8d 83       	std	Y+5, r24	; 0x05
    3e92:	8d 81       	ldd	r24, Y+5	; 0x05
    3e94:	9e 81       	ldd	r25, Y+6	; 0x06
    3e96:	9a 83       	std	Y+2, r25	; 0x02
    3e98:	89 83       	std	Y+1, r24	; 0x01
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9e:	01 97       	sbiw	r24, 0x01	; 1
    3ea0:	f1 f7       	brne	.-4      	; 0x3e9e <LCD_enu_Initialization+0x25a>
    3ea2:	9a 83       	std	Y+2, r25	; 0x02
    3ea4:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	63 e0       	ldi	r22, 0x03	; 3
    3eaa:	40 e0       	ldi	r20, 0x00	; 0
    3eac:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	61 e0       	ldi	r22, 0x01	; 1
    3eb4:	40 e0       	ldi	r20, 0x00	; 0
    3eb6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    3eba:	88 e2       	ldi	r24, 0x28	; 40
    3ebc:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	61 e0       	ldi	r22, 0x01	; 1
    3ec4:	40 e0       	ldi	r20, 0x00	; 0
    3ec6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0F);
    3eca:	8f e0       	ldi	r24, 0x0F	; 15
    3ecc:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	61 e0       	ldi	r22, 0x01	; 1
    3ed4:	40 e0       	ldi	r20, 0x00	; 0
    3ed6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	61 e0       	ldi	r22, 0x01	; 1
    3ee4:	40 e0       	ldi	r20, 0x00	; 0
    3ee6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    3eea:	86 e0       	ldi	r24, 0x06	; 6
    3eec:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    3ef0:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    3ef2:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3ef4:	6d 96       	adiw	r28, 0x1d	; 29
    3ef6:	0f b6       	in	r0, 0x3f	; 63
    3ef8:	f8 94       	cli
    3efa:	de bf       	out	0x3e, r29	; 62
    3efc:	0f be       	out	0x3f, r0	; 63
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	cf 91       	pop	r28
    3f02:	df 91       	pop	r29
    3f04:	08 95       	ret

00003f06 <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    3f06:	df 93       	push	r29
    3f08:	cf 93       	push	r28
    3f0a:	00 d0       	rcall	.+0      	; 0x3f0c <LCD_enu_SendCommand+0x6>
    3f0c:	cd b7       	in	r28, 0x3d	; 61
    3f0e:	de b7       	in	r29, 0x3e	; 62
    3f10:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	61 e0       	ldi	r22, 0x01	; 1
    3f1a:	40 e0       	ldi	r20, 0x00	; 0
    3f1c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    3f20:	8a 81       	ldd	r24, Y+2	; 0x02
    3f22:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    3f26:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    3f28:	89 81       	ldd	r24, Y+1	; 0x01

}
    3f2a:	0f 90       	pop	r0
    3f2c:	0f 90       	pop	r0
    3f2e:	cf 91       	pop	r28
    3f30:	df 91       	pop	r29
    3f32:	08 95       	ret

00003f34 <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    3f34:	df 93       	push	r29
    3f36:	cf 93       	push	r28
    3f38:	00 d0       	rcall	.+0      	; 0x3f3a <LCD_enu_SendData+0x6>
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
    3f3e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f40:	81 e0       	ldi	r24, 0x01	; 1
    3f42:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	61 e0       	ldi	r22, 0x01	; 1
    3f48:	41 e0       	ldi	r20, 0x01	; 1
    3f4a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    3f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f50:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    3f54:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3f56:	89 81       	ldd	r24, Y+1	; 0x01

}
    3f58:	0f 90       	pop	r0
    3f5a:	0f 90       	pop	r0
    3f5c:	cf 91       	pop	r28
    3f5e:	df 91       	pop	r29
    3f60:	08 95       	ret

00003f62 <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    3f62:	df 93       	push	r29
    3f64:	cf 93       	push	r28
    3f66:	00 d0       	rcall	.+0      	; 0x3f68 <LCD_enu_GoToPosition+0x6>
    3f68:	00 d0       	rcall	.+0      	; 0x3f6a <LCD_enu_GoToPosition+0x8>
    3f6a:	cd b7       	in	r28, 0x3d	; 61
    3f6c:	de b7       	in	r29, 0x3e	; 62
    3f6e:	8a 83       	std	Y+2, r24	; 0x02
    3f70:	6b 83       	std	Y+3, r22	; 0x03
    3f72:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    3f78:	8b 81       	ldd	r24, Y+3	; 0x03
    3f7a:	81 31       	cpi	r24, 0x11	; 17
    3f7c:	88 f5       	brcc	.+98     	; 0x3fe0 <LCD_enu_GoToPosition+0x7e>
    3f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f80:	88 23       	and	r24, r24
    3f82:	71 f1       	breq	.+92     	; 0x3fe0 <LCD_enu_GoToPosition+0x7e>
    3f84:	8a 81       	ldd	r24, Y+2	; 0x02
    3f86:	83 30       	cpi	r24, 0x03	; 3
    3f88:	58 f5       	brcc	.+86     	; 0x3fe0 <LCD_enu_GoToPosition+0x7e>
    3f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8c:	88 23       	and	r24, r24
    3f8e:	41 f1       	breq	.+80     	; 0x3fe0 <LCD_enu_GoToPosition+0x7e>
    3f90:	8c 81       	ldd	r24, Y+4	; 0x04
    3f92:	85 30       	cpi	r24, 0x05	; 5
    3f94:	28 f5       	brcc	.+74     	; 0x3fe0 <LCD_enu_GoToPosition+0x7e>
    3f96:	8c 81       	ldd	r24, Y+4	; 0x04
    3f98:	88 23       	and	r24, r24
    3f9a:	11 f1       	breq	.+68     	; 0x3fe0 <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	61 e0       	ldi	r22, 0x01	; 1
    3fa0:	40 e0       	ldi	r20, 0x00	; 0
    3fa2:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    3fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fa8:	88 2f       	mov	r24, r24
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	9c 01       	movw	r18, r24
    3fae:	21 50       	subi	r18, 0x01	; 1
    3fb0:	30 40       	sbci	r19, 0x00	; 0
    3fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb4:	88 2f       	mov	r24, r24
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	88 0f       	add	r24, r24
    3fbc:	99 1f       	adc	r25, r25
    3fbe:	88 0f       	add	r24, r24
    3fc0:	99 1f       	adc	r25, r25
    3fc2:	82 0f       	add	r24, r18
    3fc4:	93 1f       	adc	r25, r19
    3fc6:	82 95       	swap	r24
    3fc8:	92 95       	swap	r25
    3fca:	90 7f       	andi	r25, 0xF0	; 240
    3fcc:	98 27       	eor	r25, r24
    3fce:	80 7f       	andi	r24, 0xF0	; 240
    3fd0:	98 27       	eor	r25, r24
    3fd2:	98 2f       	mov	r25, r24
    3fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd6:	89 0f       	add	r24, r25
    3fd8:	81 58       	subi	r24, 0x81	; 129
    3fda:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
    3fde:	02 c0       	rjmp	.+4      	; 0x3fe4 <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3fe0:	82 e0       	ldi	r24, 0x02	; 2
    3fe2:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fe6:	0f 90       	pop	r0
    3fe8:	0f 90       	pop	r0
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	cf 91       	pop	r28
    3ff0:	df 91       	pop	r29
    3ff2:	08 95       	ret

00003ff4 <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    3ff4:	df 93       	push	r29
    3ff6:	cf 93       	push	r28
    3ff8:	00 d0       	rcall	.+0      	; 0x3ffa <LCD_enu_SendString+0x6>
    3ffa:	0f 92       	push	r0
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	9b 83       	std	Y+3, r25	; 0x03
    4002:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    4008:	8a 81       	ldd	r24, Y+2	; 0x02
    400a:	9b 81       	ldd	r25, Y+3	; 0x03
    400c:	00 97       	sbiw	r24, 0x00	; 0
    400e:	c1 f0       	breq	.+48     	; 0x4040 <LCD_enu_SendString+0x4c>
    4010:	10 c0       	rjmp	.+32     	; 0x4032 <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	61 e0       	ldi	r22, 0x01	; 1
    4016:	41 e0       	ldi	r20, 0x01	; 1
    4018:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    401c:	ea 81       	ldd	r30, Y+2	; 0x02
    401e:	fb 81       	ldd	r31, Y+3	; 0x03
    4020:	20 81       	ld	r18, Z
    4022:	8a 81       	ldd	r24, Y+2	; 0x02
    4024:	9b 81       	ldd	r25, Y+3	; 0x03
    4026:	01 96       	adiw	r24, 0x01	; 1
    4028:	9b 83       	std	Y+3, r25	; 0x03
    402a:	8a 83       	std	Y+2, r24	; 0x02
    402c:	82 2f       	mov	r24, r18
    402e:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    4032:	ea 81       	ldd	r30, Y+2	; 0x02
    4034:	fb 81       	ldd	r31, Y+3	; 0x03
    4036:	80 81       	ld	r24, Z
    4038:	88 23       	and	r24, r24
    403a:	59 f7       	brne	.-42     	; 0x4012 <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    403c:	19 82       	std	Y+1, r1	; 0x01
    403e:	02 c0       	rjmp	.+4      	; 0x4044 <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4040:	83 e0       	ldi	r24, 0x03	; 3
    4042:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    4044:	89 81       	ldd	r24, Y+1	; 0x01
}
    4046:	0f 90       	pop	r0
    4048:	0f 90       	pop	r0
    404a:	0f 90       	pop	r0
    404c:	cf 91       	pop	r28
    404e:	df 91       	pop	r29
    4050:	08 95       	ret

00004052 <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    4052:	df 93       	push	r29
    4054:	cf 93       	push	r28
    4056:	00 d0       	rcall	.+0      	; 0x4058 <LCD_enu_ClearPage+0x6>
    4058:	0f 92       	push	r0
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
    405e:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    4064:	8b 81       	ldd	r24, Y+3	; 0x03
    4066:	88 23       	and	r24, r24
    4068:	09 f4       	brne	.+2      	; 0x406c <LCD_enu_ClearPage+0x1a>
    406a:	49 c0       	rjmp	.+146    	; 0x40fe <LCD_enu_ClearPage+0xac>
    406c:	8b 81       	ldd	r24, Y+3	; 0x03
    406e:	85 30       	cpi	r24, 0x05	; 5
    4070:	08 f0       	brcs	.+2      	; 0x4074 <LCD_enu_ClearPage+0x22>
    4072:	45 c0       	rjmp	.+138    	; 0x40fe <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    4074:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	61 e0       	ldi	r22, 0x01	; 1
    407a:	40 e0       	ldi	r20, 0x00	; 0
    407c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    4080:	8b 81       	ldd	r24, Y+3	; 0x03
    4082:	88 2f       	mov	r24, r24
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	07 96       	adiw	r24, 0x07	; 7
    4088:	82 95       	swap	r24
    408a:	92 95       	swap	r25
    408c:	90 7f       	andi	r25, 0xF0	; 240
    408e:	98 27       	eor	r25, r24
    4090:	80 7f       	andi	r24, 0xF0	; 240
    4092:	98 27       	eor	r25, r24
    4094:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    4098:	81 e0       	ldi	r24, 0x01	; 1
    409a:	61 e0       	ldi	r22, 0x01	; 1
    409c:	41 e0       	ldi	r20, 0x01	; 1
    409e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    40a2:	19 82       	std	Y+1, r1	; 0x01
    40a4:	06 c0       	rjmp	.+12     	; 0x40b2 <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    40a6:	80 e2       	ldi	r24, 0x20	; 32
    40a8:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	8f 5f       	subi	r24, 0xFF	; 255
    40b0:	89 83       	std	Y+1, r24	; 0x01
    40b2:	89 81       	ldd	r24, Y+1	; 0x01
    40b4:	80 31       	cpi	r24, 0x10	; 16
    40b6:	b8 f3       	brcs	.-18     	; 0x40a6 <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	61 e0       	ldi	r22, 0x01	; 1
    40bc:	40 e0       	ldi	r20, 0x00	; 0
    40be:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    40c2:	8b 81       	ldd	r24, Y+3	; 0x03
    40c4:	88 2f       	mov	r24, r24
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	0b 96       	adiw	r24, 0x0b	; 11
    40ca:	82 95       	swap	r24
    40cc:	92 95       	swap	r25
    40ce:	90 7f       	andi	r25, 0xF0	; 240
    40d0:	98 27       	eor	r25, r24
    40d2:	80 7f       	andi	r24, 0xF0	; 240
    40d4:	98 27       	eor	r25, r24
    40d6:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	61 e0       	ldi	r22, 0x01	; 1
    40de:	41 e0       	ldi	r20, 0x01	; 1
    40e0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    40e4:	19 82       	std	Y+1, r1	; 0x01
    40e6:	06 c0       	rjmp	.+12     	; 0x40f4 <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    40e8:	80 e2       	ldi	r24, 0x20	; 32
    40ea:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    40ee:	89 81       	ldd	r24, Y+1	; 0x01
    40f0:	8f 5f       	subi	r24, 0xFF	; 255
    40f2:	89 83       	std	Y+1, r24	; 0x01
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	80 31       	cpi	r24, 0x10	; 16
    40f8:	b8 f3       	brcs	.-18     	; 0x40e8 <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    40fa:	1a 82       	std	Y+2, r1	; 0x02
    40fc:	02 c0       	rjmp	.+4      	; 0x4102 <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    40fe:	82 e0       	ldi	r24, 0x02	; 2
    4100:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    4102:	8a 81       	ldd	r24, Y+2	; 0x02

}
    4104:	0f 90       	pop	r0
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	cf 91       	pop	r28
    410c:	df 91       	pop	r29
    410e:	08 95       	ret

00004110 <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    4110:	cf 92       	push	r12
    4112:	ef 92       	push	r14
    4114:	0f 93       	push	r16
    4116:	df 93       	push	r29
    4118:	cf 93       	push	r28
    411a:	cd b7       	in	r28, 0x3d	; 61
    411c:	de b7       	in	r29, 0x3e	; 62
    411e:	2e 97       	sbiw	r28, 0x0e	; 14
    4120:	0f b6       	in	r0, 0x3f	; 63
    4122:	f8 94       	cli
    4124:	de bf       	out	0x3e, r29	; 62
    4126:	0f be       	out	0x3f, r0	; 63
    4128:	cd bf       	out	0x3d, r28	; 61
    412a:	9e 83       	std	Y+6, r25	; 0x06
    412c:	8d 83       	std	Y+5, r24	; 0x05
    412e:	6f 83       	std	Y+7, r22	; 0x07
    4130:	48 87       	std	Y+8, r20	; 0x08
    4132:	29 87       	std	Y+9, r18	; 0x09
    4134:	0a 87       	std	Y+10, r16	; 0x0a
    4136:	eb 86       	std	Y+11, r14	; 0x0b
    4138:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    413e:	8d 81       	ldd	r24, Y+5	; 0x05
    4140:	9e 81       	ldd	r25, Y+6	; 0x06
    4142:	00 97       	sbiw	r24, 0x00	; 0
    4144:	09 f4       	brne	.+2      	; 0x4148 <LCD_enu_DrawSpecialCharacter+0x38>
    4146:	b3 c0       	rjmp	.+358    	; 0x42ae <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    4148:	1b 82       	std	Y+3, r1	; 0x03
    414a:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    414c:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    414e:	8f 81       	ldd	r24, Y+7	; 0x07
    4150:	88 23       	and	r24, r24
    4152:	09 f4       	brne	.+2      	; 0x4156 <LCD_enu_DrawSpecialCharacter+0x46>
    4154:	a9 c0       	rjmp	.+338    	; 0x42a8 <LCD_enu_DrawSpecialCharacter+0x198>
    4156:	8f 81       	ldd	r24, Y+7	; 0x07
    4158:	89 30       	cpi	r24, 0x09	; 9
    415a:	08 f0       	brcs	.+2      	; 0x415e <LCD_enu_DrawSpecialCharacter+0x4e>
    415c:	a5 c0       	rjmp	.+330    	; 0x42a8 <LCD_enu_DrawSpecialCharacter+0x198>
    415e:	88 85       	ldd	r24, Y+8	; 0x08
    4160:	88 30       	cpi	r24, 0x08	; 8
    4162:	08 f0       	brcs	.+2      	; 0x4166 <LCD_enu_DrawSpecialCharacter+0x56>
    4164:	a1 c0       	rjmp	.+322    	; 0x42a8 <LCD_enu_DrawSpecialCharacter+0x198>
    4166:	88 85       	ldd	r24, Y+8	; 0x08
    4168:	28 2f       	mov	r18, r24
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	88 e0       	ldi	r24, 0x08	; 8
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	ac 01       	movw	r20, r24
    4172:	42 1b       	sub	r20, r18
    4174:	53 0b       	sbc	r21, r19
    4176:	9a 01       	movw	r18, r20
    4178:	8f 81       	ldd	r24, Y+7	; 0x07
    417a:	88 2f       	mov	r24, r24
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	28 17       	cp	r18, r24
    4180:	39 07       	cpc	r19, r25
    4182:	0c f4       	brge	.+2      	; 0x4186 <LCD_enu_DrawSpecialCharacter+0x76>
    4184:	91 c0       	rjmp	.+290    	; 0x42a8 <LCD_enu_DrawSpecialCharacter+0x198>
    4186:	89 85       	ldd	r24, Y+9	; 0x09
    4188:	88 23       	and	r24, r24
    418a:	09 f4       	brne	.+2      	; 0x418e <LCD_enu_DrawSpecialCharacter+0x7e>
    418c:	8d c0       	rjmp	.+282    	; 0x42a8 <LCD_enu_DrawSpecialCharacter+0x198>
    418e:	89 85       	ldd	r24, Y+9	; 0x09
    4190:	83 30       	cpi	r24, 0x03	; 3
    4192:	08 f0       	brcs	.+2      	; 0x4196 <LCD_enu_DrawSpecialCharacter+0x86>
    4194:	89 c0       	rjmp	.+274    	; 0x42a8 <LCD_enu_DrawSpecialCharacter+0x198>
    4196:	8a 85       	ldd	r24, Y+10	; 0x0a
    4198:	88 23       	and	r24, r24
    419a:	09 f4       	brne	.+2      	; 0x419e <LCD_enu_DrawSpecialCharacter+0x8e>
    419c:	85 c0       	rjmp	.+266    	; 0x42a8 <LCD_enu_DrawSpecialCharacter+0x198>
    419e:	8a 85       	ldd	r24, Y+10	; 0x0a
    41a0:	81 31       	cpi	r24, 0x11	; 17
    41a2:	08 f0       	brcs	.+2      	; 0x41a6 <LCD_enu_DrawSpecialCharacter+0x96>
    41a4:	81 c0       	rjmp	.+258    	; 0x42a8 <LCD_enu_DrawSpecialCharacter+0x198>
    41a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    41a8:	82 30       	cpi	r24, 0x02	; 2
    41aa:	08 f0       	brcs	.+2      	; 0x41ae <LCD_enu_DrawSpecialCharacter+0x9e>
    41ac:	7d c0       	rjmp	.+250    	; 0x42a8 <LCD_enu_DrawSpecialCharacter+0x198>
    41ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    41b0:	85 30       	cpi	r24, 0x05	; 5
    41b2:	08 f0       	brcs	.+2      	; 0x41b6 <LCD_enu_DrawSpecialCharacter+0xa6>
    41b4:	79 c0       	rjmp	.+242    	; 0x42a8 <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    41b6:	19 82       	std	Y+1, r1	; 0x01
    41b8:	19 c0       	rjmp	.+50     	; 0x41ec <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    41ba:	89 81       	ldd	r24, Y+1	; 0x01
    41bc:	28 2f       	mov	r18, r24
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	8d 81       	ldd	r24, Y+5	; 0x05
    41c2:	9e 81       	ldd	r25, Y+6	; 0x06
    41c4:	82 0f       	add	r24, r18
    41c6:	93 1f       	adc	r25, r19
    41c8:	9b 83       	std	Y+3, r25	; 0x03
    41ca:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    41cc:	89 81       	ldd	r24, Y+1	; 0x01
    41ce:	98 2f       	mov	r25, r24
    41d0:	96 95       	lsr	r25
    41d2:	96 95       	lsr	r25
    41d4:	96 95       	lsr	r25
    41d6:	88 85       	ldd	r24, Y+8	; 0x08
    41d8:	29 2f       	mov	r18, r25
    41da:	28 0f       	add	r18, r24
    41dc:	8a 81       	ldd	r24, Y+2	; 0x02
    41de:	9b 81       	ldd	r25, Y+3	; 0x03
    41e0:	62 2f       	mov	r22, r18
    41e2:	0e 94 94 25 	call	0x4b28	; 0x4b28 <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    41e6:	89 81       	ldd	r24, Y+1	; 0x01
    41e8:	88 5f       	subi	r24, 0xF8	; 248
    41ea:	89 83       	std	Y+1, r24	; 0x01
    41ec:	89 81       	ldd	r24, Y+1	; 0x01
    41ee:	28 2f       	mov	r18, r24
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	8f 81       	ldd	r24, Y+7	; 0x07
    41f4:	88 2f       	mov	r24, r24
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	88 0f       	add	r24, r24
    41fa:	99 1f       	adc	r25, r25
    41fc:	88 0f       	add	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	88 0f       	add	r24, r24
    4202:	99 1f       	adc	r25, r25
    4204:	28 17       	cp	r18, r24
    4206:	39 07       	cpc	r19, r25
    4208:	c4 f2       	brlt	.-80     	; 0x41ba <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	61 e0       	ldi	r22, 0x01	; 1
    420e:	40 e0       	ldi	r20, 0x00	; 0
    4210:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    4214:	8c 85       	ldd	r24, Y+12	; 0x0c
    4216:	28 2f       	mov	r18, r24
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	3e 87       	std	Y+14, r19	; 0x0e
    421c:	2d 87       	std	Y+13, r18	; 0x0d
    421e:	4d 85       	ldd	r20, Y+13	; 0x0d
    4220:	5e 85       	ldd	r21, Y+14	; 0x0e
    4222:	41 15       	cp	r20, r1
    4224:	51 05       	cpc	r21, r1
    4226:	49 f0       	breq	.+18     	; 0x423a <LCD_enu_DrawSpecialCharacter+0x12a>
    4228:	8d 85       	ldd	r24, Y+13	; 0x0d
    422a:	9e 85       	ldd	r25, Y+14	; 0x0e
    422c:	81 30       	cpi	r24, 0x01	; 1
    422e:	91 05       	cpc	r25, r1
    4230:	39 f4       	brne	.+14     	; 0x4240 <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    4232:	86 e0       	ldi	r24, 0x06	; 6
    4234:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
    4238:	03 c0       	rjmp	.+6      	; 0x4240 <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    423a:	84 e0       	ldi	r24, 0x04	; 4
    423c:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	61 e0       	ldi	r22, 0x01	; 1
    4244:	40 e0       	ldi	r20, 0x00	; 0
    4246:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    424a:	8b 85       	ldd	r24, Y+11	; 0x0b
    424c:	88 2f       	mov	r24, r24
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	9c 01       	movw	r18, r24
    4252:	21 50       	subi	r18, 0x01	; 1
    4254:	30 40       	sbci	r19, 0x00	; 0
    4256:	89 85       	ldd	r24, Y+9	; 0x09
    4258:	88 2f       	mov	r24, r24
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	01 97       	sbiw	r24, 0x01	; 1
    425e:	88 0f       	add	r24, r24
    4260:	99 1f       	adc	r25, r25
    4262:	88 0f       	add	r24, r24
    4264:	99 1f       	adc	r25, r25
    4266:	82 0f       	add	r24, r18
    4268:	93 1f       	adc	r25, r19
    426a:	82 95       	swap	r24
    426c:	92 95       	swap	r25
    426e:	90 7f       	andi	r25, 0xF0	; 240
    4270:	98 27       	eor	r25, r24
    4272:	80 7f       	andi	r24, 0xF0	; 240
    4274:	98 27       	eor	r25, r24
    4276:	98 2f       	mov	r25, r24
    4278:	8a 85       	ldd	r24, Y+10	; 0x0a
    427a:	89 0f       	add	r24, r25
    427c:	81 58       	subi	r24, 0x81	; 129
    427e:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	61 e0       	ldi	r22, 0x01	; 1
    4286:	41 e0       	ldi	r20, 0x01	; 1
    4288:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    428c:	19 82       	std	Y+1, r1	; 0x01
    428e:	06 c0       	rjmp	.+12     	; 0x429c <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    4290:	89 81       	ldd	r24, Y+1	; 0x01
    4292:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    4296:	89 81       	ldd	r24, Y+1	; 0x01
    4298:	8f 5f       	subi	r24, 0xFF	; 255
    429a:	89 83       	std	Y+1, r24	; 0x01
    429c:	99 81       	ldd	r25, Y+1	; 0x01
    429e:	8f 81       	ldd	r24, Y+7	; 0x07
    42a0:	98 17       	cp	r25, r24
    42a2:	b0 f3       	brcs	.-20     	; 0x4290 <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    42a4:	1c 82       	std	Y+4, r1	; 0x04
    42a6:	05 c0       	rjmp	.+10     	; 0x42b2 <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    42a8:	82 e0       	ldi	r24, 0x02	; 2
    42aa:	8c 83       	std	Y+4, r24	; 0x04
    42ac:	02 c0       	rjmp	.+4      	; 0x42b2 <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    42ae:	83 e0       	ldi	r24, 0x03	; 3
    42b0:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    42b2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    42b4:	2e 96       	adiw	r28, 0x0e	; 14
    42b6:	0f b6       	in	r0, 0x3f	; 63
    42b8:	f8 94       	cli
    42ba:	de bf       	out	0x3e, r29	; 62
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	cd bf       	out	0x3d, r28	; 61
    42c0:	cf 91       	pop	r28
    42c2:	df 91       	pop	r29
    42c4:	0f 91       	pop	r16
    42c6:	ef 90       	pop	r14
    42c8:	cf 90       	pop	r12
    42ca:	08 95       	ret

000042cc <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    42cc:	0f 93       	push	r16
    42ce:	df 93       	push	r29
    42d0:	cf 93       	push	r28
    42d2:	cd b7       	in	r28, 0x3d	; 61
    42d4:	de b7       	in	r29, 0x3e	; 62
    42d6:	2e 97       	sbiw	r28, 0x0e	; 14
    42d8:	0f b6       	in	r0, 0x3f	; 63
    42da:	f8 94       	cli
    42dc:	de bf       	out	0x3e, r29	; 62
    42de:	0f be       	out	0x3f, r0	; 63
    42e0:	cd bf       	out	0x3d, r28	; 61
    42e2:	68 87       	std	Y+8, r22	; 0x08
    42e4:	79 87       	std	Y+9, r23	; 0x09
    42e6:	8a 87       	std	Y+10, r24	; 0x0a
    42e8:	9b 87       	std	Y+11, r25	; 0x0b
    42ea:	4c 87       	std	Y+12, r20	; 0x0c
    42ec:	2d 87       	std	Y+13, r18	; 0x0d
    42ee:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    42f4:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    42f6:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    42f8:	88 85       	ldd	r24, Y+8	; 0x08
    42fa:	99 85       	ldd	r25, Y+9	; 0x09
    42fc:	aa 85       	ldd	r26, Y+10	; 0x0a
    42fe:	bb 85       	ldd	r27, Y+11	; 0x0b
    4300:	bb 23       	and	r27, r27
    4302:	8c f4       	brge	.+34     	; 0x4326 <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    4304:	81 e0       	ldi	r24, 0x01	; 1
    4306:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    4308:	88 85       	ldd	r24, Y+8	; 0x08
    430a:	99 85       	ldd	r25, Y+9	; 0x09
    430c:	aa 85       	ldd	r26, Y+10	; 0x0a
    430e:	bb 85       	ldd	r27, Y+11	; 0x0b
    4310:	b0 95       	com	r27
    4312:	a0 95       	com	r26
    4314:	90 95       	com	r25
    4316:	81 95       	neg	r24
    4318:	9f 4f       	sbci	r25, 0xFF	; 255
    431a:	af 4f       	sbci	r26, 0xFF	; 255
    431c:	bf 4f       	sbci	r27, 0xFF	; 255
    431e:	88 87       	std	Y+8, r24	; 0x08
    4320:	99 87       	std	Y+9, r25	; 0x09
    4322:	aa 87       	std	Y+10, r26	; 0x0a
    4324:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    4326:	88 85       	ldd	r24, Y+8	; 0x08
    4328:	99 85       	ldd	r25, Y+9	; 0x09
    432a:	aa 85       	ldd	r26, Y+10	; 0x0a
    432c:	bb 85       	ldd	r27, Y+11	; 0x0b
    432e:	8c 83       	std	Y+4, r24	; 0x04
    4330:	9d 83       	std	Y+5, r25	; 0x05
    4332:	ae 83       	std	Y+6, r26	; 0x06
    4334:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    4336:	8a 81       	ldd	r24, Y+2	; 0x02
    4338:	8f 5f       	subi	r24, 0xFF	; 255
    433a:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    433c:	8c 81       	ldd	r24, Y+4	; 0x04
    433e:	9d 81       	ldd	r25, Y+5	; 0x05
    4340:	ae 81       	ldd	r26, Y+6	; 0x06
    4342:	bf 81       	ldd	r27, Y+7	; 0x07
    4344:	2a e0       	ldi	r18, 0x0A	; 10
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	40 e0       	ldi	r20, 0x00	; 0
    434a:	50 e0       	ldi	r21, 0x00	; 0
    434c:	bc 01       	movw	r22, r24
    434e:	cd 01       	movw	r24, r26
    4350:	0e 94 00 2c 	call	0x5800	; 0x5800 <__divmodsi4>
    4354:	da 01       	movw	r26, r20
    4356:	c9 01       	movw	r24, r18
    4358:	8c 83       	std	Y+4, r24	; 0x04
    435a:	9d 83       	std	Y+5, r25	; 0x05
    435c:	ae 83       	std	Y+6, r26	; 0x06
    435e:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    4360:	8c 81       	ldd	r24, Y+4	; 0x04
    4362:	9d 81       	ldd	r25, Y+5	; 0x05
    4364:	ae 81       	ldd	r26, Y+6	; 0x06
    4366:	bf 81       	ldd	r27, Y+7	; 0x07
    4368:	00 97       	sbiw	r24, 0x00	; 0
    436a:	a1 05       	cpc	r26, r1
    436c:	b1 05       	cpc	r27, r1
    436e:	19 f7       	brne	.-58     	; 0x4336 <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    4370:	8c 85       	ldd	r24, Y+12	; 0x0c
    4372:	88 23       	and	r24, r24
    4374:	09 f4       	brne	.+2      	; 0x4378 <LCD_enu_WriteIntegerNum+0xac>
    4376:	87 c0       	rjmp	.+270    	; 0x4486 <LCD_enu_WriteIntegerNum+0x1ba>
    4378:	8c 85       	ldd	r24, Y+12	; 0x0c
    437a:	83 30       	cpi	r24, 0x03	; 3
    437c:	08 f0       	brcs	.+2      	; 0x4380 <LCD_enu_WriteIntegerNum+0xb4>
    437e:	83 c0       	rjmp	.+262    	; 0x4486 <LCD_enu_WriteIntegerNum+0x1ba>
    4380:	8d 85       	ldd	r24, Y+13	; 0x0d
    4382:	88 23       	and	r24, r24
    4384:	09 f4       	brne	.+2      	; 0x4388 <LCD_enu_WriteIntegerNum+0xbc>
    4386:	7f c0       	rjmp	.+254    	; 0x4486 <LCD_enu_WriteIntegerNum+0x1ba>
    4388:	8d 85       	ldd	r24, Y+13	; 0x0d
    438a:	81 31       	cpi	r24, 0x11	; 17
    438c:	08 f0       	brcs	.+2      	; 0x4390 <LCD_enu_WriteIntegerNum+0xc4>
    438e:	7b c0       	rjmp	.+246    	; 0x4486 <LCD_enu_WriteIntegerNum+0x1ba>
    4390:	8e 85       	ldd	r24, Y+14	; 0x0e
    4392:	85 30       	cpi	r24, 0x05	; 5
    4394:	08 f0       	brcs	.+2      	; 0x4398 <LCD_enu_WriteIntegerNum+0xcc>
    4396:	77 c0       	rjmp	.+238    	; 0x4486 <LCD_enu_WriteIntegerNum+0x1ba>
    4398:	8a 81       	ldd	r24, Y+2	; 0x02
    439a:	81 31       	cpi	r24, 0x11	; 17
    439c:	08 f0       	brcs	.+2      	; 0x43a0 <LCD_enu_WriteIntegerNum+0xd4>
    439e:	73 c0       	rjmp	.+230    	; 0x4486 <LCD_enu_WriteIntegerNum+0x1ba>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    43a0:	88 85       	ldd	r24, Y+8	; 0x08
    43a2:	99 85       	ldd	r25, Y+9	; 0x09
    43a4:	aa 85       	ldd	r26, Y+10	; 0x0a
    43a6:	bb 85       	ldd	r27, Y+11	; 0x0b
    43a8:	8c 83       	std	Y+4, r24	; 0x04
    43aa:	9d 83       	std	Y+5, r25	; 0x05
    43ac:	ae 83       	std	Y+6, r26	; 0x06
    43ae:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    43b0:	ce 01       	movw	r24, r28
    43b2:	04 96       	adiw	r24, 0x04	; 4
    43b4:	0e 94 55 26 	call	0x4caa	; 0x4caa <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	61 e0       	ldi	r22, 0x01	; 1
    43bc:	40 e0       	ldi	r20, 0x00	; 0
    43be:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        //Placing Cursor
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    43c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    43c4:	88 2f       	mov	r24, r24
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	9c 01       	movw	r18, r24
    43ca:	21 50       	subi	r18, 0x01	; 1
    43cc:	30 40       	sbci	r19, 0x00	; 0
    43ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    43d0:	88 2f       	mov	r24, r24
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	88 0f       	add	r24, r24
    43d8:	99 1f       	adc	r25, r25
    43da:	88 0f       	add	r24, r24
    43dc:	99 1f       	adc	r25, r25
    43de:	82 0f       	add	r24, r18
    43e0:	93 1f       	adc	r25, r19
    43e2:	82 95       	swap	r24
    43e4:	92 95       	swap	r25
    43e6:	90 7f       	andi	r25, 0xF0	; 240
    43e8:	98 27       	eor	r25, r24
    43ea:	80 7f       	andi	r24, 0xF0	; 240
    43ec:	98 27       	eor	r25, r24
    43ee:	98 2f       	mov	r25, r24
    43f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43f2:	89 0f       	add	r24, r25
    43f4:	81 58       	subi	r24, 0x81	; 129
    43f6:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	61 e0       	ldi	r22, 0x01	; 1
    43fe:	41 e0       	ldi	r20, 0x01	; 1
    4400:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    4404:	89 81       	ldd	r24, Y+1	; 0x01
    4406:	88 23       	and	r24, r24
    4408:	51 f1       	breq	.+84     	; 0x445e <LCD_enu_WriteIntegerNum+0x192>
        {
            enu_PassByteAndLatch('-');
    440a:	8d e2       	ldi	r24, 0x2D	; 45
    440c:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
    4410:	26 c0       	rjmp	.+76     	; 0x445e <LCD_enu_WriteIntegerNum+0x192>
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    4412:	8c 81       	ldd	r24, Y+4	; 0x04
    4414:	9d 81       	ldd	r25, Y+5	; 0x05
    4416:	ae 81       	ldd	r26, Y+6	; 0x06
    4418:	bf 81       	ldd	r27, Y+7	; 0x07
    441a:	2a e0       	ldi	r18, 0x0A	; 10
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	40 e0       	ldi	r20, 0x00	; 0
    4420:	50 e0       	ldi	r21, 0x00	; 0
    4422:	bc 01       	movw	r22, r24
    4424:	cd 01       	movw	r24, r26
    4426:	0e 94 00 2c 	call	0x5800	; 0x5800 <__divmodsi4>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	80 5d       	subi	r24, 0xD0	; 208
    4430:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    4434:	8c 81       	ldd	r24, Y+4	; 0x04
    4436:	9d 81       	ldd	r25, Y+5	; 0x05
    4438:	ae 81       	ldd	r26, Y+6	; 0x06
    443a:	bf 81       	ldd	r27, Y+7	; 0x07
    443c:	2a e0       	ldi	r18, 0x0A	; 10
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	40 e0       	ldi	r20, 0x00	; 0
    4442:	50 e0       	ldi	r21, 0x00	; 0
    4444:	bc 01       	movw	r22, r24
    4446:	cd 01       	movw	r24, r26
    4448:	0e 94 00 2c 	call	0x5800	; 0x5800 <__divmodsi4>
    444c:	da 01       	movw	r26, r20
    444e:	c9 01       	movw	r24, r18
    4450:	8c 83       	std	Y+4, r24	; 0x04
    4452:	9d 83       	std	Y+5, r25	; 0x05
    4454:	ae 83       	std	Y+6, r26	; 0x06
    4456:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    4458:	8a 81       	ldd	r24, Y+2	; 0x02
    445a:	81 50       	subi	r24, 0x01	; 1
    445c:	8a 83       	std	Y+2, r24	; 0x02
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
    445e:	8c 81       	ldd	r24, Y+4	; 0x04
    4460:	9d 81       	ldd	r25, Y+5	; 0x05
    4462:	ae 81       	ldd	r26, Y+6	; 0x06
    4464:	bf 81       	ldd	r27, Y+7	; 0x07
    4466:	00 97       	sbiw	r24, 0x00	; 0
    4468:	a1 05       	cpc	r26, r1
    446a:	b1 05       	cpc	r27, r1
    446c:	91 f6       	brne	.-92     	; 0x4412 <LCD_enu_WriteIntegerNum+0x146>
    446e:	06 c0       	rjmp	.+12     	; 0x447c <LCD_enu_WriteIntegerNum+0x1b0>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    4470:	80 e3       	ldi	r24, 0x30	; 48
    4472:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    4476:	8a 81       	ldd	r24, Y+2	; 0x02
    4478:	81 50       	subi	r24, 0x01	; 1
    447a:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    447c:	8a 81       	ldd	r24, Y+2	; 0x02
    447e:	88 23       	and	r24, r24
    4480:	b9 f7       	brne	.-18     	; 0x4470 <LCD_enu_WriteIntegerNum+0x1a4>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    4482:	1b 82       	std	Y+3, r1	; 0x03
    4484:	02 c0       	rjmp	.+4      	; 0x448a <LCD_enu_WriteIntegerNum+0x1be>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4486:	82 e0       	ldi	r24, 0x02	; 2
    4488:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    448a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    448c:	2e 96       	adiw	r28, 0x0e	; 14
    448e:	0f b6       	in	r0, 0x3f	; 63
    4490:	f8 94       	cli
    4492:	de bf       	out	0x3e, r29	; 62
    4494:	0f be       	out	0x3f, r0	; 63
    4496:	cd bf       	out	0x3d, r28	; 61
    4498:	cf 91       	pop	r28
    449a:	df 91       	pop	r29
    449c:	0f 91       	pop	r16
    449e:	08 95       	ret

000044a0 <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    44a0:	0f 93       	push	r16
    44a2:	df 93       	push	r29
    44a4:	cf 93       	push	r28
    44a6:	cd b7       	in	r28, 0x3d	; 61
    44a8:	de b7       	in	r29, 0x3e	; 62
    44aa:	67 97       	sbiw	r28, 0x17	; 23
    44ac:	0f b6       	in	r0, 0x3f	; 63
    44ae:	f8 94       	cli
    44b0:	de bf       	out	0x3e, r29	; 62
    44b2:	0f be       	out	0x3f, r0	; 63
    44b4:	cd bf       	out	0x3d, r28	; 61
    44b6:	69 8b       	std	Y+17, r22	; 0x11
    44b8:	7a 8b       	std	Y+18, r23	; 0x12
    44ba:	8b 8b       	std	Y+19, r24	; 0x13
    44bc:	9c 8b       	std	Y+20, r25	; 0x14
    44be:	4d 8b       	std	Y+21, r20	; 0x15
    44c0:	2e 8b       	std	Y+22, r18	; 0x16
    44c2:	0f 8b       	std	Y+23, r16	; 0x17
    u8 Local_u8_ErrorFlag = ES_NOK;
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	8c 83       	std	Y+4, r24	; 0x04
    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    u32 Local_u32_TempDecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    44c8:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = LCD_FLOAT_PRECISION;
    44ca:	83 e0       	ldi	r24, 0x03	; 3
    44cc:	8a 83       	std	Y+2, r24	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    44ce:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    44d0:	69 89       	ldd	r22, Y+17	; 0x11
    44d2:	7a 89       	ldd	r23, Y+18	; 0x12
    44d4:	8b 89       	ldd	r24, Y+19	; 0x13
    44d6:	9c 89       	ldd	r25, Y+20	; 0x14
    44d8:	20 e0       	ldi	r18, 0x00	; 0
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	40 e0       	ldi	r20, 0x00	; 0
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    44e4:	88 23       	and	r24, r24
    44e6:	5c f4       	brge	.+22     	; 0x44fe <LCD_enu_WriteFloatNum+0x5e>
    {
        local_u8_NegativeFlag = True;
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    44ec:	89 89       	ldd	r24, Y+17	; 0x11
    44ee:	9a 89       	ldd	r25, Y+18	; 0x12
    44f0:	ab 89       	ldd	r26, Y+19	; 0x13
    44f2:	bc 89       	ldd	r27, Y+20	; 0x14
    44f4:	b0 58       	subi	r27, 0x80	; 128
    44f6:	89 8b       	std	Y+17, r24	; 0x11
    44f8:	9a 8b       	std	Y+18, r25	; 0x12
    44fa:	ab 8b       	std	Y+19, r26	; 0x13
    44fc:	bc 8b       	std	Y+20, r27	; 0x14
    }

    

    Local_u32_WholeDigits = Copy_f32_Num;
    44fe:	69 89       	ldd	r22, Y+17	; 0x11
    4500:	7a 89       	ldd	r23, Y+18	; 0x12
    4502:	8b 89       	ldd	r24, Y+19	; 0x13
    4504:	9c 89       	ldd	r25, Y+20	; 0x14
    4506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    450a:	dc 01       	movw	r26, r24
    450c:	cb 01       	movw	r24, r22
    450e:	8d 83       	std	Y+5, r24	; 0x05
    4510:	9e 83       	std	Y+6, r25	; 0x06
    4512:	af 83       	std	Y+7, r26	; 0x07
    4514:	b8 87       	std	Y+8, r27	; 0x08

    Local_f32_DecimalDigits = Copy_f32_Num - Local_u32_WholeDigits;
    4516:	8d 81       	ldd	r24, Y+5	; 0x05
    4518:	9e 81       	ldd	r25, Y+6	; 0x06
    451a:	af 81       	ldd	r26, Y+7	; 0x07
    451c:	b8 85       	ldd	r27, Y+8	; 0x08
    451e:	bc 01       	movw	r22, r24
    4520:	cd 01       	movw	r24, r26
    4522:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
    4526:	9b 01       	movw	r18, r22
    4528:	ac 01       	movw	r20, r24
    452a:	69 89       	ldd	r22, Y+17	; 0x11
    452c:	7a 89       	ldd	r23, Y+18	; 0x12
    452e:	8b 89       	ldd	r24, Y+19	; 0x13
    4530:	9c 89       	ldd	r25, Y+20	; 0x14
    4532:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	89 87       	std	Y+9, r24	; 0x09
    453c:	9a 87       	std	Y+10, r25	; 0x0a
    453e:	ab 87       	std	Y+11, r26	; 0x0b
    4540:	bc 87       	std	Y+12, r27	; 0x0c


    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    4542:	8b 81       	ldd	r24, Y+3	; 0x03
    4544:	8f 5f       	subi	r24, 0xFF	; 255
    4546:	8b 83       	std	Y+3, r24	; 0x03

        Local_u32_WholeDigits  /= 10;
    4548:	8d 81       	ldd	r24, Y+5	; 0x05
    454a:	9e 81       	ldd	r25, Y+6	; 0x06
    454c:	af 81       	ldd	r26, Y+7	; 0x07
    454e:	b8 85       	ldd	r27, Y+8	; 0x08
    4550:	2a e0       	ldi	r18, 0x0A	; 10
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	40 e0       	ldi	r20, 0x00	; 0
    4556:	50 e0       	ldi	r21, 0x00	; 0
    4558:	bc 01       	movw	r22, r24
    455a:	cd 01       	movw	r24, r26
    455c:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__udivmodsi4>
    4560:	da 01       	movw	r26, r20
    4562:	c9 01       	movw	r24, r18
    4564:	8d 83       	std	Y+5, r24	; 0x05
    4566:	9e 83       	std	Y+6, r25	; 0x06
    4568:	af 83       	std	Y+7, r26	; 0x07
    456a:	b8 87       	std	Y+8, r27	; 0x08

    }while(Local_u32_WholeDigits);
    456c:	8d 81       	ldd	r24, Y+5	; 0x05
    456e:	9e 81       	ldd	r25, Y+6	; 0x06
    4570:	af 81       	ldd	r26, Y+7	; 0x07
    4572:	b8 85       	ldd	r27, Y+8	; 0x08
    4574:	00 97       	sbiw	r24, 0x00	; 0
    4576:	a1 05       	cpc	r26, r1
    4578:	b1 05       	cpc	r27, r1
    457a:	19 f7       	brne	.-58     	; 0x4542 <LCD_enu_WriteFloatNum+0xa2>

    //Converting Decimals into Whole numbers ex: 0.451 -> 451
    enu_ConvertFloatToInteger(&Local_f32_DecimalDigits, LCD_FLOAT_PRECISION);
    457c:	ce 01       	movw	r24, r28
    457e:	09 96       	adiw	r24, 0x09	; 9
    4580:	63 e0       	ldi	r22, 0x03	; 3
    4582:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <enu_ConvertFloatToInteger>


    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DecimalDigitCount <= LCD_MAX_INTEGER_LENGTH))
    4586:	8d 89       	ldd	r24, Y+21	; 0x15
    4588:	88 23       	and	r24, r24
    458a:	09 f4       	brne	.+2      	; 0x458e <LCD_enu_WriteFloatNum+0xee>
    458c:	e3 c0       	rjmp	.+454    	; 0x4754 <LCD_enu_WriteFloatNum+0x2b4>
    458e:	8d 89       	ldd	r24, Y+21	; 0x15
    4590:	83 30       	cpi	r24, 0x03	; 3
    4592:	08 f0       	brcs	.+2      	; 0x4596 <LCD_enu_WriteFloatNum+0xf6>
    4594:	df c0       	rjmp	.+446    	; 0x4754 <LCD_enu_WriteFloatNum+0x2b4>
    4596:	8e 89       	ldd	r24, Y+22	; 0x16
    4598:	88 23       	and	r24, r24
    459a:	09 f4       	brne	.+2      	; 0x459e <LCD_enu_WriteFloatNum+0xfe>
    459c:	db c0       	rjmp	.+438    	; 0x4754 <LCD_enu_WriteFloatNum+0x2b4>
    459e:	8e 89       	ldd	r24, Y+22	; 0x16
    45a0:	81 31       	cpi	r24, 0x11	; 17
    45a2:	08 f0       	brcs	.+2      	; 0x45a6 <LCD_enu_WriteFloatNum+0x106>
    45a4:	d7 c0       	rjmp	.+430    	; 0x4754 <LCD_enu_WriteFloatNum+0x2b4>
    45a6:	8f 89       	ldd	r24, Y+23	; 0x17
    45a8:	85 30       	cpi	r24, 0x05	; 5
    45aa:	08 f0       	brcs	.+2      	; 0x45ae <LCD_enu_WriteFloatNum+0x10e>
    45ac:	d3 c0       	rjmp	.+422    	; 0x4754 <LCD_enu_WriteFloatNum+0x2b4>
    45ae:	8a 81       	ldd	r24, Y+2	; 0x02
    45b0:	81 31       	cpi	r24, 0x11	; 17
    45b2:	08 f0       	brcs	.+2      	; 0x45b6 <LCD_enu_WriteFloatNum+0x116>
    45b4:	cf c0       	rjmp	.+414    	; 0x4754 <LCD_enu_WriteFloatNum+0x2b4>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	61 e0       	ldi	r22, 0x01	; 1
    45ba:	40 e0       	ldi	r20, 0x00	; 0
    45bc:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    45c0:	8f 89       	ldd	r24, Y+23	; 0x17
    45c2:	88 2f       	mov	r24, r24
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	9c 01       	movw	r18, r24
    45c8:	21 50       	subi	r18, 0x01	; 1
    45ca:	30 40       	sbci	r19, 0x00	; 0
    45cc:	8d 89       	ldd	r24, Y+21	; 0x15
    45ce:	88 2f       	mov	r24, r24
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	01 97       	sbiw	r24, 0x01	; 1
    45d4:	88 0f       	add	r24, r24
    45d6:	99 1f       	adc	r25, r25
    45d8:	88 0f       	add	r24, r24
    45da:	99 1f       	adc	r25, r25
    45dc:	82 0f       	add	r24, r18
    45de:	93 1f       	adc	r25, r19
    45e0:	82 95       	swap	r24
    45e2:	92 95       	swap	r25
    45e4:	90 7f       	andi	r25, 0xF0	; 240
    45e6:	98 27       	eor	r25, r24
    45e8:	80 7f       	andi	r24, 0xF0	; 240
    45ea:	98 27       	eor	r25, r24
    45ec:	98 2f       	mov	r25, r24
    45ee:	8e 89       	ldd	r24, Y+22	; 0x16
    45f0:	89 0f       	add	r24, r25
    45f2:	81 58       	subi	r24, 0x81	; 129
    45f4:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
        
        
        //Choosing DR to pass numbers 
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    45f8:	81 e0       	ldi	r24, 0x01	; 1
    45fa:	61 e0       	ldi	r22, 0x01	; 1
    45fc:	41 e0       	ldi	r20, 0x01	; 1
    45fe:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>

        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    4602:	89 81       	ldd	r24, Y+1	; 0x01
    4604:	88 23       	and	r24, r24
    4606:	19 f0       	breq	.+6      	; 0x460e <LCD_enu_WriteFloatNum+0x16e>
        {
            enu_PassByteAndLatch('-');
    4608:	8d e2       	ldi	r24, 0x2D	; 45
    460a:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
        }


        //A] Printing whole digits 

        Local_u32_WholeDigits = Copy_f32_Num;
    460e:	69 89       	ldd	r22, Y+17	; 0x11
    4610:	7a 89       	ldd	r23, Y+18	; 0x12
    4612:	8b 89       	ldd	r24, Y+19	; 0x13
    4614:	9c 89       	ldd	r25, Y+20	; 0x14
    4616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461a:	dc 01       	movw	r26, r24
    461c:	cb 01       	movw	r24, r22
    461e:	8d 83       	std	Y+5, r24	; 0x05
    4620:	9e 83       	std	Y+6, r25	; 0x06
    4622:	af 83       	std	Y+7, r26	; 0x07
    4624:	b8 87       	std	Y+8, r27	; 0x08
        enu_ReverseInteger(&Local_u32_WholeDigits);
    4626:	ce 01       	movw	r24, r28
    4628:	05 96       	adiw	r24, 0x05	; 5
    462a:	0e 94 55 26 	call	0x4caa	; 0x4caa <enu_ReverseInteger>
    462e:	26 c0       	rjmp	.+76     	; 0x467c <LCD_enu_WriteFloatNum+0x1dc>

        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    4630:	8d 81       	ldd	r24, Y+5	; 0x05
    4632:	9e 81       	ldd	r25, Y+6	; 0x06
    4634:	af 81       	ldd	r26, Y+7	; 0x07
    4636:	b8 85       	ldd	r27, Y+8	; 0x08
    4638:	2a e0       	ldi	r18, 0x0A	; 10
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	40 e0       	ldi	r20, 0x00	; 0
    463e:	50 e0       	ldi	r21, 0x00	; 0
    4640:	bc 01       	movw	r22, r24
    4642:	cd 01       	movw	r24, r26
    4644:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__udivmodsi4>
    4648:	dc 01       	movw	r26, r24
    464a:	cb 01       	movw	r24, r22
    464c:	80 5d       	subi	r24, 0xD0	; 208
    464e:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
           
            Local_u32_WholeDigits /= 10;
    4652:	8d 81       	ldd	r24, Y+5	; 0x05
    4654:	9e 81       	ldd	r25, Y+6	; 0x06
    4656:	af 81       	ldd	r26, Y+7	; 0x07
    4658:	b8 85       	ldd	r27, Y+8	; 0x08
    465a:	2a e0       	ldi	r18, 0x0A	; 10
    465c:	30 e0       	ldi	r19, 0x00	; 0
    465e:	40 e0       	ldi	r20, 0x00	; 0
    4660:	50 e0       	ldi	r21, 0x00	; 0
    4662:	bc 01       	movw	r22, r24
    4664:	cd 01       	movw	r24, r26
    4666:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__udivmodsi4>
    466a:	da 01       	movw	r26, r20
    466c:	c9 01       	movw	r24, r18
    466e:	8d 83       	std	Y+5, r24	; 0x05
    4670:	9e 83       	std	Y+6, r25	; 0x06
    4672:	af 83       	std	Y+7, r26	; 0x07
    4674:	b8 87       	std	Y+8, r27	; 0x08
           
            Local_u8_WholeDigitCount--;
    4676:	8b 81       	ldd	r24, Y+3	; 0x03
    4678:	81 50       	subi	r24, 0x01	; 1
    467a:	8b 83       	std	Y+3, r24	; 0x03

        Local_u32_WholeDigits = Copy_f32_Num;
        enu_ReverseInteger(&Local_u32_WholeDigits);

        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    467c:	8d 81       	ldd	r24, Y+5	; 0x05
    467e:	9e 81       	ldd	r25, Y+6	; 0x06
    4680:	af 81       	ldd	r26, Y+7	; 0x07
    4682:	b8 85       	ldd	r27, Y+8	; 0x08
    4684:	00 97       	sbiw	r24, 0x00	; 0
    4686:	a1 05       	cpc	r26, r1
    4688:	b1 05       	cpc	r27, r1
    468a:	91 f6       	brne	.-92     	; 0x4630 <LCD_enu_WriteFloatNum+0x190>
    468c:	06 c0       	rjmp	.+12     	; 0x469a <LCD_enu_WriteFloatNum+0x1fa>
        }

        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    468e:	80 e3       	ldi	r24, 0x30	; 48
    4690:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
           
            Local_u8_WholeDigitCount--;
    4694:	8b 81       	ldd	r24, Y+3	; 0x03
    4696:	81 50       	subi	r24, 0x01	; 1
    4698:	8b 83       	std	Y+3, r24	; 0x03
           
            Local_u8_WholeDigitCount--;
        }

        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    469a:	8b 81       	ldd	r24, Y+3	; 0x03
    469c:	88 23       	and	r24, r24
    469e:	b9 f7       	brne	.-18     	; 0x468e <LCD_enu_WriteFloatNum+0x1ee>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    46a0:	89 85       	ldd	r24, Y+9	; 0x09
    46a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a4:	ab 85       	ldd	r26, Y+11	; 0x0b
    46a6:	bc 85       	ldd	r27, Y+12	; 0x0c
    46a8:	bc 01       	movw	r22, r24
    46aa:	cd 01       	movw	r24, r26
    46ac:	20 e0       	ldi	r18, 0x00	; 0
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	40 e0       	ldi	r20, 0x00	; 0
    46b2:	50 e0       	ldi	r21, 0x00	; 0
    46b4:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    46b8:	88 23       	and	r24, r24
    46ba:	09 f4       	brne	.+2      	; 0x46be <LCD_enu_WriteFloatNum+0x21e>
    46bc:	49 c0       	rjmp	.+146    	; 0x4750 <LCD_enu_WriteFloatNum+0x2b0>
        {
            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    46be:	8e e2       	ldi	r24, 0x2E	; 46
    46c0:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>

            //Saving the float digits in an u32 variable to pass to other functions easily (step for Safety reasons not neaded)
            Local_u32_TempDecimalDigits = Local_f32_DecimalDigits;
    46c4:	89 85       	ldd	r24, Y+9	; 0x09
    46c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    46ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    46cc:	bc 01       	movw	r22, r24
    46ce:	cd 01       	movw	r24, r26
    46d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d4:	dc 01       	movw	r26, r24
    46d6:	cb 01       	movw	r24, r22
    46d8:	8d 87       	std	Y+13, r24	; 0x0d
    46da:	9e 87       	std	Y+14, r25	; 0x0e
    46dc:	af 87       	std	Y+15, r26	; 0x0f
    46de:	b8 8b       	std	Y+16, r27	; 0x10
            
            //Reversing Number
            enu_ReverseInteger(&Local_u32_TempDecimalDigits);
    46e0:	ce 01       	movw	r24, r28
    46e2:	0d 96       	adiw	r24, 0x0d	; 13
    46e4:	0e 94 55 26 	call	0x4caa	; 0x4caa <enu_ReverseInteger>
    46e8:	26 c0       	rjmp	.+76     	; 0x4736 <LCD_enu_WriteFloatNum+0x296>

            //Printing one digit at a time
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch((Local_u32_TempDecimalDigits % 10) + 48);
    46ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ee:	af 85       	ldd	r26, Y+15	; 0x0f
    46f0:	b8 89       	ldd	r27, Y+16	; 0x10
    46f2:	2a e0       	ldi	r18, 0x0A	; 10
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	40 e0       	ldi	r20, 0x00	; 0
    46f8:	50 e0       	ldi	r21, 0x00	; 0
    46fa:	bc 01       	movw	r22, r24
    46fc:	cd 01       	movw	r24, r26
    46fe:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__udivmodsi4>
    4702:	dc 01       	movw	r26, r24
    4704:	cb 01       	movw	r24, r22
    4706:	80 5d       	subi	r24, 0xD0	; 208
    4708:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
                
                Local_u32_TempDecimalDigits /= 10;
    470c:	8d 85       	ldd	r24, Y+13	; 0x0d
    470e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4710:	af 85       	ldd	r26, Y+15	; 0x0f
    4712:	b8 89       	ldd	r27, Y+16	; 0x10
    4714:	2a e0       	ldi	r18, 0x0A	; 10
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	40 e0       	ldi	r20, 0x00	; 0
    471a:	50 e0       	ldi	r21, 0x00	; 0
    471c:	bc 01       	movw	r22, r24
    471e:	cd 01       	movw	r24, r26
    4720:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__udivmodsi4>
    4724:	da 01       	movw	r26, r20
    4726:	c9 01       	movw	r24, r18
    4728:	8d 87       	std	Y+13, r24	; 0x0d
    472a:	9e 87       	std	Y+14, r25	; 0x0e
    472c:	af 87       	std	Y+15, r26	; 0x0f
    472e:	b8 8b       	std	Y+16, r27	; 0x10
                
                Local_u8_DecimalDigitCount--;
    4730:	8a 81       	ldd	r24, Y+2	; 0x02
    4732:	81 50       	subi	r24, 0x01	; 1
    4734:	8a 83       	std	Y+2, r24	; 0x02
            
            //Reversing Number
            enu_ReverseInteger(&Local_u32_TempDecimalDigits);

            //Printing one digit at a time
            while(Local_u8_DecimalDigitCount)
    4736:	8a 81       	ldd	r24, Y+2	; 0x02
    4738:	88 23       	and	r24, r24
    473a:	b9 f6       	brne	.-82     	; 0x46ea <LCD_enu_WriteFloatNum+0x24a>
    473c:	06 c0       	rjmp	.+12     	; 0x474a <LCD_enu_WriteFloatNum+0x2aa>
            }

            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    473e:	80 e3       	ldi	r24, 0x30	; 48
    4740:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    4744:	8a 81       	ldd	r24, Y+2	; 0x02
    4746:	81 50       	subi	r24, 0x01	; 1
    4748:	8a 83       	std	Y+2, r24	; 0x02
                
                Local_u8_DecimalDigitCount--;
            }

            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    474a:	8a 81       	ldd	r24, Y+2	; 0x02
    474c:	88 23       	and	r24, r24
    474e:	b9 f7       	brne	.-18     	; 0x473e <LCD_enu_WriteFloatNum+0x29e>
                Local_u8_DecimalDigitCount--;
            }
            
        }

        Local_u8_ErrorFlag = ES_OK;
    4750:	1c 82       	std	Y+4, r1	; 0x04
    4752:	02 c0       	rjmp	.+4      	; 0x4758 <LCD_enu_WriteFloatNum+0x2b8>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4754:	82 e0       	ldi	r24, 0x02	; 2
    4756:	8c 83       	std	Y+4, r24	; 0x04
    }

    return Local_u8_ErrorFlag;
    4758:	8c 81       	ldd	r24, Y+4	; 0x04

}
    475a:	67 96       	adiw	r28, 0x17	; 23
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	f8 94       	cli
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	cd bf       	out	0x3d, r28	; 61
    4766:	cf 91       	pop	r28
    4768:	df 91       	pop	r29
    476a:	0f 91       	pop	r16
    476c:	08 95       	ret

0000476e <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    476e:	df 93       	push	r29
    4770:	cf 93       	push	r28
    4772:	cd b7       	in	r28, 0x3d	; 61
    4774:	de b7       	in	r29, 0x3e	; 62
    4776:	ac 97       	sbiw	r28, 0x2c	; 44
    4778:	0f b6       	in	r0, 0x3f	; 63
    477a:	f8 94       	cli
    477c:	de bf       	out	0x3e, r29	; 62
    477e:	0f be       	out	0x3f, r0	; 63
    4780:	cd bf       	out	0x3d, r28	; 61
    4782:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    4784:	81 e0       	ldi	r24, 0x01	; 1
    4786:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	62 e0       	ldi	r22, 0x02	; 2
    478c:	40 e0       	ldi	r20, 0x00	; 0
    478e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    4792:	81 e0       	ldi	r24, 0x01	; 1
    4794:	63 e0       	ldi	r22, 0x03	; 3
    4796:	40 e0       	ldi	r20, 0x00	; 0
    4798:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    479c:	8c a5       	ldd	r24, Y+44	; 0x2c
    479e:	98 2f       	mov	r25, r24
    47a0:	99 1f       	adc	r25, r25
    47a2:	99 27       	eor	r25, r25
    47a4:	99 1f       	adc	r25, r25
    47a6:	80 e0       	ldi	r24, 0x00	; 0
    47a8:	67 e0       	ldi	r22, 0x07	; 7
    47aa:	49 2f       	mov	r20, r25
    47ac:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    47b0:	8c a5       	ldd	r24, Y+44	; 0x2c
    47b2:	82 95       	swap	r24
    47b4:	86 95       	lsr	r24
    47b6:	86 95       	lsr	r24
    47b8:	83 70       	andi	r24, 0x03	; 3
    47ba:	98 2f       	mov	r25, r24
    47bc:	91 70       	andi	r25, 0x01	; 1
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	66 e0       	ldi	r22, 0x06	; 6
    47c2:	49 2f       	mov	r20, r25
    47c4:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    47c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    47ca:	82 95       	swap	r24
    47cc:	86 95       	lsr	r24
    47ce:	87 70       	andi	r24, 0x07	; 7
    47d0:	98 2f       	mov	r25, r24
    47d2:	91 70       	andi	r25, 0x01	; 1
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	65 e0       	ldi	r22, 0x05	; 5
    47d8:	49 2f       	mov	r20, r25
    47da:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    47de:	8c a5       	ldd	r24, Y+44	; 0x2c
    47e0:	82 95       	swap	r24
    47e2:	8f 70       	andi	r24, 0x0F	; 15
    47e4:	98 2f       	mov	r25, r24
    47e6:	91 70       	andi	r25, 0x01	; 1
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	64 e0       	ldi	r22, 0x04	; 4
    47ec:	49 2f       	mov	r20, r25
    47ee:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    47f2:	81 e0       	ldi	r24, 0x01	; 1
    47f4:	63 e0       	ldi	r22, 0x03	; 3
    47f6:	41 e0       	ldi	r20, 0x01	; 1
    47f8:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	a0 e8       	ldi	r26, 0x80	; 128
    4802:	bf e3       	ldi	r27, 0x3F	; 63
    4804:	8f a3       	std	Y+39, r24	; 0x27
    4806:	98 a7       	std	Y+40, r25	; 0x28
    4808:	a9 a7       	std	Y+41, r26	; 0x29
    480a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    480c:	6f a1       	ldd	r22, Y+39	; 0x27
    480e:	78 a5       	ldd	r23, Y+40	; 0x28
    4810:	89 a5       	ldd	r24, Y+41	; 0x29
    4812:	9a a5       	ldd	r25, Y+42	; 0x2a
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	30 e0       	ldi	r19, 0x00	; 0
    4818:	4a e7       	ldi	r20, 0x7A	; 122
    481a:	55 e4       	ldi	r21, 0x45	; 69
    481c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4820:	dc 01       	movw	r26, r24
    4822:	cb 01       	movw	r24, r22
    4824:	8b a3       	std	Y+35, r24	; 0x23
    4826:	9c a3       	std	Y+36, r25	; 0x24
    4828:	ad a3       	std	Y+37, r26	; 0x25
    482a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    482c:	6b a1       	ldd	r22, Y+35	; 0x23
    482e:	7c a1       	ldd	r23, Y+36	; 0x24
    4830:	8d a1       	ldd	r24, Y+37	; 0x25
    4832:	9e a1       	ldd	r25, Y+38	; 0x26
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	40 e8       	ldi	r20, 0x80	; 128
    483a:	5f e3       	ldi	r21, 0x3F	; 63
    483c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    4840:	88 23       	and	r24, r24
    4842:	2c f4       	brge	.+10     	; 0x484e <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	9a a3       	std	Y+34, r25	; 0x22
    484a:	89 a3       	std	Y+33, r24	; 0x21
    484c:	3f c0       	rjmp	.+126    	; 0x48cc <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    484e:	6b a1       	ldd	r22, Y+35	; 0x23
    4850:	7c a1       	ldd	r23, Y+36	; 0x24
    4852:	8d a1       	ldd	r24, Y+37	; 0x25
    4854:	9e a1       	ldd	r25, Y+38	; 0x26
    4856:	20 e0       	ldi	r18, 0x00	; 0
    4858:	3f ef       	ldi	r19, 0xFF	; 255
    485a:	4f e7       	ldi	r20, 0x7F	; 127
    485c:	57 e4       	ldi	r21, 0x47	; 71
    485e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    4862:	18 16       	cp	r1, r24
    4864:	4c f5       	brge	.+82     	; 0x48b8 <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4866:	6f a1       	ldd	r22, Y+39	; 0x27
    4868:	78 a5       	ldd	r23, Y+40	; 0x28
    486a:	89 a5       	ldd	r24, Y+41	; 0x29
    486c:	9a a5       	ldd	r25, Y+42	; 0x2a
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	40 e2       	ldi	r20, 0x20	; 32
    4874:	51 e4       	ldi	r21, 0x41	; 65
    4876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	bc 01       	movw	r22, r24
    4880:	cd 01       	movw	r24, r26
    4882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4886:	dc 01       	movw	r26, r24
    4888:	cb 01       	movw	r24, r22
    488a:	9a a3       	std	Y+34, r25	; 0x22
    488c:	89 a3       	std	Y+33, r24	; 0x21
    488e:	0f c0       	rjmp	.+30     	; 0x48ae <enu_PassByteAndLatch+0x140>
    4890:	80 e9       	ldi	r24, 0x90	; 144
    4892:	91 e0       	ldi	r25, 0x01	; 1
    4894:	98 a3       	std	Y+32, r25	; 0x20
    4896:	8f 8f       	std	Y+31, r24	; 0x1f
    4898:	8f 8d       	ldd	r24, Y+31	; 0x1f
    489a:	98 a1       	ldd	r25, Y+32	; 0x20
    489c:	01 97       	sbiw	r24, 0x01	; 1
    489e:	f1 f7       	brne	.-4      	; 0x489c <enu_PassByteAndLatch+0x12e>
    48a0:	98 a3       	std	Y+32, r25	; 0x20
    48a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a4:	89 a1       	ldd	r24, Y+33	; 0x21
    48a6:	9a a1       	ldd	r25, Y+34	; 0x22
    48a8:	01 97       	sbiw	r24, 0x01	; 1
    48aa:	9a a3       	std	Y+34, r25	; 0x22
    48ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ae:	89 a1       	ldd	r24, Y+33	; 0x21
    48b0:	9a a1       	ldd	r25, Y+34	; 0x22
    48b2:	00 97       	sbiw	r24, 0x00	; 0
    48b4:	69 f7       	brne	.-38     	; 0x4890 <enu_PassByteAndLatch+0x122>
    48b6:	14 c0       	rjmp	.+40     	; 0x48e0 <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48b8:	6b a1       	ldd	r22, Y+35	; 0x23
    48ba:	7c a1       	ldd	r23, Y+36	; 0x24
    48bc:	8d a1       	ldd	r24, Y+37	; 0x25
    48be:	9e a1       	ldd	r25, Y+38	; 0x26
    48c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	9a a3       	std	Y+34, r25	; 0x22
    48ca:	89 a3       	std	Y+33, r24	; 0x21
    48cc:	89 a1       	ldd	r24, Y+33	; 0x21
    48ce:	9a a1       	ldd	r25, Y+34	; 0x22
    48d0:	9e 8f       	std	Y+30, r25	; 0x1e
    48d2:	8d 8f       	std	Y+29, r24	; 0x1d
    48d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    48d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48d8:	01 97       	sbiw	r24, 0x01	; 1
    48da:	f1 f7       	brne	.-4      	; 0x48d8 <enu_PassByteAndLatch+0x16a>
    48dc:	9e 8f       	std	Y+30, r25	; 0x1e
    48de:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	63 e0       	ldi	r22, 0x03	; 3
    48e4:	40 e0       	ldi	r20, 0x00	; 0
    48e6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    48ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    48ec:	86 95       	lsr	r24
    48ee:	86 95       	lsr	r24
    48f0:	86 95       	lsr	r24
    48f2:	98 2f       	mov	r25, r24
    48f4:	91 70       	andi	r25, 0x01	; 1
    48f6:	80 e0       	ldi	r24, 0x00	; 0
    48f8:	67 e0       	ldi	r22, 0x07	; 7
    48fa:	49 2f       	mov	r20, r25
    48fc:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    4900:	8c a5       	ldd	r24, Y+44	; 0x2c
    4902:	86 95       	lsr	r24
    4904:	86 95       	lsr	r24
    4906:	98 2f       	mov	r25, r24
    4908:	91 70       	andi	r25, 0x01	; 1
    490a:	80 e0       	ldi	r24, 0x00	; 0
    490c:	66 e0       	ldi	r22, 0x06	; 6
    490e:	49 2f       	mov	r20, r25
    4910:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    4914:	8c a5       	ldd	r24, Y+44	; 0x2c
    4916:	86 95       	lsr	r24
    4918:	98 2f       	mov	r25, r24
    491a:	91 70       	andi	r25, 0x01	; 1
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	65 e0       	ldi	r22, 0x05	; 5
    4920:	49 2f       	mov	r20, r25
    4922:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    4926:	8c a5       	ldd	r24, Y+44	; 0x2c
    4928:	98 2f       	mov	r25, r24
    492a:	91 70       	andi	r25, 0x01	; 1
    492c:	80 e0       	ldi	r24, 0x00	; 0
    492e:	64 e0       	ldi	r22, 0x04	; 4
    4930:	49 2f       	mov	r20, r25
    4932:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	63 e0       	ldi	r22, 0x03	; 3
    493a:	41 e0       	ldi	r20, 0x01	; 1
    493c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    4940:	80 e0       	ldi	r24, 0x00	; 0
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	a0 e8       	ldi	r26, 0x80	; 128
    4946:	bf e3       	ldi	r27, 0x3F	; 63
    4948:	89 8f       	std	Y+25, r24	; 0x19
    494a:	9a 8f       	std	Y+26, r25	; 0x1a
    494c:	ab 8f       	std	Y+27, r26	; 0x1b
    494e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4950:	69 8d       	ldd	r22, Y+25	; 0x19
    4952:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4956:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	4a e7       	ldi	r20, 0x7A	; 122
    495e:	55 e4       	ldi	r21, 0x45	; 69
    4960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	8d 8b       	std	Y+21, r24	; 0x15
    496a:	9e 8b       	std	Y+22, r25	; 0x16
    496c:	af 8b       	std	Y+23, r26	; 0x17
    496e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4970:	6d 89       	ldd	r22, Y+21	; 0x15
    4972:	7e 89       	ldd	r23, Y+22	; 0x16
    4974:	8f 89       	ldd	r24, Y+23	; 0x17
    4976:	98 8d       	ldd	r25, Y+24	; 0x18
    4978:	20 e0       	ldi	r18, 0x00	; 0
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	40 e8       	ldi	r20, 0x80	; 128
    497e:	5f e3       	ldi	r21, 0x3F	; 63
    4980:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    4984:	88 23       	and	r24, r24
    4986:	2c f4       	brge	.+10     	; 0x4992 <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    4988:	81 e0       	ldi	r24, 0x01	; 1
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	9c 8b       	std	Y+20, r25	; 0x14
    498e:	8b 8b       	std	Y+19, r24	; 0x13
    4990:	3f c0       	rjmp	.+126    	; 0x4a10 <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    4992:	6d 89       	ldd	r22, Y+21	; 0x15
    4994:	7e 89       	ldd	r23, Y+22	; 0x16
    4996:	8f 89       	ldd	r24, Y+23	; 0x17
    4998:	98 8d       	ldd	r25, Y+24	; 0x18
    499a:	20 e0       	ldi	r18, 0x00	; 0
    499c:	3f ef       	ldi	r19, 0xFF	; 255
    499e:	4f e7       	ldi	r20, 0x7F	; 127
    49a0:	57 e4       	ldi	r21, 0x47	; 71
    49a2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    49a6:	18 16       	cp	r1, r24
    49a8:	4c f5       	brge	.+82     	; 0x49fc <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49aa:	69 8d       	ldd	r22, Y+25	; 0x19
    49ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	40 e2       	ldi	r20, 0x20	; 32
    49b8:	51 e4       	ldi	r21, 0x41	; 65
    49ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49be:	dc 01       	movw	r26, r24
    49c0:	cb 01       	movw	r24, r22
    49c2:	bc 01       	movw	r22, r24
    49c4:	cd 01       	movw	r24, r26
    49c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ca:	dc 01       	movw	r26, r24
    49cc:	cb 01       	movw	r24, r22
    49ce:	9c 8b       	std	Y+20, r25	; 0x14
    49d0:	8b 8b       	std	Y+19, r24	; 0x13
    49d2:	0f c0       	rjmp	.+30     	; 0x49f2 <enu_PassByteAndLatch+0x284>
    49d4:	80 e9       	ldi	r24, 0x90	; 144
    49d6:	91 e0       	ldi	r25, 0x01	; 1
    49d8:	9a 8b       	std	Y+18, r25	; 0x12
    49da:	89 8b       	std	Y+17, r24	; 0x11
    49dc:	89 89       	ldd	r24, Y+17	; 0x11
    49de:	9a 89       	ldd	r25, Y+18	; 0x12
    49e0:	01 97       	sbiw	r24, 0x01	; 1
    49e2:	f1 f7       	brne	.-4      	; 0x49e0 <enu_PassByteAndLatch+0x272>
    49e4:	9a 8b       	std	Y+18, r25	; 0x12
    49e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49e8:	8b 89       	ldd	r24, Y+19	; 0x13
    49ea:	9c 89       	ldd	r25, Y+20	; 0x14
    49ec:	01 97       	sbiw	r24, 0x01	; 1
    49ee:	9c 8b       	std	Y+20, r25	; 0x14
    49f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49f2:	8b 89       	ldd	r24, Y+19	; 0x13
    49f4:	9c 89       	ldd	r25, Y+20	; 0x14
    49f6:	00 97       	sbiw	r24, 0x00	; 0
    49f8:	69 f7       	brne	.-38     	; 0x49d4 <enu_PassByteAndLatch+0x266>
    49fa:	14 c0       	rjmp	.+40     	; 0x4a24 <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49fc:	6d 89       	ldd	r22, Y+21	; 0x15
    49fe:	7e 89       	ldd	r23, Y+22	; 0x16
    4a00:	8f 89       	ldd	r24, Y+23	; 0x17
    4a02:	98 8d       	ldd	r25, Y+24	; 0x18
    4a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a08:	dc 01       	movw	r26, r24
    4a0a:	cb 01       	movw	r24, r22
    4a0c:	9c 8b       	std	Y+20, r25	; 0x14
    4a0e:	8b 8b       	std	Y+19, r24	; 0x13
    4a10:	8b 89       	ldd	r24, Y+19	; 0x13
    4a12:	9c 89       	ldd	r25, Y+20	; 0x14
    4a14:	98 8b       	std	Y+16, r25	; 0x10
    4a16:	8f 87       	std	Y+15, r24	; 0x0f
    4a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a1a:	98 89       	ldd	r25, Y+16	; 0x10
    4a1c:	01 97       	sbiw	r24, 0x01	; 1
    4a1e:	f1 f7       	brne	.-4      	; 0x4a1c <enu_PassByteAndLatch+0x2ae>
    4a20:	98 8b       	std	Y+16, r25	; 0x10
    4a22:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    4a24:	81 e0       	ldi	r24, 0x01	; 1
    4a26:	63 e0       	ldi	r22, 0x03	; 3
    4a28:	40 e0       	ldi	r20, 0x00	; 0
    4a2a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	a0 e0       	ldi	r26, 0x00	; 0
    4a34:	b0 e4       	ldi	r27, 0x40	; 64
    4a36:	8b 87       	std	Y+11, r24	; 0x0b
    4a38:	9c 87       	std	Y+12, r25	; 0x0c
    4a3a:	ad 87       	std	Y+13, r26	; 0x0d
    4a3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a40:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a46:	20 e0       	ldi	r18, 0x00	; 0
    4a48:	30 e0       	ldi	r19, 0x00	; 0
    4a4a:	4a e7       	ldi	r20, 0x7A	; 122
    4a4c:	55 e4       	ldi	r21, 0x45	; 69
    4a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a52:	dc 01       	movw	r26, r24
    4a54:	cb 01       	movw	r24, r22
    4a56:	8f 83       	std	Y+7, r24	; 0x07
    4a58:	98 87       	std	Y+8, r25	; 0x08
    4a5a:	a9 87       	std	Y+9, r26	; 0x09
    4a5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a60:	78 85       	ldd	r23, Y+8	; 0x08
    4a62:	89 85       	ldd	r24, Y+9	; 0x09
    4a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a66:	20 e0       	ldi	r18, 0x00	; 0
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	40 e8       	ldi	r20, 0x80	; 128
    4a6c:	5f e3       	ldi	r21, 0x3F	; 63
    4a6e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    4a72:	88 23       	and	r24, r24
    4a74:	2c f4       	brge	.+10     	; 0x4a80 <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    4a76:	81 e0       	ldi	r24, 0x01	; 1
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	9e 83       	std	Y+6, r25	; 0x06
    4a7c:	8d 83       	std	Y+5, r24	; 0x05
    4a7e:	3f c0       	rjmp	.+126    	; 0x4afe <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    4a80:	6f 81       	ldd	r22, Y+7	; 0x07
    4a82:	78 85       	ldd	r23, Y+8	; 0x08
    4a84:	89 85       	ldd	r24, Y+9	; 0x09
    4a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a88:	20 e0       	ldi	r18, 0x00	; 0
    4a8a:	3f ef       	ldi	r19, 0xFF	; 255
    4a8c:	4f e7       	ldi	r20, 0x7F	; 127
    4a8e:	57 e4       	ldi	r21, 0x47	; 71
    4a90:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    4a94:	18 16       	cp	r1, r24
    4a96:	4c f5       	brge	.+82     	; 0x4aea <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a98:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	40 e2       	ldi	r20, 0x20	; 32
    4aa6:	51 e4       	ldi	r21, 0x41	; 65
    4aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aac:	dc 01       	movw	r26, r24
    4aae:	cb 01       	movw	r24, r22
    4ab0:	bc 01       	movw	r22, r24
    4ab2:	cd 01       	movw	r24, r26
    4ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ab8:	dc 01       	movw	r26, r24
    4aba:	cb 01       	movw	r24, r22
    4abc:	9e 83       	std	Y+6, r25	; 0x06
    4abe:	8d 83       	std	Y+5, r24	; 0x05
    4ac0:	0f c0       	rjmp	.+30     	; 0x4ae0 <enu_PassByteAndLatch+0x372>
    4ac2:	80 e9       	ldi	r24, 0x90	; 144
    4ac4:	91 e0       	ldi	r25, 0x01	; 1
    4ac6:	9c 83       	std	Y+4, r25	; 0x04
    4ac8:	8b 83       	std	Y+3, r24	; 0x03
    4aca:	8b 81       	ldd	r24, Y+3	; 0x03
    4acc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ace:	01 97       	sbiw	r24, 0x01	; 1
    4ad0:	f1 f7       	brne	.-4      	; 0x4ace <enu_PassByteAndLatch+0x360>
    4ad2:	9c 83       	std	Y+4, r25	; 0x04
    4ad4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    4ada:	01 97       	sbiw	r24, 0x01	; 1
    4adc:	9e 83       	std	Y+6, r25	; 0x06
    4ade:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae4:	00 97       	sbiw	r24, 0x00	; 0
    4ae6:	69 f7       	brne	.-38     	; 0x4ac2 <enu_PassByteAndLatch+0x354>
    4ae8:	14 c0       	rjmp	.+40     	; 0x4b12 <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aea:	6f 81       	ldd	r22, Y+7	; 0x07
    4aec:	78 85       	ldd	r23, Y+8	; 0x08
    4aee:	89 85       	ldd	r24, Y+9	; 0x09
    4af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af6:	dc 01       	movw	r26, r24
    4af8:	cb 01       	movw	r24, r22
    4afa:	9e 83       	std	Y+6, r25	; 0x06
    4afc:	8d 83       	std	Y+5, r24	; 0x05
    4afe:	8d 81       	ldd	r24, Y+5	; 0x05
    4b00:	9e 81       	ldd	r25, Y+6	; 0x06
    4b02:	9a 83       	std	Y+2, r25	; 0x02
    4b04:	89 83       	std	Y+1, r24	; 0x01
    4b06:	89 81       	ldd	r24, Y+1	; 0x01
    4b08:	9a 81       	ldd	r25, Y+2	; 0x02
    4b0a:	01 97       	sbiw	r24, 0x01	; 1
    4b0c:	f1 f7       	brne	.-4      	; 0x4b0a <enu_PassByteAndLatch+0x39c>
    4b0e:	9a 83       	std	Y+2, r25	; 0x02
    4b10:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    4b12:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    4b14:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    4b16:	ac 96       	adiw	r28, 0x2c	; 44
    4b18:	0f b6       	in	r0, 0x3f	; 63
    4b1a:	f8 94       	cli
    4b1c:	de bf       	out	0x3e, r29	; 62
    4b1e:	0f be       	out	0x3f, r0	; 63
    4b20:	cd bf       	out	0x3d, r28	; 61
    4b22:	cf 91       	pop	r28
    4b24:	df 91       	pop	r29
    4b26:	08 95       	ret

00004b28 <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    4b28:	df 93       	push	r29
    4b2a:	cf 93       	push	r28
    4b2c:	cd b7       	in	r28, 0x3d	; 61
    4b2e:	de b7       	in	r29, 0x3e	; 62
    4b30:	27 97       	sbiw	r28, 0x07	; 7
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	f8 94       	cli
    4b36:	de bf       	out	0x3e, r29	; 62
    4b38:	0f be       	out	0x3f, r0	; 63
    4b3a:	cd bf       	out	0x3d, r28	; 61
    4b3c:	9c 83       	std	Y+4, r25	; 0x04
    4b3e:	8b 83       	std	Y+3, r24	; 0x03
    4b40:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    4b42:	81 e0       	ldi	r24, 0x01	; 1
    4b44:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    4b46:	8b 81       	ldd	r24, Y+3	; 0x03
    4b48:	9c 81       	ldd	r25, Y+4	; 0x04
    4b4a:	00 97       	sbiw	r24, 0x00	; 0
    4b4c:	09 f4       	brne	.+2      	; 0x4b50 <enu_AddCustomCharacter+0x28>
    4b4e:	79 c0       	rjmp	.+242    	; 0x4c42 <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    4b50:	8d 81       	ldd	r24, Y+5	; 0x05
    4b52:	88 30       	cpi	r24, 0x08	; 8
    4b54:	08 f0       	brcs	.+2      	; 0x4b58 <enu_AddCustomCharacter+0x30>
    4b56:	72 c0       	rjmp	.+228    	; 0x4c3c <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    4b58:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4b5a:	81 e0       	ldi	r24, 0x01	; 1
    4b5c:	61 e0       	ldi	r22, 0x01	; 1
    4b5e:	40 e0       	ldi	r20, 0x00	; 0
    4b60:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    4b64:	8d 81       	ldd	r24, Y+5	; 0x05
    4b66:	28 2f       	mov	r18, r24
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	3f 83       	std	Y+7, r19	; 0x07
    4b6c:	2e 83       	std	Y+6, r18	; 0x06
    4b6e:	8e 81       	ldd	r24, Y+6	; 0x06
    4b70:	9f 81       	ldd	r25, Y+7	; 0x07
    4b72:	83 30       	cpi	r24, 0x03	; 3
    4b74:	91 05       	cpc	r25, r1
    4b76:	a9 f1       	breq	.+106    	; 0x4be2 <enu_AddCustomCharacter+0xba>
    4b78:	2e 81       	ldd	r18, Y+6	; 0x06
    4b7a:	3f 81       	ldd	r19, Y+7	; 0x07
    4b7c:	24 30       	cpi	r18, 0x04	; 4
    4b7e:	31 05       	cpc	r19, r1
    4b80:	7c f4       	brge	.+30     	; 0x4ba0 <enu_AddCustomCharacter+0x78>
    4b82:	8e 81       	ldd	r24, Y+6	; 0x06
    4b84:	9f 81       	ldd	r25, Y+7	; 0x07
    4b86:	81 30       	cpi	r24, 0x01	; 1
    4b88:	91 05       	cpc	r25, r1
    4b8a:	19 f1       	breq	.+70     	; 0x4bd2 <enu_AddCustomCharacter+0xaa>
    4b8c:	2e 81       	ldd	r18, Y+6	; 0x06
    4b8e:	3f 81       	ldd	r19, Y+7	; 0x07
    4b90:	22 30       	cpi	r18, 0x02	; 2
    4b92:	31 05       	cpc	r19, r1
    4b94:	14 f5       	brge	.+68     	; 0x4bda <enu_AddCustomCharacter+0xb2>
    4b96:	8e 81       	ldd	r24, Y+6	; 0x06
    4b98:	9f 81       	ldd	r25, Y+7	; 0x07
    4b9a:	00 97       	sbiw	r24, 0x00	; 0
    4b9c:	b1 f0       	breq	.+44     	; 0x4bca <enu_AddCustomCharacter+0xa2>
    4b9e:	34 c0       	rjmp	.+104    	; 0x4c08 <enu_AddCustomCharacter+0xe0>
    4ba0:	2e 81       	ldd	r18, Y+6	; 0x06
    4ba2:	3f 81       	ldd	r19, Y+7	; 0x07
    4ba4:	25 30       	cpi	r18, 0x05	; 5
    4ba6:	31 05       	cpc	r19, r1
    4ba8:	21 f1       	breq	.+72     	; 0x4bf2 <enu_AddCustomCharacter+0xca>
    4baa:	8e 81       	ldd	r24, Y+6	; 0x06
    4bac:	9f 81       	ldd	r25, Y+7	; 0x07
    4bae:	85 30       	cpi	r24, 0x05	; 5
    4bb0:	91 05       	cpc	r25, r1
    4bb2:	dc f0       	brlt	.+54     	; 0x4bea <enu_AddCustomCharacter+0xc2>
    4bb4:	2e 81       	ldd	r18, Y+6	; 0x06
    4bb6:	3f 81       	ldd	r19, Y+7	; 0x07
    4bb8:	26 30       	cpi	r18, 0x06	; 6
    4bba:	31 05       	cpc	r19, r1
    4bbc:	f1 f0       	breq	.+60     	; 0x4bfa <enu_AddCustomCharacter+0xd2>
    4bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    4bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    4bc2:	87 30       	cpi	r24, 0x07	; 7
    4bc4:	91 05       	cpc	r25, r1
    4bc6:	e9 f0       	breq	.+58     	; 0x4c02 <enu_AddCustomCharacter+0xda>
    4bc8:	1f c0       	rjmp	.+62     	; 0x4c08 <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    4bca:	80 e4       	ldi	r24, 0x40	; 64
    4bcc:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
    4bd0:	1b c0       	rjmp	.+54     	; 0x4c08 <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    4bd2:	88 e4       	ldi	r24, 0x48	; 72
    4bd4:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
    4bd8:	17 c0       	rjmp	.+46     	; 0x4c08 <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    4bda:	80 e5       	ldi	r24, 0x50	; 80
    4bdc:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
    4be0:	13 c0       	rjmp	.+38     	; 0x4c08 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    4be2:	88 e5       	ldi	r24, 0x58	; 88
    4be4:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
    4be8:	0f c0       	rjmp	.+30     	; 0x4c08 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    4bea:	80 e6       	ldi	r24, 0x60	; 96
    4bec:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
    4bf0:	0b c0       	rjmp	.+22     	; 0x4c08 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    4bf2:	88 e6       	ldi	r24, 0x68	; 104
    4bf4:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
    4bf8:	07 c0       	rjmp	.+14     	; 0x4c08 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    4bfa:	80 e7       	ldi	r24, 0x70	; 112
    4bfc:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
    4c00:	03 c0       	rjmp	.+6      	; 0x4c08 <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    4c02:	88 e7       	ldi	r24, 0x78	; 120
    4c04:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	61 e0       	ldi	r22, 0x01	; 1
    4c0c:	41 e0       	ldi	r20, 0x01	; 1
    4c0e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    4c12:	19 82       	std	Y+1, r1	; 0x01
    4c14:	0e c0       	rjmp	.+28     	; 0x4c32 <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    4c16:	89 81       	ldd	r24, Y+1	; 0x01
    4c18:	28 2f       	mov	r18, r24
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c20:	fc 01       	movw	r30, r24
    4c22:	e2 0f       	add	r30, r18
    4c24:	f3 1f       	adc	r31, r19
    4c26:	80 81       	ld	r24, Z
    4c28:	0e 94 b7 23 	call	0x476e	; 0x476e <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    4c2c:	89 81       	ldd	r24, Y+1	; 0x01
    4c2e:	8f 5f       	subi	r24, 0xFF	; 255
    4c30:	89 83       	std	Y+1, r24	; 0x01
    4c32:	89 81       	ldd	r24, Y+1	; 0x01
    4c34:	88 30       	cpi	r24, 0x08	; 8
    4c36:	78 f3       	brcs	.-34     	; 0x4c16 <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    4c38:	1a 82       	std	Y+2, r1	; 0x02
    4c3a:	05 c0       	rjmp	.+10     	; 0x4c46 <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4c3c:	82 e0       	ldi	r24, 0x02	; 2
    4c3e:	8a 83       	std	Y+2, r24	; 0x02
    4c40:	02 c0       	rjmp	.+4      	; 0x4c46 <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4c42:	83 e0       	ldi	r24, 0x03	; 3
    4c44:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    4c46:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4c48:	27 96       	adiw	r28, 0x07	; 7
    4c4a:	0f b6       	in	r0, 0x3f	; 63
    4c4c:	f8 94       	cli
    4c4e:	de bf       	out	0x3e, r29	; 62
    4c50:	0f be       	out	0x3f, r0	; 63
    4c52:	cd bf       	out	0x3d, r28	; 61
    4c54:	cf 91       	pop	r28
    4c56:	df 91       	pop	r29
    4c58:	08 95       	ret

00004c5a <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    4c5a:	df 93       	push	r29
    4c5c:	cf 93       	push	r28
    4c5e:	00 d0       	rcall	.+0      	; 0x4c60 <enu_ConvertDigitToASCII+0x6>
    4c60:	0f 92       	push	r0
    4c62:	cd b7       	in	r28, 0x3d	; 61
    4c64:	de b7       	in	r29, 0x3e	; 62
    4c66:	9b 83       	std	Y+3, r25	; 0x03
    4c68:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    4c6a:	81 e0       	ldi	r24, 0x01	; 1
    4c6c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    4c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c70:	9b 81       	ldd	r25, Y+3	; 0x03
    4c72:	00 97       	sbiw	r24, 0x00	; 0
    4c74:	89 f0       	breq	.+34     	; 0x4c98 <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    4c76:	ea 81       	ldd	r30, Y+2	; 0x02
    4c78:	fb 81       	ldd	r31, Y+3	; 0x03
    4c7a:	80 81       	ld	r24, Z
    4c7c:	8a 30       	cpi	r24, 0x0A	; 10
    4c7e:	48 f4       	brcc	.+18     	; 0x4c92 <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    4c80:	ea 81       	ldd	r30, Y+2	; 0x02
    4c82:	fb 81       	ldd	r31, Y+3	; 0x03
    4c84:	80 81       	ld	r24, Z
    4c86:	80 5d       	subi	r24, 0xD0	; 208
    4c88:	ea 81       	ldd	r30, Y+2	; 0x02
    4c8a:	fb 81       	ldd	r31, Y+3	; 0x03
    4c8c:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    4c8e:	19 82       	std	Y+1, r1	; 0x01
    4c90:	05 c0       	rjmp	.+10     	; 0x4c9c <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    4c92:	82 e0       	ldi	r24, 0x02	; 2
    4c94:	89 83       	std	Y+1, r24	; 0x01
    4c96:	02 c0       	rjmp	.+4      	; 0x4c9c <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    4c98:	83 e0       	ldi	r24, 0x03	; 3
    4c9a:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    4c9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c9e:	0f 90       	pop	r0
    4ca0:	0f 90       	pop	r0
    4ca2:	0f 90       	pop	r0
    4ca4:	cf 91       	pop	r28
    4ca6:	df 91       	pop	r29
    4ca8:	08 95       	ret

00004caa <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    4caa:	ef 92       	push	r14
    4cac:	ff 92       	push	r15
    4cae:	0f 93       	push	r16
    4cb0:	1f 93       	push	r17
    4cb2:	df 93       	push	r29
    4cb4:	cf 93       	push	r28
    4cb6:	cd b7       	in	r28, 0x3d	; 61
    4cb8:	de b7       	in	r29, 0x3e	; 62
    4cba:	27 97       	sbiw	r28, 0x07	; 7
    4cbc:	0f b6       	in	r0, 0x3f	; 63
    4cbe:	f8 94       	cli
    4cc0:	de bf       	out	0x3e, r29	; 62
    4cc2:	0f be       	out	0x3f, r0	; 63
    4cc4:	cd bf       	out	0x3d, r28	; 61
    4cc6:	9f 83       	std	Y+7, r25	; 0x07
    4cc8:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    4cca:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    4ccc:	8e 81       	ldd	r24, Y+6	; 0x06
    4cce:	9f 81       	ldd	r25, Y+7	; 0x07
    4cd0:	00 97       	sbiw	r24, 0x00	; 0
    4cd2:	09 f4       	brne	.+2      	; 0x4cd6 <enu_ReverseInteger+0x2c>
    4cd4:	58 c0       	rjmp	.+176    	; 0x4d86 <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    4cd6:	19 82       	std	Y+1, r1	; 0x01
    4cd8:	1a 82       	std	Y+2, r1	; 0x02
    4cda:	1b 82       	std	Y+3, r1	; 0x03
    4cdc:	1c 82       	std	Y+4, r1	; 0x04
    4cde:	3c c0       	rjmp	.+120    	; 0x4d58 <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    4ce0:	89 81       	ldd	r24, Y+1	; 0x01
    4ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ce4:	ab 81       	ldd	r26, Y+3	; 0x03
    4ce6:	bc 81       	ldd	r27, Y+4	; 0x04
    4ce8:	2a e0       	ldi	r18, 0x0A	; 10
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	40 e0       	ldi	r20, 0x00	; 0
    4cee:	50 e0       	ldi	r21, 0x00	; 0
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	cd 01       	movw	r24, r26
    4cf4:	0e 94 bf 2b 	call	0x577e	; 0x577e <__mulsi3>
    4cf8:	7b 01       	movw	r14, r22
    4cfa:	8c 01       	movw	r16, r24
    4cfc:	ee 81       	ldd	r30, Y+6	; 0x06
    4cfe:	ff 81       	ldd	r31, Y+7	; 0x07
    4d00:	80 81       	ld	r24, Z
    4d02:	91 81       	ldd	r25, Z+1	; 0x01
    4d04:	a2 81       	ldd	r26, Z+2	; 0x02
    4d06:	b3 81       	ldd	r27, Z+3	; 0x03
    4d08:	2a e0       	ldi	r18, 0x0A	; 10
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	40 e0       	ldi	r20, 0x00	; 0
    4d0e:	50 e0       	ldi	r21, 0x00	; 0
    4d10:	bc 01       	movw	r22, r24
    4d12:	cd 01       	movw	r24, r26
    4d14:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__udivmodsi4>
    4d18:	dc 01       	movw	r26, r24
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	8e 0d       	add	r24, r14
    4d1e:	9f 1d       	adc	r25, r15
    4d20:	a0 1f       	adc	r26, r16
    4d22:	b1 1f       	adc	r27, r17
    4d24:	89 83       	std	Y+1, r24	; 0x01
    4d26:	9a 83       	std	Y+2, r25	; 0x02
    4d28:	ab 83       	std	Y+3, r26	; 0x03
    4d2a:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    4d2c:	ee 81       	ldd	r30, Y+6	; 0x06
    4d2e:	ff 81       	ldd	r31, Y+7	; 0x07
    4d30:	80 81       	ld	r24, Z
    4d32:	91 81       	ldd	r25, Z+1	; 0x01
    4d34:	a2 81       	ldd	r26, Z+2	; 0x02
    4d36:	b3 81       	ldd	r27, Z+3	; 0x03
    4d38:	2a e0       	ldi	r18, 0x0A	; 10
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	40 e0       	ldi	r20, 0x00	; 0
    4d3e:	50 e0       	ldi	r21, 0x00	; 0
    4d40:	bc 01       	movw	r22, r24
    4d42:	cd 01       	movw	r24, r26
    4d44:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__udivmodsi4>
    4d48:	da 01       	movw	r26, r20
    4d4a:	c9 01       	movw	r24, r18
    4d4c:	ee 81       	ldd	r30, Y+6	; 0x06
    4d4e:	ff 81       	ldd	r31, Y+7	; 0x07
    4d50:	80 83       	st	Z, r24
    4d52:	91 83       	std	Z+1, r25	; 0x01
    4d54:	a2 83       	std	Z+2, r26	; 0x02
    4d56:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    4d58:	ee 81       	ldd	r30, Y+6	; 0x06
    4d5a:	ff 81       	ldd	r31, Y+7	; 0x07
    4d5c:	80 81       	ld	r24, Z
    4d5e:	91 81       	ldd	r25, Z+1	; 0x01
    4d60:	a2 81       	ldd	r26, Z+2	; 0x02
    4d62:	b3 81       	ldd	r27, Z+3	; 0x03
    4d64:	00 97       	sbiw	r24, 0x00	; 0
    4d66:	a1 05       	cpc	r26, r1
    4d68:	b1 05       	cpc	r27, r1
    4d6a:	09 f0       	breq	.+2      	; 0x4d6e <enu_ReverseInteger+0xc4>
    4d6c:	b9 cf       	rjmp	.-142    	; 0x4ce0 <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    4d6e:	ee 81       	ldd	r30, Y+6	; 0x06
    4d70:	ff 81       	ldd	r31, Y+7	; 0x07
    4d72:	89 81       	ldd	r24, Y+1	; 0x01
    4d74:	9a 81       	ldd	r25, Y+2	; 0x02
    4d76:	ab 81       	ldd	r26, Y+3	; 0x03
    4d78:	bc 81       	ldd	r27, Y+4	; 0x04
    4d7a:	80 83       	st	Z, r24
    4d7c:	91 83       	std	Z+1, r25	; 0x01
    4d7e:	a2 83       	std	Z+2, r26	; 0x02
    4d80:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    4d82:	1d 82       	std	Y+5, r1	; 0x05
    4d84:	02 c0       	rjmp	.+4      	; 0x4d8a <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4d86:	83 e0       	ldi	r24, 0x03	; 3
    4d88:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    4d8a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4d8c:	27 96       	adiw	r28, 0x07	; 7
    4d8e:	0f b6       	in	r0, 0x3f	; 63
    4d90:	f8 94       	cli
    4d92:	de bf       	out	0x3e, r29	; 62
    4d94:	0f be       	out	0x3f, r0	; 63
    4d96:	cd bf       	out	0x3d, r28	; 61
    4d98:	cf 91       	pop	r28
    4d9a:	df 91       	pop	r29
    4d9c:	1f 91       	pop	r17
    4d9e:	0f 91       	pop	r16
    4da0:	ff 90       	pop	r15
    4da2:	ef 90       	pop	r14
    4da4:	08 95       	ret

00004da6 <enu_ConvertFloatToInteger>:

static ErrorState_t enu_ConvertFloatToInteger(f32* Copy_f32_DecimalDigits, u8 Copy_u8_FloatPrecision)
{
    4da6:	ef 92       	push	r14
    4da8:	ff 92       	push	r15
    4daa:	0f 93       	push	r16
    4dac:	1f 93       	push	r17
    4dae:	df 93       	push	r29
    4db0:	cf 93       	push	r28
    4db2:	cd b7       	in	r28, 0x3d	; 61
    4db4:	de b7       	in	r29, 0x3e	; 62
    4db6:	2c 97       	sbiw	r28, 0x0c	; 12
    4db8:	0f b6       	in	r0, 0x3f	; 63
    4dba:	f8 94       	cli
    4dbc:	de bf       	out	0x3e, r29	; 62
    4dbe:	0f be       	out	0x3f, r0	; 63
    4dc0:	cd bf       	out	0x3d, r28	; 61
    4dc2:	9b 87       	std	Y+11, r25	; 0x0b
    4dc4:	8a 87       	std	Y+10, r24	; 0x0a
    4dc6:	6c 87       	std	Y+12, r22	; 0x0c
    u8 Local_u8_ErrorFlag = ES_OK;
    4dc8:	19 86       	std	Y+9, r1	; 0x09
    u32 Local_u32_CheckVariable = 0;
    4dca:	1d 82       	std	Y+5, r1	; 0x05
    4dcc:	1e 82       	std	Y+6, r1	; 0x06
    4dce:	1f 82       	std	Y+7, r1	; 0x07
    4dd0:	18 86       	std	Y+8, r1	; 0x08
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    4dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    4dd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    4dd6:	00 97       	sbiw	r24, 0x00	; 0
    4dd8:	09 f4       	brne	.+2      	; 0x4ddc <enu_ConvertFloatToInteger+0x36>
    4dda:	90 c0       	rjmp	.+288    	; 0x4efc <enu_ConvertFloatToInteger+0x156>
    4ddc:	29 c0       	rjmp	.+82     	; 0x4e30 <enu_ConvertFloatToInteger+0x8a>
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
        {
            *Copy_f32_DecimalDigits *= 10;
    4dde:	ea 85       	ldd	r30, Y+10	; 0x0a
    4de0:	fb 85       	ldd	r31, Y+11	; 0x0b
    4de2:	80 81       	ld	r24, Z
    4de4:	91 81       	ldd	r25, Z+1	; 0x01
    4de6:	a2 81       	ldd	r26, Z+2	; 0x02
    4de8:	b3 81       	ldd	r27, Z+3	; 0x03
    4dea:	bc 01       	movw	r22, r24
    4dec:	cd 01       	movw	r24, r26
    4dee:	20 e0       	ldi	r18, 0x00	; 0
    4df0:	30 e0       	ldi	r19, 0x00	; 0
    4df2:	40 e2       	ldi	r20, 0x20	; 32
    4df4:	51 e4       	ldi	r21, 0x41	; 65
    4df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dfa:	dc 01       	movw	r26, r24
    4dfc:	cb 01       	movw	r24, r22
    4dfe:	ea 85       	ldd	r30, Y+10	; 0x0a
    4e00:	fb 85       	ldd	r31, Y+11	; 0x0b
    4e02:	80 83       	st	Z, r24
    4e04:	91 83       	std	Z+1, r25	; 0x01
    4e06:	a2 83       	std	Z+2, r26	; 0x02
    4e08:	b3 83       	std	Z+3, r27	; 0x03

            
            Local_u32_CheckVariable = (u32)(*Copy_f32_DecimalDigits);
    4e0a:	ea 85       	ldd	r30, Y+10	; 0x0a
    4e0c:	fb 85       	ldd	r31, Y+11	; 0x0b
    4e0e:	80 81       	ld	r24, Z
    4e10:	91 81       	ldd	r25, Z+1	; 0x01
    4e12:	a2 81       	ldd	r26, Z+2	; 0x02
    4e14:	b3 81       	ldd	r27, Z+3	; 0x03
    4e16:	bc 01       	movw	r22, r24
    4e18:	cd 01       	movw	r24, r26
    4e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e1e:	dc 01       	movw	r26, r24
    4e20:	cb 01       	movw	r24, r22
    4e22:	8d 83       	std	Y+5, r24	; 0x05
    4e24:	9e 83       	std	Y+6, r25	; 0x06
    4e26:	af 83       	std	Y+7, r26	; 0x07
    4e28:	b8 87       	std	Y+8, r27	; 0x08

            Copy_u8_FloatPrecision--;
    4e2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e2c:	81 50       	subi	r24, 0x01	; 1
    4e2e:	8c 87       	std	Y+12, r24	; 0x0c
    u32 Local_u32_CheckVariable = 0;
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
    4e30:	ea 85       	ldd	r30, Y+10	; 0x0a
    4e32:	fb 85       	ldd	r31, Y+11	; 0x0b
    4e34:	e0 80       	ld	r14, Z
    4e36:	f1 80       	ldd	r15, Z+1	; 0x01
    4e38:	02 81       	ldd	r16, Z+2	; 0x02
    4e3a:	13 81       	ldd	r17, Z+3	; 0x03
    4e3c:	6d 81       	ldd	r22, Y+5	; 0x05
    4e3e:	7e 81       	ldd	r23, Y+6	; 0x06
    4e40:	8f 81       	ldd	r24, Y+7	; 0x07
    4e42:	98 85       	ldd	r25, Y+8	; 0x08
    4e44:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
    4e48:	9b 01       	movw	r18, r22
    4e4a:	ac 01       	movw	r20, r24
    4e4c:	c8 01       	movw	r24, r16
    4e4e:	b7 01       	movw	r22, r14
    4e50:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4e54:	dc 01       	movw	r26, r24
    4e56:	cb 01       	movw	r24, r22
    4e58:	bc 01       	movw	r22, r24
    4e5a:	cd 01       	movw	r24, r26
    4e5c:	20 e0       	ldi	r18, 0x00	; 0
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	40 e0       	ldi	r20, 0x00	; 0
    4e62:	50 e0       	ldi	r21, 0x00	; 0
    4e64:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    4e68:	88 23       	and	r24, r24
    4e6a:	09 f0       	breq	.+2      	; 0x4e6e <enu_ConvertFloatToInteger+0xc8>
    4e6c:	b8 cf       	rjmp	.-144    	; 0x4dde <enu_ConvertFloatToInteger+0x38>
    4e6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e70:	88 23       	and	r24, r24
    4e72:	09 f4       	brne	.+2      	; 0x4e76 <enu_ConvertFloatToInteger+0xd0>
    4e74:	b4 cf       	rjmp	.-152    	; 0x4dde <enu_ConvertFloatToInteger+0x38>
            Copy_u8_FloatPrecision--;

        }


        Local_f32_TempDecimalDigits = *Copy_f32_DecimalDigits - Local_u32_CheckVariable;
    4e76:	ea 85       	ldd	r30, Y+10	; 0x0a
    4e78:	fb 85       	ldd	r31, Y+11	; 0x0b
    4e7a:	e0 80       	ld	r14, Z
    4e7c:	f1 80       	ldd	r15, Z+1	; 0x01
    4e7e:	02 81       	ldd	r16, Z+2	; 0x02
    4e80:	13 81       	ldd	r17, Z+3	; 0x03
    4e82:	6d 81       	ldd	r22, Y+5	; 0x05
    4e84:	7e 81       	ldd	r23, Y+6	; 0x06
    4e86:	8f 81       	ldd	r24, Y+7	; 0x07
    4e88:	98 85       	ldd	r25, Y+8	; 0x08
    4e8a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
    4e8e:	9b 01       	movw	r18, r22
    4e90:	ac 01       	movw	r20, r24
    4e92:	c8 01       	movw	r24, r16
    4e94:	b7 01       	movw	r22, r14
    4e96:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4e9a:	dc 01       	movw	r26, r24
    4e9c:	cb 01       	movw	r24, r22
    4e9e:	89 83       	std	Y+1, r24	; 0x01
    4ea0:	9a 83       	std	Y+2, r25	; 0x02
    4ea2:	ab 83       	std	Y+3, r26	; 0x03
    4ea4:	bc 83       	std	Y+4, r27	; 0x04
        Local_f32_TempDecimalDigits *= 10;
    4ea6:	69 81       	ldd	r22, Y+1	; 0x01
    4ea8:	7a 81       	ldd	r23, Y+2	; 0x02
    4eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    4eac:	9c 81       	ldd	r25, Y+4	; 0x04
    4eae:	20 e0       	ldi	r18, 0x00	; 0
    4eb0:	30 e0       	ldi	r19, 0x00	; 0
    4eb2:	40 e2       	ldi	r20, 0x20	; 32
    4eb4:	51 e4       	ldi	r21, 0x41	; 65
    4eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eba:	dc 01       	movw	r26, r24
    4ebc:	cb 01       	movw	r24, r22
    4ebe:	89 83       	std	Y+1, r24	; 0x01
    4ec0:	9a 83       	std	Y+2, r25	; 0x02
    4ec2:	ab 83       	std	Y+3, r26	; 0x03
    4ec4:	bc 83       	std	Y+4, r27	; 0x04

        // First decimal digit is acquired
        Local_u32_CheckVariable = Local_f32_TempDecimalDigits;
    4ec6:	69 81       	ldd	r22, Y+1	; 0x01
    4ec8:	7a 81       	ldd	r23, Y+2	; 0x02
    4eca:	8b 81       	ldd	r24, Y+3	; 0x03
    4ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	cb 01       	movw	r24, r22
    4ed6:	8d 83       	std	Y+5, r24	; 0x05
    4ed8:	9e 83       	std	Y+6, r25	; 0x06
    4eda:	af 83       	std	Y+7, r26	; 0x07
    4edc:	b8 87       	std	Y+8, r27	; 0x08

        //Rounding number
        if(Local_u32_CheckVariable >= 5)
    4ede:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee2:	af 81       	ldd	r26, Y+7	; 0x07
    4ee4:	b8 85       	ldd	r27, Y+8	; 0x08
    4ee6:	85 30       	cpi	r24, 0x05	; 5
    4ee8:	91 05       	cpc	r25, r1
    4eea:	a1 05       	cpc	r26, r1
    4eec:	b1 05       	cpc	r27, r1
    4eee:	40 f0       	brcs	.+16     	; 0x4f00 <enu_ConvertFloatToInteger+0x15a>
        {
            *Copy_f32_DecimalDigits++;
    4ef0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ef2:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ef4:	04 96       	adiw	r24, 0x04	; 4
    4ef6:	9b 87       	std	Y+11, r25	; 0x0b
    4ef8:	8a 87       	std	Y+10, r24	; 0x0a
    4efa:	02 c0       	rjmp	.+4      	; 0x4f00 <enu_ConvertFloatToInteger+0x15a>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4efc:	83 e0       	ldi	r24, 0x03	; 3
    4efe:	89 87       	std	Y+9, r24	; 0x09
    }

    return Local_u8_ErrorFlag;
    4f00:	89 85       	ldd	r24, Y+9	; 0x09
}
    4f02:	2c 96       	adiw	r28, 0x0c	; 12
    4f04:	0f b6       	in	r0, 0x3f	; 63
    4f06:	f8 94       	cli
    4f08:	de bf       	out	0x3e, r29	; 62
    4f0a:	0f be       	out	0x3f, r0	; 63
    4f0c:	cd bf       	out	0x3d, r28	; 61
    4f0e:	cf 91       	pop	r28
    4f10:	df 91       	pop	r29
    4f12:	1f 91       	pop	r17
    4f14:	0f 91       	pop	r16
    4f16:	ff 90       	pop	r15
    4f18:	ef 90       	pop	r14
    4f1a:	08 95       	ret

00004f1c <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    4f1c:	df 93       	push	r29
    4f1e:	cf 93       	push	r28
    4f20:	00 d0       	rcall	.+0      	; 0x4f22 <Keypad_enu_Initialization+0x6>
    4f22:	cd b7       	in	r28, 0x3d	; 61
    4f24:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4f26:	81 e0       	ldi	r24, 0x01	; 1
    4f28:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    4f2a:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    4f2c:	19 82       	std	Y+1, r1	; 0x01
    4f2e:	31 c0       	rjmp	.+98     	; 0x4f92 <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    4f30:	89 81       	ldd	r24, Y+1	; 0x01
    4f32:	88 2f       	mov	r24, r24
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	88 0f       	add	r24, r24
    4f38:	99 1f       	adc	r25, r25
    4f3a:	fc 01       	movw	r30, r24
    4f3c:	ee 57       	subi	r30, 0x7E	; 126
    4f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f40:	20 81       	ld	r18, Z
    4f42:	89 81       	ldd	r24, Y+1	; 0x01
    4f44:	88 2f       	mov	r24, r24
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	88 0f       	add	r24, r24
    4f4a:	99 1f       	adc	r25, r25
    4f4c:	fc 01       	movw	r30, r24
    4f4e:	ed 57       	subi	r30, 0x7D	; 125
    4f50:	fe 4f       	sbci	r31, 0xFE	; 254
    4f52:	90 81       	ld	r25, Z
    4f54:	82 2f       	mov	r24, r18
    4f56:	69 2f       	mov	r22, r25
    4f58:	40 e0       	ldi	r20, 0x00	; 0
    4f5a:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    4f5e:	89 81       	ldd	r24, Y+1	; 0x01
    4f60:	88 2f       	mov	r24, r24
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	88 0f       	add	r24, r24
    4f66:	99 1f       	adc	r25, r25
    4f68:	fc 01       	movw	r30, r24
    4f6a:	ee 57       	subi	r30, 0x7E	; 126
    4f6c:	fe 4f       	sbci	r31, 0xFE	; 254
    4f6e:	20 81       	ld	r18, Z
    4f70:	89 81       	ldd	r24, Y+1	; 0x01
    4f72:	88 2f       	mov	r24, r24
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	88 0f       	add	r24, r24
    4f78:	99 1f       	adc	r25, r25
    4f7a:	fc 01       	movw	r30, r24
    4f7c:	ed 57       	subi	r30, 0x7D	; 125
    4f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f80:	90 81       	ld	r25, Z
    4f82:	82 2f       	mov	r24, r18
    4f84:	69 2f       	mov	r22, r25
    4f86:	41 e0       	ldi	r20, 0x01	; 1
    4f88:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    4f8c:	89 81       	ldd	r24, Y+1	; 0x01
    4f8e:	8f 5f       	subi	r24, 0xFF	; 255
    4f90:	89 83       	std	Y+1, r24	; 0x01
    4f92:	89 81       	ldd	r24, Y+1	; 0x01
    4f94:	84 30       	cpi	r24, 0x04	; 4
    4f96:	60 f2       	brcs	.-104    	; 0x4f30 <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    4f98:	19 82       	std	Y+1, r1	; 0x01
    4f9a:	31 c0       	rjmp	.+98     	; 0x4ffe <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    4f9c:	89 81       	ldd	r24, Y+1	; 0x01
    4f9e:	88 2f       	mov	r24, r24
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	88 0f       	add	r24, r24
    4fa4:	99 1f       	adc	r25, r25
    4fa6:	fc 01       	movw	r30, r24
    4fa8:	e6 57       	subi	r30, 0x76	; 118
    4faa:	fe 4f       	sbci	r31, 0xFE	; 254
    4fac:	20 81       	ld	r18, Z
    4fae:	89 81       	ldd	r24, Y+1	; 0x01
    4fb0:	88 2f       	mov	r24, r24
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	88 0f       	add	r24, r24
    4fb6:	99 1f       	adc	r25, r25
    4fb8:	fc 01       	movw	r30, r24
    4fba:	e5 57       	subi	r30, 0x75	; 117
    4fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    4fbe:	90 81       	ld	r25, Z
    4fc0:	82 2f       	mov	r24, r18
    4fc2:	69 2f       	mov	r22, r25
    4fc4:	41 e0       	ldi	r20, 0x01	; 1
    4fc6:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    4fca:	89 81       	ldd	r24, Y+1	; 0x01
    4fcc:	88 2f       	mov	r24, r24
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	88 0f       	add	r24, r24
    4fd2:	99 1f       	adc	r25, r25
    4fd4:	fc 01       	movw	r30, r24
    4fd6:	e6 57       	subi	r30, 0x76	; 118
    4fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    4fda:	20 81       	ld	r18, Z
    4fdc:	89 81       	ldd	r24, Y+1	; 0x01
    4fde:	88 2f       	mov	r24, r24
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	88 0f       	add	r24, r24
    4fe4:	99 1f       	adc	r25, r25
    4fe6:	fc 01       	movw	r30, r24
    4fe8:	e5 57       	subi	r30, 0x75	; 117
    4fea:	fe 4f       	sbci	r31, 0xFE	; 254
    4fec:	90 81       	ld	r25, Z
    4fee:	82 2f       	mov	r24, r18
    4ff0:	69 2f       	mov	r22, r25
    4ff2:	40 e0       	ldi	r20, 0x00	; 0
    4ff4:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    4ff8:	89 81       	ldd	r24, Y+1	; 0x01
    4ffa:	8f 5f       	subi	r24, 0xFF	; 255
    4ffc:	89 83       	std	Y+1, r24	; 0x01
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01
    5000:	84 30       	cpi	r24, 0x04	; 4
    5002:	60 f2       	brcs	.-104    	; 0x4f9c <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    5004:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    5006:	8a 81       	ldd	r24, Y+2	; 0x02

}
    5008:	0f 90       	pop	r0
    500a:	0f 90       	pop	r0
    500c:	cf 91       	pop	r28
    500e:	df 91       	pop	r29
    5010:	08 95       	ret

00005012 <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    5012:	df 93       	push	r29
    5014:	cf 93       	push	r28
    5016:	cd b7       	in	r28, 0x3d	; 61
    5018:	de b7       	in	r29, 0x3e	; 62
    501a:	aa 97       	sbiw	r28, 0x2a	; 42
    501c:	0f b6       	in	r0, 0x3f	; 63
    501e:	f8 94       	cli
    5020:	de bf       	out	0x3e, r29	; 62
    5022:	0f be       	out	0x3f, r0	; 63
    5024:	cd bf       	out	0x3d, r28	; 61
    5026:	9d a3       	std	Y+37, r25	; 0x25
    5028:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    502a:	81 e0       	ldi	r24, 0x01	; 1
    502c:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    502e:	8c a1       	ldd	r24, Y+36	; 0x24
    5030:	9d a1       	ldd	r25, Y+37	; 0x25
    5032:	00 97       	sbiw	r24, 0x00	; 0
    5034:	09 f4       	brne	.+2      	; 0x5038 <Keypad_enu_GetButtonPressedValue+0x26>
    5036:	68 c1       	rjmp	.+720    	; 0x5308 <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    5038:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    503a:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    503c:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    503e:	ec a1       	ldd	r30, Y+36	; 0x24
    5040:	fd a1       	ldd	r31, Y+37	; 0x25
    5042:	8f ef       	ldi	r24, 0xFF	; 255
    5044:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    5046:	19 8a       	std	Y+17, r1	; 0x11
    5048:	5a c1       	rjmp	.+692    	; 0x52fe <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    504a:	89 89       	ldd	r24, Y+17	; 0x11
    504c:	88 2f       	mov	r24, r24
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	88 0f       	add	r24, r24
    5052:	99 1f       	adc	r25, r25
    5054:	fc 01       	movw	r30, r24
    5056:	ee 57       	subi	r30, 0x7E	; 126
    5058:	fe 4f       	sbci	r31, 0xFE	; 254
    505a:	40 81       	ld	r20, Z
    505c:	89 89       	ldd	r24, Y+17	; 0x11
    505e:	88 2f       	mov	r24, r24
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	88 0f       	add	r24, r24
    5064:	99 1f       	adc	r25, r25
    5066:	fc 01       	movw	r30, r24
    5068:	ed 57       	subi	r30, 0x7D	; 125
    506a:	fe 4f       	sbci	r31, 0xFE	; 254
    506c:	90 81       	ld	r25, Z
    506e:	9e 01       	movw	r18, r28
    5070:	2d 5e       	subi	r18, 0xED	; 237
    5072:	3f 4f       	sbci	r19, 0xFF	; 255
    5074:	84 2f       	mov	r24, r20
    5076:	69 2f       	mov	r22, r25
    5078:	a9 01       	movw	r20, r18
    507a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    507e:	8b 89       	ldd	r24, Y+19	; 0x13
    5080:	88 23       	and	r24, r24
    5082:	09 f0       	breq	.+2      	; 0x5086 <Keypad_enu_GetButtonPressedValue+0x74>
    5084:	36 c1       	rjmp	.+620    	; 0x52f2 <Keypad_enu_GetButtonPressedValue+0x2e0>
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	a0 e4       	ldi	r26, 0x40	; 64
    508c:	b0 e4       	ldi	r27, 0x40	; 64
    508e:	8b 87       	std	Y+11, r24	; 0x0b
    5090:	9c 87       	std	Y+12, r25	; 0x0c
    5092:	ad 87       	std	Y+13, r26	; 0x0d
    5094:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5096:	6b 85       	ldd	r22, Y+11	; 0x0b
    5098:	7c 85       	ldd	r23, Y+12	; 0x0c
    509a:	8d 85       	ldd	r24, Y+13	; 0x0d
    509c:	9e 85       	ldd	r25, Y+14	; 0x0e
    509e:	20 e0       	ldi	r18, 0x00	; 0
    50a0:	30 e0       	ldi	r19, 0x00	; 0
    50a2:	4a e7       	ldi	r20, 0x7A	; 122
    50a4:	55 e4       	ldi	r21, 0x45	; 69
    50a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50aa:	dc 01       	movw	r26, r24
    50ac:	cb 01       	movw	r24, r22
    50ae:	8f 83       	std	Y+7, r24	; 0x07
    50b0:	98 87       	std	Y+8, r25	; 0x08
    50b2:	a9 87       	std	Y+9, r26	; 0x09
    50b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50b6:	6f 81       	ldd	r22, Y+7	; 0x07
    50b8:	78 85       	ldd	r23, Y+8	; 0x08
    50ba:	89 85       	ldd	r24, Y+9	; 0x09
    50bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    50be:	20 e0       	ldi	r18, 0x00	; 0
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	40 e8       	ldi	r20, 0x80	; 128
    50c4:	5f e3       	ldi	r21, 0x3F	; 63
    50c6:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    50ca:	88 23       	and	r24, r24
    50cc:	2c f4       	brge	.+10     	; 0x50d8 <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    50ce:	81 e0       	ldi	r24, 0x01	; 1
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	9e 83       	std	Y+6, r25	; 0x06
    50d4:	8d 83       	std	Y+5, r24	; 0x05
    50d6:	3f c0       	rjmp	.+126    	; 0x5156 <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    50d8:	6f 81       	ldd	r22, Y+7	; 0x07
    50da:	78 85       	ldd	r23, Y+8	; 0x08
    50dc:	89 85       	ldd	r24, Y+9	; 0x09
    50de:	9a 85       	ldd	r25, Y+10	; 0x0a
    50e0:	20 e0       	ldi	r18, 0x00	; 0
    50e2:	3f ef       	ldi	r19, 0xFF	; 255
    50e4:	4f e7       	ldi	r20, 0x7F	; 127
    50e6:	57 e4       	ldi	r21, 0x47	; 71
    50e8:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    50ec:	18 16       	cp	r1, r24
    50ee:	4c f5       	brge	.+82     	; 0x5142 <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    50f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    50f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    50f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    50f8:	20 e0       	ldi	r18, 0x00	; 0
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	40 e2       	ldi	r20, 0x20	; 32
    50fe:	51 e4       	ldi	r21, 0x41	; 65
    5100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5104:	dc 01       	movw	r26, r24
    5106:	cb 01       	movw	r24, r22
    5108:	bc 01       	movw	r22, r24
    510a:	cd 01       	movw	r24, r26
    510c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5110:	dc 01       	movw	r26, r24
    5112:	cb 01       	movw	r24, r22
    5114:	9e 83       	std	Y+6, r25	; 0x06
    5116:	8d 83       	std	Y+5, r24	; 0x05
    5118:	0f c0       	rjmp	.+30     	; 0x5138 <Keypad_enu_GetButtonPressedValue+0x126>
    511a:	80 e9       	ldi	r24, 0x90	; 144
    511c:	91 e0       	ldi	r25, 0x01	; 1
    511e:	9c 83       	std	Y+4, r25	; 0x04
    5120:	8b 83       	std	Y+3, r24	; 0x03
    5122:	8b 81       	ldd	r24, Y+3	; 0x03
    5124:	9c 81       	ldd	r25, Y+4	; 0x04
    5126:	01 97       	sbiw	r24, 0x01	; 1
    5128:	f1 f7       	brne	.-4      	; 0x5126 <Keypad_enu_GetButtonPressedValue+0x114>
    512a:	9c 83       	std	Y+4, r25	; 0x04
    512c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    512e:	8d 81       	ldd	r24, Y+5	; 0x05
    5130:	9e 81       	ldd	r25, Y+6	; 0x06
    5132:	01 97       	sbiw	r24, 0x01	; 1
    5134:	9e 83       	std	Y+6, r25	; 0x06
    5136:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5138:	8d 81       	ldd	r24, Y+5	; 0x05
    513a:	9e 81       	ldd	r25, Y+6	; 0x06
    513c:	00 97       	sbiw	r24, 0x00	; 0
    513e:	69 f7       	brne	.-38     	; 0x511a <Keypad_enu_GetButtonPressedValue+0x108>
    5140:	14 c0       	rjmp	.+40     	; 0x516a <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5142:	6f 81       	ldd	r22, Y+7	; 0x07
    5144:	78 85       	ldd	r23, Y+8	; 0x08
    5146:	89 85       	ldd	r24, Y+9	; 0x09
    5148:	9a 85       	ldd	r25, Y+10	; 0x0a
    514a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    514e:	dc 01       	movw	r26, r24
    5150:	cb 01       	movw	r24, r22
    5152:	9e 83       	std	Y+6, r25	; 0x06
    5154:	8d 83       	std	Y+5, r24	; 0x05
    5156:	8d 81       	ldd	r24, Y+5	; 0x05
    5158:	9e 81       	ldd	r25, Y+6	; 0x06
    515a:	9a 83       	std	Y+2, r25	; 0x02
    515c:	89 83       	std	Y+1, r24	; 0x01
    515e:	89 81       	ldd	r24, Y+1	; 0x01
    5160:	9a 81       	ldd	r25, Y+2	; 0x02
    5162:	01 97       	sbiw	r24, 0x01	; 1
    5164:	f1 f7       	brne	.-4      	; 0x5162 <Keypad_enu_GetButtonPressedValue+0x150>
    5166:	9a 83       	std	Y+2, r25	; 0x02
    5168:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    516a:	89 89       	ldd	r24, Y+17	; 0x11
    516c:	88 2f       	mov	r24, r24
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	88 0f       	add	r24, r24
    5172:	99 1f       	adc	r25, r25
    5174:	fc 01       	movw	r30, r24
    5176:	ee 57       	subi	r30, 0x7E	; 126
    5178:	fe 4f       	sbci	r31, 0xFE	; 254
    517a:	40 81       	ld	r20, Z
    517c:	89 89       	ldd	r24, Y+17	; 0x11
    517e:	88 2f       	mov	r24, r24
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	88 0f       	add	r24, r24
    5184:	99 1f       	adc	r25, r25
    5186:	fc 01       	movw	r30, r24
    5188:	ed 57       	subi	r30, 0x7D	; 125
    518a:	fe 4f       	sbci	r31, 0xFE	; 254
    518c:	90 81       	ld	r25, Z
    518e:	9e 01       	movw	r18, r28
    5190:	2d 5e       	subi	r18, 0xED	; 237
    5192:	3f 4f       	sbci	r19, 0xFF	; 255
    5194:	84 2f       	mov	r24, r20
    5196:	69 2f       	mov	r22, r25
    5198:	a9 01       	movw	r20, r18
    519a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    519e:	8b 89       	ldd	r24, Y+19	; 0x13
    51a0:	88 23       	and	r24, r24
    51a2:	09 f0       	breq	.+2      	; 0x51a6 <Keypad_enu_GetButtonPressedValue+0x194>
    51a4:	a6 c0       	rjmp	.+332    	; 0x52f2 <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    51a6:	18 8a       	std	Y+16, r1	; 0x10
    51a8:	a0 c0       	rjmp	.+320    	; 0x52ea <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    51aa:	88 89       	ldd	r24, Y+16	; 0x10
    51ac:	88 2f       	mov	r24, r24
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	88 0f       	add	r24, r24
    51b2:	99 1f       	adc	r25, r25
    51b4:	fc 01       	movw	r30, r24
    51b6:	e6 57       	subi	r30, 0x76	; 118
    51b8:	fe 4f       	sbci	r31, 0xFE	; 254
    51ba:	20 81       	ld	r18, Z
    51bc:	88 89       	ldd	r24, Y+16	; 0x10
    51be:	88 2f       	mov	r24, r24
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	88 0f       	add	r24, r24
    51c4:	99 1f       	adc	r25, r25
    51c6:	fc 01       	movw	r30, r24
    51c8:	e5 57       	subi	r30, 0x75	; 117
    51ca:	fe 4f       	sbci	r31, 0xFE	; 254
    51cc:	90 81       	ld	r25, Z
    51ce:	82 2f       	mov	r24, r18
    51d0:	69 2f       	mov	r22, r25
    51d2:	41 e0       	ldi	r20, 0x01	; 1
    51d4:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    51d8:	89 89       	ldd	r24, Y+17	; 0x11
    51da:	88 2f       	mov	r24, r24
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	88 0f       	add	r24, r24
    51e0:	99 1f       	adc	r25, r25
    51e2:	fc 01       	movw	r30, r24
    51e4:	ee 57       	subi	r30, 0x7E	; 126
    51e6:	fe 4f       	sbci	r31, 0xFE	; 254
    51e8:	40 81       	ld	r20, Z
    51ea:	89 89       	ldd	r24, Y+17	; 0x11
    51ec:	88 2f       	mov	r24, r24
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	88 0f       	add	r24, r24
    51f2:	99 1f       	adc	r25, r25
    51f4:	fc 01       	movw	r30, r24
    51f6:	ed 57       	subi	r30, 0x7D	; 125
    51f8:	fe 4f       	sbci	r31, 0xFE	; 254
    51fa:	90 81       	ld	r25, Z
    51fc:	9e 01       	movw	r18, r28
    51fe:	2d 5e       	subi	r18, 0xED	; 237
    5200:	3f 4f       	sbci	r19, 0xFF	; 255
    5202:	84 2f       	mov	r24, r20
    5204:	69 2f       	mov	r22, r25
    5206:	a9 01       	movw	r20, r18
    5208:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    520c:	8b 89       	ldd	r24, Y+19	; 0x13
    520e:	81 30       	cpi	r24, 0x01	; 1
    5210:	09 f0       	breq	.+2      	; 0x5214 <Keypad_enu_GetButtonPressedValue+0x202>
    5212:	51 c0       	rjmp	.+162    	; 0x52b6 <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    5214:	ce 01       	movw	r24, r28
    5216:	44 96       	adiw	r24, 0x14	; 20
    5218:	9f a3       	std	Y+39, r25	; 0x27
    521a:	8e a3       	std	Y+38, r24	; 0x26
    521c:	e5 e9       	ldi	r30, 0x95	; 149
    521e:	f1 e0       	ldi	r31, 0x01	; 1
    5220:	f9 a7       	std	Y+41, r31	; 0x29
    5222:	e8 a7       	std	Y+40, r30	; 0x28
    5224:	f0 e1       	ldi	r31, 0x10	; 16
    5226:	fa a7       	std	Y+42, r31	; 0x2a
    5228:	e8 a5       	ldd	r30, Y+40	; 0x28
    522a:	f9 a5       	ldd	r31, Y+41	; 0x29
    522c:	00 80       	ld	r0, Z
    522e:	88 a5       	ldd	r24, Y+40	; 0x28
    5230:	99 a5       	ldd	r25, Y+41	; 0x29
    5232:	01 96       	adiw	r24, 0x01	; 1
    5234:	99 a7       	std	Y+41, r25	; 0x29
    5236:	88 a7       	std	Y+40, r24	; 0x28
    5238:	ee a1       	ldd	r30, Y+38	; 0x26
    523a:	ff a1       	ldd	r31, Y+39	; 0x27
    523c:	00 82       	st	Z, r0
    523e:	8e a1       	ldd	r24, Y+38	; 0x26
    5240:	9f a1       	ldd	r25, Y+39	; 0x27
    5242:	01 96       	adiw	r24, 0x01	; 1
    5244:	9f a3       	std	Y+39, r25	; 0x27
    5246:	8e a3       	std	Y+38, r24	; 0x26
    5248:	9a a5       	ldd	r25, Y+42	; 0x2a
    524a:	91 50       	subi	r25, 0x01	; 1
    524c:	9a a7       	std	Y+42, r25	; 0x2a
    524e:	ea a5       	ldd	r30, Y+42	; 0x2a
    5250:	ee 23       	and	r30, r30
    5252:	51 f7       	brne	.-44     	; 0x5228 <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    5254:	89 89       	ldd	r24, Y+17	; 0x11
    5256:	28 2f       	mov	r18, r24
    5258:	30 e0       	ldi	r19, 0x00	; 0
    525a:	88 89       	ldd	r24, Y+16	; 0x10
    525c:	48 2f       	mov	r20, r24
    525e:	50 e0       	ldi	r21, 0x00	; 0
    5260:	22 0f       	add	r18, r18
    5262:	33 1f       	adc	r19, r19
    5264:	22 0f       	add	r18, r18
    5266:	33 1f       	adc	r19, r19
    5268:	ce 01       	movw	r24, r28
    526a:	01 96       	adiw	r24, 0x01	; 1
    526c:	82 0f       	add	r24, r18
    526e:	93 1f       	adc	r25, r19
    5270:	84 0f       	add	r24, r20
    5272:	95 1f       	adc	r25, r21
    5274:	fc 01       	movw	r30, r24
    5276:	73 96       	adiw	r30, 0x13	; 19
    5278:	80 81       	ld	r24, Z
    527a:	ec a1       	ldd	r30, Y+36	; 0x24
    527c:	fd a1       	ldd	r31, Y+37	; 0x25
    527e:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    5280:	81 e0       	ldi	r24, 0x01	; 1
    5282:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    5284:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    5286:	88 89       	ldd	r24, Y+16	; 0x10
    5288:	88 2f       	mov	r24, r24
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	88 0f       	add	r24, r24
    528e:	99 1f       	adc	r25, r25
    5290:	fc 01       	movw	r30, r24
    5292:	e6 57       	subi	r30, 0x76	; 118
    5294:	fe 4f       	sbci	r31, 0xFE	; 254
    5296:	20 81       	ld	r18, Z
    5298:	88 89       	ldd	r24, Y+16	; 0x10
    529a:	88 2f       	mov	r24, r24
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	88 0f       	add	r24, r24
    52a0:	99 1f       	adc	r25, r25
    52a2:	fc 01       	movw	r30, r24
    52a4:	e5 57       	subi	r30, 0x75	; 117
    52a6:	fe 4f       	sbci	r31, 0xFE	; 254
    52a8:	90 81       	ld	r25, Z
    52aa:	82 2f       	mov	r24, r18
    52ac:	69 2f       	mov	r22, r25
    52ae:	40 e0       	ldi	r20, 0x00	; 0
    52b0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    52b4:	1e c0       	rjmp	.+60     	; 0x52f2 <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    52b6:	88 89       	ldd	r24, Y+16	; 0x10
    52b8:	88 2f       	mov	r24, r24
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	88 0f       	add	r24, r24
    52be:	99 1f       	adc	r25, r25
    52c0:	fc 01       	movw	r30, r24
    52c2:	e6 57       	subi	r30, 0x76	; 118
    52c4:	fe 4f       	sbci	r31, 0xFE	; 254
    52c6:	20 81       	ld	r18, Z
    52c8:	88 89       	ldd	r24, Y+16	; 0x10
    52ca:	88 2f       	mov	r24, r24
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	88 0f       	add	r24, r24
    52d0:	99 1f       	adc	r25, r25
    52d2:	fc 01       	movw	r30, r24
    52d4:	e5 57       	subi	r30, 0x75	; 117
    52d6:	fe 4f       	sbci	r31, 0xFE	; 254
    52d8:	90 81       	ld	r25, Z
    52da:	82 2f       	mov	r24, r18
    52dc:	69 2f       	mov	r22, r25
    52de:	40 e0       	ldi	r20, 0x00	; 0
    52e0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    52e4:	88 89       	ldd	r24, Y+16	; 0x10
    52e6:	8f 5f       	subi	r24, 0xFF	; 255
    52e8:	88 8b       	std	Y+16, r24	; 0x10
    52ea:	88 89       	ldd	r24, Y+16	; 0x10
    52ec:	84 30       	cpi	r24, 0x04	; 4
    52ee:	08 f4       	brcc	.+2      	; 0x52f2 <Keypad_enu_GetButtonPressedValue+0x2e0>
    52f0:	5c cf       	rjmp	.-328    	; 0x51aa <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    52f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    52f4:	88 23       	and	r24, r24
    52f6:	51 f4       	brne	.+20     	; 0x530c <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    52f8:	89 89       	ldd	r24, Y+17	; 0x11
    52fa:	8f 5f       	subi	r24, 0xFF	; 255
    52fc:	89 8b       	std	Y+17, r24	; 0x11
    52fe:	89 89       	ldd	r24, Y+17	; 0x11
    5300:	84 30       	cpi	r24, 0x04	; 4
    5302:	08 f4       	brcc	.+2      	; 0x5306 <Keypad_enu_GetButtonPressedValue+0x2f4>
    5304:	a2 ce       	rjmp	.-700    	; 0x504a <Keypad_enu_GetButtonPressedValue+0x38>
    5306:	02 c0       	rjmp	.+4      	; 0x530c <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    5308:	83 e0       	ldi	r24, 0x03	; 3
    530a:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    530c:	8a 89       	ldd	r24, Y+18	; 0x12

}
    530e:	aa 96       	adiw	r28, 0x2a	; 42
    5310:	0f b6       	in	r0, 0x3f	; 63
    5312:	f8 94       	cli
    5314:	de bf       	out	0x3e, r29	; 62
    5316:	0f be       	out	0x3f, r0	; 63
    5318:	cd bf       	out	0x3d, r28	; 61
    531a:	cf 91       	pop	r28
    531c:	df 91       	pop	r29
    531e:	08 95       	ret

00005320 <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    5320:	df 93       	push	r29
    5322:	cf 93       	push	r28
    5324:	0f 92       	push	r0
    5326:	cd b7       	in	r28, 0x3d	; 61
    5328:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    532a:	81 e0       	ldi	r24, 0x01	; 1
    532c:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    532e:	80 e0       	ldi	r24, 0x00	; 0
    5330:	64 e0       	ldi	r22, 0x04	; 4
    5332:	41 e0       	ldi	r20, 0x01	; 1
    5334:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    5338:	80 e0       	ldi	r24, 0x00	; 0
    533a:	65 e0       	ldi	r22, 0x05	; 5
    533c:	41 e0       	ldi	r20, 0x01	; 1
    533e:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    5342:	80 e0       	ldi	r24, 0x00	; 0
    5344:	66 e0       	ldi	r22, 0x06	; 6
    5346:	41 e0       	ldi	r20, 0x01	; 1
    5348:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    534c:	80 e0       	ldi	r24, 0x00	; 0
    534e:	67 e0       	ldi	r22, 0x07	; 7
    5350:	41 e0       	ldi	r20, 0x01	; 1
    5352:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    5356:	81 e0       	ldi	r24, 0x01	; 1
    5358:	62 e0       	ldi	r22, 0x02	; 2
    535a:	41 e0       	ldi	r20, 0x01	; 1
    535c:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    5360:	81 e0       	ldi	r24, 0x01	; 1
    5362:	61 e0       	ldi	r22, 0x01	; 1
    5364:	41 e0       	ldi	r20, 0x01	; 1
    5366:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    536a:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    536c:	89 81       	ldd	r24, Y+1	; 0x01

}
    536e:	0f 90       	pop	r0
    5370:	cf 91       	pop	r28
    5372:	df 91       	pop	r29
    5374:	08 95       	ret

00005376 <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    5376:	df 93       	push	r29
    5378:	cf 93       	push	r28
    537a:	00 d0       	rcall	.+0      	; 0x537c <Hexadecoder_enu_DisplayNum+0x6>
    537c:	cd b7       	in	r28, 0x3d	; 61
    537e:	de b7       	in	r29, 0x3e	; 62
    5380:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5382:	81 e0       	ldi	r24, 0x01	; 1
    5384:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    5386:	8a 81       	ldd	r24, Y+2	; 0x02
    5388:	8a 30       	cpi	r24, 0x0A	; 10
    538a:	40 f5       	brcc	.+80     	; 0x53dc <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    538c:	8a 81       	ldd	r24, Y+2	; 0x02
    538e:	98 2f       	mov	r25, r24
    5390:	91 70       	andi	r25, 0x01	; 1
    5392:	80 e0       	ldi	r24, 0x00	; 0
    5394:	64 e0       	ldi	r22, 0x04	; 4
    5396:	49 2f       	mov	r20, r25
    5398:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    539c:	8a 81       	ldd	r24, Y+2	; 0x02
    539e:	86 95       	lsr	r24
    53a0:	98 2f       	mov	r25, r24
    53a2:	91 70       	andi	r25, 0x01	; 1
    53a4:	80 e0       	ldi	r24, 0x00	; 0
    53a6:	65 e0       	ldi	r22, 0x05	; 5
    53a8:	49 2f       	mov	r20, r25
    53aa:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    53ae:	8a 81       	ldd	r24, Y+2	; 0x02
    53b0:	86 95       	lsr	r24
    53b2:	86 95       	lsr	r24
    53b4:	98 2f       	mov	r25, r24
    53b6:	91 70       	andi	r25, 0x01	; 1
    53b8:	80 e0       	ldi	r24, 0x00	; 0
    53ba:	66 e0       	ldi	r22, 0x06	; 6
    53bc:	49 2f       	mov	r20, r25
    53be:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    53c2:	8a 81       	ldd	r24, Y+2	; 0x02
    53c4:	86 95       	lsr	r24
    53c6:	86 95       	lsr	r24
    53c8:	86 95       	lsr	r24
    53ca:	98 2f       	mov	r25, r24
    53cc:	91 70       	andi	r25, 0x01	; 1
    53ce:	80 e0       	ldi	r24, 0x00	; 0
    53d0:	67 e0       	ldi	r22, 0x07	; 7
    53d2:	49 2f       	mov	r20, r25
    53d4:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    53d8:	19 82       	std	Y+1, r1	; 0x01
    53da:	02 c0       	rjmp	.+4      	; 0x53e0 <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    53dc:	82 e0       	ldi	r24, 0x02	; 2
    53de:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    53e0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    53e2:	0f 90       	pop	r0
    53e4:	0f 90       	pop	r0
    53e6:	cf 91       	pop	r28
    53e8:	df 91       	pop	r29
    53ea:	08 95       	ret

000053ec <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    53ec:	df 93       	push	r29
    53ee:	cf 93       	push	r28
    53f0:	00 d0       	rcall	.+0      	; 0x53f2 <Hexadecoder_enu_EnableSSG+0x6>
    53f2:	00 d0       	rcall	.+0      	; 0x53f4 <Hexadecoder_enu_EnableSSG+0x8>
    53f4:	cd b7       	in	r28, 0x3d	; 61
    53f6:	de b7       	in	r29, 0x3e	; 62
    53f8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    53fa:	81 e0       	ldi	r24, 0x01	; 1
    53fc:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    53fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5400:	28 2f       	mov	r18, r24
    5402:	30 e0       	ldi	r19, 0x00	; 0
    5404:	3c 83       	std	Y+4, r19	; 0x04
    5406:	2b 83       	std	Y+3, r18	; 0x03
    5408:	8b 81       	ldd	r24, Y+3	; 0x03
    540a:	9c 81       	ldd	r25, Y+4	; 0x04
    540c:	00 97       	sbiw	r24, 0x00	; 0
    540e:	31 f0       	breq	.+12     	; 0x541c <Hexadecoder_enu_EnableSSG+0x30>
    5410:	2b 81       	ldd	r18, Y+3	; 0x03
    5412:	3c 81       	ldd	r19, Y+4	; 0x04
    5414:	21 30       	cpi	r18, 0x01	; 1
    5416:	31 05       	cpc	r19, r1
    5418:	41 f0       	breq	.+16     	; 0x542a <Hexadecoder_enu_EnableSSG+0x3e>
    541a:	0e c0       	rjmp	.+28     	; 0x5438 <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    541c:	81 e0       	ldi	r24, 0x01	; 1
    541e:	62 e0       	ldi	r22, 0x02	; 2
    5420:	41 e0       	ldi	r20, 0x01	; 1
    5422:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5426:	19 82       	std	Y+1, r1	; 0x01
    5428:	09 c0       	rjmp	.+18     	; 0x543c <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    542a:	81 e0       	ldi	r24, 0x01	; 1
    542c:	61 e0       	ldi	r22, 0x01	; 1
    542e:	41 e0       	ldi	r20, 0x01	; 1
    5430:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5434:	19 82       	std	Y+1, r1	; 0x01
    5436:	02 c0       	rjmp	.+4      	; 0x543c <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5438:	82 e0       	ldi	r24, 0x02	; 2
    543a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    543c:	89 81       	ldd	r24, Y+1	; 0x01
}
    543e:	0f 90       	pop	r0
    5440:	0f 90       	pop	r0
    5442:	0f 90       	pop	r0
    5444:	0f 90       	pop	r0
    5446:	cf 91       	pop	r28
    5448:	df 91       	pop	r29
    544a:	08 95       	ret

0000544c <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    544c:	df 93       	push	r29
    544e:	cf 93       	push	r28
    5450:	00 d0       	rcall	.+0      	; 0x5452 <Hexadecoder_enu_DisableSSG+0x6>
    5452:	00 d0       	rcall	.+0      	; 0x5454 <Hexadecoder_enu_DisableSSG+0x8>
    5454:	cd b7       	in	r28, 0x3d	; 61
    5456:	de b7       	in	r29, 0x3e	; 62
    5458:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    545a:	81 e0       	ldi	r24, 0x01	; 1
    545c:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    545e:	8a 81       	ldd	r24, Y+2	; 0x02
    5460:	28 2f       	mov	r18, r24
    5462:	30 e0       	ldi	r19, 0x00	; 0
    5464:	3c 83       	std	Y+4, r19	; 0x04
    5466:	2b 83       	std	Y+3, r18	; 0x03
    5468:	8b 81       	ldd	r24, Y+3	; 0x03
    546a:	9c 81       	ldd	r25, Y+4	; 0x04
    546c:	00 97       	sbiw	r24, 0x00	; 0
    546e:	31 f0       	breq	.+12     	; 0x547c <Hexadecoder_enu_DisableSSG+0x30>
    5470:	2b 81       	ldd	r18, Y+3	; 0x03
    5472:	3c 81       	ldd	r19, Y+4	; 0x04
    5474:	21 30       	cpi	r18, 0x01	; 1
    5476:	31 05       	cpc	r19, r1
    5478:	41 f0       	breq	.+16     	; 0x548a <Hexadecoder_enu_DisableSSG+0x3e>
    547a:	0e c0       	rjmp	.+28     	; 0x5498 <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    547c:	81 e0       	ldi	r24, 0x01	; 1
    547e:	62 e0       	ldi	r22, 0x02	; 2
    5480:	40 e0       	ldi	r20, 0x00	; 0
    5482:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5486:	19 82       	std	Y+1, r1	; 0x01
    5488:	09 c0       	rjmp	.+18     	; 0x549c <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	61 e0       	ldi	r22, 0x01	; 1
    548e:	40 e0       	ldi	r20, 0x00	; 0
    5490:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5494:	19 82       	std	Y+1, r1	; 0x01
    5496:	02 c0       	rjmp	.+4      	; 0x549c <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5498:	82 e0       	ldi	r24, 0x02	; 2
    549a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    549c:	89 81       	ldd	r24, Y+1	; 0x01
}
    549e:	0f 90       	pop	r0
    54a0:	0f 90       	pop	r0
    54a2:	0f 90       	pop	r0
    54a4:	0f 90       	pop	r0
    54a6:	cf 91       	pop	r28
    54a8:	df 91       	pop	r29
    54aa:	08 95       	ret

000054ac <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    54ac:	df 93       	push	r29
    54ae:	cf 93       	push	r28
    54b0:	0f 92       	push	r0
    54b2:	cd b7       	in	r28, 0x3d	; 61
    54b4:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    54ba:	81 e0       	ldi	r24, 0x01	; 1
    54bc:	62 e0       	ldi	r22, 0x02	; 2
    54be:	40 e0       	ldi	r20, 0x00	; 0
    54c0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	61 e0       	ldi	r22, 0x01	; 1
    54c8:	40 e0       	ldi	r20, 0x00	; 0
    54ca:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    54ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    54d0:	0f 90       	pop	r0
    54d2:	cf 91       	pop	r28
    54d4:	df 91       	pop	r29
    54d6:	08 95       	ret

000054d8 <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    54d8:	df 93       	push	r29
    54da:	cf 93       	push	r28
    54dc:	00 d0       	rcall	.+0      	; 0x54de <Buzzer_enu_Initialization+0x6>
    54de:	cd b7       	in	r28, 0x3d	; 61
    54e0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    54e6:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    54e8:	19 82       	std	Y+1, r1	; 0x01
    54ea:	31 c0       	rjmp	.+98     	; 0x554e <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    54ec:	89 81       	ldd	r24, Y+1	; 0x01
    54ee:	88 2f       	mov	r24, r24
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	88 0f       	add	r24, r24
    54f4:	99 1f       	adc	r25, r25
    54f6:	fc 01       	movw	r30, r24
    54f8:	ed 56       	subi	r30, 0x6D	; 109
    54fa:	fe 4f       	sbci	r31, 0xFE	; 254
    54fc:	20 81       	ld	r18, Z
    54fe:	89 81       	ldd	r24, Y+1	; 0x01
    5500:	88 2f       	mov	r24, r24
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	88 0f       	add	r24, r24
    5506:	99 1f       	adc	r25, r25
    5508:	fc 01       	movw	r30, r24
    550a:	ec 56       	subi	r30, 0x6C	; 108
    550c:	fe 4f       	sbci	r31, 0xFE	; 254
    550e:	90 81       	ld	r25, Z
    5510:	82 2f       	mov	r24, r18
    5512:	69 2f       	mov	r22, r25
    5514:	41 e0       	ldi	r20, 0x01	; 1
    5516:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    551a:	89 81       	ldd	r24, Y+1	; 0x01
    551c:	88 2f       	mov	r24, r24
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	88 0f       	add	r24, r24
    5522:	99 1f       	adc	r25, r25
    5524:	fc 01       	movw	r30, r24
    5526:	ed 56       	subi	r30, 0x6D	; 109
    5528:	fe 4f       	sbci	r31, 0xFE	; 254
    552a:	20 81       	ld	r18, Z
    552c:	89 81       	ldd	r24, Y+1	; 0x01
    552e:	88 2f       	mov	r24, r24
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	88 0f       	add	r24, r24
    5534:	99 1f       	adc	r25, r25
    5536:	fc 01       	movw	r30, r24
    5538:	ec 56       	subi	r30, 0x6C	; 108
    553a:	fe 4f       	sbci	r31, 0xFE	; 254
    553c:	90 81       	ld	r25, Z
    553e:	82 2f       	mov	r24, r18
    5540:	69 2f       	mov	r22, r25
    5542:	40 e0       	ldi	r20, 0x00	; 0
    5544:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5548:	89 81       	ldd	r24, Y+1	; 0x01
    554a:	8f 5f       	subi	r24, 0xFF	; 255
    554c:	89 83       	std	Y+1, r24	; 0x01
    554e:	90 91 92 01 	lds	r25, 0x0192
    5552:	89 81       	ldd	r24, Y+1	; 0x01
    5554:	89 17       	cp	r24, r25
    5556:	50 f2       	brcs	.-108    	; 0x54ec <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    5558:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    555a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    555c:	0f 90       	pop	r0
    555e:	0f 90       	pop	r0
    5560:	cf 91       	pop	r28
    5562:	df 91       	pop	r29
    5564:	08 95       	ret

00005566 <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    5566:	df 93       	push	r29
    5568:	cf 93       	push	r28
    556a:	00 d0       	rcall	.+0      	; 0x556c <Buzzer_enu_TuronOnBuzzer+0x6>
    556c:	cd b7       	in	r28, 0x3d	; 61
    556e:	de b7       	in	r29, 0x3e	; 62
    5570:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    5576:	90 91 92 01 	lds	r25, 0x0192
    557a:	8a 81       	ldd	r24, Y+2	; 0x02
    557c:	89 17       	cp	r24, r25
    557e:	c8 f4       	brcc	.+50     	; 0x55b2 <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    5580:	8a 81       	ldd	r24, Y+2	; 0x02
    5582:	88 2f       	mov	r24, r24
    5584:	90 e0       	ldi	r25, 0x00	; 0
    5586:	88 0f       	add	r24, r24
    5588:	99 1f       	adc	r25, r25
    558a:	fc 01       	movw	r30, r24
    558c:	ed 56       	subi	r30, 0x6D	; 109
    558e:	fe 4f       	sbci	r31, 0xFE	; 254
    5590:	20 81       	ld	r18, Z
    5592:	8a 81       	ldd	r24, Y+2	; 0x02
    5594:	88 2f       	mov	r24, r24
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	88 0f       	add	r24, r24
    559a:	99 1f       	adc	r25, r25
    559c:	fc 01       	movw	r30, r24
    559e:	ec 56       	subi	r30, 0x6C	; 108
    55a0:	fe 4f       	sbci	r31, 0xFE	; 254
    55a2:	90 81       	ld	r25, Z
    55a4:	82 2f       	mov	r24, r18
    55a6:	69 2f       	mov	r22, r25
    55a8:	41 e0       	ldi	r20, 0x01	; 1
    55aa:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    55ae:	89 83       	std	Y+1, r24	; 0x01
    55b0:	02 c0       	rjmp	.+4      	; 0x55b6 <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    55b2:	82 e0       	ldi	r24, 0x02	; 2
    55b4:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    55b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    55b8:	0f 90       	pop	r0
    55ba:	0f 90       	pop	r0
    55bc:	cf 91       	pop	r28
    55be:	df 91       	pop	r29
    55c0:	08 95       	ret

000055c2 <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    55c2:	df 93       	push	r29
    55c4:	cf 93       	push	r28
    55c6:	00 d0       	rcall	.+0      	; 0x55c8 <Buzzer_enu_TuronOffBuzzer+0x6>
    55c8:	cd b7       	in	r28, 0x3d	; 61
    55ca:	de b7       	in	r29, 0x3e	; 62
    55cc:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    55ce:	81 e0       	ldi	r24, 0x01	; 1
    55d0:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    55d2:	90 91 92 01 	lds	r25, 0x0192
    55d6:	8a 81       	ldd	r24, Y+2	; 0x02
    55d8:	89 17       	cp	r24, r25
    55da:	c8 f4       	brcc	.+50     	; 0x560e <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    55dc:	8a 81       	ldd	r24, Y+2	; 0x02
    55de:	88 2f       	mov	r24, r24
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	88 0f       	add	r24, r24
    55e4:	99 1f       	adc	r25, r25
    55e6:	fc 01       	movw	r30, r24
    55e8:	ed 56       	subi	r30, 0x6D	; 109
    55ea:	fe 4f       	sbci	r31, 0xFE	; 254
    55ec:	20 81       	ld	r18, Z
    55ee:	8a 81       	ldd	r24, Y+2	; 0x02
    55f0:	88 2f       	mov	r24, r24
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	88 0f       	add	r24, r24
    55f6:	99 1f       	adc	r25, r25
    55f8:	fc 01       	movw	r30, r24
    55fa:	ec 56       	subi	r30, 0x6C	; 108
    55fc:	fe 4f       	sbci	r31, 0xFE	; 254
    55fe:	90 81       	ld	r25, Z
    5600:	82 2f       	mov	r24, r18
    5602:	69 2f       	mov	r22, r25
    5604:	40 e0       	ldi	r20, 0x00	; 0
    5606:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
    560a:	89 83       	std	Y+1, r24	; 0x01
    560c:	02 c0       	rjmp	.+4      	; 0x5612 <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    560e:	82 e0       	ldi	r24, 0x02	; 2
    5610:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    5612:	89 81       	ldd	r24, Y+1	; 0x01
}
    5614:	0f 90       	pop	r0
    5616:	0f 90       	pop	r0
    5618:	cf 91       	pop	r28
    561a:	df 91       	pop	r29
    561c:	08 95       	ret

0000561e <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    561e:	df 93       	push	r29
    5620:	cf 93       	push	r28
    5622:	00 d0       	rcall	.+0      	; 0x5624 <Buzzer_enu_TurnOnAllBuzzers+0x6>
    5624:	cd b7       	in	r28, 0x3d	; 61
    5626:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5628:	81 e0       	ldi	r24, 0x01	; 1
    562a:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    562c:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    562e:	19 82       	std	Y+1, r1	; 0x01
    5630:	1a c0       	rjmp	.+52     	; 0x5666 <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    5632:	89 81       	ldd	r24, Y+1	; 0x01
    5634:	88 2f       	mov	r24, r24
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	88 0f       	add	r24, r24
    563a:	99 1f       	adc	r25, r25
    563c:	fc 01       	movw	r30, r24
    563e:	ed 56       	subi	r30, 0x6D	; 109
    5640:	fe 4f       	sbci	r31, 0xFE	; 254
    5642:	20 81       	ld	r18, Z
    5644:	89 81       	ldd	r24, Y+1	; 0x01
    5646:	88 2f       	mov	r24, r24
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	88 0f       	add	r24, r24
    564c:	99 1f       	adc	r25, r25
    564e:	fc 01       	movw	r30, r24
    5650:	ec 56       	subi	r30, 0x6C	; 108
    5652:	fe 4f       	sbci	r31, 0xFE	; 254
    5654:	90 81       	ld	r25, Z
    5656:	82 2f       	mov	r24, r18
    5658:	69 2f       	mov	r22, r25
    565a:	41 e0       	ldi	r20, 0x01	; 1
    565c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5660:	89 81       	ldd	r24, Y+1	; 0x01
    5662:	8f 5f       	subi	r24, 0xFF	; 255
    5664:	89 83       	std	Y+1, r24	; 0x01
    5666:	90 91 92 01 	lds	r25, 0x0192
    566a:	89 81       	ldd	r24, Y+1	; 0x01
    566c:	89 17       	cp	r24, r25
    566e:	08 f3       	brcs	.-62     	; 0x5632 <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5670:	82 e0       	ldi	r24, 0x02	; 2
    5672:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    5674:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5676:	0f 90       	pop	r0
    5678:	0f 90       	pop	r0
    567a:	cf 91       	pop	r28
    567c:	df 91       	pop	r29
    567e:	08 95       	ret

00005680 <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    5680:	df 93       	push	r29
    5682:	cf 93       	push	r28
    5684:	00 d0       	rcall	.+0      	; 0x5686 <Buzzer_enu_TurnOffAllBuzzers+0x6>
    5686:	cd b7       	in	r28, 0x3d	; 61
    5688:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    568a:	81 e0       	ldi	r24, 0x01	; 1
    568c:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    568e:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5690:	19 82       	std	Y+1, r1	; 0x01
    5692:	1a c0       	rjmp	.+52     	; 0x56c8 <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    5694:	89 81       	ldd	r24, Y+1	; 0x01
    5696:	88 2f       	mov	r24, r24
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	88 0f       	add	r24, r24
    569c:	99 1f       	adc	r25, r25
    569e:	fc 01       	movw	r30, r24
    56a0:	ed 56       	subi	r30, 0x6D	; 109
    56a2:	fe 4f       	sbci	r31, 0xFE	; 254
    56a4:	20 81       	ld	r18, Z
    56a6:	89 81       	ldd	r24, Y+1	; 0x01
    56a8:	88 2f       	mov	r24, r24
    56aa:	90 e0       	ldi	r25, 0x00	; 0
    56ac:	88 0f       	add	r24, r24
    56ae:	99 1f       	adc	r25, r25
    56b0:	fc 01       	movw	r30, r24
    56b2:	ec 56       	subi	r30, 0x6C	; 108
    56b4:	fe 4f       	sbci	r31, 0xFE	; 254
    56b6:	90 81       	ld	r25, Z
    56b8:	82 2f       	mov	r24, r18
    56ba:	69 2f       	mov	r22, r25
    56bc:	40 e0       	ldi	r20, 0x00	; 0
    56be:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    56c2:	89 81       	ldd	r24, Y+1	; 0x01
    56c4:	8f 5f       	subi	r24, 0xFF	; 255
    56c6:	89 83       	std	Y+1, r24	; 0x01
    56c8:	90 91 92 01 	lds	r25, 0x0192
    56cc:	89 81       	ldd	r24, Y+1	; 0x01
    56ce:	89 17       	cp	r24, r25
    56d0:	08 f3       	brcs	.-62     	; 0x5694 <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    56d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    56d4:	0f 90       	pop	r0
    56d6:	0f 90       	pop	r0
    56d8:	cf 91       	pop	r28
    56da:	df 91       	pop	r29
    56dc:	08 95       	ret

000056de <SEND>:
#include <util/delay.h>
#include "../MCAL/USART/USART_Interface.h"
// #include <util/delay.h>

void SEND (void* Copy_pvid_Parameters)
{
    56de:	df 93       	push	r29
    56e0:	cf 93       	push	r28
    56e2:	00 d0       	rcall	.+0      	; 0x56e4 <SEND+0x6>
    56e4:	0f 92       	push	r0
    56e6:	cd b7       	in	r28, 0x3d	; 61
    56e8:	de b7       	in	r29, 0x3e	; 62
    56ea:	9b 83       	std	Y+3, r25	; 0x03
    56ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Flag = *(u8*)(Copy_pvid_Parameters);
    56ee:	ea 81       	ldd	r30, Y+2	; 0x02
    56f0:	fb 81       	ldd	r31, Y+3	; 0x03
    56f2:	80 81       	ld	r24, Z
    56f4:	89 83       	std	Y+1, r24	; 0x01

	Local_u8_Flag = True;
    56f6:	81 e0       	ldi	r24, 0x01	; 1
    56f8:	89 83       	std	Y+1, r24	; 0x01
}
    56fa:	0f 90       	pop	r0
    56fc:	0f 90       	pop	r0
    56fe:	0f 90       	pop	r0
    5700:	cf 91       	pop	r28
    5702:	df 91       	pop	r29
    5704:	08 95       	ret

00005706 <main>:
int main()
{
    5706:	df 93       	push	r29
    5708:	cf 93       	push	r28
    570a:	00 d0       	rcall	.+0      	; 0x570c <main+0x6>
    570c:	00 d0       	rcall	.+0      	; 0x570e <main+0x8>
    570e:	0f 92       	push	r0
    5710:	cd b7       	in	r28, 0x3d	; 61
    5712:	de b7       	in	r29, 0x3e	; 62
	u8 Local_au8_String [] = "H";
    5714:	80 91 60 00 	lds	r24, 0x0060
    5718:	90 91 61 00 	lds	r25, 0x0061
    571c:	9c 83       	std	Y+4, r25	; 0x04
    571e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8_Flag = False;
    5720:	1d 82       	std	Y+5, r1	; 0x05

	//Initializng USART
	USART_enu_Initialization();
    5722:	0e 94 cb 06 	call	0xd96	; 0xd96 <USART_enu_Initialization>

	//Setting CallBack Function
	u8 Flag = USART_enu_SetCallBack(SEND, &Local_u8_Flag);
    5726:	8f e6       	ldi	r24, 0x6F	; 111
    5728:	9b e2       	ldi	r25, 0x2B	; 43
    572a:	9e 01       	movw	r18, r28
    572c:	2b 5f       	subi	r18, 0xFB	; 251
    572e:	3f 4f       	sbci	r19, 0xFF	; 255
    5730:	b9 01       	movw	r22, r18
    5732:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <USART_enu_SetCallBack>
    5736:	8a 83       	std	Y+2, r24	; 0x02

	DIO_enu_SetPinDiretion(0,0,1);
    5738:	80 e0       	ldi	r24, 0x00	; 0
    573a:	60 e0       	ldi	r22, 0x00	; 0
    573c:	41 e0       	ldi	r20, 0x01	; 1
    573e:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_enu_SetPinDiretion>
	if(Flag == ES_WAIT)
    5742:	8a 81       	ldd	r24, Y+2	; 0x02
    5744:	84 30       	cpi	r24, 0x04	; 4
    5746:	39 f4       	brne	.+14     	; 0x5756 <main+0x50>
	{
		DIO_enu_GetPinValue(0,0,1);
    5748:	80 e0       	ldi	r24, 0x00	; 0
    574a:	60 e0       	ldi	r22, 0x00	; 0
    574c:	41 e0       	ldi	r20, 0x01	; 1
    574e:	50 e0       	ldi	r21, 0x00	; 0
    5750:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <DIO_enu_GetPinValue>
    5754:	05 c0       	rjmp	.+10     	; 0x5760 <main+0x5a>
	}
	else
	{
		DIO_enu_SetPinValue(0,0,0);
    5756:	80 e0       	ldi	r24, 0x00	; 0
    5758:	60 e0       	ldi	r22, 0x00	; 0
    575a:	40 e0       	ldi	r20, 0x00	; 0
    575c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <DIO_enu_SetPinValue>

	//USART_enu_SendData(0xFF);

	while(1)
	{
		u8 i = 5;
    5760:	85 e0       	ldi	r24, 0x05	; 5
    5762:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8_Flag)
    5764:	8d 81       	ldd	r24, Y+5	; 0x05
    5766:	88 23       	and	r24, r24
    5768:	d9 f3       	breq	.-10     	; 0x5760 <main+0x5a>
		{
			//USART_enu_SendString(Local_au8_String);
			USART_enu_SendData(i);
    576a:	89 81       	ldd	r24, Y+1	; 0x01
    576c:	88 2f       	mov	r24, r24
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	0e 94 5d 07 	call	0xeba	; 0xeba <USART_enu_SendData>

			Local_u8_Flag = False;
    5774:	1d 82       	std	Y+5, r1	; 0x05

			i++;
    5776:	89 81       	ldd	r24, Y+1	; 0x01
    5778:	8f 5f       	subi	r24, 0xFF	; 255
    577a:	89 83       	std	Y+1, r24	; 0x01
    577c:	f1 cf       	rjmp	.-30     	; 0x5760 <main+0x5a>

0000577e <__mulsi3>:
    577e:	62 9f       	mul	r22, r18
    5780:	d0 01       	movw	r26, r0
    5782:	73 9f       	mul	r23, r19
    5784:	f0 01       	movw	r30, r0
    5786:	82 9f       	mul	r24, r18
    5788:	e0 0d       	add	r30, r0
    578a:	f1 1d       	adc	r31, r1
    578c:	64 9f       	mul	r22, r20
    578e:	e0 0d       	add	r30, r0
    5790:	f1 1d       	adc	r31, r1
    5792:	92 9f       	mul	r25, r18
    5794:	f0 0d       	add	r31, r0
    5796:	83 9f       	mul	r24, r19
    5798:	f0 0d       	add	r31, r0
    579a:	74 9f       	mul	r23, r20
    579c:	f0 0d       	add	r31, r0
    579e:	65 9f       	mul	r22, r21
    57a0:	f0 0d       	add	r31, r0
    57a2:	99 27       	eor	r25, r25
    57a4:	72 9f       	mul	r23, r18
    57a6:	b0 0d       	add	r27, r0
    57a8:	e1 1d       	adc	r30, r1
    57aa:	f9 1f       	adc	r31, r25
    57ac:	63 9f       	mul	r22, r19
    57ae:	b0 0d       	add	r27, r0
    57b0:	e1 1d       	adc	r30, r1
    57b2:	f9 1f       	adc	r31, r25
    57b4:	bd 01       	movw	r22, r26
    57b6:	cf 01       	movw	r24, r30
    57b8:	11 24       	eor	r1, r1
    57ba:	08 95       	ret

000057bc <__udivmodsi4>:
    57bc:	a1 e2       	ldi	r26, 0x21	; 33
    57be:	1a 2e       	mov	r1, r26
    57c0:	aa 1b       	sub	r26, r26
    57c2:	bb 1b       	sub	r27, r27
    57c4:	fd 01       	movw	r30, r26
    57c6:	0d c0       	rjmp	.+26     	; 0x57e2 <__udivmodsi4_ep>

000057c8 <__udivmodsi4_loop>:
    57c8:	aa 1f       	adc	r26, r26
    57ca:	bb 1f       	adc	r27, r27
    57cc:	ee 1f       	adc	r30, r30
    57ce:	ff 1f       	adc	r31, r31
    57d0:	a2 17       	cp	r26, r18
    57d2:	b3 07       	cpc	r27, r19
    57d4:	e4 07       	cpc	r30, r20
    57d6:	f5 07       	cpc	r31, r21
    57d8:	20 f0       	brcs	.+8      	; 0x57e2 <__udivmodsi4_ep>
    57da:	a2 1b       	sub	r26, r18
    57dc:	b3 0b       	sbc	r27, r19
    57de:	e4 0b       	sbc	r30, r20
    57e0:	f5 0b       	sbc	r31, r21

000057e2 <__udivmodsi4_ep>:
    57e2:	66 1f       	adc	r22, r22
    57e4:	77 1f       	adc	r23, r23
    57e6:	88 1f       	adc	r24, r24
    57e8:	99 1f       	adc	r25, r25
    57ea:	1a 94       	dec	r1
    57ec:	69 f7       	brne	.-38     	; 0x57c8 <__udivmodsi4_loop>
    57ee:	60 95       	com	r22
    57f0:	70 95       	com	r23
    57f2:	80 95       	com	r24
    57f4:	90 95       	com	r25
    57f6:	9b 01       	movw	r18, r22
    57f8:	ac 01       	movw	r20, r24
    57fa:	bd 01       	movw	r22, r26
    57fc:	cf 01       	movw	r24, r30
    57fe:	08 95       	ret

00005800 <__divmodsi4>:
    5800:	97 fb       	bst	r25, 7
    5802:	09 2e       	mov	r0, r25
    5804:	05 26       	eor	r0, r21
    5806:	0e d0       	rcall	.+28     	; 0x5824 <__divmodsi4_neg1>
    5808:	57 fd       	sbrc	r21, 7
    580a:	04 d0       	rcall	.+8      	; 0x5814 <__divmodsi4_neg2>
    580c:	d7 df       	rcall	.-82     	; 0x57bc <__udivmodsi4>
    580e:	0a d0       	rcall	.+20     	; 0x5824 <__divmodsi4_neg1>
    5810:	00 1c       	adc	r0, r0
    5812:	38 f4       	brcc	.+14     	; 0x5822 <__divmodsi4_exit>

00005814 <__divmodsi4_neg2>:
    5814:	50 95       	com	r21
    5816:	40 95       	com	r20
    5818:	30 95       	com	r19
    581a:	21 95       	neg	r18
    581c:	3f 4f       	sbci	r19, 0xFF	; 255
    581e:	4f 4f       	sbci	r20, 0xFF	; 255
    5820:	5f 4f       	sbci	r21, 0xFF	; 255

00005822 <__divmodsi4_exit>:
    5822:	08 95       	ret

00005824 <__divmodsi4_neg1>:
    5824:	f6 f7       	brtc	.-4      	; 0x5822 <__divmodsi4_exit>
    5826:	90 95       	com	r25
    5828:	80 95       	com	r24
    582a:	70 95       	com	r23
    582c:	61 95       	neg	r22
    582e:	7f 4f       	sbci	r23, 0xFF	; 255
    5830:	8f 4f       	sbci	r24, 0xFF	; 255
    5832:	9f 4f       	sbci	r25, 0xFF	; 255
    5834:	08 95       	ret

00005836 <__prologue_saves__>:
    5836:	2f 92       	push	r2
    5838:	3f 92       	push	r3
    583a:	4f 92       	push	r4
    583c:	5f 92       	push	r5
    583e:	6f 92       	push	r6
    5840:	7f 92       	push	r7
    5842:	8f 92       	push	r8
    5844:	9f 92       	push	r9
    5846:	af 92       	push	r10
    5848:	bf 92       	push	r11
    584a:	cf 92       	push	r12
    584c:	df 92       	push	r13
    584e:	ef 92       	push	r14
    5850:	ff 92       	push	r15
    5852:	0f 93       	push	r16
    5854:	1f 93       	push	r17
    5856:	cf 93       	push	r28
    5858:	df 93       	push	r29
    585a:	cd b7       	in	r28, 0x3d	; 61
    585c:	de b7       	in	r29, 0x3e	; 62
    585e:	ca 1b       	sub	r28, r26
    5860:	db 0b       	sbc	r29, r27
    5862:	0f b6       	in	r0, 0x3f	; 63
    5864:	f8 94       	cli
    5866:	de bf       	out	0x3e, r29	; 62
    5868:	0f be       	out	0x3f, r0	; 63
    586a:	cd bf       	out	0x3d, r28	; 61
    586c:	09 94       	ijmp

0000586e <__epilogue_restores__>:
    586e:	2a 88       	ldd	r2, Y+18	; 0x12
    5870:	39 88       	ldd	r3, Y+17	; 0x11
    5872:	48 88       	ldd	r4, Y+16	; 0x10
    5874:	5f 84       	ldd	r5, Y+15	; 0x0f
    5876:	6e 84       	ldd	r6, Y+14	; 0x0e
    5878:	7d 84       	ldd	r7, Y+13	; 0x0d
    587a:	8c 84       	ldd	r8, Y+12	; 0x0c
    587c:	9b 84       	ldd	r9, Y+11	; 0x0b
    587e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5880:	b9 84       	ldd	r11, Y+9	; 0x09
    5882:	c8 84       	ldd	r12, Y+8	; 0x08
    5884:	df 80       	ldd	r13, Y+7	; 0x07
    5886:	ee 80       	ldd	r14, Y+6	; 0x06
    5888:	fd 80       	ldd	r15, Y+5	; 0x05
    588a:	0c 81       	ldd	r16, Y+4	; 0x04
    588c:	1b 81       	ldd	r17, Y+3	; 0x03
    588e:	aa 81       	ldd	r26, Y+2	; 0x02
    5890:	b9 81       	ldd	r27, Y+1	; 0x01
    5892:	ce 0f       	add	r28, r30
    5894:	d1 1d       	adc	r29, r1
    5896:	0f b6       	in	r0, 0x3f	; 63
    5898:	f8 94       	cli
    589a:	de bf       	out	0x3e, r29	; 62
    589c:	0f be       	out	0x3f, r0	; 63
    589e:	cd bf       	out	0x3d, r28	; 61
    58a0:	ed 01       	movw	r28, r26
    58a2:	08 95       	ret

000058a4 <_exit>:
    58a4:	f8 94       	cli

000058a6 <__stop_program>:
    58a6:	ff cf       	rjmp	.-2      	; 0x58a6 <__stop_program>
