
ModuleHub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003560  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  00800060  00003560  000035d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00004548  00000000  00000000  00003714  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001eb8  00000000  00000000  00007c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00009b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f1  00000000  00000000  00009cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000228e  00000000  00000000  00009ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ca  00000000  00000000  0000c133  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d4  00000000  00000000  0000d3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000e4d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c9  00000000  00000000  0000e694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ea  00000000  00000000  0000e95d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000f247  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 08 1a 	call	0x3410	; 0x3410 <main>
      7a:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__epilogue_restores__>

00000622 <__nesf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__nesf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__nesf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__nesf2+0x58>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__+0x18>

00000682 <__gtsf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gtsf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gtsf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gtsf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__+0x18>

000006e2 <__gesf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__gesf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__gesf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__gesf2+0x58>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__+0x18>

00000742 <__ltsf2>:
     742:	a8 e1       	ldi	r26, 0x18	; 24
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__+0x18>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	2d 83       	std	Y+5, r18	; 0x05
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	4f 83       	std	Y+7, r20	; 0x07
     75c:	58 87       	std	Y+8, r21	; 0x08
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	e8 2e       	mov	r14, r24
     762:	f1 2c       	mov	r15, r1
     764:	ec 0e       	add	r14, r28
     766:	fd 1e       	adc	r15, r29
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	b7 01       	movw	r22, r14
     76e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     772:	8e 01       	movw	r16, r28
     774:	0f 5e       	subi	r16, 0xEF	; 239
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	ce 01       	movw	r24, r28
     77a:	05 96       	adiw	r24, 0x05	; 5
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     782:	89 85       	ldd	r24, Y+9	; 0x09
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	40 f0       	brcs	.+16     	; 0x798 <__ltsf2+0x56>
     788:	89 89       	ldd	r24, Y+17	; 0x11
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	28 f0       	brcs	.+10     	; 0x798 <__ltsf2+0x56>
     78e:	c7 01       	movw	r24, r14
     790:	b8 01       	movw	r22, r16
     792:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     796:	01 c0       	rjmp	.+2      	; 0x79a <__ltsf2+0x58>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	68 96       	adiw	r28, 0x18	; 24
     79c:	e6 e0       	ldi	r30, 0x06	; 6
     79e:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__+0x18>

000007a2 <__fixsfsi>:
     7a2:	ac e0       	ldi	r26, 0x0C	; 12
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e7 ed       	ldi	r30, 0xD7	; 215
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x20>
     7ae:	69 83       	std	Y+1, r22	; 0x01
     7b0:	7a 83       	std	Y+2, r23	; 0x02
     7b2:	8b 83       	std	Y+3, r24	; 0x03
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	be 01       	movw	r22, r28
     7bc:	6b 5f       	subi	r22, 0xFB	; 251
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	82 30       	cpi	r24, 0x02	; 2
     7c8:	61 f1       	breq	.+88     	; 0x822 <__fixsfsi+0x80>
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	50 f1       	brcs	.+84     	; 0x822 <__fixsfsi+0x80>
     7ce:	84 30       	cpi	r24, 0x04	; 4
     7d0:	21 f4       	brne	.+8      	; 0x7da <__fixsfsi+0x38>
     7d2:	8e 81       	ldd	r24, Y+6	; 0x06
     7d4:	88 23       	and	r24, r24
     7d6:	51 f1       	breq	.+84     	; 0x82c <__fixsfsi+0x8a>
     7d8:	2e c0       	rjmp	.+92     	; 0x836 <__fixsfsi+0x94>
     7da:	2f 81       	ldd	r18, Y+7	; 0x07
     7dc:	38 85       	ldd	r19, Y+8	; 0x08
     7de:	37 fd       	sbrc	r19, 7
     7e0:	20 c0       	rjmp	.+64     	; 0x822 <__fixsfsi+0x80>
     7e2:	6e 81       	ldd	r22, Y+6	; 0x06
     7e4:	2f 31       	cpi	r18, 0x1F	; 31
     7e6:	31 05       	cpc	r19, r1
     7e8:	1c f0       	brlt	.+6      	; 0x7f0 <__fixsfsi+0x4e>
     7ea:	66 23       	and	r22, r22
     7ec:	f9 f0       	breq	.+62     	; 0x82c <__fixsfsi+0x8a>
     7ee:	23 c0       	rjmp	.+70     	; 0x836 <__fixsfsi+0x94>
     7f0:	8e e1       	ldi	r24, 0x1E	; 30
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	82 1b       	sub	r24, r18
     7f6:	93 0b       	sbc	r25, r19
     7f8:	29 85       	ldd	r18, Y+9	; 0x09
     7fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7fc:	4b 85       	ldd	r20, Y+11	; 0x0b
     7fe:	5c 85       	ldd	r21, Y+12	; 0x0c
     800:	04 c0       	rjmp	.+8      	; 0x80a <__fixsfsi+0x68>
     802:	56 95       	lsr	r21
     804:	47 95       	ror	r20
     806:	37 95       	ror	r19
     808:	27 95       	ror	r18
     80a:	8a 95       	dec	r24
     80c:	d2 f7       	brpl	.-12     	; 0x802 <__fixsfsi+0x60>
     80e:	66 23       	and	r22, r22
     810:	b1 f0       	breq	.+44     	; 0x83e <__fixsfsi+0x9c>
     812:	50 95       	com	r21
     814:	40 95       	com	r20
     816:	30 95       	com	r19
     818:	21 95       	neg	r18
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	4f 4f       	sbci	r20, 0xFF	; 255
     81e:	5f 4f       	sbci	r21, 0xFF	; 255
     820:	0e c0       	rjmp	.+28     	; 0x83e <__fixsfsi+0x9c>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	09 c0       	rjmp	.+18     	; 0x83e <__fixsfsi+0x9c>
     82c:	2f ef       	ldi	r18, 0xFF	; 255
     82e:	3f ef       	ldi	r19, 0xFF	; 255
     830:	4f ef       	ldi	r20, 0xFF	; 255
     832:	5f e7       	ldi	r21, 0x7F	; 127
     834:	04 c0       	rjmp	.+8      	; 0x83e <__fixsfsi+0x9c>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e8       	ldi	r21, 0x80	; 128
     83e:	b9 01       	movw	r22, r18
     840:	ca 01       	movw	r24, r20
     842:	2c 96       	adiw	r28, 0x0c	; 12
     844:	e2 e0       	ldi	r30, 0x02	; 2
     846:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x20>

0000084a <__floatunsisf>:
     84a:	a8 e0       	ldi	r26, 0x08	; 8
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__prologue_saves__+0x10>
     856:	7b 01       	movw	r14, r22
     858:	8c 01       	movw	r16, r24
     85a:	61 15       	cp	r22, r1
     85c:	71 05       	cpc	r23, r1
     85e:	81 05       	cpc	r24, r1
     860:	91 05       	cpc	r25, r1
     862:	19 f4       	brne	.+6      	; 0x86a <__stack+0xb>
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	89 83       	std	Y+1, r24	; 0x01
     868:	60 c0       	rjmp	.+192    	; 0x92a <__stack+0xcb>
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	89 83       	std	Y+1, r24	; 0x01
     86e:	8e e1       	ldi	r24, 0x1E	; 30
     870:	c8 2e       	mov	r12, r24
     872:	d1 2c       	mov	r13, r1
     874:	dc 82       	std	Y+4, r13	; 0x04
     876:	cb 82       	std	Y+3, r12	; 0x03
     878:	ed 82       	std	Y+5, r14	; 0x05
     87a:	fe 82       	std	Y+6, r15	; 0x06
     87c:	0f 83       	std	Y+7, r16	; 0x07
     87e:	18 87       	std	Y+8, r17	; 0x08
     880:	c8 01       	movw	r24, r16
     882:	b7 01       	movw	r22, r14
     884:	0e 94 9e 04 	call	0x93c	; 0x93c <__clzsi2>
     888:	fc 01       	movw	r30, r24
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	f7 ff       	sbrs	r31, 7
     88e:	3b c0       	rjmp	.+118    	; 0x906 <__stack+0xa7>
     890:	22 27       	eor	r18, r18
     892:	33 27       	eor	r19, r19
     894:	2e 1b       	sub	r18, r30
     896:	3f 0b       	sbc	r19, r31
     898:	57 01       	movw	r10, r14
     89a:	68 01       	movw	r12, r16
     89c:	02 2e       	mov	r0, r18
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	d6 94       	lsr	r13
     8a2:	c7 94       	ror	r12
     8a4:	b7 94       	ror	r11
     8a6:	a7 94       	ror	r10
     8a8:	0a 94       	dec	r0
     8aa:	d2 f7       	brpl	.-12     	; 0x8a0 <__stack+0x41>
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e0       	ldi	r26, 0x00	; 0
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	aa 1f       	adc	r26, r26
     8c4:	bb 1f       	adc	r27, r27
     8c6:	2a 95       	dec	r18
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	a1 09       	sbc	r26, r1
     8ce:	b1 09       	sbc	r27, r1
     8d0:	8e 21       	and	r24, r14
     8d2:	9f 21       	and	r25, r15
     8d4:	a0 23       	and	r26, r16
     8d6:	b1 23       	and	r27, r17
     8d8:	00 97       	sbiw	r24, 0x00	; 0
     8da:	a1 05       	cpc	r26, r1
     8dc:	b1 05       	cpc	r27, r1
     8de:	21 f0       	breq	.+8      	; 0x8e8 <__stack+0x89>
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	4a 29       	or	r20, r10
     8ea:	5b 29       	or	r21, r11
     8ec:	6c 29       	or	r22, r12
     8ee:	7d 29       	or	r23, r13
     8f0:	4d 83       	std	Y+5, r20	; 0x05
     8f2:	5e 83       	std	Y+6, r21	; 0x06
     8f4:	6f 83       	std	Y+7, r22	; 0x07
     8f6:	78 87       	std	Y+8, r23	; 0x08
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	8e 1b       	sub	r24, r30
     8fe:	9f 0b       	sbc	r25, r31
     900:	9c 83       	std	Y+4, r25	; 0x04
     902:	8b 83       	std	Y+3, r24	; 0x03
     904:	12 c0       	rjmp	.+36     	; 0x92a <__stack+0xcb>
     906:	30 97       	sbiw	r30, 0x00	; 0
     908:	81 f0       	breq	.+32     	; 0x92a <__stack+0xcb>
     90a:	0e 2e       	mov	r0, r30
     90c:	04 c0       	rjmp	.+8      	; 0x916 <__stack+0xb7>
     90e:	ee 0c       	add	r14, r14
     910:	ff 1c       	adc	r15, r15
     912:	00 1f       	adc	r16, r16
     914:	11 1f       	adc	r17, r17
     916:	0a 94       	dec	r0
     918:	d2 f7       	brpl	.-12     	; 0x90e <__stack+0xaf>
     91a:	ed 82       	std	Y+5, r14	; 0x05
     91c:	fe 82       	std	Y+6, r15	; 0x06
     91e:	0f 83       	std	Y+7, r16	; 0x07
     920:	18 87       	std	Y+8, r17	; 0x08
     922:	ce 1a       	sub	r12, r30
     924:	df 0a       	sbc	r13, r31
     926:	dc 82       	std	Y+4, r13	; 0x04
     928:	cb 82       	std	Y+3, r12	; 0x03
     92a:	1a 82       	std	Y+2, r1	; 0x02
     92c:	ce 01       	movw	r24, r28
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     934:	28 96       	adiw	r28, 0x08	; 8
     936:	ea e0       	ldi	r30, 0x0A	; 10
     938:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__epilogue_restores__+0x10>

0000093c <__clzsi2>:
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	7b 01       	movw	r14, r22
     946:	8c 01       	movw	r16, r24
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	e8 16       	cp	r14, r24
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	f8 06       	cpc	r15, r24
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	08 07       	cpc	r16, r24
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	18 07       	cpc	r17, r24
     958:	88 f4       	brcc	.+34     	; 0x97c <__clzsi2+0x40>
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	e8 16       	cp	r14, r24
     95e:	f1 04       	cpc	r15, r1
     960:	01 05       	cpc	r16, r1
     962:	11 05       	cpc	r17, r1
     964:	31 f0       	breq	.+12     	; 0x972 <__clzsi2+0x36>
     966:	28 f0       	brcs	.+10     	; 0x972 <__clzsi2+0x36>
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	17 c0       	rjmp	.+46     	; 0x9a0 <__clzsi2+0x64>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	12 c0       	rjmp	.+36     	; 0x9a0 <__clzsi2+0x64>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	e8 16       	cp	r14, r24
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	f8 06       	cpc	r15, r24
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	08 07       	cpc	r16, r24
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	18 07       	cpc	r17, r24
     98c:	28 f0       	brcs	.+10     	; 0x998 <__clzsi2+0x5c>
     98e:	88 e1       	ldi	r24, 0x18	; 24
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__clzsi2+0x64>
     998:	80 e1       	ldi	r24, 0x10	; 16
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	a0 e0       	ldi	r26, 0x00	; 0
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	20 e2       	ldi	r18, 0x20	; 32
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	28 1b       	sub	r18, r24
     9aa:	39 0b       	sbc	r19, r25
     9ac:	4a 0b       	sbc	r20, r26
     9ae:	5b 0b       	sbc	r21, r27
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <__clzsi2+0x7e>
     9b2:	16 95       	lsr	r17
     9b4:	07 95       	ror	r16
     9b6:	f7 94       	ror	r15
     9b8:	e7 94       	ror	r14
     9ba:	8a 95       	dec	r24
     9bc:	d2 f7       	brpl	.-12     	; 0x9b2 <__clzsi2+0x76>
     9be:	f7 01       	movw	r30, r14
     9c0:	e8 59       	subi	r30, 0x98	; 152
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	80 81       	ld	r24, Z
     9c6:	28 1b       	sub	r18, r24
     9c8:	31 09       	sbc	r19, r1
     9ca:	41 09       	sbc	r20, r1
     9cc:	51 09       	sbc	r21, r1
     9ce:	c9 01       	movw	r24, r18
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	08 95       	ret

000009da <__pack_f>:
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	fc 01       	movw	r30, r24
     9e6:	e4 80       	ldd	r14, Z+4	; 0x04
     9e8:	f5 80       	ldd	r15, Z+5	; 0x05
     9ea:	06 81       	ldd	r16, Z+6	; 0x06
     9ec:	17 81       	ldd	r17, Z+7	; 0x07
     9ee:	d1 80       	ldd	r13, Z+1	; 0x01
     9f0:	80 81       	ld	r24, Z
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	48 f4       	brcc	.+18     	; 0xa08 <__pack_f+0x2e>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	a0 e1       	ldi	r26, 0x10	; 16
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 2a       	or	r14, r24
     a00:	f9 2a       	or	r15, r25
     a02:	0a 2b       	or	r16, r26
     a04:	1b 2b       	or	r17, r27
     a06:	a5 c0       	rjmp	.+330    	; 0xb52 <__pack_f+0x178>
     a08:	84 30       	cpi	r24, 0x04	; 4
     a0a:	09 f4       	brne	.+2      	; 0xa0e <__pack_f+0x34>
     a0c:	9f c0       	rjmp	.+318    	; 0xb4c <__pack_f+0x172>
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	21 f4       	brne	.+8      	; 0xa1a <__pack_f+0x40>
     a12:	ee 24       	eor	r14, r14
     a14:	ff 24       	eor	r15, r15
     a16:	87 01       	movw	r16, r14
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <__pack_f+0x4a>
     a1a:	e1 14       	cp	r14, r1
     a1c:	f1 04       	cpc	r15, r1
     a1e:	01 05       	cpc	r16, r1
     a20:	11 05       	cpc	r17, r1
     a22:	19 f4       	brne	.+6      	; 0xa2a <__pack_f+0x50>
     a24:	e0 e0       	ldi	r30, 0x00	; 0
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	96 c0       	rjmp	.+300    	; 0xb56 <__pack_f+0x17c>
     a2a:	62 81       	ldd	r22, Z+2	; 0x02
     a2c:	73 81       	ldd	r23, Z+3	; 0x03
     a2e:	9f ef       	ldi	r25, 0xFF	; 255
     a30:	62 38       	cpi	r22, 0x82	; 130
     a32:	79 07       	cpc	r23, r25
     a34:	0c f0       	brlt	.+2      	; 0xa38 <__pack_f+0x5e>
     a36:	5b c0       	rjmp	.+182    	; 0xaee <__pack_f+0x114>
     a38:	22 e8       	ldi	r18, 0x82	; 130
     a3a:	3f ef       	ldi	r19, 0xFF	; 255
     a3c:	26 1b       	sub	r18, r22
     a3e:	37 0b       	sbc	r19, r23
     a40:	2a 31       	cpi	r18, 0x1A	; 26
     a42:	31 05       	cpc	r19, r1
     a44:	2c f0       	brlt	.+10     	; 0xa50 <__pack_f+0x76>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	2a c0       	rjmp	.+84     	; 0xaa4 <__pack_f+0xca>
     a50:	b8 01       	movw	r22, r16
     a52:	a7 01       	movw	r20, r14
     a54:	02 2e       	mov	r0, r18
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <__pack_f+0x86>
     a58:	76 95       	lsr	r23
     a5a:	67 95       	ror	r22
     a5c:	57 95       	ror	r21
     a5e:	47 95       	ror	r20
     a60:	0a 94       	dec	r0
     a62:	d2 f7       	brpl	.-12     	; 0xa58 <__pack_f+0x7e>
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__pack_f+0x9c>
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	aa 1f       	adc	r26, r26
     a74:	bb 1f       	adc	r27, r27
     a76:	2a 95       	dec	r18
     a78:	d2 f7       	brpl	.-12     	; 0xa6e <__pack_f+0x94>
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	a1 09       	sbc	r26, r1
     a7e:	b1 09       	sbc	r27, r1
     a80:	8e 21       	and	r24, r14
     a82:	9f 21       	and	r25, r15
     a84:	a0 23       	and	r26, r16
     a86:	b1 23       	and	r27, r17
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	a1 05       	cpc	r26, r1
     a8c:	b1 05       	cpc	r27, r1
     a8e:	21 f0       	breq	.+8      	; 0xa98 <__pack_f+0xbe>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	9a 01       	movw	r18, r20
     a9a:	ab 01       	movw	r20, r22
     a9c:	28 2b       	or	r18, r24
     a9e:	39 2b       	or	r19, r25
     aa0:	4a 2b       	or	r20, r26
     aa2:	5b 2b       	or	r21, r27
     aa4:	da 01       	movw	r26, r20
     aa6:	c9 01       	movw	r24, r18
     aa8:	8f 77       	andi	r24, 0x7F	; 127
     aaa:	90 70       	andi	r25, 0x00	; 0
     aac:	a0 70       	andi	r26, 0x00	; 0
     aae:	b0 70       	andi	r27, 0x00	; 0
     ab0:	80 34       	cpi	r24, 0x40	; 64
     ab2:	91 05       	cpc	r25, r1
     ab4:	a1 05       	cpc	r26, r1
     ab6:	b1 05       	cpc	r27, r1
     ab8:	39 f4       	brne	.+14     	; 0xac8 <__pack_f+0xee>
     aba:	27 ff       	sbrs	r18, 7
     abc:	09 c0       	rjmp	.+18     	; 0xad0 <__pack_f+0xf6>
     abe:	20 5c       	subi	r18, 0xC0	; 192
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	4f 4f       	sbci	r20, 0xFF	; 255
     ac4:	5f 4f       	sbci	r21, 0xFF	; 255
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__pack_f+0xf6>
     ac8:	21 5c       	subi	r18, 0xC1	; 193
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	4f 4f       	sbci	r20, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	e0 e0       	ldi	r30, 0x00	; 0
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	20 30       	cpi	r18, 0x00	; 0
     ad6:	a0 e0       	ldi	r26, 0x00	; 0
     ad8:	3a 07       	cpc	r19, r26
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	4a 07       	cpc	r20, r26
     ade:	a0 e4       	ldi	r26, 0x40	; 64
     ae0:	5a 07       	cpc	r21, r26
     ae2:	10 f0       	brcs	.+4      	; 0xae8 <__pack_f+0x10e>
     ae4:	e1 e0       	ldi	r30, 0x01	; 1
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	79 01       	movw	r14, r18
     aea:	8a 01       	movw	r16, r20
     aec:	27 c0       	rjmp	.+78     	; 0xb3c <__pack_f+0x162>
     aee:	60 38       	cpi	r22, 0x80	; 128
     af0:	71 05       	cpc	r23, r1
     af2:	64 f5       	brge	.+88     	; 0xb4c <__pack_f+0x172>
     af4:	fb 01       	movw	r30, r22
     af6:	e1 58       	subi	r30, 0x81	; 129
     af8:	ff 4f       	sbci	r31, 0xFF	; 255
     afa:	d8 01       	movw	r26, r16
     afc:	c7 01       	movw	r24, r14
     afe:	8f 77       	andi	r24, 0x7F	; 127
     b00:	90 70       	andi	r25, 0x00	; 0
     b02:	a0 70       	andi	r26, 0x00	; 0
     b04:	b0 70       	andi	r27, 0x00	; 0
     b06:	80 34       	cpi	r24, 0x40	; 64
     b08:	91 05       	cpc	r25, r1
     b0a:	a1 05       	cpc	r26, r1
     b0c:	b1 05       	cpc	r27, r1
     b0e:	39 f4       	brne	.+14     	; 0xb1e <__pack_f+0x144>
     b10:	e7 fe       	sbrs	r14, 7
     b12:	0d c0       	rjmp	.+26     	; 0xb2e <__pack_f+0x154>
     b14:	80 e4       	ldi	r24, 0x40	; 64
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	a0 e0       	ldi	r26, 0x00	; 0
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <__pack_f+0x14c>
     b1e:	8f e3       	ldi	r24, 0x3F	; 63
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e8 0e       	add	r14, r24
     b28:	f9 1e       	adc	r15, r25
     b2a:	0a 1f       	adc	r16, r26
     b2c:	1b 1f       	adc	r17, r27
     b2e:	17 ff       	sbrs	r17, 7
     b30:	05 c0       	rjmp	.+10     	; 0xb3c <__pack_f+0x162>
     b32:	16 95       	lsr	r17
     b34:	07 95       	ror	r16
     b36:	f7 94       	ror	r15
     b38:	e7 94       	ror	r14
     b3a:	31 96       	adiw	r30, 0x01	; 1
     b3c:	87 e0       	ldi	r24, 0x07	; 7
     b3e:	16 95       	lsr	r17
     b40:	07 95       	ror	r16
     b42:	f7 94       	ror	r15
     b44:	e7 94       	ror	r14
     b46:	8a 95       	dec	r24
     b48:	d1 f7       	brne	.-12     	; 0xb3e <__pack_f+0x164>
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x17c>
     b4c:	ee 24       	eor	r14, r14
     b4e:	ff 24       	eor	r15, r15
     b50:	87 01       	movw	r16, r14
     b52:	ef ef       	ldi	r30, 0xFF	; 255
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	6e 2f       	mov	r22, r30
     b58:	67 95       	ror	r22
     b5a:	66 27       	eor	r22, r22
     b5c:	67 95       	ror	r22
     b5e:	90 2f       	mov	r25, r16
     b60:	9f 77       	andi	r25, 0x7F	; 127
     b62:	d7 94       	ror	r13
     b64:	dd 24       	eor	r13, r13
     b66:	d7 94       	ror	r13
     b68:	8e 2f       	mov	r24, r30
     b6a:	86 95       	lsr	r24
     b6c:	49 2f       	mov	r20, r25
     b6e:	46 2b       	or	r20, r22
     b70:	58 2f       	mov	r21, r24
     b72:	5d 29       	or	r21, r13
     b74:	b7 01       	movw	r22, r14
     b76:	ca 01       	movw	r24, r20
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	08 95       	ret

00000b84 <__unpack_f>:
     b84:	fc 01       	movw	r30, r24
     b86:	db 01       	movw	r26, r22
     b88:	40 81       	ld	r20, Z
     b8a:	51 81       	ldd	r21, Z+1	; 0x01
     b8c:	22 81       	ldd	r18, Z+2	; 0x02
     b8e:	62 2f       	mov	r22, r18
     b90:	6f 77       	andi	r22, 0x7F	; 127
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	22 1f       	adc	r18, r18
     b96:	22 27       	eor	r18, r18
     b98:	22 1f       	adc	r18, r18
     b9a:	93 81       	ldd	r25, Z+3	; 0x03
     b9c:	89 2f       	mov	r24, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	82 2b       	or	r24, r18
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	99 1f       	adc	r25, r25
     ba8:	99 27       	eor	r25, r25
     baa:	99 1f       	adc	r25, r25
     bac:	11 96       	adiw	r26, 0x01	; 1
     bae:	9c 93       	st	X, r25
     bb0:	11 97       	sbiw	r26, 0x01	; 1
     bb2:	21 15       	cp	r18, r1
     bb4:	31 05       	cpc	r19, r1
     bb6:	a9 f5       	brne	.+106    	; 0xc22 <__unpack_f+0x9e>
     bb8:	41 15       	cp	r20, r1
     bba:	51 05       	cpc	r21, r1
     bbc:	61 05       	cpc	r22, r1
     bbe:	71 05       	cpc	r23, r1
     bc0:	11 f4       	brne	.+4      	; 0xbc6 <__unpack_f+0x42>
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	37 c0       	rjmp	.+110    	; 0xc34 <__unpack_f+0xb0>
     bc6:	82 e8       	ldi	r24, 0x82	; 130
     bc8:	9f ef       	ldi	r25, 0xFF	; 255
     bca:	13 96       	adiw	r26, 0x03	; 3
     bcc:	9c 93       	st	X, r25
     bce:	8e 93       	st	-X, r24
     bd0:	12 97       	sbiw	r26, 0x02	; 2
     bd2:	9a 01       	movw	r18, r20
     bd4:	ab 01       	movw	r20, r22
     bd6:	67 e0       	ldi	r22, 0x07	; 7
     bd8:	22 0f       	add	r18, r18
     bda:	33 1f       	adc	r19, r19
     bdc:	44 1f       	adc	r20, r20
     bde:	55 1f       	adc	r21, r21
     be0:	6a 95       	dec	r22
     be2:	d1 f7       	brne	.-12     	; 0xbd8 <__unpack_f+0x54>
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	8c 93       	st	X, r24
     be8:	0d c0       	rjmp	.+26     	; 0xc04 <__unpack_f+0x80>
     bea:	22 0f       	add	r18, r18
     bec:	33 1f       	adc	r19, r19
     bee:	44 1f       	adc	r20, r20
     bf0:	55 1f       	adc	r21, r21
     bf2:	12 96       	adiw	r26, 0x02	; 2
     bf4:	8d 91       	ld	r24, X+
     bf6:	9c 91       	ld	r25, X
     bf8:	13 97       	sbiw	r26, 0x03	; 3
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	13 96       	adiw	r26, 0x03	; 3
     bfe:	9c 93       	st	X, r25
     c00:	8e 93       	st	-X, r24
     c02:	12 97       	sbiw	r26, 0x02	; 2
     c04:	20 30       	cpi	r18, 0x00	; 0
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	38 07       	cpc	r19, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	48 07       	cpc	r20, r24
     c0e:	80 e4       	ldi	r24, 0x40	; 64
     c10:	58 07       	cpc	r21, r24
     c12:	58 f3       	brcs	.-42     	; 0xbea <__unpack_f+0x66>
     c14:	14 96       	adiw	r26, 0x04	; 4
     c16:	2d 93       	st	X+, r18
     c18:	3d 93       	st	X+, r19
     c1a:	4d 93       	st	X+, r20
     c1c:	5c 93       	st	X, r21
     c1e:	17 97       	sbiw	r26, 0x07	; 7
     c20:	08 95       	ret
     c22:	2f 3f       	cpi	r18, 0xFF	; 255
     c24:	31 05       	cpc	r19, r1
     c26:	79 f4       	brne	.+30     	; 0xc46 <__unpack_f+0xc2>
     c28:	41 15       	cp	r20, r1
     c2a:	51 05       	cpc	r21, r1
     c2c:	61 05       	cpc	r22, r1
     c2e:	71 05       	cpc	r23, r1
     c30:	19 f4       	brne	.+6      	; 0xc38 <__unpack_f+0xb4>
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	8c 93       	st	X, r24
     c36:	08 95       	ret
     c38:	64 ff       	sbrs	r22, 4
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <__unpack_f+0xbe>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	8c 93       	st	X, r24
     c40:	12 c0       	rjmp	.+36     	; 0xc66 <__unpack_f+0xe2>
     c42:	1c 92       	st	X, r1
     c44:	10 c0       	rjmp	.+32     	; 0xc66 <__unpack_f+0xe2>
     c46:	2f 57       	subi	r18, 0x7F	; 127
     c48:	30 40       	sbci	r19, 0x00	; 0
     c4a:	13 96       	adiw	r26, 0x03	; 3
     c4c:	3c 93       	st	X, r19
     c4e:	2e 93       	st	-X, r18
     c50:	12 97       	sbiw	r26, 0x02	; 2
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	8c 93       	st	X, r24
     c56:	87 e0       	ldi	r24, 0x07	; 7
     c58:	44 0f       	add	r20, r20
     c5a:	55 1f       	adc	r21, r21
     c5c:	66 1f       	adc	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	8a 95       	dec	r24
     c62:	d1 f7       	brne	.-12     	; 0xc58 <__unpack_f+0xd4>
     c64:	70 64       	ori	r23, 0x40	; 64
     c66:	14 96       	adiw	r26, 0x04	; 4
     c68:	4d 93       	st	X+, r20
     c6a:	5d 93       	st	X+, r21
     c6c:	6d 93       	st	X+, r22
     c6e:	7c 93       	st	X, r23
     c70:	17 97       	sbiw	r26, 0x07	; 7
     c72:	08 95       	ret

00000c74 <__fpcmp_parts_f>:
     c74:	1f 93       	push	r17
     c76:	dc 01       	movw	r26, r24
     c78:	fb 01       	movw	r30, r22
     c7a:	9c 91       	ld	r25, X
     c7c:	92 30       	cpi	r25, 0x02	; 2
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <__fpcmp_parts_f+0xe>
     c80:	47 c0       	rjmp	.+142    	; 0xd10 <__fpcmp_parts_f+0x9c>
     c82:	80 81       	ld	r24, Z
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	08 f4       	brcc	.+2      	; 0xc8a <__fpcmp_parts_f+0x16>
     c88:	43 c0       	rjmp	.+134    	; 0xd10 <__fpcmp_parts_f+0x9c>
     c8a:	94 30       	cpi	r25, 0x04	; 4
     c8c:	51 f4       	brne	.+20     	; 0xca2 <__fpcmp_parts_f+0x2e>
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	1c 91       	ld	r17, X
     c92:	84 30       	cpi	r24, 0x04	; 4
     c94:	99 f5       	brne	.+102    	; 0xcfc <__fpcmp_parts_f+0x88>
     c96:	81 81       	ldd	r24, Z+1	; 0x01
     c98:	68 2f       	mov	r22, r24
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	61 1b       	sub	r22, r17
     c9e:	71 09       	sbc	r23, r1
     ca0:	3f c0       	rjmp	.+126    	; 0xd20 <__fpcmp_parts_f+0xac>
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	21 f0       	breq	.+8      	; 0xcae <__fpcmp_parts_f+0x3a>
     ca6:	92 30       	cpi	r25, 0x02	; 2
     ca8:	31 f4       	brne	.+12     	; 0xcb6 <__fpcmp_parts_f+0x42>
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	b9 f1       	breq	.+110    	; 0xd1c <__fpcmp_parts_f+0xa8>
     cae:	81 81       	ldd	r24, Z+1	; 0x01
     cb0:	88 23       	and	r24, r24
     cb2:	89 f1       	breq	.+98     	; 0xd16 <__fpcmp_parts_f+0xa2>
     cb4:	2d c0       	rjmp	.+90     	; 0xd10 <__fpcmp_parts_f+0x9c>
     cb6:	11 96       	adiw	r26, 0x01	; 1
     cb8:	1c 91       	ld	r17, X
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	f1 f0       	breq	.+60     	; 0xcfc <__fpcmp_parts_f+0x88>
     cc0:	81 81       	ldd	r24, Z+1	; 0x01
     cc2:	18 17       	cp	r17, r24
     cc4:	d9 f4       	brne	.+54     	; 0xcfc <__fpcmp_parts_f+0x88>
     cc6:	12 96       	adiw	r26, 0x02	; 2
     cc8:	2d 91       	ld	r18, X+
     cca:	3c 91       	ld	r19, X
     ccc:	13 97       	sbiw	r26, 0x03	; 3
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	93 81       	ldd	r25, Z+3	; 0x03
     cd2:	82 17       	cp	r24, r18
     cd4:	93 07       	cpc	r25, r19
     cd6:	94 f0       	brlt	.+36     	; 0xcfc <__fpcmp_parts_f+0x88>
     cd8:	28 17       	cp	r18, r24
     cda:	39 07       	cpc	r19, r25
     cdc:	bc f0       	brlt	.+46     	; 0xd0c <__fpcmp_parts_f+0x98>
     cde:	14 96       	adiw	r26, 0x04	; 4
     ce0:	8d 91       	ld	r24, X+
     ce2:	9d 91       	ld	r25, X+
     ce4:	0d 90       	ld	r0, X+
     ce6:	bc 91       	ld	r27, X
     ce8:	a0 2d       	mov	r26, r0
     cea:	24 81       	ldd	r18, Z+4	; 0x04
     cec:	35 81       	ldd	r19, Z+5	; 0x05
     cee:	46 81       	ldd	r20, Z+6	; 0x06
     cf0:	57 81       	ldd	r21, Z+7	; 0x07
     cf2:	28 17       	cp	r18, r24
     cf4:	39 07       	cpc	r19, r25
     cf6:	4a 07       	cpc	r20, r26
     cf8:	5b 07       	cpc	r21, r27
     cfa:	18 f4       	brcc	.+6      	; 0xd02 <__fpcmp_parts_f+0x8e>
     cfc:	11 23       	and	r17, r17
     cfe:	41 f0       	breq	.+16     	; 0xd10 <__fpcmp_parts_f+0x9c>
     d00:	0a c0       	rjmp	.+20     	; 0xd16 <__fpcmp_parts_f+0xa2>
     d02:	82 17       	cp	r24, r18
     d04:	93 07       	cpc	r25, r19
     d06:	a4 07       	cpc	r26, r20
     d08:	b5 07       	cpc	r27, r21
     d0a:	40 f4       	brcc	.+16     	; 0xd1c <__fpcmp_parts_f+0xa8>
     d0c:	11 23       	and	r17, r17
     d0e:	19 f0       	breq	.+6      	; 0xd16 <__fpcmp_parts_f+0xa2>
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	05 c0       	rjmp	.+10     	; 0xd20 <__fpcmp_parts_f+0xac>
     d16:	6f ef       	ldi	r22, 0xFF	; 255
     d18:	7f ef       	ldi	r23, 0xFF	; 255
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <__fpcmp_parts_f+0xac>
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	cb 01       	movw	r24, r22
     d22:	1f 91       	pop	r17
     d24:	08 95       	ret

00000d26 <SREG_vid_EnableeBitI>:

void SREG_vid_EnableeBitI(void)
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
     d2e:	78 94       	sei
}
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
     d3e:	f8 94       	cli

     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	0f 92       	push	r0
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
     d54:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
     d56:	89 81       	ldd	r24, Y+1	; 0x01
}
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <DIO_enu_SetPinDiretion+0x6>
     d66:	00 d0       	rcall	.+0      	; 0xd68 <DIO_enu_SetPinDiretion+0x8>
     d68:	00 d0       	rcall	.+0      	; 0xd6a <DIO_enu_SetPinDiretion+0xa>
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	8a 83       	std	Y+2, r24	; 0x02
     d70:	6b 83       	std	Y+3, r22	; 0x03
     d72:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	84 30       	cpi	r24, 0x04	; 4
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <DIO_enu_SetPinDiretion+0x20>
     d7e:	d0 c0       	rjmp	.+416    	; 0xf20 <DIO_enu_SetPinDiretion+0x1c0>
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	88 30       	cpi	r24, 0x08	; 8
     d84:	08 f0       	brcs	.+2      	; 0xd88 <DIO_enu_SetPinDiretion+0x28>
     d86:	cc c0       	rjmp	.+408    	; 0xf20 <DIO_enu_SetPinDiretion+0x1c0>
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <DIO_enu_SetPinDiretion+0x30>
     d8e:	c8 c0       	rjmp	.+400    	; 0xf20 <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	3e 83       	std	Y+6, r19	; 0x06
     d98:	2d 83       	std	Y+5, r18	; 0x05
     d9a:	6d 81       	ldd	r22, Y+5	; 0x05
     d9c:	7e 81       	ldd	r23, Y+6	; 0x06
     d9e:	61 30       	cpi	r22, 0x01	; 1
     da0:	71 05       	cpc	r23, r1
     da2:	09 f4       	brne	.+2      	; 0xda6 <DIO_enu_SetPinDiretion+0x46>
     da4:	41 c0       	rjmp	.+130    	; 0xe28 <DIO_enu_SetPinDiretion+0xc8>
     da6:	8d 81       	ldd	r24, Y+5	; 0x05
     da8:	9e 81       	ldd	r25, Y+6	; 0x06
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	91 05       	cpc	r25, r1
     dae:	34 f4       	brge	.+12     	; 0xdbc <DIO_enu_SetPinDiretion+0x5c>
     db0:	2d 81       	ldd	r18, Y+5	; 0x05
     db2:	3e 81       	ldd	r19, Y+6	; 0x06
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	71 f0       	breq	.+28     	; 0xdd6 <DIO_enu_SetPinDiretion+0x76>
     dba:	b0 c0       	rjmp	.+352    	; 0xf1c <DIO_enu_SetPinDiretion+0x1bc>
     dbc:	6d 81       	ldd	r22, Y+5	; 0x05
     dbe:	7e 81       	ldd	r23, Y+6	; 0x06
     dc0:	62 30       	cpi	r22, 0x02	; 2
     dc2:	71 05       	cpc	r23, r1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <DIO_enu_SetPinDiretion+0x68>
     dc6:	59 c0       	rjmp	.+178    	; 0xe7a <DIO_enu_SetPinDiretion+0x11a>
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	9e 81       	ldd	r25, Y+6	; 0x06
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <DIO_enu_SetPinDiretion+0x74>
     dd2:	7c c0       	rjmp	.+248    	; 0xecc <DIO_enu_SetPinDiretion+0x16c>
     dd4:	a3 c0       	rjmp	.+326    	; 0xf1c <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
     dd6:	aa e3       	ldi	r26, 0x3A	; 58
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	ea e3       	ldi	r30, 0x3A	; 58
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <DIO_enu_SetPinDiretion+0x92>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	2a 95       	dec	r18
     df4:	e2 f7       	brpl	.-8      	; 0xdee <DIO_enu_SetPinDiretion+0x8e>
     df6:	80 95       	com	r24
     df8:	84 23       	and	r24, r20
     dfa:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     dfc:	aa e3       	ldi	r26, 0x3A	; 58
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ea e3       	ldi	r30, 0x3A	; 58
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	88 2f       	mov	r24, r24
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	b9 01       	movw	r22, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_enu_SetPinDiretion+0xbc>
     e18:	66 0f       	add	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	8a 95       	dec	r24
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_enu_SetPinDiretion+0xb8>
     e20:	cb 01       	movw	r24, r22
     e22:	84 2b       	or	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	7a c0       	rjmp	.+244    	; 0xf1c <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
     e28:	a7 e3       	ldi	r26, 0x37	; 55
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e7 e3       	ldi	r30, 0x37	; 55
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_enu_SetPinDiretion+0xe4>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	2a 95       	dec	r18
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_enu_SetPinDiretion+0xe0>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     e4e:	a7 e3       	ldi	r26, 0x37	; 55
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e7 e3       	ldi	r30, 0x37	; 55
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	b9 01       	movw	r22, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_enu_SetPinDiretion+0x10e>
     e6a:	66 0f       	add	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	8a 95       	dec	r24
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_enu_SetPinDiretion+0x10a>
     e72:	cb 01       	movw	r24, r22
     e74:	84 2b       	or	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	51 c0       	rjmp	.+162    	; 0xf1c <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
     e7a:	a4 e3       	ldi	r26, 0x34	; 52
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e4 e3       	ldi	r30, 0x34	; 52
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_enu_SetPinDiretion+0x136>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	2a 95       	dec	r18
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_enu_SetPinDiretion+0x132>
     e9a:	80 95       	com	r24
     e9c:	84 23       	and	r24, r20
     e9e:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     ea0:	a4 e3       	ldi	r26, 0x34	; 52
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e4 e3       	ldi	r30, 0x34	; 52
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	b9 01       	movw	r22, r18
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <DIO_enu_SetPinDiretion+0x160>
     ebc:	66 0f       	add	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	8a 95       	dec	r24
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <DIO_enu_SetPinDiretion+0x15c>
     ec4:	cb 01       	movw	r24, r22
     ec6:	84 2b       	or	r24, r20
     ec8:	8c 93       	st	X, r24
     eca:	28 c0       	rjmp	.+80     	; 0xf1c <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
     ecc:	a1 e3       	ldi	r26, 0x31	; 49
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e1 e3       	ldi	r30, 0x31	; 49
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_enu_SetPinDiretion+0x188>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	2a 95       	dec	r18
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_enu_SetPinDiretion+0x184>
     eec:	80 95       	com	r24
     eee:	84 23       	and	r24, r20
     ef0:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     ef2:	a1 e3       	ldi	r26, 0x31	; 49
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e1 e3       	ldi	r30, 0x31	; 49
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	b9 01       	movw	r22, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_enu_SetPinDiretion+0x1b2>
     f0e:	66 0f       	add	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	8a 95       	dec	r24
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_enu_SetPinDiretion+0x1ae>
     f16:	cb 01       	movw	r24, r22
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     f1c:	19 82       	std	Y+1, r1	; 0x01
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
}
     f26:	26 96       	adiw	r28, 0x06	; 6
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <DIO_enu_SetPinState+0x6>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <DIO_enu_SetPinState+0x8>
     f40:	00 d0       	rcall	.+0      	; 0xf42 <DIO_enu_SetPinState+0xa>
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	8a 83       	std	Y+2, r24	; 0x02
     f48:	6b 83       	std	Y+3, r22	; 0x03
     f4a:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	84 30       	cpi	r24, 0x04	; 4
     f54:	08 f0       	brcs	.+2      	; 0xf58 <DIO_enu_SetPinState+0x20>
     f56:	d0 c0       	rjmp	.+416    	; 0x10f8 <DIO_enu_SetPinState+0x1c0>
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	88 30       	cpi	r24, 0x08	; 8
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <DIO_enu_SetPinState+0x28>
     f5e:	cc c0       	rjmp	.+408    	; 0x10f8 <DIO_enu_SetPinState+0x1c0>
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	08 f0       	brcs	.+2      	; 0xf68 <DIO_enu_SetPinState+0x30>
     f66:	c8 c0       	rjmp	.+400    	; 0x10f8 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	3e 83       	std	Y+6, r19	; 0x06
     f70:	2d 83       	std	Y+5, r18	; 0x05
     f72:	6d 81       	ldd	r22, Y+5	; 0x05
     f74:	7e 81       	ldd	r23, Y+6	; 0x06
     f76:	61 30       	cpi	r22, 0x01	; 1
     f78:	71 05       	cpc	r23, r1
     f7a:	09 f4       	brne	.+2      	; 0xf7e <DIO_enu_SetPinState+0x46>
     f7c:	41 c0       	rjmp	.+130    	; 0x1000 <DIO_enu_SetPinState+0xc8>
     f7e:	8d 81       	ldd	r24, Y+5	; 0x05
     f80:	9e 81       	ldd	r25, Y+6	; 0x06
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	91 05       	cpc	r25, r1
     f86:	34 f4       	brge	.+12     	; 0xf94 <DIO_enu_SetPinState+0x5c>
     f88:	2d 81       	ldd	r18, Y+5	; 0x05
     f8a:	3e 81       	ldd	r19, Y+6	; 0x06
     f8c:	21 15       	cp	r18, r1
     f8e:	31 05       	cpc	r19, r1
     f90:	71 f0       	breq	.+28     	; 0xfae <DIO_enu_SetPinState+0x76>
     f92:	b0 c0       	rjmp	.+352    	; 0x10f4 <DIO_enu_SetPinState+0x1bc>
     f94:	6d 81       	ldd	r22, Y+5	; 0x05
     f96:	7e 81       	ldd	r23, Y+6	; 0x06
     f98:	62 30       	cpi	r22, 0x02	; 2
     f9a:	71 05       	cpc	r23, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_enu_SetPinState+0x68>
     f9e:	59 c0       	rjmp	.+178    	; 0x1052 <DIO_enu_SetPinState+0x11a>
     fa0:	8d 81       	ldd	r24, Y+5	; 0x05
     fa2:	9e 81       	ldd	r25, Y+6	; 0x06
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <DIO_enu_SetPinState+0x74>
     faa:	7c c0       	rjmp	.+248    	; 0x10a4 <DIO_enu_SetPinState+0x16c>
     fac:	a3 c0       	rjmp	.+326    	; 0x10f4 <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
     fae:	ab e3       	ldi	r26, 0x3B	; 59
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e3       	ldi	r30, 0x3B	; 59
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_enu_SetPinState+0x92>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	2a 95       	dec	r18
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_enu_SetPinState+0x8e>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     fd4:	ab e3       	ldi	r26, 0x3B	; 59
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	eb e3       	ldi	r30, 0x3B	; 59
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	b9 01       	movw	r22, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_enu_SetPinState+0xbc>
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	8a 95       	dec	r24
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_enu_SetPinState+0xb8>
     ff8:	cb 01       	movw	r24, r22
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	7a c0       	rjmp	.+244    	; 0x10f4 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    1000:	a8 e3       	ldi	r26, 0x38	; 56
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e8 e3       	ldi	r30, 0x38	; 56
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_enu_SetPinState+0xe4>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	2a 95       	dec	r18
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_enu_SetPinState+0xe0>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1026:	a8 e3       	ldi	r26, 0x38	; 56
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	b9 01       	movw	r22, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_enu_SetPinState+0x10e>
    1042:	66 0f       	add	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	8a 95       	dec	r24
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_enu_SetPinState+0x10a>
    104a:	cb 01       	movw	r24, r22
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	51 c0       	rjmp	.+162    	; 0x10f4 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    1052:	a5 e3       	ldi	r26, 0x35	; 53
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e3       	ldi	r30, 0x35	; 53
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_enu_SetPinState+0x136>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	2a 95       	dec	r18
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_enu_SetPinState+0x132>
    1072:	80 95       	com	r24
    1074:	84 23       	and	r24, r20
    1076:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1078:	a5 e3       	ldi	r26, 0x35	; 53
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e5 e3       	ldi	r30, 0x35	; 53
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	b9 01       	movw	r22, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_enu_SetPinState+0x160>
    1094:	66 0f       	add	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	8a 95       	dec	r24
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_enu_SetPinState+0x15c>
    109c:	cb 01       	movw	r24, r22
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	28 c0       	rjmp	.+80     	; 0x10f4 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    10a4:	a2 e3       	ldi	r26, 0x32	; 50
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e2 e3       	ldi	r30, 0x32	; 50
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_enu_SetPinState+0x188>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	2a 95       	dec	r18
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_enu_SetPinState+0x184>
    10c4:	80 95       	com	r24
    10c6:	84 23       	and	r24, r20
    10c8:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    10ca:	a2 e3       	ldi	r26, 0x32	; 50
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e2 e3       	ldi	r30, 0x32	; 50
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	b9 01       	movw	r22, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_enu_SetPinState+0x1b2>
    10e6:	66 0f       	add	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	8a 95       	dec	r24
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_enu_SetPinState+0x1ae>
    10ee:	cb 01       	movw	r24, r22
    10f0:	84 2b       	or	r24, r20
    10f2:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    10f4:	19 82       	std	Y+1, r1	; 0x01
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    10f8:	82 e0       	ldi	r24, 0x02	; 2
    10fa:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fe:	26 96       	adiw	r28, 0x06	; 6
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <DIO_enu_SetPinValue+0x6>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <DIO_enu_SetPinValue+0x8>
    1118:	00 d0       	rcall	.+0      	; 0x111a <DIO_enu_SetPinValue+0xa>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	8a 83       	std	Y+2, r24	; 0x02
    1120:	6b 83       	std	Y+3, r22	; 0x03
    1122:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	08 f0       	brcs	.+2      	; 0x1130 <DIO_enu_SetPinValue+0x20>
    112e:	db c0       	rjmp	.+438    	; 0x12e6 <DIO_enu_SetPinValue+0x1d6>
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 30       	cpi	r24, 0x08	; 8
    1134:	08 f0       	brcs	.+2      	; 0x1138 <DIO_enu_SetPinValue+0x28>
    1136:	d7 c0       	rjmp	.+430    	; 0x12e6 <DIO_enu_SetPinValue+0x1d6>
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	82 30       	cpi	r24, 0x02	; 2
    113c:	08 f0       	brcs	.+2      	; 0x1140 <DIO_enu_SetPinValue+0x30>
    113e:	d3 c0       	rjmp	.+422    	; 0x12e6 <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3e 83       	std	Y+6, r19	; 0x06
    1148:	2d 83       	std	Y+5, r18	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	91 05       	cpc	r25, r1
    1152:	09 f4       	brne	.+2      	; 0x1156 <DIO_enu_SetPinValue+0x46>
    1154:	43 c0       	rjmp	.+134    	; 0x11dc <DIO_enu_SetPinValue+0xcc>
    1156:	2d 81       	ldd	r18, Y+5	; 0x05
    1158:	3e 81       	ldd	r19, Y+6	; 0x06
    115a:	22 30       	cpi	r18, 0x02	; 2
    115c:	31 05       	cpc	r19, r1
    115e:	2c f4       	brge	.+10     	; 0x116a <DIO_enu_SetPinValue+0x5a>
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	71 f0       	breq	.+28     	; 0x1184 <DIO_enu_SetPinValue+0x74>
    1168:	bc c0       	rjmp	.+376    	; 0x12e2 <DIO_enu_SetPinValue+0x1d2>
    116a:	2d 81       	ldd	r18, Y+5	; 0x05
    116c:	3e 81       	ldd	r19, Y+6	; 0x06
    116e:	22 30       	cpi	r18, 0x02	; 2
    1170:	31 05       	cpc	r19, r1
    1172:	09 f4       	brne	.+2      	; 0x1176 <DIO_enu_SetPinValue+0x66>
    1174:	5f c0       	rjmp	.+190    	; 0x1234 <DIO_enu_SetPinValue+0x124>
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	91 05       	cpc	r25, r1
    117e:	09 f4       	brne	.+2      	; 0x1182 <DIO_enu_SetPinValue+0x72>
    1180:	85 c0       	rjmp	.+266    	; 0x128c <DIO_enu_SetPinValue+0x17c>
    1182:	af c0       	rjmp	.+350    	; 0x12e2 <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	a1 f4       	brne	.+40     	; 0x11b2 <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    118a:	ab e3       	ldi	r26, 0x3B	; 59
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	eb e3       	ldi	r30, 0x3B	; 59
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_enu_SetPinValue+0x98>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_enu_SetPinValue+0x94>
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	98 c0       	rjmp	.+304    	; 0x12e2 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    11b2:	ab e3       	ldi	r26, 0x3B	; 59
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	eb e3       	ldi	r30, 0x3B	; 59
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_enu_SetPinValue+0xc0>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_enu_SetPinValue+0xbc>
    11d4:	80 95       	com	r24
    11d6:	84 23       	and	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	83 c0       	rjmp	.+262    	; 0x12e2 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	a1 f4       	brne	.+40     	; 0x120a <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    11e2:	a8 e3       	ldi	r26, 0x38	; 56
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e8 e3       	ldi	r30, 0x38	; 56
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_enu_SetPinValue+0xf0>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_enu_SetPinValue+0xec>
    1204:	84 2b       	or	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	6c c0       	rjmp	.+216    	; 0x12e2 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    120a:	a8 e3       	ldi	r26, 0x38	; 56
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_enu_SetPinValue+0x118>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_enu_SetPinValue+0x114>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	57 c0       	rjmp	.+174    	; 0x12e2 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	a1 f4       	brne	.+40     	; 0x1262 <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    123a:	a5 e3       	ldi	r26, 0x35	; 53
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e3       	ldi	r30, 0x35	; 53
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_enu_SetPinValue+0x148>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_enu_SetPinValue+0x144>
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	40 c0       	rjmp	.+128    	; 0x12e2 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    1262:	a5 e3       	ldi	r26, 0x35	; 53
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e5 e3       	ldi	r30, 0x35	; 53
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_enu_SetPinValue+0x170>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_enu_SetPinValue+0x16c>
    1284:	80 95       	com	r24
    1286:	84 23       	and	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	2b c0       	rjmp	.+86     	; 0x12e2 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	a1 f4       	brne	.+40     	; 0x12ba <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    1292:	a2 e3       	ldi	r26, 0x32	; 50
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e2 e3       	ldi	r30, 0x32	; 50
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_enu_SetPinValue+0x1a0>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_enu_SetPinValue+0x19c>
    12b4:	84 2b       	or	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	14 c0       	rjmp	.+40     	; 0x12e2 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    12ba:	a2 e3       	ldi	r26, 0x32	; 50
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e2 e3       	ldi	r30, 0x32	; 50
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_enu_SetPinValue+0x1c8>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_enu_SetPinValue+0x1c4>
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    12e2:	19 82       	std	Y+1, r1	; 0x01
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ec:	26 96       	adiw	r28, 0x06	; 6
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	00 d0       	rcall	.+0      	; 0x1304 <DIO_enu_TogglePinValue+0x6>
    1304:	00 d0       	rcall	.+0      	; 0x1306 <DIO_enu_TogglePinValue+0x8>
    1306:	0f 92       	push	r0
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	8a 83       	std	Y+2, r24	; 0x02
    130e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	84 30       	cpi	r24, 0x04	; 4
    1318:	08 f0       	brcs	.+2      	; 0x131c <DIO_enu_TogglePinValue+0x1e>
    131a:	73 c0       	rjmp	.+230    	; 0x1402 <DIO_enu_TogglePinValue+0x104>
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	88 30       	cpi	r24, 0x08	; 8
    1320:	08 f0       	brcs	.+2      	; 0x1324 <DIO_enu_TogglePinValue+0x26>
    1322:	6f c0       	rjmp	.+222    	; 0x1402 <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	3d 83       	std	Y+5, r19	; 0x05
    132c:	2c 83       	std	Y+4, r18	; 0x04
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	91 05       	cpc	r25, r1
    1336:	49 f1       	breq	.+82     	; 0x138a <DIO_enu_TogglePinValue+0x8c>
    1338:	2c 81       	ldd	r18, Y+4	; 0x04
    133a:	3d 81       	ldd	r19, Y+5	; 0x05
    133c:	22 30       	cpi	r18, 0x02	; 2
    133e:	31 05       	cpc	r19, r1
    1340:	2c f4       	brge	.+10     	; 0x134c <DIO_enu_TogglePinValue+0x4e>
    1342:	8c 81       	ldd	r24, Y+4	; 0x04
    1344:	9d 81       	ldd	r25, Y+5	; 0x05
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	61 f0       	breq	.+24     	; 0x1362 <DIO_enu_TogglePinValue+0x64>
    134a:	5a c0       	rjmp	.+180    	; 0x1400 <DIO_enu_TogglePinValue+0x102>
    134c:	2c 81       	ldd	r18, Y+4	; 0x04
    134e:	3d 81       	ldd	r19, Y+5	; 0x05
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	71 f1       	breq	.+92     	; 0x13b2 <DIO_enu_TogglePinValue+0xb4>
    1356:	8c 81       	ldd	r24, Y+4	; 0x04
    1358:	9d 81       	ldd	r25, Y+5	; 0x05
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	91 05       	cpc	r25, r1
    135e:	e9 f1       	breq	.+122    	; 0x13da <DIO_enu_TogglePinValue+0xdc>
    1360:	4f c0       	rjmp	.+158    	; 0x1400 <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    1362:	ab e3       	ldi	r26, 0x3B	; 59
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	eb e3       	ldi	r30, 0x3B	; 59
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_enu_TogglePinValue+0x82>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_enu_TogglePinValue+0x7e>
    1384:	84 27       	eor	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	3b c0       	rjmp	.+118    	; 0x1400 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    138a:	a8 e3       	ldi	r26, 0x38	; 56
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e8 e3       	ldi	r30, 0x38	; 56
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_enu_TogglePinValue+0xaa>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_enu_TogglePinValue+0xa6>
    13ac:	84 27       	eor	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	27 c0       	rjmp	.+78     	; 0x1400 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    13b2:	a5 e3       	ldi	r26, 0x35	; 53
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e3       	ldi	r30, 0x35	; 53
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_enu_TogglePinValue+0xd2>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_enu_TogglePinValue+0xce>
    13d4:	84 27       	eor	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	13 c0       	rjmp	.+38     	; 0x1400 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    13da:	a2 e3       	ldi	r26, 0x32	; 50
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e2 e3       	ldi	r30, 0x32	; 50
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_enu_TogglePinValue+0xfa>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_enu_TogglePinValue+0xf6>
    13fc:	84 27       	eor	r24, r20
    13fe:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1400:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    1402:	89 81       	ldd	r24, Y+1	; 0x01
}
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	27 97       	sbiw	r28, 0x07	; 7
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	6b 83       	std	Y+3, r22	; 0x03
    142c:	5d 83       	std	Y+5, r21	; 0x05
    142e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	9d 81       	ldd	r25, Y+5	; 0x05
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	09 f4       	brne	.+2      	; 0x143e <DIO_enu_GetPinValue+0x2a>
    143c:	7d c0       	rjmp	.+250    	; 0x1538 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	84 30       	cpi	r24, 0x04	; 4
    1442:	08 f0       	brcs	.+2      	; 0x1446 <DIO_enu_GetPinValue+0x32>
    1444:	76 c0       	rjmp	.+236    	; 0x1532 <DIO_enu_GetPinValue+0x11e>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	88 30       	cpi	r24, 0x08	; 8
    144a:	08 f0       	brcs	.+2      	; 0x144e <DIO_enu_GetPinValue+0x3a>
    144c:	72 c0       	rjmp	.+228    	; 0x1532 <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3f 83       	std	Y+7, r19	; 0x07
    1456:	2e 83       	std	Y+6, r18	; 0x06
    1458:	4e 81       	ldd	r20, Y+6	; 0x06
    145a:	5f 81       	ldd	r21, Y+7	; 0x07
    145c:	41 30       	cpi	r20, 0x01	; 1
    145e:	51 05       	cpc	r21, r1
    1460:	59 f1       	breq	.+86     	; 0x14b8 <DIO_enu_GetPinValue+0xa4>
    1462:	8e 81       	ldd	r24, Y+6	; 0x06
    1464:	9f 81       	ldd	r25, Y+7	; 0x07
    1466:	82 30       	cpi	r24, 0x02	; 2
    1468:	91 05       	cpc	r25, r1
    146a:	34 f4       	brge	.+12     	; 0x1478 <DIO_enu_GetPinValue+0x64>
    146c:	2e 81       	ldd	r18, Y+6	; 0x06
    146e:	3f 81       	ldd	r19, Y+7	; 0x07
    1470:	21 15       	cp	r18, r1
    1472:	31 05       	cpc	r19, r1
    1474:	69 f0       	breq	.+26     	; 0x1490 <DIO_enu_GetPinValue+0x7c>
    1476:	5b c0       	rjmp	.+182    	; 0x152e <DIO_enu_GetPinValue+0x11a>
    1478:	4e 81       	ldd	r20, Y+6	; 0x06
    147a:	5f 81       	ldd	r21, Y+7	; 0x07
    147c:	42 30       	cpi	r20, 0x02	; 2
    147e:	51 05       	cpc	r21, r1
    1480:	79 f1       	breq	.+94     	; 0x14e0 <DIO_enu_GetPinValue+0xcc>
    1482:	8e 81       	ldd	r24, Y+6	; 0x06
    1484:	9f 81       	ldd	r25, Y+7	; 0x07
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	09 f4       	brne	.+2      	; 0x148e <DIO_enu_GetPinValue+0x7a>
    148c:	3d c0       	rjmp	.+122    	; 0x1508 <DIO_enu_GetPinValue+0xf4>
    148e:	4f c0       	rjmp	.+158    	; 0x152e <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    1490:	e9 e3       	ldi	r30, 0x39	; 57
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_enu_GetPinValue+0x94>
    14a4:	55 95       	asr	r21
    14a6:	47 95       	ror	r20
    14a8:	8a 95       	dec	r24
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_enu_GetPinValue+0x90>
    14ac:	ca 01       	movw	r24, r20
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	ec 81       	ldd	r30, Y+4	; 0x04
    14b2:	fd 81       	ldd	r31, Y+5	; 0x05
    14b4:	80 83       	st	Z, r24
    14b6:	3b c0       	rjmp	.+118    	; 0x152e <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    14b8:	e6 e3       	ldi	r30, 0x36	; 54
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_enu_GetPinValue+0xbc>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_enu_GetPinValue+0xb8>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	ec 81       	ldd	r30, Y+4	; 0x04
    14da:	fd 81       	ldd	r31, Y+5	; 0x05
    14dc:	80 83       	st	Z, r24
    14de:	27 c0       	rjmp	.+78     	; 0x152e <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    14e0:	e3 e3       	ldi	r30, 0x33	; 51
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a9 01       	movw	r20, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_enu_GetPinValue+0xe4>
    14f4:	55 95       	asr	r21
    14f6:	47 95       	ror	r20
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_enu_GetPinValue+0xe0>
    14fc:	ca 01       	movw	r24, r20
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	ec 81       	ldd	r30, Y+4	; 0x04
    1502:	fd 81       	ldd	r31, Y+5	; 0x05
    1504:	80 83       	st	Z, r24
    1506:	13 c0       	rjmp	.+38     	; 0x152e <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    1508:	e0 e3       	ldi	r30, 0x30	; 48
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a9 01       	movw	r20, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_enu_GetPinValue+0x10c>
    151c:	55 95       	asr	r21
    151e:	47 95       	ror	r20
    1520:	8a 95       	dec	r24
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_enu_GetPinValue+0x108>
    1524:	ca 01       	movw	r24, r20
    1526:	81 70       	andi	r24, 0x01	; 1
    1528:	ec 81       	ldd	r30, Y+4	; 0x04
    152a:	fd 81       	ldd	r31, Y+5	; 0x05
    152c:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    152e:	19 82       	std	Y+1, r1	; 0x01
    1530:	05 c0       	rjmp	.+10     	; 0x153c <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1532:	82 e0       	ldi	r24, 0x02	; 2
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1538:	83 e0       	ldi	r24, 0x03	; 3
    153a:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    153c:	89 81       	ldd	r24, Y+1	; 0x01
}
    153e:	27 96       	adiw	r28, 0x07	; 7
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <SW_enu_Initialization+0x6>
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    155e:	19 82       	std	Y+1, r1	; 0x01
    1560:	34 c0       	rjmp	.+104    	; 0x15ca <SW_enu_Initialization+0x7a>
    {
        
       Local_u8_ErrorFlag = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	c9 01       	movw	r24, r18
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	82 0f       	add	r24, r18
    1570:	93 1f       	adc	r25, r19
    1572:	fc 01       	movw	r30, r24
    1574:	e7 59       	subi	r30, 0x97	; 151
    1576:	fe 4f       	sbci	r31, 0xFE	; 254
    1578:	40 81       	ld	r20, Z
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	c9 01       	movw	r24, r18
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	82 0f       	add	r24, r18
    1588:	93 1f       	adc	r25, r19
    158a:	fc 01       	movw	r30, r24
    158c:	e6 59       	subi	r30, 0x96	; 150
    158e:	fe 4f       	sbci	r31, 0xFE	; 254
    1590:	90 81       	ld	r25, Z
    1592:	84 2f       	mov	r24, r20
    1594:	69 2f       	mov	r22, r25
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
    159c:	8a 83       	std	Y+2, r24	; 0x02
       if(Local_u8_ErrorFlag != ES_OK)
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	88 23       	and	r24, r24
    15a2:	c1 f4       	brne	.+48     	; 0x15d4 <SW_enu_Initialization+0x84>
       {
        break;
       }
       Local_u8_ErrorFlag = (SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	c9 01       	movw	r24, r18
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	82 0f       	add	r24, r18
    15b2:	93 1f       	adc	r25, r19
    15b4:	fc 01       	movw	r30, r24
    15b6:	e5 59       	subi	r30, 0x95	; 149
    15b8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ba:	80 81       	ld	r24, Z
    15bc:	8a 83       	std	Y+2, r24	; 0x02

        if(Local_u8_ErrorFlag != ES_OK)
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	88 23       	and	r24, r24
    15c2:	41 f4       	brne	.+16     	; 0x15d4 <SW_enu_Initialization+0x84>
extern ErrorState_t SW_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	90 91 68 01 	lds	r25, 0x0168
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	89 17       	cp	r24, r25
    15d2:	38 f2       	brcs	.-114    	; 0x1562 <SW_enu_Initialization+0x12>
       {
        break;
       }
    }

    Local_u8_ErrorFlag = ES_OK;
    15d4:	1a 82       	std	Y+2, r1	; 0x02


    return Local_u8_ErrorFlag;
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <SW_enu_GetSwValue+0x6>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <SW_enu_GetSwValue+0x8>
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	8a 83       	std	Y+2, r24	; 0x02
    15f0:	7c 83       	std	Y+4, r23	; 0x04
    15f2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	49 f1       	breq	.+82     	; 0x1652 <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    1600:	90 91 68 01 	lds	r25, 0x0168
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	98 17       	cp	r25, r24
    1608:	08 f1       	brcs	.+66     	; 0x164c <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	c9 01       	movw	r24, r18
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	82 0f       	add	r24, r18
    1618:	93 1f       	adc	r25, r19
    161a:	fc 01       	movw	r30, r24
    161c:	e7 59       	subi	r30, 0x97	; 151
    161e:	fe 4f       	sbci	r31, 0xFE	; 254
    1620:	40 81       	ld	r20, Z
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	c9 01       	movw	r24, r18
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	82 0f       	add	r24, r18
    1630:	93 1f       	adc	r25, r19
    1632:	fc 01       	movw	r30, r24
    1634:	e6 59       	subi	r30, 0x96	; 150
    1636:	fe 4f       	sbci	r31, 0xFE	; 254
    1638:	90 81       	ld	r25, Z
    163a:	2b 81       	ldd	r18, Y+3	; 0x03
    163c:	3c 81       	ldd	r19, Y+4	; 0x04
    163e:	84 2f       	mov	r24, r20
    1640:	69 2f       	mov	r22, r25
    1642:	a9 01       	movw	r20, r18
    1644:	0e 94 0a 0a 	call	0x1414	; 0x1414 <DIO_enu_GetPinValue>
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	05 c0       	rjmp	.+10     	; 0x1656 <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1656:	89 81       	ldd	r24, Y+1	; 0x01

}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <Relay_enu_Initialization+0x6>
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1674:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1676:	19 82       	std	Y+1, r1	; 0x01
    1678:	31 c0       	rjmp	.+98     	; 0x16dc <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	fc 01       	movw	r30, r24
    1686:	ed 58       	subi	r30, 0x8D	; 141
    1688:	fe 4f       	sbci	r31, 0xFE	; 254
    168a:	20 81       	ld	r18, Z
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	fc 01       	movw	r30, r24
    1698:	ec 58       	subi	r30, 0x8C	; 140
    169a:	fe 4f       	sbci	r31, 0xFE	; 254
    169c:	90 81       	ld	r25, Z
    169e:	82 2f       	mov	r24, r18
    16a0:	69 2f       	mov	r22, r25
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	fc 01       	movw	r30, r24
    16b4:	ed 58       	subi	r30, 0x8D	; 141
    16b6:	fe 4f       	sbci	r31, 0xFE	; 254
    16b8:	20 81       	ld	r18, Z
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	fc 01       	movw	r30, r24
    16c6:	ec 58       	subi	r30, 0x8C	; 140
    16c8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ca:	90 81       	ld	r25, Z
    16cc:	82 2f       	mov	r24, r18
    16ce:	69 2f       	mov	r22, r25
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	8f 5f       	subi	r24, 0xFF	; 255
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	90 91 72 01 	lds	r25, 0x0172
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	89 17       	cp	r24, r25
    16e4:	50 f2       	brcs	.-108    	; 0x167a <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    16e6:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <Relay_enu_TuronOnRelay+0x6>
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    1704:	90 91 72 01 	lds	r25, 0x0172
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	89 17       	cp	r24, r25
    170c:	c8 f4       	brcc	.+50     	; 0x1740 <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	fc 01       	movw	r30, r24
    171a:	ed 58       	subi	r30, 0x8D	; 141
    171c:	fe 4f       	sbci	r31, 0xFE	; 254
    171e:	20 81       	ld	r18, Z
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	fc 01       	movw	r30, r24
    172c:	ec 58       	subi	r30, 0x8C	; 140
    172e:	fe 4f       	sbci	r31, 0xFE	; 254
    1730:	90 81       	ld	r25, Z
    1732:	82 2f       	mov	r24, r18
    1734:	69 2f       	mov	r22, r25
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    1744:	89 81       	ldd	r24, Y+1	; 0x01
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <Relay_enu_TuronOffRelay+0x6>
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    1760:	90 91 72 01 	lds	r25, 0x0172
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	89 17       	cp	r24, r25
    1768:	c8 f4       	brcc	.+50     	; 0x179c <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	fc 01       	movw	r30, r24
    1776:	ed 58       	subi	r30, 0x8D	; 141
    1778:	fe 4f       	sbci	r31, 0xFE	; 254
    177a:	20 81       	ld	r18, Z
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	fc 01       	movw	r30, r24
    1788:	ec 58       	subi	r30, 0x8C	; 140
    178a:	fe 4f       	sbci	r31, 0xFE	; 254
    178c:	90 81       	ld	r25, Z
    178e:	82 2f       	mov	r24, r18
    1790:	69 2f       	mov	r22, r25
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <Relay_enu_TurnOnAllRelays+0x6>
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    17ba:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    17bc:	19 82       	std	Y+1, r1	; 0x01
    17be:	1a c0       	rjmp	.+52     	; 0x17f4 <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	fc 01       	movw	r30, r24
    17cc:	ed 58       	subi	r30, 0x8D	; 141
    17ce:	fe 4f       	sbci	r31, 0xFE	; 254
    17d0:	20 81       	ld	r18, Z
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	fc 01       	movw	r30, r24
    17de:	ec 58       	subi	r30, 0x8C	; 140
    17e0:	fe 4f       	sbci	r31, 0xFE	; 254
    17e2:	90 81       	ld	r25, Z
    17e4:	82 2f       	mov	r24, r18
    17e6:	69 2f       	mov	r22, r25
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	90 91 72 01 	lds	r25, 0x0172
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	89 17       	cp	r24, r25
    17fc:	08 f3       	brcs	.-62     	; 0x17c0 <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <Relay_enu_TurnOffAllRelays+0x6>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    181c:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    181e:	19 82       	std	Y+1, r1	; 0x01
    1820:	1a c0       	rjmp	.+52     	; 0x1856 <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	fc 01       	movw	r30, r24
    182e:	ed 58       	subi	r30, 0x8D	; 141
    1830:	fe 4f       	sbci	r31, 0xFE	; 254
    1832:	20 81       	ld	r18, Z
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	88 2f       	mov	r24, r24
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	fc 01       	movw	r30, r24
    1840:	ec 58       	subi	r30, 0x8C	; 140
    1842:	fe 4f       	sbci	r31, 0xFE	; 254
    1844:	90 81       	ld	r25, Z
    1846:	82 2f       	mov	r24, r18
    1848:	69 2f       	mov	r22, r25
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	90 91 72 01 	lds	r25, 0x0172
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	89 17       	cp	r24, r25
    185e:	08 f3       	brcs	.-62     	; 0x1822 <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <LED_enu_Initialization+0x6>
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    187a:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    187c:	19 82       	std	Y+1, r1	; 0x01
    187e:	31 c0       	rjmp	.+98     	; 0x18e2 <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	fc 01       	movw	r30, r24
    188c:	ea 58       	subi	r30, 0x8A	; 138
    188e:	fe 4f       	sbci	r31, 0xFE	; 254
    1890:	20 81       	ld	r18, Z
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	fc 01       	movw	r30, r24
    189e:	e9 58       	subi	r30, 0x89	; 137
    18a0:	fe 4f       	sbci	r31, 0xFE	; 254
    18a2:	90 81       	ld	r25, Z
    18a4:	82 2f       	mov	r24, r18
    18a6:	69 2f       	mov	r22, r25
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	fc 01       	movw	r30, r24
    18ba:	ea 58       	subi	r30, 0x8A	; 138
    18bc:	fe 4f       	sbci	r31, 0xFE	; 254
    18be:	20 81       	ld	r18, Z
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	fc 01       	movw	r30, r24
    18cc:	e9 58       	subi	r30, 0x89	; 137
    18ce:	fe 4f       	sbci	r31, 0xFE	; 254
    18d0:	90 81       	ld	r25, Z
    18d2:	82 2f       	mov	r24, r18
    18d4:	69 2f       	mov	r22, r25
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	90 91 75 01 	lds	r25, 0x0175
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	89 17       	cp	r24, r25
    18ea:	50 f2       	brcs	.-108    	; 0x1880 <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    18ec:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <LED_enu_TurnOnLED+0x6>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    190a:	90 91 75 01 	lds	r25, 0x0175
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	89 17       	cp	r24, r25
    1912:	c8 f4       	brcc	.+50     	; 0x1946 <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	fc 01       	movw	r30, r24
    1920:	ea 58       	subi	r30, 0x8A	; 138
    1922:	fe 4f       	sbci	r31, 0xFE	; 254
    1924:	20 81       	ld	r18, Z
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	fc 01       	movw	r30, r24
    1932:	e9 58       	subi	r30, 0x89	; 137
    1934:	fe 4f       	sbci	r31, 0xFE	; 254
    1936:	90 81       	ld	r25, Z
    1938:	82 2f       	mov	r24, r18
    193a:	69 2f       	mov	r22, r25
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	02 c0       	rjmp	.+4      	; 0x194a <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    194a:	89 81       	ldd	r24, Y+1	; 0x01
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <LED_enu_TurnOffLED+0x6>
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    1966:	90 91 75 01 	lds	r25, 0x0175
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	98 17       	cp	r25, r24
    196e:	c8 f0       	brcs	.+50     	; 0x19a2 <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	fc 01       	movw	r30, r24
    197c:	ea 58       	subi	r30, 0x8A	; 138
    197e:	fe 4f       	sbci	r31, 0xFE	; 254
    1980:	20 81       	ld	r18, Z
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	88 2f       	mov	r24, r24
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	fc 01       	movw	r30, r24
    198e:	e9 58       	subi	r30, 0x89	; 137
    1990:	fe 4f       	sbci	r31, 0xFE	; 254
    1992:	90 81       	ld	r25, Z
    1994:	82 2f       	mov	r24, r18
    1996:	69 2f       	mov	r22, r25
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <LED_enu_TurnOnAllLEDs+0x6>
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    19c0:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    19c2:	19 82       	std	Y+1, r1	; 0x01
    19c4:	1a c0       	rjmp	.+52     	; 0x19fa <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	fc 01       	movw	r30, r24
    19d2:	ea 58       	subi	r30, 0x8A	; 138
    19d4:	fe 4f       	sbci	r31, 0xFE	; 254
    19d6:	20 81       	ld	r18, Z
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	fc 01       	movw	r30, r24
    19e4:	e9 58       	subi	r30, 0x89	; 137
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
    19e8:	90 81       	ld	r25, Z
    19ea:	82 2f       	mov	r24, r18
    19ec:	69 2f       	mov	r22, r25
    19ee:	41 e0       	ldi	r20, 0x01	; 1
    19f0:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	8f 5f       	subi	r24, 0xFF	; 255
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	90 91 75 01 	lds	r25, 0x0175
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	89 17       	cp	r24, r25
    1a02:	08 f3       	brcs	.-62     	; 0x19c6 <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    1a04:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <LED_enu_TurnOffAllLEDs+0x6>
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1a20:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1a22:	19 82       	std	Y+1, r1	; 0x01
    1a24:	1a c0       	rjmp	.+52     	; 0x1a5a <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	fc 01       	movw	r30, r24
    1a32:	ea 58       	subi	r30, 0x8A	; 138
    1a34:	fe 4f       	sbci	r31, 0xFE	; 254
    1a36:	20 81       	ld	r18, Z
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	fc 01       	movw	r30, r24
    1a44:	e9 58       	subi	r30, 0x89	; 137
    1a46:	fe 4f       	sbci	r31, 0xFE	; 254
    1a48:	90 81       	ld	r25, Z
    1a4a:	82 2f       	mov	r24, r18
    1a4c:	69 2f       	mov	r22, r25
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	90 91 75 01 	lds	r25, 0x0175
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	89 17       	cp	r24, r25
    1a62:	08 f3       	brcs	.-62     	; 0x1a26 <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    1a64:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	6d 97       	sbiw	r28, 0x1d	; 29
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	8d 8f       	std	Y+29, r24	; 0x1d
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	ac e0       	ldi	r26, 0x0C	; 12
    1a90:	b2 e4       	ldi	r27, 0x42	; 66
    1a92:	89 8f       	std	Y+25, r24	; 0x19
    1a94:	9a 8f       	std	Y+26, r25	; 0x1a
    1a96:	ab 8f       	std	Y+27, r26	; 0x1b
    1a98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a e7       	ldi	r20, 0x7A	; 122
    1aa8:	55 e4       	ldi	r21, 0x45	; 69
    1aaa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8d 8b       	std	Y+21, r24	; 0x15
    1ab4:	9e 8b       	std	Y+22, r25	; 0x16
    1ab6:	af 8b       	std	Y+23, r26	; 0x17
    1ab8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aba:	6d 89       	ldd	r22, Y+21	; 0x15
    1abc:	7e 89       	ldd	r23, Y+22	; 0x16
    1abe:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9c 8b       	std	Y+20, r25	; 0x14
    1ad8:	8b 8b       	std	Y+19, r24	; 0x13
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    1adc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ade:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	69 8d       	ldd	r22, Y+25	; 0x19
    1af6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9c 8b       	std	Y+20, r25	; 0x14
    1b1a:	8b 8b       	std	Y+19, r24	; 0x13
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <LCD_enu_Initialization+0xca>
    1b1e:	80 e9       	ldi	r24, 0x90	; 144
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	9a 8b       	std	Y+18, r25	; 0x12
    1b24:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b26:	89 89       	ldd	r24, Y+17	; 0x11
    1b28:	9a 89       	ldd	r25, Y+18	; 0x12
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_enu_Initialization+0xb8>
    1b2e:	9a 8b       	std	Y+18, r25	; 0x12
    1b30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	8b 89       	ldd	r24, Y+19	; 0x13
    1b34:	9c 89       	ldd	r25, Y+20	; 0x14
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	9c 8b       	std	Y+20, r25	; 0x14
    1b3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <LCD_enu_Initialization+0xac>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	6d 89       	ldd	r22, Y+21	; 0x15
    1b48:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9c 8b       	std	Y+20, r25	; 0x14
    1b58:	8b 8b       	std	Y+19, r24	; 0x13
    1b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5e:	98 8b       	std	Y+16, r25	; 0x10
    1b60:	8f 87       	std	Y+15, r24	; 0x0f
    1b62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b64:	98 89       	ldd	r25, Y+16	; 0x10
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_enu_Initialization+0xf4>
    1b6a:	98 8b       	std	Y+16, r25	; 0x10
    1b6c:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	63 e0       	ldi	r22, 0x03	; 3
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	67 e0       	ldi	r22, 0x07	; 7
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	66 e0       	ldi	r22, 0x06	; 6
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	65 e0       	ldi	r22, 0x05	; 5
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	64 e0       	ldi	r22, 0x04	; 4
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	61 e0       	ldi	r22, 0x01	; 1
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	67 e0       	ldi	r22, 0x07	; 7
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	66 e0       	ldi	r22, 0x06	; 6
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	65 e0       	ldi	r22, 0x05	; 5
    1bd6:	41 e0       	ldi	r20, 0x01	; 1
    1bd8:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	64 e0       	ldi	r22, 0x04	; 4
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	63 e0       	ldi	r22, 0x03	; 3
    1bea:	41 e0       	ldi	r20, 0x01	; 1
    1bec:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a0 e8       	ldi	r26, 0x80	; 128
    1bf6:	bf e3       	ldi	r27, 0x3F	; 63
    1bf8:	8b 87       	std	Y+11, r24	; 0x0b
    1bfa:	9c 87       	std	Y+12, r25	; 0x0c
    1bfc:	ad 87       	std	Y+13, r26	; 0x0d
    1bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a e7       	ldi	r20, 0x7A	; 122
    1c0e:	55 e4       	ldi	r21, 0x45	; 69
    1c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8f 83       	std	Y+7, r24	; 0x07
    1c1a:	98 87       	std	Y+8, r25	; 0x08
    1c1c:	a9 87       	std	Y+9, r26	; 0x09
    1c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c20:	6f 81       	ldd	r22, Y+7	; 0x07
    1c22:	78 85       	ldd	r23, Y+8	; 0x08
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	3f c0       	rjmp	.+126    	; 0x1cc0 <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	57 e4       	ldi	r21, 0x47	; 71
    1c52:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	4c f5       	brge	.+82     	; 0x1cac <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <LCD_enu_Initialization+0x230>
    1c84:	80 e9       	ldi	r24, 0x90	; 144
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	9c 83       	std	Y+4, r25	; 0x04
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_enu_Initialization+0x21e>
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <LCD_enu_Initialization+0x212>
    1caa:	14 c0       	rjmp	.+40     	; 0x1cd4 <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_enu_Initialization+0x25a>
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	63 e0       	ldi	r22, 0x03	; 3
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	61 e0       	ldi	r22, 0x01	; 1
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    1ce8:	88 e2       	ldi	r24, 0x28	; 40
    1cea:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	61 e0       	ldi	r22, 0x01	; 1
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0F);
    1cf8:	8f e0       	ldi	r24, 0x0F	; 15
    1cfa:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    1d18:	86 e0       	ldi	r24, 0x06	; 6
    1d1a:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    1d1e:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    1d20:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1d22:	6d 96       	adiw	r28, 0x1d	; 29
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <LCD_enu_SendCommand+0x6>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    1d54:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    1d56:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <LCD_enu_SendData+0x6>
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    1d82:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    1d84:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <LCD_enu_GoToPosition+0x6>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <LCD_enu_GoToPosition+0x8>
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	6b 83       	std	Y+3, r22	; 0x03
    1da0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	81 31       	cpi	r24, 0x11	; 17
    1daa:	88 f5       	brcc	.+98     	; 0x1e0e <LCD_enu_GoToPosition+0x7e>
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	88 23       	and	r24, r24
    1db0:	71 f1       	breq	.+92     	; 0x1e0e <LCD_enu_GoToPosition+0x7e>
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	58 f5       	brcc	.+86     	; 0x1e0e <LCD_enu_GoToPosition+0x7e>
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	88 23       	and	r24, r24
    1dbc:	41 f1       	breq	.+80     	; 0x1e0e <LCD_enu_GoToPosition+0x7e>
    1dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc0:	85 30       	cpi	r24, 0x05	; 5
    1dc2:	28 f5       	brcc	.+74     	; 0x1e0e <LCD_enu_GoToPosition+0x7e>
    1dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc6:	88 23       	and	r24, r24
    1dc8:	11 f1       	breq	.+68     	; 0x1e0e <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 01       	movw	r18, r24
    1ddc:	21 50       	subi	r18, 0x01	; 1
    1dde:	30 40       	sbci	r19, 0x00	; 0
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	82 0f       	add	r24, r18
    1df2:	93 1f       	adc	r25, r19
    1df4:	82 95       	swap	r24
    1df6:	92 95       	swap	r25
    1df8:	90 7f       	andi	r25, 0xF0	; 240
    1dfa:	98 27       	eor	r25, r24
    1dfc:	80 7f       	andi	r24, 0xF0	; 240
    1dfe:	98 27       	eor	r25, r24
    1e00:	98 2f       	mov	r25, r24
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	89 0f       	add	r24, r25
    1e06:	81 58       	subi	r24, 0x81	; 129
    1e08:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <LCD_enu_SendString+0x6>
    1e28:	0f 92       	push	r0
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	9b 83       	std	Y+3, r25	; 0x03
    1e30:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	c1 f0       	breq	.+48     	; 0x1e6e <LCD_enu_SendString+0x4c>
    1e3e:	10 c0       	rjmp	.+32     	; 0x1e60 <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    1e4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e4e:	20 81       	ld	r18, Z
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	9b 81       	ldd	r25, Y+3	; 0x03
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	9b 83       	std	Y+3, r25	; 0x03
    1e58:	8a 83       	std	Y+2, r24	; 0x02
    1e5a:	82 2f       	mov	r24, r18
    1e5c:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    1e60:	ea 81       	ldd	r30, Y+2	; 0x02
    1e62:	fb 81       	ldd	r31, Y+3	; 0x03
    1e64:	80 81       	ld	r24, Z
    1e66:	88 23       	and	r24, r24
    1e68:	59 f7       	brne	.-42     	; 0x1e40 <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    1e6a:	19 82       	std	Y+1, r1	; 0x01
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1e6e:	83 e0       	ldi	r24, 0x03	; 3
    1e70:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <LCD_enu_ClearPage+0x6>
    1e86:	0f 92       	push	r0
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	88 23       	and	r24, r24
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <LCD_enu_ClearPage+0x1a>
    1e98:	49 c0       	rjmp	.+146    	; 0x1f2c <LCD_enu_ClearPage+0xac>
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	85 30       	cpi	r24, 0x05	; 5
    1e9e:	08 f0       	brcs	.+2      	; 0x1ea2 <LCD_enu_ClearPage+0x22>
    1ea0:	45 c0       	rjmp	.+138    	; 0x1f2c <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    1ea2:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	61 e0       	ldi	r22, 0x01	; 1
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	07 96       	adiw	r24, 0x07	; 7
    1eb6:	82 95       	swap	r24
    1eb8:	92 95       	swap	r25
    1eba:	90 7f       	andi	r25, 0xF0	; 240
    1ebc:	98 27       	eor	r25, r24
    1ebe:	80 7f       	andi	r24, 0xF0	; 240
    1ec0:	98 27       	eor	r25, r24
    1ec2:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    1ed0:	19 82       	std	Y+1, r1	; 0x01
    1ed2:	06 c0       	rjmp	.+12     	; 0x1ee0 <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    1ed4:	80 e2       	ldi	r24, 0x20	; 32
    1ed6:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	8f 5f       	subi	r24, 0xFF	; 255
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	80 31       	cpi	r24, 0x10	; 16
    1ee4:	b8 f3       	brcs	.-18     	; 0x1ed4 <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0b 96       	adiw	r24, 0x0b	; 11
    1ef8:	82 95       	swap	r24
    1efa:	92 95       	swap	r25
    1efc:	90 7f       	andi	r25, 0xF0	; 240
    1efe:	98 27       	eor	r25, r24
    1f00:	80 7f       	andi	r24, 0xF0	; 240
    1f02:	98 27       	eor	r25, r24
    1f04:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    1f12:	19 82       	std	Y+1, r1	; 0x01
    1f14:	06 c0       	rjmp	.+12     	; 0x1f22 <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    1f16:	80 e2       	ldi	r24, 0x20	; 32
    1f18:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	8f 5f       	subi	r24, 0xFF	; 255
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	80 31       	cpi	r24, 0x10	; 16
    1f26:	b8 f3       	brcs	.-18     	; 0x1f16 <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    1f28:	1a 82       	std	Y+2, r1	; 0x02
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    1f3e:	cf 92       	push	r12
    1f40:	ef 92       	push	r14
    1f42:	0f 93       	push	r16
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	2e 97       	sbiw	r28, 0x0e	; 14
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	9e 83       	std	Y+6, r25	; 0x06
    1f5a:	8d 83       	std	Y+5, r24	; 0x05
    1f5c:	6f 83       	std	Y+7, r22	; 0x07
    1f5e:	48 87       	std	Y+8, r20	; 0x08
    1f60:	29 87       	std	Y+9, r18	; 0x09
    1f62:	0a 87       	std	Y+10, r16	; 0x0a
    1f64:	eb 86       	std	Y+11, r14	; 0x0b
    1f66:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <LCD_enu_DrawSpecialCharacter+0x38>
    1f74:	b3 c0       	rjmp	.+358    	; 0x20dc <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    1f76:	1b 82       	std	Y+3, r1	; 0x03
    1f78:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    1f7a:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    1f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f7e:	88 23       	and	r24, r24
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <LCD_enu_DrawSpecialCharacter+0x46>
    1f82:	a9 c0       	rjmp	.+338    	; 0x20d6 <LCD_enu_DrawSpecialCharacter+0x198>
    1f84:	8f 81       	ldd	r24, Y+7	; 0x07
    1f86:	89 30       	cpi	r24, 0x09	; 9
    1f88:	08 f0       	brcs	.+2      	; 0x1f8c <LCD_enu_DrawSpecialCharacter+0x4e>
    1f8a:	a5 c0       	rjmp	.+330    	; 0x20d6 <LCD_enu_DrawSpecialCharacter+0x198>
    1f8c:	88 85       	ldd	r24, Y+8	; 0x08
    1f8e:	88 30       	cpi	r24, 0x08	; 8
    1f90:	08 f0       	brcs	.+2      	; 0x1f94 <LCD_enu_DrawSpecialCharacter+0x56>
    1f92:	a1 c0       	rjmp	.+322    	; 0x20d6 <LCD_enu_DrawSpecialCharacter+0x198>
    1f94:	88 85       	ldd	r24, Y+8	; 0x08
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	88 e0       	ldi	r24, 0x08	; 8
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	ac 01       	movw	r20, r24
    1fa0:	42 1b       	sub	r20, r18
    1fa2:	53 0b       	sbc	r21, r19
    1fa4:	9a 01       	movw	r18, r20
    1fa6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	28 17       	cp	r18, r24
    1fae:	39 07       	cpc	r19, r25
    1fb0:	0c f4       	brge	.+2      	; 0x1fb4 <LCD_enu_DrawSpecialCharacter+0x76>
    1fb2:	91 c0       	rjmp	.+290    	; 0x20d6 <LCD_enu_DrawSpecialCharacter+0x198>
    1fb4:	89 85       	ldd	r24, Y+9	; 0x09
    1fb6:	88 23       	and	r24, r24
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <LCD_enu_DrawSpecialCharacter+0x7e>
    1fba:	8d c0       	rjmp	.+282    	; 0x20d6 <LCD_enu_DrawSpecialCharacter+0x198>
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	83 30       	cpi	r24, 0x03	; 3
    1fc0:	08 f0       	brcs	.+2      	; 0x1fc4 <LCD_enu_DrawSpecialCharacter+0x86>
    1fc2:	89 c0       	rjmp	.+274    	; 0x20d6 <LCD_enu_DrawSpecialCharacter+0x198>
    1fc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc6:	88 23       	and	r24, r24
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <LCD_enu_DrawSpecialCharacter+0x8e>
    1fca:	85 c0       	rjmp	.+266    	; 0x20d6 <LCD_enu_DrawSpecialCharacter+0x198>
    1fcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fce:	81 31       	cpi	r24, 0x11	; 17
    1fd0:	08 f0       	brcs	.+2      	; 0x1fd4 <LCD_enu_DrawSpecialCharacter+0x96>
    1fd2:	81 c0       	rjmp	.+258    	; 0x20d6 <LCD_enu_DrawSpecialCharacter+0x198>
    1fd4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fd6:	82 30       	cpi	r24, 0x02	; 2
    1fd8:	08 f0       	brcs	.+2      	; 0x1fdc <LCD_enu_DrawSpecialCharacter+0x9e>
    1fda:	7d c0       	rjmp	.+250    	; 0x20d6 <LCD_enu_DrawSpecialCharacter+0x198>
    1fdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fde:	85 30       	cpi	r24, 0x05	; 5
    1fe0:	08 f0       	brcs	.+2      	; 0x1fe4 <LCD_enu_DrawSpecialCharacter+0xa6>
    1fe2:	79 c0       	rjmp	.+242    	; 0x20d6 <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    1fe4:	19 82       	std	Y+1, r1	; 0x01
    1fe6:	19 c0       	rjmp	.+50     	; 0x201a <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	82 0f       	add	r24, r18
    1ff4:	93 1f       	adc	r25, r19
    1ff6:	9b 83       	std	Y+3, r25	; 0x03
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	98 2f       	mov	r25, r24
    1ffe:	96 95       	lsr	r25
    2000:	96 95       	lsr	r25
    2002:	96 95       	lsr	r25
    2004:	88 85       	ldd	r24, Y+8	; 0x08
    2006:	29 2f       	mov	r18, r25
    2008:	28 0f       	add	r18, r24
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	62 2f       	mov	r22, r18
    2010:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	88 5f       	subi	r24, 0xF8	; 248
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	8f 81       	ldd	r24, Y+7	; 0x07
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	28 17       	cp	r18, r24
    2034:	39 07       	cpc	r19, r25
    2036:	c4 f2       	brlt	.-80     	; 0x1fe8 <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    2042:	8c 85       	ldd	r24, Y+12	; 0x0c
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	3e 87       	std	Y+14, r19	; 0x0e
    204a:	2d 87       	std	Y+13, r18	; 0x0d
    204c:	4d 85       	ldd	r20, Y+13	; 0x0d
    204e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2050:	41 15       	cp	r20, r1
    2052:	51 05       	cpc	r21, r1
    2054:	49 f0       	breq	.+18     	; 0x2068 <LCD_enu_DrawSpecialCharacter+0x12a>
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	9e 85       	ldd	r25, Y+14	; 0x0e
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	91 05       	cpc	r25, r1
    205e:	39 f4       	brne	.+14     	; 0x206e <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    2060:	86 e0       	ldi	r24, 0x06	; 6
    2062:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
    2066:	03 c0       	rjmp	.+6      	; 0x206e <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    2068:	84 e0       	ldi	r24, 0x04	; 4
    206a:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	61 e0       	ldi	r22, 0x01	; 1
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    2078:	8b 85       	ldd	r24, Y+11	; 0x0b
    207a:	88 2f       	mov	r24, r24
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	9c 01       	movw	r18, r24
    2080:	21 50       	subi	r18, 0x01	; 1
    2082:	30 40       	sbci	r19, 0x00	; 0
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	82 0f       	add	r24, r18
    2096:	93 1f       	adc	r25, r19
    2098:	82 95       	swap	r24
    209a:	92 95       	swap	r25
    209c:	90 7f       	andi	r25, 0xF0	; 240
    209e:	98 27       	eor	r25, r24
    20a0:	80 7f       	andi	r24, 0xF0	; 240
    20a2:	98 27       	eor	r25, r24
    20a4:	98 2f       	mov	r25, r24
    20a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a8:	89 0f       	add	r24, r25
    20aa:	81 58       	subi	r24, 0x81	; 129
    20ac:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	61 e0       	ldi	r22, 0x01	; 1
    20b4:	41 e0       	ldi	r20, 0x01	; 1
    20b6:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    20ba:	19 82       	std	Y+1, r1	; 0x01
    20bc:	06 c0       	rjmp	.+12     	; 0x20ca <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	8f 5f       	subi	r24, 0xFF	; 255
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	99 81       	ldd	r25, Y+1	; 0x01
    20cc:	8f 81       	ldd	r24, Y+7	; 0x07
    20ce:	98 17       	cp	r25, r24
    20d0:	b0 f3       	brcs	.-20     	; 0x20be <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    20d2:	1c 82       	std	Y+4, r1	; 0x04
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	8c 83       	std	Y+4, r24	; 0x04
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    20dc:	83 e0       	ldi	r24, 0x03	; 3
    20de:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    20e2:	2e 96       	adiw	r28, 0x0e	; 14
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	0f 91       	pop	r16
    20f4:	ef 90       	pop	r14
    20f6:	cf 90       	pop	r12
    20f8:	08 95       	ret

000020fa <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    20fa:	0f 93       	push	r16
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	2e 97       	sbiw	r28, 0x0e	; 14
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	68 87       	std	Y+8, r22	; 0x08
    2112:	79 87       	std	Y+9, r23	; 0x09
    2114:	8a 87       	std	Y+10, r24	; 0x0a
    2116:	9b 87       	std	Y+11, r25	; 0x0b
    2118:	4c 87       	std	Y+12, r20	; 0x0c
    211a:	2d 87       	std	Y+13, r18	; 0x0d
    211c:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    2122:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    2124:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    2126:	88 85       	ldd	r24, Y+8	; 0x08
    2128:	99 85       	ldd	r25, Y+9	; 0x09
    212a:	aa 85       	ldd	r26, Y+10	; 0x0a
    212c:	bb 85       	ldd	r27, Y+11	; 0x0b
    212e:	bb 23       	and	r27, r27
    2130:	8c f4       	brge	.+34     	; 0x2154 <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    2136:	88 85       	ldd	r24, Y+8	; 0x08
    2138:	99 85       	ldd	r25, Y+9	; 0x09
    213a:	aa 85       	ldd	r26, Y+10	; 0x0a
    213c:	bb 85       	ldd	r27, Y+11	; 0x0b
    213e:	b0 95       	com	r27
    2140:	a0 95       	com	r26
    2142:	90 95       	com	r25
    2144:	81 95       	neg	r24
    2146:	9f 4f       	sbci	r25, 0xFF	; 255
    2148:	af 4f       	sbci	r26, 0xFF	; 255
    214a:	bf 4f       	sbci	r27, 0xFF	; 255
    214c:	88 87       	std	Y+8, r24	; 0x08
    214e:	99 87       	std	Y+9, r25	; 0x09
    2150:	aa 87       	std	Y+10, r26	; 0x0a
    2152:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    2154:	88 85       	ldd	r24, Y+8	; 0x08
    2156:	99 85       	ldd	r25, Y+9	; 0x09
    2158:	aa 85       	ldd	r26, Y+10	; 0x0a
    215a:	bb 85       	ldd	r27, Y+11	; 0x0b
    215c:	8c 83       	std	Y+4, r24	; 0x04
    215e:	9d 83       	std	Y+5, r25	; 0x05
    2160:	ae 83       	std	Y+6, r26	; 0x06
    2162:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	8f 5f       	subi	r24, 0xFF	; 255
    2168:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    216a:	8c 81       	ldd	r24, Y+4	; 0x04
    216c:	9d 81       	ldd	r25, Y+5	; 0x05
    216e:	ae 81       	ldd	r26, Y+6	; 0x06
    2170:	bf 81       	ldd	r27, Y+7	; 0x07
    2172:	2a e0       	ldi	r18, 0x0A	; 10
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__divmodsi4>
    2182:	da 01       	movw	r26, r20
    2184:	c9 01       	movw	r24, r18
    2186:	8c 83       	std	Y+4, r24	; 0x04
    2188:	9d 83       	std	Y+5, r25	; 0x05
    218a:	ae 83       	std	Y+6, r26	; 0x06
    218c:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    218e:	8c 81       	ldd	r24, Y+4	; 0x04
    2190:	9d 81       	ldd	r25, Y+5	; 0x05
    2192:	ae 81       	ldd	r26, Y+6	; 0x06
    2194:	bf 81       	ldd	r27, Y+7	; 0x07
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	a1 05       	cpc	r26, r1
    219a:	b1 05       	cpc	r27, r1
    219c:	19 f7       	brne	.-58     	; 0x2164 <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    219e:	8c 85       	ldd	r24, Y+12	; 0x0c
    21a0:	88 23       	and	r24, r24
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <LCD_enu_WriteIntegerNum+0xac>
    21a4:	6b c0       	rjmp	.+214    	; 0x227c <LCD_enu_WriteIntegerNum+0x182>
    21a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	08 f0       	brcs	.+2      	; 0x21ae <LCD_enu_WriteIntegerNum+0xb4>
    21ac:	67 c0       	rjmp	.+206    	; 0x227c <LCD_enu_WriteIntegerNum+0x182>
    21ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b0:	88 23       	and	r24, r24
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <LCD_enu_WriteIntegerNum+0xbc>
    21b4:	63 c0       	rjmp	.+198    	; 0x227c <LCD_enu_WriteIntegerNum+0x182>
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	81 31       	cpi	r24, 0x11	; 17
    21ba:	08 f0       	brcs	.+2      	; 0x21be <LCD_enu_WriteIntegerNum+0xc4>
    21bc:	5f c0       	rjmp	.+190    	; 0x227c <LCD_enu_WriteIntegerNum+0x182>
    21be:	8e 85       	ldd	r24, Y+14	; 0x0e
    21c0:	85 30       	cpi	r24, 0x05	; 5
    21c2:	08 f0       	brcs	.+2      	; 0x21c6 <LCD_enu_WriteIntegerNum+0xcc>
    21c4:	5b c0       	rjmp	.+182    	; 0x227c <LCD_enu_WriteIntegerNum+0x182>
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	81 31       	cpi	r24, 0x11	; 17
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <LCD_enu_WriteIntegerNum+0xd4>
    21cc:	57 c0       	rjmp	.+174    	; 0x227c <LCD_enu_WriteIntegerNum+0x182>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    21ce:	88 85       	ldd	r24, Y+8	; 0x08
    21d0:	99 85       	ldd	r25, Y+9	; 0x09
    21d2:	aa 85       	ldd	r26, Y+10	; 0x0a
    21d4:	bb 85       	ldd	r27, Y+11	; 0x0b
    21d6:	8c 83       	std	Y+4, r24	; 0x04
    21d8:	9d 83       	std	Y+5, r25	; 0x05
    21da:	ae 83       	std	Y+6, r26	; 0x06
    21dc:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    21de:	ce 01       	movw	r24, r28
    21e0:	04 96       	adiw	r24, 0x04	; 4
    21e2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	61 e0       	ldi	r22, 0x01	; 1
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	88 23       	and	r24, r24
    21fe:	51 f1       	breq	.+84     	; 0x2254 <LCD_enu_WriteIntegerNum+0x15a>
        {
            enu_PassByteAndLatch('-');
    2200:	8d e2       	ldi	r24, 0x2D	; 45
    2202:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
    2206:	26 c0       	rjmp	.+76     	; 0x2254 <LCD_enu_WriteIntegerNum+0x15a>
        }
        //Printing one digit at a time
        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	9d 81       	ldd	r25, Y+5	; 0x05
    220c:	ae 81       	ldd	r26, Y+6	; 0x06
    220e:	bf 81       	ldd	r27, Y+7	; 0x07
    2210:	2a e0       	ldi	r18, 0x0A	; 10
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__divmodsi4>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	80 5d       	subi	r24, 0xD0	; 208
    2226:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    222a:	8c 81       	ldd	r24, Y+4	; 0x04
    222c:	9d 81       	ldd	r25, Y+5	; 0x05
    222e:	ae 81       	ldd	r26, Y+6	; 0x06
    2230:	bf 81       	ldd	r27, Y+7	; 0x07
    2232:	2a e0       	ldi	r18, 0x0A	; 10
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	50 e0       	ldi	r21, 0x00	; 0
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__divmodsi4>
    2242:	da 01       	movw	r26, r20
    2244:	c9 01       	movw	r24, r18
    2246:	8c 83       	std	Y+4, r24	; 0x04
    2248:	9d 83       	std	Y+5, r25	; 0x05
    224a:	ae 83       	std	Y+6, r26	; 0x06
    224c:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	81 50       	subi	r24, 0x01	; 1
    2252:	8a 83       	std	Y+2, r24	; 0x02
        if(local_u8_NegativeFlag)
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time
        while (Local_u32_TempVariable)
    2254:	8c 81       	ldd	r24, Y+4	; 0x04
    2256:	9d 81       	ldd	r25, Y+5	; 0x05
    2258:	ae 81       	ldd	r26, Y+6	; 0x06
    225a:	bf 81       	ldd	r27, Y+7	; 0x07
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	a1 05       	cpc	r26, r1
    2260:	b1 05       	cpc	r27, r1
    2262:	91 f6       	brne	.-92     	; 0x2208 <LCD_enu_WriteIntegerNum+0x10e>
    2264:	06 c0       	rjmp	.+12     	; 0x2272 <LCD_enu_WriteIntegerNum+0x178>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    2266:	80 e3       	ldi	r24, 0x30	; 48
    2268:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	81 50       	subi	r24, 0x01	; 1
    2270:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	88 23       	and	r24, r24
    2276:	b9 f7       	brne	.-18     	; 0x2266 <LCD_enu_WriteIntegerNum+0x16c>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    2278:	1b 82       	std	Y+3, r1	; 0x03
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <LCD_enu_WriteIntegerNum+0x186>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    227c:	82 e0       	ldi	r24, 0x02	; 2
    227e:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2282:	2e 96       	adiw	r28, 0x0e	; 14
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    2296:	0f 93       	push	r16
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	63 97       	sbiw	r28, 0x13	; 19
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	6d 87       	std	Y+13, r22	; 0x0d
    22ae:	7e 87       	std	Y+14, r23	; 0x0e
    22b0:	8f 87       	std	Y+15, r24	; 0x0f
    22b2:	98 8b       	std	Y+16, r25	; 0x10
    22b4:	49 8b       	std	Y+17, r20	; 0x11
    22b6:	2a 8b       	std	Y+18, r18	; 0x12
    22b8:	0b 8b       	std	Y+19, r16	; 0x13
    u8 Local_u8_ErrorFlag = ES_NOK;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	88 87       	std	Y+8, r24	; 0x08

    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    22be:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = 0;
    22c0:	1a 82       	std	Y+2, r1	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    22c2:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    22c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    22c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    22c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ca:	98 89       	ldd	r25, Y+16	; 0x10
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    22d8:	88 23       	and	r24, r24
    22da:	5c f4       	brge	.+22     	; 0x22f2 <LCD_enu_WriteFloatNum+0x5c>
    {
        local_u8_NegativeFlag = True;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	af 85       	ldd	r26, Y+15	; 0x0f
    22e6:	b8 89       	ldd	r27, Y+16	; 0x10
    22e8:	b0 58       	subi	r27, 0x80	; 128
    22ea:	8d 87       	std	Y+13, r24	; 0x0d
    22ec:	9e 87       	std	Y+14, r25	; 0x0e
    22ee:	af 87       	std	Y+15, r26	; 0x0f
    22f0:	b8 8b       	std	Y+16, r27	; 0x10
    }


    Local_u32_WholeDigits = Copy_f32_Num;
    22f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    22f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    22f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f8:	98 89       	ldd	r25, Y+16	; 0x10
    22fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	89 87       	std	Y+9, r24	; 0x09
    2304:	9a 87       	std	Y+10, r25	; 0x0a
    2306:	ab 87       	std	Y+11, r26	; 0x0b
    2308:	bc 87       	std	Y+12, r27	; 0x0c

    Local_f32_DecimalDigits = Copy_f32_Num - (f32)(Local_u32_WholeDigits);
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2310:	bc 85       	ldd	r27, Y+12	; 0x0c
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 25 04 	call	0x84a	; 0x84a <__floatunsisf>
    231a:	9b 01       	movw	r18, r22
    231c:	ac 01       	movw	r20, r24
    231e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2320:	7e 85       	ldd	r23, Y+14	; 0x0e
    2322:	8f 85       	ldd	r24, Y+15	; 0x0f
    2324:	98 89       	ldd	r25, Y+16	; 0x10
    2326:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8c 83       	std	Y+4, r24	; 0x04
    2330:	9d 83       	std	Y+5, r25	; 0x05
    2332:	ae 83       	std	Y+6, r26	; 0x06
    2334:	bf 83       	std	Y+7, r27	; 0x07
   
    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	8f 5f       	subi	r24, 0xFF	; 255
    233a:	8b 83       	std	Y+3, r24	; 0x03
        Local_u32_WholeDigits  /= 10;
    233c:	89 85       	ldd	r24, Y+9	; 0x09
    233e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2340:	ab 85       	ldd	r26, Y+11	; 0x0b
    2342:	bc 85       	ldd	r27, Y+12	; 0x0c
    2344:	2a e0       	ldi	r18, 0x0A	; 10
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	50 e0       	ldi	r21, 0x00	; 0
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__udivmodsi4>
    2354:	da 01       	movw	r26, r20
    2356:	c9 01       	movw	r24, r18
    2358:	89 87       	std	Y+9, r24	; 0x09
    235a:	9a 87       	std	Y+10, r25	; 0x0a
    235c:	ab 87       	std	Y+11, r26	; 0x0b
    235e:	bc 87       	std	Y+12, r27	; 0x0c

    }while(Local_u32_WholeDigits);
    2360:	89 85       	ldd	r24, Y+9	; 0x09
    2362:	9a 85       	ldd	r25, Y+10	; 0x0a
    2364:	ab 85       	ldd	r26, Y+11	; 0x0b
    2366:	bc 85       	ldd	r27, Y+12	; 0x0c
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	a1 05       	cpc	r26, r1
    236c:	b1 05       	cpc	r27, r1
    236e:	19 f7       	brne	.-58     	; 0x2336 <LCD_enu_WriteFloatNum+0xa0>

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    237a:	19 86       	std	Y+9, r1	; 0x09
    237c:	1a 86       	std	Y+10, r1	; 0x0a
    237e:	1b 86       	std	Y+11, r1	; 0x0b
    2380:	1c 86       	std	Y+12, r1	; 0x0c
    2382:	1f c0       	rjmp	.+62     	; 0x23c2 <LCD_enu_WriteFloatNum+0x12c>
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    {
        Local_f32_DecimalDigits *= 10;
    2384:	6c 81       	ldd	r22, Y+4	; 0x04
    2386:	7d 81       	ldd	r23, Y+5	; 0x05
    2388:	8e 81       	ldd	r24, Y+6	; 0x06
    238a:	9f 81       	ldd	r25, Y+7	; 0x07
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e2       	ldi	r20, 0x20	; 32
    2392:	51 e4       	ldi	r21, 0x41	; 65
    2394:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8c 83       	std	Y+4, r24	; 0x04
    239e:	9d 83       	std	Y+5, r25	; 0x05
    23a0:	ae 83       	std	Y+6, r26	; 0x06
    23a2:	bf 83       	std	Y+7, r27	; 0x07
        Local_u32_WholeDigits = Local_f32_DecimalDigits;
    23a4:	6c 81       	ldd	r22, Y+4	; 0x04
    23a6:	7d 81       	ldd	r23, Y+5	; 0x05
    23a8:	8e 81       	ldd	r24, Y+6	; 0x06
    23aa:	9f 81       	ldd	r25, Y+7	; 0x07
    23ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	89 87       	std	Y+9, r24	; 0x09
    23b6:	9a 87       	std	Y+10, r25	; 0x0a
    23b8:	ab 87       	std	Y+11, r26	; 0x0b
    23ba:	bc 87       	std	Y+12, r27	; 0x0c
        Local_u8_DecimalDigitCount++;
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	8f 5f       	subi	r24, 0xFF	; 255
    23c0:	8a 83       	std	Y+2, r24	; 0x02

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    23c2:	89 85       	ldd	r24, Y+9	; 0x09
    23c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c6:	ab 85       	ldd	r26, Y+11	; 0x0b
    23c8:	bc 85       	ldd	r27, Y+12	; 0x0c
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 25 04 	call	0x84a	; 0x84a <__floatunsisf>
    23d2:	9b 01       	movw	r18, r22
    23d4:	ac 01       	movw	r20, r24
    23d6:	6c 81       	ldd	r22, Y+4	; 0x04
    23d8:	7d 81       	ldd	r23, Y+5	; 0x05
    23da:	8e 81       	ldd	r24, Y+6	; 0x06
    23dc:	9f 81       	ldd	r25, Y+7	; 0x07
    23de:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	2c ea       	ldi	r18, 0xAC	; 172
    23ec:	35 ec       	ldi	r19, 0xC5	; 197
    23ee:	47 e2       	ldi	r20, 0x27	; 39
    23f0:	57 e3       	ldi	r21, 0x37	; 55
    23f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gesf2>
    23f6:	88 23       	and	r24, r24
    23f8:	2c f6       	brge	.-118    	; 0x2384 <LCD_enu_WriteFloatNum+0xee>
        Local_u8_DecimalDigitCount++;
        
    
    }

    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && ((Local_u32_WholeDigits + Local_u8_DecimalDigitCount) <= LCD_MAX_INTEGER_LENGTH))
    23fa:	89 89       	ldd	r24, Y+17	; 0x11
    23fc:	88 23       	and	r24, r24
    23fe:	09 f4       	brne	.+2      	; 0x2402 <LCD_enu_WriteFloatNum+0x16c>
    2400:	fd c0       	rjmp	.+506    	; 0x25fc <LCD_enu_WriteFloatNum+0x366>
    2402:	89 89       	ldd	r24, Y+17	; 0x11
    2404:	83 30       	cpi	r24, 0x03	; 3
    2406:	08 f0       	brcs	.+2      	; 0x240a <LCD_enu_WriteFloatNum+0x174>
    2408:	f9 c0       	rjmp	.+498    	; 0x25fc <LCD_enu_WriteFloatNum+0x366>
    240a:	8a 89       	ldd	r24, Y+18	; 0x12
    240c:	88 23       	and	r24, r24
    240e:	09 f4       	brne	.+2      	; 0x2412 <LCD_enu_WriteFloatNum+0x17c>
    2410:	f5 c0       	rjmp	.+490    	; 0x25fc <LCD_enu_WriteFloatNum+0x366>
    2412:	8a 89       	ldd	r24, Y+18	; 0x12
    2414:	81 31       	cpi	r24, 0x11	; 17
    2416:	08 f0       	brcs	.+2      	; 0x241a <LCD_enu_WriteFloatNum+0x184>
    2418:	f1 c0       	rjmp	.+482    	; 0x25fc <LCD_enu_WriteFloatNum+0x366>
    241a:	8b 89       	ldd	r24, Y+19	; 0x13
    241c:	85 30       	cpi	r24, 0x05	; 5
    241e:	08 f0       	brcs	.+2      	; 0x2422 <LCD_enu_WriteFloatNum+0x18c>
    2420:	ed c0       	rjmp	.+474    	; 0x25fc <LCD_enu_WriteFloatNum+0x366>
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	89 85       	ldd	r24, Y+9	; 0x09
    242e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2430:	ab 85       	ldd	r26, Y+11	; 0x0b
    2432:	bc 85       	ldd	r27, Y+12	; 0x0c
    2434:	82 0f       	add	r24, r18
    2436:	93 1f       	adc	r25, r19
    2438:	a4 1f       	adc	r26, r20
    243a:	b5 1f       	adc	r27, r21
    243c:	81 31       	cpi	r24, 0x11	; 17
    243e:	91 05       	cpc	r25, r1
    2440:	a1 05       	cpc	r26, r1
    2442:	b1 05       	cpc	r27, r1
    2444:	08 f0       	brcs	.+2      	; 0x2448 <LCD_enu_WriteFloatNum+0x1b2>
    2446:	da c0       	rjmp	.+436    	; 0x25fc <LCD_enu_WriteFloatNum+0x366>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	61 e0       	ldi	r22, 0x01	; 1
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    2452:	8b 89       	ldd	r24, Y+19	; 0x13
    2454:	88 2f       	mov	r24, r24
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	9c 01       	movw	r18, r24
    245a:	21 50       	subi	r18, 0x01	; 1
    245c:	30 40       	sbci	r19, 0x00	; 0
    245e:	89 89       	ldd	r24, Y+17	; 0x11
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	82 0f       	add	r24, r18
    2470:	93 1f       	adc	r25, r19
    2472:	82 95       	swap	r24
    2474:	92 95       	swap	r25
    2476:	90 7f       	andi	r25, 0xF0	; 240
    2478:	98 27       	eor	r25, r24
    247a:	80 7f       	andi	r24, 0xF0	; 240
    247c:	98 27       	eor	r25, r24
    247e:	98 2f       	mov	r25, r24
    2480:	8a 89       	ldd	r24, Y+18	; 0x12
    2482:	89 0f       	add	r24, r25
    2484:	81 58       	subi	r24, 0x81	; 129
    2486:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
        
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	61 e0       	ldi	r22, 0x01	; 1
    248e:	41 e0       	ldi	r20, 0x01	; 1
    2490:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	88 23       	and	r24, r24
    2498:	19 f0       	breq	.+6      	; 0x24a0 <LCD_enu_WriteFloatNum+0x20a>
        {
            enu_PassByteAndLatch('-');
    249a:	8d e2       	ldi	r24, 0x2D	; 45
    249c:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
        }

        //A] Printing whole digits 
        Local_u32_WholeDigits = Copy_f32_Num;
    24a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    24a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    24a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a6:	98 89       	ldd	r25, Y+16	; 0x10
    24a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	89 87       	std	Y+9, r24	; 0x09
    24b2:	9a 87       	std	Y+10, r25	; 0x0a
    24b4:	ab 87       	std	Y+11, r26	; 0x0b
    24b6:	bc 87       	std	Y+12, r27	; 0x0c
        enu_ReverseInteger(&Local_u32_WholeDigits);
    24b8:	ce 01       	movw	r24, r28
    24ba:	09 96       	adiw	r24, 0x09	; 9
    24bc:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <enu_ReverseInteger>


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	61 e0       	ldi	r22, 0x01	; 1
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    24ca:	26 c0       	rjmp	.+76     	; 0x2518 <LCD_enu_WriteFloatNum+0x282>
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	ab 85       	ldd	r26, Y+11	; 0x0b
    24d2:	bc 85       	ldd	r27, Y+12	; 0x0c
    24d4:	2a e0       	ldi	r18, 0x0A	; 10
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__udivmodsi4>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	80 5d       	subi	r24, 0xD0	; 208
    24ea:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
            Local_u32_WholeDigits /= 10;
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    24f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    24f6:	2a e0       	ldi	r18, 0x0A	; 10
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	50 e0       	ldi	r21, 0x00	; 0
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__udivmodsi4>
    2506:	da 01       	movw	r26, r20
    2508:	c9 01       	movw	r24, r18
    250a:	89 87       	std	Y+9, r24	; 0x09
    250c:	9a 87       	std	Y+10, r25	; 0x0a
    250e:	ab 87       	std	Y+11, r26	; 0x0b
    2510:	bc 87       	std	Y+12, r27	; 0x0c
            Local_u8_WholeDigitCount--;
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	81 50       	subi	r24, 0x01	; 1
    2516:	8b 83       	std	Y+3, r24	; 0x03


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    2518:	89 85       	ldd	r24, Y+9	; 0x09
    251a:	9a 85       	ldd	r25, Y+10	; 0x0a
    251c:	ab 85       	ldd	r26, Y+11	; 0x0b
    251e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	a1 05       	cpc	r26, r1
    2524:	b1 05       	cpc	r27, r1
    2526:	91 f6       	brne	.-92     	; 0x24cc <LCD_enu_WriteFloatNum+0x236>
    2528:	06 c0       	rjmp	.+12     	; 0x2536 <LCD_enu_WriteFloatNum+0x2a0>
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    252a:	80 e3       	ldi	r24, 0x30	; 48
    252c:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
            Local_u8_WholeDigitCount--;
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	81 50       	subi	r24, 0x01	; 1
    2534:	8b 83       	std	Y+3, r24	; 0x03
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
            Local_u32_WholeDigits /= 10;
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	88 23       	and	r24, r24
    253a:	b9 f7       	brne	.-18     	; 0x252a <LCD_enu_WriteFloatNum+0x294>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    253c:	6c 81       	ldd	r22, Y+4	; 0x04
    253e:	7d 81       	ldd	r23, Y+5	; 0x05
    2540:	8e 81       	ldd	r24, Y+6	; 0x06
    2542:	9f 81       	ldd	r25, Y+7	; 0x07
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e0       	ldi	r20, 0x00	; 0
    254a:	50 e0       	ldi	r21, 0x00	; 0
    254c:	0e 94 11 03 	call	0x622	; 0x622 <__nesf2>
    2550:	88 23       	and	r24, r24
    2552:	09 f4       	brne	.+2      	; 0x2556 <LCD_enu_WriteFloatNum+0x2c0>
    2554:	51 c0       	rjmp	.+162    	; 0x25f8 <LCD_enu_WriteFloatNum+0x362>
        {
            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>

            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    2560:	8e e2       	ldi	r24, 0x2E	; 46
    2562:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>

            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
    2566:	6c 81       	ldd	r22, Y+4	; 0x04
    2568:	7d 81       	ldd	r23, Y+5	; 0x05
    256a:	8e 81       	ldd	r24, Y+6	; 0x06
    256c:	9f 81       	ldd	r25, Y+7	; 0x07
    256e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	89 87       	std	Y+9, r24	; 0x09
    2578:	9a 87       	std	Y+10, r25	; 0x0a
    257a:	ab 87       	std	Y+11, r26	; 0x0b
    257c:	bc 87       	std	Y+12, r27	; 0x0c
            enu_ReverseInteger(&Local_u32_WholeDigits);
    257e:	ce 01       	movw	r24, r28
    2580:	09 96       	adiw	r24, 0x09	; 9
    2582:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <enu_ReverseInteger>
    2586:	26 c0       	rjmp	.+76     	; 0x25d4 <LCD_enu_WriteFloatNum+0x33e>
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
            {
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	ab 85       	ldd	r26, Y+11	; 0x0b
    258e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2590:	2a e0       	ldi	r18, 0x0A	; 10
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__udivmodsi4>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	80 5d       	subi	r24, 0xD0	; 208
    25a6:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
                Local_u32_WholeDigits /= 10;
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    25b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    25b2:	2a e0       	ldi	r18, 0x0A	; 10
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e0       	ldi	r20, 0x00	; 0
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__udivmodsi4>
    25c2:	da 01       	movw	r26, r20
    25c4:	c9 01       	movw	r24, r18
    25c6:	89 87       	std	Y+9, r24	; 0x09
    25c8:	9a 87       	std	Y+10, r25	; 0x0a
    25ca:	ab 87       	std	Y+11, r26	; 0x0b
    25cc:	bc 87       	std	Y+12, r27	; 0x0c
                Local_u8_DecimalDigitCount--;
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	81 50       	subi	r24, 0x01	; 1
    25d2:	8a 83       	std	Y+2, r24	; 0x02
            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
            enu_ReverseInteger(&Local_u32_WholeDigits);
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    25da:	bc 85       	ldd	r27, Y+12	; 0x0c
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	a1 05       	cpc	r26, r1
    25e0:	b1 05       	cpc	r27, r1
    25e2:	91 f6       	brne	.-92     	; 0x2588 <LCD_enu_WriteFloatNum+0x2f2>
    25e4:	06 c0       	rjmp	.+12     	; 0x25f2 <LCD_enu_WriteFloatNum+0x35c>
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    25e6:	80 e3       	ldi	r24, 0x30	; 48
    25e8:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	81 50       	subi	r24, 0x01	; 1
    25f0:	8a 83       	std	Y+2, r24	; 0x02
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
                Local_u32_WholeDigits /= 10;
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	88 23       	and	r24, r24
    25f6:	b9 f7       	brne	.-18     	; 0x25e6 <LCD_enu_WriteFloatNum+0x350>
            
            

        }

        Local_u8_ErrorFlag = ES_OK;
    25f8:	18 86       	std	Y+8, r1	; 0x08
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <LCD_enu_WriteFloatNum+0x36a>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	88 87       	std	Y+8, r24	; 0x08
    }

    return Local_u8_ErrorFlag;
    2600:	88 85       	ldd	r24, Y+8	; 0x08

}
    2602:	63 96       	adiw	r28, 0x13	; 19
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	0f 91       	pop	r16
    2614:	08 95       	ret

00002616 <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	ac 97       	sbiw	r28, 0x2c	; 44
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	de bf       	out	0x3e, r29	; 62
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	62 e0       	ldi	r22, 0x02	; 2
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	63 e0       	ldi	r22, 0x03	; 3
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    2644:	8c a5       	ldd	r24, Y+44	; 0x2c
    2646:	98 2f       	mov	r25, r24
    2648:	99 1f       	adc	r25, r25
    264a:	99 27       	eor	r25, r25
    264c:	99 1f       	adc	r25, r25
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	67 e0       	ldi	r22, 0x07	; 7
    2652:	49 2f       	mov	r20, r25
    2654:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    2658:	8c a5       	ldd	r24, Y+44	; 0x2c
    265a:	82 95       	swap	r24
    265c:	86 95       	lsr	r24
    265e:	86 95       	lsr	r24
    2660:	83 70       	andi	r24, 0x03	; 3
    2662:	98 2f       	mov	r25, r24
    2664:	91 70       	andi	r25, 0x01	; 1
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	66 e0       	ldi	r22, 0x06	; 6
    266a:	49 2f       	mov	r20, r25
    266c:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    2670:	8c a5       	ldd	r24, Y+44	; 0x2c
    2672:	82 95       	swap	r24
    2674:	86 95       	lsr	r24
    2676:	87 70       	andi	r24, 0x07	; 7
    2678:	98 2f       	mov	r25, r24
    267a:	91 70       	andi	r25, 0x01	; 1
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	65 e0       	ldi	r22, 0x05	; 5
    2680:	49 2f       	mov	r20, r25
    2682:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    2686:	8c a5       	ldd	r24, Y+44	; 0x2c
    2688:	82 95       	swap	r24
    268a:	8f 70       	andi	r24, 0x0F	; 15
    268c:	98 2f       	mov	r25, r24
    268e:	91 70       	andi	r25, 0x01	; 1
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	64 e0       	ldi	r22, 0x04	; 4
    2694:	49 2f       	mov	r20, r25
    2696:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	63 e0       	ldi	r22, 0x03	; 3
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	a0 e8       	ldi	r26, 0x80	; 128
    26aa:	bf e3       	ldi	r27, 0x3F	; 63
    26ac:	8f a3       	std	Y+39, r24	; 0x27
    26ae:	98 a7       	std	Y+40, r25	; 0x28
    26b0:	a9 a7       	std	Y+41, r26	; 0x29
    26b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b4:	6f a1       	ldd	r22, Y+39	; 0x27
    26b6:	78 a5       	ldd	r23, Y+40	; 0x28
    26b8:	89 a5       	ldd	r24, Y+41	; 0x29
    26ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	4a e7       	ldi	r20, 0x7A	; 122
    26c2:	55 e4       	ldi	r21, 0x45	; 69
    26c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	8b a3       	std	Y+35, r24	; 0x23
    26ce:	9c a3       	std	Y+36, r25	; 0x24
    26d0:	ad a3       	std	Y+37, r26	; 0x25
    26d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26d4:	6b a1       	ldd	r22, Y+35	; 0x23
    26d6:	7c a1       	ldd	r23, Y+36	; 0x24
    26d8:	8d a1       	ldd	r24, Y+37	; 0x25
    26da:	9e a1       	ldd	r25, Y+38	; 0x26
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e8       	ldi	r20, 0x80	; 128
    26e2:	5f e3       	ldi	r21, 0x3F	; 63
    26e4:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    26e8:	88 23       	and	r24, r24
    26ea:	2c f4       	brge	.+10     	; 0x26f6 <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	9a a3       	std	Y+34, r25	; 0x22
    26f2:	89 a3       	std	Y+33, r24	; 0x21
    26f4:	3f c0       	rjmp	.+126    	; 0x2774 <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    26f6:	6b a1       	ldd	r22, Y+35	; 0x23
    26f8:	7c a1       	ldd	r23, Y+36	; 0x24
    26fa:	8d a1       	ldd	r24, Y+37	; 0x25
    26fc:	9e a1       	ldd	r25, Y+38	; 0x26
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	3f ef       	ldi	r19, 0xFF	; 255
    2702:	4f e7       	ldi	r20, 0x7F	; 127
    2704:	57 e4       	ldi	r21, 0x47	; 71
    2706:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    270a:	18 16       	cp	r1, r24
    270c:	4c f5       	brge	.+82     	; 0x2760 <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270e:	6f a1       	ldd	r22, Y+39	; 0x27
    2710:	78 a5       	ldd	r23, Y+40	; 0x28
    2712:	89 a5       	ldd	r24, Y+41	; 0x29
    2714:	9a a5       	ldd	r25, Y+42	; 0x2a
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e2       	ldi	r20, 0x20	; 32
    271c:	51 e4       	ldi	r21, 0x41	; 65
    271e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	bc 01       	movw	r22, r24
    2728:	cd 01       	movw	r24, r26
    272a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	9a a3       	std	Y+34, r25	; 0x22
    2734:	89 a3       	std	Y+33, r24	; 0x21
    2736:	0f c0       	rjmp	.+30     	; 0x2756 <enu_PassByteAndLatch+0x140>
    2738:	80 e9       	ldi	r24, 0x90	; 144
    273a:	91 e0       	ldi	r25, 0x01	; 1
    273c:	98 a3       	std	Y+32, r25	; 0x20
    273e:	8f 8f       	std	Y+31, r24	; 0x1f
    2740:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2742:	98 a1       	ldd	r25, Y+32	; 0x20
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <enu_PassByteAndLatch+0x12e>
    2748:	98 a3       	std	Y+32, r25	; 0x20
    274a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274c:	89 a1       	ldd	r24, Y+33	; 0x21
    274e:	9a a1       	ldd	r25, Y+34	; 0x22
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	9a a3       	std	Y+34, r25	; 0x22
    2754:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2756:	89 a1       	ldd	r24, Y+33	; 0x21
    2758:	9a a1       	ldd	r25, Y+34	; 0x22
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	69 f7       	brne	.-38     	; 0x2738 <enu_PassByteAndLatch+0x122>
    275e:	14 c0       	rjmp	.+40     	; 0x2788 <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2760:	6b a1       	ldd	r22, Y+35	; 0x23
    2762:	7c a1       	ldd	r23, Y+36	; 0x24
    2764:	8d a1       	ldd	r24, Y+37	; 0x25
    2766:	9e a1       	ldd	r25, Y+38	; 0x26
    2768:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9a a3       	std	Y+34, r25	; 0x22
    2772:	89 a3       	std	Y+33, r24	; 0x21
    2774:	89 a1       	ldd	r24, Y+33	; 0x21
    2776:	9a a1       	ldd	r25, Y+34	; 0x22
    2778:	9e 8f       	std	Y+30, r25	; 0x1e
    277a:	8d 8f       	std	Y+29, r24	; 0x1d
    277c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    277e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <enu_PassByteAndLatch+0x16a>
    2784:	9e 8f       	std	Y+30, r25	; 0x1e
    2786:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	63 e0       	ldi	r22, 0x03	; 3
    278c:	40 e0       	ldi	r20, 0x00	; 0
    278e:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    2792:	8c a5       	ldd	r24, Y+44	; 0x2c
    2794:	86 95       	lsr	r24
    2796:	86 95       	lsr	r24
    2798:	86 95       	lsr	r24
    279a:	98 2f       	mov	r25, r24
    279c:	91 70       	andi	r25, 0x01	; 1
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	67 e0       	ldi	r22, 0x07	; 7
    27a2:	49 2f       	mov	r20, r25
    27a4:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    27a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    27aa:	86 95       	lsr	r24
    27ac:	86 95       	lsr	r24
    27ae:	98 2f       	mov	r25, r24
    27b0:	91 70       	andi	r25, 0x01	; 1
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	66 e0       	ldi	r22, 0x06	; 6
    27b6:	49 2f       	mov	r20, r25
    27b8:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    27bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    27be:	86 95       	lsr	r24
    27c0:	98 2f       	mov	r25, r24
    27c2:	91 70       	andi	r25, 0x01	; 1
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	65 e0       	ldi	r22, 0x05	; 5
    27c8:	49 2f       	mov	r20, r25
    27ca:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    27ce:	8c a5       	ldd	r24, Y+44	; 0x2c
    27d0:	98 2f       	mov	r25, r24
    27d2:	91 70       	andi	r25, 0x01	; 1
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	64 e0       	ldi	r22, 0x04	; 4
    27d8:	49 2f       	mov	r20, r25
    27da:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	63 e0       	ldi	r22, 0x03	; 3
    27e2:	41 e0       	ldi	r20, 0x01	; 1
    27e4:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	a0 e8       	ldi	r26, 0x80	; 128
    27ee:	bf e3       	ldi	r27, 0x3F	; 63
    27f0:	89 8f       	std	Y+25, r24	; 0x19
    27f2:	9a 8f       	std	Y+26, r25	; 0x1a
    27f4:	ab 8f       	std	Y+27, r26	; 0x1b
    27f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f8:	69 8d       	ldd	r22, Y+25	; 0x19
    27fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4a e7       	ldi	r20, 0x7A	; 122
    2806:	55 e4       	ldi	r21, 0x45	; 69
    2808:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	8d 8b       	std	Y+21, r24	; 0x15
    2812:	9e 8b       	std	Y+22, r25	; 0x16
    2814:	af 8b       	std	Y+23, r26	; 0x17
    2816:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2818:	6d 89       	ldd	r22, Y+21	; 0x15
    281a:	7e 89       	ldd	r23, Y+22	; 0x16
    281c:	8f 89       	ldd	r24, Y+23	; 0x17
    281e:	98 8d       	ldd	r25, Y+24	; 0x18
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e8       	ldi	r20, 0x80	; 128
    2826:	5f e3       	ldi	r21, 0x3F	; 63
    2828:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    282c:	88 23       	and	r24, r24
    282e:	2c f4       	brge	.+10     	; 0x283a <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9c 8b       	std	Y+20, r25	; 0x14
    2836:	8b 8b       	std	Y+19, r24	; 0x13
    2838:	3f c0       	rjmp	.+126    	; 0x28b8 <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    283a:	6d 89       	ldd	r22, Y+21	; 0x15
    283c:	7e 89       	ldd	r23, Y+22	; 0x16
    283e:	8f 89       	ldd	r24, Y+23	; 0x17
    2840:	98 8d       	ldd	r25, Y+24	; 0x18
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	3f ef       	ldi	r19, 0xFF	; 255
    2846:	4f e7       	ldi	r20, 0x7F	; 127
    2848:	57 e4       	ldi	r21, 0x47	; 71
    284a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    284e:	18 16       	cp	r1, r24
    2850:	4c f5       	brge	.+82     	; 0x28a4 <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2852:	69 8d       	ldd	r22, Y+25	; 0x19
    2854:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2856:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2858:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e2       	ldi	r20, 0x20	; 32
    2860:	51 e4       	ldi	r21, 0x41	; 65
    2862:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9c 8b       	std	Y+20, r25	; 0x14
    2878:	8b 8b       	std	Y+19, r24	; 0x13
    287a:	0f c0       	rjmp	.+30     	; 0x289a <enu_PassByteAndLatch+0x284>
    287c:	80 e9       	ldi	r24, 0x90	; 144
    287e:	91 e0       	ldi	r25, 0x01	; 1
    2880:	9a 8b       	std	Y+18, r25	; 0x12
    2882:	89 8b       	std	Y+17, r24	; 0x11
    2884:	89 89       	ldd	r24, Y+17	; 0x11
    2886:	9a 89       	ldd	r25, Y+18	; 0x12
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <enu_PassByteAndLatch+0x272>
    288c:	9a 8b       	std	Y+18, r25	; 0x12
    288e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2890:	8b 89       	ldd	r24, Y+19	; 0x13
    2892:	9c 89       	ldd	r25, Y+20	; 0x14
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	9c 8b       	std	Y+20, r25	; 0x14
    2898:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289a:	8b 89       	ldd	r24, Y+19	; 0x13
    289c:	9c 89       	ldd	r25, Y+20	; 0x14
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	69 f7       	brne	.-38     	; 0x287c <enu_PassByteAndLatch+0x266>
    28a2:	14 c0       	rjmp	.+40     	; 0x28cc <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a4:	6d 89       	ldd	r22, Y+21	; 0x15
    28a6:	7e 89       	ldd	r23, Y+22	; 0x16
    28a8:	8f 89       	ldd	r24, Y+23	; 0x17
    28aa:	98 8d       	ldd	r25, Y+24	; 0x18
    28ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13
    28b8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ba:	9c 89       	ldd	r25, Y+20	; 0x14
    28bc:	98 8b       	std	Y+16, r25	; 0x10
    28be:	8f 87       	std	Y+15, r24	; 0x0f
    28c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c2:	98 89       	ldd	r25, Y+16	; 0x10
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <enu_PassByteAndLatch+0x2ae>
    28c8:	98 8b       	std	Y+16, r25	; 0x10
    28ca:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	63 e0       	ldi	r22, 0x03	; 3
    28d0:	40 e0       	ldi	r20, 0x00	; 0
    28d2:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	a0 e0       	ldi	r26, 0x00	; 0
    28dc:	b0 e4       	ldi	r27, 0x40	; 64
    28de:	8b 87       	std	Y+11, r24	; 0x0b
    28e0:	9c 87       	std	Y+12, r25	; 0x0c
    28e2:	ad 87       	std	Y+13, r26	; 0x0d
    28e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	4a e7       	ldi	r20, 0x7A	; 122
    28f4:	55 e4       	ldi	r21, 0x45	; 69
    28f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	8f 83       	std	Y+7, r24	; 0x07
    2900:	98 87       	std	Y+8, r25	; 0x08
    2902:	a9 87       	std	Y+9, r26	; 0x09
    2904:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2906:	6f 81       	ldd	r22, Y+7	; 0x07
    2908:	78 85       	ldd	r23, Y+8	; 0x08
    290a:	89 85       	ldd	r24, Y+9	; 0x09
    290c:	9a 85       	ldd	r25, Y+10	; 0x0a
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e8       	ldi	r20, 0x80	; 128
    2914:	5f e3       	ldi	r21, 0x3F	; 63
    2916:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    291a:	88 23       	and	r24, r24
    291c:	2c f4       	brge	.+10     	; 0x2928 <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	9e 83       	std	Y+6, r25	; 0x06
    2924:	8d 83       	std	Y+5, r24	; 0x05
    2926:	3f c0       	rjmp	.+126    	; 0x29a6 <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    2928:	6f 81       	ldd	r22, Y+7	; 0x07
    292a:	78 85       	ldd	r23, Y+8	; 0x08
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	3f ef       	ldi	r19, 0xFF	; 255
    2934:	4f e7       	ldi	r20, 0x7F	; 127
    2936:	57 e4       	ldi	r21, 0x47	; 71
    2938:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    293c:	18 16       	cp	r1, r24
    293e:	4c f5       	brge	.+82     	; 0x2992 <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2940:	6b 85       	ldd	r22, Y+11	; 0x0b
    2942:	7c 85       	ldd	r23, Y+12	; 0x0c
    2944:	8d 85       	ldd	r24, Y+13	; 0x0d
    2946:	9e 85       	ldd	r25, Y+14	; 0x0e
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e2       	ldi	r20, 0x20	; 32
    294e:	51 e4       	ldi	r21, 0x41	; 65
    2950:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	9e 83       	std	Y+6, r25	; 0x06
    2966:	8d 83       	std	Y+5, r24	; 0x05
    2968:	0f c0       	rjmp	.+30     	; 0x2988 <enu_PassByteAndLatch+0x372>
    296a:	80 e9       	ldi	r24, 0x90	; 144
    296c:	91 e0       	ldi	r25, 0x01	; 1
    296e:	9c 83       	std	Y+4, r25	; 0x04
    2970:	8b 83       	std	Y+3, r24	; 0x03
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	9c 81       	ldd	r25, Y+4	; 0x04
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <enu_PassByteAndLatch+0x360>
    297a:	9c 83       	std	Y+4, r25	; 0x04
    297c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297e:	8d 81       	ldd	r24, Y+5	; 0x05
    2980:	9e 81       	ldd	r25, Y+6	; 0x06
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	9e 83       	std	Y+6, r25	; 0x06
    2986:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	69 f7       	brne	.-38     	; 0x296a <enu_PassByteAndLatch+0x354>
    2990:	14 c0       	rjmp	.+40     	; 0x29ba <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2992:	6f 81       	ldd	r22, Y+7	; 0x07
    2994:	78 85       	ldd	r23, Y+8	; 0x08
    2996:	89 85       	ldd	r24, Y+9	; 0x09
    2998:	9a 85       	ldd	r25, Y+10	; 0x0a
    299a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	9a 83       	std	Y+2, r25	; 0x02
    29ac:	89 83       	std	Y+1, r24	; 0x01
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	9a 81       	ldd	r25, Y+2	; 0x02
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <enu_PassByteAndLatch+0x39c>
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    29ba:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    29bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    29be:	ac 96       	adiw	r28, 0x2c	; 44
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	27 97       	sbiw	r28, 0x07	; 7
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	9c 83       	std	Y+4, r25	; 0x04
    29e6:	8b 83       	std	Y+3, r24	; 0x03
    29e8:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	9c 81       	ldd	r25, Y+4	; 0x04
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <enu_AddCustomCharacter+0x28>
    29f6:	79 c0       	rjmp	.+242    	; 0x2aea <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	88 30       	cpi	r24, 0x08	; 8
    29fc:	08 f0       	brcs	.+2      	; 0x2a00 <enu_AddCustomCharacter+0x30>
    29fe:	72 c0       	rjmp	.+228    	; 0x2ae4 <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    2a00:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	61 e0       	ldi	r22, 0x01	; 1
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	3f 83       	std	Y+7, r19	; 0x07
    2a14:	2e 83       	std	Y+6, r18	; 0x06
    2a16:	8e 81       	ldd	r24, Y+6	; 0x06
    2a18:	9f 81       	ldd	r25, Y+7	; 0x07
    2a1a:	83 30       	cpi	r24, 0x03	; 3
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	a9 f1       	breq	.+106    	; 0x2a8a <enu_AddCustomCharacter+0xba>
    2a20:	2e 81       	ldd	r18, Y+6	; 0x06
    2a22:	3f 81       	ldd	r19, Y+7	; 0x07
    2a24:	24 30       	cpi	r18, 0x04	; 4
    2a26:	31 05       	cpc	r19, r1
    2a28:	7c f4       	brge	.+30     	; 0x2a48 <enu_AddCustomCharacter+0x78>
    2a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	91 05       	cpc	r25, r1
    2a32:	19 f1       	breq	.+70     	; 0x2a7a <enu_AddCustomCharacter+0xaa>
    2a34:	2e 81       	ldd	r18, Y+6	; 0x06
    2a36:	3f 81       	ldd	r19, Y+7	; 0x07
    2a38:	22 30       	cpi	r18, 0x02	; 2
    2a3a:	31 05       	cpc	r19, r1
    2a3c:	14 f5       	brge	.+68     	; 0x2a82 <enu_AddCustomCharacter+0xb2>
    2a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a40:	9f 81       	ldd	r25, Y+7	; 0x07
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	b1 f0       	breq	.+44     	; 0x2a72 <enu_AddCustomCharacter+0xa2>
    2a46:	34 c0       	rjmp	.+104    	; 0x2ab0 <enu_AddCustomCharacter+0xe0>
    2a48:	2e 81       	ldd	r18, Y+6	; 0x06
    2a4a:	3f 81       	ldd	r19, Y+7	; 0x07
    2a4c:	25 30       	cpi	r18, 0x05	; 5
    2a4e:	31 05       	cpc	r19, r1
    2a50:	21 f1       	breq	.+72     	; 0x2a9a <enu_AddCustomCharacter+0xca>
    2a52:	8e 81       	ldd	r24, Y+6	; 0x06
    2a54:	9f 81       	ldd	r25, Y+7	; 0x07
    2a56:	85 30       	cpi	r24, 0x05	; 5
    2a58:	91 05       	cpc	r25, r1
    2a5a:	dc f0       	brlt	.+54     	; 0x2a92 <enu_AddCustomCharacter+0xc2>
    2a5c:	2e 81       	ldd	r18, Y+6	; 0x06
    2a5e:	3f 81       	ldd	r19, Y+7	; 0x07
    2a60:	26 30       	cpi	r18, 0x06	; 6
    2a62:	31 05       	cpc	r19, r1
    2a64:	f1 f0       	breq	.+60     	; 0x2aa2 <enu_AddCustomCharacter+0xd2>
    2a66:	8e 81       	ldd	r24, Y+6	; 0x06
    2a68:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6a:	87 30       	cpi	r24, 0x07	; 7
    2a6c:	91 05       	cpc	r25, r1
    2a6e:	e9 f0       	breq	.+58     	; 0x2aaa <enu_AddCustomCharacter+0xda>
    2a70:	1f c0       	rjmp	.+62     	; 0x2ab0 <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    2a72:	80 e4       	ldi	r24, 0x40	; 64
    2a74:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
    2a78:	1b c0       	rjmp	.+54     	; 0x2ab0 <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    2a7a:	88 e4       	ldi	r24, 0x48	; 72
    2a7c:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
    2a80:	17 c0       	rjmp	.+46     	; 0x2ab0 <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    2a82:	80 e5       	ldi	r24, 0x50	; 80
    2a84:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
    2a88:	13 c0       	rjmp	.+38     	; 0x2ab0 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    2a8a:	88 e5       	ldi	r24, 0x58	; 88
    2a8c:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
    2a90:	0f c0       	rjmp	.+30     	; 0x2ab0 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    2a92:	80 e6       	ldi	r24, 0x60	; 96
    2a94:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
    2a98:	0b c0       	rjmp	.+22     	; 0x2ab0 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    2a9a:	88 e6       	ldi	r24, 0x68	; 104
    2a9c:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
    2aa0:	07 c0       	rjmp	.+14     	; 0x2ab0 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    2aa2:	80 e7       	ldi	r24, 0x70	; 112
    2aa4:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    2aaa:	88 e7       	ldi	r24, 0x78	; 120
    2aac:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	41 e0       	ldi	r20, 0x01	; 1
    2ab6:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    2aba:	19 82       	std	Y+1, r1	; 0x01
    2abc:	0e c0       	rjmp	.+28     	; 0x2ada <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac8:	fc 01       	movw	r30, r24
    2aca:	e2 0f       	add	r30, r18
    2acc:	f3 1f       	adc	r31, r19
    2ace:	80 81       	ld	r24, Z
    2ad0:	0e 94 0b 13 	call	0x2616	; 0x2616 <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	8f 5f       	subi	r24, 0xFF	; 255
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	88 30       	cpi	r24, 0x08	; 8
    2ade:	78 f3       	brcs	.-34     	; 0x2abe <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    2ae0:	1a 82       	std	Y+2, r1	; 0x02
    2ae2:	05 c0       	rjmp	.+10     	; 0x2aee <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2ae4:	82 e0       	ldi	r24, 0x02	; 2
    2ae6:	8a 83       	std	Y+2, r24	; 0x02
    2ae8:	02 c0       	rjmp	.+4      	; 0x2aee <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2aea:	83 e0       	ldi	r24, 0x03	; 3
    2aec:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2af0:	27 96       	adiw	r28, 0x07	; 7
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <enu_ConvertDigitToASCII+0x6>
    2b08:	0f 92       	push	r0
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	9b 83       	std	Y+3, r25	; 0x03
    2b10:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	89 f0       	breq	.+34     	; 0x2b40 <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    2b1e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b20:	fb 81       	ldd	r31, Y+3	; 0x03
    2b22:	80 81       	ld	r24, Z
    2b24:	8a 30       	cpi	r24, 0x0A	; 10
    2b26:	48 f4       	brcc	.+18     	; 0x2b3a <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    2b28:	ea 81       	ldd	r30, Y+2	; 0x02
    2b2a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b2c:	80 81       	ld	r24, Z
    2b2e:	80 5d       	subi	r24, 0xD0	; 208
    2b30:	ea 81       	ldd	r30, Y+2	; 0x02
    2b32:	fb 81       	ldd	r31, Y+3	; 0x03
    2b34:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    2b36:	19 82       	std	Y+1, r1	; 0x01
    2b38:	05 c0       	rjmp	.+10     	; 0x2b44 <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    2b40:	83 e0       	ldi	r24, 0x03	; 3
    2b42:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	08 95       	ret

00002b52 <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    2b52:	ef 92       	push	r14
    2b54:	ff 92       	push	r15
    2b56:	0f 93       	push	r16
    2b58:	1f 93       	push	r17
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	27 97       	sbiw	r28, 0x07	; 7
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	9f 83       	std	Y+7, r25	; 0x07
    2b70:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    2b72:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    2b74:	8e 81       	ldd	r24, Y+6	; 0x06
    2b76:	9f 81       	ldd	r25, Y+7	; 0x07
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <enu_ReverseInteger+0x2c>
    2b7c:	58 c0       	rjmp	.+176    	; 0x2c2e <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    2b7e:	19 82       	std	Y+1, r1	; 0x01
    2b80:	1a 82       	std	Y+2, r1	; 0x02
    2b82:	1b 82       	std	Y+3, r1	; 0x03
    2b84:	1c 82       	std	Y+4, r1	; 0x04
    2b86:	3c c0       	rjmp	.+120    	; 0x2c00 <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b8e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b90:	2a e0       	ldi	r18, 0x0A	; 10
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	50 e0       	ldi	r21, 0x00	; 0
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 1b 1a 	call	0x3436	; 0x3436 <__mulsi3>
    2ba0:	7b 01       	movw	r14, r22
    2ba2:	8c 01       	movw	r16, r24
    2ba4:	ee 81       	ldd	r30, Y+6	; 0x06
    2ba6:	ff 81       	ldd	r31, Y+7	; 0x07
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	a2 81       	ldd	r26, Z+2	; 0x02
    2bae:	b3 81       	ldd	r27, Z+3	; 0x03
    2bb0:	2a e0       	ldi	r18, 0x0A	; 10
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	50 e0       	ldi	r21, 0x00	; 0
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__udivmodsi4>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	8e 0d       	add	r24, r14
    2bc6:	9f 1d       	adc	r25, r15
    2bc8:	a0 1f       	adc	r26, r16
    2bca:	b1 1f       	adc	r27, r17
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	ab 83       	std	Y+3, r26	; 0x03
    2bd2:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    2bd4:	ee 81       	ldd	r30, Y+6	; 0x06
    2bd6:	ff 81       	ldd	r31, Y+7	; 0x07
    2bd8:	80 81       	ld	r24, Z
    2bda:	91 81       	ldd	r25, Z+1	; 0x01
    2bdc:	a2 81       	ldd	r26, Z+2	; 0x02
    2bde:	b3 81       	ldd	r27, Z+3	; 0x03
    2be0:	2a e0       	ldi	r18, 0x0A	; 10
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__udivmodsi4>
    2bf0:	da 01       	movw	r26, r20
    2bf2:	c9 01       	movw	r24, r18
    2bf4:	ee 81       	ldd	r30, Y+6	; 0x06
    2bf6:	ff 81       	ldd	r31, Y+7	; 0x07
    2bf8:	80 83       	st	Z, r24
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	a2 83       	std	Z+2, r26	; 0x02
    2bfe:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    2c00:	ee 81       	ldd	r30, Y+6	; 0x06
    2c02:	ff 81       	ldd	r31, Y+7	; 0x07
    2c04:	80 81       	ld	r24, Z
    2c06:	91 81       	ldd	r25, Z+1	; 0x01
    2c08:	a2 81       	ldd	r26, Z+2	; 0x02
    2c0a:	b3 81       	ldd	r27, Z+3	; 0x03
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	a1 05       	cpc	r26, r1
    2c10:	b1 05       	cpc	r27, r1
    2c12:	09 f0       	breq	.+2      	; 0x2c16 <enu_ReverseInteger+0xc4>
    2c14:	b9 cf       	rjmp	.-142    	; 0x2b88 <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    2c16:	ee 81       	ldd	r30, Y+6	; 0x06
    2c18:	ff 81       	ldd	r31, Y+7	; 0x07
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1e:	ab 81       	ldd	r26, Y+3	; 0x03
    2c20:	bc 81       	ldd	r27, Y+4	; 0x04
    2c22:	80 83       	st	Z, r24
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	a2 83       	std	Z+2, r26	; 0x02
    2c28:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    2c2a:	1d 82       	std	Y+5, r1	; 0x05
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2c2e:	83 e0       	ldi	r24, 0x03	; 3
    2c30:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    2c32:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2c34:	27 96       	adiw	r28, 0x07	; 7
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	1f 91       	pop	r17
    2c46:	0f 91       	pop	r16
    2c48:	ff 90       	pop	r15
    2c4a:	ef 90       	pop	r14
    2c4c:	08 95       	ret

00002c4e <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <Keypad_enu_Initialization+0x6>
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    2c5c:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    2c5e:	19 82       	std	Y+1, r1	; 0x01
    2c60:	31 c0       	rjmp	.+98     	; 0x2cc4 <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	88 2f       	mov	r24, r24
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e4 58       	subi	r30, 0x84	; 132
    2c70:	fe 4f       	sbci	r31, 0xFE	; 254
    2c72:	20 81       	ld	r18, Z
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	88 2f       	mov	r24, r24
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	fc 01       	movw	r30, r24
    2c80:	e3 58       	subi	r30, 0x83	; 131
    2c82:	fe 4f       	sbci	r31, 0xFE	; 254
    2c84:	90 81       	ld	r25, Z
    2c86:	82 2f       	mov	r24, r18
    2c88:	69 2f       	mov	r22, r25
    2c8a:	40 e0       	ldi	r20, 0x00	; 0
    2c8c:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	88 2f       	mov	r24, r24
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	88 0f       	add	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	e4 58       	subi	r30, 0x84	; 132
    2c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca0:	20 81       	ld	r18, Z
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	88 2f       	mov	r24, r24
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	fc 01       	movw	r30, r24
    2cae:	e3 58       	subi	r30, 0x83	; 131
    2cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb2:	90 81       	ld	r25, Z
    2cb4:	82 2f       	mov	r24, r18
    2cb6:	69 2f       	mov	r22, r25
    2cb8:	41 e0       	ldi	r20, 0x01	; 1
    2cba:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	8f 5f       	subi	r24, 0xFF	; 255
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	84 30       	cpi	r24, 0x04	; 4
    2cc8:	60 f2       	brcs	.-104    	; 0x2c62 <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    2cca:	19 82       	std	Y+1, r1	; 0x01
    2ccc:	31 c0       	rjmp	.+98     	; 0x2d30 <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	88 2f       	mov	r24, r24
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	88 0f       	add	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	fc 01       	movw	r30, r24
    2cda:	ec 57       	subi	r30, 0x7C	; 124
    2cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cde:	20 81       	ld	r18, Z
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	88 2f       	mov	r24, r24
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	fc 01       	movw	r30, r24
    2cec:	eb 57       	subi	r30, 0x7B	; 123
    2cee:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf0:	90 81       	ld	r25, Z
    2cf2:	82 2f       	mov	r24, r18
    2cf4:	69 2f       	mov	r22, r25
    2cf6:	41 e0       	ldi	r20, 0x01	; 1
    2cf8:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	88 2f       	mov	r24, r24
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	fc 01       	movw	r30, r24
    2d08:	ec 57       	subi	r30, 0x7C	; 124
    2d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0c:	20 81       	ld	r18, Z
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	88 2f       	mov	r24, r24
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	fc 01       	movw	r30, r24
    2d1a:	eb 57       	subi	r30, 0x7B	; 123
    2d1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1e:	90 81       	ld	r25, Z
    2d20:	82 2f       	mov	r24, r18
    2d22:	69 2f       	mov	r22, r25
    2d24:	40 e0       	ldi	r20, 0x00	; 0
    2d26:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	8f 5f       	subi	r24, 0xFF	; 255
    2d2e:	89 83       	std	Y+1, r24	; 0x01
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	84 30       	cpi	r24, 0x04	; 4
    2d34:	60 f2       	brcs	.-104    	; 0x2cce <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    2d36:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	aa 97       	sbiw	r28, 0x2a	; 42
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	9d a3       	std	Y+37, r25	; 0x25
    2d5a:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    2d60:	8c a1       	ldd	r24, Y+36	; 0x24
    2d62:	9d a1       	ldd	r25, Y+37	; 0x25
    2d64:	00 97       	sbiw	r24, 0x00	; 0
    2d66:	09 f4       	brne	.+2      	; 0x2d6a <Keypad_enu_GetButtonPressedValue+0x26>
    2d68:	68 c1       	rjmp	.+720    	; 0x303a <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    2d6a:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    2d6c:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    2d6e:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    2d70:	ec a1       	ldd	r30, Y+36	; 0x24
    2d72:	fd a1       	ldd	r31, Y+37	; 0x25
    2d74:	8f ef       	ldi	r24, 0xFF	; 255
    2d76:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    2d78:	19 8a       	std	Y+17, r1	; 0x11
    2d7a:	5a c1       	rjmp	.+692    	; 0x3030 <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    2d7c:	89 89       	ldd	r24, Y+17	; 0x11
    2d7e:	88 2f       	mov	r24, r24
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	fc 01       	movw	r30, r24
    2d88:	e4 58       	subi	r30, 0x84	; 132
    2d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8c:	40 81       	ld	r20, Z
    2d8e:	89 89       	ldd	r24, Y+17	; 0x11
    2d90:	88 2f       	mov	r24, r24
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	88 0f       	add	r24, r24
    2d96:	99 1f       	adc	r25, r25
    2d98:	fc 01       	movw	r30, r24
    2d9a:	e3 58       	subi	r30, 0x83	; 131
    2d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d9e:	90 81       	ld	r25, Z
    2da0:	9e 01       	movw	r18, r28
    2da2:	2d 5e       	subi	r18, 0xED	; 237
    2da4:	3f 4f       	sbci	r19, 0xFF	; 255
    2da6:	84 2f       	mov	r24, r20
    2da8:	69 2f       	mov	r22, r25
    2daa:	a9 01       	movw	r20, r18
    2dac:	0e 94 0a 0a 	call	0x1414	; 0x1414 <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    2db0:	8b 89       	ldd	r24, Y+19	; 0x13
    2db2:	88 23       	and	r24, r24
    2db4:	09 f0       	breq	.+2      	; 0x2db8 <Keypad_enu_GetButtonPressedValue+0x74>
    2db6:	36 c1       	rjmp	.+620    	; 0x3024 <Keypad_enu_GetButtonPressedValue+0x2e0>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	a0 e4       	ldi	r26, 0x40	; 64
    2dbe:	b0 e4       	ldi	r27, 0x40	; 64
    2dc0:	8b 87       	std	Y+11, r24	; 0x0b
    2dc2:	9c 87       	std	Y+12, r25	; 0x0c
    2dc4:	ad 87       	std	Y+13, r26	; 0x0d
    2dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	4a e7       	ldi	r20, 0x7A	; 122
    2dd6:	55 e4       	ldi	r21, 0x45	; 69
    2dd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8f 83       	std	Y+7, r24	; 0x07
    2de2:	98 87       	std	Y+8, r25	; 0x08
    2de4:	a9 87       	std	Y+9, r26	; 0x09
    2de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	40 e8       	ldi	r20, 0x80	; 128
    2df6:	5f e3       	ldi	r21, 0x3F	; 63
    2df8:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2dfc:	88 23       	and	r24, r24
    2dfe:	2c f4       	brge	.+10     	; 0x2e0a <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	3f c0       	rjmp	.+126    	; 0x2e88 <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    2e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0c:	78 85       	ldd	r23, Y+8	; 0x08
    2e0e:	89 85       	ldd	r24, Y+9	; 0x09
    2e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	57 e4       	ldi	r21, 0x47	; 71
    2e1a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	4c f5       	brge	.+82     	; 0x2e74 <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e2       	ldi	r20, 0x20	; 32
    2e30:	51 e4       	ldi	r21, 0x41	; 65
    2e32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9e 83       	std	Y+6, r25	; 0x06
    2e48:	8d 83       	std	Y+5, r24	; 0x05
    2e4a:	0f c0       	rjmp	.+30     	; 0x2e6a <Keypad_enu_GetButtonPressedValue+0x126>
    2e4c:	80 e9       	ldi	r24, 0x90	; 144
    2e4e:	91 e0       	ldi	r25, 0x01	; 1
    2e50:	9c 83       	std	Y+4, r25	; 0x04
    2e52:	8b 83       	std	Y+3, r24	; 0x03
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <Keypad_enu_GetButtonPressedValue+0x114>
    2e5c:	9c 83       	std	Y+4, r25	; 0x04
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e60:	8d 81       	ldd	r24, Y+5	; 0x05
    2e62:	9e 81       	ldd	r25, Y+6	; 0x06
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	69 f7       	brne	.-38     	; 0x2e4c <Keypad_enu_GetButtonPressedValue+0x108>
    2e72:	14 c0       	rjmp	.+40     	; 0x2e9c <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e74:	6f 81       	ldd	r22, Y+7	; 0x07
    2e76:	78 85       	ldd	r23, Y+8	; 0x08
    2e78:	89 85       	ldd	r24, Y+9	; 0x09
    2e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	9a 83       	std	Y+2, r25	; 0x02
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	9a 81       	ldd	r25, Y+2	; 0x02
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <Keypad_enu_GetButtonPressedValue+0x150>
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    2e9c:	89 89       	ldd	r24, Y+17	; 0x11
    2e9e:	88 2f       	mov	r24, r24
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	e4 58       	subi	r30, 0x84	; 132
    2eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    2eac:	40 81       	ld	r20, Z
    2eae:	89 89       	ldd	r24, Y+17	; 0x11
    2eb0:	88 2f       	mov	r24, r24
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	fc 01       	movw	r30, r24
    2eba:	e3 58       	subi	r30, 0x83	; 131
    2ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ebe:	90 81       	ld	r25, Z
    2ec0:	9e 01       	movw	r18, r28
    2ec2:	2d 5e       	subi	r18, 0xED	; 237
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec6:	84 2f       	mov	r24, r20
    2ec8:	69 2f       	mov	r22, r25
    2eca:	a9 01       	movw	r20, r18
    2ecc:	0e 94 0a 0a 	call	0x1414	; 0x1414 <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    2ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed2:	88 23       	and	r24, r24
    2ed4:	09 f0       	breq	.+2      	; 0x2ed8 <Keypad_enu_GetButtonPressedValue+0x194>
    2ed6:	a6 c0       	rjmp	.+332    	; 0x3024 <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    2ed8:	18 8a       	std	Y+16, r1	; 0x10
    2eda:	a0 c0       	rjmp	.+320    	; 0x301c <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    2edc:	88 89       	ldd	r24, Y+16	; 0x10
    2ede:	88 2f       	mov	r24, r24
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	88 0f       	add	r24, r24
    2ee4:	99 1f       	adc	r25, r25
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	ec 57       	subi	r30, 0x7C	; 124
    2eea:	fe 4f       	sbci	r31, 0xFE	; 254
    2eec:	20 81       	ld	r18, Z
    2eee:	88 89       	ldd	r24, Y+16	; 0x10
    2ef0:	88 2f       	mov	r24, r24
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	88 0f       	add	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	fc 01       	movw	r30, r24
    2efa:	eb 57       	subi	r30, 0x7B	; 123
    2efc:	fe 4f       	sbci	r31, 0xFE	; 254
    2efe:	90 81       	ld	r25, Z
    2f00:	82 2f       	mov	r24, r18
    2f02:	69 2f       	mov	r22, r25
    2f04:	41 e0       	ldi	r20, 0x01	; 1
    2f06:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    2f0a:	89 89       	ldd	r24, Y+17	; 0x11
    2f0c:	88 2f       	mov	r24, r24
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	fc 01       	movw	r30, r24
    2f16:	e4 58       	subi	r30, 0x84	; 132
    2f18:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1a:	40 81       	ld	r20, Z
    2f1c:	89 89       	ldd	r24, Y+17	; 0x11
    2f1e:	88 2f       	mov	r24, r24
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	fc 01       	movw	r30, r24
    2f28:	e3 58       	subi	r30, 0x83	; 131
    2f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2c:	90 81       	ld	r25, Z
    2f2e:	9e 01       	movw	r18, r28
    2f30:	2d 5e       	subi	r18, 0xED	; 237
    2f32:	3f 4f       	sbci	r19, 0xFF	; 255
    2f34:	84 2f       	mov	r24, r20
    2f36:	69 2f       	mov	r22, r25
    2f38:	a9 01       	movw	r20, r18
    2f3a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    2f3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f40:	81 30       	cpi	r24, 0x01	; 1
    2f42:	09 f0       	breq	.+2      	; 0x2f46 <Keypad_enu_GetButtonPressedValue+0x202>
    2f44:	51 c0       	rjmp	.+162    	; 0x2fe8 <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    2f46:	ce 01       	movw	r24, r28
    2f48:	44 96       	adiw	r24, 0x14	; 20
    2f4a:	9f a3       	std	Y+39, r25	; 0x27
    2f4c:	8e a3       	std	Y+38, r24	; 0x26
    2f4e:	ef e8       	ldi	r30, 0x8F	; 143
    2f50:	f1 e0       	ldi	r31, 0x01	; 1
    2f52:	f9 a7       	std	Y+41, r31	; 0x29
    2f54:	e8 a7       	std	Y+40, r30	; 0x28
    2f56:	f0 e1       	ldi	r31, 0x10	; 16
    2f58:	fa a7       	std	Y+42, r31	; 0x2a
    2f5a:	e8 a5       	ldd	r30, Y+40	; 0x28
    2f5c:	f9 a5       	ldd	r31, Y+41	; 0x29
    2f5e:	00 80       	ld	r0, Z
    2f60:	88 a5       	ldd	r24, Y+40	; 0x28
    2f62:	99 a5       	ldd	r25, Y+41	; 0x29
    2f64:	01 96       	adiw	r24, 0x01	; 1
    2f66:	99 a7       	std	Y+41, r25	; 0x29
    2f68:	88 a7       	std	Y+40, r24	; 0x28
    2f6a:	ee a1       	ldd	r30, Y+38	; 0x26
    2f6c:	ff a1       	ldd	r31, Y+39	; 0x27
    2f6e:	00 82       	st	Z, r0
    2f70:	8e a1       	ldd	r24, Y+38	; 0x26
    2f72:	9f a1       	ldd	r25, Y+39	; 0x27
    2f74:	01 96       	adiw	r24, 0x01	; 1
    2f76:	9f a3       	std	Y+39, r25	; 0x27
    2f78:	8e a3       	std	Y+38, r24	; 0x26
    2f7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f7c:	91 50       	subi	r25, 0x01	; 1
    2f7e:	9a a7       	std	Y+42, r25	; 0x2a
    2f80:	ea a5       	ldd	r30, Y+42	; 0x2a
    2f82:	ee 23       	and	r30, r30
    2f84:	51 f7       	brne	.-44     	; 0x2f5a <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    2f86:	89 89       	ldd	r24, Y+17	; 0x11
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	88 89       	ldd	r24, Y+16	; 0x10
    2f8e:	48 2f       	mov	r20, r24
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	22 0f       	add	r18, r18
    2f94:	33 1f       	adc	r19, r19
    2f96:	22 0f       	add	r18, r18
    2f98:	33 1f       	adc	r19, r19
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	01 96       	adiw	r24, 0x01	; 1
    2f9e:	82 0f       	add	r24, r18
    2fa0:	93 1f       	adc	r25, r19
    2fa2:	84 0f       	add	r24, r20
    2fa4:	95 1f       	adc	r25, r21
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	73 96       	adiw	r30, 0x13	; 19
    2faa:	80 81       	ld	r24, Z
    2fac:	ec a1       	ldd	r30, Y+36	; 0x24
    2fae:	fd a1       	ldd	r31, Y+37	; 0x25
    2fb0:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    2fb6:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    2fb8:	88 89       	ldd	r24, Y+16	; 0x10
    2fba:	88 2f       	mov	r24, r24
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	88 0f       	add	r24, r24
    2fc0:	99 1f       	adc	r25, r25
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	ec 57       	subi	r30, 0x7C	; 124
    2fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc8:	20 81       	ld	r18, Z
    2fca:	88 89       	ldd	r24, Y+16	; 0x10
    2fcc:	88 2f       	mov	r24, r24
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	88 0f       	add	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	eb 57       	subi	r30, 0x7B	; 123
    2fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fda:	90 81       	ld	r25, Z
    2fdc:	82 2f       	mov	r24, r18
    2fde:	69 2f       	mov	r22, r25
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    2fe6:	1e c0       	rjmp	.+60     	; 0x3024 <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    2fe8:	88 89       	ldd	r24, Y+16	; 0x10
    2fea:	88 2f       	mov	r24, r24
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	ec 57       	subi	r30, 0x7C	; 124
    2ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff8:	20 81       	ld	r18, Z
    2ffa:	88 89       	ldd	r24, Y+16	; 0x10
    2ffc:	88 2f       	mov	r24, r24
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	88 0f       	add	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	fc 01       	movw	r30, r24
    3006:	eb 57       	subi	r30, 0x7B	; 123
    3008:	fe 4f       	sbci	r31, 0xFE	; 254
    300a:	90 81       	ld	r25, Z
    300c:	82 2f       	mov	r24, r18
    300e:	69 2f       	mov	r22, r25
    3010:	40 e0       	ldi	r20, 0x00	; 0
    3012:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    3016:	88 89       	ldd	r24, Y+16	; 0x10
    3018:	8f 5f       	subi	r24, 0xFF	; 255
    301a:	88 8b       	std	Y+16, r24	; 0x10
    301c:	88 89       	ldd	r24, Y+16	; 0x10
    301e:	84 30       	cpi	r24, 0x04	; 4
    3020:	08 f4       	brcc	.+2      	; 0x3024 <Keypad_enu_GetButtonPressedValue+0x2e0>
    3022:	5c cf       	rjmp	.-328    	; 0x2edc <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    3024:	8f 85       	ldd	r24, Y+15	; 0x0f
    3026:	88 23       	and	r24, r24
    3028:	51 f4       	brne	.+20     	; 0x303e <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    302a:	89 89       	ldd	r24, Y+17	; 0x11
    302c:	8f 5f       	subi	r24, 0xFF	; 255
    302e:	89 8b       	std	Y+17, r24	; 0x11
    3030:	89 89       	ldd	r24, Y+17	; 0x11
    3032:	84 30       	cpi	r24, 0x04	; 4
    3034:	08 f4       	brcc	.+2      	; 0x3038 <Keypad_enu_GetButtonPressedValue+0x2f4>
    3036:	a2 ce       	rjmp	.-700    	; 0x2d7c <Keypad_enu_GetButtonPressedValue+0x38>
    3038:	02 c0       	rjmp	.+4      	; 0x303e <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    303a:	83 e0       	ldi	r24, 0x03	; 3
    303c:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    303e:	8a 89       	ldd	r24, Y+18	; 0x12

}
    3040:	aa 96       	adiw	r28, 0x2a	; 42
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	de bf       	out	0x3e, r29	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	cd bf       	out	0x3d, r28	; 61
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	08 95       	ret

00003052 <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	0f 92       	push	r0
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	64 e0       	ldi	r22, 0x04	; 4
    3064:	41 e0       	ldi	r20, 0x01	; 1
    3066:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	65 e0       	ldi	r22, 0x05	; 5
    306e:	41 e0       	ldi	r20, 0x01	; 1
    3070:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	66 e0       	ldi	r22, 0x06	; 6
    3078:	41 e0       	ldi	r20, 0x01	; 1
    307a:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	67 e0       	ldi	r22, 0x07	; 7
    3082:	41 e0       	ldi	r20, 0x01	; 1
    3084:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	62 e0       	ldi	r22, 0x02	; 2
    308c:	41 e0       	ldi	r20, 0x01	; 1
    308e:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	61 e0       	ldi	r22, 0x01	; 1
    3096:	41 e0       	ldi	r20, 0x01	; 1
    3098:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    309c:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    309e:	89 81       	ldd	r24, Y+1	; 0x01

}
    30a0:	0f 90       	pop	r0
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	08 95       	ret

000030a8 <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    30a8:	df 93       	push	r29
    30aa:	cf 93       	push	r28
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <Hexadecoder_enu_DisplayNum+0x6>
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    30b8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ba:	8a 30       	cpi	r24, 0x0A	; 10
    30bc:	40 f5       	brcc	.+80     	; 0x310e <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	98 2f       	mov	r25, r24
    30c2:	91 70       	andi	r25, 0x01	; 1
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	64 e0       	ldi	r22, 0x04	; 4
    30c8:	49 2f       	mov	r20, r25
    30ca:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	86 95       	lsr	r24
    30d2:	98 2f       	mov	r25, r24
    30d4:	91 70       	andi	r25, 0x01	; 1
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	65 e0       	ldi	r22, 0x05	; 5
    30da:	49 2f       	mov	r20, r25
    30dc:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    30e0:	8a 81       	ldd	r24, Y+2	; 0x02
    30e2:	86 95       	lsr	r24
    30e4:	86 95       	lsr	r24
    30e6:	98 2f       	mov	r25, r24
    30e8:	91 70       	andi	r25, 0x01	; 1
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	66 e0       	ldi	r22, 0x06	; 6
    30ee:	49 2f       	mov	r20, r25
    30f0:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
    30f6:	86 95       	lsr	r24
    30f8:	86 95       	lsr	r24
    30fa:	86 95       	lsr	r24
    30fc:	98 2f       	mov	r25, r24
    30fe:	91 70       	andi	r25, 0x01	; 1
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	67 e0       	ldi	r22, 0x07	; 7
    3104:	49 2f       	mov	r20, r25
    3106:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    310a:	19 82       	std	Y+1, r1	; 0x01
    310c:	02 c0       	rjmp	.+4      	; 0x3112 <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    310e:	82 e0       	ldi	r24, 0x02	; 2
    3110:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3112:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	08 95       	ret

0000311e <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	00 d0       	rcall	.+0      	; 0x3124 <Hexadecoder_enu_EnableSSG+0x6>
    3124:	00 d0       	rcall	.+0      	; 0x3126 <Hexadecoder_enu_EnableSSG+0x8>
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    3130:	8a 81       	ldd	r24, Y+2	; 0x02
    3132:	28 2f       	mov	r18, r24
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	3c 83       	std	Y+4, r19	; 0x04
    3138:	2b 83       	std	Y+3, r18	; 0x03
    313a:	8b 81       	ldd	r24, Y+3	; 0x03
    313c:	9c 81       	ldd	r25, Y+4	; 0x04
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	31 f0       	breq	.+12     	; 0x314e <Hexadecoder_enu_EnableSSG+0x30>
    3142:	2b 81       	ldd	r18, Y+3	; 0x03
    3144:	3c 81       	ldd	r19, Y+4	; 0x04
    3146:	21 30       	cpi	r18, 0x01	; 1
    3148:	31 05       	cpc	r19, r1
    314a:	41 f0       	breq	.+16     	; 0x315c <Hexadecoder_enu_EnableSSG+0x3e>
    314c:	0e c0       	rjmp	.+28     	; 0x316a <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	62 e0       	ldi	r22, 0x02	; 2
    3152:	41 e0       	ldi	r20, 0x01	; 1
    3154:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    3158:	19 82       	std	Y+1, r1	; 0x01
    315a:	09 c0       	rjmp	.+18     	; 0x316e <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	61 e0       	ldi	r22, 0x01	; 1
    3160:	41 e0       	ldi	r20, 0x01	; 1
    3162:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    3166:	19 82       	std	Y+1, r1	; 0x01
    3168:	02 c0       	rjmp	.+4      	; 0x316e <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    316a:	82 e0       	ldi	r24, 0x02	; 2
    316c:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    316e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	0f 90       	pop	r0
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	00 d0       	rcall	.+0      	; 0x3184 <Hexadecoder_enu_DisableSSG+0x6>
    3184:	00 d0       	rcall	.+0      	; 0x3186 <Hexadecoder_enu_DisableSSG+0x8>
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
    318a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    3190:	8a 81       	ldd	r24, Y+2	; 0x02
    3192:	28 2f       	mov	r18, r24
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	3c 83       	std	Y+4, r19	; 0x04
    3198:	2b 83       	std	Y+3, r18	; 0x03
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	00 97       	sbiw	r24, 0x00	; 0
    31a0:	31 f0       	breq	.+12     	; 0x31ae <Hexadecoder_enu_DisableSSG+0x30>
    31a2:	2b 81       	ldd	r18, Y+3	; 0x03
    31a4:	3c 81       	ldd	r19, Y+4	; 0x04
    31a6:	21 30       	cpi	r18, 0x01	; 1
    31a8:	31 05       	cpc	r19, r1
    31aa:	41 f0       	breq	.+16     	; 0x31bc <Hexadecoder_enu_DisableSSG+0x3e>
    31ac:	0e c0       	rjmp	.+28     	; 0x31ca <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	62 e0       	ldi	r22, 0x02	; 2
    31b2:	40 e0       	ldi	r20, 0x00	; 0
    31b4:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    31b8:	19 82       	std	Y+1, r1	; 0x01
    31ba:	09 c0       	rjmp	.+18     	; 0x31ce <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	61 e0       	ldi	r22, 0x01	; 1
    31c0:	40 e0       	ldi	r20, 0x00	; 0
    31c2:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    31c6:	19 82       	std	Y+1, r1	; 0x01
    31c8:	02 c0       	rjmp	.+4      	; 0x31ce <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    31ca:	82 e0       	ldi	r24, 0x02	; 2
    31cc:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	08 95       	ret

000031de <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	0f 92       	push	r0
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	62 e0       	ldi	r22, 0x02	; 2
    31f0:	40 e0       	ldi	r20, 0x00	; 0
    31f2:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	61 e0       	ldi	r22, 0x01	; 1
    31fa:	40 e0       	ldi	r20, 0x00	; 0
    31fc:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    3200:	89 81       	ldd	r24, Y+1	; 0x01
}
    3202:	0f 90       	pop	r0
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	00 d0       	rcall	.+0      	; 0x3210 <Buzzer_enu_Initialization+0x6>
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3218:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    321a:	19 82       	std	Y+1, r1	; 0x01
    321c:	31 c0       	rjmp	.+98     	; 0x3280 <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	88 2f       	mov	r24, r24
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	fc 01       	movw	r30, r24
    322a:	e3 57       	subi	r30, 0x73	; 115
    322c:	fe 4f       	sbci	r31, 0xFE	; 254
    322e:	20 81       	ld	r18, Z
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	88 2f       	mov	r24, r24
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	fc 01       	movw	r30, r24
    323c:	e2 57       	subi	r30, 0x72	; 114
    323e:	fe 4f       	sbci	r31, 0xFE	; 254
    3240:	90 81       	ld	r25, Z
    3242:	82 2f       	mov	r24, r18
    3244:	69 2f       	mov	r22, r25
    3246:	41 e0       	ldi	r20, 0x01	; 1
    3248:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	88 2f       	mov	r24, r24
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	fc 01       	movw	r30, r24
    3258:	e3 57       	subi	r30, 0x73	; 115
    325a:	fe 4f       	sbci	r31, 0xFE	; 254
    325c:	20 81       	ld	r18, Z
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	88 2f       	mov	r24, r24
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	fc 01       	movw	r30, r24
    326a:	e2 57       	subi	r30, 0x72	; 114
    326c:	fe 4f       	sbci	r31, 0xFE	; 254
    326e:	90 81       	ld	r25, Z
    3270:	82 2f       	mov	r24, r18
    3272:	69 2f       	mov	r22, r25
    3274:	40 e0       	ldi	r20, 0x00	; 0
    3276:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	8f 5f       	subi	r24, 0xFF	; 255
    327e:	89 83       	std	Y+1, r24	; 0x01
    3280:	90 91 8c 01 	lds	r25, 0x018C
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	89 17       	cp	r24, r25
    3288:	50 f2       	brcs	.-108    	; 0x321e <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    328a:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	cf 91       	pop	r28
    3294:	df 91       	pop	r29
    3296:	08 95       	ret

00003298 <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    3298:	df 93       	push	r29
    329a:	cf 93       	push	r28
    329c:	00 d0       	rcall	.+0      	; 0x329e <Buzzer_enu_TuronOnBuzzer+0x6>
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    32a8:	90 91 8c 01 	lds	r25, 0x018C
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	89 17       	cp	r24, r25
    32b0:	c8 f4       	brcc	.+50     	; 0x32e4 <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    32b2:	8a 81       	ldd	r24, Y+2	; 0x02
    32b4:	88 2f       	mov	r24, r24
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	88 0f       	add	r24, r24
    32ba:	99 1f       	adc	r25, r25
    32bc:	fc 01       	movw	r30, r24
    32be:	e3 57       	subi	r30, 0x73	; 115
    32c0:	fe 4f       	sbci	r31, 0xFE	; 254
    32c2:	20 81       	ld	r18, Z
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	88 2f       	mov	r24, r24
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	fc 01       	movw	r30, r24
    32d0:	e2 57       	subi	r30, 0x72	; 114
    32d2:	fe 4f       	sbci	r31, 0xFE	; 254
    32d4:	90 81       	ld	r25, Z
    32d6:	82 2f       	mov	r24, r18
    32d8:	69 2f       	mov	r22, r25
    32da:	41 e0       	ldi	r20, 0x01	; 1
    32dc:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    32e4:	82 e0       	ldi	r24, 0x02	; 2
    32e6:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <Buzzer_enu_TuronOffBuzzer+0x6>
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
    32fe:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    3304:	90 91 8c 01 	lds	r25, 0x018C
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	89 17       	cp	r24, r25
    330c:	c8 f4       	brcc	.+50     	; 0x3340 <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    330e:	8a 81       	ldd	r24, Y+2	; 0x02
    3310:	88 2f       	mov	r24, r24
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	88 0f       	add	r24, r24
    3316:	99 1f       	adc	r25, r25
    3318:	fc 01       	movw	r30, r24
    331a:	e3 57       	subi	r30, 0x73	; 115
    331c:	fe 4f       	sbci	r31, 0xFE	; 254
    331e:	20 81       	ld	r18, Z
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	88 2f       	mov	r24, r24
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	88 0f       	add	r24, r24
    3328:	99 1f       	adc	r25, r25
    332a:	fc 01       	movw	r30, r24
    332c:	e2 57       	subi	r30, 0x72	; 114
    332e:	fe 4f       	sbci	r31, 0xFE	; 254
    3330:	90 81       	ld	r25, Z
    3332:	82 2f       	mov	r24, r18
    3334:	69 2f       	mov	r22, r25
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
    333c:	89 83       	std	Y+1, r24	; 0x01
    333e:	02 c0       	rjmp	.+4      	; 0x3344 <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3340:	82 e0       	ldi	r24, 0x02	; 2
    3342:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    3344:	89 81       	ldd	r24, Y+1	; 0x01
}
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	08 95       	ret

00003350 <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	00 d0       	rcall	.+0      	; 0x3356 <Buzzer_enu_TurnOnAllBuzzers+0x6>
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    335e:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3360:	19 82       	std	Y+1, r1	; 0x01
    3362:	1a c0       	rjmp	.+52     	; 0x3398 <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	88 2f       	mov	r24, r24
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	88 0f       	add	r24, r24
    336c:	99 1f       	adc	r25, r25
    336e:	fc 01       	movw	r30, r24
    3370:	e3 57       	subi	r30, 0x73	; 115
    3372:	fe 4f       	sbci	r31, 0xFE	; 254
    3374:	20 81       	ld	r18, Z
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	88 2f       	mov	r24, r24
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	fc 01       	movw	r30, r24
    3382:	e2 57       	subi	r30, 0x72	; 114
    3384:	fe 4f       	sbci	r31, 0xFE	; 254
    3386:	90 81       	ld	r25, Z
    3388:	82 2f       	mov	r24, r18
    338a:	69 2f       	mov	r22, r25
    338c:	41 e0       	ldi	r20, 0x01	; 1
    338e:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	8f 5f       	subi	r24, 0xFF	; 255
    3396:	89 83       	std	Y+1, r24	; 0x01
    3398:	90 91 8c 01 	lds	r25, 0x018C
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	89 17       	cp	r24, r25
    33a0:	08 f3       	brcs	.-62     	; 0x3364 <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    33a2:	82 e0       	ldi	r24, 0x02	; 2
    33a4:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	08 95       	ret

000033b2 <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    33b2:	df 93       	push	r29
    33b4:	cf 93       	push	r28
    33b6:	00 d0       	rcall	.+0      	; 0x33b8 <Buzzer_enu_TurnOffAllBuzzers+0x6>
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    33c0:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    33c2:	19 82       	std	Y+1, r1	; 0x01
    33c4:	1a c0       	rjmp	.+52     	; 0x33fa <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	88 2f       	mov	r24, r24
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	fc 01       	movw	r30, r24
    33d2:	e3 57       	subi	r30, 0x73	; 115
    33d4:	fe 4f       	sbci	r31, 0xFE	; 254
    33d6:	20 81       	ld	r18, Z
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	88 2f       	mov	r24, r24
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	88 0f       	add	r24, r24
    33e0:	99 1f       	adc	r25, r25
    33e2:	fc 01       	movw	r30, r24
    33e4:	e2 57       	subi	r30, 0x72	; 114
    33e6:	fe 4f       	sbci	r31, 0xFE	; 254
    33e8:	90 81       	ld	r25, Z
    33ea:	82 2f       	mov	r24, r18
    33ec:	69 2f       	mov	r22, r25
    33ee:	40 e0       	ldi	r20, 0x00	; 0
    33f0:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	8f 5f       	subi	r24, 0xFF	; 255
    33f8:	89 83       	std	Y+1, r24	; 0x01
    33fa:	90 91 8c 01 	lds	r25, 0x018C
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
    3400:	89 17       	cp	r24, r25
    3402:	08 f3       	brcs	.-62     	; 0x33c6 <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    3404:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	cf 91       	pop	r28
    340c:	df 91       	pop	r29
    340e:	08 95       	ret

00003410 <main>:
#include "../HAL/LCD/LCD_Interface.h"
#include "../HAL/KEYPAD/Keypad_Interface.h"
 
 int main (void)
 {
    3410:	df 93       	push	r29
    3412:	cf 93       	push	r28
    3414:	0f 92       	push	r0
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Initialization();
    341a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_enu_Initialization>
	Keypad_enu_Initialization();
    341e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <Keypad_enu_Initialization>
	
	u8 character= 'A';
    3422:	81 e4       	ldi	r24, 0x41	; 65
    3424:	89 83       	std	Y+1, r24	; 0x01
	while (1)
	{
		Keypad_enu_GetButtonPressedValue(&character);
    3426:	ce 01       	movw	r24, r28
    3428:	01 96       	adiw	r24, 0x01	; 1
    342a:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <Keypad_enu_GetButtonPressedValue>
		LCD_enu_SendData(character);
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_enu_SendData>
    3434:	f8 cf       	rjmp	.-16     	; 0x3426 <main+0x16>

00003436 <__mulsi3>:
    3436:	62 9f       	mul	r22, r18
    3438:	d0 01       	movw	r26, r0
    343a:	73 9f       	mul	r23, r19
    343c:	f0 01       	movw	r30, r0
    343e:	82 9f       	mul	r24, r18
    3440:	e0 0d       	add	r30, r0
    3442:	f1 1d       	adc	r31, r1
    3444:	64 9f       	mul	r22, r20
    3446:	e0 0d       	add	r30, r0
    3448:	f1 1d       	adc	r31, r1
    344a:	92 9f       	mul	r25, r18
    344c:	f0 0d       	add	r31, r0
    344e:	83 9f       	mul	r24, r19
    3450:	f0 0d       	add	r31, r0
    3452:	74 9f       	mul	r23, r20
    3454:	f0 0d       	add	r31, r0
    3456:	65 9f       	mul	r22, r21
    3458:	f0 0d       	add	r31, r0
    345a:	99 27       	eor	r25, r25
    345c:	72 9f       	mul	r23, r18
    345e:	b0 0d       	add	r27, r0
    3460:	e1 1d       	adc	r30, r1
    3462:	f9 1f       	adc	r31, r25
    3464:	63 9f       	mul	r22, r19
    3466:	b0 0d       	add	r27, r0
    3468:	e1 1d       	adc	r30, r1
    346a:	f9 1f       	adc	r31, r25
    346c:	bd 01       	movw	r22, r26
    346e:	cf 01       	movw	r24, r30
    3470:	11 24       	eor	r1, r1
    3472:	08 95       	ret

00003474 <__udivmodsi4>:
    3474:	a1 e2       	ldi	r26, 0x21	; 33
    3476:	1a 2e       	mov	r1, r26
    3478:	aa 1b       	sub	r26, r26
    347a:	bb 1b       	sub	r27, r27
    347c:	fd 01       	movw	r30, r26
    347e:	0d c0       	rjmp	.+26     	; 0x349a <__udivmodsi4_ep>

00003480 <__udivmodsi4_loop>:
    3480:	aa 1f       	adc	r26, r26
    3482:	bb 1f       	adc	r27, r27
    3484:	ee 1f       	adc	r30, r30
    3486:	ff 1f       	adc	r31, r31
    3488:	a2 17       	cp	r26, r18
    348a:	b3 07       	cpc	r27, r19
    348c:	e4 07       	cpc	r30, r20
    348e:	f5 07       	cpc	r31, r21
    3490:	20 f0       	brcs	.+8      	; 0x349a <__udivmodsi4_ep>
    3492:	a2 1b       	sub	r26, r18
    3494:	b3 0b       	sbc	r27, r19
    3496:	e4 0b       	sbc	r30, r20
    3498:	f5 0b       	sbc	r31, r21

0000349a <__udivmodsi4_ep>:
    349a:	66 1f       	adc	r22, r22
    349c:	77 1f       	adc	r23, r23
    349e:	88 1f       	adc	r24, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	1a 94       	dec	r1
    34a4:	69 f7       	brne	.-38     	; 0x3480 <__udivmodsi4_loop>
    34a6:	60 95       	com	r22
    34a8:	70 95       	com	r23
    34aa:	80 95       	com	r24
    34ac:	90 95       	com	r25
    34ae:	9b 01       	movw	r18, r22
    34b0:	ac 01       	movw	r20, r24
    34b2:	bd 01       	movw	r22, r26
    34b4:	cf 01       	movw	r24, r30
    34b6:	08 95       	ret

000034b8 <__divmodsi4>:
    34b8:	97 fb       	bst	r25, 7
    34ba:	09 2e       	mov	r0, r25
    34bc:	05 26       	eor	r0, r21
    34be:	0e d0       	rcall	.+28     	; 0x34dc <__divmodsi4_neg1>
    34c0:	57 fd       	sbrc	r21, 7
    34c2:	04 d0       	rcall	.+8      	; 0x34cc <__divmodsi4_neg2>
    34c4:	d7 df       	rcall	.-82     	; 0x3474 <__udivmodsi4>
    34c6:	0a d0       	rcall	.+20     	; 0x34dc <__divmodsi4_neg1>
    34c8:	00 1c       	adc	r0, r0
    34ca:	38 f4       	brcc	.+14     	; 0x34da <__divmodsi4_exit>

000034cc <__divmodsi4_neg2>:
    34cc:	50 95       	com	r21
    34ce:	40 95       	com	r20
    34d0:	30 95       	com	r19
    34d2:	21 95       	neg	r18
    34d4:	3f 4f       	sbci	r19, 0xFF	; 255
    34d6:	4f 4f       	sbci	r20, 0xFF	; 255
    34d8:	5f 4f       	sbci	r21, 0xFF	; 255

000034da <__divmodsi4_exit>:
    34da:	08 95       	ret

000034dc <__divmodsi4_neg1>:
    34dc:	f6 f7       	brtc	.-4      	; 0x34da <__divmodsi4_exit>
    34de:	90 95       	com	r25
    34e0:	80 95       	com	r24
    34e2:	70 95       	com	r23
    34e4:	61 95       	neg	r22
    34e6:	7f 4f       	sbci	r23, 0xFF	; 255
    34e8:	8f 4f       	sbci	r24, 0xFF	; 255
    34ea:	9f 4f       	sbci	r25, 0xFF	; 255
    34ec:	08 95       	ret

000034ee <__prologue_saves__>:
    34ee:	2f 92       	push	r2
    34f0:	3f 92       	push	r3
    34f2:	4f 92       	push	r4
    34f4:	5f 92       	push	r5
    34f6:	6f 92       	push	r6
    34f8:	7f 92       	push	r7
    34fa:	8f 92       	push	r8
    34fc:	9f 92       	push	r9
    34fe:	af 92       	push	r10
    3500:	bf 92       	push	r11
    3502:	cf 92       	push	r12
    3504:	df 92       	push	r13
    3506:	ef 92       	push	r14
    3508:	ff 92       	push	r15
    350a:	0f 93       	push	r16
    350c:	1f 93       	push	r17
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	ca 1b       	sub	r28, r26
    3518:	db 0b       	sbc	r29, r27
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	09 94       	ijmp

00003526 <__epilogue_restores__>:
    3526:	2a 88       	ldd	r2, Y+18	; 0x12
    3528:	39 88       	ldd	r3, Y+17	; 0x11
    352a:	48 88       	ldd	r4, Y+16	; 0x10
    352c:	5f 84       	ldd	r5, Y+15	; 0x0f
    352e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3530:	7d 84       	ldd	r7, Y+13	; 0x0d
    3532:	8c 84       	ldd	r8, Y+12	; 0x0c
    3534:	9b 84       	ldd	r9, Y+11	; 0x0b
    3536:	aa 84       	ldd	r10, Y+10	; 0x0a
    3538:	b9 84       	ldd	r11, Y+9	; 0x09
    353a:	c8 84       	ldd	r12, Y+8	; 0x08
    353c:	df 80       	ldd	r13, Y+7	; 0x07
    353e:	ee 80       	ldd	r14, Y+6	; 0x06
    3540:	fd 80       	ldd	r15, Y+5	; 0x05
    3542:	0c 81       	ldd	r16, Y+4	; 0x04
    3544:	1b 81       	ldd	r17, Y+3	; 0x03
    3546:	aa 81       	ldd	r26, Y+2	; 0x02
    3548:	b9 81       	ldd	r27, Y+1	; 0x01
    354a:	ce 0f       	add	r28, r30
    354c:	d1 1d       	adc	r29, r1
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	ed 01       	movw	r28, r26
    355a:	08 95       	ret

0000355c <_exit>:
    355c:	f8 94       	cli

0000355e <__stop_program>:
    355e:	ff cf       	rjmp	.-2      	; 0x355e <__stop_program>
