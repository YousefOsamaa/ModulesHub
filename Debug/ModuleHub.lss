
ModuleHub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000567e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  0000567e  00005712  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  008001a8  008001a8  0000585a  2**0
                  ALLOC
  3 .stab         000077e8  00000000  00000000  0000585c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003296  00000000  00000000  0000d044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000102da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020f  00000000  00000000  0001049a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000250d  00000000  00000000  000106a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001424  00000000  00000000  00012bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011a7  00000000  00000000  00013fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00015184  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d1  00000000  00000000  00015364  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000926  00000000  00000000  00015635  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015f5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__vector_1>
       8:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__vector_2>
       c:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__vector_3>
      10:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_4>
      14:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__vector_10>
      2c:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3d       	cpi	r26, 0xD8	; 216
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 84 2a 	call	0x5508	; 0x5508 <main>
      8a:	0c 94 3d 2b 	jmp	0x567a	; 0x567a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 09 04 	call	0x812	; 0x812 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 09 04 	call	0x812	; 0x812 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 06 2b 	jmp	0x560c	; 0x560c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 22 2b 	jmp	0x5644	; 0x5644 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2e 2b 	jmp	0x565c	; 0x565c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2e 2b 	jmp	0x565c	; 0x565c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 06 2b 	jmp	0x560c	; 0x560c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 22 2b 	jmp	0x5644	; 0x5644 <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2e 2b 	jmp	0x565c	; 0x565c <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2e 2b 	jmp	0x565c	; 0x565c <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2e 2b 	jmp	0x565c	; 0x565c <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 2e 2b 	jmp	0x565c	; 0x565c <__epilogue_restores__+0x18>

000007b2 <__lesf2>:
     7b2:	a8 e1       	ldi	r26, 0x18	; 24
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__prologue_saves__+0x18>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	2d 83       	std	Y+5, r18	; 0x05
     7c8:	3e 83       	std	Y+6, r19	; 0x06
     7ca:	4f 83       	std	Y+7, r20	; 0x07
     7cc:	58 87       	std	Y+8, r21	; 0x08
     7ce:	89 e0       	ldi	r24, 0x09	; 9
     7d0:	e8 2e       	mov	r14, r24
     7d2:	f1 2c       	mov	r15, r1
     7d4:	ec 0e       	add	r14, r28
     7d6:	fd 1e       	adc	r15, r29
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	b7 01       	movw	r22, r14
     7de:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     7e2:	8e 01       	movw	r16, r28
     7e4:	0f 5e       	subi	r16, 0xEF	; 239
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	ce 01       	movw	r24, r28
     7ea:	05 96       	adiw	r24, 0x05	; 5
     7ec:	b8 01       	movw	r22, r16
     7ee:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     7f2:	89 85       	ldd	r24, Y+9	; 0x09
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	40 f0       	brcs	.+16     	; 0x808 <__lesf2+0x56>
     7f8:	89 89       	ldd	r24, Y+17	; 0x11
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	28 f0       	brcs	.+10     	; 0x808 <__lesf2+0x56>
     7fe:	c7 01       	movw	r24, r14
     800:	b8 01       	movw	r22, r16
     802:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     806:	01 c0       	rjmp	.+2      	; 0x80a <__lesf2+0x58>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	68 96       	adiw	r28, 0x18	; 24
     80c:	e6 e0       	ldi	r30, 0x06	; 6
     80e:	0c 94 2e 2b 	jmp	0x565c	; 0x565c <__epilogue_restores__+0x18>

00000812 <__fixsfsi>:
     812:	ac e0       	ldi	r26, 0x0C	; 12
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	ef e0       	ldi	r30, 0x0F	; 15
     818:	f4 e0       	ldi	r31, 0x04	; 4
     81a:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__prologue_saves__+0x20>
     81e:	69 83       	std	Y+1, r22	; 0x01
     820:	7a 83       	std	Y+2, r23	; 0x02
     822:	8b 83       	std	Y+3, r24	; 0x03
     824:	9c 83       	std	Y+4, r25	; 0x04
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	be 01       	movw	r22, r28
     82c:	6b 5f       	subi	r22, 0xFB	; 251
     82e:	7f 4f       	sbci	r23, 0xFF	; 255
     830:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     834:	8d 81       	ldd	r24, Y+5	; 0x05
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	61 f1       	breq	.+88     	; 0x892 <__stack+0x33>
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	50 f1       	brcs	.+84     	; 0x892 <__stack+0x33>
     83e:	84 30       	cpi	r24, 0x04	; 4
     840:	21 f4       	brne	.+8      	; 0x84a <__fixsfsi+0x38>
     842:	8e 81       	ldd	r24, Y+6	; 0x06
     844:	88 23       	and	r24, r24
     846:	51 f1       	breq	.+84     	; 0x89c <__stack+0x3d>
     848:	2e c0       	rjmp	.+92     	; 0x8a6 <__stack+0x47>
     84a:	2f 81       	ldd	r18, Y+7	; 0x07
     84c:	38 85       	ldd	r19, Y+8	; 0x08
     84e:	37 fd       	sbrc	r19, 7
     850:	20 c0       	rjmp	.+64     	; 0x892 <__stack+0x33>
     852:	6e 81       	ldd	r22, Y+6	; 0x06
     854:	2f 31       	cpi	r18, 0x1F	; 31
     856:	31 05       	cpc	r19, r1
     858:	1c f0       	brlt	.+6      	; 0x860 <__stack+0x1>
     85a:	66 23       	and	r22, r22
     85c:	f9 f0       	breq	.+62     	; 0x89c <__stack+0x3d>
     85e:	23 c0       	rjmp	.+70     	; 0x8a6 <__stack+0x47>
     860:	8e e1       	ldi	r24, 0x1E	; 30
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	82 1b       	sub	r24, r18
     866:	93 0b       	sbc	r25, r19
     868:	29 85       	ldd	r18, Y+9	; 0x09
     86a:	3a 85       	ldd	r19, Y+10	; 0x0a
     86c:	4b 85       	ldd	r20, Y+11	; 0x0b
     86e:	5c 85       	ldd	r21, Y+12	; 0x0c
     870:	04 c0       	rjmp	.+8      	; 0x87a <__stack+0x1b>
     872:	56 95       	lsr	r21
     874:	47 95       	ror	r20
     876:	37 95       	ror	r19
     878:	27 95       	ror	r18
     87a:	8a 95       	dec	r24
     87c:	d2 f7       	brpl	.-12     	; 0x872 <__stack+0x13>
     87e:	66 23       	and	r22, r22
     880:	b1 f0       	breq	.+44     	; 0x8ae <__stack+0x4f>
     882:	50 95       	com	r21
     884:	40 95       	com	r20
     886:	30 95       	com	r19
     888:	21 95       	neg	r18
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	4f 4f       	sbci	r20, 0xFF	; 255
     88e:	5f 4f       	sbci	r21, 0xFF	; 255
     890:	0e c0       	rjmp	.+28     	; 0x8ae <__stack+0x4f>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	09 c0       	rjmp	.+18     	; 0x8ae <__stack+0x4f>
     89c:	2f ef       	ldi	r18, 0xFF	; 255
     89e:	3f ef       	ldi	r19, 0xFF	; 255
     8a0:	4f ef       	ldi	r20, 0xFF	; 255
     8a2:	5f e7       	ldi	r21, 0x7F	; 127
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__stack+0x4f>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	50 e8       	ldi	r21, 0x80	; 128
     8ae:	b9 01       	movw	r22, r18
     8b0:	ca 01       	movw	r24, r20
     8b2:	2c 96       	adiw	r28, 0x0c	; 12
     8b4:	e2 e0       	ldi	r30, 0x02	; 2
     8b6:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <__epilogue_restores__+0x20>

000008ba <__floatunsisf>:
     8ba:	a8 e0       	ldi	r26, 0x08	; 8
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e3 e6       	ldi	r30, 0x63	; 99
     8c0:	f4 e0       	ldi	r31, 0x04	; 4
     8c2:	0c 94 0e 2b 	jmp	0x561c	; 0x561c <__prologue_saves__+0x10>
     8c6:	7b 01       	movw	r14, r22
     8c8:	8c 01       	movw	r16, r24
     8ca:	61 15       	cp	r22, r1
     8cc:	71 05       	cpc	r23, r1
     8ce:	81 05       	cpc	r24, r1
     8d0:	91 05       	cpc	r25, r1
     8d2:	19 f4       	brne	.+6      	; 0x8da <__floatunsisf+0x20>
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	60 c0       	rjmp	.+192    	; 0x99a <__floatunsisf+0xe0>
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	8e e1       	ldi	r24, 0x1E	; 30
     8e0:	c8 2e       	mov	r12, r24
     8e2:	d1 2c       	mov	r13, r1
     8e4:	dc 82       	std	Y+4, r13	; 0x04
     8e6:	cb 82       	std	Y+3, r12	; 0x03
     8e8:	ed 82       	std	Y+5, r14	; 0x05
     8ea:	fe 82       	std	Y+6, r15	; 0x06
     8ec:	0f 83       	std	Y+7, r16	; 0x07
     8ee:	18 87       	std	Y+8, r17	; 0x08
     8f0:	c8 01       	movw	r24, r16
     8f2:	b7 01       	movw	r22, r14
     8f4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__clzsi2>
     8f8:	fc 01       	movw	r30, r24
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	f7 ff       	sbrs	r31, 7
     8fe:	3b c0       	rjmp	.+118    	; 0x976 <__floatunsisf+0xbc>
     900:	22 27       	eor	r18, r18
     902:	33 27       	eor	r19, r19
     904:	2e 1b       	sub	r18, r30
     906:	3f 0b       	sbc	r19, r31
     908:	57 01       	movw	r10, r14
     90a:	68 01       	movw	r12, r16
     90c:	02 2e       	mov	r0, r18
     90e:	04 c0       	rjmp	.+8      	; 0x918 <__floatunsisf+0x5e>
     910:	d6 94       	lsr	r13
     912:	c7 94       	ror	r12
     914:	b7 94       	ror	r11
     916:	a7 94       	ror	r10
     918:	0a 94       	dec	r0
     91a:	d2 f7       	brpl	.-12     	; 0x910 <__floatunsisf+0x56>
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__floatunsisf+0x7c>
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	aa 1f       	adc	r26, r26
     934:	bb 1f       	adc	r27, r27
     936:	2a 95       	dec	r18
     938:	d2 f7       	brpl	.-12     	; 0x92e <__floatunsisf+0x74>
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	a1 09       	sbc	r26, r1
     93e:	b1 09       	sbc	r27, r1
     940:	8e 21       	and	r24, r14
     942:	9f 21       	and	r25, r15
     944:	a0 23       	and	r26, r16
     946:	b1 23       	and	r27, r17
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	a1 05       	cpc	r26, r1
     94c:	b1 05       	cpc	r27, r1
     94e:	21 f0       	breq	.+8      	; 0x958 <__floatunsisf+0x9e>
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	4a 29       	or	r20, r10
     95a:	5b 29       	or	r21, r11
     95c:	6c 29       	or	r22, r12
     95e:	7d 29       	or	r23, r13
     960:	4d 83       	std	Y+5, r20	; 0x05
     962:	5e 83       	std	Y+6, r21	; 0x06
     964:	6f 83       	std	Y+7, r22	; 0x07
     966:	78 87       	std	Y+8, r23	; 0x08
     968:	8e e1       	ldi	r24, 0x1E	; 30
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	8e 1b       	sub	r24, r30
     96e:	9f 0b       	sbc	r25, r31
     970:	9c 83       	std	Y+4, r25	; 0x04
     972:	8b 83       	std	Y+3, r24	; 0x03
     974:	12 c0       	rjmp	.+36     	; 0x99a <__floatunsisf+0xe0>
     976:	30 97       	sbiw	r30, 0x00	; 0
     978:	81 f0       	breq	.+32     	; 0x99a <__floatunsisf+0xe0>
     97a:	0e 2e       	mov	r0, r30
     97c:	04 c0       	rjmp	.+8      	; 0x986 <__floatunsisf+0xcc>
     97e:	ee 0c       	add	r14, r14
     980:	ff 1c       	adc	r15, r15
     982:	00 1f       	adc	r16, r16
     984:	11 1f       	adc	r17, r17
     986:	0a 94       	dec	r0
     988:	d2 f7       	brpl	.-12     	; 0x97e <__floatunsisf+0xc4>
     98a:	ed 82       	std	Y+5, r14	; 0x05
     98c:	fe 82       	std	Y+6, r15	; 0x06
     98e:	0f 83       	std	Y+7, r16	; 0x07
     990:	18 87       	std	Y+8, r17	; 0x08
     992:	ce 1a       	sub	r12, r30
     994:	df 0a       	sbc	r13, r31
     996:	dc 82       	std	Y+4, r13	; 0x04
     998:	cb 82       	std	Y+3, r12	; 0x03
     99a:	1a 82       	std	Y+2, r1	; 0x02
     99c:	ce 01       	movw	r24, r28
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     9a4:	28 96       	adiw	r28, 0x08	; 8
     9a6:	ea e0       	ldi	r30, 0x0A	; 10
     9a8:	0c 94 2a 2b 	jmp	0x5654	; 0x5654 <__epilogue_restores__+0x10>

000009ac <__clzsi2>:
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	7b 01       	movw	r14, r22
     9b6:	8c 01       	movw	r16, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	e8 16       	cp	r14, r24
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	f8 06       	cpc	r15, r24
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	08 07       	cpc	r16, r24
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	18 07       	cpc	r17, r24
     9c8:	88 f4       	brcc	.+34     	; 0x9ec <__clzsi2+0x40>
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	e8 16       	cp	r14, r24
     9ce:	f1 04       	cpc	r15, r1
     9d0:	01 05       	cpc	r16, r1
     9d2:	11 05       	cpc	r17, r1
     9d4:	31 f0       	breq	.+12     	; 0x9e2 <__clzsi2+0x36>
     9d6:	28 f0       	brcs	.+10     	; 0x9e2 <__clzsi2+0x36>
     9d8:	88 e0       	ldi	r24, 0x08	; 8
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	17 c0       	rjmp	.+46     	; 0xa10 <__clzsi2+0x64>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	12 c0       	rjmp	.+36     	; 0xa10 <__clzsi2+0x64>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	e8 16       	cp	r14, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	f8 06       	cpc	r15, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	08 07       	cpc	r16, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	18 07       	cpc	r17, r24
     9fc:	28 f0       	brcs	.+10     	; 0xa08 <__clzsi2+0x5c>
     9fe:	88 e1       	ldi	r24, 0x18	; 24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	a0 e0       	ldi	r26, 0x00	; 0
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__clzsi2+0x64>
     a08:	80 e1       	ldi	r24, 0x10	; 16
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	20 e2       	ldi	r18, 0x20	; 32
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	28 1b       	sub	r18, r24
     a1a:	39 0b       	sbc	r19, r25
     a1c:	4a 0b       	sbc	r20, r26
     a1e:	5b 0b       	sbc	r21, r27
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__clzsi2+0x7e>
     a22:	16 95       	lsr	r17
     a24:	07 95       	ror	r16
     a26:	f7 94       	ror	r15
     a28:	e7 94       	ror	r14
     a2a:	8a 95       	dec	r24
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__clzsi2+0x76>
     a2e:	f7 01       	movw	r30, r14
     a30:	e8 59       	subi	r30, 0x98	; 152
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	80 81       	ld	r24, Z
     a36:	28 1b       	sub	r18, r24
     a38:	31 09       	sbc	r19, r1
     a3a:	41 09       	sbc	r20, r1
     a3c:	51 09       	sbc	r21, r1
     a3e:	c9 01       	movw	r24, r18
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	08 95       	ret

00000a4a <__pack_f>:
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	fc 01       	movw	r30, r24
     a56:	e4 80       	ldd	r14, Z+4	; 0x04
     a58:	f5 80       	ldd	r15, Z+5	; 0x05
     a5a:	06 81       	ldd	r16, Z+6	; 0x06
     a5c:	17 81       	ldd	r17, Z+7	; 0x07
     a5e:	d1 80       	ldd	r13, Z+1	; 0x01
     a60:	80 81       	ld	r24, Z
     a62:	82 30       	cpi	r24, 0x02	; 2
     a64:	48 f4       	brcc	.+18     	; 0xa78 <__pack_f+0x2e>
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	a0 e1       	ldi	r26, 0x10	; 16
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	e8 2a       	or	r14, r24
     a70:	f9 2a       	or	r15, r25
     a72:	0a 2b       	or	r16, r26
     a74:	1b 2b       	or	r17, r27
     a76:	a5 c0       	rjmp	.+330    	; 0xbc2 <__pack_f+0x178>
     a78:	84 30       	cpi	r24, 0x04	; 4
     a7a:	09 f4       	brne	.+2      	; 0xa7e <__pack_f+0x34>
     a7c:	9f c0       	rjmp	.+318    	; 0xbbc <__pack_f+0x172>
     a7e:	82 30       	cpi	r24, 0x02	; 2
     a80:	21 f4       	brne	.+8      	; 0xa8a <__pack_f+0x40>
     a82:	ee 24       	eor	r14, r14
     a84:	ff 24       	eor	r15, r15
     a86:	87 01       	movw	r16, r14
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <__pack_f+0x4a>
     a8a:	e1 14       	cp	r14, r1
     a8c:	f1 04       	cpc	r15, r1
     a8e:	01 05       	cpc	r16, r1
     a90:	11 05       	cpc	r17, r1
     a92:	19 f4       	brne	.+6      	; 0xa9a <__pack_f+0x50>
     a94:	e0 e0       	ldi	r30, 0x00	; 0
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	96 c0       	rjmp	.+300    	; 0xbc6 <__pack_f+0x17c>
     a9a:	62 81       	ldd	r22, Z+2	; 0x02
     a9c:	73 81       	ldd	r23, Z+3	; 0x03
     a9e:	9f ef       	ldi	r25, 0xFF	; 255
     aa0:	62 38       	cpi	r22, 0x82	; 130
     aa2:	79 07       	cpc	r23, r25
     aa4:	0c f0       	brlt	.+2      	; 0xaa8 <__pack_f+0x5e>
     aa6:	5b c0       	rjmp	.+182    	; 0xb5e <__pack_f+0x114>
     aa8:	22 e8       	ldi	r18, 0x82	; 130
     aaa:	3f ef       	ldi	r19, 0xFF	; 255
     aac:	26 1b       	sub	r18, r22
     aae:	37 0b       	sbc	r19, r23
     ab0:	2a 31       	cpi	r18, 0x1A	; 26
     ab2:	31 05       	cpc	r19, r1
     ab4:	2c f0       	brlt	.+10     	; 0xac0 <__pack_f+0x76>
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	2a c0       	rjmp	.+84     	; 0xb14 <__pack_f+0xca>
     ac0:	b8 01       	movw	r22, r16
     ac2:	a7 01       	movw	r20, r14
     ac4:	02 2e       	mov	r0, r18
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__pack_f+0x86>
     ac8:	76 95       	lsr	r23
     aca:	67 95       	ror	r22
     acc:	57 95       	ror	r21
     ace:	47 95       	ror	r20
     ad0:	0a 94       	dec	r0
     ad2:	d2 f7       	brpl	.-12     	; 0xac8 <__pack_f+0x7e>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	a0 e0       	ldi	r26, 0x00	; 0
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <__pack_f+0x9c>
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	aa 1f       	adc	r26, r26
     ae4:	bb 1f       	adc	r27, r27
     ae6:	2a 95       	dec	r18
     ae8:	d2 f7       	brpl	.-12     	; 0xade <__pack_f+0x94>
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	a1 09       	sbc	r26, r1
     aee:	b1 09       	sbc	r27, r1
     af0:	8e 21       	and	r24, r14
     af2:	9f 21       	and	r25, r15
     af4:	a0 23       	and	r26, r16
     af6:	b1 23       	and	r27, r17
     af8:	00 97       	sbiw	r24, 0x00	; 0
     afa:	a1 05       	cpc	r26, r1
     afc:	b1 05       	cpc	r27, r1
     afe:	21 f0       	breq	.+8      	; 0xb08 <__pack_f+0xbe>
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	9a 01       	movw	r18, r20
     b0a:	ab 01       	movw	r20, r22
     b0c:	28 2b       	or	r18, r24
     b0e:	39 2b       	or	r19, r25
     b10:	4a 2b       	or	r20, r26
     b12:	5b 2b       	or	r21, r27
     b14:	da 01       	movw	r26, r20
     b16:	c9 01       	movw	r24, r18
     b18:	8f 77       	andi	r24, 0x7F	; 127
     b1a:	90 70       	andi	r25, 0x00	; 0
     b1c:	a0 70       	andi	r26, 0x00	; 0
     b1e:	b0 70       	andi	r27, 0x00	; 0
     b20:	80 34       	cpi	r24, 0x40	; 64
     b22:	91 05       	cpc	r25, r1
     b24:	a1 05       	cpc	r26, r1
     b26:	b1 05       	cpc	r27, r1
     b28:	39 f4       	brne	.+14     	; 0xb38 <__pack_f+0xee>
     b2a:	27 ff       	sbrs	r18, 7
     b2c:	09 c0       	rjmp	.+18     	; 0xb40 <__pack_f+0xf6>
     b2e:	20 5c       	subi	r18, 0xC0	; 192
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	4f 4f       	sbci	r20, 0xFF	; 255
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <__pack_f+0xf6>
     b38:	21 5c       	subi	r18, 0xC1	; 193
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255
     b3c:	4f 4f       	sbci	r20, 0xFF	; 255
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	e0 e0       	ldi	r30, 0x00	; 0
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	20 30       	cpi	r18, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	3a 07       	cpc	r19, r26
     b4a:	a0 e0       	ldi	r26, 0x00	; 0
     b4c:	4a 07       	cpc	r20, r26
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	5a 07       	cpc	r21, r26
     b52:	10 f0       	brcs	.+4      	; 0xb58 <__pack_f+0x10e>
     b54:	e1 e0       	ldi	r30, 0x01	; 1
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	79 01       	movw	r14, r18
     b5a:	8a 01       	movw	r16, r20
     b5c:	27 c0       	rjmp	.+78     	; 0xbac <__pack_f+0x162>
     b5e:	60 38       	cpi	r22, 0x80	; 128
     b60:	71 05       	cpc	r23, r1
     b62:	64 f5       	brge	.+88     	; 0xbbc <__pack_f+0x172>
     b64:	fb 01       	movw	r30, r22
     b66:	e1 58       	subi	r30, 0x81	; 129
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	d8 01       	movw	r26, r16
     b6c:	c7 01       	movw	r24, r14
     b6e:	8f 77       	andi	r24, 0x7F	; 127
     b70:	90 70       	andi	r25, 0x00	; 0
     b72:	a0 70       	andi	r26, 0x00	; 0
     b74:	b0 70       	andi	r27, 0x00	; 0
     b76:	80 34       	cpi	r24, 0x40	; 64
     b78:	91 05       	cpc	r25, r1
     b7a:	a1 05       	cpc	r26, r1
     b7c:	b1 05       	cpc	r27, r1
     b7e:	39 f4       	brne	.+14     	; 0xb8e <__pack_f+0x144>
     b80:	e7 fe       	sbrs	r14, 7
     b82:	0d c0       	rjmp	.+26     	; 0xb9e <__pack_f+0x154>
     b84:	80 e4       	ldi	r24, 0x40	; 64
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a0 e0       	ldi	r26, 0x00	; 0
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__pack_f+0x14c>
     b8e:	8f e3       	ldi	r24, 0x3F	; 63
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e8 0e       	add	r14, r24
     b98:	f9 1e       	adc	r15, r25
     b9a:	0a 1f       	adc	r16, r26
     b9c:	1b 1f       	adc	r17, r27
     b9e:	17 ff       	sbrs	r17, 7
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <__pack_f+0x162>
     ba2:	16 95       	lsr	r17
     ba4:	07 95       	ror	r16
     ba6:	f7 94       	ror	r15
     ba8:	e7 94       	ror	r14
     baa:	31 96       	adiw	r30, 0x01	; 1
     bac:	87 e0       	ldi	r24, 0x07	; 7
     bae:	16 95       	lsr	r17
     bb0:	07 95       	ror	r16
     bb2:	f7 94       	ror	r15
     bb4:	e7 94       	ror	r14
     bb6:	8a 95       	dec	r24
     bb8:	d1 f7       	brne	.-12     	; 0xbae <__pack_f+0x164>
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <__pack_f+0x17c>
     bbc:	ee 24       	eor	r14, r14
     bbe:	ff 24       	eor	r15, r15
     bc0:	87 01       	movw	r16, r14
     bc2:	ef ef       	ldi	r30, 0xFF	; 255
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	6e 2f       	mov	r22, r30
     bc8:	67 95       	ror	r22
     bca:	66 27       	eor	r22, r22
     bcc:	67 95       	ror	r22
     bce:	90 2f       	mov	r25, r16
     bd0:	9f 77       	andi	r25, 0x7F	; 127
     bd2:	d7 94       	ror	r13
     bd4:	dd 24       	eor	r13, r13
     bd6:	d7 94       	ror	r13
     bd8:	8e 2f       	mov	r24, r30
     bda:	86 95       	lsr	r24
     bdc:	49 2f       	mov	r20, r25
     bde:	46 2b       	or	r20, r22
     be0:	58 2f       	mov	r21, r24
     be2:	5d 29       	or	r21, r13
     be4:	b7 01       	movw	r22, r14
     be6:	ca 01       	movw	r24, r20
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	08 95       	ret

00000bf4 <__unpack_f>:
     bf4:	fc 01       	movw	r30, r24
     bf6:	db 01       	movw	r26, r22
     bf8:	40 81       	ld	r20, Z
     bfa:	51 81       	ldd	r21, Z+1	; 0x01
     bfc:	22 81       	ldd	r18, Z+2	; 0x02
     bfe:	62 2f       	mov	r22, r18
     c00:	6f 77       	andi	r22, 0x7F	; 127
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	22 1f       	adc	r18, r18
     c06:	22 27       	eor	r18, r18
     c08:	22 1f       	adc	r18, r18
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	89 2f       	mov	r24, r25
     c0e:	88 0f       	add	r24, r24
     c10:	82 2b       	or	r24, r18
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	99 1f       	adc	r25, r25
     c18:	99 27       	eor	r25, r25
     c1a:	99 1f       	adc	r25, r25
     c1c:	11 96       	adiw	r26, 0x01	; 1
     c1e:	9c 93       	st	X, r25
     c20:	11 97       	sbiw	r26, 0x01	; 1
     c22:	21 15       	cp	r18, r1
     c24:	31 05       	cpc	r19, r1
     c26:	a9 f5       	brne	.+106    	; 0xc92 <__unpack_f+0x9e>
     c28:	41 15       	cp	r20, r1
     c2a:	51 05       	cpc	r21, r1
     c2c:	61 05       	cpc	r22, r1
     c2e:	71 05       	cpc	r23, r1
     c30:	11 f4       	brne	.+4      	; 0xc36 <__unpack_f+0x42>
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	37 c0       	rjmp	.+110    	; 0xca4 <__unpack_f+0xb0>
     c36:	82 e8       	ldi	r24, 0x82	; 130
     c38:	9f ef       	ldi	r25, 0xFF	; 255
     c3a:	13 96       	adiw	r26, 0x03	; 3
     c3c:	9c 93       	st	X, r25
     c3e:	8e 93       	st	-X, r24
     c40:	12 97       	sbiw	r26, 0x02	; 2
     c42:	9a 01       	movw	r18, r20
     c44:	ab 01       	movw	r20, r22
     c46:	67 e0       	ldi	r22, 0x07	; 7
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	44 1f       	adc	r20, r20
     c4e:	55 1f       	adc	r21, r21
     c50:	6a 95       	dec	r22
     c52:	d1 f7       	brne	.-12     	; 0xc48 <__unpack_f+0x54>
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	8c 93       	st	X, r24
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <__unpack_f+0x80>
     c5a:	22 0f       	add	r18, r18
     c5c:	33 1f       	adc	r19, r19
     c5e:	44 1f       	adc	r20, r20
     c60:	55 1f       	adc	r21, r21
     c62:	12 96       	adiw	r26, 0x02	; 2
     c64:	8d 91       	ld	r24, X+
     c66:	9c 91       	ld	r25, X
     c68:	13 97       	sbiw	r26, 0x03	; 3
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	13 96       	adiw	r26, 0x03	; 3
     c6e:	9c 93       	st	X, r25
     c70:	8e 93       	st	-X, r24
     c72:	12 97       	sbiw	r26, 0x02	; 2
     c74:	20 30       	cpi	r18, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	38 07       	cpc	r19, r24
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	48 07       	cpc	r20, r24
     c7e:	80 e4       	ldi	r24, 0x40	; 64
     c80:	58 07       	cpc	r21, r24
     c82:	58 f3       	brcs	.-42     	; 0xc5a <__unpack_f+0x66>
     c84:	14 96       	adiw	r26, 0x04	; 4
     c86:	2d 93       	st	X+, r18
     c88:	3d 93       	st	X+, r19
     c8a:	4d 93       	st	X+, r20
     c8c:	5c 93       	st	X, r21
     c8e:	17 97       	sbiw	r26, 0x07	; 7
     c90:	08 95       	ret
     c92:	2f 3f       	cpi	r18, 0xFF	; 255
     c94:	31 05       	cpc	r19, r1
     c96:	79 f4       	brne	.+30     	; 0xcb6 <__unpack_f+0xc2>
     c98:	41 15       	cp	r20, r1
     c9a:	51 05       	cpc	r21, r1
     c9c:	61 05       	cpc	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	19 f4       	brne	.+6      	; 0xca8 <__unpack_f+0xb4>
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	8c 93       	st	X, r24
     ca6:	08 95       	ret
     ca8:	64 ff       	sbrs	r22, 4
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <__unpack_f+0xbe>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8c 93       	st	X, r24
     cb0:	12 c0       	rjmp	.+36     	; 0xcd6 <__unpack_f+0xe2>
     cb2:	1c 92       	st	X, r1
     cb4:	10 c0       	rjmp	.+32     	; 0xcd6 <__unpack_f+0xe2>
     cb6:	2f 57       	subi	r18, 0x7F	; 127
     cb8:	30 40       	sbci	r19, 0x00	; 0
     cba:	13 96       	adiw	r26, 0x03	; 3
     cbc:	3c 93       	st	X, r19
     cbe:	2e 93       	st	-X, r18
     cc0:	12 97       	sbiw	r26, 0x02	; 2
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	8c 93       	st	X, r24
     cc6:	87 e0       	ldi	r24, 0x07	; 7
     cc8:	44 0f       	add	r20, r20
     cca:	55 1f       	adc	r21, r21
     ccc:	66 1f       	adc	r22, r22
     cce:	77 1f       	adc	r23, r23
     cd0:	8a 95       	dec	r24
     cd2:	d1 f7       	brne	.-12     	; 0xcc8 <__unpack_f+0xd4>
     cd4:	70 64       	ori	r23, 0x40	; 64
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	4d 93       	st	X+, r20
     cda:	5d 93       	st	X+, r21
     cdc:	6d 93       	st	X+, r22
     cde:	7c 93       	st	X, r23
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret

00000ce4 <__fpcmp_parts_f>:
     ce4:	1f 93       	push	r17
     ce6:	dc 01       	movw	r26, r24
     ce8:	fb 01       	movw	r30, r22
     cea:	9c 91       	ld	r25, X
     cec:	92 30       	cpi	r25, 0x02	; 2
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <__fpcmp_parts_f+0xe>
     cf0:	47 c0       	rjmp	.+142    	; 0xd80 <__fpcmp_parts_f+0x9c>
     cf2:	80 81       	ld	r24, Z
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <__fpcmp_parts_f+0x16>
     cf8:	43 c0       	rjmp	.+134    	; 0xd80 <__fpcmp_parts_f+0x9c>
     cfa:	94 30       	cpi	r25, 0x04	; 4
     cfc:	51 f4       	brne	.+20     	; 0xd12 <__fpcmp_parts_f+0x2e>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	99 f5       	brne	.+102    	; 0xd6c <__fpcmp_parts_f+0x88>
     d06:	81 81       	ldd	r24, Z+1	; 0x01
     d08:	68 2f       	mov	r22, r24
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	61 1b       	sub	r22, r17
     d0e:	71 09       	sbc	r23, r1
     d10:	3f c0       	rjmp	.+126    	; 0xd90 <__fpcmp_parts_f+0xac>
     d12:	84 30       	cpi	r24, 0x04	; 4
     d14:	21 f0       	breq	.+8      	; 0xd1e <__fpcmp_parts_f+0x3a>
     d16:	92 30       	cpi	r25, 0x02	; 2
     d18:	31 f4       	brne	.+12     	; 0xd26 <__fpcmp_parts_f+0x42>
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	b9 f1       	breq	.+110    	; 0xd8c <__fpcmp_parts_f+0xa8>
     d1e:	81 81       	ldd	r24, Z+1	; 0x01
     d20:	88 23       	and	r24, r24
     d22:	89 f1       	breq	.+98     	; 0xd86 <__fpcmp_parts_f+0xa2>
     d24:	2d c0       	rjmp	.+90     	; 0xd80 <__fpcmp_parts_f+0x9c>
     d26:	11 96       	adiw	r26, 0x01	; 1
     d28:	1c 91       	ld	r17, X
     d2a:	11 97       	sbiw	r26, 0x01	; 1
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	f1 f0       	breq	.+60     	; 0xd6c <__fpcmp_parts_f+0x88>
     d30:	81 81       	ldd	r24, Z+1	; 0x01
     d32:	18 17       	cp	r17, r24
     d34:	d9 f4       	brne	.+54     	; 0xd6c <__fpcmp_parts_f+0x88>
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	2d 91       	ld	r18, X+
     d3a:	3c 91       	ld	r19, X
     d3c:	13 97       	sbiw	r26, 0x03	; 3
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	82 17       	cp	r24, r18
     d44:	93 07       	cpc	r25, r19
     d46:	94 f0       	brlt	.+36     	; 0xd6c <__fpcmp_parts_f+0x88>
     d48:	28 17       	cp	r18, r24
     d4a:	39 07       	cpc	r19, r25
     d4c:	bc f0       	brlt	.+46     	; 0xd7c <__fpcmp_parts_f+0x98>
     d4e:	14 96       	adiw	r26, 0x04	; 4
     d50:	8d 91       	ld	r24, X+
     d52:	9d 91       	ld	r25, X+
     d54:	0d 90       	ld	r0, X+
     d56:	bc 91       	ld	r27, X
     d58:	a0 2d       	mov	r26, r0
     d5a:	24 81       	ldd	r18, Z+4	; 0x04
     d5c:	35 81       	ldd	r19, Z+5	; 0x05
     d5e:	46 81       	ldd	r20, Z+6	; 0x06
     d60:	57 81       	ldd	r21, Z+7	; 0x07
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	4a 07       	cpc	r20, r26
     d68:	5b 07       	cpc	r21, r27
     d6a:	18 f4       	brcc	.+6      	; 0xd72 <__fpcmp_parts_f+0x8e>
     d6c:	11 23       	and	r17, r17
     d6e:	41 f0       	breq	.+16     	; 0xd80 <__fpcmp_parts_f+0x9c>
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <__fpcmp_parts_f+0xa2>
     d72:	82 17       	cp	r24, r18
     d74:	93 07       	cpc	r25, r19
     d76:	a4 07       	cpc	r26, r20
     d78:	b5 07       	cpc	r27, r21
     d7a:	40 f4       	brcc	.+16     	; 0xd8c <__fpcmp_parts_f+0xa8>
     d7c:	11 23       	and	r17, r17
     d7e:	19 f0       	breq	.+6      	; 0xd86 <__fpcmp_parts_f+0xa2>
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	05 c0       	rjmp	.+10     	; 0xd90 <__fpcmp_parts_f+0xac>
     d86:	6f ef       	ldi	r22, 0xFF	; 255
     d88:	7f ef       	ldi	r23, 0xFF	; 255
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <__fpcmp_parts_f+0xac>
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	cb 01       	movw	r24, r22
     d92:	1f 91       	pop	r17
     d94:	08 95       	ret

00000d96 <Timer_enu_Initialization>:
static void (* apfun_ISRpointers[TIMER_ISR_COUNT])(void*)= { NULL};
static void* apvid_ISRParameters[TIMER_ISR_COUNT] = {NULL};

//APIs implementaion
extern ErrorState_t Timer_enu_Initialization(void)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <Timer_enu_Initialization+0x6>
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <Timer_enu_Initialization+0x8>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <Timer_enu_Initialization+0xa>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
     da4:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Counter = 0;
     da6:	19 82       	std	Y+1, r1	; 0x01

    u8 Local_au8_ErrorStates [4] ={0};
     da8:	1b 82       	std	Y+3, r1	; 0x03
     daa:	1c 82       	std	Y+4, r1	; 0x04
     dac:	1d 82       	std	Y+5, r1	; 0x05
     dae:	1e 82       	std	Y+6, r1	; 0x06

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
     db0:	19 82       	std	Y+1, r1	; 0x01
     db2:	b3 c0       	rjmp	.+358    	; 0xf1a <Timer_enu_Initialization+0x184>
    {
        
      Local_au8_ErrorStates[0] = enu_SetTimerMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode);
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	c9 01       	movw	r24, r18
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	fc 01       	movw	r30, r24
     dca:	e7 59       	subi	r30, 0x97	; 151
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	40 81       	ld	r20, Z
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	c9 01       	movw	r24, r18
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	82 0f       	add	r24, r18
     de2:	93 1f       	adc	r25, r19
     de4:	fc 01       	movw	r30, r24
     de6:	e6 59       	subi	r30, 0x96	; 150
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	90 81       	ld	r25, Z
     dec:	84 2f       	mov	r24, r20
     dee:	69 2f       	mov	r22, r25
     df0:	0e 94 b6 0b 	call	0x176c	; 0x176c <enu_SetTimerMode>
     df4:	8b 83       	std	Y+3, r24	; 0x03
      Local_au8_ErrorStates[1] = enu_SetClockSelection(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].ClockSelection);
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	c9 01       	movw	r24, r18
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	fc 01       	movw	r30, r24
     e0c:	e7 59       	subi	r30, 0x97	; 151
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	40 81       	ld	r20, Z
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	c9 01       	movw	r24, r18
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	82 0f       	add	r24, r18
     e24:	93 1f       	adc	r25, r19
     e26:	fc 01       	movw	r30, r24
     e28:	e5 59       	subi	r30, 0x95	; 149
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	90 81       	ld	r25, Z
     e2e:	84 2f       	mov	r24, r20
     e30:	69 2f       	mov	r22, r25
     e32:	0e 94 80 0c 	call	0x1900	; 0x1900 <enu_SetClockSelection>
     e36:	8c 83       	std	Y+4, r24	; 0x04
      Local_au8_ErrorStates[2] = enu_SetInterruptMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode, Timer_astr_TimerList[Local_u8_Counter].InterruptMode);
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	c9 01       	movw	r24, r18
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	82 0f       	add	r24, r18
     e4a:	93 1f       	adc	r25, r19
     e4c:	fc 01       	movw	r30, r24
     e4e:	e7 59       	subi	r30, 0x97	; 151
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	50 81       	ld	r21, Z
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	c9 01       	movw	r24, r18
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	fc 01       	movw	r30, r24
     e6a:	e6 59       	subi	r30, 0x96	; 150
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	40 81       	ld	r20, Z
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	c9 01       	movw	r24, r18
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	fc 01       	movw	r30, r24
     e86:	e4 59       	subi	r30, 0x94	; 148
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	90 81       	ld	r25, Z
     e8c:	85 2f       	mov	r24, r21
     e8e:	64 2f       	mov	r22, r20
     e90:	49 2f       	mov	r20, r25
     e92:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enu_SetInterruptMode>
     e96:	8d 83       	std	Y+5, r24	; 0x05
      Local_au8_ErrorStates[3] = enu_SetOCxBehavior(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode ,Timer_astr_TimerList[Local_u8_Counter].OCxPinBehavior);
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	c9 01       	movw	r24, r18
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	82 0f       	add	r24, r18
     eaa:	93 1f       	adc	r25, r19
     eac:	fc 01       	movw	r30, r24
     eae:	e7 59       	subi	r30, 0x97	; 151
     eb0:	fe 4f       	sbci	r31, 0xFE	; 254
     eb2:	50 81       	ld	r21, Z
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	c9 01       	movw	r24, r18
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	82 0f       	add	r24, r18
     ec6:	93 1f       	adc	r25, r19
     ec8:	fc 01       	movw	r30, r24
     eca:	e6 59       	subi	r30, 0x96	; 150
     ecc:	fe 4f       	sbci	r31, 0xFE	; 254
     ece:	40 81       	ld	r20, Z
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	c9 01       	movw	r24, r18
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	82 0f       	add	r24, r18
     ee2:	93 1f       	adc	r25, r19
     ee4:	fc 01       	movw	r30, r24
     ee6:	e3 59       	subi	r30, 0x93	; 147
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	90 81       	ld	r25, Z
     eec:	85 2f       	mov	r24, r21
     eee:	64 2f       	mov	r22, r20
     ef0:	49 2f       	mov	r20, r25
     ef2:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <enu_SetOCxBehavior>
     ef6:	8e 83       	std	Y+6, r24	; 0x06
    
      if((Local_au8_ErrorStates[0] == ES_NOK) || (Local_au8_ErrorStates[1] == ES_NOK) || (Local_au8_ErrorStates[2] == ES_NOK) || (Local_au8_ErrorStates[3] == ES_NOK))
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	49 f0       	breq	.+18     	; 0xf10 <Timer_enu_Initialization+0x17a>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	31 f0       	breq	.+12     	; 0xf10 <Timer_enu_Initialization+0x17a>
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	19 f0       	breq	.+6      	; 0xf10 <Timer_enu_Initialization+0x17a>
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	11 f4       	brne	.+4      	; 0xf14 <Timer_enu_Initialization+0x17e>
      {
        Local_u8_ErrorFlag = ES_NOK;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Counter = 0;

    u8 Local_au8_ErrorStates [4] ={0};

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	90 91 68 01 	lds	r25, 0x0168
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	89 17       	cp	r24, r25
     f22:	08 f4       	brcc	.+2      	; 0xf26 <Timer_enu_Initialization+0x190>
     f24:	47 cf       	rjmp	.-370    	; 0xdb4 <Timer_enu_Initialization+0x1e>
      }
    }
    


    return Local_u8_ErrorFlag;
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f28:	26 96       	adiw	r28, 0x06	; 6
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <Timer_enu_SetOCRxValue>:

extern ErrorState_t Timer_enu_SetOCRxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <Timer_enu_SetOCRxValue+0x6>
     f40:	00 d0       	rcall	.+0      	; 0xf42 <Timer_enu_SetOCRxValue+0x8>
     f42:	00 d0       	rcall	.+0      	; 0xf44 <Timer_enu_SetOCRxValue+0xa>
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	8a 83       	std	Y+2, r24	; 0x02
     f4a:	7c 83       	std	Y+4, r23	; 0x04
     f4c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3e 83       	std	Y+6, r19	; 0x06
     f5a:	2d 83       	std	Y+5, r18	; 0x05
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	91 05       	cpc	r25, r1
     f64:	b9 f0       	breq	.+46     	; 0xf94 <Timer_enu_SetOCRxValue+0x5a>
     f66:	2d 81       	ldd	r18, Y+5	; 0x05
     f68:	3e 81       	ldd	r19, Y+6	; 0x06
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	51 f0       	breq	.+20     	; 0xf84 <Timer_enu_SetOCRxValue+0x4a>
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	9e 81       	ldd	r25, Y+6	; 0x06
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	61 f4       	brne	.+24     	; 0xf90 <Timer_enu_SetOCRxValue+0x56>
    {
        case TIMER_0:
        {
            OCR0 = Copy_u16_Value;
     f78:	ec e5       	ldi	r30, 0x5C	; 92
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
     f80:	19 82       	std	Y+1, r1	; 0x01
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }

        case TIMER_2:
        {
            OCR2 = Copy_u16_Value;
     f84:	e3 e4       	ldi	r30, 0x43	; 67
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
     f8c:	19 82       	std	Y+1, r1	; 0x01
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
}
     f96:	26 96       	adiw	r28, 0x06	; 6
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <Timer_enu_SetTCNTxValue>:

extern ErrorState_t Timer_enu_SetTCNTxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	00 d0       	rcall	.+0      	; 0xfae <Timer_enu_SetTCNTxValue+0x6>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <Timer_enu_SetTCNTxValue+0x8>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <Timer_enu_SetTCNTxValue+0xa>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	8a 83       	std	Y+2, r24	; 0x02
     fb8:	7c 83       	std	Y+4, r23	; 0x04
     fba:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	3e 83       	std	Y+6, r19	; 0x06
     fc8:	2d 83       	std	Y+5, r18	; 0x05
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	b1 f0       	breq	.+44     	; 0x1000 <Timer_enu_SetTCNTxValue+0x58>
     fd4:	2d 81       	ldd	r18, Y+5	; 0x05
     fd6:	3e 81       	ldd	r19, Y+6	; 0x06
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	51 f0       	breq	.+20     	; 0xff2 <Timer_enu_SetTCNTxValue+0x4a>
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	59 f4       	brne	.+22     	; 0xffc <Timer_enu_SetTCNTxValue+0x54>
    {
        case TIMER_0:
        {
            TCNT0 = (u8)Copy_u16_Value;
     fe6:	e2 e5       	ldi	r30, 0x52	; 82
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }

        case TIMER_2:
        {
            TCNT2 = (u8)Copy_u16_Value;
     ff2:	e4 e4       	ldi	r30, 0x44	; 68
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	80 83       	st	Z, r24
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
}
    1002:	26 96       	adiw	r28, 0x06	; 6
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <Timer_enu_ReadTCNTxValue>:

extern ErrorState_t Timer_enu_ReadTCNTxValue(u8 Copy_u8_TimerNumber, u16* Copy_u16_Value)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <Timer_enu_ReadTCNTxValue+0x6>
    101a:	00 d0       	rcall	.+0      	; 0x101c <Timer_enu_ReadTCNTxValue+0x8>
    101c:	00 d0       	rcall	.+0      	; 0x101e <Timer_enu_ReadTCNTxValue+0xa>
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	8a 83       	std	Y+2, r24	; 0x02
    1024:	7c 83       	std	Y+4, r23	; 0x04
    1026:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u16_Value)
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	61 f1       	breq	.+88     	; 0x108c <Timer_enu_ReadTCNTxValue+0x78>
    {
        switch (Copy_u8_TimerNumber)
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3e 83       	std	Y+6, r19	; 0x06
    103c:	2d 83       	std	Y+5, r18	; 0x05
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	91 05       	cpc	r25, r1
    1046:	21 f1       	breq	.+72     	; 0x1090 <Timer_enu_ReadTCNTxValue+0x7c>
    1048:	2d 81       	ldd	r18, Y+5	; 0x05
    104a:	3e 81       	ldd	r19, Y+6	; 0x06
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	79 f0       	breq	.+30     	; 0x1070 <Timer_enu_ReadTCNTxValue+0x5c>
    1052:	8d 81       	ldd	r24, Y+5	; 0x05
    1054:	9e 81       	ldd	r25, Y+6	; 0x06
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	b1 f4       	brne	.+44     	; 0x1086 <Timer_enu_ReadTCNTxValue+0x72>
        {
            case TIMER_0:
            {
                *Copy_u16_Value = TCNT0;
    105a:	e2 e5       	ldi	r30, 0x52	; 82
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	eb 81       	ldd	r30, Y+3	; 0x03
    1066:	fc 81       	ldd	r31, Y+4	; 0x04
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    106c:	19 82       	std	Y+1, r1	; 0x01
    106e:	10 c0       	rjmp	.+32     	; 0x1090 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }

            case TIMER_2:
            {
                *Copy_u16_Value = TCNT2;
    1070:	e4 e4       	ldi	r30, 0x44	; 68
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	eb 81       	ldd	r30, Y+3	; 0x03
    107c:	fc 81       	ldd	r31, Y+4	; 0x04
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    1082:	19 82       	std	Y+1, r1	; 0x01
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <Timer_enu_ReadTCNTxValue+0x7c>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
}
    1092:	26 96       	adiw	r28, 0x06	; 6
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <Timer_enu_SetClock>:

extern ErrorState_t Timer_enu_SetClock (u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <Timer_enu_SetClock+0x6>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	8a 83       	std	Y+2, r24	; 0x02
    10b2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetClockSelection(Copy_u8_TimerNumber, Copy_u8_ClockSelection);
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	6b 81       	ldd	r22, Y+3	; 0x03
    10bc:	0e 94 80 0c 	call	0x1900	; 0x1900 <enu_SetClockSelection>
    10c0:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <Timer_enu_SetDutyCycleForPWM>:

extern ErrorState_t Timer_enu_SetDutyCycleForPWM(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_PulseType, f32 Copy_f32_DutyCyclePercentage)
{
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	2c 97       	sbiw	r28, 0x0c	; 12
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	6b 83       	std	Y+3, r22	; 0x03
    10ec:	4c 83       	std	Y+4, r20	; 0x04
    10ee:	0d 83       	std	Y+5, r16	; 0x05
    10f0:	1e 83       	std	Y+6, r17	; 0x06
    10f2:	2f 83       	std	Y+7, r18	; 0x07
    10f4:	38 87       	std	Y+8, r19	; 0x08
    u8 Local_u8_ErrorFlag = ES_NOK;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_f32_DutyCyclePercentage >= TIMER_DUTYCYCLE_0) && (Copy_f32_DutyCyclePercentage <= TIMER_DUTYCYCLE_100))
    10fa:	1c 86       	std	Y+12, r1	; 0x0c
    10fc:	6d 81       	ldd	r22, Y+5	; 0x05
    10fe:	7e 81       	ldd	r23, Y+6	; 0x06
    1100:	8f 81       	ldd	r24, Y+7	; 0x07
    1102:	98 85       	ldd	r25, Y+8	; 0x08
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
    1110:	88 23       	and	r24, r24
    1112:	14 f0       	brlt	.+4      	; 0x1118 <Timer_enu_SetDutyCycleForPWM+0x48>
    1114:	21 e0       	ldi	r18, 0x01	; 1
    1116:	2c 87       	std	Y+12, r18	; 0x0c
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	3c 85       	ldd	r19, Y+12	; 0x0c
    111c:	83 27       	eor	r24, r19
    111e:	88 23       	and	r24, r24
    1120:	09 f0       	breq	.+2      	; 0x1124 <Timer_enu_SetDutyCycleForPWM+0x54>
    1122:	64 c1       	rjmp	.+712    	; 0x13ec <Timer_enu_SetDutyCycleForPWM+0x31c>
    1124:	1b 86       	std	Y+11, r1	; 0x0b
    1126:	6d 81       	ldd	r22, Y+5	; 0x05
    1128:	7e 81       	ldd	r23, Y+6	; 0x06
    112a:	8f 81       	ldd	r24, Y+7	; 0x07
    112c:	98 85       	ldd	r25, Y+8	; 0x08
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e8       	ldi	r20, 0x80	; 128
    1134:	5f e3       	ldi	r21, 0x3F	; 63
    1136:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__lesf2>
    113a:	18 16       	cp	r1, r24
    113c:	14 f0       	brlt	.+4      	; 0x1142 <Timer_enu_SetDutyCycleForPWM+0x72>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	8b 87       	std	Y+11, r24	; 0x0b
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	9b 85       	ldd	r25, Y+11	; 0x0b
    1146:	89 27       	eor	r24, r25
    1148:	88 23       	and	r24, r24
    114a:	09 f0       	breq	.+2      	; 0x114e <Timer_enu_SetDutyCycleForPWM+0x7e>
    114c:	4f c1       	rjmp	.+670    	; 0x13ec <Timer_enu_SetDutyCycleForPWM+0x31c>
    {
        switch (Copy_u8_TimerNumber)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	e8 2f       	mov	r30, r24
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	fa 87       	std	Y+10, r31	; 0x0a
    1156:	e9 87       	std	Y+9, r30	; 0x09
    1158:	29 85       	ldd	r18, Y+9	; 0x09
    115a:	3a 85       	ldd	r19, Y+10	; 0x0a
    115c:	21 30       	cpi	r18, 0x01	; 1
    115e:	31 05       	cpc	r19, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <Timer_enu_SetDutyCycleForPWM+0x94>
    1162:	46 c1       	rjmp	.+652    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
    1164:	89 85       	ldd	r24, Y+9	; 0x09
    1166:	9a 85       	ldd	r25, Y+10	; 0x0a
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	91 05       	cpc	r25, r1
    116c:	09 f4       	brne	.+2      	; 0x1170 <Timer_enu_SetDutyCycleForPWM+0xa0>
    116e:	a0 c0       	rjmp	.+320    	; 0x12b0 <Timer_enu_SetDutyCycleForPWM+0x1e0>
    1170:	e9 85       	ldd	r30, Y+9	; 0x09
    1172:	fa 85       	ldd	r31, Y+10	; 0x0a
    1174:	30 97       	sbiw	r30, 0x00	; 0
    1176:	09 f0       	breq	.+2      	; 0x117a <Timer_enu_SetDutyCycleForPWM+0xaa>
    1178:	36 c1       	rjmp	.+620    	; 0x13e6 <Timer_enu_SetDutyCycleForPWM+0x316>
        {
            case TIMER_0:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	09 f0       	breq	.+2      	; 0x1182 <Timer_enu_SetDutyCycleForPWM+0xb2>
    1180:	43 c0       	rjmp	.+134    	; 0x1208 <Timer_enu_SetDutyCycleForPWM+0x138>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	86 30       	cpi	r24, 0x06	; 6
    1186:	c1 f4       	brne	.+48     	; 0x11b8 <Timer_enu_SetDutyCycleForPWM+0xe8>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = Copy_f32_DutyCyclePercentage*TIMER_TCNT0_TOP;
    1188:	0c e5       	ldi	r16, 0x5C	; 92
    118a:	10 e0       	ldi	r17, 0x00	; 0
    118c:	6d 81       	ldd	r22, Y+5	; 0x05
    118e:	7e 81       	ldd	r23, Y+6	; 0x06
    1190:	8f 81       	ldd	r24, Y+7	; 0x07
    1192:	98 85       	ldd	r25, Y+8	; 0x08
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	4f e7       	ldi	r20, 0x7F	; 127
    119a:	53 e4       	ldi	r21, 0x43	; 67
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	f8 01       	movw	r30, r16
    11b2:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	1c c1       	rjmp	.+568    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	87 30       	cpi	r24, 0x07	; 7
    11bc:	11 f5       	brne	.+68     	; 0x1202 <Timer_enu_SetDutyCycleForPWM+0x132>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP* (1 - Copy_f32_DutyCyclePercentage );
    11be:	0c e5       	ldi	r16, 0x5C	; 92
    11c0:	10 e0       	ldi	r17, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	80 e8       	ldi	r24, 0x80	; 128
    11c8:	9f e3       	ldi	r25, 0x3F	; 63
    11ca:	2d 81       	ldd	r18, Y+5	; 0x05
    11cc:	3e 81       	ldd	r19, Y+6	; 0x06
    11ce:	4f 81       	ldd	r20, Y+7	; 0x07
    11d0:	58 85       	ldd	r21, Y+8	; 0x08
    11d2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	53 e4       	ldi	r21, 0x43	; 67
    11e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	f8 01       	movw	r30, r16
    11fc:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    11fe:	19 82       	std	Y+1, r1	; 0x01
    1200:	f7 c0       	rjmp	.+494    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	f4 c0       	rjmp	.+488    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	09 f0       	breq	.+2      	; 0x1210 <Timer_enu_SetDutyCycleForPWM+0x140>
    120e:	4d c0       	rjmp	.+154    	; 0x12aa <Timer_enu_SetDutyCycleForPWM+0x1da>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	11 f5       	brne	.+68     	; 0x125a <Timer_enu_SetDutyCycleForPWM+0x18a>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1)) - 1;
    1216:	0c e5       	ldi	r16, 0x5C	; 92
    1218:	10 e0       	ldi	r17, 0x00	; 0
    121a:	6d 81       	ldd	r22, Y+5	; 0x05
    121c:	7e 81       	ldd	r23, Y+6	; 0x06
    121e:	8f 81       	ldd	r24, Y+7	; 0x07
    1220:	98 85       	ldd	r25, Y+8	; 0x08
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e8       	ldi	r20, 0x80	; 128
    1228:	53 e4       	ldi	r21, 0x43	; 67
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	bc 01       	movw	r22, r24
    1234:	cd 01       	movw	r24, r26
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	5f e3       	ldi	r21, 0x3F	; 63
    123e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	f8 01       	movw	r30, r16
    1254:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	cb c0       	rjmp	.+406    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	85 30       	cpi	r24, 0x05	; 5
    125e:	11 f5       	brne	.+68     	; 0x12a4 <Timer_enu_SetDutyCycleForPWM+0x1d4>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1));
    1260:	0c e5       	ldi	r16, 0x5C	; 92
    1262:	10 e0       	ldi	r17, 0x00	; 0
    1264:	6d 81       	ldd	r22, Y+5	; 0x05
    1266:	7e 81       	ldd	r23, Y+6	; 0x06
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	98 85       	ldd	r25, Y+8	; 0x08
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	53 ec       	ldi	r21, 0xC3	; 195
    1274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	bc 01       	movw	r22, r24
    127e:	cd 01       	movw	r24, r26
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	4f e7       	ldi	r20, 0x7F	; 127
    1286:	53 e4       	ldi	r21, 0x43	; 67
    1288:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	f8 01       	movw	r30, r16
    129e:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    12a0:	19 82       	std	Y+1, r1	; 0x01
    12a2:	a6 c0       	rjmp	.+332    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	a3 c0       	rjmp	.+326    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	a0 c0       	rjmp	.+320    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                break;
            }

            case TIMER_2:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <Timer_enu_SetDutyCycleForPWM+0x1e8>
    12b6:	43 c0       	rjmp	.+134    	; 0x133e <Timer_enu_SetDutyCycleForPWM+0x26e>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	86 30       	cpi	r24, 0x06	; 6
    12bc:	c1 f4       	brne	.+48     	; 0x12ee <Timer_enu_SetDutyCycleForPWM+0x21e>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = Copy_f32_DutyCyclePercentage*TIMER_TCNT2_TOP;
    12be:	03 e4       	ldi	r16, 0x43	; 67
    12c0:	10 e0       	ldi	r17, 0x00	; 0
    12c2:	6d 81       	ldd	r22, Y+5	; 0x05
    12c4:	7e 81       	ldd	r23, Y+6	; 0x06
    12c6:	8f 81       	ldd	r24, Y+7	; 0x07
    12c8:	98 85       	ldd	r25, Y+8	; 0x08
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	4f e7       	ldi	r20, 0x7F	; 127
    12d0:	53 e4       	ldi	r21, 0x43	; 67
    12d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	f8 01       	movw	r30, r16
    12e8:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    12ea:	19 82       	std	Y+1, r1	; 0x01
    12ec:	81 c0       	rjmp	.+258    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	87 30       	cpi	r24, 0x07	; 7
    12f2:	11 f5       	brne	.+68     	; 0x1338 <Timer_enu_SetDutyCycleForPWM+0x268>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP* (1 - Copy_f32_DutyCyclePercentage );
    12f4:	03 e4       	ldi	r16, 0x43	; 67
    12f6:	10 e0       	ldi	r17, 0x00	; 0
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	80 e8       	ldi	r24, 0x80	; 128
    12fe:	9f e3       	ldi	r25, 0x3F	; 63
    1300:	2d 81       	ldd	r18, Y+5	; 0x05
    1302:	3e 81       	ldd	r19, Y+6	; 0x06
    1304:	4f 81       	ldd	r20, Y+7	; 0x07
    1306:	58 85       	ldd	r21, Y+8	; 0x08
    1308:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	4f e7       	ldi	r20, 0x7F	; 127
    131a:	53 e4       	ldi	r21, 0x43	; 67
    131c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	f8 01       	movw	r30, r16
    1332:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1334:	19 82       	std	Y+1, r1	; 0x01
    1336:	5c c0       	rjmp	.+184    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	59 c0       	rjmp	.+178    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	09 f0       	breq	.+2      	; 0x1346 <Timer_enu_SetDutyCycleForPWM+0x276>
    1344:	4d c0       	rjmp	.+154    	; 0x13e0 <Timer_enu_SetDutyCycleForPWM+0x310>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	84 30       	cpi	r24, 0x04	; 4
    134a:	11 f5       	brne	.+68     	; 0x1390 <Timer_enu_SetDutyCycleForPWM+0x2c0>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1)) - 1;
    134c:	03 e4       	ldi	r16, 0x43	; 67
    134e:	10 e0       	ldi	r17, 0x00	; 0
    1350:	6d 81       	ldd	r22, Y+5	; 0x05
    1352:	7e 81       	ldd	r23, Y+6	; 0x06
    1354:	8f 81       	ldd	r24, Y+7	; 0x07
    1356:	98 85       	ldd	r25, Y+8	; 0x08
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	53 e4       	ldi	r21, 0x43	; 67
    1360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	bc 01       	movw	r22, r24
    136a:	cd 01       	movw	r24, r26
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e8       	ldi	r20, 0x80	; 128
    1372:	5f e3       	ldi	r21, 0x3F	; 63
    1374:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	f8 01       	movw	r30, r16
    138a:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    138c:	19 82       	std	Y+1, r1	; 0x01
    138e:	30 c0       	rjmp	.+96     	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	85 30       	cpi	r24, 0x05	; 5
    1394:	11 f5       	brne	.+68     	; 0x13da <Timer_enu_SetDutyCycleForPWM+0x30a>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1));
    1396:	03 e4       	ldi	r16, 0x43	; 67
    1398:	10 e0       	ldi	r17, 0x00	; 0
    139a:	6d 81       	ldd	r22, Y+5	; 0x05
    139c:	7e 81       	ldd	r23, Y+6	; 0x06
    139e:	8f 81       	ldd	r24, Y+7	; 0x07
    13a0:	98 85       	ldd	r25, Y+8	; 0x08
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e8       	ldi	r20, 0x80	; 128
    13a8:	53 ec       	ldi	r21, 0xC3	; 195
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	53 e4       	ldi	r21, 0x43	; 67
    13be:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	f8 01       	movw	r30, r16
    13d4:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    13d6:	19 82       	std	Y+1, r1	; 0x01
    13d8:	0b c0       	rjmp	.+22     	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	08 c0       	rjmp	.+16     	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	05 c0       	rjmp	.+10     	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
            }
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f2:	2c 96       	adiw	r28, 0x0c	; 12
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	08 95       	ret

00001408 <Timer_enu_ForceCompareMatch>:

extern ErrorState_t Timer_enu_ForceCompareMatch (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	00 d0       	rcall	.+0      	; 0x140e <Timer_enu_ForceCompareMatch+0x6>
    140e:	00 d0       	rcall	.+0      	; 0x1410 <Timer_enu_ForceCompareMatch+0x8>
    1410:	0f 92       	push	r0
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	8a 83       	std	Y+2, r24	; 0x02
    1418:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_TimerMode == TIMER_NORMAL) || (TIMER_CTC))
    {
        switch (Copy_u8_TimerNumber)
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	3d 83       	std	Y+5, r19	; 0x05
    1426:	2c 83       	std	Y+4, r18	; 0x04
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	9d 81       	ldd	r25, Y+5	; 0x05
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	91 05       	cpc	r25, r1
    1430:	e9 f0       	breq	.+58     	; 0x146c <Timer_enu_ForceCompareMatch+0x64>
    1432:	2c 81       	ldd	r18, Y+4	; 0x04
    1434:	3d 81       	ldd	r19, Y+5	; 0x05
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	69 f0       	breq	.+26     	; 0x1456 <Timer_enu_ForceCompareMatch+0x4e>
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	9d 81       	ldd	r25, Y+5	; 0x05
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	91 f4       	brne	.+36     	; 0x1468 <Timer_enu_ForceCompareMatch+0x60>
        {
            case TIMER_0:
            {
                //Bit contains 1
                TCCR0 |= (1 << TCCR0_FOC0);
    1444:	a3 e5       	ldi	r26, 0x53	; 83
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e3 e5       	ldi	r30, 0x53	; 83
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	80 68       	ori	r24, 0x80	; 128
    1450:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1452:	19 82       	std	Y+1, r1	; 0x01
    1454:	0b c0       	rjmp	.+22     	; 0x146c <Timer_enu_ForceCompareMatch+0x64>
                break;
            }
            case TIMER_2:
            {
                //Bit contains 1
                TCCR2 |= (1 << TCCR2_FOC2);
    1456:	a5 e4       	ldi	r26, 0x45	; 69
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e5 e4       	ldi	r30, 0x45	; 69
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 68       	ori	r24, 0x80	; 128
    1462:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1464:	19 82       	std	Y+1, r1	; 0x01
    1466:	02 c0       	rjmp	.+4      	; 0x146c <Timer_enu_ForceCompareMatch+0x64>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }
    return Local_u8_ErrorFlag;
    146c:	89 81       	ldd	r24, Y+1	; 0x01
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <Timer_enu_SetTimerMode>:

extern ErrorState_t Timer_enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_TimerMode)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <Timer_enu_SetTimerMode+0x6>
    1484:	0f 92       	push	r0
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	8a 83       	std	Y+2, r24	; 0x02
    148c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetTimerMode(Copy_u8_TimerNumber, Copy_TimerMode);
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	6b 81       	ldd	r22, Y+3	; 0x03
    1496:	0e 94 b6 0b 	call	0x176c	; 0x176c <enu_SetTimerMode>
    149a:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    149c:	89 81       	ldd	r24, Y+1	; 0x01
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <Timer_enu_SetCallBack>:

extern ErrorState_t Timer_enu_SetCallBack (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, void (*Copy_pfun_AppFunction)(void*), void* Copy_pvid_Parameters)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	29 97       	sbiw	r28, 0x09	; 9
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	8a 83       	std	Y+2, r24	; 0x02
    14c0:	6b 83       	std	Y+3, r22	; 0x03
    14c2:	5d 83       	std	Y+5, r21	; 0x05
    14c4:	4c 83       	std	Y+4, r20	; 0x04
    14c6:	3f 83       	std	Y+7, r19	; 0x07
    14c8:	2e 83       	std	Y+6, r18	; 0x06
    u8 Local_u8_ErrorFlag = ES_NOK;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pfun_AppFunction)
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <Timer_enu_SetCallBack+0x2e>
    14d6:	62 c0       	rjmp	.+196    	; 0x159c <Timer_enu_SetCallBack+0xf2>
    {
        switch (Copy_u8_TimerNumber)
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	39 87       	std	Y+9, r19	; 0x09
    14e0:	28 87       	std	Y+8, r18	; 0x08
    14e2:	88 85       	ldd	r24, Y+8	; 0x08
    14e4:	99 85       	ldd	r25, Y+9	; 0x09
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	91 05       	cpc	r25, r1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <Timer_enu_SetCallBack+0x44>
    14ec:	59 c0       	rjmp	.+178    	; 0x15a0 <Timer_enu_SetCallBack+0xf6>
    14ee:	28 85       	ldd	r18, Y+8	; 0x08
    14f0:	39 85       	ldd	r19, Y+9	; 0x09
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	51 f1       	breq	.+84     	; 0x154c <Timer_enu_SetCallBack+0xa2>
    14f8:	88 85       	ldd	r24, Y+8	; 0x08
    14fa:	99 85       	ldd	r25, Y+9	; 0x09
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	09 f0       	breq	.+2      	; 0x1502 <Timer_enu_SetCallBack+0x58>
    1500:	4a c0       	rjmp	.+148    	; 0x1596 <Timer_enu_SetCallBack+0xec>
        {
            case TIMER_0:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	88 23       	and	r24, r24
    1506:	71 f4       	brne	.+28     	; 0x1524 <Timer_enu_SetCallBack+0x7a>
                {
                    apfun_ISRpointers[TIMER_0_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	90 93 b7 01 	sts	0x01B7, r25
    1510:	80 93 b6 01 	sts	0x01B6, r24

                    apvid_ISRParameters[TIMER_0_OVERFLOW_ISR] = Copy_pvid_Parameters;
    1514:	8e 81       	ldd	r24, Y+6	; 0x06
    1516:	9f 81       	ldd	r25, Y+7	; 0x07
    1518:	90 93 c7 01 	sts	0x01C7, r25
    151c:	80 93 c6 01 	sts	0x01C6, r24

                    Local_u8_ErrorFlag = ES_OK;
    1520:	19 82       	std	Y+1, r1	; 0x01
    1522:	3e c0       	rjmp	.+124    	; 0x15a0 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	71 f4       	brne	.+28     	; 0x1546 <Timer_enu_SetCallBack+0x9c>
                {
                    apfun_ISRpointers[TIMER_0_CTC_ISR] = Copy_pfun_AppFunction;
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	9d 81       	ldd	r25, Y+5	; 0x05
    152e:	90 93 b5 01 	sts	0x01B5, r25
    1532:	80 93 b4 01 	sts	0x01B4, r24

                    apvid_ISRParameters[TIMER_0_CTC_ISR] = Copy_pvid_Parameters;
    1536:	8e 81       	ldd	r24, Y+6	; 0x06
    1538:	9f 81       	ldd	r25, Y+7	; 0x07
    153a:	90 93 c5 01 	sts	0x01C5, r25
    153e:	80 93 c4 01 	sts	0x01C4, r24

                    Local_u8_ErrorFlag = ES_OK;
    1542:	19 82       	std	Y+1, r1	; 0x01
    1544:	2d c0       	rjmp	.+90     	; 0x15a0 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	2a c0       	rjmp	.+84     	; 0x15a0 <Timer_enu_SetCallBack+0xf6>
                break;
            }

            case TIMER_2:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 23       	and	r24, r24
    1550:	71 f4       	brne	.+28     	; 0x156e <Timer_enu_SetCallBack+0xc4>
                {
                    apfun_ISRpointers[TIMER_2_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	90 93 ab 01 	sts	0x01AB, r25
    155a:	80 93 aa 01 	sts	0x01AA, r24

                    apvid_ISRParameters[TIMER_2_OVERFLOW_ISR] = Copy_pvid_Parameters;
    155e:	8e 81       	ldd	r24, Y+6	; 0x06
    1560:	9f 81       	ldd	r25, Y+7	; 0x07
    1562:	90 93 bb 01 	sts	0x01BB, r25
    1566:	80 93 ba 01 	sts	0x01BA, r24

                    Local_u8_ErrorFlag = ES_OK;
    156a:	19 82       	std	Y+1, r1	; 0x01
    156c:	19 c0       	rjmp	.+50     	; 0x15a0 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	71 f4       	brne	.+28     	; 0x1590 <Timer_enu_SetCallBack+0xe6>
                {
                    apfun_ISRpointers[TIMER_2_CTC_ISR] = Copy_pfun_AppFunction;
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	90 93 a9 01 	sts	0x01A9, r25
    157c:	80 93 a8 01 	sts	0x01A8, r24

                    apvid_ISRParameters[TIMER_2_CTC_ISR] = Copy_pvid_Parameters;
    1580:	8e 81       	ldd	r24, Y+6	; 0x06
    1582:	9f 81       	ldd	r25, Y+7	; 0x07
    1584:	90 93 b9 01 	sts	0x01B9, r25
    1588:	80 93 b8 01 	sts	0x01B8, r24

                    Local_u8_ErrorFlag = ES_OK;
    158c:	19 82       	std	Y+1, r1	; 0x01
    158e:	08 c0       	rjmp	.+16     	; 0x15a0 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <Timer_enu_SetCallBack+0xf6>

                break;
            }
            
            default:
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <Timer_enu_SetCallBack+0xf6>
            break;
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a2:	29 96       	adiw	r28, 0x09	; 9
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <__vector_4>:
void __vector_5 (void)__attribute__((signal));
void __vector_10 (void)__attribute__((signal));
void __vector_11 (void)__attribute__((signal));

void __vector_4 (void)
{
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    15de:	80 91 a8 01 	lds	r24, 0x01A8
    15e2:	90 91 a9 01 	lds	r25, 0x01A9
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	49 f0       	breq	.+18     	; 0x15fc <__vector_4+0x48>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    15ea:	e0 91 a8 01 	lds	r30, 0x01A8
    15ee:	f0 91 a9 01 	lds	r31, 0x01A9
    15f2:	80 91 b8 01 	lds	r24, 0x01B8
    15f6:	90 91 b9 01 	lds	r25, 0x01B9
    15fa:	09 95       	icall
    }
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	bf 91       	pop	r27
    1606:	af 91       	pop	r26
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	7f 91       	pop	r23
    160e:	6f 91       	pop	r22
    1610:	5f 91       	pop	r21
    1612:	4f 91       	pop	r20
    1614:	3f 91       	pop	r19
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	0f 90       	pop	r0
    161e:	1f 90       	pop	r1
    1620:	18 95       	reti

00001622 <__vector_5>:

void __vector_5 (void)
{
    1622:	1f 92       	push	r1
    1624:	0f 92       	push	r0
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	0f 92       	push	r0
    162a:	11 24       	eor	r1, r1
    162c:	2f 93       	push	r18
    162e:	3f 93       	push	r19
    1630:	4f 93       	push	r20
    1632:	5f 93       	push	r21
    1634:	6f 93       	push	r22
    1636:	7f 93       	push	r23
    1638:	8f 93       	push	r24
    163a:	9f 93       	push	r25
    163c:	af 93       	push	r26
    163e:	bf 93       	push	r27
    1640:	ef 93       	push	r30
    1642:	ff 93       	push	r31
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    164c:	80 91 a8 01 	lds	r24, 0x01A8
    1650:	90 91 a9 01 	lds	r25, 0x01A9
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	49 f0       	breq	.+18     	; 0x166a <__vector_5+0x48>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    1658:	e0 91 a8 01 	lds	r30, 0x01A8
    165c:	f0 91 a9 01 	lds	r31, 0x01A9
    1660:	80 91 b8 01 	lds	r24, 0x01B8
    1664:	90 91 b9 01 	lds	r25, 0x01B9
    1668:	09 95       	icall
    }
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	ff 91       	pop	r31
    1670:	ef 91       	pop	r30
    1672:	bf 91       	pop	r27
    1674:	af 91       	pop	r26
    1676:	9f 91       	pop	r25
    1678:	8f 91       	pop	r24
    167a:	7f 91       	pop	r23
    167c:	6f 91       	pop	r22
    167e:	5f 91       	pop	r21
    1680:	4f 91       	pop	r20
    1682:	3f 91       	pop	r19
    1684:	2f 91       	pop	r18
    1686:	0f 90       	pop	r0
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	0f 90       	pop	r0
    168c:	1f 90       	pop	r1
    168e:	18 95       	reti

00001690 <__vector_10>:

void __vector_10 (void)
{
    1690:	1f 92       	push	r1
    1692:	0f 92       	push	r0
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	0f 92       	push	r0
    1698:	11 24       	eor	r1, r1
    169a:	2f 93       	push	r18
    169c:	3f 93       	push	r19
    169e:	4f 93       	push	r20
    16a0:	5f 93       	push	r21
    16a2:	6f 93       	push	r22
    16a4:	7f 93       	push	r23
    16a6:	8f 93       	push	r24
    16a8:	9f 93       	push	r25
    16aa:	af 93       	push	r26
    16ac:	bf 93       	push	r27
    16ae:	ef 93       	push	r30
    16b0:	ff 93       	push	r31
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_CTC_ISR])
    16ba:	80 91 b4 01 	lds	r24, 0x01B4
    16be:	90 91 b5 01 	lds	r25, 0x01B5
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	49 f0       	breq	.+18     	; 0x16d8 <__vector_10+0x48>
    {
       apfun_ISRpointers[TIMER_0_CTC_ISR](apvid_ISRParameters[TIMER_0_CTC_ISR]);
    16c6:	e0 91 b4 01 	lds	r30, 0x01B4
    16ca:	f0 91 b5 01 	lds	r31, 0x01B5
    16ce:	80 91 c4 01 	lds	r24, 0x01C4
    16d2:	90 91 c5 01 	lds	r25, 0x01C5
    16d6:	09 95       	icall
    }
}
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	bf 91       	pop	r27
    16e2:	af 91       	pop	r26
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	7f 91       	pop	r23
    16ea:	6f 91       	pop	r22
    16ec:	5f 91       	pop	r21
    16ee:	4f 91       	pop	r20
    16f0:	3f 91       	pop	r19
    16f2:	2f 91       	pop	r18
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_11>:

void __vector_11 (void)
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	2f 93       	push	r18
    170a:	3f 93       	push	r19
    170c:	4f 93       	push	r20
    170e:	5f 93       	push	r21
    1710:	6f 93       	push	r22
    1712:	7f 93       	push	r23
    1714:	8f 93       	push	r24
    1716:	9f 93       	push	r25
    1718:	af 93       	push	r26
    171a:	bf 93       	push	r27
    171c:	ef 93       	push	r30
    171e:	ff 93       	push	r31
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_OVERFLOW_ISR])
    1728:	80 91 b6 01 	lds	r24, 0x01B6
    172c:	90 91 b7 01 	lds	r25, 0x01B7
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	49 f0       	breq	.+18     	; 0x1746 <__vector_11+0x48>
    {
        apfun_ISRpointers[TIMER_0_OVERFLOW_ISR](apvid_ISRParameters[TIMER_0_OVERFLOW_ISR]);
    1734:	e0 91 b6 01 	lds	r30, 0x01B6
    1738:	f0 91 b7 01 	lds	r31, 0x01B7
    173c:	80 91 c6 01 	lds	r24, 0x01C6
    1740:	90 91 c7 01 	lds	r25, 0x01C7
    1744:	09 95       	icall
    }
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <enu_SetTimerMode>:



//Local functions' implementation
static ErrorState_t enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	00 d0       	rcall	.+0      	; 0x1772 <enu_SetTimerMode+0x6>
    1772:	00 d0       	rcall	.+0      	; 0x1774 <enu_SetTimerMode+0x8>
    1774:	0f 92       	push	r0
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	8a 83       	std	Y+2, r24	; 0x02
    177c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	89 83       	std	Y+1, r24	; 0x01

    switch(Copy_u8_TimerNumber)
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	3d 83       	std	Y+5, r19	; 0x05
    178a:	2c 83       	std	Y+4, r18	; 0x04
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	91 05       	cpc	r25, r1
    1794:	09 f4       	brne	.+2      	; 0x1798 <enu_SetTimerMode+0x2c>
    1796:	ab c0       	rjmp	.+342    	; 0x18ee <enu_SetTimerMode+0x182>
    1798:	2c 81       	ldd	r18, Y+4	; 0x04
    179a:	3d 81       	ldd	r19, Y+5	; 0x05
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <enu_SetTimerMode+0x38>
    17a2:	54 c0       	rjmp	.+168    	; 0x184c <enu_SetTimerMode+0xe0>
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	09 f0       	breq	.+2      	; 0x17ae <enu_SetTimerMode+0x42>
    17ac:	9e c0       	rjmp	.+316    	; 0x18ea <enu_SetTimerMode+0x17e>
    {
        case TIMER_0:
        {

            if(Copy_u8_TimerMode == TIMER_NORMAL)
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	88 23       	and	r24, r24
    17b2:	81 f4       	brne	.+32     	; 0x17d4 <enu_SetTimerMode+0x68>
            {
                //Bits contain 00
                TCCR0 &= ~(1 << TCCR0_WGM00);
    17b4:	a3 e5       	ldi	r26, 0x53	; 83
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e3 e5       	ldi	r30, 0x53	; 83
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8f 7b       	andi	r24, 0xBF	; 191
    17c0:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    17c2:	a3 e5       	ldi	r26, 0x53	; 83
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e3 e5       	ldi	r30, 0x53	; 83
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	87 7f       	andi	r24, 0xF7	; 247
    17ce:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    17d0:	19 82       	std	Y+1, r1	; 0x01
    17d2:	8d c0       	rjmp	.+282    	; 0x18ee <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	81 f4       	brne	.+32     	; 0x17fa <enu_SetTimerMode+0x8e>
            {
                //Bits contain 01
                TCCR0 |= (1 << TCCR0_WGM00);
    17da:	a3 e5       	ldi	r26, 0x53	; 83
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e3 e5       	ldi	r30, 0x53	; 83
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 64       	ori	r24, 0x40	; 64
    17e6:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    17e8:	a3 e5       	ldi	r26, 0x53	; 83
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e3 e5       	ldi	r30, 0x53	; 83
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	87 7f       	andi	r24, 0xF7	; 247
    17f4:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    17f6:	19 82       	std	Y+1, r1	; 0x01
    17f8:	7a c0       	rjmp	.+244    	; 0x18ee <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	81 f4       	brne	.+32     	; 0x1820 <enu_SetTimerMode+0xb4>
            {
                //Bits contain 10
                TCCR0 &= ~(1 << TCCR0_WGM00);
    1800:	a3 e5       	ldi	r26, 0x53	; 83
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e3 e5       	ldi	r30, 0x53	; 83
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8f 7b       	andi	r24, 0xBF	; 191
    180c:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    180e:	a3 e5       	ldi	r26, 0x53	; 83
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e3 e5       	ldi	r30, 0x53	; 83
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	88 60       	ori	r24, 0x08	; 8
    181a:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    181c:	19 82       	std	Y+1, r1	; 0x01
    181e:	67 c0       	rjmp	.+206    	; 0x18ee <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	83 30       	cpi	r24, 0x03	; 3
    1824:	81 f4       	brne	.+32     	; 0x1846 <enu_SetTimerMode+0xda>
            {
                //Bits contain 11
                TCCR0 |= (1 << TCCR0_WGM00);
    1826:	a3 e5       	ldi	r26, 0x53	; 83
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e3 e5       	ldi	r30, 0x53	; 83
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 64       	ori	r24, 0x40	; 64
    1832:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    1834:	a3 e5       	ldi	r26, 0x53	; 83
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e3 e5       	ldi	r30, 0x53	; 83
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	88 60       	ori	r24, 0x08	; 8
    1840:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1842:	19 82       	std	Y+1, r1	; 0x01
    1844:	54 c0       	rjmp	.+168    	; 0x18ee <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	51 c0       	rjmp	.+162    	; 0x18ee <enu_SetTimerMode+0x182>
        break;
     
        case TIMER_2:
        {
            
            if(Copy_u8_TimerMode == TIMER_NORMAL)
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	88 23       	and	r24, r24
    1850:	81 f4       	brne	.+32     	; 0x1872 <enu_SetTimerMode+0x106>
            {
                //Bits contain 00
                TCCR2 &= ~(1 << TCCR2_WGM20);
    1852:	a5 e4       	ldi	r26, 0x45	; 69
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e5 e4       	ldi	r30, 0x45	; 69
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	8f 7b       	andi	r24, 0xBF	; 191
    185e:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    1860:	a5 e4       	ldi	r26, 0x45	; 69
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e5 e4       	ldi	r30, 0x45	; 69
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	87 7f       	andi	r24, 0xF7	; 247
    186c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    186e:	19 82       	std	Y+1, r1	; 0x01
    1870:	3e c0       	rjmp	.+124    	; 0x18ee <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	82 30       	cpi	r24, 0x02	; 2
    1876:	81 f4       	brne	.+32     	; 0x1898 <enu_SetTimerMode+0x12c>
            {
                //Bits contain 01
                TCCR2 |= (1 << TCCR2_WGM20);
    1878:	a5 e4       	ldi	r26, 0x45	; 69
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e5 e4       	ldi	r30, 0x45	; 69
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	80 64       	ori	r24, 0x40	; 64
    1884:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    1886:	a5 e4       	ldi	r26, 0x45	; 69
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e5 e4       	ldi	r30, 0x45	; 69
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	87 7f       	andi	r24, 0xF7	; 247
    1892:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1894:	19 82       	std	Y+1, r1	; 0x01
    1896:	2b c0       	rjmp	.+86     	; 0x18ee <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	81 f4       	brne	.+32     	; 0x18be <enu_SetTimerMode+0x152>
            {
                //Bits contain 10
                TCCR2 &= ~(1 << TCCR2_WGM20);
    189e:	a5 e4       	ldi	r26, 0x45	; 69
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e5 e4       	ldi	r30, 0x45	; 69
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	8f 7b       	andi	r24, 0xBF	; 191
    18aa:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    18ac:	a5 e4       	ldi	r26, 0x45	; 69
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e5 e4       	ldi	r30, 0x45	; 69
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	88 60       	ori	r24, 0x08	; 8
    18b8:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    18ba:	19 82       	std	Y+1, r1	; 0x01
    18bc:	18 c0       	rjmp	.+48     	; 0x18ee <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	83 30       	cpi	r24, 0x03	; 3
    18c2:	81 f4       	brne	.+32     	; 0x18e4 <enu_SetTimerMode+0x178>
            {
                //Bits contain 11
                TCCR2 |= (1 << TCCR2_WGM20);
    18c4:	a5 e4       	ldi	r26, 0x45	; 69
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e5 e4       	ldi	r30, 0x45	; 69
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	80 64       	ori	r24, 0x40	; 64
    18d0:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    18d2:	a5 e4       	ldi	r26, 0x45	; 69
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e5 e4       	ldi	r30, 0x45	; 69
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	88 60       	ori	r24, 0x08	; 8
    18de:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    18e0:	19 82       	std	Y+1, r1	; 0x01
    18e2:	05 c0       	rjmp	.+10     	; 0x18ee <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <enu_SetTimerMode+0x182>
        
     


        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <enu_SetClockSelection>:

static ErrorState_t enu_SetClockSelection(u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	29 97       	sbiw	r28, 0x09	; 9
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	8a 83       	std	Y+2, r24	; 0x02
    1916:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_TimerNumber)
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	39 87       	std	Y+9, r19	; 0x09
    1924:	28 87       	std	Y+8, r18	; 0x08
    1926:	88 85       	ldd	r24, Y+8	; 0x08
    1928:	99 85       	ldd	r25, Y+9	; 0x09
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	91 05       	cpc	r25, r1
    192e:	09 f4       	brne	.+2      	; 0x1932 <enu_SetClockSelection+0x32>
    1930:	03 c2       	rjmp	.+1030   	; 0x1d38 <enu_SetClockSelection+0x438>
    1932:	28 85       	ldd	r18, Y+8	; 0x08
    1934:	39 85       	ldd	r19, Y+9	; 0x09
    1936:	22 30       	cpi	r18, 0x02	; 2
    1938:	31 05       	cpc	r19, r1
    193a:	09 f4       	brne	.+2      	; 0x193e <enu_SetClockSelection+0x3e>
    193c:	00 c1       	rjmp	.+512    	; 0x1b3e <enu_SetClockSelection+0x23e>
    193e:	88 85       	ldd	r24, Y+8	; 0x08
    1940:	99 85       	ldd	r25, Y+9	; 0x09
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	09 f0       	breq	.+2      	; 0x1948 <enu_SetClockSelection+0x48>
    1946:	f6 c1       	rjmp	.+1004   	; 0x1d34 <enu_SetClockSelection+0x434>
    {
        case TIMER_0:
        {
            switch (Copy_u8_ClockSelection)
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3f 83       	std	Y+7, r19	; 0x07
    1950:	2e 83       	std	Y+6, r18	; 0x06
    1952:	8e 81       	ldd	r24, Y+6	; 0x06
    1954:	9f 81       	ldd	r25, Y+7	; 0x07
    1956:	84 30       	cpi	r24, 0x04	; 4
    1958:	91 05       	cpc	r25, r1
    195a:	09 f4       	brne	.+2      	; 0x195e <enu_SetClockSelection+0x5e>
    195c:	7a c0       	rjmp	.+244    	; 0x1a52 <enu_SetClockSelection+0x152>
    195e:	2e 81       	ldd	r18, Y+6	; 0x06
    1960:	3f 81       	ldd	r19, Y+7	; 0x07
    1962:	25 30       	cpi	r18, 0x05	; 5
    1964:	31 05       	cpc	r19, r1
    1966:	8c f4       	brge	.+34     	; 0x198a <enu_SetClockSelection+0x8a>
    1968:	8e 81       	ldd	r24, Y+6	; 0x06
    196a:	9f 81       	ldd	r25, Y+7	; 0x07
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	91 05       	cpc	r25, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <enu_SetClockSelection+0x74>
    1972:	41 c0       	rjmp	.+130    	; 0x19f6 <enu_SetClockSelection+0xf6>
    1974:	2e 81       	ldd	r18, Y+6	; 0x06
    1976:	3f 81       	ldd	r19, Y+7	; 0x07
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	09 f4       	brne	.+2      	; 0x1980 <enu_SetClockSelection+0x80>
    197e:	52 c0       	rjmp	.+164    	; 0x1a24 <enu_SetClockSelection+0x124>
    1980:	8e 81       	ldd	r24, Y+6	; 0x06
    1982:	9f 81       	ldd	r25, Y+7	; 0x07
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	01 f1       	breq	.+64     	; 0x19c8 <enu_SetClockSelection+0xc8>
    1988:	d7 c0       	rjmp	.+430    	; 0x1b38 <enu_SetClockSelection+0x238>
    198a:	2e 81       	ldd	r18, Y+6	; 0x06
    198c:	3f 81       	ldd	r19, Y+7	; 0x07
    198e:	27 30       	cpi	r18, 0x07	; 7
    1990:	31 05       	cpc	r19, r1
    1992:	09 f4       	brne	.+2      	; 0x1996 <enu_SetClockSelection+0x96>
    1994:	8c c0       	rjmp	.+280    	; 0x1aae <enu_SetClockSelection+0x1ae>
    1996:	8e 81       	ldd	r24, Y+6	; 0x06
    1998:	9f 81       	ldd	r25, Y+7	; 0x07
    199a:	88 30       	cpi	r24, 0x08	; 8
    199c:	91 05       	cpc	r25, r1
    199e:	3c f4       	brge	.+14     	; 0x19ae <enu_SetClockSelection+0xae>
    19a0:	2e 81       	ldd	r18, Y+6	; 0x06
    19a2:	3f 81       	ldd	r19, Y+7	; 0x07
    19a4:	26 30       	cpi	r18, 0x06	; 6
    19a6:	31 05       	cpc	r19, r1
    19a8:	09 f4       	brne	.+2      	; 0x19ac <enu_SetClockSelection+0xac>
    19aa:	6a c0       	rjmp	.+212    	; 0x1a80 <enu_SetClockSelection+0x180>
    19ac:	c5 c0       	rjmp	.+394    	; 0x1b38 <enu_SetClockSelection+0x238>
    19ae:	8e 81       	ldd	r24, Y+6	; 0x06
    19b0:	9f 81       	ldd	r25, Y+7	; 0x07
    19b2:	88 30       	cpi	r24, 0x08	; 8
    19b4:	91 05       	cpc	r25, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <enu_SetClockSelection+0xba>
    19b8:	91 c0       	rjmp	.+290    	; 0x1adc <enu_SetClockSelection+0x1dc>
    19ba:	2e 81       	ldd	r18, Y+6	; 0x06
    19bc:	3f 81       	ldd	r19, Y+7	; 0x07
    19be:	29 30       	cpi	r18, 0x09	; 9
    19c0:	31 05       	cpc	r19, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <enu_SetClockSelection+0xc6>
    19c4:	a2 c0       	rjmp	.+324    	; 0x1b0a <enu_SetClockSelection+0x20a>
    19c6:	b8 c0       	rjmp	.+368    	; 0x1b38 <enu_SetClockSelection+0x238>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR0 &= ~ (1 << TCCR0_CS00);
    19c8:	a3 e5       	ldi	r26, 0x53	; 83
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e3 e5       	ldi	r30, 0x53	; 83
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	8e 7f       	andi	r24, 0xFE	; 254
    19d4:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    19d6:	a3 e5       	ldi	r26, 0x53	; 83
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e3 e5       	ldi	r30, 0x53	; 83
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	8d 7f       	andi	r24, 0xFD	; 253
    19e2:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    19e4:	a3 e5       	ldi	r26, 0x53	; 83
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e3 e5       	ldi	r30, 0x53	; 83
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	8b 7f       	andi	r24, 0xFB	; 251
    19f0:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    19f2:	19 82       	std	Y+1, r1	; 0x01
    19f4:	a1 c1       	rjmp	.+834    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR0 |= (1 << TCCR0_CS00);
    19f6:	a3 e5       	ldi	r26, 0x53	; 83
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e3 e5       	ldi	r30, 0x53	; 83
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	81 60       	ori	r24, 0x01	; 1
    1a02:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1a04:	a3 e5       	ldi	r26, 0x53	; 83
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e3 e5       	ldi	r30, 0x53	; 83
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8d 7f       	andi	r24, 0xFD	; 253
    1a10:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1a12:	a3 e5       	ldi	r26, 0x53	; 83
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e3 e5       	ldi	r30, 0x53	; 83
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8b 7f       	andi	r24, 0xFB	; 251
    1a1e:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1a20:	19 82       	std	Y+1, r1	; 0x01
    1a22:	8a c1       	rjmp	.+788    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1a24:	a3 e5       	ldi	r26, 0x53	; 83
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e3 e5       	ldi	r30, 0x53	; 83
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	8e 7f       	andi	r24, 0xFE	; 254
    1a30:	8c 93       	st	X, r24
                    TCCR0 |= (1  << TCCR0_CS01);
    1a32:	a3 e5       	ldi	r26, 0x53	; 83
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e3 e5       	ldi	r30, 0x53	; 83
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	82 60       	ori	r24, 0x02	; 2
    1a3e:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS02);
    1a40:	a3 e5       	ldi	r26, 0x53	; 83
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e3 e5       	ldi	r30, 0x53	; 83
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	8b 7f       	andi	r24, 0xFB	; 251
    1a4c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1a4e:	19 82       	std	Y+1, r1	; 0x01
    1a50:	73 c1       	rjmp	.+742    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 011
                    TCCR0 |= (1 << TCCR0_CS00);
    1a52:	a3 e5       	ldi	r26, 0x53	; 83
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e3 e5       	ldi	r30, 0x53	; 83
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	81 60       	ori	r24, 0x01	; 1
    1a5e:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1a60:	a3 e5       	ldi	r26, 0x53	; 83
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e3 e5       	ldi	r30, 0x53	; 83
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	82 60       	ori	r24, 0x02	; 2
    1a6c:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1a6e:	a3 e5       	ldi	r26, 0x53	; 83
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e3 e5       	ldi	r30, 0x53	; 83
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	8b 7f       	andi	r24, 0xFB	; 251
    1a7a:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1a7c:	19 82       	std	Y+1, r1	; 0x01
    1a7e:	5c c1       	rjmp	.+696    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 100
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1a80:	a3 e5       	ldi	r26, 0x53	; 83
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e3 e5       	ldi	r30, 0x53	; 83
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8e 7f       	andi	r24, 0xFE	; 254
    1a8c:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS01);
    1a8e:	a3 e5       	ldi	r26, 0x53	; 83
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e3 e5       	ldi	r30, 0x53	; 83
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8d 7f       	andi	r24, 0xFD	; 253
    1a9a:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1a9c:	a3 e5       	ldi	r26, 0x53	; 83
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e3 e5       	ldi	r30, 0x53	; 83
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	84 60       	ori	r24, 0x04	; 4
    1aa8:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1aaa:	19 82       	std	Y+1, r1	; 0x01
    1aac:	45 c1       	rjmp	.+650    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 101
                    TCCR0 |= (1 << TCCR0_CS00);
    1aae:	a3 e5       	ldi	r26, 0x53	; 83
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e3 e5       	ldi	r30, 0x53	; 83
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	81 60       	ori	r24, 0x01	; 1
    1aba:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1abc:	a3 e5       	ldi	r26, 0x53	; 83
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e3 e5       	ldi	r30, 0x53	; 83
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	8d 7f       	andi	r24, 0xFD	; 253
    1ac8:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1aca:	a3 e5       	ldi	r26, 0x53	; 83
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e3 e5       	ldi	r30, 0x53	; 83
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	84 60       	ori	r24, 0x04	; 4
    1ad6:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1ad8:	19 82       	std	Y+1, r1	; 0x01
    1ada:	2e c1       	rjmp	.+604    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_FALLING_EGDE:
                {
                    //Bits contain 110
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1adc:	a3 e5       	ldi	r26, 0x53	; 83
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e3 e5       	ldi	r30, 0x53	; 83
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8e 7f       	andi	r24, 0xFE	; 254
    1ae8:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1aea:	a3 e5       	ldi	r26, 0x53	; 83
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e3 e5       	ldi	r30, 0x53	; 83
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	82 60       	ori	r24, 0x02	; 2
    1af6:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1af8:	a3 e5       	ldi	r26, 0x53	; 83
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e3 e5       	ldi	r30, 0x53	; 83
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	84 60       	ori	r24, 0x04	; 4
    1b04:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1b06:	19 82       	std	Y+1, r1	; 0x01
    1b08:	17 c1       	rjmp	.+558    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_RISING_EGDE:
                {
                    //Bits contain 111
                    TCCR0 |= (1 << TCCR0_CS00);
    1b0a:	a3 e5       	ldi	r26, 0x53	; 83
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e3 e5       	ldi	r30, 0x53	; 83
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	81 60       	ori	r24, 0x01	; 1
    1b16:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1b18:	a3 e5       	ldi	r26, 0x53	; 83
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e3 e5       	ldi	r30, 0x53	; 83
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	82 60       	ori	r24, 0x02	; 2
    1b24:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1b26:	a3 e5       	ldi	r26, 0x53	; 83
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e3 e5       	ldi	r30, 0x53	; 83
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	84 60       	ori	r24, 0x04	; 4
    1b32:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1b34:	19 82       	std	Y+1, r1	; 0x01
    1b36:	00 c1       	rjmp	.+512    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	fd c0       	rjmp	.+506    	; 0x1d38 <enu_SetClockSelection+0x438>
    
        case TIMER_2:
        {
            //Choosing I/O clock each time 
            //Bit contains 0
            ASSR &= ~( 1 << ASSR_AS2);
    1b3e:	a2 e4       	ldi	r26, 0x42	; 66
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e2 e4       	ldi	r30, 0x42	; 66
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	87 7f       	andi	r24, 0xF7	; 247
    1b4a:	8c 93       	st	X, r24
            
            switch (Copy_u8_ClockSelection)
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	3d 83       	std	Y+5, r19	; 0x05
    1b54:	2c 83       	std	Y+4, r18	; 0x04
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5a:	83 30       	cpi	r24, 0x03	; 3
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <enu_SetClockSelection+0x262>
    1b60:	73 c0       	rjmp	.+230    	; 0x1c48 <enu_SetClockSelection+0x348>
    1b62:	2c 81       	ldd	r18, Y+4	; 0x04
    1b64:	3d 81       	ldd	r19, Y+5	; 0x05
    1b66:	24 30       	cpi	r18, 0x04	; 4
    1b68:	31 05       	cpc	r19, r1
    1b6a:	84 f4       	brge	.+32     	; 0x1b8c <enu_SetClockSelection+0x28c>
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	91 05       	cpc	r25, r1
    1b74:	d9 f1       	breq	.+118    	; 0x1bec <enu_SetClockSelection+0x2ec>
    1b76:	2c 81       	ldd	r18, Y+4	; 0x04
    1b78:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7a:	22 30       	cpi	r18, 0x02	; 2
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	0c f0       	brlt	.+2      	; 0x1b82 <enu_SetClockSelection+0x282>
    1b80:	4c c0       	rjmp	.+152    	; 0x1c1a <enu_SetClockSelection+0x31a>
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	d1 f0       	breq	.+52     	; 0x1bbe <enu_SetClockSelection+0x2be>
    1b8a:	d1 c0       	rjmp	.+418    	; 0x1d2e <enu_SetClockSelection+0x42e>
    1b8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b90:	25 30       	cpi	r18, 0x05	; 5
    1b92:	31 05       	cpc	r19, r1
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <enu_SetClockSelection+0x298>
    1b96:	86 c0       	rjmp	.+268    	; 0x1ca4 <enu_SetClockSelection+0x3a4>
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9c:	85 30       	cpi	r24, 0x05	; 5
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	0c f4       	brge	.+2      	; 0x1ba4 <enu_SetClockSelection+0x2a4>
    1ba2:	69 c0       	rjmp	.+210    	; 0x1c76 <enu_SetClockSelection+0x376>
    1ba4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba8:	26 30       	cpi	r18, 0x06	; 6
    1baa:	31 05       	cpc	r19, r1
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <enu_SetClockSelection+0x2b0>
    1bae:	91 c0       	rjmp	.+290    	; 0x1cd2 <enu_SetClockSelection+0x3d2>
    1bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb4:	87 30       	cpi	r24, 0x07	; 7
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <enu_SetClockSelection+0x2bc>
    1bba:	a2 c0       	rjmp	.+324    	; 0x1d00 <enu_SetClockSelection+0x400>
    1bbc:	b8 c0       	rjmp	.+368    	; 0x1d2e <enu_SetClockSelection+0x42e>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR2 &= ~ (1 << TCCR2_CS20);
    1bbe:	a5 e4       	ldi	r26, 0x45	; 69
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e5 e4       	ldi	r30, 0x45	; 69
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8e 7f       	andi	r24, 0xFE	; 254
    1bca:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1bcc:	a5 e4       	ldi	r26, 0x45	; 69
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e5 e4       	ldi	r30, 0x45	; 69
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8d 7f       	andi	r24, 0xFD	; 253
    1bd8:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1bda:	a5 e4       	ldi	r26, 0x45	; 69
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e5 e4       	ldi	r30, 0x45	; 69
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8b 7f       	andi	r24, 0xFB	; 251
    1be6:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1be8:	19 82       	std	Y+1, r1	; 0x01
    1bea:	a6 c0       	rjmp	.+332    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR2 |= (1 << TCCR2_CS20);
    1bec:	a5 e4       	ldi	r26, 0x45	; 69
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e5 e4       	ldi	r30, 0x45	; 69
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	81 60       	ori	r24, 0x01	; 1
    1bf8:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1bfa:	a5 e4       	ldi	r26, 0x45	; 69
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e5 e4       	ldi	r30, 0x45	; 69
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8d 7f       	andi	r24, 0xFD	; 253
    1c06:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1c08:	a5 e4       	ldi	r26, 0x45	; 69
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e5 e4       	ldi	r30, 0x45	; 69
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8b 7f       	andi	r24, 0xFB	; 251
    1c14:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1c16:	19 82       	std	Y+1, r1	; 0x01
    1c18:	8f c0       	rjmp	.+286    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1c1a:	a5 e4       	ldi	r26, 0x45	; 69
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e5 e4       	ldi	r30, 0x45	; 69
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8e 7f       	andi	r24, 0xFE	; 254
    1c26:	8c 93       	st	X, r24
                    TCCR2 |= (1  << TCCR2_CS21);
    1c28:	a5 e4       	ldi	r26, 0x45	; 69
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e5 e4       	ldi	r30, 0x45	; 69
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	82 60       	ori	r24, 0x02	; 2
    1c34:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS22);
    1c36:	a5 e4       	ldi	r26, 0x45	; 69
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e5 e4       	ldi	r30, 0x45	; 69
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8b 7f       	andi	r24, 0xFB	; 251
    1c42:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c44:	19 82       	std	Y+1, r1	; 0x01
    1c46:	78 c0       	rjmp	.+240    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_32:
                {
                    //Bits contain 011
                    TCCR2 |= (1 << TCCR2_CS20);
    1c48:	a5 e4       	ldi	r26, 0x45	; 69
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e5 e4       	ldi	r30, 0x45	; 69
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	81 60       	ori	r24, 0x01	; 1
    1c54:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1c56:	a5 e4       	ldi	r26, 0x45	; 69
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e5 e4       	ldi	r30, 0x45	; 69
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	82 60       	ori	r24, 0x02	; 2
    1c62:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1c64:	a5 e4       	ldi	r26, 0x45	; 69
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e5 e4       	ldi	r30, 0x45	; 69
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8b 7f       	andi	r24, 0xFB	; 251
    1c70:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c72:	19 82       	std	Y+1, r1	; 0x01
    1c74:	61 c0       	rjmp	.+194    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 100
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1c76:	a5 e4       	ldi	r26, 0x45	; 69
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e5 e4       	ldi	r30, 0x45	; 69
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	8e 7f       	andi	r24, 0xFE	; 254
    1c82:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS21);
    1c84:	a5 e4       	ldi	r26, 0x45	; 69
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e5 e4       	ldi	r30, 0x45	; 69
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8d 7f       	andi	r24, 0xFD	; 253
    1c90:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1c92:	a5 e4       	ldi	r26, 0x45	; 69
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e5 e4       	ldi	r30, 0x45	; 69
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	84 60       	ori	r24, 0x04	; 4
    1c9e:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1ca0:	19 82       	std	Y+1, r1	; 0x01
    1ca2:	4a c0       	rjmp	.+148    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_128:
                {
                    //Bits contain 101
                    TCCR2 |= (1 << TCCR2_CS20);
    1ca4:	a5 e4       	ldi	r26, 0x45	; 69
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e5 e4       	ldi	r30, 0x45	; 69
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	81 60       	ori	r24, 0x01	; 1
    1cb0:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1cb2:	a5 e4       	ldi	r26, 0x45	; 69
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e5 e4       	ldi	r30, 0x45	; 69
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	8d 7f       	andi	r24, 0xFD	; 253
    1cbe:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1cc0:	a5 e4       	ldi	r26, 0x45	; 69
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e5 e4       	ldi	r30, 0x45	; 69
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	84 60       	ori	r24, 0x04	; 4
    1ccc:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1cce:	19 82       	std	Y+1, r1	; 0x01
    1cd0:	33 c0       	rjmp	.+102    	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 110
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1cd2:	a5 e4       	ldi	r26, 0x45	; 69
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e5 e4       	ldi	r30, 0x45	; 69
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	8e 7f       	andi	r24, 0xFE	; 254
    1cde:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1ce0:	a5 e4       	ldi	r26, 0x45	; 69
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e5 e4       	ldi	r30, 0x45	; 69
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	82 60       	ori	r24, 0x02	; 2
    1cec:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1cee:	a5 e4       	ldi	r26, 0x45	; 69
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e5 e4       	ldi	r30, 0x45	; 69
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	84 60       	ori	r24, 0x04	; 4
    1cfa:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1cfc:	19 82       	std	Y+1, r1	; 0x01
    1cfe:	1c c0       	rjmp	.+56     	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 111
                    TCCR2 |= (1 << TCCR2_CS20);
    1d00:	a5 e4       	ldi	r26, 0x45	; 69
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e5 e4       	ldi	r30, 0x45	; 69
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	81 60       	ori	r24, 0x01	; 1
    1d0c:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1d0e:	a5 e4       	ldi	r26, 0x45	; 69
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e5 e4       	ldi	r30, 0x45	; 69
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	82 60       	ori	r24, 0x02	; 2
    1d1a:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1d1c:	a5 e4       	ldi	r26, 0x45	; 69
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e5 e4       	ldi	r30, 0x45	; 69
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	84 60       	ori	r24, 0x04	; 4
    1d28:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1d2a:	19 82       	std	Y+1, r1	; 0x01
    1d2c:	05 c0       	rjmp	.+10     	; 0x1d38 <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <enu_SetClockSelection+0x438>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d34:	82 e0       	ldi	r24, 0x02	; 2
    1d36:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return Local_u8_ErrorFlag;
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d3a:	29 96       	adiw	r28, 0x09	; 9
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <enu_SetInterruptMode>:

static ErrorState_t enu_SetInterruptMode(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_InterruptMode)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <enu_SetInterruptMode+0x6>
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <enu_SetInterruptMode+0x8>
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <enu_SetInterruptMode+0xa>
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	8a 83       	std	Y+2, r24	; 0x02
    1d5c:	6b 83       	std	Y+3, r22	; 0x03
    1d5e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_TimerNumber)
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	3e 83       	std	Y+6, r19	; 0x06
    1d6c:	2d 83       	std	Y+5, r18	; 0x05
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <enu_SetInterruptMode+0x2e>
    1d78:	78 c0       	rjmp	.+240    	; 0x1e6a <enu_SetInterruptMode+0x11e>
    1d7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	a9 f1       	breq	.+106    	; 0x1dee <enu_SetInterruptMode+0xa2>
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <enu_SetInterruptMode+0x42>
    1d8c:	6e c0       	rjmp	.+220    	; 0x1e6a <enu_SetInterruptMode+0x11e>
    {
        case TIMER_0:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	88 23       	and	r24, r24
    1d92:	89 f4       	brne	.+34     	; 0x1db6 <enu_SetInterruptMode+0x6a>
            {
                //Clearing bit 0 (TOIE0)
                TIMSK &= (0xFE);
    1d94:	a9 e5       	ldi	r26, 0x59	; 89
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e9 e5       	ldi	r30, 0x59	; 89
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8e 7f       	andi	r24, 0xFE	; 254
    1da0:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE0);
    1da2:	a9 e5       	ldi	r26, 0x59	; 89
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e9 e5       	ldi	r30, 0x59	; 89
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	90 81       	ld	r25, Z
    1dac:	8c 81       	ldd	r24, Y+4	; 0x04
    1dae:	89 2b       	or	r24, r25
    1db0:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1db2:	19 82       	std	Y+1, r1	; 0x01
    1db4:	5a c0       	rjmp	.+180    	; 0x1e6a <enu_SetInterruptMode+0x11e>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	b1 f4       	brne	.+44     	; 0x1de8 <enu_SetInterruptMode+0x9c>
            {
                //Clearing bit 1 (OCIE0)
                TIMSK &= (0xFD);
    1dbc:	a9 e5       	ldi	r26, 0x59	; 89
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e9 e5       	ldi	r30, 0x59	; 89
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8d 7f       	andi	r24, 0xFD	; 253
    1dc8:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE0);
    1dca:	a9 e5       	ldi	r26, 0x59	; 89
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e9 e5       	ldi	r30, 0x59	; 89
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	82 2b       	or	r24, r18
    1de2:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	41 c0       	rjmp	.+130    	; 0x1e6a <enu_SetInterruptMode+0x11e>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	3e c0       	rjmp	.+124    	; 0x1e6a <enu_SetInterruptMode+0x11e>
            break;
        }

        case TIMER_2:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	88 23       	and	r24, r24
    1df2:	e9 f4       	brne	.+58     	; 0x1e2e <enu_SetInterruptMode+0xe2>
            {
                //Clearing bit 6 (TOIE2)
                TIMSK &= (0xBF);
    1df4:	a9 e5       	ldi	r26, 0x59	; 89
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e9 e5       	ldi	r30, 0x59	; 89
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	8f 7b       	andi	r24, 0xBF	; 191
    1e00:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE2);
    1e02:	a9 e5       	ldi	r26, 0x59	; 89
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e9 e5       	ldi	r30, 0x59	; 89
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e10:	88 2f       	mov	r24, r24
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	00 24       	eor	r0, r0
    1e16:	96 95       	lsr	r25
    1e18:	87 95       	ror	r24
    1e1a:	07 94       	ror	r0
    1e1c:	96 95       	lsr	r25
    1e1e:	87 95       	ror	r24
    1e20:	07 94       	ror	r0
    1e22:	98 2f       	mov	r25, r24
    1e24:	80 2d       	mov	r24, r0
    1e26:	82 2b       	or	r24, r18
    1e28:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1e2a:	19 82       	std	Y+1, r1	; 0x01
    1e2c:	1e c0       	rjmp	.+60     	; 0x1e6a <enu_SetInterruptMode+0x11e>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	c9 f4       	brne	.+50     	; 0x1e66 <enu_SetInterruptMode+0x11a>
            {
                //Clearing bit 7 (OCIE2)
                TIMSK &= (0x7F);
    1e34:	a9 e5       	ldi	r26, 0x59	; 89
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e9 e5       	ldi	r30, 0x59	; 89
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8f 77       	andi	r24, 0x7F	; 127
    1e40:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE2);
    1e42:	a9 e5       	ldi	r26, 0x59	; 89
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e9 e5       	ldi	r30, 0x59	; 89
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	96 95       	lsr	r25
    1e56:	98 2f       	mov	r25, r24
    1e58:	88 27       	eor	r24, r24
    1e5a:	97 95       	ror	r25
    1e5c:	87 95       	ror	r24
    1e5e:	82 2b       	or	r24, r18
    1e60:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1e62:	19 82       	std	Y+1, r1	; 0x01
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <enu_SetInterruptMode+0x11e>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e66:	82 e0       	ldi	r24, 0x02	; 2
    1e68:	89 83       	std	Y+1, r24	; 0x01
        Local_u8_ErrorFlag - ES_OUT_OF_RANGE;
        break;
    }


    return Local_u8_ErrorFlag;
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e6c:	26 96       	adiw	r28, 0x06	; 6
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <enu_SetOCxBehavior>:

static ErrorState_t enu_SetOCxBehavior(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_OCxPinBehavior)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <enu_SetOCxBehavior+0x6>
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <enu_SetOCxBehavior+0x8>
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <enu_SetOCxBehavior+0xa>
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	8a 83       	std	Y+2, r24	; 0x02
    1e8e:	6b 83       	std	Y+3, r22	; 0x03
    1e90:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	3e 83       	std	Y+6, r19	; 0x06
    1e9e:	2d 83       	std	Y+5, r18	; 0x05
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <enu_SetOCxBehavior+0x2e>
    1eaa:	d3 c0       	rjmp	.+422    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
    1eac:	2d 81       	ldd	r18, Y+5	; 0x05
    1eae:	3e 81       	ldd	r19, Y+6	; 0x06
    1eb0:	22 30       	cpi	r18, 0x02	; 2
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <enu_SetOCxBehavior+0x3a>
    1eb6:	68 c0       	rjmp	.+208    	; 0x1f88 <enu_SetOCxBehavior+0x10a>
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <enu_SetOCxBehavior+0x44>
    1ec0:	c6 c0       	rjmp	.+396    	; 0x204e <enu_SetOCxBehavior+0x1d0>
    {
        case TIMER_0:
        {   
            //Clearing bits 5 and 4
            TCCR0 &= (0xCF);
    1ec2:	a3 e5       	ldi	r26, 0x53	; 83
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e3 e5       	ldi	r30, 0x53	; 83
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	8f 7c       	andi	r24, 0xCF	; 207
    1ece:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    1ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed2:	88 23       	and	r24, r24
    1ed4:	11 f4       	brne	.+4      	; 0x1eda <enu_SetOCxBehavior+0x5c>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    1ed6:	19 82       	std	Y+1, r1	; 0x01
    1ed8:	bc c0       	rjmp	.+376    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	88 23       	and	r24, r24
    1ede:	19 f0       	breq	.+6      	; 0x1ee6 <enu_SetOCxBehavior+0x68>
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	39 f5       	brne	.+78     	; 0x1f34 <enu_SetOCxBehavior+0xb6>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    1ee6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	49 f4       	brne	.+18     	; 0x1efe <enu_SetOCxBehavior+0x80>
                {
                    //Bits contain 01
                    TCCR0 |= (1 << TCCR0_COM00);
    1eec:	a3 e5       	ldi	r26, 0x53	; 83
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e3 e5       	ldi	r30, 0x53	; 83
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 61       	ori	r24, 0x10	; 16
    1ef8:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1efa:	19 82       	std	Y+1, r1	; 0x01
    1efc:	aa c0       	rjmp	.+340    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
    1f00:	82 30       	cpi	r24, 0x02	; 2
    1f02:	49 f4       	brne	.+18     	; 0x1f16 <enu_SetOCxBehavior+0x98>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    1f04:	a3 e5       	ldi	r26, 0x53	; 83
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e3 e5       	ldi	r30, 0x53	; 83
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	80 62       	ori	r24, 0x20	; 32
    1f10:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1f12:	19 82       	std	Y+1, r1	; 0x01
    1f14:	9e c0       	rjmp	.+316    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
    1f18:	83 30       	cpi	r24, 0x03	; 3
    1f1a:	49 f4       	brne	.+18     	; 0x1f2e <enu_SetOCxBehavior+0xb0>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    1f1c:	a3 e5       	ldi	r26, 0x53	; 83
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e3 e5       	ldi	r30, 0x53	; 83
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	80 63       	ori	r24, 0x30	; 48
    1f28:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1f2a:	19 82       	std	Y+1, r1	; 0x01
    1f2c:	92 c0       	rjmp	.+292    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	8f c0       	rjmp	.+286    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	82 30       	cpi	r24, 0x02	; 2
    1f38:	19 f0       	breq	.+6      	; 0x1f40 <enu_SetOCxBehavior+0xc2>
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	83 30       	cpi	r24, 0x03	; 3
    1f3e:	09 f5       	brne	.+66     	; 0x1f82 <enu_SetOCxBehavior+0x104>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	84 30       	cpi	r24, 0x04	; 4
    1f44:	19 f0       	breq	.+6      	; 0x1f4c <enu_SetOCxBehavior+0xce>
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	86 30       	cpi	r24, 0x06	; 6
    1f4a:	49 f4       	brne	.+18     	; 0x1f5e <enu_SetOCxBehavior+0xe0>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    1f4c:	a3 e5       	ldi	r26, 0x53	; 83
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e3 e5       	ldi	r30, 0x53	; 83
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	80 62       	ori	r24, 0x20	; 32
    1f58:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1f5a:	19 82       	std	Y+1, r1	; 0x01
    1f5c:	7a c0       	rjmp	.+244    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	85 30       	cpi	r24, 0x05	; 5
    1f62:	19 f0       	breq	.+6      	; 0x1f6a <enu_SetOCxBehavior+0xec>
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	87 30       	cpi	r24, 0x07	; 7
    1f68:	49 f4       	brne	.+18     	; 0x1f7c <enu_SetOCxBehavior+0xfe>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    1f6a:	a3 e5       	ldi	r26, 0x53	; 83
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e3 e5       	ldi	r30, 0x53	; 83
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	80 63       	ori	r24, 0x30	; 48
    1f76:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1f78:	19 82       	std	Y+1, r1	; 0x01
    1f7a:	6b c0       	rjmp	.+214    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	68 c0       	rjmp	.+208    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	65 c0       	rjmp	.+202    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
        
        case TIMER_2:
        {
            
            //Clearing bits 5 and 4
            TCCR2 &= (0xCF);
    1f88:	a5 e4       	ldi	r26, 0x45	; 69
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e5 e4       	ldi	r30, 0x45	; 69
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	8f 7c       	andi	r24, 0xCF	; 207
    1f94:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    1f96:	8c 81       	ldd	r24, Y+4	; 0x04
    1f98:	88 23       	and	r24, r24
    1f9a:	11 f4       	brne	.+4      	; 0x1fa0 <enu_SetOCxBehavior+0x122>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    1f9c:	19 82       	std	Y+1, r1	; 0x01
    1f9e:	59 c0       	rjmp	.+178    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	88 23       	and	r24, r24
    1fa4:	19 f0       	breq	.+6      	; 0x1fac <enu_SetOCxBehavior+0x12e>
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	81 30       	cpi	r24, 0x01	; 1
    1faa:	39 f5       	brne	.+78     	; 0x1ffa <enu_SetOCxBehavior+0x17c>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	49 f4       	brne	.+18     	; 0x1fc4 <enu_SetOCxBehavior+0x146>
                {
                    //Bits contain 01
                    TCCR2 |= (1 << TCCR2_COM20);
    1fb2:	a5 e4       	ldi	r26, 0x45	; 69
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e5 e4       	ldi	r30, 0x45	; 69
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 61       	ori	r24, 0x10	; 16
    1fbe:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1fc0:	19 82       	std	Y+1, r1	; 0x01
    1fc2:	47 c0       	rjmp	.+142    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    1fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc6:	82 30       	cpi	r24, 0x02	; 2
    1fc8:	49 f4       	brne	.+18     	; 0x1fdc <enu_SetOCxBehavior+0x15e>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    1fca:	a5 e4       	ldi	r26, 0x45	; 69
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e5 e4       	ldi	r30, 0x45	; 69
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	80 62       	ori	r24, 0x20	; 32
    1fd6:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1fd8:	19 82       	std	Y+1, r1	; 0x01
    1fda:	3b c0       	rjmp	.+118    	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    1fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fde:	83 30       	cpi	r24, 0x03	; 3
    1fe0:	49 f4       	brne	.+18     	; 0x1ff4 <enu_SetOCxBehavior+0x176>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    1fe2:	a5 e4       	ldi	r26, 0x45	; 69
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e5 e4       	ldi	r30, 0x45	; 69
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	80 63       	ori	r24, 0x30	; 48
    1fee:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1ff0:	19 82       	std	Y+1, r1	; 0x01
    1ff2:	2f c0       	rjmp	.+94     	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	2c c0       	rjmp	.+88     	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	82 30       	cpi	r24, 0x02	; 2
    1ffe:	19 f0       	breq	.+6      	; 0x2006 <enu_SetOCxBehavior+0x188>
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	83 30       	cpi	r24, 0x03	; 3
    2004:	09 f5       	brne	.+66     	; 0x2048 <enu_SetOCxBehavior+0x1ca>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	84 30       	cpi	r24, 0x04	; 4
    200a:	19 f0       	breq	.+6      	; 0x2012 <enu_SetOCxBehavior+0x194>
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	86 30       	cpi	r24, 0x06	; 6
    2010:	49 f4       	brne	.+18     	; 0x2024 <enu_SetOCxBehavior+0x1a6>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    2012:	a5 e4       	ldi	r26, 0x45	; 69
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e5 e4       	ldi	r30, 0x45	; 69
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	80 62       	ori	r24, 0x20	; 32
    201e:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2020:	19 82       	std	Y+1, r1	; 0x01
    2022:	17 c0       	rjmp	.+46     	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    2024:	8c 81       	ldd	r24, Y+4	; 0x04
    2026:	85 30       	cpi	r24, 0x05	; 5
    2028:	19 f0       	breq	.+6      	; 0x2030 <enu_SetOCxBehavior+0x1b2>
    202a:	8c 81       	ldd	r24, Y+4	; 0x04
    202c:	87 30       	cpi	r24, 0x07	; 7
    202e:	49 f4       	brne	.+18     	; 0x2042 <enu_SetOCxBehavior+0x1c4>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    2030:	a5 e4       	ldi	r26, 0x45	; 69
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e5 e4       	ldi	r30, 0x45	; 69
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	80 63       	ori	r24, 0x30	; 48
    203c:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    203e:	19 82       	std	Y+1, r1	; 0x01
    2040:	08 c0       	rjmp	.+16     	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	05 c0       	rjmp	.+10     	; 0x2052 <enu_SetOCxBehavior+0x1d4>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <enu_SetOCxBehavior+0x1d4>
            }
            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	26 96       	adiw	r28, 0x06	; 6
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
    206e:	78 94       	sei
}
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
    207e:	f8 94       	cli

    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <EXTI_enu_Initialization+0x6>
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    2094:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    2096:	19 82       	std	Y+1, r1	; 0x01
    2098:	3b c0       	rjmp	.+118    	; 0x2110 <EXTI_enu_Initialization+0x8a>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	c9 01       	movw	r24, r18
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	82 0f       	add	r24, r18
    20a8:	93 1f       	adc	r25, r19
    20aa:	fc 01       	movw	r30, r24
    20ac:	ec 58       	subi	r30, 0x8C	; 140
    20ae:	fe 4f       	sbci	r31, 0xFE	; 254
    20b0:	40 81       	ld	r20, Z
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	c9 01       	movw	r24, r18
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	82 0f       	add	r24, r18
    20c0:	93 1f       	adc	r25, r19
    20c2:	fc 01       	movw	r30, r24
    20c4:	eb 58       	subi	r30, 0x8B	; 139
    20c6:	fe 4f       	sbci	r31, 0xFE	; 254
    20c8:	90 81       	ld	r25, Z
    20ca:	84 2f       	mov	r24, r20
    20cc:	69 2f       	mov	r22, r25
    20ce:	0e 94 05 12 	call	0x240a	; 0x240a <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	c9 01       	movw	r24, r18
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	82 0f       	add	r24, r18
    20e0:	93 1f       	adc	r25, r19
    20e2:	fc 01       	movw	r30, r24
    20e4:	ec 58       	subi	r30, 0x8C	; 140
    20e6:	fe 4f       	sbci	r31, 0xFE	; 254
    20e8:	40 81       	ld	r20, Z
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	c9 01       	movw	r24, r18
    20f2:	88 0f       	add	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	82 0f       	add	r24, r18
    20f8:	93 1f       	adc	r25, r19
    20fa:	fc 01       	movw	r30, r24
    20fc:	ea 58       	subi	r30, 0x8A	; 138
    20fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2100:	90 81       	ld	r25, Z
    2102:	84 2f       	mov	r24, r20
    2104:	69 2f       	mov	r22, r25
    2106:	0e 94 80 12 	call	0x2500	; 0x2500 <enu_SetSenseLevel>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	8f 5f       	subi	r24, 0xFF	; 255
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	90 91 73 01 	lds	r25, 0x0173
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	89 17       	cp	r24, r25
    2118:	08 f4       	brcc	.+2      	; 0x211c <EXTI_enu_Initialization+0x96>
    211a:	bf cf       	rjmp	.-130    	; 0x209a <EXTI_enu_Initialization+0x14>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    }
    
    Local_u8_ErrorFlag = ES_OK;
    211c:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	00 d0       	rcall	.+0      	; 0x2130 <EXTI_enu_ISC+0x6>
    2130:	0f 92       	push	r0
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	8a 83       	std	Y+2, r24	; 0x02
    2138:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	6b 81       	ldd	r22, Y+3	; 0x03
    2142:	0e 94 80 12 	call	0x2500	; 0x2500 <enu_SetSenseLevel>
    2146:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    2148:	89 81       	ldd	r24, Y+1	; 0x01
}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <EXTI_enu_INTMode+0x6>
    215c:	0f 92       	push	r0
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	8a 83       	std	Y+2, r24	; 0x02
    2164:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	6b 81       	ldd	r22, Y+3	; 0x03
    216e:	0e 94 05 12 	call	0x240a	; 0x240a <enu_SetMode>
    2172:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    2174:	89 81       	ldd	r24, Y+1	; 0x01
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <EXTI_enu_GetPIF+0x6>
    2188:	00 d0       	rcall	.+0      	; 0x218a <EXTI_enu_GetPIF+0x8>
    218a:	00 d0       	rcall	.+0      	; 0x218c <EXTI_enu_GetPIF+0xa>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	8a 83       	std	Y+2, r24	; 0x02
    2192:	7c 83       	std	Y+4, r23	; 0x04
    2194:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	d1 f1       	breq	.+116    	; 0x2216 <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	3e 83       	std	Y+6, r19	; 0x06
    21aa:	2d 83       	std	Y+5, r18	; 0x05
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	9e 81       	ldd	r25, Y+6	; 0x06
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	91 05       	cpc	r25, r1
    21b4:	b1 f0       	breq	.+44     	; 0x21e2 <EXTI_enu_GetPIF+0x60>
    21b6:	2d 81       	ldd	r18, Y+5	; 0x05
    21b8:	3e 81       	ldd	r19, Y+6	; 0x06
    21ba:	22 30       	cpi	r18, 0x02	; 2
    21bc:	31 05       	cpc	r19, r1
    21be:	e1 f0       	breq	.+56     	; 0x21f8 <EXTI_enu_GetPIF+0x76>
    21c0:	8d 81       	ldd	r24, Y+5	; 0x05
    21c2:	9e 81       	ldd	r25, Y+6	; 0x06
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	21 f5       	brne	.+72     	; 0x2210 <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
    21c8:	ea e5       	ldi	r30, 0x5A	; 90
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	82 95       	swap	r24
    21d0:	86 95       	lsr	r24
    21d2:	86 95       	lsr	r24
    21d4:	83 70       	andi	r24, 0x03	; 3
    21d6:	81 70       	andi	r24, 0x01	; 1
    21d8:	eb 81       	ldd	r30, Y+3	; 0x03
    21da:	fc 81       	ldd	r31, Y+4	; 0x04
    21dc:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    21de:	19 82       	std	Y+1, r1	; 0x01
    21e0:	1c c0       	rjmp	.+56     	; 0x221a <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
    21e2:	ea e5       	ldi	r30, 0x5A	; 90
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	88 1f       	adc	r24, r24
    21ea:	88 27       	eor	r24, r24
    21ec:	88 1f       	adc	r24, r24
    21ee:	eb 81       	ldd	r30, Y+3	; 0x03
    21f0:	fc 81       	ldd	r31, Y+4	; 0x04
    21f2:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    21f4:	19 82       	std	Y+1, r1	; 0x01
    21f6:	11 c0       	rjmp	.+34     	; 0x221a <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
    21f8:	ea e5       	ldi	r30, 0x5A	; 90
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	82 95       	swap	r24
    2200:	86 95       	lsr	r24
    2202:	87 70       	andi	r24, 0x07	; 7
    2204:	81 70       	andi	r24, 0x01	; 1
    2206:	eb 81       	ldd	r30, Y+3	; 0x03
    2208:	fc 81       	ldd	r31, Y+4	; 0x04
    220a:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    220c:	19 82       	std	Y+1, r1	; 0x01
    220e:	05 c0       	rjmp	.+10     	; 0x221a <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2210:	82 e0       	ldi	r24, 0x02	; 2
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	02 c0       	rjmp	.+4      	; 0x221a <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2216:	83 e0       	ldi	r24, 0x03	; 3
    2218:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    221a:	89 81       	ldd	r24, Y+1	; 0x01
}
    221c:	26 96       	adiw	r28, 0x06	; 6
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <EXTI_enu_ClearINTFx>:

extern ErrorState_t EXTI_enu_ClearINTFx (u8 Copy_u8_INTNumber)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <EXTI_enu_ClearINTFx+0x6>
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, EXTI_HIGH);
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	61 e0       	ldi	r22, 0x01	; 1
    2242:	0e 94 27 13 	call	0x264e	; 0x264e <enu_SetFlagValue>
    2246:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    2248:	89 81       	ldd	r24, Y+1	; 0x01
}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void), void* Copy_pvid_Parameters)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	00 d0       	rcall	.+0      	; 0x225a <EXTI_enu_SetCallBack+0x6>
    225a:	00 d0       	rcall	.+0      	; 0x225c <EXTI_enu_SetCallBack+0x8>
    225c:	00 d0       	rcall	.+0      	; 0x225e <EXTI_enu_SetCallBack+0xa>
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	8a 83       	std	Y+2, r24	; 0x02
    2264:	7c 83       	std	Y+4, r23	; 0x04
    2266:	6b 83       	std	Y+3, r22	; 0x03
    2268:	5e 83       	std	Y+6, r21	; 0x06
    226a:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	d1 f0       	breq	.+52     	; 0x22ac <EXTI_enu_SetCallBack+0x58>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	2b 81       	ldd	r18, Y+3	; 0x03
    2280:	3c 81       	ldd	r19, Y+4	; 0x04
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	fc 01       	movw	r30, r24
    2288:	e8 53       	subi	r30, 0x38	; 56
    228a:	fe 4f       	sbci	r31, 0xFE	; 254
    228c:	31 83       	std	Z+1, r19	; 0x01
    228e:	20 83       	st	Z, r18

        apvid_ISRParameters[Copy_u8_INTNumber] = Copy_pvid_Parameters;
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	fc 01       	movw	r30, r24
    229c:	e2 53       	subi	r30, 0x32	; 50
    229e:	fe 4f       	sbci	r31, 0xFE	; 254
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    22a8:	19 82       	std	Y+1, r1	; 0x01
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <EXTI_enu_SetCallBack+0x5c>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    22ac:	82 e0       	ldi	r24, 0x02	; 2
    22ae:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b2:	26 96       	adiw	r28, 0x06	; 6
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
    22c4:	1f 92       	push	r1
    22c6:	0f 92       	push	r0
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	0f 92       	push	r0
    22cc:	11 24       	eor	r1, r1
    22ce:	2f 93       	push	r18
    22d0:	3f 93       	push	r19
    22d2:	4f 93       	push	r20
    22d4:	5f 93       	push	r21
    22d6:	6f 93       	push	r22
    22d8:	7f 93       	push	r23
    22da:	8f 93       	push	r24
    22dc:	9f 93       	push	r25
    22de:	af 93       	push	r26
    22e0:	bf 93       	push	r27
    22e2:	ef 93       	push	r30
    22e4:	ff 93       	push	r31
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
    22ee:	80 91 c8 01 	lds	r24, 0x01C8
    22f2:	90 91 c9 01 	lds	r25, 0x01C9
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	49 f0       	breq	.+18     	; 0x230c <__vector_1+0x48>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
    22fa:	e0 91 c8 01 	lds	r30, 0x01C8
    22fe:	f0 91 c9 01 	lds	r31, 0x01C9
    2302:	80 91 ce 01 	lds	r24, 0x01CE
    2306:	90 91 cf 01 	lds	r25, 0x01CF
    230a:	09 95       	icall
    }
}
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	ff 91       	pop	r31
    2312:	ef 91       	pop	r30
    2314:	bf 91       	pop	r27
    2316:	af 91       	pop	r26
    2318:	9f 91       	pop	r25
    231a:	8f 91       	pop	r24
    231c:	7f 91       	pop	r23
    231e:	6f 91       	pop	r22
    2320:	5f 91       	pop	r21
    2322:	4f 91       	pop	r20
    2324:	3f 91       	pop	r19
    2326:	2f 91       	pop	r18
    2328:	0f 90       	pop	r0
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	0f 90       	pop	r0
    232e:	1f 90       	pop	r1
    2330:	18 95       	reti

00002332 <__vector_2>:
//INT1
void __vector_2 (void)
{
    2332:	1f 92       	push	r1
    2334:	0f 92       	push	r0
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	0f 92       	push	r0
    233a:	11 24       	eor	r1, r1
    233c:	2f 93       	push	r18
    233e:	3f 93       	push	r19
    2340:	4f 93       	push	r20
    2342:	5f 93       	push	r21
    2344:	6f 93       	push	r22
    2346:	7f 93       	push	r23
    2348:	8f 93       	push	r24
    234a:	9f 93       	push	r25
    234c:	af 93       	push	r26
    234e:	bf 93       	push	r27
    2350:	ef 93       	push	r30
    2352:	ff 93       	push	r31
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
    235c:	80 91 ca 01 	lds	r24, 0x01CA
    2360:	90 91 cb 01 	lds	r25, 0x01CB
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	49 f0       	breq	.+18     	; 0x237a <__vector_2+0x48>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
    2368:	e0 91 ca 01 	lds	r30, 0x01CA
    236c:	f0 91 cb 01 	lds	r31, 0x01CB
    2370:	80 91 d0 01 	lds	r24, 0x01D0
    2374:	90 91 d1 01 	lds	r25, 0x01D1
    2378:	09 95       	icall
    }
}
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	ff 91       	pop	r31
    2380:	ef 91       	pop	r30
    2382:	bf 91       	pop	r27
    2384:	af 91       	pop	r26
    2386:	9f 91       	pop	r25
    2388:	8f 91       	pop	r24
    238a:	7f 91       	pop	r23
    238c:	6f 91       	pop	r22
    238e:	5f 91       	pop	r21
    2390:	4f 91       	pop	r20
    2392:	3f 91       	pop	r19
    2394:	2f 91       	pop	r18
    2396:	0f 90       	pop	r0
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	0f 90       	pop	r0
    239c:	1f 90       	pop	r1
    239e:	18 95       	reti

000023a0 <__vector_3>:
//INT2
void __vector_3 (void)
{
    23a0:	1f 92       	push	r1
    23a2:	0f 92       	push	r0
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	0f 92       	push	r0
    23a8:	11 24       	eor	r1, r1
    23aa:	2f 93       	push	r18
    23ac:	3f 93       	push	r19
    23ae:	4f 93       	push	r20
    23b0:	5f 93       	push	r21
    23b2:	6f 93       	push	r22
    23b4:	7f 93       	push	r23
    23b6:	8f 93       	push	r24
    23b8:	9f 93       	push	r25
    23ba:	af 93       	push	r26
    23bc:	bf 93       	push	r27
    23be:	ef 93       	push	r30
    23c0:	ff 93       	push	r31
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
    23ca:	80 91 cc 01 	lds	r24, 0x01CC
    23ce:	90 91 cd 01 	lds	r25, 0x01CD
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	39 f0       	breq	.+14     	; 0x23e4 <__vector_3+0x44>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
    23d6:	e0 91 cc 01 	lds	r30, 0x01CC
    23da:	f0 91 cd 01 	lds	r31, 0x01CD
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	09 95       	icall
    }
    
}
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	ff 91       	pop	r31
    23ea:	ef 91       	pop	r30
    23ec:	bf 91       	pop	r27
    23ee:	af 91       	pop	r26
    23f0:	9f 91       	pop	r25
    23f2:	8f 91       	pop	r24
    23f4:	7f 91       	pop	r23
    23f6:	6f 91       	pop	r22
    23f8:	5f 91       	pop	r21
    23fa:	4f 91       	pop	r20
    23fc:	3f 91       	pop	r19
    23fe:	2f 91       	pop	r18
    2400:	0f 90       	pop	r0
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	0f 90       	pop	r0
    2406:	1f 90       	pop	r1
    2408:	18 95       	reti

0000240a <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <enu_SetMode+0x6>
    2410:	00 d0       	rcall	.+0      	; 0x2412 <enu_SetMode+0x8>
    2412:	0f 92       	push	r0
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	8a 83       	std	Y+2, r24	; 0x02
    241a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	3d 83       	std	Y+5, r19	; 0x05
    2428:	2c 83       	std	Y+4, r18	; 0x04
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	91 05       	cpc	r25, r1
    2432:	29 f1       	breq	.+74     	; 0x247e <enu_SetMode+0x74>
    2434:	2c 81       	ldd	r18, Y+4	; 0x04
    2436:	3d 81       	ldd	r19, Y+5	; 0x05
    2438:	22 30       	cpi	r18, 0x02	; 2
    243a:	31 05       	cpc	r19, r1
    243c:	d9 f1       	breq	.+118    	; 0x24b4 <enu_SetMode+0xaa>
    243e:	8c 81       	ldd	r24, Y+4	; 0x04
    2440:	9d 81       	ldd	r25, Y+5	; 0x05
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	09 f0       	breq	.+2      	; 0x2448 <enu_SetMode+0x3e>
    2446:	51 c0       	rjmp	.+162    	; 0x24ea <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	49 f4       	brne	.+18     	; 0x2460 <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
    244e:	ab e5       	ldi	r26, 0x5B	; 91
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	eb e5       	ldi	r30, 0x5B	; 91
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	80 64       	ori	r24, 0x40	; 64
    245a:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    245c:	19 82       	std	Y+1, r1	; 0x01
    245e:	47 c0       	rjmp	.+142    	; 0x24ee <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	88 23       	and	r24, r24
    2464:	49 f4       	brne	.+18     	; 0x2478 <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
    2466:	ab e5       	ldi	r26, 0x5B	; 91
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	eb e5       	ldi	r30, 0x5B	; 91
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	8f 7b       	andi	r24, 0xBF	; 191
    2472:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2474:	19 82       	std	Y+1, r1	; 0x01
    2476:	3b c0       	rjmp	.+118    	; 0x24ee <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	38 c0       	rjmp	.+112    	; 0x24ee <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	49 f4       	brne	.+18     	; 0x2496 <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
    2484:	ab e5       	ldi	r26, 0x5B	; 91
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	eb e5       	ldi	r30, 0x5B	; 91
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	80 68       	ori	r24, 0x80	; 128
    2490:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2492:	19 82       	std	Y+1, r1	; 0x01
    2494:	2c c0       	rjmp	.+88     	; 0x24ee <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	88 23       	and	r24, r24
    249a:	49 f4       	brne	.+18     	; 0x24ae <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
    249c:	ab e5       	ldi	r26, 0x5B	; 91
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	eb e5       	ldi	r30, 0x5B	; 91
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	8f 77       	andi	r24, 0x7F	; 127
    24a8:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    24aa:	19 82       	std	Y+1, r1	; 0x01
    24ac:	20 c0       	rjmp	.+64     	; 0x24ee <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	1d c0       	rjmp	.+58     	; 0x24ee <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	81 30       	cpi	r24, 0x01	; 1
    24b8:	49 f4       	brne	.+18     	; 0x24cc <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
    24ba:	ab e5       	ldi	r26, 0x5B	; 91
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	eb e5       	ldi	r30, 0x5B	; 91
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	80 62       	ori	r24, 0x20	; 32
    24c6:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    24c8:	19 82       	std	Y+1, r1	; 0x01
    24ca:	11 c0       	rjmp	.+34     	; 0x24ee <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	88 23       	and	r24, r24
    24d0:	49 f4       	brne	.+18     	; 0x24e4 <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
    24d2:	ab e5       	ldi	r26, 0x5B	; 91
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	eb e5       	ldi	r30, 0x5B	; 91
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	8f 7d       	andi	r24, 0xDF	; 223
    24de:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    24e0:	19 82       	std	Y+1, r1	; 0x01
    24e2:	05 c0       	rjmp	.+10     	; 0x24ee <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    24e4:	82 e0       	ldi	r24, 0x02	; 2
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	00 d0       	rcall	.+0      	; 0x2506 <enu_SetSenseLevel+0x6>
    2506:	00 d0       	rcall	.+0      	; 0x2508 <enu_SetSenseLevel+0x8>
    2508:	0f 92       	push	r0
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	8a 83       	std	Y+2, r24	; 0x02
    2510:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	3d 83       	std	Y+5, r19	; 0x05
    251e:	2c 83       	std	Y+4, r18	; 0x04
    2520:	8c 81       	ldd	r24, Y+4	; 0x04
    2522:	9d 81       	ldd	r25, Y+5	; 0x05
    2524:	81 30       	cpi	r24, 0x01	; 1
    2526:	91 05       	cpc	r25, r1
    2528:	e9 f1       	breq	.+122    	; 0x25a4 <enu_SetSenseLevel+0xa4>
    252a:	2c 81       	ldd	r18, Y+4	; 0x04
    252c:	3d 81       	ldd	r19, Y+5	; 0x05
    252e:	22 30       	cpi	r18, 0x02	; 2
    2530:	31 05       	cpc	r19, r1
    2532:	09 f4       	brne	.+2      	; 0x2536 <enu_SetSenseLevel+0x36>
    2534:	69 c0       	rjmp	.+210    	; 0x2608 <enu_SetSenseLevel+0x108>
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	9d 81       	ldd	r25, Y+5	; 0x05
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	09 f0       	breq	.+2      	; 0x2540 <enu_SetSenseLevel+0x40>
    253e:	7c c0       	rjmp	.+248    	; 0x2638 <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
    2540:	a5 e5       	ldi	r26, 0x55	; 85
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e5 e5       	ldi	r30, 0x55	; 85
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	8c 7f       	andi	r24, 0xFC	; 252
    254c:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	88 23       	and	r24, r24
    2552:	11 f4       	brne	.+4      	; 0x2558 <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    2554:	19 82       	std	Y+1, r1	; 0x01
    2556:	72 c0       	rjmp	.+228    	; 0x263c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	81 30       	cpi	r24, 0x01	; 1
    255c:	49 f4       	brne	.+18     	; 0x2570 <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
    255e:	a5 e5       	ldi	r26, 0x55	; 85
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e5 e5       	ldi	r30, 0x55	; 85
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	81 60       	ori	r24, 0x01	; 1
    256a:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    256c:	19 82       	std	Y+1, r1	; 0x01
    256e:	66 c0       	rjmp	.+204    	; 0x263c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	82 30       	cpi	r24, 0x02	; 2
    2574:	41 f4       	brne	.+16     	; 0x2586 <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
    2576:	a5 e5       	ldi	r26, 0x55	; 85
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e5 e5       	ldi	r30, 0x55	; 85
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	82 60       	ori	r24, 0x02	; 2
    2582:	8c 93       	st	X, r24
    2584:	5b c0       	rjmp	.+182    	; 0x263c <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	83 30       	cpi	r24, 0x03	; 3
    258a:	49 f4       	brne	.+18     	; 0x259e <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
    258c:	a5 e5       	ldi	r26, 0x55	; 85
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e5 e5       	ldi	r30, 0x55	; 85
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	83 60       	ori	r24, 0x03	; 3
    2598:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    259a:	19 82       	std	Y+1, r1	; 0x01
    259c:	4f c0       	rjmp	.+158    	; 0x263c <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	4c c0       	rjmp	.+152    	; 0x263c <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
    25a4:	a5 e5       	ldi	r26, 0x55	; 85
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e5 e5       	ldi	r30, 0x55	; 85
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	83 7f       	andi	r24, 0xF3	; 243
    25b0:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	88 23       	and	r24, r24
    25b6:	11 f4       	brne	.+4      	; 0x25bc <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    25b8:	19 82       	std	Y+1, r1	; 0x01
    25ba:	40 c0       	rjmp	.+128    	; 0x263c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	81 30       	cpi	r24, 0x01	; 1
    25c0:	49 f4       	brne	.+18     	; 0x25d4 <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
    25c2:	a5 e5       	ldi	r26, 0x55	; 85
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e5 e5       	ldi	r30, 0x55	; 85
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	84 60       	ori	r24, 0x04	; 4
    25ce:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    25d0:	19 82       	std	Y+1, r1	; 0x01
    25d2:	34 c0       	rjmp	.+104    	; 0x263c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	82 30       	cpi	r24, 0x02	; 2
    25d8:	41 f4       	brne	.+16     	; 0x25ea <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
    25da:	a5 e5       	ldi	r26, 0x55	; 85
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e5 e5       	ldi	r30, 0x55	; 85
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	88 60       	ori	r24, 0x08	; 8
    25e6:	8c 93       	st	X, r24
    25e8:	29 c0       	rjmp	.+82     	; 0x263c <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	83 30       	cpi	r24, 0x03	; 3
    25ee:	49 f4       	brne	.+18     	; 0x2602 <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
    25f0:	a5 e5       	ldi	r26, 0x55	; 85
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e5 e5       	ldi	r30, 0x55	; 85
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	8c 60       	ori	r24, 0x0C	; 12
    25fc:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    25fe:	19 82       	std	Y+1, r1	; 0x01
    2600:	1d c0       	rjmp	.+58     	; 0x263c <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	1a c0       	rjmp	.+52     	; 0x263c <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	82 30       	cpi	r24, 0x02	; 2
    260c:	49 f4       	brne	.+18     	; 0x2620 <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
    260e:	a4 e5       	ldi	r26, 0x54	; 84
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	e4 e5       	ldi	r30, 0x54	; 84
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	8f 7b       	andi	r24, 0xBF	; 191
    261a:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    261c:	19 82       	std	Y+1, r1	; 0x01
    261e:	0e c0       	rjmp	.+28     	; 0x263c <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	83 30       	cpi	r24, 0x03	; 3
    2624:	59 f4       	brne	.+22     	; 0x263c <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
    2626:	a4 e5       	ldi	r26, 0x54	; 84
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e4 e5       	ldi	r30, 0x54	; 84
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	80 64       	ori	r24, 0x40	; 64
    2632:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2634:	19 82       	std	Y+1, r1	; 0x01
    2636:	02 c0       	rjmp	.+4      	; 0x263c <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2638:	82 e0       	ldi	r24, 0x02	; 2
    263a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
    263c:	89 81       	ldd	r24, Y+1	; 0x01
}
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <enu_SetFlagValue+0x6>
    2654:	00 d0       	rcall	.+0      	; 0x2656 <enu_SetFlagValue+0x8>
    2656:	0f 92       	push	r0
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	8a 83       	std	Y+2, r24	; 0x02
    265e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	3d 83       	std	Y+5, r19	; 0x05
    266c:	2c 83       	std	Y+4, r18	; 0x04
    266e:	8c 81       	ldd	r24, Y+4	; 0x04
    2670:	9d 81       	ldd	r25, Y+5	; 0x05
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	91 05       	cpc	r25, r1
    2676:	29 f1       	breq	.+74     	; 0x26c2 <enu_SetFlagValue+0x74>
    2678:	2c 81       	ldd	r18, Y+4	; 0x04
    267a:	3d 81       	ldd	r19, Y+5	; 0x05
    267c:	22 30       	cpi	r18, 0x02	; 2
    267e:	31 05       	cpc	r19, r1
    2680:	d9 f1       	breq	.+118    	; 0x26f8 <enu_SetFlagValue+0xaa>
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	09 f0       	breq	.+2      	; 0x268c <enu_SetFlagValue+0x3e>
    268a:	51 c0       	rjmp	.+162    	; 0x272e <enu_SetFlagValue+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	49 f4       	brne	.+18     	; 0x26a4 <enu_SetFlagValue+0x56>
            {
                GIFR |= ( 1 << GIFR_INTF0);
    2692:	aa e5       	ldi	r26, 0x5A	; 90
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	ea e5       	ldi	r30, 0x5A	; 90
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	80 64       	ori	r24, 0x40	; 64
    269e:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    26a0:	19 82       	std	Y+1, r1	; 0x01
    26a2:	47 c0       	rjmp	.+142    	; 0x2732 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	88 23       	and	r24, r24
    26a8:	49 f4       	brne	.+18     	; 0x26bc <enu_SetFlagValue+0x6e>
            {
                GIFR &= ~( 1 << GIFR_INTF0);
    26aa:	aa e5       	ldi	r26, 0x5A	; 90
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	ea e5       	ldi	r30, 0x5A	; 90
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	8f 7b       	andi	r24, 0xBF	; 191
    26b6:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    26b8:	19 82       	std	Y+1, r1	; 0x01
    26ba:	3b c0       	rjmp	.+118    	; 0x2732 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    26bc:	82 e0       	ldi	r24, 0x02	; 2
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	38 c0       	rjmp	.+112    	; 0x2732 <enu_SetFlagValue+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	81 30       	cpi	r24, 0x01	; 1
    26c6:	49 f4       	brne	.+18     	; 0x26da <enu_SetFlagValue+0x8c>
            {
                GIFR |= ( 1 << GIFR_INTF1);
    26c8:	aa e5       	ldi	r26, 0x5A	; 90
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	ea e5       	ldi	r30, 0x5A	; 90
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	80 68       	ori	r24, 0x80	; 128
    26d4:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    26d6:	19 82       	std	Y+1, r1	; 0x01
    26d8:	2c c0       	rjmp	.+88     	; 0x2732 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	88 23       	and	r24, r24
    26de:	49 f4       	brne	.+18     	; 0x26f2 <enu_SetFlagValue+0xa4>
            {
                GIFR &= ~( 1 << GIFR_INTF1);
    26e0:	aa e5       	ldi	r26, 0x5A	; 90
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	ea e5       	ldi	r30, 0x5A	; 90
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	8f 77       	andi	r24, 0x7F	; 127
    26ec:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    26ee:	19 82       	std	Y+1, r1	; 0x01
    26f0:	20 c0       	rjmp	.+64     	; 0x2732 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    26f2:	82 e0       	ldi	r24, 0x02	; 2
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	1d c0       	rjmp	.+58     	; 0x2732 <enu_SetFlagValue+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	49 f4       	brne	.+18     	; 0x2710 <enu_SetFlagValue+0xc2>
            {
                GIFR |= ( 1 << GIFR_INTF2);
    26fe:	aa e5       	ldi	r26, 0x5A	; 90
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	ea e5       	ldi	r30, 0x5A	; 90
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	80 62       	ori	r24, 0x20	; 32
    270a:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    270c:	19 82       	std	Y+1, r1	; 0x01
    270e:	11 c0       	rjmp	.+34     	; 0x2732 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	88 23       	and	r24, r24
    2714:	49 f4       	brne	.+18     	; 0x2728 <enu_SetFlagValue+0xda>
            {
                GIFR &= ~( 1 << GIFR_INTF2);
    2716:	aa e5       	ldi	r26, 0x5A	; 90
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	ea e5       	ldi	r30, 0x5A	; 90
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	8f 7d       	andi	r24, 0xDF	; 223
    2722:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2724:	19 82       	std	Y+1, r1	; 0x01
    2726:	05 c0       	rjmp	.+10     	; 0x2732 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <enu_SetFlagValue+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	0f 92       	push	r0
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    2752:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    2754:	89 81       	ldd	r24, Y+1	; 0x01
}
    2756:	0f 90       	pop	r0
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	00 d0       	rcall	.+0      	; 0x2764 <DIO_enu_SetPinDiretion+0x6>
    2764:	00 d0       	rcall	.+0      	; 0x2766 <DIO_enu_SetPinDiretion+0x8>
    2766:	00 d0       	rcall	.+0      	; 0x2768 <DIO_enu_SetPinDiretion+0xa>
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	8a 83       	std	Y+2, r24	; 0x02
    276e:	6b 83       	std	Y+3, r22	; 0x03
    2770:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	84 30       	cpi	r24, 0x04	; 4
    277a:	08 f0       	brcs	.+2      	; 0x277e <DIO_enu_SetPinDiretion+0x20>
    277c:	d0 c0       	rjmp	.+416    	; 0x291e <DIO_enu_SetPinDiretion+0x1c0>
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	88 30       	cpi	r24, 0x08	; 8
    2782:	08 f0       	brcs	.+2      	; 0x2786 <DIO_enu_SetPinDiretion+0x28>
    2784:	cc c0       	rjmp	.+408    	; 0x291e <DIO_enu_SetPinDiretion+0x1c0>
    2786:	8c 81       	ldd	r24, Y+4	; 0x04
    2788:	82 30       	cpi	r24, 0x02	; 2
    278a:	08 f0       	brcs	.+2      	; 0x278e <DIO_enu_SetPinDiretion+0x30>
    278c:	c8 c0       	rjmp	.+400    	; 0x291e <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	3e 83       	std	Y+6, r19	; 0x06
    2796:	2d 83       	std	Y+5, r18	; 0x05
    2798:	6d 81       	ldd	r22, Y+5	; 0x05
    279a:	7e 81       	ldd	r23, Y+6	; 0x06
    279c:	61 30       	cpi	r22, 0x01	; 1
    279e:	71 05       	cpc	r23, r1
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <DIO_enu_SetPinDiretion+0x46>
    27a2:	41 c0       	rjmp	.+130    	; 0x2826 <DIO_enu_SetPinDiretion+0xc8>
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	82 30       	cpi	r24, 0x02	; 2
    27aa:	91 05       	cpc	r25, r1
    27ac:	34 f4       	brge	.+12     	; 0x27ba <DIO_enu_SetPinDiretion+0x5c>
    27ae:	2d 81       	ldd	r18, Y+5	; 0x05
    27b0:	3e 81       	ldd	r19, Y+6	; 0x06
    27b2:	21 15       	cp	r18, r1
    27b4:	31 05       	cpc	r19, r1
    27b6:	71 f0       	breq	.+28     	; 0x27d4 <DIO_enu_SetPinDiretion+0x76>
    27b8:	b0 c0       	rjmp	.+352    	; 0x291a <DIO_enu_SetPinDiretion+0x1bc>
    27ba:	6d 81       	ldd	r22, Y+5	; 0x05
    27bc:	7e 81       	ldd	r23, Y+6	; 0x06
    27be:	62 30       	cpi	r22, 0x02	; 2
    27c0:	71 05       	cpc	r23, r1
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <DIO_enu_SetPinDiretion+0x68>
    27c4:	59 c0       	rjmp	.+178    	; 0x2878 <DIO_enu_SetPinDiretion+0x11a>
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ca:	83 30       	cpi	r24, 0x03	; 3
    27cc:	91 05       	cpc	r25, r1
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <DIO_enu_SetPinDiretion+0x74>
    27d0:	7c c0       	rjmp	.+248    	; 0x28ca <DIO_enu_SetPinDiretion+0x16c>
    27d2:	a3 c0       	rjmp	.+326    	; 0x291a <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    27d4:	aa e3       	ldi	r26, 0x3A	; 58
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	ea e3       	ldi	r30, 0x3A	; 58
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	48 2f       	mov	r20, r24
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <DIO_enu_SetPinDiretion+0x92>
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	2a 95       	dec	r18
    27f2:	e2 f7       	brpl	.-8      	; 0x27ec <DIO_enu_SetPinDiretion+0x8e>
    27f4:	80 95       	com	r24
    27f6:	84 23       	and	r24, r20
    27f8:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    27fa:	aa e3       	ldi	r26, 0x3A	; 58
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	ea e3       	ldi	r30, 0x3A	; 58
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	48 2f       	mov	r20, r24
    2806:	8c 81       	ldd	r24, Y+4	; 0x04
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	88 2f       	mov	r24, r24
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	b9 01       	movw	r22, r18
    2814:	02 c0       	rjmp	.+4      	; 0x281a <DIO_enu_SetPinDiretion+0xbc>
    2816:	66 0f       	add	r22, r22
    2818:	77 1f       	adc	r23, r23
    281a:	8a 95       	dec	r24
    281c:	e2 f7       	brpl	.-8      	; 0x2816 <DIO_enu_SetPinDiretion+0xb8>
    281e:	cb 01       	movw	r24, r22
    2820:	84 2b       	or	r24, r20
    2822:	8c 93       	st	X, r24
    2824:	7a c0       	rjmp	.+244    	; 0x291a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    2826:	a7 e3       	ldi	r26, 0x37	; 55
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	e7 e3       	ldi	r30, 0x37	; 55
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	48 2f       	mov	r20, r24
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	28 2f       	mov	r18, r24
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <DIO_enu_SetPinDiretion+0xe4>
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	2a 95       	dec	r18
    2844:	e2 f7       	brpl	.-8      	; 0x283e <DIO_enu_SetPinDiretion+0xe0>
    2846:	80 95       	com	r24
    2848:	84 23       	and	r24, r20
    284a:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    284c:	a7 e3       	ldi	r26, 0x37	; 55
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e7 e3       	ldi	r30, 0x37	; 55
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	48 2f       	mov	r20, r24
    2858:	8c 81       	ldd	r24, Y+4	; 0x04
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	88 2f       	mov	r24, r24
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	b9 01       	movw	r22, r18
    2866:	02 c0       	rjmp	.+4      	; 0x286c <DIO_enu_SetPinDiretion+0x10e>
    2868:	66 0f       	add	r22, r22
    286a:	77 1f       	adc	r23, r23
    286c:	8a 95       	dec	r24
    286e:	e2 f7       	brpl	.-8      	; 0x2868 <DIO_enu_SetPinDiretion+0x10a>
    2870:	cb 01       	movw	r24, r22
    2872:	84 2b       	or	r24, r20
    2874:	8c 93       	st	X, r24
    2876:	51 c0       	rjmp	.+162    	; 0x291a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    2878:	a4 e3       	ldi	r26, 0x34	; 52
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e4 e3       	ldi	r30, 0x34	; 52
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	48 2f       	mov	r20, r24
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <DIO_enu_SetPinDiretion+0x136>
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	2a 95       	dec	r18
    2896:	e2 f7       	brpl	.-8      	; 0x2890 <DIO_enu_SetPinDiretion+0x132>
    2898:	80 95       	com	r24
    289a:	84 23       	and	r24, r20
    289c:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    289e:	a4 e3       	ldi	r26, 0x34	; 52
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e4 e3       	ldi	r30, 0x34	; 52
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	48 2f       	mov	r20, r24
    28aa:	8c 81       	ldd	r24, Y+4	; 0x04
    28ac:	28 2f       	mov	r18, r24
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	b9 01       	movw	r22, r18
    28b8:	02 c0       	rjmp	.+4      	; 0x28be <DIO_enu_SetPinDiretion+0x160>
    28ba:	66 0f       	add	r22, r22
    28bc:	77 1f       	adc	r23, r23
    28be:	8a 95       	dec	r24
    28c0:	e2 f7       	brpl	.-8      	; 0x28ba <DIO_enu_SetPinDiretion+0x15c>
    28c2:	cb 01       	movw	r24, r22
    28c4:	84 2b       	or	r24, r20
    28c6:	8c 93       	st	X, r24
    28c8:	28 c0       	rjmp	.+80     	; 0x291a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    28ca:	a1 e3       	ldi	r26, 0x31	; 49
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e1 e3       	ldi	r30, 0x31	; 49
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	48 2f       	mov	r20, r24
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <DIO_enu_SetPinDiretion+0x188>
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	2a 95       	dec	r18
    28e8:	e2 f7       	brpl	.-8      	; 0x28e2 <DIO_enu_SetPinDiretion+0x184>
    28ea:	80 95       	com	r24
    28ec:	84 23       	and	r24, r20
    28ee:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    28f0:	a1 e3       	ldi	r26, 0x31	; 49
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	e1 e3       	ldi	r30, 0x31	; 49
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	48 2f       	mov	r20, r24
    28fc:	8c 81       	ldd	r24, Y+4	; 0x04
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	b9 01       	movw	r22, r18
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <DIO_enu_SetPinDiretion+0x1b2>
    290c:	66 0f       	add	r22, r22
    290e:	77 1f       	adc	r23, r23
    2910:	8a 95       	dec	r24
    2912:	e2 f7       	brpl	.-8      	; 0x290c <DIO_enu_SetPinDiretion+0x1ae>
    2914:	cb 01       	movw	r24, r22
    2916:	84 2b       	or	r24, r20
    2918:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    291a:	19 82       	std	Y+1, r1	; 0x01
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    291e:	82 e0       	ldi	r24, 0x02	; 2
    2920:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2922:	89 81       	ldd	r24, Y+1	; 0x01
}
    2924:	26 96       	adiw	r28, 0x06	; 6
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	00 d0       	rcall	.+0      	; 0x293c <DIO_enu_SetPinState+0x6>
    293c:	00 d0       	rcall	.+0      	; 0x293e <DIO_enu_SetPinState+0x8>
    293e:	00 d0       	rcall	.+0      	; 0x2940 <DIO_enu_SetPinState+0xa>
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	8a 83       	std	Y+2, r24	; 0x02
    2946:	6b 83       	std	Y+3, r22	; 0x03
    2948:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	84 30       	cpi	r24, 0x04	; 4
    2952:	08 f0       	brcs	.+2      	; 0x2956 <DIO_enu_SetPinState+0x20>
    2954:	d0 c0       	rjmp	.+416    	; 0x2af6 <DIO_enu_SetPinState+0x1c0>
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	88 30       	cpi	r24, 0x08	; 8
    295a:	08 f0       	brcs	.+2      	; 0x295e <DIO_enu_SetPinState+0x28>
    295c:	cc c0       	rjmp	.+408    	; 0x2af6 <DIO_enu_SetPinState+0x1c0>
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	82 30       	cpi	r24, 0x02	; 2
    2962:	08 f0       	brcs	.+2      	; 0x2966 <DIO_enu_SetPinState+0x30>
    2964:	c8 c0       	rjmp	.+400    	; 0x2af6 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	3e 83       	std	Y+6, r19	; 0x06
    296e:	2d 83       	std	Y+5, r18	; 0x05
    2970:	6d 81       	ldd	r22, Y+5	; 0x05
    2972:	7e 81       	ldd	r23, Y+6	; 0x06
    2974:	61 30       	cpi	r22, 0x01	; 1
    2976:	71 05       	cpc	r23, r1
    2978:	09 f4       	brne	.+2      	; 0x297c <DIO_enu_SetPinState+0x46>
    297a:	41 c0       	rjmp	.+130    	; 0x29fe <DIO_enu_SetPinState+0xc8>
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	9e 81       	ldd	r25, Y+6	; 0x06
    2980:	82 30       	cpi	r24, 0x02	; 2
    2982:	91 05       	cpc	r25, r1
    2984:	34 f4       	brge	.+12     	; 0x2992 <DIO_enu_SetPinState+0x5c>
    2986:	2d 81       	ldd	r18, Y+5	; 0x05
    2988:	3e 81       	ldd	r19, Y+6	; 0x06
    298a:	21 15       	cp	r18, r1
    298c:	31 05       	cpc	r19, r1
    298e:	71 f0       	breq	.+28     	; 0x29ac <DIO_enu_SetPinState+0x76>
    2990:	b0 c0       	rjmp	.+352    	; 0x2af2 <DIO_enu_SetPinState+0x1bc>
    2992:	6d 81       	ldd	r22, Y+5	; 0x05
    2994:	7e 81       	ldd	r23, Y+6	; 0x06
    2996:	62 30       	cpi	r22, 0x02	; 2
    2998:	71 05       	cpc	r23, r1
    299a:	09 f4       	brne	.+2      	; 0x299e <DIO_enu_SetPinState+0x68>
    299c:	59 c0       	rjmp	.+178    	; 0x2a50 <DIO_enu_SetPinState+0x11a>
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
    29a0:	9e 81       	ldd	r25, Y+6	; 0x06
    29a2:	83 30       	cpi	r24, 0x03	; 3
    29a4:	91 05       	cpc	r25, r1
    29a6:	09 f4       	brne	.+2      	; 0x29aa <DIO_enu_SetPinState+0x74>
    29a8:	7c c0       	rjmp	.+248    	; 0x2aa2 <DIO_enu_SetPinState+0x16c>
    29aa:	a3 c0       	rjmp	.+326    	; 0x2af2 <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    29ac:	ab e3       	ldi	r26, 0x3B	; 59
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	eb e3       	ldi	r30, 0x3B	; 59
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	48 2f       	mov	r20, r24
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	28 2f       	mov	r18, r24
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <DIO_enu_SetPinState+0x92>
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	2a 95       	dec	r18
    29ca:	e2 f7       	brpl	.-8      	; 0x29c4 <DIO_enu_SetPinState+0x8e>
    29cc:	80 95       	com	r24
    29ce:	84 23       	and	r24, r20
    29d0:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    29d2:	ab e3       	ldi	r26, 0x3B	; 59
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	eb e3       	ldi	r30, 0x3B	; 59
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	48 2f       	mov	r20, r24
    29de:	8c 81       	ldd	r24, Y+4	; 0x04
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	88 2f       	mov	r24, r24
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	b9 01       	movw	r22, r18
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <DIO_enu_SetPinState+0xbc>
    29ee:	66 0f       	add	r22, r22
    29f0:	77 1f       	adc	r23, r23
    29f2:	8a 95       	dec	r24
    29f4:	e2 f7       	brpl	.-8      	; 0x29ee <DIO_enu_SetPinState+0xb8>
    29f6:	cb 01       	movw	r24, r22
    29f8:	84 2b       	or	r24, r20
    29fa:	8c 93       	st	X, r24
    29fc:	7a c0       	rjmp	.+244    	; 0x2af2 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    29fe:	a8 e3       	ldi	r26, 0x38	; 56
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e8 e3       	ldi	r30, 0x38	; 56
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	48 2f       	mov	r20, r24
    2a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <DIO_enu_SetPinState+0xe4>
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	2a 95       	dec	r18
    2a1c:	e2 f7       	brpl	.-8      	; 0x2a16 <DIO_enu_SetPinState+0xe0>
    2a1e:	80 95       	com	r24
    2a20:	84 23       	and	r24, r20
    2a22:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2a24:	a8 e3       	ldi	r26, 0x38	; 56
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e8 e3       	ldi	r30, 0x38	; 56
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	48 2f       	mov	r20, r24
    2a30:	8c 81       	ldd	r24, Y+4	; 0x04
    2a32:	28 2f       	mov	r18, r24
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	88 2f       	mov	r24, r24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	b9 01       	movw	r22, r18
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <DIO_enu_SetPinState+0x10e>
    2a40:	66 0f       	add	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	8a 95       	dec	r24
    2a46:	e2 f7       	brpl	.-8      	; 0x2a40 <DIO_enu_SetPinState+0x10a>
    2a48:	cb 01       	movw	r24, r22
    2a4a:	84 2b       	or	r24, r20
    2a4c:	8c 93       	st	X, r24
    2a4e:	51 c0       	rjmp	.+162    	; 0x2af2 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    2a50:	a5 e3       	ldi	r26, 0x35	; 53
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	e5 e3       	ldi	r30, 0x35	; 53
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	48 2f       	mov	r20, r24
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	28 2f       	mov	r18, r24
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	02 c0       	rjmp	.+4      	; 0x2a6c <DIO_enu_SetPinState+0x136>
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	2a 95       	dec	r18
    2a6e:	e2 f7       	brpl	.-8      	; 0x2a68 <DIO_enu_SetPinState+0x132>
    2a70:	80 95       	com	r24
    2a72:	84 23       	and	r24, r20
    2a74:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2a76:	a5 e3       	ldi	r26, 0x35	; 53
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e5 e3       	ldi	r30, 0x35	; 53
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	48 2f       	mov	r20, r24
    2a82:	8c 81       	ldd	r24, Y+4	; 0x04
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	88 2f       	mov	r24, r24
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	b9 01       	movw	r22, r18
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <DIO_enu_SetPinState+0x160>
    2a92:	66 0f       	add	r22, r22
    2a94:	77 1f       	adc	r23, r23
    2a96:	8a 95       	dec	r24
    2a98:	e2 f7       	brpl	.-8      	; 0x2a92 <DIO_enu_SetPinState+0x15c>
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	84 2b       	or	r24, r20
    2a9e:	8c 93       	st	X, r24
    2aa0:	28 c0       	rjmp	.+80     	; 0x2af2 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    2aa2:	a2 e3       	ldi	r26, 0x32	; 50
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e2 e3       	ldi	r30, 0x32	; 50
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	48 2f       	mov	r20, r24
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	02 c0       	rjmp	.+4      	; 0x2abe <DIO_enu_SetPinState+0x188>
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	2a 95       	dec	r18
    2ac0:	e2 f7       	brpl	.-8      	; 0x2aba <DIO_enu_SetPinState+0x184>
    2ac2:	80 95       	com	r24
    2ac4:	84 23       	and	r24, r20
    2ac6:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2ac8:	a2 e3       	ldi	r26, 0x32	; 50
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e2 e3       	ldi	r30, 0x32	; 50
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	48 2f       	mov	r20, r24
    2ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	8b 81       	ldd	r24, Y+3	; 0x03
    2adc:	88 2f       	mov	r24, r24
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	b9 01       	movw	r22, r18
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <DIO_enu_SetPinState+0x1b2>
    2ae4:	66 0f       	add	r22, r22
    2ae6:	77 1f       	adc	r23, r23
    2ae8:	8a 95       	dec	r24
    2aea:	e2 f7       	brpl	.-8      	; 0x2ae4 <DIO_enu_SetPinState+0x1ae>
    2aec:	cb 01       	movw	r24, r22
    2aee:	84 2b       	or	r24, r20
    2af0:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2af2:	19 82       	std	Y+1, r1	; 0x01
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2afc:	26 96       	adiw	r28, 0x06	; 6
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	08 95       	ret

00002b0e <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <DIO_enu_SetPinValue+0x6>
    2b14:	00 d0       	rcall	.+0      	; 0x2b16 <DIO_enu_SetPinValue+0x8>
    2b16:	00 d0       	rcall	.+0      	; 0x2b18 <DIO_enu_SetPinValue+0xa>
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	8a 83       	std	Y+2, r24	; 0x02
    2b1e:	6b 83       	std	Y+3, r22	; 0x03
    2b20:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	84 30       	cpi	r24, 0x04	; 4
    2b2a:	08 f0       	brcs	.+2      	; 0x2b2e <DIO_enu_SetPinValue+0x20>
    2b2c:	db c0       	rjmp	.+438    	; 0x2ce4 <DIO_enu_SetPinValue+0x1d6>
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	88 30       	cpi	r24, 0x08	; 8
    2b32:	08 f0       	brcs	.+2      	; 0x2b36 <DIO_enu_SetPinValue+0x28>
    2b34:	d7 c0       	rjmp	.+430    	; 0x2ce4 <DIO_enu_SetPinValue+0x1d6>
    2b36:	8c 81       	ldd	r24, Y+4	; 0x04
    2b38:	82 30       	cpi	r24, 0x02	; 2
    2b3a:	08 f0       	brcs	.+2      	; 0x2b3e <DIO_enu_SetPinValue+0x30>
    2b3c:	d3 c0       	rjmp	.+422    	; 0x2ce4 <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	3e 83       	std	Y+6, r19	; 0x06
    2b46:	2d 83       	std	Y+5, r18	; 0x05
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	81 30       	cpi	r24, 0x01	; 1
    2b4e:	91 05       	cpc	r25, r1
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <DIO_enu_SetPinValue+0x46>
    2b52:	43 c0       	rjmp	.+134    	; 0x2bda <DIO_enu_SetPinValue+0xcc>
    2b54:	2d 81       	ldd	r18, Y+5	; 0x05
    2b56:	3e 81       	ldd	r19, Y+6	; 0x06
    2b58:	22 30       	cpi	r18, 0x02	; 2
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	2c f4       	brge	.+10     	; 0x2b68 <DIO_enu_SetPinValue+0x5a>
    2b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b60:	9e 81       	ldd	r25, Y+6	; 0x06
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	71 f0       	breq	.+28     	; 0x2b82 <DIO_enu_SetPinValue+0x74>
    2b66:	bc c0       	rjmp	.+376    	; 0x2ce0 <DIO_enu_SetPinValue+0x1d2>
    2b68:	2d 81       	ldd	r18, Y+5	; 0x05
    2b6a:	3e 81       	ldd	r19, Y+6	; 0x06
    2b6c:	22 30       	cpi	r18, 0x02	; 2
    2b6e:	31 05       	cpc	r19, r1
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <DIO_enu_SetPinValue+0x66>
    2b72:	5f c0       	rjmp	.+190    	; 0x2c32 <DIO_enu_SetPinValue+0x124>
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	9e 81       	ldd	r25, Y+6	; 0x06
    2b78:	83 30       	cpi	r24, 0x03	; 3
    2b7a:	91 05       	cpc	r25, r1
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <DIO_enu_SetPinValue+0x72>
    2b7e:	85 c0       	rjmp	.+266    	; 0x2c8a <DIO_enu_SetPinValue+0x17c>
    2b80:	af c0       	rjmp	.+350    	; 0x2ce0 <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    2b82:	8c 81       	ldd	r24, Y+4	; 0x04
    2b84:	81 30       	cpi	r24, 0x01	; 1
    2b86:	a1 f4       	brne	.+40     	; 0x2bb0 <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    2b88:	ab e3       	ldi	r26, 0x3B	; 59
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	eb e3       	ldi	r30, 0x3B	; 59
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	48 2f       	mov	r20, r24
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	02 2e       	mov	r0, r18
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <DIO_enu_SetPinValue+0x98>
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	0a 94       	dec	r0
    2ba8:	e2 f7       	brpl	.-8      	; 0x2ba2 <DIO_enu_SetPinValue+0x94>
    2baa:	84 2b       	or	r24, r20
    2bac:	8c 93       	st	X, r24
    2bae:	98 c0       	rjmp	.+304    	; 0x2ce0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    2bb0:	ab e3       	ldi	r26, 0x3B	; 59
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	eb e3       	ldi	r30, 0x3B	; 59
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	48 2f       	mov	r20, r24
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	02 2e       	mov	r0, r18
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <DIO_enu_SetPinValue+0xc0>
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	0a 94       	dec	r0
    2bd0:	e2 f7       	brpl	.-8      	; 0x2bca <DIO_enu_SetPinValue+0xbc>
    2bd2:	80 95       	com	r24
    2bd4:	84 23       	and	r24, r20
    2bd6:	8c 93       	st	X, r24
    2bd8:	83 c0       	rjmp	.+262    	; 0x2ce0 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    2bda:	8c 81       	ldd	r24, Y+4	; 0x04
    2bdc:	81 30       	cpi	r24, 0x01	; 1
    2bde:	a1 f4       	brne	.+40     	; 0x2c08 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    2be0:	a8 e3       	ldi	r26, 0x38	; 56
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e8 e3       	ldi	r30, 0x38	; 56
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	48 2f       	mov	r20, r24
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	02 2e       	mov	r0, r18
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <DIO_enu_SetPinValue+0xf0>
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	0a 94       	dec	r0
    2c00:	e2 f7       	brpl	.-8      	; 0x2bfa <DIO_enu_SetPinValue+0xec>
    2c02:	84 2b       	or	r24, r20
    2c04:	8c 93       	st	X, r24
    2c06:	6c c0       	rjmp	.+216    	; 0x2ce0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    2c08:	a8 e3       	ldi	r26, 0x38	; 56
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e8 e3       	ldi	r30, 0x38	; 56
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	48 2f       	mov	r20, r24
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	02 2e       	mov	r0, r18
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <DIO_enu_SetPinValue+0x118>
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	0a 94       	dec	r0
    2c28:	e2 f7       	brpl	.-8      	; 0x2c22 <DIO_enu_SetPinValue+0x114>
    2c2a:	80 95       	com	r24
    2c2c:	84 23       	and	r24, r20
    2c2e:	8c 93       	st	X, r24
    2c30:	57 c0       	rjmp	.+174    	; 0x2ce0 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    2c32:	8c 81       	ldd	r24, Y+4	; 0x04
    2c34:	81 30       	cpi	r24, 0x01	; 1
    2c36:	a1 f4       	brne	.+40     	; 0x2c60 <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    2c38:	a5 e3       	ldi	r26, 0x35	; 53
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e5 e3       	ldi	r30, 0x35	; 53
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	48 2f       	mov	r20, r24
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	02 2e       	mov	r0, r18
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <DIO_enu_SetPinValue+0x148>
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	0a 94       	dec	r0
    2c58:	e2 f7       	brpl	.-8      	; 0x2c52 <DIO_enu_SetPinValue+0x144>
    2c5a:	84 2b       	or	r24, r20
    2c5c:	8c 93       	st	X, r24
    2c5e:	40 c0       	rjmp	.+128    	; 0x2ce0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    2c60:	a5 e3       	ldi	r26, 0x35	; 53
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e5 e3       	ldi	r30, 0x35	; 53
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	48 2f       	mov	r20, r24
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	28 2f       	mov	r18, r24
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	02 2e       	mov	r0, r18
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <DIO_enu_SetPinValue+0x170>
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	0a 94       	dec	r0
    2c80:	e2 f7       	brpl	.-8      	; 0x2c7a <DIO_enu_SetPinValue+0x16c>
    2c82:	80 95       	com	r24
    2c84:	84 23       	and	r24, r20
    2c86:	8c 93       	st	X, r24
    2c88:	2b c0       	rjmp	.+86     	; 0x2ce0 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    2c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8c:	81 30       	cpi	r24, 0x01	; 1
    2c8e:	a1 f4       	brne	.+40     	; 0x2cb8 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    2c90:	a2 e3       	ldi	r26, 0x32	; 50
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e2 e3       	ldi	r30, 0x32	; 50
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	48 2f       	mov	r20, r24
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	02 2e       	mov	r0, r18
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <DIO_enu_SetPinValue+0x1a0>
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	0a 94       	dec	r0
    2cb0:	e2 f7       	brpl	.-8      	; 0x2caa <DIO_enu_SetPinValue+0x19c>
    2cb2:	84 2b       	or	r24, r20
    2cb4:	8c 93       	st	X, r24
    2cb6:	14 c0       	rjmp	.+40     	; 0x2ce0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    2cb8:	a2 e3       	ldi	r26, 0x32	; 50
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e2 e3       	ldi	r30, 0x32	; 50
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	48 2f       	mov	r20, r24
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	02 2e       	mov	r0, r18
    2cd0:	02 c0       	rjmp	.+4      	; 0x2cd6 <DIO_enu_SetPinValue+0x1c8>
    2cd2:	88 0f       	add	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	0a 94       	dec	r0
    2cd8:	e2 f7       	brpl	.-8      	; 0x2cd2 <DIO_enu_SetPinValue+0x1c4>
    2cda:	80 95       	com	r24
    2cdc:	84 23       	and	r24, r20
    2cde:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2ce0:	19 82       	std	Y+1, r1	; 0x01
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cea:	26 96       	adiw	r28, 0x06	; 6
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	08 95       	ret

00002cfc <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <DIO_enu_TogglePinValue+0x6>
    2d02:	00 d0       	rcall	.+0      	; 0x2d04 <DIO_enu_TogglePinValue+0x8>
    2d04:	0f 92       	push	r0
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	8a 83       	std	Y+2, r24	; 0x02
    2d0c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    2d12:	8a 81       	ldd	r24, Y+2	; 0x02
    2d14:	84 30       	cpi	r24, 0x04	; 4
    2d16:	08 f0       	brcs	.+2      	; 0x2d1a <DIO_enu_TogglePinValue+0x1e>
    2d18:	73 c0       	rjmp	.+230    	; 0x2e00 <DIO_enu_TogglePinValue+0x104>
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	88 30       	cpi	r24, 0x08	; 8
    2d1e:	08 f0       	brcs	.+2      	; 0x2d22 <DIO_enu_TogglePinValue+0x26>
    2d20:	6f c0       	rjmp	.+222    	; 0x2e00 <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	3d 83       	std	Y+5, r19	; 0x05
    2d2a:	2c 83       	std	Y+4, r18	; 0x04
    2d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d30:	81 30       	cpi	r24, 0x01	; 1
    2d32:	91 05       	cpc	r25, r1
    2d34:	49 f1       	breq	.+82     	; 0x2d88 <DIO_enu_TogglePinValue+0x8c>
    2d36:	2c 81       	ldd	r18, Y+4	; 0x04
    2d38:	3d 81       	ldd	r19, Y+5	; 0x05
    2d3a:	22 30       	cpi	r18, 0x02	; 2
    2d3c:	31 05       	cpc	r19, r1
    2d3e:	2c f4       	brge	.+10     	; 0x2d4a <DIO_enu_TogglePinValue+0x4e>
    2d40:	8c 81       	ldd	r24, Y+4	; 0x04
    2d42:	9d 81       	ldd	r25, Y+5	; 0x05
    2d44:	00 97       	sbiw	r24, 0x00	; 0
    2d46:	61 f0       	breq	.+24     	; 0x2d60 <DIO_enu_TogglePinValue+0x64>
    2d48:	5a c0       	rjmp	.+180    	; 0x2dfe <DIO_enu_TogglePinValue+0x102>
    2d4a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d4c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d4e:	22 30       	cpi	r18, 0x02	; 2
    2d50:	31 05       	cpc	r19, r1
    2d52:	71 f1       	breq	.+92     	; 0x2db0 <DIO_enu_TogglePinValue+0xb4>
    2d54:	8c 81       	ldd	r24, Y+4	; 0x04
    2d56:	9d 81       	ldd	r25, Y+5	; 0x05
    2d58:	83 30       	cpi	r24, 0x03	; 3
    2d5a:	91 05       	cpc	r25, r1
    2d5c:	e9 f1       	breq	.+122    	; 0x2dd8 <DIO_enu_TogglePinValue+0xdc>
    2d5e:	4f c0       	rjmp	.+158    	; 0x2dfe <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    2d60:	ab e3       	ldi	r26, 0x3B	; 59
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	eb e3       	ldi	r30, 0x3B	; 59
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	48 2f       	mov	r20, r24
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	28 2f       	mov	r18, r24
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	02 2e       	mov	r0, r18
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <DIO_enu_TogglePinValue+0x82>
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	0a 94       	dec	r0
    2d80:	e2 f7       	brpl	.-8      	; 0x2d7a <DIO_enu_TogglePinValue+0x7e>
    2d82:	84 27       	eor	r24, r20
    2d84:	8c 93       	st	X, r24
    2d86:	3b c0       	rjmp	.+118    	; 0x2dfe <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    2d88:	a8 e3       	ldi	r26, 0x38	; 56
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	e8 e3       	ldi	r30, 0x38	; 56
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	48 2f       	mov	r20, r24
    2d94:	8b 81       	ldd	r24, Y+3	; 0x03
    2d96:	28 2f       	mov	r18, r24
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	02 2e       	mov	r0, r18
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <DIO_enu_TogglePinValue+0xaa>
    2da2:	88 0f       	add	r24, r24
    2da4:	99 1f       	adc	r25, r25
    2da6:	0a 94       	dec	r0
    2da8:	e2 f7       	brpl	.-8      	; 0x2da2 <DIO_enu_TogglePinValue+0xa6>
    2daa:	84 27       	eor	r24, r20
    2dac:	8c 93       	st	X, r24
    2dae:	27 c0       	rjmp	.+78     	; 0x2dfe <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    2db0:	a5 e3       	ldi	r26, 0x35	; 53
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	e5 e3       	ldi	r30, 0x35	; 53
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	48 2f       	mov	r20, r24
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	02 2e       	mov	r0, r18
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <DIO_enu_TogglePinValue+0xd2>
    2dca:	88 0f       	add	r24, r24
    2dcc:	99 1f       	adc	r25, r25
    2dce:	0a 94       	dec	r0
    2dd0:	e2 f7       	brpl	.-8      	; 0x2dca <DIO_enu_TogglePinValue+0xce>
    2dd2:	84 27       	eor	r24, r20
    2dd4:	8c 93       	st	X, r24
    2dd6:	13 c0       	rjmp	.+38     	; 0x2dfe <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    2dd8:	a2 e3       	ldi	r26, 0x32	; 50
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	e2 e3       	ldi	r30, 0x32	; 50
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	48 2f       	mov	r20, r24
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	28 2f       	mov	r18, r24
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	02 2e       	mov	r0, r18
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <DIO_enu_TogglePinValue+0xfa>
    2df2:	88 0f       	add	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	0a 94       	dec	r0
    2df8:	e2 f7       	brpl	.-8      	; 0x2df2 <DIO_enu_TogglePinValue+0xf6>
    2dfa:	84 27       	eor	r24, r20
    2dfc:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2dfe:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    2e12:	df 93       	push	r29
    2e14:	cf 93       	push	r28
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	27 97       	sbiw	r28, 0x07	; 7
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	8a 83       	std	Y+2, r24	; 0x02
    2e28:	6b 83       	std	Y+3, r22	; 0x03
    2e2a:	5d 83       	std	Y+5, r21	; 0x05
    2e2c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    2e32:	8c 81       	ldd	r24, Y+4	; 0x04
    2e34:	9d 81       	ldd	r25, Y+5	; 0x05
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <DIO_enu_GetPinValue+0x2a>
    2e3a:	7d c0       	rjmp	.+250    	; 0x2f36 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	84 30       	cpi	r24, 0x04	; 4
    2e40:	08 f0       	brcs	.+2      	; 0x2e44 <DIO_enu_GetPinValue+0x32>
    2e42:	76 c0       	rjmp	.+236    	; 0x2f30 <DIO_enu_GetPinValue+0x11e>
    2e44:	8b 81       	ldd	r24, Y+3	; 0x03
    2e46:	88 30       	cpi	r24, 0x08	; 8
    2e48:	08 f0       	brcs	.+2      	; 0x2e4c <DIO_enu_GetPinValue+0x3a>
    2e4a:	72 c0       	rjmp	.+228    	; 0x2f30 <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	28 2f       	mov	r18, r24
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	3f 83       	std	Y+7, r19	; 0x07
    2e54:	2e 83       	std	Y+6, r18	; 0x06
    2e56:	4e 81       	ldd	r20, Y+6	; 0x06
    2e58:	5f 81       	ldd	r21, Y+7	; 0x07
    2e5a:	41 30       	cpi	r20, 0x01	; 1
    2e5c:	51 05       	cpc	r21, r1
    2e5e:	59 f1       	breq	.+86     	; 0x2eb6 <DIO_enu_GetPinValue+0xa4>
    2e60:	8e 81       	ldd	r24, Y+6	; 0x06
    2e62:	9f 81       	ldd	r25, Y+7	; 0x07
    2e64:	82 30       	cpi	r24, 0x02	; 2
    2e66:	91 05       	cpc	r25, r1
    2e68:	34 f4       	brge	.+12     	; 0x2e76 <DIO_enu_GetPinValue+0x64>
    2e6a:	2e 81       	ldd	r18, Y+6	; 0x06
    2e6c:	3f 81       	ldd	r19, Y+7	; 0x07
    2e6e:	21 15       	cp	r18, r1
    2e70:	31 05       	cpc	r19, r1
    2e72:	69 f0       	breq	.+26     	; 0x2e8e <DIO_enu_GetPinValue+0x7c>
    2e74:	5b c0       	rjmp	.+182    	; 0x2f2c <DIO_enu_GetPinValue+0x11a>
    2e76:	4e 81       	ldd	r20, Y+6	; 0x06
    2e78:	5f 81       	ldd	r21, Y+7	; 0x07
    2e7a:	42 30       	cpi	r20, 0x02	; 2
    2e7c:	51 05       	cpc	r21, r1
    2e7e:	79 f1       	breq	.+94     	; 0x2ede <DIO_enu_GetPinValue+0xcc>
    2e80:	8e 81       	ldd	r24, Y+6	; 0x06
    2e82:	9f 81       	ldd	r25, Y+7	; 0x07
    2e84:	83 30       	cpi	r24, 0x03	; 3
    2e86:	91 05       	cpc	r25, r1
    2e88:	09 f4       	brne	.+2      	; 0x2e8c <DIO_enu_GetPinValue+0x7a>
    2e8a:	3d c0       	rjmp	.+122    	; 0x2f06 <DIO_enu_GetPinValue+0xf4>
    2e8c:	4f c0       	rjmp	.+158    	; 0x2f2c <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    2e8e:	e9 e3       	ldi	r30, 0x39	; 57
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	28 2f       	mov	r18, r24
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9a:	88 2f       	mov	r24, r24
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	a9 01       	movw	r20, r18
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <DIO_enu_GetPinValue+0x94>
    2ea2:	55 95       	asr	r21
    2ea4:	47 95       	ror	r20
    2ea6:	8a 95       	dec	r24
    2ea8:	e2 f7       	brpl	.-8      	; 0x2ea2 <DIO_enu_GetPinValue+0x90>
    2eaa:	ca 01       	movw	r24, r20
    2eac:	81 70       	andi	r24, 0x01	; 1
    2eae:	ec 81       	ldd	r30, Y+4	; 0x04
    2eb0:	fd 81       	ldd	r31, Y+5	; 0x05
    2eb2:	80 83       	st	Z, r24
    2eb4:	3b c0       	rjmp	.+118    	; 0x2f2c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    2eb6:	e6 e3       	ldi	r30, 0x36	; 54
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	80 81       	ld	r24, Z
    2ebc:	28 2f       	mov	r18, r24
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	88 2f       	mov	r24, r24
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	a9 01       	movw	r20, r18
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <DIO_enu_GetPinValue+0xbc>
    2eca:	55 95       	asr	r21
    2ecc:	47 95       	ror	r20
    2ece:	8a 95       	dec	r24
    2ed0:	e2 f7       	brpl	.-8      	; 0x2eca <DIO_enu_GetPinValue+0xb8>
    2ed2:	ca 01       	movw	r24, r20
    2ed4:	81 70       	andi	r24, 0x01	; 1
    2ed6:	ec 81       	ldd	r30, Y+4	; 0x04
    2ed8:	fd 81       	ldd	r31, Y+5	; 0x05
    2eda:	80 83       	st	Z, r24
    2edc:	27 c0       	rjmp	.+78     	; 0x2f2c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    2ede:	e3 e3       	ldi	r30, 0x33	; 51
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	88 2f       	mov	r24, r24
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	a9 01       	movw	r20, r18
    2ef0:	02 c0       	rjmp	.+4      	; 0x2ef6 <DIO_enu_GetPinValue+0xe4>
    2ef2:	55 95       	asr	r21
    2ef4:	47 95       	ror	r20
    2ef6:	8a 95       	dec	r24
    2ef8:	e2 f7       	brpl	.-8      	; 0x2ef2 <DIO_enu_GetPinValue+0xe0>
    2efa:	ca 01       	movw	r24, r20
    2efc:	81 70       	andi	r24, 0x01	; 1
    2efe:	ec 81       	ldd	r30, Y+4	; 0x04
    2f00:	fd 81       	ldd	r31, Y+5	; 0x05
    2f02:	80 83       	st	Z, r24
    2f04:	13 c0       	rjmp	.+38     	; 0x2f2c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    2f06:	e0 e3       	ldi	r30, 0x30	; 48
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	88 2f       	mov	r24, r24
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	a9 01       	movw	r20, r18
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <DIO_enu_GetPinValue+0x10c>
    2f1a:	55 95       	asr	r21
    2f1c:	47 95       	ror	r20
    2f1e:	8a 95       	dec	r24
    2f20:	e2 f7       	brpl	.-8      	; 0x2f1a <DIO_enu_GetPinValue+0x108>
    2f22:	ca 01       	movw	r24, r20
    2f24:	81 70       	andi	r24, 0x01	; 1
    2f26:	ec 81       	ldd	r30, Y+4	; 0x04
    2f28:	fd 81       	ldd	r31, Y+5	; 0x05
    2f2a:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    2f2c:	19 82       	std	Y+1, r1	; 0x01
    2f2e:	05 c0       	rjmp	.+10     	; 0x2f3a <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2f30:	82 e0       	ldi	r24, 0x02	; 2
    2f32:	89 83       	std	Y+1, r24	; 0x01
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2f36:	83 e0       	ldi	r24, 0x03	; 3
    2f38:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f3c:	27 96       	adiw	r28, 0x07	; 7
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <ADC_enu_Initialization>:
static void* pvid_ISRParameters = NULL;

//APIs implementation

extern ErrorState_t ADC_enu_Initialization(void)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	0f 92       	push	r0
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	89 83       	std	Y+1, r24	; 0x01

    //Bits contain 00
    ADMUX &= ~(3 << ADMUX_REFS0 );
    2f5c:	a7 e2       	ldi	r26, 0x27	; 39
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e7 e2       	ldi	r30, 0x27	; 39
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	8f 73       	andi	r24, 0x3F	; 63
    2f68:	8c 93       	st	X, r24
        //bITS ALREADY CONTAIN 00  
    
    #elif ADC_V_REFERENCE_SOURCE == ADC_AVCC
       
        //Bits contain 01
        ADMUX |= (1 < ADMUX_REFS0);
    2f6a:	a7 e2       	ldi	r26, 0x27	; 39
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	e7 e2       	ldi	r30, 0x27	; 39
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	81 60       	ori	r24, 0x01	; 1
    2f76:	8c 93       	st	X, r24


    //Handling Data adjustment direction
    #if  ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED
        //Setting ADLAR bit
        ADMUX |= ( 1 << ADMUX_ADLAR);
    2f78:	a7 e2       	ldi	r26, 0x27	; 39
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e7 e2       	ldi	r30, 0x27	; 39
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	80 62       	ori	r24, 0x20	; 32
    2f84:	8c 93       	st	X, r24
        ADCSRA &= ~( 1 << ADCSRA_ADATE);

    #elif  ADC_TRIGGER_SOURCE >= ADC_FREE_RUNNING &&  ADC_TRIGGER_SOURCE <= ADC_TIMER1_CAPTURE_EVENT

        //Clearing ADTS bits
        SFIOR &= (0X1F);
    2f86:	a0 e5       	ldi	r26, 0x50	; 80
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e0 e5       	ldi	r30, 0x50	; 80
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	8f 71       	andi	r24, 0x1F	; 31
    2f92:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (ADC_TRIGGER_SOURCE << SFIOR_ADTS0); 
    2f94:	a0 e5       	ldi	r26, 0x50	; 80
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	e0 e5       	ldi	r30, 0x50	; 80
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	8c 93       	st	X, r24
        
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    2fa0:	a6 e2       	ldi	r26, 0x26	; 38
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e6 e2       	ldi	r30, 0x26	; 38
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	80 62       	ori	r24, 0x20	; 32
    2fac:	8c 93       	st	X, r24
    #endif


    //Handling Interrupt Event Status (PIE)
    #if ADC_INT_EVENT_STATUS == ADC_INT_ENABLE
        ADCSRA |= ( 1 << ADCSRA_ADIE); //Bit contains 1 
    2fae:	a6 e2       	ldi	r26, 0x26	; 38
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	e6 e2       	ldi	r30, 0x26	; 38
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	88 60       	ori	r24, 0x08	; 8
    2fba:	8c 93       	st	X, r24
    #endif


    //Handling ADC clock speed
    //Clearing PS bits
    ADCSRA &= (0xF8);
    2fbc:	a6 e2       	ldi	r26, 0x26	; 38
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	e6 e2       	ldi	r30, 0x26	; 38
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	88 7f       	andi	r24, 0xF8	; 248
    2fc8:	8c 93       	st	X, r24
    #if ADC_PS_FACTOR >= ADC_PS_2 && ADC_PS_FACTOR <= ADC_PS_128 
        
        ADCSRA |= (ADC_PS_FACTOR << ADCSRA_ADPS0);
    2fca:	a6 e2       	ldi	r26, 0x26	; 38
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	e6 e2       	ldi	r30, 0x26	; 38
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	86 60       	ori	r24, 0x06	; 6
    2fd6:	8c 93       	st	X, r24

    #endif


    //Handling input channels
    ADMUX &= (0xE0); //Clearing bits
    2fd8:	a7 e2       	ldi	r26, 0x27	; 39
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e7 e2       	ldi	r30, 0x27	; 39
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	80 7e       	andi	r24, 0xE0	; 224
    2fe4:	8c 93       	st	X, r24
    #if ADC_INPUT_CHANNEL >= ADC_ADC0 && ADC_INPUT_CHANNEL <= ADC_V_GND
        //Channel Selection
        ADMUX |= (ADC_INPUT_CHANNEL << ADMUX_MUX0);
    2fe6:	a7 e2       	ldi	r26, 0x27	; 39
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	e7 e2       	ldi	r30, 0x27	; 39
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	8c 93       	st	X, r24

    #endif


    // /Powering ADC
    ADCSRA |= (1 << ADCSRA_ADEN );
    2ff2:	a6 e2       	ldi	r26, 0x26	; 38
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e6 e2       	ldi	r30, 0x26	; 38
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	80 68       	ori	r24, 0x80	; 128
    2ffe:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3000:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag; 
    3002:	89 81       	ldd	r24, Y+1	; 0x01
}
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <ADC_enu_ReadPolling>:

extern ErrorState_t ADC_enu_ReadPolling(u8 Copy_u8_Channel, u16* Copy_pu16_Result)
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	00 d0       	rcall	.+0      	; 0x3012 <ADC_enu_ReadPolling+0x6>
    3012:	00 d0       	rcall	.+0      	; 0x3014 <ADC_enu_ReadPolling+0x8>
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	8a 83       	std	Y+2, r24	; 0x02
    301a:	7c 83       	std	Y+4, r23	; 0x04
    301c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8_Channel >= ADC_ADC0) && (Copy_u8_Channel <= ADC_V_GND))
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	80 32       	cpi	r24, 0x20	; 32
    3026:	08 f0       	brcs	.+2      	; 0x302a <ADC_enu_ReadPolling+0x1e>
    3028:	50 c0       	rjmp	.+160    	; 0x30ca <ADC_enu_ReadPolling+0xbe>
    {
        //Clearing PIF, Assuming that the ADC is in Polling mode.
        ADCSRA |= (1 << ADCSRA_ADIF);
    302a:	a6 e2       	ldi	r26, 0x26	; 38
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	e6 e2       	ldi	r30, 0x26	; 38
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	80 61       	ori	r24, 0x10	; 16
    3036:	8c 93       	st	X, r24
        
        //Clearing MUX it
        ADMUX &= (0xE0);
    3038:	a7 e2       	ldi	r26, 0x27	; 39
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	e7 e2       	ldi	r30, 0x27	; 39
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	80 7e       	andi	r24, 0xE0	; 224
    3044:	8c 93       	st	X, r24

        //Choosing channel
        ADMUX |= (Copy_u8_Channel << ADMUX_MUX0);
    3046:	a7 e2       	ldi	r26, 0x27	; 39
    3048:	b0 e0       	ldi	r27, 0x00	; 0
    304a:	e7 e2       	ldi	r30, 0x27	; 39
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	90 81       	ld	r25, Z
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	89 2b       	or	r24, r25
    3054:	8c 93       	st	X, r24
       
        //Setting ADSC to start a conversion
        ADCSRA |= (1 << ADCSRA_ADSC);
    3056:	a6 e2       	ldi	r26, 0x26	; 38
    3058:	b0 e0       	ldi	r27, 0x00	; 0
    305a:	e6 e2       	ldi	r30, 0x26	; 38
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	80 81       	ld	r24, Z
    3060:	80 64       	ori	r24, 0x40	; 64
    3062:	8c 93       	st	X, r24

        //Waiting for ADC to raise ADIF
        while (((ADCSRA >> ADCSRA_ADIF) & 1) == False);
    3064:	e6 e2       	ldi	r30, 0x26	; 38
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	82 95       	swap	r24
    306c:	8f 70       	andi	r24, 0x0F	; 15
    306e:	88 2f       	mov	r24, r24
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	81 70       	andi	r24, 0x01	; 1
    3074:	90 70       	andi	r25, 0x00	; 0
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	a9 f3       	breq	.-22     	; 0x3064 <ADC_enu_ReadPolling+0x58>

        
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    307a:	e4 e2       	ldi	r30, 0x24	; 36
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	82 95       	swap	r24
    3082:	86 95       	lsr	r24
    3084:	86 95       	lsr	r24
    3086:	83 70       	andi	r24, 0x03	; 3
    3088:	88 2f       	mov	r24, r24
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	eb 81       	ldd	r30, Y+3	; 0x03
    308e:	fc 81       	ldd	r31, Y+4	; 0x04
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    3094:	eb 81       	ldd	r30, Y+3	; 0x03
    3096:	fc 81       	ldd	r31, Y+4	; 0x04
    3098:	20 81       	ld	r18, Z
    309a:	31 81       	ldd	r19, Z+1	; 0x01
    309c:	e5 e2       	ldi	r30, 0x25	; 37
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	88 2f       	mov	r24, r24
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	88 0f       	add	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	82 2b       	or	r24, r18
    30b0:	93 2b       	or	r25, r19
    30b2:	eb 81       	ldd	r30, Y+3	; 0x03
    30b4:	fc 81       	ldd	r31, Y+4	; 0x04
    30b6:	91 83       	std	Z+1, r25	; 0x01
    30b8:	80 83       	st	Z, r24
            *Copy_pu16_Result |= (u16)ADCH << 8;

        #endif
   
        //Clearing PIF
        ADCSRA |= (1 << ADCSRA_ADIF);
    30ba:	a6 e2       	ldi	r26, 0x26	; 38
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e6 e2       	ldi	r30, 0x26	; 38
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	80 61       	ori	r24, 0x10	; 16
    30c6:	8c 93       	st	X, r24
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <ADC_enu_ReadPolling+0xc2>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    30ca:	82 e0       	ldi	r24, 0x02	; 2
    30cc:	89 83       	std	Y+1, r24	; 0x01
    }


    Local_u8_ErrorFlag = ES_OK;
    30ce:	19 82       	std	Y+1, r1	; 0x01
    

    


    return Local_u8_ErrorFlag;
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	08 95       	ret

000030e0 <ADC_enu_StartConversion>:

extern ErrorState_t ADC_enu_StartConversion(void)
{
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	0f 92       	push	r0
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 <<ADCSRA_ADSC);
    30ee:	a6 e2       	ldi	r26, 0x26	; 38
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	e6 e2       	ldi	r30, 0x26	; 38
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	80 64       	ori	r24, 0x40	; 64
    30fa:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    30fc:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3100:	0f 90       	pop	r0
    3102:	cf 91       	pop	r28
    3104:	df 91       	pop	r29
    3106:	08 95       	ret

00003108 <ADC_enu_SetTriggerringSource>:

extern ErrorState_t ADC_enu_SetTriggerringSource(u8 Copy_u8_TriggeringSource)
{
    3108:	df 93       	push	r29
    310a:	cf 93       	push	r28
    310c:	00 d0       	rcall	.+0      	; 0x310e <ADC_enu_SetTriggerringSource+0x6>
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
    3112:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_u8_TriggeringSource == ADC_SINGLE_CONVERSION)
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	88 30       	cpi	r24, 0x08	; 8
    311c:	49 f4       	brne	.+18     	; 0x3130 <ADC_enu_SetTriggerringSource+0x28>
    {
        //Clearing ADATE bit
        ADCSRA &= ~(1 << ADCSRA_ADATE);
    311e:	a6 e2       	ldi	r26, 0x26	; 38
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	e6 e2       	ldi	r30, 0x26	; 38
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	8f 7d       	andi	r24, 0xDF	; 223
    312a:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    312c:	19 82       	std	Y+1, r1	; 0x01
    312e:	28 c0       	rjmp	.+80     	; 0x3180 <ADC_enu_SetTriggerringSource+0x78>
    }
    else if((Copy_u8_TriggeringSource >= ADC_FREE_RUNNING) && (Copy_u8_TriggeringSource <= ADC_TIMER1_CAPTURE_EVENT))
    3130:	8a 81       	ldd	r24, Y+2	; 0x02
    3132:	88 30       	cpi	r24, 0x08	; 8
    3134:	18 f5       	brcc	.+70     	; 0x317c <ADC_enu_SetTriggerringSource+0x74>
    {
        //Clearing ADTS bits
        SFIOR &= ~ (1 << SFIOR_ADTS0);
    3136:	a0 e5       	ldi	r26, 0x50	; 80
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	e0 e5       	ldi	r30, 0x50	; 80
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	8f 7d       	andi	r24, 0xDF	; 223
    3142:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (Copy_u8_TriggeringSource << SFIOR_ADTS0);
    3144:	a0 e5       	ldi	r26, 0x50	; 80
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	e0 e5       	ldi	r30, 0x50	; 80
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	28 2f       	mov	r18, r24
    3150:	8a 81       	ldd	r24, Y+2	; 0x02
    3152:	88 2f       	mov	r24, r24
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	82 95       	swap	r24
    315c:	92 95       	swap	r25
    315e:	90 7f       	andi	r25, 0xF0	; 240
    3160:	98 27       	eor	r25, r24
    3162:	80 7f       	andi	r24, 0xF0	; 240
    3164:	98 27       	eor	r25, r24
    3166:	82 2b       	or	r24, r18
    3168:	8c 93       	st	X, r24

        //Setting ADATE bit
        ADCSRA |= (1 << ADCSRA_ADATE);
    316a:	a6 e2       	ldi	r26, 0x26	; 38
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	e6 e2       	ldi	r30, 0x26	; 38
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	80 62       	ori	r24, 0x20	; 32
    3176:	8c 93       	st	X, r24

        Local_u8_ErrorFlag =ES_OK;
    3178:	19 82       	std	Y+1, r1	; 0x01
    317a:	02 c0       	rjmp	.+4      	; 0x3180 <ADC_enu_SetTriggerringSource+0x78>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    317c:	82 e0       	ldi	r24, 0x02	; 2
    317e:	89 83       	std	Y+1, r24	; 0x01
    }
        
        

    return Local_u8_ErrorFlag;
    3180:	89 81       	ldd	r24, Y+1	; 0x01
}
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <ADC_enu_ChangePrescalerFactor>:

extern ErrorState_t ADC_enu_ChangePrescalerFactor(u8 Copy_u8_DivisonFactor)
{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	00 d0       	rcall	.+0      	; 0x3192 <ADC_enu_ChangePrescalerFactor+0x6>
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_DivisonFactor >= ADC_PS_2) && (Copy_u8_DivisonFactor <= ADC_PS_128))
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	88 23       	and	r24, r24
    31a0:	a1 f0       	breq	.+40     	; 0x31ca <ADC_enu_ChangePrescalerFactor+0x3e>
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	88 30       	cpi	r24, 0x08	; 8
    31a6:	88 f4       	brcc	.+34     	; 0x31ca <ADC_enu_ChangePrescalerFactor+0x3e>
    {
        //Clearins PS bits
        ADCSRA &= ~ (7 << ADCSRA_ADPS0);
    31a8:	a6 e2       	ldi	r26, 0x26	; 38
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e6 e2       	ldi	r30, 0x26	; 38
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	88 7f       	andi	r24, 0xF8	; 248
    31b4:	8c 93       	st	X, r24

        //Choosing divisuon factor
        ADCSRA |=  (Copy_u8_DivisonFactor << ADCSRA_ADPS0);
    31b6:	a6 e2       	ldi	r26, 0x26	; 38
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	e6 e2       	ldi	r30, 0x26	; 38
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	90 81       	ld	r25, Z
    31c0:	8a 81       	ldd	r24, Y+2	; 0x02
    31c2:	89 2b       	or	r24, r25
    31c4:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    31c6:	19 82       	std	Y+1, r1	; 0x01
    31c8:	02 c0       	rjmp	.+4      	; 0x31ce <ADC_enu_ChangePrescalerFactor+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    31ca:	82 e0       	ldi	r24, 0x02	; 2
    31cc:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <ADC_enu_ReadADCH>:

extern ErrorState_t ADC_enu_ReadADCH(u16* Copy_pu16_Result)
{
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <ADC_enu_ReadADCH+0x6>
    31e0:	0f 92       	push	r0
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	9b 83       	std	Y+3, r25	; 0x03
    31e8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	89 83       	std	Y+1, r24	; 0x01


    if(Copy_pu16_Result)
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	9b 81       	ldd	r25, Y+3	; 0x03
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	79 f0       	breq	.+30     	; 0x3214 <ADC_enu_ReadADCH+0x3a>
            
            *Copy_pu16_Result = (u16)ADCH << 8;
        
        #else ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED

                *Copy_pu16_Result = (u16)ADCH << 2;
    31f6:	e5 e2       	ldi	r30, 0x25	; 37
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	88 2f       	mov	r24, r24
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	ea 81       	ldd	r30, Y+2	; 0x02
    320a:	fb 81       	ldd	r31, Y+3	; 0x03
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24

        #endif

        Local_u8_ErrorFlag = ES_OK;
    3210:	19 82       	std	Y+1, r1	; 0x01
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <ADC_enu_ReadADCH+0x3e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3214:	83 e0       	ldi	r24, 0x03	; 3
    3216:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    3218:	89 81       	ldd	r24, Y+1	; 0x01
}
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	cf 91       	pop	r28
    3222:	df 91       	pop	r29
    3224:	08 95       	ret

00003226 <ADC_enu_ReadADCL>:

extern ErrorState_t ADC_enu_ReadADCL(u16* Copy_pu16_Result)
{
    3226:	df 93       	push	r29
    3228:	cf 93       	push	r28
    322a:	00 d0       	rcall	.+0      	; 0x322c <ADC_enu_ReadADCL+0x6>
    322c:	0f 92       	push	r0
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	9b 83       	std	Y+3, r25	; 0x03
    3234:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	9b 81       	ldd	r25, Y+3	; 0x03
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	11 f0       	breq	.+4      	; 0x3246 <ADC_enu_ReadADCL+0x20>

            

        #endif

        Local_u8_ErrorFlag = ES_OK;
    3242:	19 82       	std	Y+1, r1	; 0x01
    3244:	02 c0       	rjmp	.+4      	; 0x324a <ADC_enu_ReadADCL+0x24>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3246:	83 e0       	ldi	r24, 0x03	; 3
    3248:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    324a:	89 81       	ldd	r24, Y+1	; 0x01
}
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	cf 91       	pop	r28
    3254:	df 91       	pop	r29
    3256:	08 95       	ret

00003258 <ADC_enu_ReadData>:

extern ErrorState_t ADC_enu_ReadData(u16* Copy_pu16_Result)
{
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	00 d0       	rcall	.+0      	; 0x325e <ADC_enu_ReadData+0x6>
    325e:	0f 92       	push	r0
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    3264:	9b 83       	std	Y+3, r25	; 0x03
    3266:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    326c:	8a 81       	ldd	r24, Y+2	; 0x02
    326e:	9b 81       	ldd	r25, Y+3	; 0x03
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	11 f1       	breq	.+68     	; 0x32b8 <ADC_enu_ReadData+0x60>
    {
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    3274:	e4 e2       	ldi	r30, 0x24	; 36
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	82 95       	swap	r24
    327c:	86 95       	lsr	r24
    327e:	86 95       	lsr	r24
    3280:	83 70       	andi	r24, 0x03	; 3
    3282:	88 2f       	mov	r24, r24
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	ea 81       	ldd	r30, Y+2	; 0x02
    3288:	fb 81       	ldd	r31, Y+3	; 0x03
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    328e:	ea 81       	ldd	r30, Y+2	; 0x02
    3290:	fb 81       	ldd	r31, Y+3	; 0x03
    3292:	20 81       	ld	r18, Z
    3294:	31 81       	ldd	r19, Z+1	; 0x01
    3296:	e5 e2       	ldi	r30, 0x25	; 37
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	80 81       	ld	r24, Z
    329c:	88 2f       	mov	r24, r24
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	88 0f       	add	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	82 2b       	or	r24, r18
    32aa:	93 2b       	or	r25, r19
    32ac:	ea 81       	ldd	r30, Y+2	; 0x02
    32ae:	fb 81       	ldd	r31, Y+3	; 0x03
    32b0:	91 83       	std	Z+1, r25	; 0x01
    32b2:	80 83       	st	Z, r24

        #endif

        

        Local_u8_ErrorFlag = ES_OK;
    32b4:	19 82       	std	Y+1, r1	; 0x01
    32b6:	02 c0       	rjmp	.+4      	; 0x32bc <ADC_enu_ReadData+0x64>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    32b8:	83 e0       	ldi	r24, 0x03	; 3
    32ba:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <ADC_enu_EnableINT>:

extern ErrorState_t ADC_enu_EnableINT(void)
{
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	0f 92       	push	r0
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
    
    u8 Local_u8_ErrorFlag = ES_NOK;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADIE);
    32d8:	a6 e2       	ldi	r26, 0x26	; 38
    32da:	b0 e0       	ldi	r27, 0x00	; 0
    32dc:	e6 e2       	ldi	r30, 0x26	; 38
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	80 81       	ld	r24, Z
    32e2:	88 60       	ori	r24, 0x08	; 8
    32e4:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    32e6:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    32ea:	0f 90       	pop	r0
    32ec:	cf 91       	pop	r28
    32ee:	df 91       	pop	r29
    32f0:	08 95       	ret

000032f2 <ADC_enu_DisableINT>:

extern ErrorState_t ADC_enu_DisableINT(void)
{
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	0f 92       	push	r0
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADIE);
    3300:	a6 e2       	ldi	r26, 0x26	; 38
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	e6 e2       	ldi	r30, 0x26	; 38
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	87 7f       	andi	r24, 0xF7	; 247
    330c:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    330e:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3310:	89 81       	ldd	r24, Y+1	; 0x01
}
    3312:	0f 90       	pop	r0
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <ADC_enu_EnableADC>:

extern ErrorState_t ADC_enu_EnableADC(void)
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	0f 92       	push	r0
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADEN);
    3328:	a6 e2       	ldi	r26, 0x26	; 38
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	e6 e2       	ldi	r30, 0x26	; 38
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	80 68       	ori	r24, 0x80	; 128
    3334:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3336:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    3338:	89 81       	ldd	r24, Y+1	; 0x01

}
    333a:	0f 90       	pop	r0
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	08 95       	ret

00003342 <ADC_enu_DisableADC>:

extern ErrorState_t ADC_enu_DisableADC(void)
{
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	0f 92       	push	r0
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADEN);
    3350:	a6 e2       	ldi	r26, 0x26	; 38
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	e6 e2       	ldi	r30, 0x26	; 38
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	8f 77       	andi	r24, 0x7F	; 127
    335c:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    335e:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3360:	89 81       	ldd	r24, Y+1	; 0x01

}
    3362:	0f 90       	pop	r0
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <ADC_enu_SetCallBack>:

extern ErrorState_t ADC_enu_SetCallBack(void (*Copy_pfun_AppFunction)(void), void* Copy_u8_Parameters)
{
    336a:	df 93       	push	r29
    336c:	cf 93       	push	r28
    336e:	00 d0       	rcall	.+0      	; 0x3370 <ADC_enu_SetCallBack+0x6>
    3370:	00 d0       	rcall	.+0      	; 0x3372 <ADC_enu_SetCallBack+0x8>
    3372:	0f 92       	push	r0
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	9b 83       	std	Y+3, r25	; 0x03
    337a:	8a 83       	std	Y+2, r24	; 0x02
    337c:	7d 83       	std	Y+5, r23	; 0x05
    337e:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    3384:	8a 81       	ldd	r24, Y+2	; 0x02
    3386:	9b 81       	ldd	r25, Y+3	; 0x03
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	69 f0       	breq	.+26     	; 0x33a6 <ADC_enu_SetCallBack+0x3c>
    {
        pfun_ISRPointer = Copy_pfun_AppFunction;
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	9b 81       	ldd	r25, Y+3	; 0x03
    3390:	90 93 d5 01 	sts	0x01D5, r25
    3394:	80 93 d4 01 	sts	0x01D4, r24

        pvid_ISRParameters = Copy_u8_Parameters;
    3398:	8c 81       	ldd	r24, Y+4	; 0x04
    339a:	9d 81       	ldd	r25, Y+5	; 0x05
    339c:	90 93 d7 01 	sts	0x01D7, r25
    33a0:	80 93 d6 01 	sts	0x01D6, r24
        
        Local_u8_ErrorFlag = ES_OK;
    33a4:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_ErrorFlag;
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	08 95       	ret

000033b8 <__vector_16>:

//ISR functions

void __vector_16 (void)__attribute__((signal));
void __vector_16 (void)
{
    33b8:	1f 92       	push	r1
    33ba:	0f 92       	push	r0
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	0f 92       	push	r0
    33c0:	11 24       	eor	r1, r1
    33c2:	2f 93       	push	r18
    33c4:	3f 93       	push	r19
    33c6:	4f 93       	push	r20
    33c8:	5f 93       	push	r21
    33ca:	6f 93       	push	r22
    33cc:	7f 93       	push	r23
    33ce:	8f 93       	push	r24
    33d0:	9f 93       	push	r25
    33d2:	af 93       	push	r26
    33d4:	bf 93       	push	r27
    33d6:	ef 93       	push	r30
    33d8:	ff 93       	push	r31
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    if (pfun_ISRPointer != NULL)
    33e2:	80 91 d4 01 	lds	r24, 0x01D4
    33e6:	90 91 d5 01 	lds	r25, 0x01D5
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	49 f0       	breq	.+18     	; 0x3400 <__vector_16+0x48>
    {
        pfun_ISRPointer (pvid_ISRParameters);
    33ee:	e0 91 d4 01 	lds	r30, 0x01D4
    33f2:	f0 91 d5 01 	lds	r31, 0x01D5
    33f6:	80 91 d6 01 	lds	r24, 0x01D6
    33fa:	90 91 d7 01 	lds	r25, 0x01D7
    33fe:	09 95       	icall
    }
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	ff 91       	pop	r31
    3406:	ef 91       	pop	r30
    3408:	bf 91       	pop	r27
    340a:	af 91       	pop	r26
    340c:	9f 91       	pop	r25
    340e:	8f 91       	pop	r24
    3410:	7f 91       	pop	r23
    3412:	6f 91       	pop	r22
    3414:	5f 91       	pop	r21
    3416:	4f 91       	pop	r20
    3418:	3f 91       	pop	r19
    341a:	2f 91       	pop	r18
    341c:	0f 90       	pop	r0
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	0f 90       	pop	r0
    3422:	1f 90       	pop	r1
    3424:	18 95       	reti

00003426 <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	00 d0       	rcall	.+0      	; 0x342c <SW_enu_Initialization+0x6>
    342c:	00 d0       	rcall	.+0      	; 0x342e <SW_enu_Initialization+0x8>
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
    3432:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};
    3434:	1b 82       	std	Y+3, r1	; 0x03
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	8c 83       	std	Y+4, r24	; 0x04

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    343a:	19 82       	std	Y+1, r1	; 0x01
    343c:	53 c0       	rjmp	.+166    	; 0x34e4 <SW_enu_Initialization+0xbe>
    {
        
       Local_au8_ErrorStates[0] = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	28 2f       	mov	r18, r24
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	c9 01       	movw	r24, r18
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	82 0f       	add	r24, r18
    344c:	93 1f       	adc	r25, r19
    344e:	fc 01       	movw	r30, r24
    3450:	e8 58       	subi	r30, 0x88	; 136
    3452:	fe 4f       	sbci	r31, 0xFE	; 254
    3454:	40 81       	ld	r20, Z
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	28 2f       	mov	r18, r24
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	c9 01       	movw	r24, r18
    345e:	88 0f       	add	r24, r24
    3460:	99 1f       	adc	r25, r25
    3462:	82 0f       	add	r24, r18
    3464:	93 1f       	adc	r25, r19
    3466:	fc 01       	movw	r30, r24
    3468:	e7 58       	subi	r30, 0x87	; 135
    346a:	fe 4f       	sbci	r31, 0xFE	; 254
    346c:	90 81       	ld	r25, Z
    346e:	84 2f       	mov	r24, r20
    3470:	69 2f       	mov	r22, r25
    3472:	40 e0       	ldi	r20, 0x00	; 0
    3474:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
    3478:	8b 83       	std	Y+3, r24	; 0x03

       Local_au8_ErrorStates[1] = DIO_enu_SetPinState(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	28 2f       	mov	r18, r24
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	c9 01       	movw	r24, r18
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	82 0f       	add	r24, r18
    3488:	93 1f       	adc	r25, r19
    348a:	fc 01       	movw	r30, r24
    348c:	e8 58       	subi	r30, 0x88	; 136
    348e:	fe 4f       	sbci	r31, 0xFE	; 254
    3490:	50 81       	ld	r21, Z
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	28 2f       	mov	r18, r24
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	c9 01       	movw	r24, r18
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	82 0f       	add	r24, r18
    34a0:	93 1f       	adc	r25, r19
    34a2:	fc 01       	movw	r30, r24
    34a4:	e7 58       	subi	r30, 0x87	; 135
    34a6:	fe 4f       	sbci	r31, 0xFE	; 254
    34a8:	40 81       	ld	r20, Z
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	28 2f       	mov	r18, r24
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	c9 01       	movw	r24, r18
    34b2:	88 0f       	add	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	82 0f       	add	r24, r18
    34b8:	93 1f       	adc	r25, r19
    34ba:	fc 01       	movw	r30, r24
    34bc:	e6 58       	subi	r30, 0x86	; 134
    34be:	fe 4f       	sbci	r31, 0xFE	; 254
    34c0:	90 81       	ld	r25, Z
    34c2:	85 2f       	mov	r24, r21
    34c4:	64 2f       	mov	r22, r20
    34c6:	49 2f       	mov	r20, r25
    34c8:	0e 94 9b 14 	call	0x2936	; 0x2936 <DIO_enu_SetPinState>
    34cc:	8c 83       	std	Y+4, r24	; 0x04
   
        if((Local_au8_ErrorStates[0] == ES_NOK ) || (Local_au8_ErrorStates[1] == ES_NOK) )
    34ce:	8b 81       	ldd	r24, Y+3	; 0x03
    34d0:	81 30       	cpi	r24, 0x01	; 1
    34d2:	19 f0       	breq	.+6      	; 0x34da <SW_enu_Initialization+0xb4>
    34d4:	8c 81       	ldd	r24, Y+4	; 0x04
    34d6:	81 30       	cpi	r24, 0x01	; 1
    34d8:	11 f4       	brne	.+4      	; 0x34de <SW_enu_Initialization+0xb8>
        {
            Local_u8_ErrorFlag = ES_NOK;
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	8a 83       	std	Y+2, r24	; 0x02
{
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	8f 5f       	subi	r24, 0xFF	; 255
    34e2:	89 83       	std	Y+1, r24	; 0x01
    34e4:	90 91 77 01 	lds	r25, 0x0177
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	89 17       	cp	r24, r25
    34ec:	08 f4       	brcc	.+2      	; 0x34f0 <SW_enu_Initialization+0xca>
    34ee:	a7 cf       	rjmp	.-178    	; 0x343e <SW_enu_Initialization+0x18>
        }

    }


    return Local_u8_ErrorFlag;
    34f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	cf 91       	pop	r28
    34fc:	df 91       	pop	r29
    34fe:	08 95       	ret

00003500 <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    3500:	df 93       	push	r29
    3502:	cf 93       	push	r28
    3504:	00 d0       	rcall	.+0      	; 0x3506 <SW_enu_GetSwValue+0x6>
    3506:	00 d0       	rcall	.+0      	; 0x3508 <SW_enu_GetSwValue+0x8>
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	8a 83       	std	Y+2, r24	; 0x02
    350e:	7c 83       	std	Y+4, r23	; 0x04
    3510:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    3516:	8b 81       	ldd	r24, Y+3	; 0x03
    3518:	9c 81       	ldd	r25, Y+4	; 0x04
    351a:	00 97       	sbiw	r24, 0x00	; 0
    351c:	49 f1       	breq	.+82     	; 0x3570 <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    351e:	90 91 77 01 	lds	r25, 0x0177
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	98 17       	cp	r25, r24
    3526:	08 f1       	brcs	.+66     	; 0x356a <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    3528:	8a 81       	ldd	r24, Y+2	; 0x02
    352a:	28 2f       	mov	r18, r24
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	c9 01       	movw	r24, r18
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	82 0f       	add	r24, r18
    3536:	93 1f       	adc	r25, r19
    3538:	fc 01       	movw	r30, r24
    353a:	e8 58       	subi	r30, 0x88	; 136
    353c:	fe 4f       	sbci	r31, 0xFE	; 254
    353e:	40 81       	ld	r20, Z
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	28 2f       	mov	r18, r24
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	c9 01       	movw	r24, r18
    3548:	88 0f       	add	r24, r24
    354a:	99 1f       	adc	r25, r25
    354c:	82 0f       	add	r24, r18
    354e:	93 1f       	adc	r25, r19
    3550:	fc 01       	movw	r30, r24
    3552:	e7 58       	subi	r30, 0x87	; 135
    3554:	fe 4f       	sbci	r31, 0xFE	; 254
    3556:	90 81       	ld	r25, Z
    3558:	2b 81       	ldd	r18, Y+3	; 0x03
    355a:	3c 81       	ldd	r19, Y+4	; 0x04
    355c:	84 2f       	mov	r24, r20
    355e:	69 2f       	mov	r22, r25
    3560:	a9 01       	movw	r20, r18
    3562:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_enu_GetPinValue>
    3566:	89 83       	std	Y+1, r24	; 0x01
    3568:	05 c0       	rjmp	.+10     	; 0x3574 <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    356a:	82 e0       	ldi	r24, 0x02	; 2
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	02 c0       	rjmp	.+4      	; 0x3574 <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3570:	83 e0       	ldi	r24, 0x03	; 3
    3572:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3574:	89 81       	ldd	r24, Y+1	; 0x01

}
    3576:	0f 90       	pop	r0
    3578:	0f 90       	pop	r0
    357a:	0f 90       	pop	r0
    357c:	0f 90       	pop	r0
    357e:	cf 91       	pop	r28
    3580:	df 91       	pop	r29
    3582:	08 95       	ret

00003584 <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    3584:	df 93       	push	r29
    3586:	cf 93       	push	r28
    3588:	00 d0       	rcall	.+0      	; 0x358a <Relay_enu_Initialization+0x6>
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3592:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3594:	19 82       	std	Y+1, r1	; 0x01
    3596:	31 c0       	rjmp	.+98     	; 0x35fa <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	88 2f       	mov	r24, r24
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	fc 01       	movw	r30, r24
    35a4:	e4 58       	subi	r30, 0x84	; 132
    35a6:	fe 4f       	sbci	r31, 0xFE	; 254
    35a8:	20 81       	ld	r18, Z
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	88 2f       	mov	r24, r24
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	88 0f       	add	r24, r24
    35b2:	99 1f       	adc	r25, r25
    35b4:	fc 01       	movw	r30, r24
    35b6:	e3 58       	subi	r30, 0x83	; 131
    35b8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ba:	90 81       	ld	r25, Z
    35bc:	82 2f       	mov	r24, r18
    35be:	69 2f       	mov	r22, r25
    35c0:	41 e0       	ldi	r20, 0x01	; 1
    35c2:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	fc 01       	movw	r30, r24
    35d2:	e4 58       	subi	r30, 0x84	; 132
    35d4:	fe 4f       	sbci	r31, 0xFE	; 254
    35d6:	20 81       	ld	r18, Z
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	88 2f       	mov	r24, r24
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	88 0f       	add	r24, r24
    35e0:	99 1f       	adc	r25, r25
    35e2:	fc 01       	movw	r30, r24
    35e4:	e3 58       	subi	r30, 0x83	; 131
    35e6:	fe 4f       	sbci	r31, 0xFE	; 254
    35e8:	90 81       	ld	r25, Z
    35ea:	82 2f       	mov	r24, r18
    35ec:	69 2f       	mov	r22, r25
    35ee:	40 e0       	ldi	r20, 0x00	; 0
    35f0:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	8f 5f       	subi	r24, 0xFF	; 255
    35f8:	89 83       	std	Y+1, r24	; 0x01
    35fa:	90 91 7b 01 	lds	r25, 0x017B
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	89 17       	cp	r24, r25
    3602:	50 f2       	brcs	.-108    	; 0x3598 <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    3604:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	00 d0       	rcall	.+0      	; 0x3618 <Relay_enu_TuronOnRelay+0x6>
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    3622:	90 91 7b 01 	lds	r25, 0x017B
    3626:	8a 81       	ldd	r24, Y+2	; 0x02
    3628:	89 17       	cp	r24, r25
    362a:	c8 f4       	brcc	.+50     	; 0x365e <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	88 2f       	mov	r24, r24
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	88 0f       	add	r24, r24
    3634:	99 1f       	adc	r25, r25
    3636:	fc 01       	movw	r30, r24
    3638:	e4 58       	subi	r30, 0x84	; 132
    363a:	fe 4f       	sbci	r31, 0xFE	; 254
    363c:	20 81       	ld	r18, Z
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	88 2f       	mov	r24, r24
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	88 0f       	add	r24, r24
    3646:	99 1f       	adc	r25, r25
    3648:	fc 01       	movw	r30, r24
    364a:	e3 58       	subi	r30, 0x83	; 131
    364c:	fe 4f       	sbci	r31, 0xFE	; 254
    364e:	90 81       	ld	r25, Z
    3650:	82 2f       	mov	r24, r18
    3652:	69 2f       	mov	r22, r25
    3654:	41 e0       	ldi	r20, 0x01	; 1
    3656:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    365a:	89 83       	std	Y+1, r24	; 0x01
    365c:	02 c0       	rjmp	.+4      	; 0x3662 <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    365e:	82 e0       	ldi	r24, 0x02	; 2
    3660:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    3662:	89 81       	ldd	r24, Y+1	; 0x01
}
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	08 95       	ret

0000366e <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    366e:	df 93       	push	r29
    3670:	cf 93       	push	r28
    3672:	00 d0       	rcall	.+0      	; 0x3674 <Relay_enu_TuronOffRelay+0x6>
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
    3678:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    367e:	90 91 7b 01 	lds	r25, 0x017B
    3682:	8a 81       	ldd	r24, Y+2	; 0x02
    3684:	89 17       	cp	r24, r25
    3686:	c8 f4       	brcc	.+50     	; 0x36ba <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	88 2f       	mov	r24, r24
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	88 0f       	add	r24, r24
    3690:	99 1f       	adc	r25, r25
    3692:	fc 01       	movw	r30, r24
    3694:	e4 58       	subi	r30, 0x84	; 132
    3696:	fe 4f       	sbci	r31, 0xFE	; 254
    3698:	20 81       	ld	r18, Z
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	88 2f       	mov	r24, r24
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	88 0f       	add	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	fc 01       	movw	r30, r24
    36a6:	e3 58       	subi	r30, 0x83	; 131
    36a8:	fe 4f       	sbci	r31, 0xFE	; 254
    36aa:	90 81       	ld	r25, Z
    36ac:	82 2f       	mov	r24, r18
    36ae:	69 2f       	mov	r22, r25
    36b0:	40 e0       	ldi	r20, 0x00	; 0
    36b2:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    36b6:	89 83       	std	Y+1, r24	; 0x01
    36b8:	02 c0       	rjmp	.+4      	; 0x36be <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    36ba:	82 e0       	ldi	r24, 0x02	; 2
    36bc:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    36be:	89 81       	ldd	r24, Y+1	; 0x01
}
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <Relay_enu_TurnOnAllRelays+0x6>
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    36d8:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    36da:	19 82       	std	Y+1, r1	; 0x01
    36dc:	1a c0       	rjmp	.+52     	; 0x3712 <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	88 2f       	mov	r24, r24
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	88 0f       	add	r24, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	fc 01       	movw	r30, r24
    36ea:	e4 58       	subi	r30, 0x84	; 132
    36ec:	fe 4f       	sbci	r31, 0xFE	; 254
    36ee:	20 81       	ld	r18, Z
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	88 2f       	mov	r24, r24
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	88 0f       	add	r24, r24
    36f8:	99 1f       	adc	r25, r25
    36fa:	fc 01       	movw	r30, r24
    36fc:	e3 58       	subi	r30, 0x83	; 131
    36fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3700:	90 81       	ld	r25, Z
    3702:	82 2f       	mov	r24, r18
    3704:	69 2f       	mov	r22, r25
    3706:	41 e0       	ldi	r20, 0x01	; 1
    3708:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    370c:	89 81       	ldd	r24, Y+1	; 0x01
    370e:	8f 5f       	subi	r24, 0xFF	; 255
    3710:	89 83       	std	Y+1, r24	; 0x01
    3712:	90 91 7b 01 	lds	r25, 0x017B
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	89 17       	cp	r24, r25
    371a:	08 f3       	brcs	.-62     	; 0x36de <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    371c:	82 e0       	ldi	r24, 0x02	; 2
    371e:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    3720:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	00 d0       	rcall	.+0      	; 0x3732 <Relay_enu_TurnOffAllRelays+0x6>
    3732:	cd b7       	in	r28, 0x3d	; 61
    3734:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    373a:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    373c:	19 82       	std	Y+1, r1	; 0x01
    373e:	1a c0       	rjmp	.+52     	; 0x3774 <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	88 2f       	mov	r24, r24
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	88 0f       	add	r24, r24
    3748:	99 1f       	adc	r25, r25
    374a:	fc 01       	movw	r30, r24
    374c:	e4 58       	subi	r30, 0x84	; 132
    374e:	fe 4f       	sbci	r31, 0xFE	; 254
    3750:	20 81       	ld	r18, Z
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	88 2f       	mov	r24, r24
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	88 0f       	add	r24, r24
    375a:	99 1f       	adc	r25, r25
    375c:	fc 01       	movw	r30, r24
    375e:	e3 58       	subi	r30, 0x83	; 131
    3760:	fe 4f       	sbci	r31, 0xFE	; 254
    3762:	90 81       	ld	r25, Z
    3764:	82 2f       	mov	r24, r18
    3766:	69 2f       	mov	r22, r25
    3768:	40 e0       	ldi	r20, 0x00	; 0
    376a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	8f 5f       	subi	r24, 0xFF	; 255
    3772:	89 83       	std	Y+1, r24	; 0x01
    3774:	90 91 7b 01 	lds	r25, 0x017B
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	89 17       	cp	r24, r25
    377c:	08 f3       	brcs	.-62     	; 0x3740 <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	00 d0       	rcall	.+0      	; 0x3790 <LED_enu_Initialization+0x6>
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    3798:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    379a:	19 82       	std	Y+1, r1	; 0x01
    379c:	31 c0       	rjmp	.+98     	; 0x3800 <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    379e:	89 81       	ldd	r24, Y+1	; 0x01
    37a0:	88 2f       	mov	r24, r24
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	88 0f       	add	r24, r24
    37a6:	99 1f       	adc	r25, r25
    37a8:	fc 01       	movw	r30, r24
    37aa:	e1 58       	subi	r30, 0x81	; 129
    37ac:	fe 4f       	sbci	r31, 0xFE	; 254
    37ae:	20 81       	ld	r18, Z
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	88 2f       	mov	r24, r24
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	88 0f       	add	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	fc 01       	movw	r30, r24
    37bc:	e0 58       	subi	r30, 0x80	; 128
    37be:	fe 4f       	sbci	r31, 0xFE	; 254
    37c0:	90 81       	ld	r25, Z
    37c2:	82 2f       	mov	r24, r18
    37c4:	69 2f       	mov	r22, r25
    37c6:	41 e0       	ldi	r20, 0x01	; 1
    37c8:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	88 2f       	mov	r24, r24
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	fc 01       	movw	r30, r24
    37d8:	e1 58       	subi	r30, 0x81	; 129
    37da:	fe 4f       	sbci	r31, 0xFE	; 254
    37dc:	20 81       	ld	r18, Z
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	88 2f       	mov	r24, r24
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	88 0f       	add	r24, r24
    37e6:	99 1f       	adc	r25, r25
    37e8:	fc 01       	movw	r30, r24
    37ea:	e0 58       	subi	r30, 0x80	; 128
    37ec:	fe 4f       	sbci	r31, 0xFE	; 254
    37ee:	90 81       	ld	r25, Z
    37f0:	82 2f       	mov	r24, r18
    37f2:	69 2f       	mov	r22, r25
    37f4:	40 e0       	ldi	r20, 0x00	; 0
    37f6:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
    37fc:	8f 5f       	subi	r24, 0xFF	; 255
    37fe:	89 83       	std	Y+1, r24	; 0x01
    3800:	90 91 7e 01 	lds	r25, 0x017E
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	89 17       	cp	r24, r25
    3808:	50 f2       	brcs	.-108    	; 0x379e <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    380a:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    380c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	08 95       	ret

00003818 <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    3818:	df 93       	push	r29
    381a:	cf 93       	push	r28
    381c:	00 d0       	rcall	.+0      	; 0x381e <LED_enu_TurnOnLED+0x6>
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    3828:	90 91 7e 01 	lds	r25, 0x017E
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	89 17       	cp	r24, r25
    3830:	c8 f4       	brcc	.+50     	; 0x3864 <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    3832:	8a 81       	ldd	r24, Y+2	; 0x02
    3834:	88 2f       	mov	r24, r24
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	88 0f       	add	r24, r24
    383a:	99 1f       	adc	r25, r25
    383c:	fc 01       	movw	r30, r24
    383e:	e1 58       	subi	r30, 0x81	; 129
    3840:	fe 4f       	sbci	r31, 0xFE	; 254
    3842:	20 81       	ld	r18, Z
    3844:	8a 81       	ldd	r24, Y+2	; 0x02
    3846:	88 2f       	mov	r24, r24
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	88 0f       	add	r24, r24
    384c:	99 1f       	adc	r25, r25
    384e:	fc 01       	movw	r30, r24
    3850:	e0 58       	subi	r30, 0x80	; 128
    3852:	fe 4f       	sbci	r31, 0xFE	; 254
    3854:	90 81       	ld	r25, Z
    3856:	82 2f       	mov	r24, r18
    3858:	69 2f       	mov	r22, r25
    385a:	41 e0       	ldi	r20, 0x01	; 1
    385c:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    3860:	89 83       	std	Y+1, r24	; 0x01
    3862:	02 c0       	rjmp	.+4      	; 0x3868 <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3864:	82 e0       	ldi	r24, 0x02	; 2
    3866:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3868:	89 81       	ldd	r24, Y+1	; 0x01
}
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	00 d0       	rcall	.+0      	; 0x387a <LED_enu_TurnOffLED+0x6>
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
    387e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    3884:	90 91 7e 01 	lds	r25, 0x017E
    3888:	8a 81       	ldd	r24, Y+2	; 0x02
    388a:	98 17       	cp	r25, r24
    388c:	c8 f0       	brcs	.+50     	; 0x38c0 <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    388e:	8a 81       	ldd	r24, Y+2	; 0x02
    3890:	88 2f       	mov	r24, r24
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	88 0f       	add	r24, r24
    3896:	99 1f       	adc	r25, r25
    3898:	fc 01       	movw	r30, r24
    389a:	e1 58       	subi	r30, 0x81	; 129
    389c:	fe 4f       	sbci	r31, 0xFE	; 254
    389e:	20 81       	ld	r18, Z
    38a0:	8a 81       	ldd	r24, Y+2	; 0x02
    38a2:	88 2f       	mov	r24, r24
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	88 0f       	add	r24, r24
    38a8:	99 1f       	adc	r25, r25
    38aa:	fc 01       	movw	r30, r24
    38ac:	e0 58       	subi	r30, 0x80	; 128
    38ae:	fe 4f       	sbci	r31, 0xFE	; 254
    38b0:	90 81       	ld	r25, Z
    38b2:	82 2f       	mov	r24, r18
    38b4:	69 2f       	mov	r22, r25
    38b6:	40 e0       	ldi	r20, 0x00	; 0
    38b8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    38bc:	89 83       	std	Y+1, r24	; 0x01
    38be:	02 c0       	rjmp	.+4      	; 0x38c4 <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    38c0:	82 e0       	ldi	r24, 0x02	; 2
    38c2:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    38c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <LED_enu_TurnOnCombination>:

extern ErrorState_t LED_enu_TurnOnCombination(u8 Copy_u8_Combination)
{
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	00 d0       	rcall	.+0      	; 0x38d6 <LED_enu_TurnOnCombination+0x6>
    38d6:	00 d0       	rcall	.+0      	; 0x38d8 <LED_enu_TurnOnCombination+0x8>
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
    38dc:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_OK;
    38de:	1b 82       	std	Y+3, r1	; 0x03
    
    u8 Local_u8_TempErrorFlag = ES_OK;
    38e0:	1a 82       	std	Y+2, r1	; 0x02


    if(Copy_u8_Combination <= 7 )
    38e2:	8c 81       	ldd	r24, Y+4	; 0x04
    38e4:	88 30       	cpi	r24, 0x08	; 8
    38e6:	d8 f5       	brcc	.+118    	; 0x395e <LED_enu_TurnOnCombination+0x8e>
    {
        s8 Local_s8_Counter = 0;
    38e8:	19 82       	std	Y+1, r1	; 0x01

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    38ea:	8c 81       	ldd	r24, Y+4	; 0x04
    38ec:	81 50       	subi	r24, 0x01	; 1
    38ee:	89 83       	std	Y+1, r24	; 0x01
    38f0:	32 c0       	rjmp	.+100    	; 0x3956 <LED_enu_TurnOnCombination+0x86>
        {
           Local_u8_TempErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Local_s8_Counter].LED_Group, LED_astr_LEDsList[Local_s8_Counter].LED_Pin, (Copy_u8_Combination >> Local_s8_Counter) & 1 );
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	99 27       	eor	r25, r25
    38f6:	87 fd       	sbrc	r24, 7
    38f8:	90 95       	com	r25
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	fc 01       	movw	r30, r24
    3900:	e1 58       	subi	r30, 0x81	; 129
    3902:	fe 4f       	sbci	r31, 0xFE	; 254
    3904:	50 81       	ld	r21, Z
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	99 27       	eor	r25, r25
    390a:	87 fd       	sbrc	r24, 7
    390c:	90 95       	com	r25
    390e:	88 0f       	add	r24, r24
    3910:	99 1f       	adc	r25, r25
    3912:	fc 01       	movw	r30, r24
    3914:	e0 58       	subi	r30, 0x80	; 128
    3916:	fe 4f       	sbci	r31, 0xFE	; 254
    3918:	40 81       	ld	r20, Z
    391a:	8c 81       	ldd	r24, Y+4	; 0x04
    391c:	28 2f       	mov	r18, r24
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	89 81       	ldd	r24, Y+1	; 0x01
    3922:	99 27       	eor	r25, r25
    3924:	87 fd       	sbrc	r24, 7
    3926:	90 95       	com	r25
    3928:	b9 01       	movw	r22, r18
    392a:	02 c0       	rjmp	.+4      	; 0x3930 <LED_enu_TurnOnCombination+0x60>
    392c:	75 95       	asr	r23
    392e:	67 95       	ror	r22
    3930:	8a 95       	dec	r24
    3932:	e2 f7       	brpl	.-8      	; 0x392c <LED_enu_TurnOnCombination+0x5c>
    3934:	cb 01       	movw	r24, r22
    3936:	98 2f       	mov	r25, r24
    3938:	91 70       	andi	r25, 0x01	; 1
    393a:	85 2f       	mov	r24, r21
    393c:	64 2f       	mov	r22, r20
    393e:	49 2f       	mov	r20, r25
    3940:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    3944:	8a 83       	std	Y+2, r24	; 0x02

            if(Local_u8_TempErrorFlag == ES_NOK)
    3946:	8a 81       	ldd	r24, Y+2	; 0x02
    3948:	81 30       	cpi	r24, 0x01	; 1
    394a:	11 f4       	brne	.+4      	; 0x3950 <LED_enu_TurnOnCombination+0x80>
            {
                Local_u8_ErrorFlag = ES_NOK;
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	8b 83       	std	Y+3, r24	; 0x03

    if(Copy_u8_Combination <= 7 )
    {
        s8 Local_s8_Counter = 0;

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	81 50       	subi	r24, 0x01	; 1
    3954:	89 83       	std	Y+1, r24	; 0x01
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	88 23       	and	r24, r24
    395a:	5c f6       	brge	.-106    	; 0x38f2 <LED_enu_TurnOnCombination+0x22>
    395c:	02 c0       	rjmp	.+4      	; 0x3962 <LED_enu_TurnOnCombination+0x92>
        }
        
    } 
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    395e:	82 e0       	ldi	r24, 0x02	; 2
    3960:	8b 83       	std	Y+3, r24	; 0x03
    }

    return Local_u8_ErrorFlag;
    3962:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	0f 90       	pop	r0
    396a:	0f 90       	pop	r0
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	08 95       	ret

00003972 <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    3972:	df 93       	push	r29
    3974:	cf 93       	push	r28
    3976:	00 d0       	rcall	.+0      	; 0x3978 <LED_enu_TurnOnAllLEDs+0x6>
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3980:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3982:	19 82       	std	Y+1, r1	; 0x01
    3984:	1a c0       	rjmp	.+52     	; 0x39ba <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	88 2f       	mov	r24, r24
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	fc 01       	movw	r30, r24
    3992:	e1 58       	subi	r30, 0x81	; 129
    3994:	fe 4f       	sbci	r31, 0xFE	; 254
    3996:	20 81       	ld	r18, Z
    3998:	89 81       	ldd	r24, Y+1	; 0x01
    399a:	88 2f       	mov	r24, r24
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	88 0f       	add	r24, r24
    39a0:	99 1f       	adc	r25, r25
    39a2:	fc 01       	movw	r30, r24
    39a4:	e0 58       	subi	r30, 0x80	; 128
    39a6:	fe 4f       	sbci	r31, 0xFE	; 254
    39a8:	90 81       	ld	r25, Z
    39aa:	82 2f       	mov	r24, r18
    39ac:	69 2f       	mov	r22, r25
    39ae:	41 e0       	ldi	r20, 0x01	; 1
    39b0:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    39b4:	89 81       	ldd	r24, Y+1	; 0x01
    39b6:	8f 5f       	subi	r24, 0xFF	; 255
    39b8:	89 83       	std	Y+1, r24	; 0x01
    39ba:	90 91 7e 01 	lds	r25, 0x017E
    39be:	89 81       	ldd	r24, Y+1	; 0x01
    39c0:	89 17       	cp	r24, r25
    39c2:	08 f3       	brcs	.-62     	; 0x3986 <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    39c4:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    39c6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	cf 91       	pop	r28
    39ce:	df 91       	pop	r29
    39d0:	08 95       	ret

000039d2 <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    39d2:	df 93       	push	r29
    39d4:	cf 93       	push	r28
    39d6:	00 d0       	rcall	.+0      	; 0x39d8 <LED_enu_TurnOffAllLEDs+0x6>
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    39e0:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    39e2:	19 82       	std	Y+1, r1	; 0x01
    39e4:	1a c0       	rjmp	.+52     	; 0x3a1a <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    39e6:	89 81       	ldd	r24, Y+1	; 0x01
    39e8:	88 2f       	mov	r24, r24
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	fc 01       	movw	r30, r24
    39f2:	e1 58       	subi	r30, 0x81	; 129
    39f4:	fe 4f       	sbci	r31, 0xFE	; 254
    39f6:	20 81       	ld	r18, Z
    39f8:	89 81       	ldd	r24, Y+1	; 0x01
    39fa:	88 2f       	mov	r24, r24
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	88 0f       	add	r24, r24
    3a00:	99 1f       	adc	r25, r25
    3a02:	fc 01       	movw	r30, r24
    3a04:	e0 58       	subi	r30, 0x80	; 128
    3a06:	fe 4f       	sbci	r31, 0xFE	; 254
    3a08:	90 81       	ld	r25, Z
    3a0a:	82 2f       	mov	r24, r18
    3a0c:	69 2f       	mov	r22, r25
    3a0e:	40 e0       	ldi	r20, 0x00	; 0
    3a10:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3a14:	89 81       	ldd	r24, Y+1	; 0x01
    3a16:	8f 5f       	subi	r24, 0xFF	; 255
    3a18:	89 83       	std	Y+1, r24	; 0x01
    3a1a:	90 91 7e 01 	lds	r25, 0x017E
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	89 17       	cp	r24, r25
    3a22:	08 f3       	brcs	.-62     	; 0x39e6 <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    3a24:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    3a26:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3a28:	0f 90       	pop	r0
    3a2a:	0f 90       	pop	r0
    3a2c:	cf 91       	pop	r28
    3a2e:	df 91       	pop	r29
    3a30:	08 95       	ret

00003a32 <LED_enu_GetLEDCount>:

extern ErrorState_t LED_enu_GetLEDCount(u8* Copy_u8_Count)
{
    3a32:	df 93       	push	r29
    3a34:	cf 93       	push	r28
    3a36:	00 d0       	rcall	.+0      	; 0x3a38 <LED_enu_GetLEDCount+0x6>
    3a38:	0f 92       	push	r0
    3a3a:	cd b7       	in	r28, 0x3d	; 61
    3a3c:	de b7       	in	r29, 0x3e	; 62
    3a3e:	9b 83       	std	Y+3, r25	; 0x03
    3a40:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Count)
    3a46:	8a 81       	ldd	r24, Y+2	; 0x02
    3a48:	9b 81       	ldd	r25, Y+3	; 0x03
    3a4a:	00 97       	sbiw	r24, 0x00	; 0
    3a4c:	39 f0       	breq	.+14     	; 0x3a5c <LED_enu_GetLEDCount+0x2a>
    {
        *Copy_u8_Count = LED_u8_LEDsCount;
    3a4e:	80 91 7e 01 	lds	r24, 0x017E
    3a52:	ea 81       	ldd	r30, Y+2	; 0x02
    3a54:	fb 81       	ldd	r31, Y+3	; 0x03
    3a56:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    3a58:	19 82       	std	Y+1, r1	; 0x01
    3a5a:	02 c0       	rjmp	.+4      	; 0x3a60 <LED_enu_GetLEDCount+0x2e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3a5c:	83 e0       	ldi	r24, 0x03	; 3
    3a5e:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	cf 91       	pop	r28
    3a6a:	df 91       	pop	r29
    3a6c:	08 95       	ret

00003a6e <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    3a6e:	df 93       	push	r29
    3a70:	cf 93       	push	r28
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	6d 97       	sbiw	r28, 0x1d	; 29
    3a78:	0f b6       	in	r0, 0x3f	; 63
    3a7a:	f8 94       	cli
    3a7c:	de bf       	out	0x3e, r29	; 62
    3a7e:	0f be       	out	0x3f, r0	; 63
    3a80:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	8d 8f       	std	Y+29, r24	; 0x1d
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	ac e0       	ldi	r26, 0x0C	; 12
    3a8c:	b2 e4       	ldi	r27, 0x42	; 66
    3a8e:	89 8f       	std	Y+25, r24	; 0x19
    3a90:	9a 8f       	std	Y+26, r25	; 0x1a
    3a92:	ab 8f       	std	Y+27, r26	; 0x1b
    3a94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a96:	69 8d       	ldd	r22, Y+25	; 0x19
    3a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	4a e7       	ldi	r20, 0x7A	; 122
    3aa4:	55 e4       	ldi	r21, 0x45	; 69
    3aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	8d 8b       	std	Y+21, r24	; 0x15
    3ab0:	9e 8b       	std	Y+22, r25	; 0x16
    3ab2:	af 8b       	std	Y+23, r26	; 0x17
    3ab4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    3aba:	8f 89       	ldd	r24, Y+23	; 0x17
    3abc:	98 8d       	ldd	r25, Y+24	; 0x18
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	40 e8       	ldi	r20, 0x80	; 128
    3ac4:	5f e3       	ldi	r21, 0x3F	; 63
    3ac6:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3aca:	88 23       	and	r24, r24
    3acc:	2c f4       	brge	.+10     	; 0x3ad8 <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	9c 8b       	std	Y+20, r25	; 0x14
    3ad4:	8b 8b       	std	Y+19, r24	; 0x13
    3ad6:	3f c0       	rjmp	.+126    	; 0x3b56 <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    3ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    3ada:	7e 89       	ldd	r23, Y+22	; 0x16
    3adc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ade:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	3f ef       	ldi	r19, 0xFF	; 255
    3ae4:	4f e7       	ldi	r20, 0x7F	; 127
    3ae6:	57 e4       	ldi	r21, 0x47	; 71
    3ae8:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3aec:	18 16       	cp	r1, r24
    3aee:	4c f5       	brge	.+82     	; 0x3b42 <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af0:	69 8d       	ldd	r22, Y+25	; 0x19
    3af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e2       	ldi	r20, 0x20	; 32
    3afe:	51 e4       	ldi	r21, 0x41	; 65
    3b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	bc 01       	movw	r22, r24
    3b0a:	cd 01       	movw	r24, r26
    3b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	9c 8b       	std	Y+20, r25	; 0x14
    3b16:	8b 8b       	std	Y+19, r24	; 0x13
    3b18:	0f c0       	rjmp	.+30     	; 0x3b38 <LCD_enu_Initialization+0xca>
    3b1a:	80 e9       	ldi	r24, 0x90	; 144
    3b1c:	91 e0       	ldi	r25, 0x01	; 1
    3b1e:	9a 8b       	std	Y+18, r25	; 0x12
    3b20:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b22:	89 89       	ldd	r24, Y+17	; 0x11
    3b24:	9a 89       	ldd	r25, Y+18	; 0x12
    3b26:	01 97       	sbiw	r24, 0x01	; 1
    3b28:	f1 f7       	brne	.-4      	; 0x3b26 <LCD_enu_Initialization+0xb8>
    3b2a:	9a 8b       	std	Y+18, r25	; 0x12
    3b2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b30:	9c 89       	ldd	r25, Y+20	; 0x14
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	9c 8b       	std	Y+20, r25	; 0x14
    3b36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b38:	8b 89       	ldd	r24, Y+19	; 0x13
    3b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b3c:	00 97       	sbiw	r24, 0x00	; 0
    3b3e:	69 f7       	brne	.-38     	; 0x3b1a <LCD_enu_Initialization+0xac>
    3b40:	14 c0       	rjmp	.+40     	; 0x3b6a <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b42:	6d 89       	ldd	r22, Y+21	; 0x15
    3b44:	7e 89       	ldd	r23, Y+22	; 0x16
    3b46:	8f 89       	ldd	r24, Y+23	; 0x17
    3b48:	98 8d       	ldd	r25, Y+24	; 0x18
    3b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4e:	dc 01       	movw	r26, r24
    3b50:	cb 01       	movw	r24, r22
    3b52:	9c 8b       	std	Y+20, r25	; 0x14
    3b54:	8b 8b       	std	Y+19, r24	; 0x13
    3b56:	8b 89       	ldd	r24, Y+19	; 0x13
    3b58:	9c 89       	ldd	r25, Y+20	; 0x14
    3b5a:	98 8b       	std	Y+16, r25	; 0x10
    3b5c:	8f 87       	std	Y+15, r24	; 0x0f
    3b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b60:	98 89       	ldd	r25, Y+16	; 0x10
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	f1 f7       	brne	.-4      	; 0x3b62 <LCD_enu_Initialization+0xf4>
    3b66:	98 8b       	std	Y+16, r25	; 0x10
    3b68:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	61 e0       	ldi	r22, 0x01	; 1
    3b6e:	41 e0       	ldi	r20, 0x01	; 1
    3b70:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	62 e0       	ldi	r22, 0x02	; 2
    3b78:	41 e0       	ldi	r20, 0x01	; 1
    3b7a:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	63 e0       	ldi	r22, 0x03	; 3
    3b82:	41 e0       	ldi	r20, 0x01	; 1
    3b84:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	67 e0       	ldi	r22, 0x07	; 7
    3b8c:	41 e0       	ldi	r20, 0x01	; 1
    3b8e:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	66 e0       	ldi	r22, 0x06	; 6
    3b96:	41 e0       	ldi	r20, 0x01	; 1
    3b98:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	65 e0       	ldi	r22, 0x05	; 5
    3ba0:	41 e0       	ldi	r20, 0x01	; 1
    3ba2:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
    3ba8:	64 e0       	ldi	r22, 0x04	; 4
    3baa:	41 e0       	ldi	r20, 0x01	; 1
    3bac:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	61 e0       	ldi	r22, 0x01	; 1
    3bb4:	40 e0       	ldi	r20, 0x00	; 0
    3bb6:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    3bba:	80 e0       	ldi	r24, 0x00	; 0
    3bbc:	67 e0       	ldi	r22, 0x07	; 7
    3bbe:	40 e0       	ldi	r20, 0x00	; 0
    3bc0:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	66 e0       	ldi	r22, 0x06	; 6
    3bc8:	40 e0       	ldi	r20, 0x00	; 0
    3bca:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	65 e0       	ldi	r22, 0x05	; 5
    3bd2:	41 e0       	ldi	r20, 0x01	; 1
    3bd4:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	64 e0       	ldi	r22, 0x04	; 4
    3bdc:	40 e0       	ldi	r20, 0x00	; 0
    3bde:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	63 e0       	ldi	r22, 0x03	; 3
    3be6:	41 e0       	ldi	r20, 0x01	; 1
    3be8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	a0 e8       	ldi	r26, 0x80	; 128
    3bf2:	bf e3       	ldi	r27, 0x3F	; 63
    3bf4:	8b 87       	std	Y+11, r24	; 0x0b
    3bf6:	9c 87       	std	Y+12, r25	; 0x0c
    3bf8:	ad 87       	std	Y+13, r26	; 0x0d
    3bfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	4a e7       	ldi	r20, 0x7A	; 122
    3c0a:	55 e4       	ldi	r21, 0x45	; 69
    3c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	8f 83       	std	Y+7, r24	; 0x07
    3c16:	98 87       	std	Y+8, r25	; 0x08
    3c18:	a9 87       	std	Y+9, r26	; 0x09
    3c1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c1e:	78 85       	ldd	r23, Y+8	; 0x08
    3c20:	89 85       	ldd	r24, Y+9	; 0x09
    3c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	30 e0       	ldi	r19, 0x00	; 0
    3c28:	40 e8       	ldi	r20, 0x80	; 128
    3c2a:	5f e3       	ldi	r21, 0x3F	; 63
    3c2c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3c30:	88 23       	and	r24, r24
    3c32:	2c f4       	brge	.+10     	; 0x3c3e <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	9e 83       	std	Y+6, r25	; 0x06
    3c3a:	8d 83       	std	Y+5, r24	; 0x05
    3c3c:	3f c0       	rjmp	.+126    	; 0x3cbc <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    3c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c40:	78 85       	ldd	r23, Y+8	; 0x08
    3c42:	89 85       	ldd	r24, Y+9	; 0x09
    3c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	3f ef       	ldi	r19, 0xFF	; 255
    3c4a:	4f e7       	ldi	r20, 0x7F	; 127
    3c4c:	57 e4       	ldi	r21, 0x47	; 71
    3c4e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3c52:	18 16       	cp	r1, r24
    3c54:	4c f5       	brge	.+82     	; 0x3ca8 <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c56:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c58:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e2       	ldi	r20, 0x20	; 32
    3c64:	51 e4       	ldi	r21, 0x41	; 65
    3c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	bc 01       	movw	r22, r24
    3c70:	cd 01       	movw	r24, r26
    3c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	9e 83       	std	Y+6, r25	; 0x06
    3c7c:	8d 83       	std	Y+5, r24	; 0x05
    3c7e:	0f c0       	rjmp	.+30     	; 0x3c9e <LCD_enu_Initialization+0x230>
    3c80:	80 e9       	ldi	r24, 0x90	; 144
    3c82:	91 e0       	ldi	r25, 0x01	; 1
    3c84:	9c 83       	std	Y+4, r25	; 0x04
    3c86:	8b 83       	std	Y+3, r24	; 0x03
    3c88:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	f1 f7       	brne	.-4      	; 0x3c8c <LCD_enu_Initialization+0x21e>
    3c90:	9c 83       	std	Y+4, r25	; 0x04
    3c92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c94:	8d 81       	ldd	r24, Y+5	; 0x05
    3c96:	9e 81       	ldd	r25, Y+6	; 0x06
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	9e 83       	std	Y+6, r25	; 0x06
    3c9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca2:	00 97       	sbiw	r24, 0x00	; 0
    3ca4:	69 f7       	brne	.-38     	; 0x3c80 <LCD_enu_Initialization+0x212>
    3ca6:	14 c0       	rjmp	.+40     	; 0x3cd0 <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    3caa:	78 85       	ldd	r23, Y+8	; 0x08
    3cac:	89 85       	ldd	r24, Y+9	; 0x09
    3cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	9e 83       	std	Y+6, r25	; 0x06
    3cba:	8d 83       	std	Y+5, r24	; 0x05
    3cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc0:	9a 83       	std	Y+2, r25	; 0x02
    3cc2:	89 83       	std	Y+1, r24	; 0x01
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc8:	01 97       	sbiw	r24, 0x01	; 1
    3cca:	f1 f7       	brne	.-4      	; 0x3cc8 <LCD_enu_Initialization+0x25a>
    3ccc:	9a 83       	std	Y+2, r25	; 0x02
    3cce:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	63 e0       	ldi	r22, 0x03	; 3
    3cd4:	40 e0       	ldi	r20, 0x00	; 0
    3cd6:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	61 e0       	ldi	r22, 0x01	; 1
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    3ce4:	88 e2       	ldi	r24, 0x28	; 40
    3ce6:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	61 e0       	ldi	r22, 0x01	; 1
    3cee:	40 e0       	ldi	r20, 0x00	; 0
    3cf0:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0F);
    3cf4:	8f e0       	ldi	r24, 0x0F	; 15
    3cf6:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	61 e0       	ldi	r22, 0x01	; 1
    3cfe:	40 e0       	ldi	r20, 0x00	; 0
    3d00:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	61 e0       	ldi	r22, 0x01	; 1
    3d0e:	40 e0       	ldi	r20, 0x00	; 0
    3d10:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    3d14:	86 e0       	ldi	r24, 0x06	; 6
    3d16:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    3d1a:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    3d1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3d1e:	6d 96       	adiw	r28, 0x1d	; 29
    3d20:	0f b6       	in	r0, 0x3f	; 63
    3d22:	f8 94       	cli
    3d24:	de bf       	out	0x3e, r29	; 62
    3d26:	0f be       	out	0x3f, r0	; 63
    3d28:	cd bf       	out	0x3d, r28	; 61
    3d2a:	cf 91       	pop	r28
    3d2c:	df 91       	pop	r29
    3d2e:	08 95       	ret

00003d30 <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    3d30:	df 93       	push	r29
    3d32:	cf 93       	push	r28
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <LCD_enu_SendCommand+0x6>
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
    3d3a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3d3c:	81 e0       	ldi	r24, 0x01	; 1
    3d3e:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	61 e0       	ldi	r22, 0x01	; 1
    3d44:	40 e0       	ldi	r20, 0x00	; 0
    3d46:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    3d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4c:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    3d50:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    3d52:	89 81       	ldd	r24, Y+1	; 0x01

}
    3d54:	0f 90       	pop	r0
    3d56:	0f 90       	pop	r0
    3d58:	cf 91       	pop	r28
    3d5a:	df 91       	pop	r29
    3d5c:	08 95       	ret

00003d5e <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    3d5e:	df 93       	push	r29
    3d60:	cf 93       	push	r28
    3d62:	00 d0       	rcall	.+0      	; 0x3d64 <LCD_enu_SendData+0x6>
    3d64:	cd b7       	in	r28, 0x3d	; 61
    3d66:	de b7       	in	r29, 0x3e	; 62
    3d68:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	61 e0       	ldi	r22, 0x01	; 1
    3d72:	41 e0       	ldi	r20, 0x01	; 1
    3d74:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    3d78:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7a:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    3d7e:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3d80:	89 81       	ldd	r24, Y+1	; 0x01

}
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
    3d86:	cf 91       	pop	r28
    3d88:	df 91       	pop	r29
    3d8a:	08 95       	ret

00003d8c <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    3d8c:	df 93       	push	r29
    3d8e:	cf 93       	push	r28
    3d90:	00 d0       	rcall	.+0      	; 0x3d92 <LCD_enu_GoToPosition+0x6>
    3d92:	00 d0       	rcall	.+0      	; 0x3d94 <LCD_enu_GoToPosition+0x8>
    3d94:	cd b7       	in	r28, 0x3d	; 61
    3d96:	de b7       	in	r29, 0x3e	; 62
    3d98:	8a 83       	std	Y+2, r24	; 0x02
    3d9a:	6b 83       	std	Y+3, r22	; 0x03
    3d9c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    3da2:	8b 81       	ldd	r24, Y+3	; 0x03
    3da4:	81 31       	cpi	r24, 0x11	; 17
    3da6:	88 f5       	brcc	.+98     	; 0x3e0a <LCD_enu_GoToPosition+0x7e>
    3da8:	8b 81       	ldd	r24, Y+3	; 0x03
    3daa:	88 23       	and	r24, r24
    3dac:	71 f1       	breq	.+92     	; 0x3e0a <LCD_enu_GoToPosition+0x7e>
    3dae:	8a 81       	ldd	r24, Y+2	; 0x02
    3db0:	83 30       	cpi	r24, 0x03	; 3
    3db2:	58 f5       	brcc	.+86     	; 0x3e0a <LCD_enu_GoToPosition+0x7e>
    3db4:	8a 81       	ldd	r24, Y+2	; 0x02
    3db6:	88 23       	and	r24, r24
    3db8:	41 f1       	breq	.+80     	; 0x3e0a <LCD_enu_GoToPosition+0x7e>
    3dba:	8c 81       	ldd	r24, Y+4	; 0x04
    3dbc:	85 30       	cpi	r24, 0x05	; 5
    3dbe:	28 f5       	brcc	.+74     	; 0x3e0a <LCD_enu_GoToPosition+0x7e>
    3dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc2:	88 23       	and	r24, r24
    3dc4:	11 f1       	breq	.+68     	; 0x3e0a <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	61 e0       	ldi	r22, 0x01	; 1
    3dca:	40 e0       	ldi	r20, 0x00	; 0
    3dcc:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    3dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd2:	88 2f       	mov	r24, r24
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	9c 01       	movw	r18, r24
    3dd8:	21 50       	subi	r18, 0x01	; 1
    3dda:	30 40       	sbci	r19, 0x00	; 0
    3ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dde:	88 2f       	mov	r24, r24
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	88 0f       	add	r24, r24
    3de6:	99 1f       	adc	r25, r25
    3de8:	88 0f       	add	r24, r24
    3dea:	99 1f       	adc	r25, r25
    3dec:	82 0f       	add	r24, r18
    3dee:	93 1f       	adc	r25, r19
    3df0:	82 95       	swap	r24
    3df2:	92 95       	swap	r25
    3df4:	90 7f       	andi	r25, 0xF0	; 240
    3df6:	98 27       	eor	r25, r24
    3df8:	80 7f       	andi	r24, 0xF0	; 240
    3dfa:	98 27       	eor	r25, r24
    3dfc:	98 2f       	mov	r25, r24
    3dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    3e00:	89 0f       	add	r24, r25
    3e02:	81 58       	subi	r24, 0x81	; 129
    3e04:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3e0a:	82 e0       	ldi	r24, 0x02	; 2
    3e0c:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	cf 91       	pop	r28
    3e1a:	df 91       	pop	r29
    3e1c:	08 95       	ret

00003e1e <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    3e1e:	df 93       	push	r29
    3e20:	cf 93       	push	r28
    3e22:	00 d0       	rcall	.+0      	; 0x3e24 <LCD_enu_SendString+0x6>
    3e24:	0f 92       	push	r0
    3e26:	cd b7       	in	r28, 0x3d	; 61
    3e28:	de b7       	in	r29, 0x3e	; 62
    3e2a:	9b 83       	std	Y+3, r25	; 0x03
    3e2c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3e2e:	81 e0       	ldi	r24, 0x01	; 1
    3e30:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    3e32:	8a 81       	ldd	r24, Y+2	; 0x02
    3e34:	9b 81       	ldd	r25, Y+3	; 0x03
    3e36:	00 97       	sbiw	r24, 0x00	; 0
    3e38:	c1 f0       	breq	.+48     	; 0x3e6a <LCD_enu_SendString+0x4c>
    3e3a:	10 c0       	rjmp	.+32     	; 0x3e5c <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	61 e0       	ldi	r22, 0x01	; 1
    3e40:	41 e0       	ldi	r20, 0x01	; 1
    3e42:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    3e46:	ea 81       	ldd	r30, Y+2	; 0x02
    3e48:	fb 81       	ldd	r31, Y+3	; 0x03
    3e4a:	20 81       	ld	r18, Z
    3e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e50:	01 96       	adiw	r24, 0x01	; 1
    3e52:	9b 83       	std	Y+3, r25	; 0x03
    3e54:	8a 83       	std	Y+2, r24	; 0x02
    3e56:	82 2f       	mov	r24, r18
    3e58:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    3e5c:	ea 81       	ldd	r30, Y+2	; 0x02
    3e5e:	fb 81       	ldd	r31, Y+3	; 0x03
    3e60:	80 81       	ld	r24, Z
    3e62:	88 23       	and	r24, r24
    3e64:	59 f7       	brne	.-42     	; 0x3e3c <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    3e66:	19 82       	std	Y+1, r1	; 0x01
    3e68:	02 c0       	rjmp	.+4      	; 0x3e6e <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3e6a:	83 e0       	ldi	r24, 0x03	; 3
    3e6c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	cf 91       	pop	r28
    3e78:	df 91       	pop	r29
    3e7a:	08 95       	ret

00003e7c <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    3e7c:	df 93       	push	r29
    3e7e:	cf 93       	push	r28
    3e80:	00 d0       	rcall	.+0      	; 0x3e82 <LCD_enu_ClearPage+0x6>
    3e82:	0f 92       	push	r0
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
    3e88:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    3e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e90:	88 23       	and	r24, r24
    3e92:	09 f4       	brne	.+2      	; 0x3e96 <LCD_enu_ClearPage+0x1a>
    3e94:	49 c0       	rjmp	.+146    	; 0x3f28 <LCD_enu_ClearPage+0xac>
    3e96:	8b 81       	ldd	r24, Y+3	; 0x03
    3e98:	85 30       	cpi	r24, 0x05	; 5
    3e9a:	08 f0       	brcs	.+2      	; 0x3e9e <LCD_enu_ClearPage+0x22>
    3e9c:	45 c0       	rjmp	.+138    	; 0x3f28 <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    3e9e:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	61 e0       	ldi	r22, 0x01	; 1
    3ea4:	40 e0       	ldi	r20, 0x00	; 0
    3ea6:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    3eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    3eac:	88 2f       	mov	r24, r24
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	07 96       	adiw	r24, 0x07	; 7
    3eb2:	82 95       	swap	r24
    3eb4:	92 95       	swap	r25
    3eb6:	90 7f       	andi	r25, 0xF0	; 240
    3eb8:	98 27       	eor	r25, r24
    3eba:	80 7f       	andi	r24, 0xF0	; 240
    3ebc:	98 27       	eor	r25, r24
    3ebe:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	61 e0       	ldi	r22, 0x01	; 1
    3ec6:	41 e0       	ldi	r20, 0x01	; 1
    3ec8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3ecc:	19 82       	std	Y+1, r1	; 0x01
    3ece:	06 c0       	rjmp	.+12     	; 0x3edc <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    3ed0:	80 e2       	ldi	r24, 0x20	; 32
    3ed2:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3ed6:	89 81       	ldd	r24, Y+1	; 0x01
    3ed8:	8f 5f       	subi	r24, 0xFF	; 255
    3eda:	89 83       	std	Y+1, r24	; 0x01
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	80 31       	cpi	r24, 0x10	; 16
    3ee0:	b8 f3       	brcs	.-18     	; 0x3ed0 <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	61 e0       	ldi	r22, 0x01	; 1
    3ee6:	40 e0       	ldi	r20, 0x00	; 0
    3ee8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    3eec:	8b 81       	ldd	r24, Y+3	; 0x03
    3eee:	88 2f       	mov	r24, r24
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0b 96       	adiw	r24, 0x0b	; 11
    3ef4:	82 95       	swap	r24
    3ef6:	92 95       	swap	r25
    3ef8:	90 7f       	andi	r25, 0xF0	; 240
    3efa:	98 27       	eor	r25, r24
    3efc:	80 7f       	andi	r24, 0xF0	; 240
    3efe:	98 27       	eor	r25, r24
    3f00:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	61 e0       	ldi	r22, 0x01	; 1
    3f08:	41 e0       	ldi	r20, 0x01	; 1
    3f0a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3f0e:	19 82       	std	Y+1, r1	; 0x01
    3f10:	06 c0       	rjmp	.+12     	; 0x3f1e <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    3f12:	80 e2       	ldi	r24, 0x20	; 32
    3f14:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	8f 5f       	subi	r24, 0xFF	; 255
    3f1c:	89 83       	std	Y+1, r24	; 0x01
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	80 31       	cpi	r24, 0x10	; 16
    3f22:	b8 f3       	brcs	.-18     	; 0x3f12 <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    3f24:	1a 82       	std	Y+2, r1	; 0x02
    3f26:	02 c0       	rjmp	.+4      	; 0x3f2c <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3f28:	82 e0       	ldi	r24, 0x02	; 2
    3f2a:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    3f2c:	8a 81       	ldd	r24, Y+2	; 0x02

}
    3f2e:	0f 90       	pop	r0
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	cf 91       	pop	r28
    3f36:	df 91       	pop	r29
    3f38:	08 95       	ret

00003f3a <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    3f3a:	cf 92       	push	r12
    3f3c:	ef 92       	push	r14
    3f3e:	0f 93       	push	r16
    3f40:	df 93       	push	r29
    3f42:	cf 93       	push	r28
    3f44:	cd b7       	in	r28, 0x3d	; 61
    3f46:	de b7       	in	r29, 0x3e	; 62
    3f48:	2e 97       	sbiw	r28, 0x0e	; 14
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	de bf       	out	0x3e, r29	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	cd bf       	out	0x3d, r28	; 61
    3f54:	9e 83       	std	Y+6, r25	; 0x06
    3f56:	8d 83       	std	Y+5, r24	; 0x05
    3f58:	6f 83       	std	Y+7, r22	; 0x07
    3f5a:	48 87       	std	Y+8, r20	; 0x08
    3f5c:	29 87       	std	Y+9, r18	; 0x09
    3f5e:	0a 87       	std	Y+10, r16	; 0x0a
    3f60:	eb 86       	std	Y+11, r14	; 0x0b
    3f62:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    3f68:	8d 81       	ldd	r24, Y+5	; 0x05
    3f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f6c:	00 97       	sbiw	r24, 0x00	; 0
    3f6e:	09 f4       	brne	.+2      	; 0x3f72 <LCD_enu_DrawSpecialCharacter+0x38>
    3f70:	b3 c0       	rjmp	.+358    	; 0x40d8 <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    3f72:	1b 82       	std	Y+3, r1	; 0x03
    3f74:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    3f76:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    3f78:	8f 81       	ldd	r24, Y+7	; 0x07
    3f7a:	88 23       	and	r24, r24
    3f7c:	09 f4       	brne	.+2      	; 0x3f80 <LCD_enu_DrawSpecialCharacter+0x46>
    3f7e:	a9 c0       	rjmp	.+338    	; 0x40d2 <LCD_enu_DrawSpecialCharacter+0x198>
    3f80:	8f 81       	ldd	r24, Y+7	; 0x07
    3f82:	89 30       	cpi	r24, 0x09	; 9
    3f84:	08 f0       	brcs	.+2      	; 0x3f88 <LCD_enu_DrawSpecialCharacter+0x4e>
    3f86:	a5 c0       	rjmp	.+330    	; 0x40d2 <LCD_enu_DrawSpecialCharacter+0x198>
    3f88:	88 85       	ldd	r24, Y+8	; 0x08
    3f8a:	88 30       	cpi	r24, 0x08	; 8
    3f8c:	08 f0       	brcs	.+2      	; 0x3f90 <LCD_enu_DrawSpecialCharacter+0x56>
    3f8e:	a1 c0       	rjmp	.+322    	; 0x40d2 <LCD_enu_DrawSpecialCharacter+0x198>
    3f90:	88 85       	ldd	r24, Y+8	; 0x08
    3f92:	28 2f       	mov	r18, r24
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	88 e0       	ldi	r24, 0x08	; 8
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	ac 01       	movw	r20, r24
    3f9c:	42 1b       	sub	r20, r18
    3f9e:	53 0b       	sbc	r21, r19
    3fa0:	9a 01       	movw	r18, r20
    3fa2:	8f 81       	ldd	r24, Y+7	; 0x07
    3fa4:	88 2f       	mov	r24, r24
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	28 17       	cp	r18, r24
    3faa:	39 07       	cpc	r19, r25
    3fac:	0c f4       	brge	.+2      	; 0x3fb0 <LCD_enu_DrawSpecialCharacter+0x76>
    3fae:	91 c0       	rjmp	.+290    	; 0x40d2 <LCD_enu_DrawSpecialCharacter+0x198>
    3fb0:	89 85       	ldd	r24, Y+9	; 0x09
    3fb2:	88 23       	and	r24, r24
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <LCD_enu_DrawSpecialCharacter+0x7e>
    3fb6:	8d c0       	rjmp	.+282    	; 0x40d2 <LCD_enu_DrawSpecialCharacter+0x198>
    3fb8:	89 85       	ldd	r24, Y+9	; 0x09
    3fba:	83 30       	cpi	r24, 0x03	; 3
    3fbc:	08 f0       	brcs	.+2      	; 0x3fc0 <LCD_enu_DrawSpecialCharacter+0x86>
    3fbe:	89 c0       	rjmp	.+274    	; 0x40d2 <LCD_enu_DrawSpecialCharacter+0x198>
    3fc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fc2:	88 23       	and	r24, r24
    3fc4:	09 f4       	brne	.+2      	; 0x3fc8 <LCD_enu_DrawSpecialCharacter+0x8e>
    3fc6:	85 c0       	rjmp	.+266    	; 0x40d2 <LCD_enu_DrawSpecialCharacter+0x198>
    3fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fca:	81 31       	cpi	r24, 0x11	; 17
    3fcc:	08 f0       	brcs	.+2      	; 0x3fd0 <LCD_enu_DrawSpecialCharacter+0x96>
    3fce:	81 c0       	rjmp	.+258    	; 0x40d2 <LCD_enu_DrawSpecialCharacter+0x198>
    3fd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fd2:	82 30       	cpi	r24, 0x02	; 2
    3fd4:	08 f0       	brcs	.+2      	; 0x3fd8 <LCD_enu_DrawSpecialCharacter+0x9e>
    3fd6:	7d c0       	rjmp	.+250    	; 0x40d2 <LCD_enu_DrawSpecialCharacter+0x198>
    3fd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fda:	85 30       	cpi	r24, 0x05	; 5
    3fdc:	08 f0       	brcs	.+2      	; 0x3fe0 <LCD_enu_DrawSpecialCharacter+0xa6>
    3fde:	79 c0       	rjmp	.+242    	; 0x40d2 <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    3fe0:	19 82       	std	Y+1, r1	; 0x01
    3fe2:	19 c0       	rjmp	.+50     	; 0x4016 <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	28 2f       	mov	r18, r24
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	8d 81       	ldd	r24, Y+5	; 0x05
    3fec:	9e 81       	ldd	r25, Y+6	; 0x06
    3fee:	82 0f       	add	r24, r18
    3ff0:	93 1f       	adc	r25, r19
    3ff2:	9b 83       	std	Y+3, r25	; 0x03
    3ff4:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    3ff6:	89 81       	ldd	r24, Y+1	; 0x01
    3ff8:	98 2f       	mov	r25, r24
    3ffa:	96 95       	lsr	r25
    3ffc:	96 95       	lsr	r25
    3ffe:	96 95       	lsr	r25
    4000:	88 85       	ldd	r24, Y+8	; 0x08
    4002:	29 2f       	mov	r18, r25
    4004:	28 0f       	add	r18, r24
    4006:	8a 81       	ldd	r24, Y+2	; 0x02
    4008:	9b 81       	ldd	r25, Y+3	; 0x03
    400a:	62 2f       	mov	r22, r18
    400c:	0e 94 a9 24 	call	0x4952	; 0x4952 <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    4010:	89 81       	ldd	r24, Y+1	; 0x01
    4012:	88 5f       	subi	r24, 0xF8	; 248
    4014:	89 83       	std	Y+1, r24	; 0x01
    4016:	89 81       	ldd	r24, Y+1	; 0x01
    4018:	28 2f       	mov	r18, r24
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	8f 81       	ldd	r24, Y+7	; 0x07
    401e:	88 2f       	mov	r24, r24
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	88 0f       	add	r24, r24
    4024:	99 1f       	adc	r25, r25
    4026:	88 0f       	add	r24, r24
    4028:	99 1f       	adc	r25, r25
    402a:	88 0f       	add	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	28 17       	cp	r18, r24
    4030:	39 07       	cpc	r19, r25
    4032:	c4 f2       	brlt	.-80     	; 0x3fe4 <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	61 e0       	ldi	r22, 0x01	; 1
    4038:	40 e0       	ldi	r20, 0x00	; 0
    403a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    403e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4040:	28 2f       	mov	r18, r24
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	3e 87       	std	Y+14, r19	; 0x0e
    4046:	2d 87       	std	Y+13, r18	; 0x0d
    4048:	4d 85       	ldd	r20, Y+13	; 0x0d
    404a:	5e 85       	ldd	r21, Y+14	; 0x0e
    404c:	41 15       	cp	r20, r1
    404e:	51 05       	cpc	r21, r1
    4050:	49 f0       	breq	.+18     	; 0x4064 <LCD_enu_DrawSpecialCharacter+0x12a>
    4052:	8d 85       	ldd	r24, Y+13	; 0x0d
    4054:	9e 85       	ldd	r25, Y+14	; 0x0e
    4056:	81 30       	cpi	r24, 0x01	; 1
    4058:	91 05       	cpc	r25, r1
    405a:	39 f4       	brne	.+14     	; 0x406a <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    405c:	86 e0       	ldi	r24, 0x06	; 6
    405e:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
    4062:	03 c0       	rjmp	.+6      	; 0x406a <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    4064:	84 e0       	ldi	r24, 0x04	; 4
    4066:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	61 e0       	ldi	r22, 0x01	; 1
    406e:	40 e0       	ldi	r20, 0x00	; 0
    4070:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    4074:	8b 85       	ldd	r24, Y+11	; 0x0b
    4076:	88 2f       	mov	r24, r24
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	9c 01       	movw	r18, r24
    407c:	21 50       	subi	r18, 0x01	; 1
    407e:	30 40       	sbci	r19, 0x00	; 0
    4080:	89 85       	ldd	r24, Y+9	; 0x09
    4082:	88 2f       	mov	r24, r24
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	88 0f       	add	r24, r24
    408a:	99 1f       	adc	r25, r25
    408c:	88 0f       	add	r24, r24
    408e:	99 1f       	adc	r25, r25
    4090:	82 0f       	add	r24, r18
    4092:	93 1f       	adc	r25, r19
    4094:	82 95       	swap	r24
    4096:	92 95       	swap	r25
    4098:	90 7f       	andi	r25, 0xF0	; 240
    409a:	98 27       	eor	r25, r24
    409c:	80 7f       	andi	r24, 0xF0	; 240
    409e:	98 27       	eor	r25, r24
    40a0:	98 2f       	mov	r25, r24
    40a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    40a4:	89 0f       	add	r24, r25
    40a6:	81 58       	subi	r24, 0x81	; 129
    40a8:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	61 e0       	ldi	r22, 0x01	; 1
    40b0:	41 e0       	ldi	r20, 0x01	; 1
    40b2:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    40b6:	19 82       	std	Y+1, r1	; 0x01
    40b8:	06 c0       	rjmp	.+12     	; 0x40c6 <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
    40bc:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    40c0:	89 81       	ldd	r24, Y+1	; 0x01
    40c2:	8f 5f       	subi	r24, 0xFF	; 255
    40c4:	89 83       	std	Y+1, r24	; 0x01
    40c6:	99 81       	ldd	r25, Y+1	; 0x01
    40c8:	8f 81       	ldd	r24, Y+7	; 0x07
    40ca:	98 17       	cp	r25, r24
    40cc:	b0 f3       	brcs	.-20     	; 0x40ba <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    40ce:	1c 82       	std	Y+4, r1	; 0x04
    40d0:	05 c0       	rjmp	.+10     	; 0x40dc <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    40d2:	82 e0       	ldi	r24, 0x02	; 2
    40d4:	8c 83       	std	Y+4, r24	; 0x04
    40d6:	02 c0       	rjmp	.+4      	; 0x40dc <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    40d8:	83 e0       	ldi	r24, 0x03	; 3
    40da:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    40dc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    40de:	2e 96       	adiw	r28, 0x0e	; 14
    40e0:	0f b6       	in	r0, 0x3f	; 63
    40e2:	f8 94       	cli
    40e4:	de bf       	out	0x3e, r29	; 62
    40e6:	0f be       	out	0x3f, r0	; 63
    40e8:	cd bf       	out	0x3d, r28	; 61
    40ea:	cf 91       	pop	r28
    40ec:	df 91       	pop	r29
    40ee:	0f 91       	pop	r16
    40f0:	ef 90       	pop	r14
    40f2:	cf 90       	pop	r12
    40f4:	08 95       	ret

000040f6 <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    40f6:	0f 93       	push	r16
    40f8:	df 93       	push	r29
    40fa:	cf 93       	push	r28
    40fc:	cd b7       	in	r28, 0x3d	; 61
    40fe:	de b7       	in	r29, 0x3e	; 62
    4100:	2e 97       	sbiw	r28, 0x0e	; 14
    4102:	0f b6       	in	r0, 0x3f	; 63
    4104:	f8 94       	cli
    4106:	de bf       	out	0x3e, r29	; 62
    4108:	0f be       	out	0x3f, r0	; 63
    410a:	cd bf       	out	0x3d, r28	; 61
    410c:	68 87       	std	Y+8, r22	; 0x08
    410e:	79 87       	std	Y+9, r23	; 0x09
    4110:	8a 87       	std	Y+10, r24	; 0x0a
    4112:	9b 87       	std	Y+11, r25	; 0x0b
    4114:	4c 87       	std	Y+12, r20	; 0x0c
    4116:	2d 87       	std	Y+13, r18	; 0x0d
    4118:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    411e:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    4120:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    4122:	88 85       	ldd	r24, Y+8	; 0x08
    4124:	99 85       	ldd	r25, Y+9	; 0x09
    4126:	aa 85       	ldd	r26, Y+10	; 0x0a
    4128:	bb 85       	ldd	r27, Y+11	; 0x0b
    412a:	bb 23       	and	r27, r27
    412c:	8c f4       	brge	.+34     	; 0x4150 <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    4132:	88 85       	ldd	r24, Y+8	; 0x08
    4134:	99 85       	ldd	r25, Y+9	; 0x09
    4136:	aa 85       	ldd	r26, Y+10	; 0x0a
    4138:	bb 85       	ldd	r27, Y+11	; 0x0b
    413a:	b0 95       	com	r27
    413c:	a0 95       	com	r26
    413e:	90 95       	com	r25
    4140:	81 95       	neg	r24
    4142:	9f 4f       	sbci	r25, 0xFF	; 255
    4144:	af 4f       	sbci	r26, 0xFF	; 255
    4146:	bf 4f       	sbci	r27, 0xFF	; 255
    4148:	88 87       	std	Y+8, r24	; 0x08
    414a:	99 87       	std	Y+9, r25	; 0x09
    414c:	aa 87       	std	Y+10, r26	; 0x0a
    414e:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    4150:	88 85       	ldd	r24, Y+8	; 0x08
    4152:	99 85       	ldd	r25, Y+9	; 0x09
    4154:	aa 85       	ldd	r26, Y+10	; 0x0a
    4156:	bb 85       	ldd	r27, Y+11	; 0x0b
    4158:	8c 83       	std	Y+4, r24	; 0x04
    415a:	9d 83       	std	Y+5, r25	; 0x05
    415c:	ae 83       	std	Y+6, r26	; 0x06
    415e:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    4160:	8a 81       	ldd	r24, Y+2	; 0x02
    4162:	8f 5f       	subi	r24, 0xFF	; 255
    4164:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    4166:	8c 81       	ldd	r24, Y+4	; 0x04
    4168:	9d 81       	ldd	r25, Y+5	; 0x05
    416a:	ae 81       	ldd	r26, Y+6	; 0x06
    416c:	bf 81       	ldd	r27, Y+7	; 0x07
    416e:	2a e0       	ldi	r18, 0x0A	; 10
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	40 e0       	ldi	r20, 0x00	; 0
    4174:	50 e0       	ldi	r21, 0x00	; 0
    4176:	bc 01       	movw	r22, r24
    4178:	cd 01       	movw	r24, r26
    417a:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <__divmodsi4>
    417e:	da 01       	movw	r26, r20
    4180:	c9 01       	movw	r24, r18
    4182:	8c 83       	std	Y+4, r24	; 0x04
    4184:	9d 83       	std	Y+5, r25	; 0x05
    4186:	ae 83       	std	Y+6, r26	; 0x06
    4188:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    418a:	8c 81       	ldd	r24, Y+4	; 0x04
    418c:	9d 81       	ldd	r25, Y+5	; 0x05
    418e:	ae 81       	ldd	r26, Y+6	; 0x06
    4190:	bf 81       	ldd	r27, Y+7	; 0x07
    4192:	00 97       	sbiw	r24, 0x00	; 0
    4194:	a1 05       	cpc	r26, r1
    4196:	b1 05       	cpc	r27, r1
    4198:	19 f7       	brne	.-58     	; 0x4160 <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    419a:	8c 85       	ldd	r24, Y+12	; 0x0c
    419c:	88 23       	and	r24, r24
    419e:	09 f4       	brne	.+2      	; 0x41a2 <LCD_enu_WriteIntegerNum+0xac>
    41a0:	87 c0       	rjmp	.+270    	; 0x42b0 <LCD_enu_WriteIntegerNum+0x1ba>
    41a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    41a4:	83 30       	cpi	r24, 0x03	; 3
    41a6:	08 f0       	brcs	.+2      	; 0x41aa <LCD_enu_WriteIntegerNum+0xb4>
    41a8:	83 c0       	rjmp	.+262    	; 0x42b0 <LCD_enu_WriteIntegerNum+0x1ba>
    41aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ac:	88 23       	and	r24, r24
    41ae:	09 f4       	brne	.+2      	; 0x41b2 <LCD_enu_WriteIntegerNum+0xbc>
    41b0:	7f c0       	rjmp	.+254    	; 0x42b0 <LCD_enu_WriteIntegerNum+0x1ba>
    41b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41b4:	81 31       	cpi	r24, 0x11	; 17
    41b6:	08 f0       	brcs	.+2      	; 0x41ba <LCD_enu_WriteIntegerNum+0xc4>
    41b8:	7b c0       	rjmp	.+246    	; 0x42b0 <LCD_enu_WriteIntegerNum+0x1ba>
    41ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    41bc:	85 30       	cpi	r24, 0x05	; 5
    41be:	08 f0       	brcs	.+2      	; 0x41c2 <LCD_enu_WriteIntegerNum+0xcc>
    41c0:	77 c0       	rjmp	.+238    	; 0x42b0 <LCD_enu_WriteIntegerNum+0x1ba>
    41c2:	8a 81       	ldd	r24, Y+2	; 0x02
    41c4:	81 31       	cpi	r24, 0x11	; 17
    41c6:	08 f0       	brcs	.+2      	; 0x41ca <LCD_enu_WriteIntegerNum+0xd4>
    41c8:	73 c0       	rjmp	.+230    	; 0x42b0 <LCD_enu_WriteIntegerNum+0x1ba>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    41ca:	88 85       	ldd	r24, Y+8	; 0x08
    41cc:	99 85       	ldd	r25, Y+9	; 0x09
    41ce:	aa 85       	ldd	r26, Y+10	; 0x0a
    41d0:	bb 85       	ldd	r27, Y+11	; 0x0b
    41d2:	8c 83       	std	Y+4, r24	; 0x04
    41d4:	9d 83       	std	Y+5, r25	; 0x05
    41d6:	ae 83       	std	Y+6, r26	; 0x06
    41d8:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    41da:	ce 01       	movw	r24, r28
    41dc:	04 96       	adiw	r24, 0x04	; 4
    41de:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	61 e0       	ldi	r22, 0x01	; 1
    41e6:	40 e0       	ldi	r20, 0x00	; 0
    41e8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        //Placing Cursor
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    41ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    41ee:	88 2f       	mov	r24, r24
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	9c 01       	movw	r18, r24
    41f4:	21 50       	subi	r18, 0x01	; 1
    41f6:	30 40       	sbci	r19, 0x00	; 0
    41f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    41fa:	88 2f       	mov	r24, r24
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	01 97       	sbiw	r24, 0x01	; 1
    4200:	88 0f       	add	r24, r24
    4202:	99 1f       	adc	r25, r25
    4204:	88 0f       	add	r24, r24
    4206:	99 1f       	adc	r25, r25
    4208:	82 0f       	add	r24, r18
    420a:	93 1f       	adc	r25, r19
    420c:	82 95       	swap	r24
    420e:	92 95       	swap	r25
    4210:	90 7f       	andi	r25, 0xF0	; 240
    4212:	98 27       	eor	r25, r24
    4214:	80 7f       	andi	r24, 0xF0	; 240
    4216:	98 27       	eor	r25, r24
    4218:	98 2f       	mov	r25, r24
    421a:	8d 85       	ldd	r24, Y+13	; 0x0d
    421c:	89 0f       	add	r24, r25
    421e:	81 58       	subi	r24, 0x81	; 129
    4220:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	61 e0       	ldi	r22, 0x01	; 1
    4228:	41 e0       	ldi	r20, 0x01	; 1
    422a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    422e:	89 81       	ldd	r24, Y+1	; 0x01
    4230:	88 23       	and	r24, r24
    4232:	51 f1       	breq	.+84     	; 0x4288 <LCD_enu_WriteIntegerNum+0x192>
        {
            enu_PassByteAndLatch('-');
    4234:	8d e2       	ldi	r24, 0x2D	; 45
    4236:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
    423a:	26 c0       	rjmp	.+76     	; 0x4288 <LCD_enu_WriteIntegerNum+0x192>
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    423c:	8c 81       	ldd	r24, Y+4	; 0x04
    423e:	9d 81       	ldd	r25, Y+5	; 0x05
    4240:	ae 81       	ldd	r26, Y+6	; 0x06
    4242:	bf 81       	ldd	r27, Y+7	; 0x07
    4244:	2a e0       	ldi	r18, 0x0A	; 10
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	40 e0       	ldi	r20, 0x00	; 0
    424a:	50 e0       	ldi	r21, 0x00	; 0
    424c:	bc 01       	movw	r22, r24
    424e:	cd 01       	movw	r24, r26
    4250:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <__divmodsi4>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
    4258:	80 5d       	subi	r24, 0xD0	; 208
    425a:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    425e:	8c 81       	ldd	r24, Y+4	; 0x04
    4260:	9d 81       	ldd	r25, Y+5	; 0x05
    4262:	ae 81       	ldd	r26, Y+6	; 0x06
    4264:	bf 81       	ldd	r27, Y+7	; 0x07
    4266:	2a e0       	ldi	r18, 0x0A	; 10
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	50 e0       	ldi	r21, 0x00	; 0
    426e:	bc 01       	movw	r22, r24
    4270:	cd 01       	movw	r24, r26
    4272:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <__divmodsi4>
    4276:	da 01       	movw	r26, r20
    4278:	c9 01       	movw	r24, r18
    427a:	8c 83       	std	Y+4, r24	; 0x04
    427c:	9d 83       	std	Y+5, r25	; 0x05
    427e:	ae 83       	std	Y+6, r26	; 0x06
    4280:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    4282:	8a 81       	ldd	r24, Y+2	; 0x02
    4284:	81 50       	subi	r24, 0x01	; 1
    4286:	8a 83       	std	Y+2, r24	; 0x02
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
    4288:	8c 81       	ldd	r24, Y+4	; 0x04
    428a:	9d 81       	ldd	r25, Y+5	; 0x05
    428c:	ae 81       	ldd	r26, Y+6	; 0x06
    428e:	bf 81       	ldd	r27, Y+7	; 0x07
    4290:	00 97       	sbiw	r24, 0x00	; 0
    4292:	a1 05       	cpc	r26, r1
    4294:	b1 05       	cpc	r27, r1
    4296:	91 f6       	brne	.-92     	; 0x423c <LCD_enu_WriteIntegerNum+0x146>
    4298:	06 c0       	rjmp	.+12     	; 0x42a6 <LCD_enu_WriteIntegerNum+0x1b0>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    429a:	80 e3       	ldi	r24, 0x30	; 48
    429c:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    42a0:	8a 81       	ldd	r24, Y+2	; 0x02
    42a2:	81 50       	subi	r24, 0x01	; 1
    42a4:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    42a6:	8a 81       	ldd	r24, Y+2	; 0x02
    42a8:	88 23       	and	r24, r24
    42aa:	b9 f7       	brne	.-18     	; 0x429a <LCD_enu_WriteIntegerNum+0x1a4>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    42ac:	1b 82       	std	Y+3, r1	; 0x03
    42ae:	02 c0       	rjmp	.+4      	; 0x42b4 <LCD_enu_WriteIntegerNum+0x1be>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    42b0:	82 e0       	ldi	r24, 0x02	; 2
    42b2:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    42b4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    42b6:	2e 96       	adiw	r28, 0x0e	; 14
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
    42c2:	cf 91       	pop	r28
    42c4:	df 91       	pop	r29
    42c6:	0f 91       	pop	r16
    42c8:	08 95       	ret

000042ca <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    42ca:	0f 93       	push	r16
    42cc:	df 93       	push	r29
    42ce:	cf 93       	push	r28
    42d0:	cd b7       	in	r28, 0x3d	; 61
    42d2:	de b7       	in	r29, 0x3e	; 62
    42d4:	67 97       	sbiw	r28, 0x17	; 23
    42d6:	0f b6       	in	r0, 0x3f	; 63
    42d8:	f8 94       	cli
    42da:	de bf       	out	0x3e, r29	; 62
    42dc:	0f be       	out	0x3f, r0	; 63
    42de:	cd bf       	out	0x3d, r28	; 61
    42e0:	69 8b       	std	Y+17, r22	; 0x11
    42e2:	7a 8b       	std	Y+18, r23	; 0x12
    42e4:	8b 8b       	std	Y+19, r24	; 0x13
    42e6:	9c 8b       	std	Y+20, r25	; 0x14
    42e8:	4d 8b       	std	Y+21, r20	; 0x15
    42ea:	2e 8b       	std	Y+22, r18	; 0x16
    42ec:	0f 8b       	std	Y+23, r16	; 0x17
    u8 Local_u8_ErrorFlag = ES_NOK;
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	8c 83       	std	Y+4, r24	; 0x04
    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    u32 Local_u32_TempDecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    42f2:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = LCD_FLOAT_PRECISION;
    42f4:	83 e0       	ldi	r24, 0x03	; 3
    42f6:	8a 83       	std	Y+2, r24	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    42f8:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    42fa:	69 89       	ldd	r22, Y+17	; 0x11
    42fc:	7a 89       	ldd	r23, Y+18	; 0x12
    42fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4300:	9c 89       	ldd	r25, Y+20	; 0x14
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	40 e0       	ldi	r20, 0x00	; 0
    4308:	50 e0       	ldi	r21, 0x00	; 0
    430a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    430e:	88 23       	and	r24, r24
    4310:	5c f4       	brge	.+22     	; 0x4328 <LCD_enu_WriteFloatNum+0x5e>
    {
        local_u8_NegativeFlag = True;
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    4316:	89 89       	ldd	r24, Y+17	; 0x11
    4318:	9a 89       	ldd	r25, Y+18	; 0x12
    431a:	ab 89       	ldd	r26, Y+19	; 0x13
    431c:	bc 89       	ldd	r27, Y+20	; 0x14
    431e:	b0 58       	subi	r27, 0x80	; 128
    4320:	89 8b       	std	Y+17, r24	; 0x11
    4322:	9a 8b       	std	Y+18, r25	; 0x12
    4324:	ab 8b       	std	Y+19, r26	; 0x13
    4326:	bc 8b       	std	Y+20, r27	; 0x14
    }

    

    Local_u32_WholeDigits = Copy_f32_Num;
    4328:	69 89       	ldd	r22, Y+17	; 0x11
    432a:	7a 89       	ldd	r23, Y+18	; 0x12
    432c:	8b 89       	ldd	r24, Y+19	; 0x13
    432e:	9c 89       	ldd	r25, Y+20	; 0x14
    4330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4334:	dc 01       	movw	r26, r24
    4336:	cb 01       	movw	r24, r22
    4338:	8d 83       	std	Y+5, r24	; 0x05
    433a:	9e 83       	std	Y+6, r25	; 0x06
    433c:	af 83       	std	Y+7, r26	; 0x07
    433e:	b8 87       	std	Y+8, r27	; 0x08

    Local_f32_DecimalDigits = Copy_f32_Num - Local_u32_WholeDigits;
    4340:	8d 81       	ldd	r24, Y+5	; 0x05
    4342:	9e 81       	ldd	r25, Y+6	; 0x06
    4344:	af 81       	ldd	r26, Y+7	; 0x07
    4346:	b8 85       	ldd	r27, Y+8	; 0x08
    4348:	bc 01       	movw	r22, r24
    434a:	cd 01       	movw	r24, r26
    434c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
    4350:	9b 01       	movw	r18, r22
    4352:	ac 01       	movw	r20, r24
    4354:	69 89       	ldd	r22, Y+17	; 0x11
    4356:	7a 89       	ldd	r23, Y+18	; 0x12
    4358:	8b 89       	ldd	r24, Y+19	; 0x13
    435a:	9c 89       	ldd	r25, Y+20	; 0x14
    435c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	89 87       	std	Y+9, r24	; 0x09
    4366:	9a 87       	std	Y+10, r25	; 0x0a
    4368:	ab 87       	std	Y+11, r26	; 0x0b
    436a:	bc 87       	std	Y+12, r27	; 0x0c


    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    436c:	8b 81       	ldd	r24, Y+3	; 0x03
    436e:	8f 5f       	subi	r24, 0xFF	; 255
    4370:	8b 83       	std	Y+3, r24	; 0x03

        Local_u32_WholeDigits  /= 10;
    4372:	8d 81       	ldd	r24, Y+5	; 0x05
    4374:	9e 81       	ldd	r25, Y+6	; 0x06
    4376:	af 81       	ldd	r26, Y+7	; 0x07
    4378:	b8 85       	ldd	r27, Y+8	; 0x08
    437a:	2a e0       	ldi	r18, 0x0A	; 10
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	40 e0       	ldi	r20, 0x00	; 0
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	bc 01       	movw	r22, r24
    4384:	cd 01       	movw	r24, r26
    4386:	0e 94 c9 2a 	call	0x5592	; 0x5592 <__udivmodsi4>
    438a:	da 01       	movw	r26, r20
    438c:	c9 01       	movw	r24, r18
    438e:	8d 83       	std	Y+5, r24	; 0x05
    4390:	9e 83       	std	Y+6, r25	; 0x06
    4392:	af 83       	std	Y+7, r26	; 0x07
    4394:	b8 87       	std	Y+8, r27	; 0x08

    }while(Local_u32_WholeDigits);
    4396:	8d 81       	ldd	r24, Y+5	; 0x05
    4398:	9e 81       	ldd	r25, Y+6	; 0x06
    439a:	af 81       	ldd	r26, Y+7	; 0x07
    439c:	b8 85       	ldd	r27, Y+8	; 0x08
    439e:	00 97       	sbiw	r24, 0x00	; 0
    43a0:	a1 05       	cpc	r26, r1
    43a2:	b1 05       	cpc	r27, r1
    43a4:	19 f7       	brne	.-58     	; 0x436c <LCD_enu_WriteFloatNum+0xa2>

    //Converting Decimals into Whole numbers ex: 0.451 -> 451
    enu_ConvertFloatToInteger(&Local_f32_DecimalDigits, LCD_FLOAT_PRECISION);
    43a6:	ce 01       	movw	r24, r28
    43a8:	09 96       	adiw	r24, 0x09	; 9
    43aa:	63 e0       	ldi	r22, 0x03	; 3
    43ac:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <enu_ConvertFloatToInteger>
    // } while (Local_u32_TempDecimalDigits);
    



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DecimalDigitCount <= LCD_MAX_INTEGER_LENGTH))
    43b0:	8d 89       	ldd	r24, Y+21	; 0x15
    43b2:	88 23       	and	r24, r24
    43b4:	09 f4       	brne	.+2      	; 0x43b8 <LCD_enu_WriteFloatNum+0xee>
    43b6:	e3 c0       	rjmp	.+454    	; 0x457e <LCD_enu_WriteFloatNum+0x2b4>
    43b8:	8d 89       	ldd	r24, Y+21	; 0x15
    43ba:	83 30       	cpi	r24, 0x03	; 3
    43bc:	08 f0       	brcs	.+2      	; 0x43c0 <LCD_enu_WriteFloatNum+0xf6>
    43be:	df c0       	rjmp	.+446    	; 0x457e <LCD_enu_WriteFloatNum+0x2b4>
    43c0:	8e 89       	ldd	r24, Y+22	; 0x16
    43c2:	88 23       	and	r24, r24
    43c4:	09 f4       	brne	.+2      	; 0x43c8 <LCD_enu_WriteFloatNum+0xfe>
    43c6:	db c0       	rjmp	.+438    	; 0x457e <LCD_enu_WriteFloatNum+0x2b4>
    43c8:	8e 89       	ldd	r24, Y+22	; 0x16
    43ca:	81 31       	cpi	r24, 0x11	; 17
    43cc:	08 f0       	brcs	.+2      	; 0x43d0 <LCD_enu_WriteFloatNum+0x106>
    43ce:	d7 c0       	rjmp	.+430    	; 0x457e <LCD_enu_WriteFloatNum+0x2b4>
    43d0:	8f 89       	ldd	r24, Y+23	; 0x17
    43d2:	85 30       	cpi	r24, 0x05	; 5
    43d4:	08 f0       	brcs	.+2      	; 0x43d8 <LCD_enu_WriteFloatNum+0x10e>
    43d6:	d3 c0       	rjmp	.+422    	; 0x457e <LCD_enu_WriteFloatNum+0x2b4>
    43d8:	8a 81       	ldd	r24, Y+2	; 0x02
    43da:	81 31       	cpi	r24, 0x11	; 17
    43dc:	08 f0       	brcs	.+2      	; 0x43e0 <LCD_enu_WriteFloatNum+0x116>
    43de:	cf c0       	rjmp	.+414    	; 0x457e <LCD_enu_WriteFloatNum+0x2b4>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	61 e0       	ldi	r22, 0x01	; 1
    43e4:	40 e0       	ldi	r20, 0x00	; 0
    43e6:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    43ea:	8f 89       	ldd	r24, Y+23	; 0x17
    43ec:	88 2f       	mov	r24, r24
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	9c 01       	movw	r18, r24
    43f2:	21 50       	subi	r18, 0x01	; 1
    43f4:	30 40       	sbci	r19, 0x00	; 0
    43f6:	8d 89       	ldd	r24, Y+21	; 0x15
    43f8:	88 2f       	mov	r24, r24
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	01 97       	sbiw	r24, 0x01	; 1
    43fe:	88 0f       	add	r24, r24
    4400:	99 1f       	adc	r25, r25
    4402:	88 0f       	add	r24, r24
    4404:	99 1f       	adc	r25, r25
    4406:	82 0f       	add	r24, r18
    4408:	93 1f       	adc	r25, r19
    440a:	82 95       	swap	r24
    440c:	92 95       	swap	r25
    440e:	90 7f       	andi	r25, 0xF0	; 240
    4410:	98 27       	eor	r25, r24
    4412:	80 7f       	andi	r24, 0xF0	; 240
    4414:	98 27       	eor	r25, r24
    4416:	98 2f       	mov	r25, r24
    4418:	8e 89       	ldd	r24, Y+22	; 0x16
    441a:	89 0f       	add	r24, r25
    441c:	81 58       	subi	r24, 0x81	; 129
    441e:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
        
        
        //Choosing DR to pass numbers 
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	61 e0       	ldi	r22, 0x01	; 1
    4426:	41 e0       	ldi	r20, 0x01	; 1
    4428:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>

        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    442c:	89 81       	ldd	r24, Y+1	; 0x01
    442e:	88 23       	and	r24, r24
    4430:	19 f0       	breq	.+6      	; 0x4438 <LCD_enu_WriteFloatNum+0x16e>
        {
            enu_PassByteAndLatch('-');
    4432:	8d e2       	ldi	r24, 0x2D	; 45
    4434:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
        }


        //A] Printing whole digits 

        Local_u32_WholeDigits = Copy_f32_Num;
    4438:	69 89       	ldd	r22, Y+17	; 0x11
    443a:	7a 89       	ldd	r23, Y+18	; 0x12
    443c:	8b 89       	ldd	r24, Y+19	; 0x13
    443e:	9c 89       	ldd	r25, Y+20	; 0x14
    4440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	8d 83       	std	Y+5, r24	; 0x05
    444a:	9e 83       	std	Y+6, r25	; 0x06
    444c:	af 83       	std	Y+7, r26	; 0x07
    444e:	b8 87       	std	Y+8, r27	; 0x08
        enu_ReverseInteger(&Local_u32_WholeDigits);
    4450:	ce 01       	movw	r24, r28
    4452:	05 96       	adiw	r24, 0x05	; 5
    4454:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <enu_ReverseInteger>
    4458:	26 c0       	rjmp	.+76     	; 0x44a6 <LCD_enu_WriteFloatNum+0x1dc>

        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    445a:	8d 81       	ldd	r24, Y+5	; 0x05
    445c:	9e 81       	ldd	r25, Y+6	; 0x06
    445e:	af 81       	ldd	r26, Y+7	; 0x07
    4460:	b8 85       	ldd	r27, Y+8	; 0x08
    4462:	2a e0       	ldi	r18, 0x0A	; 10
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	40 e0       	ldi	r20, 0x00	; 0
    4468:	50 e0       	ldi	r21, 0x00	; 0
    446a:	bc 01       	movw	r22, r24
    446c:	cd 01       	movw	r24, r26
    446e:	0e 94 c9 2a 	call	0x5592	; 0x5592 <__udivmodsi4>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	80 5d       	subi	r24, 0xD0	; 208
    4478:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
           
            Local_u32_WholeDigits /= 10;
    447c:	8d 81       	ldd	r24, Y+5	; 0x05
    447e:	9e 81       	ldd	r25, Y+6	; 0x06
    4480:	af 81       	ldd	r26, Y+7	; 0x07
    4482:	b8 85       	ldd	r27, Y+8	; 0x08
    4484:	2a e0       	ldi	r18, 0x0A	; 10
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	40 e0       	ldi	r20, 0x00	; 0
    448a:	50 e0       	ldi	r21, 0x00	; 0
    448c:	bc 01       	movw	r22, r24
    448e:	cd 01       	movw	r24, r26
    4490:	0e 94 c9 2a 	call	0x5592	; 0x5592 <__udivmodsi4>
    4494:	da 01       	movw	r26, r20
    4496:	c9 01       	movw	r24, r18
    4498:	8d 83       	std	Y+5, r24	; 0x05
    449a:	9e 83       	std	Y+6, r25	; 0x06
    449c:	af 83       	std	Y+7, r26	; 0x07
    449e:	b8 87       	std	Y+8, r27	; 0x08
           
            Local_u8_WholeDigitCount--;
    44a0:	8b 81       	ldd	r24, Y+3	; 0x03
    44a2:	81 50       	subi	r24, 0x01	; 1
    44a4:	8b 83       	std	Y+3, r24	; 0x03

        Local_u32_WholeDigits = Copy_f32_Num;
        enu_ReverseInteger(&Local_u32_WholeDigits);

        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    44a6:	8d 81       	ldd	r24, Y+5	; 0x05
    44a8:	9e 81       	ldd	r25, Y+6	; 0x06
    44aa:	af 81       	ldd	r26, Y+7	; 0x07
    44ac:	b8 85       	ldd	r27, Y+8	; 0x08
    44ae:	00 97       	sbiw	r24, 0x00	; 0
    44b0:	a1 05       	cpc	r26, r1
    44b2:	b1 05       	cpc	r27, r1
    44b4:	91 f6       	brne	.-92     	; 0x445a <LCD_enu_WriteFloatNum+0x190>
    44b6:	06 c0       	rjmp	.+12     	; 0x44c4 <LCD_enu_WriteFloatNum+0x1fa>
        }

        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    44b8:	80 e3       	ldi	r24, 0x30	; 48
    44ba:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
           
            Local_u8_WholeDigitCount--;
    44be:	8b 81       	ldd	r24, Y+3	; 0x03
    44c0:	81 50       	subi	r24, 0x01	; 1
    44c2:	8b 83       	std	Y+3, r24	; 0x03
           
            Local_u8_WholeDigitCount--;
        }

        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    44c4:	8b 81       	ldd	r24, Y+3	; 0x03
    44c6:	88 23       	and	r24, r24
    44c8:	b9 f7       	brne	.-18     	; 0x44b8 <LCD_enu_WriteFloatNum+0x1ee>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    44ca:	89 85       	ldd	r24, Y+9	; 0x09
    44cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ce:	ab 85       	ldd	r26, Y+11	; 0x0b
    44d0:	bc 85       	ldd	r27, Y+12	; 0x0c
    44d2:	bc 01       	movw	r22, r24
    44d4:	cd 01       	movw	r24, r26
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	40 e0       	ldi	r20, 0x00	; 0
    44dc:	50 e0       	ldi	r21, 0x00	; 0
    44de:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    44e2:	88 23       	and	r24, r24
    44e4:	09 f4       	brne	.+2      	; 0x44e8 <LCD_enu_WriteFloatNum+0x21e>
    44e6:	49 c0       	rjmp	.+146    	; 0x457a <LCD_enu_WriteFloatNum+0x2b0>
        {
            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    44e8:	8e e2       	ldi	r24, 0x2E	; 46
    44ea:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>

            //Saving the float digits in an u32 variable to pass to other functions easily (step for Safety reasons not neaded)
            Local_u32_TempDecimalDigits = Local_f32_DecimalDigits;
    44ee:	89 85       	ldd	r24, Y+9	; 0x09
    44f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    44f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    44f6:	bc 01       	movw	r22, r24
    44f8:	cd 01       	movw	r24, r26
    44fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fe:	dc 01       	movw	r26, r24
    4500:	cb 01       	movw	r24, r22
    4502:	8d 87       	std	Y+13, r24	; 0x0d
    4504:	9e 87       	std	Y+14, r25	; 0x0e
    4506:	af 87       	std	Y+15, r26	; 0x0f
    4508:	b8 8b       	std	Y+16, r27	; 0x10
            
            //Reversing Number
            enu_ReverseInteger(&Local_u32_TempDecimalDigits);
    450a:	ce 01       	movw	r24, r28
    450c:	0d 96       	adiw	r24, 0x0d	; 13
    450e:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <enu_ReverseInteger>
    4512:	26 c0       	rjmp	.+76     	; 0x4560 <LCD_enu_WriteFloatNum+0x296>

            //Printing one digit at a time
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch((Local_u32_TempDecimalDigits % 10) + 48);
    4514:	8d 85       	ldd	r24, Y+13	; 0x0d
    4516:	9e 85       	ldd	r25, Y+14	; 0x0e
    4518:	af 85       	ldd	r26, Y+15	; 0x0f
    451a:	b8 89       	ldd	r27, Y+16	; 0x10
    451c:	2a e0       	ldi	r18, 0x0A	; 10
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	40 e0       	ldi	r20, 0x00	; 0
    4522:	50 e0       	ldi	r21, 0x00	; 0
    4524:	bc 01       	movw	r22, r24
    4526:	cd 01       	movw	r24, r26
    4528:	0e 94 c9 2a 	call	0x5592	; 0x5592 <__udivmodsi4>
    452c:	dc 01       	movw	r26, r24
    452e:	cb 01       	movw	r24, r22
    4530:	80 5d       	subi	r24, 0xD0	; 208
    4532:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
                
                Local_u32_TempDecimalDigits /= 10;
    4536:	8d 85       	ldd	r24, Y+13	; 0x0d
    4538:	9e 85       	ldd	r25, Y+14	; 0x0e
    453a:	af 85       	ldd	r26, Y+15	; 0x0f
    453c:	b8 89       	ldd	r27, Y+16	; 0x10
    453e:	2a e0       	ldi	r18, 0x0A	; 10
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	40 e0       	ldi	r20, 0x00	; 0
    4544:	50 e0       	ldi	r21, 0x00	; 0
    4546:	bc 01       	movw	r22, r24
    4548:	cd 01       	movw	r24, r26
    454a:	0e 94 c9 2a 	call	0x5592	; 0x5592 <__udivmodsi4>
    454e:	da 01       	movw	r26, r20
    4550:	c9 01       	movw	r24, r18
    4552:	8d 87       	std	Y+13, r24	; 0x0d
    4554:	9e 87       	std	Y+14, r25	; 0x0e
    4556:	af 87       	std	Y+15, r26	; 0x0f
    4558:	b8 8b       	std	Y+16, r27	; 0x10
                
                Local_u8_DecimalDigitCount--;
    455a:	8a 81       	ldd	r24, Y+2	; 0x02
    455c:	81 50       	subi	r24, 0x01	; 1
    455e:	8a 83       	std	Y+2, r24	; 0x02
            
            //Reversing Number
            enu_ReverseInteger(&Local_u32_TempDecimalDigits);

            //Printing one digit at a time
            while(Local_u8_DecimalDigitCount)
    4560:	8a 81       	ldd	r24, Y+2	; 0x02
    4562:	88 23       	and	r24, r24
    4564:	b9 f6       	brne	.-82     	; 0x4514 <LCD_enu_WriteFloatNum+0x24a>
    4566:	06 c0       	rjmp	.+12     	; 0x4574 <LCD_enu_WriteFloatNum+0x2aa>
            }

            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    4568:	80 e3       	ldi	r24, 0x30	; 48
    456a:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    456e:	8a 81       	ldd	r24, Y+2	; 0x02
    4570:	81 50       	subi	r24, 0x01	; 1
    4572:	8a 83       	std	Y+2, r24	; 0x02
                
                Local_u8_DecimalDigitCount--;
            }

            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    4574:	8a 81       	ldd	r24, Y+2	; 0x02
    4576:	88 23       	and	r24, r24
    4578:	b9 f7       	brne	.-18     	; 0x4568 <LCD_enu_WriteFloatNum+0x29e>
                Local_u8_DecimalDigitCount--;
            }
            
        }

        Local_u8_ErrorFlag = ES_OK;
    457a:	1c 82       	std	Y+4, r1	; 0x04
    457c:	02 c0       	rjmp	.+4      	; 0x4582 <LCD_enu_WriteFloatNum+0x2b8>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    457e:	82 e0       	ldi	r24, 0x02	; 2
    4580:	8c 83       	std	Y+4, r24	; 0x04
    }

    return Local_u8_ErrorFlag;
    4582:	8c 81       	ldd	r24, Y+4	; 0x04

}
    4584:	67 96       	adiw	r28, 0x17	; 23
    4586:	0f b6       	in	r0, 0x3f	; 63
    4588:	f8 94       	cli
    458a:	de bf       	out	0x3e, r29	; 62
    458c:	0f be       	out	0x3f, r0	; 63
    458e:	cd bf       	out	0x3d, r28	; 61
    4590:	cf 91       	pop	r28
    4592:	df 91       	pop	r29
    4594:	0f 91       	pop	r16
    4596:	08 95       	ret

00004598 <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    4598:	df 93       	push	r29
    459a:	cf 93       	push	r28
    459c:	cd b7       	in	r28, 0x3d	; 61
    459e:	de b7       	in	r29, 0x3e	; 62
    45a0:	ac 97       	sbiw	r28, 0x2c	; 44
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	f8 94       	cli
    45a6:	de bf       	out	0x3e, r29	; 62
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	cd bf       	out	0x3d, r28	; 61
    45ac:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    45b2:	81 e0       	ldi	r24, 0x01	; 1
    45b4:	62 e0       	ldi	r22, 0x02	; 2
    45b6:	40 e0       	ldi	r20, 0x00	; 0
    45b8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	63 e0       	ldi	r22, 0x03	; 3
    45c0:	40 e0       	ldi	r20, 0x00	; 0
    45c2:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    45c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    45c8:	98 2f       	mov	r25, r24
    45ca:	99 1f       	adc	r25, r25
    45cc:	99 27       	eor	r25, r25
    45ce:	99 1f       	adc	r25, r25
    45d0:	80 e0       	ldi	r24, 0x00	; 0
    45d2:	67 e0       	ldi	r22, 0x07	; 7
    45d4:	49 2f       	mov	r20, r25
    45d6:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    45da:	8c a5       	ldd	r24, Y+44	; 0x2c
    45dc:	82 95       	swap	r24
    45de:	86 95       	lsr	r24
    45e0:	86 95       	lsr	r24
    45e2:	83 70       	andi	r24, 0x03	; 3
    45e4:	98 2f       	mov	r25, r24
    45e6:	91 70       	andi	r25, 0x01	; 1
    45e8:	80 e0       	ldi	r24, 0x00	; 0
    45ea:	66 e0       	ldi	r22, 0x06	; 6
    45ec:	49 2f       	mov	r20, r25
    45ee:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    45f2:	8c a5       	ldd	r24, Y+44	; 0x2c
    45f4:	82 95       	swap	r24
    45f6:	86 95       	lsr	r24
    45f8:	87 70       	andi	r24, 0x07	; 7
    45fa:	98 2f       	mov	r25, r24
    45fc:	91 70       	andi	r25, 0x01	; 1
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	65 e0       	ldi	r22, 0x05	; 5
    4602:	49 2f       	mov	r20, r25
    4604:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    4608:	8c a5       	ldd	r24, Y+44	; 0x2c
    460a:	82 95       	swap	r24
    460c:	8f 70       	andi	r24, 0x0F	; 15
    460e:	98 2f       	mov	r25, r24
    4610:	91 70       	andi	r25, 0x01	; 1
    4612:	80 e0       	ldi	r24, 0x00	; 0
    4614:	64 e0       	ldi	r22, 0x04	; 4
    4616:	49 2f       	mov	r20, r25
    4618:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    461c:	81 e0       	ldi	r24, 0x01	; 1
    461e:	63 e0       	ldi	r22, 0x03	; 3
    4620:	41 e0       	ldi	r20, 0x01	; 1
    4622:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	a0 e8       	ldi	r26, 0x80	; 128
    462c:	bf e3       	ldi	r27, 0x3F	; 63
    462e:	8f a3       	std	Y+39, r24	; 0x27
    4630:	98 a7       	std	Y+40, r25	; 0x28
    4632:	a9 a7       	std	Y+41, r26	; 0x29
    4634:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4636:	6f a1       	ldd	r22, Y+39	; 0x27
    4638:	78 a5       	ldd	r23, Y+40	; 0x28
    463a:	89 a5       	ldd	r24, Y+41	; 0x29
    463c:	9a a5       	ldd	r25, Y+42	; 0x2a
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	30 e0       	ldi	r19, 0x00	; 0
    4642:	4a e7       	ldi	r20, 0x7A	; 122
    4644:	55 e4       	ldi	r21, 0x45	; 69
    4646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    464a:	dc 01       	movw	r26, r24
    464c:	cb 01       	movw	r24, r22
    464e:	8b a3       	std	Y+35, r24	; 0x23
    4650:	9c a3       	std	Y+36, r25	; 0x24
    4652:	ad a3       	std	Y+37, r26	; 0x25
    4654:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4656:	6b a1       	ldd	r22, Y+35	; 0x23
    4658:	7c a1       	ldd	r23, Y+36	; 0x24
    465a:	8d a1       	ldd	r24, Y+37	; 0x25
    465c:	9e a1       	ldd	r25, Y+38	; 0x26
    465e:	20 e0       	ldi	r18, 0x00	; 0
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	40 e8       	ldi	r20, 0x80	; 128
    4664:	5f e3       	ldi	r21, 0x3F	; 63
    4666:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    466a:	88 23       	and	r24, r24
    466c:	2c f4       	brge	.+10     	; 0x4678 <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	9a a3       	std	Y+34, r25	; 0x22
    4674:	89 a3       	std	Y+33, r24	; 0x21
    4676:	3f c0       	rjmp	.+126    	; 0x46f6 <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    4678:	6b a1       	ldd	r22, Y+35	; 0x23
    467a:	7c a1       	ldd	r23, Y+36	; 0x24
    467c:	8d a1       	ldd	r24, Y+37	; 0x25
    467e:	9e a1       	ldd	r25, Y+38	; 0x26
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	3f ef       	ldi	r19, 0xFF	; 255
    4684:	4f e7       	ldi	r20, 0x7F	; 127
    4686:	57 e4       	ldi	r21, 0x47	; 71
    4688:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    468c:	18 16       	cp	r1, r24
    468e:	4c f5       	brge	.+82     	; 0x46e2 <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4690:	6f a1       	ldd	r22, Y+39	; 0x27
    4692:	78 a5       	ldd	r23, Y+40	; 0x28
    4694:	89 a5       	ldd	r24, Y+41	; 0x29
    4696:	9a a5       	ldd	r25, Y+42	; 0x2a
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	40 e2       	ldi	r20, 0x20	; 32
    469e:	51 e4       	ldi	r21, 0x41	; 65
    46a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	bc 01       	movw	r22, r24
    46aa:	cd 01       	movw	r24, r26
    46ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b0:	dc 01       	movw	r26, r24
    46b2:	cb 01       	movw	r24, r22
    46b4:	9a a3       	std	Y+34, r25	; 0x22
    46b6:	89 a3       	std	Y+33, r24	; 0x21
    46b8:	0f c0       	rjmp	.+30     	; 0x46d8 <enu_PassByteAndLatch+0x140>
    46ba:	80 e9       	ldi	r24, 0x90	; 144
    46bc:	91 e0       	ldi	r25, 0x01	; 1
    46be:	98 a3       	std	Y+32, r25	; 0x20
    46c0:	8f 8f       	std	Y+31, r24	; 0x1f
    46c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46c4:	98 a1       	ldd	r25, Y+32	; 0x20
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	f1 f7       	brne	.-4      	; 0x46c6 <enu_PassByteAndLatch+0x12e>
    46ca:	98 a3       	std	Y+32, r25	; 0x20
    46cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ce:	89 a1       	ldd	r24, Y+33	; 0x21
    46d0:	9a a1       	ldd	r25, Y+34	; 0x22
    46d2:	01 97       	sbiw	r24, 0x01	; 1
    46d4:	9a a3       	std	Y+34, r25	; 0x22
    46d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46d8:	89 a1       	ldd	r24, Y+33	; 0x21
    46da:	9a a1       	ldd	r25, Y+34	; 0x22
    46dc:	00 97       	sbiw	r24, 0x00	; 0
    46de:	69 f7       	brne	.-38     	; 0x46ba <enu_PassByteAndLatch+0x122>
    46e0:	14 c0       	rjmp	.+40     	; 0x470a <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46e2:	6b a1       	ldd	r22, Y+35	; 0x23
    46e4:	7c a1       	ldd	r23, Y+36	; 0x24
    46e6:	8d a1       	ldd	r24, Y+37	; 0x25
    46e8:	9e a1       	ldd	r25, Y+38	; 0x26
    46ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ee:	dc 01       	movw	r26, r24
    46f0:	cb 01       	movw	r24, r22
    46f2:	9a a3       	std	Y+34, r25	; 0x22
    46f4:	89 a3       	std	Y+33, r24	; 0x21
    46f6:	89 a1       	ldd	r24, Y+33	; 0x21
    46f8:	9a a1       	ldd	r25, Y+34	; 0x22
    46fa:	9e 8f       	std	Y+30, r25	; 0x1e
    46fc:	8d 8f       	std	Y+29, r24	; 0x1d
    46fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4700:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4702:	01 97       	sbiw	r24, 0x01	; 1
    4704:	f1 f7       	brne	.-4      	; 0x4702 <enu_PassByteAndLatch+0x16a>
    4706:	9e 8f       	std	Y+30, r25	; 0x1e
    4708:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	63 e0       	ldi	r22, 0x03	; 3
    470e:	40 e0       	ldi	r20, 0x00	; 0
    4710:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    4714:	8c a5       	ldd	r24, Y+44	; 0x2c
    4716:	86 95       	lsr	r24
    4718:	86 95       	lsr	r24
    471a:	86 95       	lsr	r24
    471c:	98 2f       	mov	r25, r24
    471e:	91 70       	andi	r25, 0x01	; 1
    4720:	80 e0       	ldi	r24, 0x00	; 0
    4722:	67 e0       	ldi	r22, 0x07	; 7
    4724:	49 2f       	mov	r20, r25
    4726:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    472a:	8c a5       	ldd	r24, Y+44	; 0x2c
    472c:	86 95       	lsr	r24
    472e:	86 95       	lsr	r24
    4730:	98 2f       	mov	r25, r24
    4732:	91 70       	andi	r25, 0x01	; 1
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	66 e0       	ldi	r22, 0x06	; 6
    4738:	49 2f       	mov	r20, r25
    473a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    473e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4740:	86 95       	lsr	r24
    4742:	98 2f       	mov	r25, r24
    4744:	91 70       	andi	r25, 0x01	; 1
    4746:	80 e0       	ldi	r24, 0x00	; 0
    4748:	65 e0       	ldi	r22, 0x05	; 5
    474a:	49 2f       	mov	r20, r25
    474c:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    4750:	8c a5       	ldd	r24, Y+44	; 0x2c
    4752:	98 2f       	mov	r25, r24
    4754:	91 70       	andi	r25, 0x01	; 1
    4756:	80 e0       	ldi	r24, 0x00	; 0
    4758:	64 e0       	ldi	r22, 0x04	; 4
    475a:	49 2f       	mov	r20, r25
    475c:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    4760:	81 e0       	ldi	r24, 0x01	; 1
    4762:	63 e0       	ldi	r22, 0x03	; 3
    4764:	41 e0       	ldi	r20, 0x01	; 1
    4766:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	a0 e8       	ldi	r26, 0x80	; 128
    4770:	bf e3       	ldi	r27, 0x3F	; 63
    4772:	89 8f       	std	Y+25, r24	; 0x19
    4774:	9a 8f       	std	Y+26, r25	; 0x1a
    4776:	ab 8f       	std	Y+27, r26	; 0x1b
    4778:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    477a:	69 8d       	ldd	r22, Y+25	; 0x19
    477c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    477e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4780:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	4a e7       	ldi	r20, 0x7A	; 122
    4788:	55 e4       	ldi	r21, 0x45	; 69
    478a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	8d 8b       	std	Y+21, r24	; 0x15
    4794:	9e 8b       	std	Y+22, r25	; 0x16
    4796:	af 8b       	std	Y+23, r26	; 0x17
    4798:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    479a:	6d 89       	ldd	r22, Y+21	; 0x15
    479c:	7e 89       	ldd	r23, Y+22	; 0x16
    479e:	8f 89       	ldd	r24, Y+23	; 0x17
    47a0:	98 8d       	ldd	r25, Y+24	; 0x18
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	40 e8       	ldi	r20, 0x80	; 128
    47a8:	5f e3       	ldi	r21, 0x3F	; 63
    47aa:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    47ae:	88 23       	and	r24, r24
    47b0:	2c f4       	brge	.+10     	; 0x47bc <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	9c 8b       	std	Y+20, r25	; 0x14
    47b8:	8b 8b       	std	Y+19, r24	; 0x13
    47ba:	3f c0       	rjmp	.+126    	; 0x483a <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    47bc:	6d 89       	ldd	r22, Y+21	; 0x15
    47be:	7e 89       	ldd	r23, Y+22	; 0x16
    47c0:	8f 89       	ldd	r24, Y+23	; 0x17
    47c2:	98 8d       	ldd	r25, Y+24	; 0x18
    47c4:	20 e0       	ldi	r18, 0x00	; 0
    47c6:	3f ef       	ldi	r19, 0xFF	; 255
    47c8:	4f e7       	ldi	r20, 0x7F	; 127
    47ca:	57 e4       	ldi	r21, 0x47	; 71
    47cc:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    47d0:	18 16       	cp	r1, r24
    47d2:	4c f5       	brge	.+82     	; 0x4826 <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d4:	69 8d       	ldd	r22, Y+25	; 0x19
    47d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	40 e2       	ldi	r20, 0x20	; 32
    47e2:	51 e4       	ldi	r21, 0x41	; 65
    47e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	bc 01       	movw	r22, r24
    47ee:	cd 01       	movw	r24, r26
    47f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f4:	dc 01       	movw	r26, r24
    47f6:	cb 01       	movw	r24, r22
    47f8:	9c 8b       	std	Y+20, r25	; 0x14
    47fa:	8b 8b       	std	Y+19, r24	; 0x13
    47fc:	0f c0       	rjmp	.+30     	; 0x481c <enu_PassByteAndLatch+0x284>
    47fe:	80 e9       	ldi	r24, 0x90	; 144
    4800:	91 e0       	ldi	r25, 0x01	; 1
    4802:	9a 8b       	std	Y+18, r25	; 0x12
    4804:	89 8b       	std	Y+17, r24	; 0x11
    4806:	89 89       	ldd	r24, Y+17	; 0x11
    4808:	9a 89       	ldd	r25, Y+18	; 0x12
    480a:	01 97       	sbiw	r24, 0x01	; 1
    480c:	f1 f7       	brne	.-4      	; 0x480a <enu_PassByteAndLatch+0x272>
    480e:	9a 8b       	std	Y+18, r25	; 0x12
    4810:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4812:	8b 89       	ldd	r24, Y+19	; 0x13
    4814:	9c 89       	ldd	r25, Y+20	; 0x14
    4816:	01 97       	sbiw	r24, 0x01	; 1
    4818:	9c 8b       	std	Y+20, r25	; 0x14
    481a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    481c:	8b 89       	ldd	r24, Y+19	; 0x13
    481e:	9c 89       	ldd	r25, Y+20	; 0x14
    4820:	00 97       	sbiw	r24, 0x00	; 0
    4822:	69 f7       	brne	.-38     	; 0x47fe <enu_PassByteAndLatch+0x266>
    4824:	14 c0       	rjmp	.+40     	; 0x484e <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4826:	6d 89       	ldd	r22, Y+21	; 0x15
    4828:	7e 89       	ldd	r23, Y+22	; 0x16
    482a:	8f 89       	ldd	r24, Y+23	; 0x17
    482c:	98 8d       	ldd	r25, Y+24	; 0x18
    482e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4832:	dc 01       	movw	r26, r24
    4834:	cb 01       	movw	r24, r22
    4836:	9c 8b       	std	Y+20, r25	; 0x14
    4838:	8b 8b       	std	Y+19, r24	; 0x13
    483a:	8b 89       	ldd	r24, Y+19	; 0x13
    483c:	9c 89       	ldd	r25, Y+20	; 0x14
    483e:	98 8b       	std	Y+16, r25	; 0x10
    4840:	8f 87       	std	Y+15, r24	; 0x0f
    4842:	8f 85       	ldd	r24, Y+15	; 0x0f
    4844:	98 89       	ldd	r25, Y+16	; 0x10
    4846:	01 97       	sbiw	r24, 0x01	; 1
    4848:	f1 f7       	brne	.-4      	; 0x4846 <enu_PassByteAndLatch+0x2ae>
    484a:	98 8b       	std	Y+16, r25	; 0x10
    484c:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	63 e0       	ldi	r22, 0x03	; 3
    4852:	40 e0       	ldi	r20, 0x00	; 0
    4854:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    4858:	80 e0       	ldi	r24, 0x00	; 0
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	a0 e0       	ldi	r26, 0x00	; 0
    485e:	b0 e4       	ldi	r27, 0x40	; 64
    4860:	8b 87       	std	Y+11, r24	; 0x0b
    4862:	9c 87       	std	Y+12, r25	; 0x0c
    4864:	ad 87       	std	Y+13, r26	; 0x0d
    4866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4868:	6b 85       	ldd	r22, Y+11	; 0x0b
    486a:	7c 85       	ldd	r23, Y+12	; 0x0c
    486c:	8d 85       	ldd	r24, Y+13	; 0x0d
    486e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4870:	20 e0       	ldi	r18, 0x00	; 0
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	4a e7       	ldi	r20, 0x7A	; 122
    4876:	55 e4       	ldi	r21, 0x45	; 69
    4878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	8f 83       	std	Y+7, r24	; 0x07
    4882:	98 87       	std	Y+8, r25	; 0x08
    4884:	a9 87       	std	Y+9, r26	; 0x09
    4886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4888:	6f 81       	ldd	r22, Y+7	; 0x07
    488a:	78 85       	ldd	r23, Y+8	; 0x08
    488c:	89 85       	ldd	r24, Y+9	; 0x09
    488e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	40 e8       	ldi	r20, 0x80	; 128
    4896:	5f e3       	ldi	r21, 0x3F	; 63
    4898:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    489c:	88 23       	and	r24, r24
    489e:	2c f4       	brge	.+10     	; 0x48aa <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	9e 83       	std	Y+6, r25	; 0x06
    48a6:	8d 83       	std	Y+5, r24	; 0x05
    48a8:	3f c0       	rjmp	.+126    	; 0x4928 <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    48aa:	6f 81       	ldd	r22, Y+7	; 0x07
    48ac:	78 85       	ldd	r23, Y+8	; 0x08
    48ae:	89 85       	ldd	r24, Y+9	; 0x09
    48b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48b2:	20 e0       	ldi	r18, 0x00	; 0
    48b4:	3f ef       	ldi	r19, 0xFF	; 255
    48b6:	4f e7       	ldi	r20, 0x7F	; 127
    48b8:	57 e4       	ldi	r21, 0x47	; 71
    48ba:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    48be:	18 16       	cp	r1, r24
    48c0:	4c f5       	brge	.+82     	; 0x4914 <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    48c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    48c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    48c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	40 e2       	ldi	r20, 0x20	; 32
    48d0:	51 e4       	ldi	r21, 0x41	; 65
    48d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d6:	dc 01       	movw	r26, r24
    48d8:	cb 01       	movw	r24, r22
    48da:	bc 01       	movw	r22, r24
    48dc:	cd 01       	movw	r24, r26
    48de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e2:	dc 01       	movw	r26, r24
    48e4:	cb 01       	movw	r24, r22
    48e6:	9e 83       	std	Y+6, r25	; 0x06
    48e8:	8d 83       	std	Y+5, r24	; 0x05
    48ea:	0f c0       	rjmp	.+30     	; 0x490a <enu_PassByteAndLatch+0x372>
    48ec:	80 e9       	ldi	r24, 0x90	; 144
    48ee:	91 e0       	ldi	r25, 0x01	; 1
    48f0:	9c 83       	std	Y+4, r25	; 0x04
    48f2:	8b 83       	std	Y+3, r24	; 0x03
    48f4:	8b 81       	ldd	r24, Y+3	; 0x03
    48f6:	9c 81       	ldd	r25, Y+4	; 0x04
    48f8:	01 97       	sbiw	r24, 0x01	; 1
    48fa:	f1 f7       	brne	.-4      	; 0x48f8 <enu_PassByteAndLatch+0x360>
    48fc:	9c 83       	std	Y+4, r25	; 0x04
    48fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4900:	8d 81       	ldd	r24, Y+5	; 0x05
    4902:	9e 81       	ldd	r25, Y+6	; 0x06
    4904:	01 97       	sbiw	r24, 0x01	; 1
    4906:	9e 83       	std	Y+6, r25	; 0x06
    4908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    490a:	8d 81       	ldd	r24, Y+5	; 0x05
    490c:	9e 81       	ldd	r25, Y+6	; 0x06
    490e:	00 97       	sbiw	r24, 0x00	; 0
    4910:	69 f7       	brne	.-38     	; 0x48ec <enu_PassByteAndLatch+0x354>
    4912:	14 c0       	rjmp	.+40     	; 0x493c <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4914:	6f 81       	ldd	r22, Y+7	; 0x07
    4916:	78 85       	ldd	r23, Y+8	; 0x08
    4918:	89 85       	ldd	r24, Y+9	; 0x09
    491a:	9a 85       	ldd	r25, Y+10	; 0x0a
    491c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4920:	dc 01       	movw	r26, r24
    4922:	cb 01       	movw	r24, r22
    4924:	9e 83       	std	Y+6, r25	; 0x06
    4926:	8d 83       	std	Y+5, r24	; 0x05
    4928:	8d 81       	ldd	r24, Y+5	; 0x05
    492a:	9e 81       	ldd	r25, Y+6	; 0x06
    492c:	9a 83       	std	Y+2, r25	; 0x02
    492e:	89 83       	std	Y+1, r24	; 0x01
    4930:	89 81       	ldd	r24, Y+1	; 0x01
    4932:	9a 81       	ldd	r25, Y+2	; 0x02
    4934:	01 97       	sbiw	r24, 0x01	; 1
    4936:	f1 f7       	brne	.-4      	; 0x4934 <enu_PassByteAndLatch+0x39c>
    4938:	9a 83       	std	Y+2, r25	; 0x02
    493a:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    493c:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    493e:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    4940:	ac 96       	adiw	r28, 0x2c	; 44
    4942:	0f b6       	in	r0, 0x3f	; 63
    4944:	f8 94       	cli
    4946:	de bf       	out	0x3e, r29	; 62
    4948:	0f be       	out	0x3f, r0	; 63
    494a:	cd bf       	out	0x3d, r28	; 61
    494c:	cf 91       	pop	r28
    494e:	df 91       	pop	r29
    4950:	08 95       	ret

00004952 <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    4952:	df 93       	push	r29
    4954:	cf 93       	push	r28
    4956:	cd b7       	in	r28, 0x3d	; 61
    4958:	de b7       	in	r29, 0x3e	; 62
    495a:	27 97       	sbiw	r28, 0x07	; 7
    495c:	0f b6       	in	r0, 0x3f	; 63
    495e:	f8 94       	cli
    4960:	de bf       	out	0x3e, r29	; 62
    4962:	0f be       	out	0x3f, r0	; 63
    4964:	cd bf       	out	0x3d, r28	; 61
    4966:	9c 83       	std	Y+4, r25	; 0x04
    4968:	8b 83       	std	Y+3, r24	; 0x03
    496a:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    4970:	8b 81       	ldd	r24, Y+3	; 0x03
    4972:	9c 81       	ldd	r25, Y+4	; 0x04
    4974:	00 97       	sbiw	r24, 0x00	; 0
    4976:	09 f4       	brne	.+2      	; 0x497a <enu_AddCustomCharacter+0x28>
    4978:	79 c0       	rjmp	.+242    	; 0x4a6c <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    497a:	8d 81       	ldd	r24, Y+5	; 0x05
    497c:	88 30       	cpi	r24, 0x08	; 8
    497e:	08 f0       	brcs	.+2      	; 0x4982 <enu_AddCustomCharacter+0x30>
    4980:	72 c0       	rjmp	.+228    	; 0x4a66 <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    4982:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4984:	81 e0       	ldi	r24, 0x01	; 1
    4986:	61 e0       	ldi	r22, 0x01	; 1
    4988:	40 e0       	ldi	r20, 0x00	; 0
    498a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    498e:	8d 81       	ldd	r24, Y+5	; 0x05
    4990:	28 2f       	mov	r18, r24
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	3f 83       	std	Y+7, r19	; 0x07
    4996:	2e 83       	std	Y+6, r18	; 0x06
    4998:	8e 81       	ldd	r24, Y+6	; 0x06
    499a:	9f 81       	ldd	r25, Y+7	; 0x07
    499c:	83 30       	cpi	r24, 0x03	; 3
    499e:	91 05       	cpc	r25, r1
    49a0:	a9 f1       	breq	.+106    	; 0x4a0c <enu_AddCustomCharacter+0xba>
    49a2:	2e 81       	ldd	r18, Y+6	; 0x06
    49a4:	3f 81       	ldd	r19, Y+7	; 0x07
    49a6:	24 30       	cpi	r18, 0x04	; 4
    49a8:	31 05       	cpc	r19, r1
    49aa:	7c f4       	brge	.+30     	; 0x49ca <enu_AddCustomCharacter+0x78>
    49ac:	8e 81       	ldd	r24, Y+6	; 0x06
    49ae:	9f 81       	ldd	r25, Y+7	; 0x07
    49b0:	81 30       	cpi	r24, 0x01	; 1
    49b2:	91 05       	cpc	r25, r1
    49b4:	19 f1       	breq	.+70     	; 0x49fc <enu_AddCustomCharacter+0xaa>
    49b6:	2e 81       	ldd	r18, Y+6	; 0x06
    49b8:	3f 81       	ldd	r19, Y+7	; 0x07
    49ba:	22 30       	cpi	r18, 0x02	; 2
    49bc:	31 05       	cpc	r19, r1
    49be:	14 f5       	brge	.+68     	; 0x4a04 <enu_AddCustomCharacter+0xb2>
    49c0:	8e 81       	ldd	r24, Y+6	; 0x06
    49c2:	9f 81       	ldd	r25, Y+7	; 0x07
    49c4:	00 97       	sbiw	r24, 0x00	; 0
    49c6:	b1 f0       	breq	.+44     	; 0x49f4 <enu_AddCustomCharacter+0xa2>
    49c8:	34 c0       	rjmp	.+104    	; 0x4a32 <enu_AddCustomCharacter+0xe0>
    49ca:	2e 81       	ldd	r18, Y+6	; 0x06
    49cc:	3f 81       	ldd	r19, Y+7	; 0x07
    49ce:	25 30       	cpi	r18, 0x05	; 5
    49d0:	31 05       	cpc	r19, r1
    49d2:	21 f1       	breq	.+72     	; 0x4a1c <enu_AddCustomCharacter+0xca>
    49d4:	8e 81       	ldd	r24, Y+6	; 0x06
    49d6:	9f 81       	ldd	r25, Y+7	; 0x07
    49d8:	85 30       	cpi	r24, 0x05	; 5
    49da:	91 05       	cpc	r25, r1
    49dc:	dc f0       	brlt	.+54     	; 0x4a14 <enu_AddCustomCharacter+0xc2>
    49de:	2e 81       	ldd	r18, Y+6	; 0x06
    49e0:	3f 81       	ldd	r19, Y+7	; 0x07
    49e2:	26 30       	cpi	r18, 0x06	; 6
    49e4:	31 05       	cpc	r19, r1
    49e6:	f1 f0       	breq	.+60     	; 0x4a24 <enu_AddCustomCharacter+0xd2>
    49e8:	8e 81       	ldd	r24, Y+6	; 0x06
    49ea:	9f 81       	ldd	r25, Y+7	; 0x07
    49ec:	87 30       	cpi	r24, 0x07	; 7
    49ee:	91 05       	cpc	r25, r1
    49f0:	e9 f0       	breq	.+58     	; 0x4a2c <enu_AddCustomCharacter+0xda>
    49f2:	1f c0       	rjmp	.+62     	; 0x4a32 <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    49f4:	80 e4       	ldi	r24, 0x40	; 64
    49f6:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
    49fa:	1b c0       	rjmp	.+54     	; 0x4a32 <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    49fc:	88 e4       	ldi	r24, 0x48	; 72
    49fe:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
    4a02:	17 c0       	rjmp	.+46     	; 0x4a32 <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    4a04:	80 e5       	ldi	r24, 0x50	; 80
    4a06:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
    4a0a:	13 c0       	rjmp	.+38     	; 0x4a32 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    4a0c:	88 e5       	ldi	r24, 0x58	; 88
    4a0e:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
    4a12:	0f c0       	rjmp	.+30     	; 0x4a32 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    4a14:	80 e6       	ldi	r24, 0x60	; 96
    4a16:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
    4a1a:	0b c0       	rjmp	.+22     	; 0x4a32 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    4a1c:	88 e6       	ldi	r24, 0x68	; 104
    4a1e:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
    4a22:	07 c0       	rjmp	.+14     	; 0x4a32 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    4a24:	80 e7       	ldi	r24, 0x70	; 112
    4a26:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
    4a2a:	03 c0       	rjmp	.+6      	; 0x4a32 <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    4a2c:	88 e7       	ldi	r24, 0x78	; 120
    4a2e:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    4a32:	81 e0       	ldi	r24, 0x01	; 1
    4a34:	61 e0       	ldi	r22, 0x01	; 1
    4a36:	41 e0       	ldi	r20, 0x01	; 1
    4a38:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    4a3c:	19 82       	std	Y+1, r1	; 0x01
    4a3e:	0e c0       	rjmp	.+28     	; 0x4a5c <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    4a40:	89 81       	ldd	r24, Y+1	; 0x01
    4a42:	28 2f       	mov	r18, r24
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	8b 81       	ldd	r24, Y+3	; 0x03
    4a48:	9c 81       	ldd	r25, Y+4	; 0x04
    4a4a:	fc 01       	movw	r30, r24
    4a4c:	e2 0f       	add	r30, r18
    4a4e:	f3 1f       	adc	r31, r19
    4a50:	80 81       	ld	r24, Z
    4a52:	0e 94 cc 22 	call	0x4598	; 0x4598 <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    4a56:	89 81       	ldd	r24, Y+1	; 0x01
    4a58:	8f 5f       	subi	r24, 0xFF	; 255
    4a5a:	89 83       	std	Y+1, r24	; 0x01
    4a5c:	89 81       	ldd	r24, Y+1	; 0x01
    4a5e:	88 30       	cpi	r24, 0x08	; 8
    4a60:	78 f3       	brcs	.-34     	; 0x4a40 <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    4a62:	1a 82       	std	Y+2, r1	; 0x02
    4a64:	05 c0       	rjmp	.+10     	; 0x4a70 <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4a66:	82 e0       	ldi	r24, 0x02	; 2
    4a68:	8a 83       	std	Y+2, r24	; 0x02
    4a6a:	02 c0       	rjmp	.+4      	; 0x4a70 <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4a6c:	83 e0       	ldi	r24, 0x03	; 3
    4a6e:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    4a70:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a72:	27 96       	adiw	r28, 0x07	; 7
    4a74:	0f b6       	in	r0, 0x3f	; 63
    4a76:	f8 94       	cli
    4a78:	de bf       	out	0x3e, r29	; 62
    4a7a:	0f be       	out	0x3f, r0	; 63
    4a7c:	cd bf       	out	0x3d, r28	; 61
    4a7e:	cf 91       	pop	r28
    4a80:	df 91       	pop	r29
    4a82:	08 95       	ret

00004a84 <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    4a84:	df 93       	push	r29
    4a86:	cf 93       	push	r28
    4a88:	00 d0       	rcall	.+0      	; 0x4a8a <enu_ConvertDigitToASCII+0x6>
    4a8a:	0f 92       	push	r0
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	9b 83       	std	Y+3, r25	; 0x03
    4a92:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    4a94:	81 e0       	ldi	r24, 0x01	; 1
    4a96:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    4a98:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9c:	00 97       	sbiw	r24, 0x00	; 0
    4a9e:	89 f0       	breq	.+34     	; 0x4ac2 <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    4aa0:	ea 81       	ldd	r30, Y+2	; 0x02
    4aa2:	fb 81       	ldd	r31, Y+3	; 0x03
    4aa4:	80 81       	ld	r24, Z
    4aa6:	8a 30       	cpi	r24, 0x0A	; 10
    4aa8:	48 f4       	brcc	.+18     	; 0x4abc <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    4aaa:	ea 81       	ldd	r30, Y+2	; 0x02
    4aac:	fb 81       	ldd	r31, Y+3	; 0x03
    4aae:	80 81       	ld	r24, Z
    4ab0:	80 5d       	subi	r24, 0xD0	; 208
    4ab2:	ea 81       	ldd	r30, Y+2	; 0x02
    4ab4:	fb 81       	ldd	r31, Y+3	; 0x03
    4ab6:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    4ab8:	19 82       	std	Y+1, r1	; 0x01
    4aba:	05 c0       	rjmp	.+10     	; 0x4ac6 <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    4abc:	82 e0       	ldi	r24, 0x02	; 2
    4abe:	89 83       	std	Y+1, r24	; 0x01
    4ac0:	02 c0       	rjmp	.+4      	; 0x4ac6 <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    4ac2:	83 e0       	ldi	r24, 0x03	; 3
    4ac4:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    4ac6:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ac8:	0f 90       	pop	r0
    4aca:	0f 90       	pop	r0
    4acc:	0f 90       	pop	r0
    4ace:	cf 91       	pop	r28
    4ad0:	df 91       	pop	r29
    4ad2:	08 95       	ret

00004ad4 <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    4ad4:	ef 92       	push	r14
    4ad6:	ff 92       	push	r15
    4ad8:	0f 93       	push	r16
    4ada:	1f 93       	push	r17
    4adc:	df 93       	push	r29
    4ade:	cf 93       	push	r28
    4ae0:	cd b7       	in	r28, 0x3d	; 61
    4ae2:	de b7       	in	r29, 0x3e	; 62
    4ae4:	27 97       	sbiw	r28, 0x07	; 7
    4ae6:	0f b6       	in	r0, 0x3f	; 63
    4ae8:	f8 94       	cli
    4aea:	de bf       	out	0x3e, r29	; 62
    4aec:	0f be       	out	0x3f, r0	; 63
    4aee:	cd bf       	out	0x3d, r28	; 61
    4af0:	9f 83       	std	Y+7, r25	; 0x07
    4af2:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    4af4:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    4af6:	8e 81       	ldd	r24, Y+6	; 0x06
    4af8:	9f 81       	ldd	r25, Y+7	; 0x07
    4afa:	00 97       	sbiw	r24, 0x00	; 0
    4afc:	09 f4       	brne	.+2      	; 0x4b00 <enu_ReverseInteger+0x2c>
    4afe:	58 c0       	rjmp	.+176    	; 0x4bb0 <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    4b00:	19 82       	std	Y+1, r1	; 0x01
    4b02:	1a 82       	std	Y+2, r1	; 0x02
    4b04:	1b 82       	std	Y+3, r1	; 0x03
    4b06:	1c 82       	std	Y+4, r1	; 0x04
    4b08:	3c c0       	rjmp	.+120    	; 0x4b82 <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    4b0a:	89 81       	ldd	r24, Y+1	; 0x01
    4b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b0e:	ab 81       	ldd	r26, Y+3	; 0x03
    4b10:	bc 81       	ldd	r27, Y+4	; 0x04
    4b12:	2a e0       	ldi	r18, 0x0A	; 10
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	40 e0       	ldi	r20, 0x00	; 0
    4b18:	50 e0       	ldi	r21, 0x00	; 0
    4b1a:	bc 01       	movw	r22, r24
    4b1c:	cd 01       	movw	r24, r26
    4b1e:	0e 94 aa 2a 	call	0x5554	; 0x5554 <__mulsi3>
    4b22:	7b 01       	movw	r14, r22
    4b24:	8c 01       	movw	r16, r24
    4b26:	ee 81       	ldd	r30, Y+6	; 0x06
    4b28:	ff 81       	ldd	r31, Y+7	; 0x07
    4b2a:	80 81       	ld	r24, Z
    4b2c:	91 81       	ldd	r25, Z+1	; 0x01
    4b2e:	a2 81       	ldd	r26, Z+2	; 0x02
    4b30:	b3 81       	ldd	r27, Z+3	; 0x03
    4b32:	2a e0       	ldi	r18, 0x0A	; 10
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	40 e0       	ldi	r20, 0x00	; 0
    4b38:	50 e0       	ldi	r21, 0x00	; 0
    4b3a:	bc 01       	movw	r22, r24
    4b3c:	cd 01       	movw	r24, r26
    4b3e:	0e 94 c9 2a 	call	0x5592	; 0x5592 <__udivmodsi4>
    4b42:	dc 01       	movw	r26, r24
    4b44:	cb 01       	movw	r24, r22
    4b46:	8e 0d       	add	r24, r14
    4b48:	9f 1d       	adc	r25, r15
    4b4a:	a0 1f       	adc	r26, r16
    4b4c:	b1 1f       	adc	r27, r17
    4b4e:	89 83       	std	Y+1, r24	; 0x01
    4b50:	9a 83       	std	Y+2, r25	; 0x02
    4b52:	ab 83       	std	Y+3, r26	; 0x03
    4b54:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    4b56:	ee 81       	ldd	r30, Y+6	; 0x06
    4b58:	ff 81       	ldd	r31, Y+7	; 0x07
    4b5a:	80 81       	ld	r24, Z
    4b5c:	91 81       	ldd	r25, Z+1	; 0x01
    4b5e:	a2 81       	ldd	r26, Z+2	; 0x02
    4b60:	b3 81       	ldd	r27, Z+3	; 0x03
    4b62:	2a e0       	ldi	r18, 0x0A	; 10
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	40 e0       	ldi	r20, 0x00	; 0
    4b68:	50 e0       	ldi	r21, 0x00	; 0
    4b6a:	bc 01       	movw	r22, r24
    4b6c:	cd 01       	movw	r24, r26
    4b6e:	0e 94 c9 2a 	call	0x5592	; 0x5592 <__udivmodsi4>
    4b72:	da 01       	movw	r26, r20
    4b74:	c9 01       	movw	r24, r18
    4b76:	ee 81       	ldd	r30, Y+6	; 0x06
    4b78:	ff 81       	ldd	r31, Y+7	; 0x07
    4b7a:	80 83       	st	Z, r24
    4b7c:	91 83       	std	Z+1, r25	; 0x01
    4b7e:	a2 83       	std	Z+2, r26	; 0x02
    4b80:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    4b82:	ee 81       	ldd	r30, Y+6	; 0x06
    4b84:	ff 81       	ldd	r31, Y+7	; 0x07
    4b86:	80 81       	ld	r24, Z
    4b88:	91 81       	ldd	r25, Z+1	; 0x01
    4b8a:	a2 81       	ldd	r26, Z+2	; 0x02
    4b8c:	b3 81       	ldd	r27, Z+3	; 0x03
    4b8e:	00 97       	sbiw	r24, 0x00	; 0
    4b90:	a1 05       	cpc	r26, r1
    4b92:	b1 05       	cpc	r27, r1
    4b94:	09 f0       	breq	.+2      	; 0x4b98 <enu_ReverseInteger+0xc4>
    4b96:	b9 cf       	rjmp	.-142    	; 0x4b0a <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    4b98:	ee 81       	ldd	r30, Y+6	; 0x06
    4b9a:	ff 81       	ldd	r31, Y+7	; 0x07
    4b9c:	89 81       	ldd	r24, Y+1	; 0x01
    4b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba0:	ab 81       	ldd	r26, Y+3	; 0x03
    4ba2:	bc 81       	ldd	r27, Y+4	; 0x04
    4ba4:	80 83       	st	Z, r24
    4ba6:	91 83       	std	Z+1, r25	; 0x01
    4ba8:	a2 83       	std	Z+2, r26	; 0x02
    4baa:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    4bac:	1d 82       	std	Y+5, r1	; 0x05
    4bae:	02 c0       	rjmp	.+4      	; 0x4bb4 <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4bb0:	83 e0       	ldi	r24, 0x03	; 3
    4bb2:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    4bb4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4bb6:	27 96       	adiw	r28, 0x07	; 7
    4bb8:	0f b6       	in	r0, 0x3f	; 63
    4bba:	f8 94       	cli
    4bbc:	de bf       	out	0x3e, r29	; 62
    4bbe:	0f be       	out	0x3f, r0	; 63
    4bc0:	cd bf       	out	0x3d, r28	; 61
    4bc2:	cf 91       	pop	r28
    4bc4:	df 91       	pop	r29
    4bc6:	1f 91       	pop	r17
    4bc8:	0f 91       	pop	r16
    4bca:	ff 90       	pop	r15
    4bcc:	ef 90       	pop	r14
    4bce:	08 95       	ret

00004bd0 <enu_ConvertFloatToInteger>:

static ErrorState_t enu_ConvertFloatToInteger(f32* Copy_f32_DecimalDigits, u8 Copy_u8_FloatPrecision)
{
    4bd0:	ef 92       	push	r14
    4bd2:	ff 92       	push	r15
    4bd4:	0f 93       	push	r16
    4bd6:	1f 93       	push	r17
    4bd8:	df 93       	push	r29
    4bda:	cf 93       	push	r28
    4bdc:	cd b7       	in	r28, 0x3d	; 61
    4bde:	de b7       	in	r29, 0x3e	; 62
    4be0:	2c 97       	sbiw	r28, 0x0c	; 12
    4be2:	0f b6       	in	r0, 0x3f	; 63
    4be4:	f8 94       	cli
    4be6:	de bf       	out	0x3e, r29	; 62
    4be8:	0f be       	out	0x3f, r0	; 63
    4bea:	cd bf       	out	0x3d, r28	; 61
    4bec:	9b 87       	std	Y+11, r25	; 0x0b
    4bee:	8a 87       	std	Y+10, r24	; 0x0a
    4bf0:	6c 87       	std	Y+12, r22	; 0x0c
    u8 Local_u8_ErrorFlag = ES_OK;
    4bf2:	19 86       	std	Y+9, r1	; 0x09
    u32 Local_u32_CheckVariable = 0;
    4bf4:	1d 82       	std	Y+5, r1	; 0x05
    4bf6:	1e 82       	std	Y+6, r1	; 0x06
    4bf8:	1f 82       	std	Y+7, r1	; 0x07
    4bfa:	18 86       	std	Y+8, r1	; 0x08
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    4bfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c00:	00 97       	sbiw	r24, 0x00	; 0
    4c02:	09 f4       	brne	.+2      	; 0x4c06 <enu_ConvertFloatToInteger+0x36>
    4c04:	90 c0       	rjmp	.+288    	; 0x4d26 <enu_ConvertFloatToInteger+0x156>
    4c06:	29 c0       	rjmp	.+82     	; 0x4c5a <enu_ConvertFloatToInteger+0x8a>
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
        {
            *Copy_f32_DecimalDigits *= 10;
    4c08:	ea 85       	ldd	r30, Y+10	; 0x0a
    4c0a:	fb 85       	ldd	r31, Y+11	; 0x0b
    4c0c:	80 81       	ld	r24, Z
    4c0e:	91 81       	ldd	r25, Z+1	; 0x01
    4c10:	a2 81       	ldd	r26, Z+2	; 0x02
    4c12:	b3 81       	ldd	r27, Z+3	; 0x03
    4c14:	bc 01       	movw	r22, r24
    4c16:	cd 01       	movw	r24, r26
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	40 e2       	ldi	r20, 0x20	; 32
    4c1e:	51 e4       	ldi	r21, 0x41	; 65
    4c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c24:	dc 01       	movw	r26, r24
    4c26:	cb 01       	movw	r24, r22
    4c28:	ea 85       	ldd	r30, Y+10	; 0x0a
    4c2a:	fb 85       	ldd	r31, Y+11	; 0x0b
    4c2c:	80 83       	st	Z, r24
    4c2e:	91 83       	std	Z+1, r25	; 0x01
    4c30:	a2 83       	std	Z+2, r26	; 0x02
    4c32:	b3 83       	std	Z+3, r27	; 0x03

            
            Local_u32_CheckVariable = (u32)(*Copy_f32_DecimalDigits);
    4c34:	ea 85       	ldd	r30, Y+10	; 0x0a
    4c36:	fb 85       	ldd	r31, Y+11	; 0x0b
    4c38:	80 81       	ld	r24, Z
    4c3a:	91 81       	ldd	r25, Z+1	; 0x01
    4c3c:	a2 81       	ldd	r26, Z+2	; 0x02
    4c3e:	b3 81       	ldd	r27, Z+3	; 0x03
    4c40:	bc 01       	movw	r22, r24
    4c42:	cd 01       	movw	r24, r26
    4c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	8d 83       	std	Y+5, r24	; 0x05
    4c4e:	9e 83       	std	Y+6, r25	; 0x06
    4c50:	af 83       	std	Y+7, r26	; 0x07
    4c52:	b8 87       	std	Y+8, r27	; 0x08

            Copy_u8_FloatPrecision--;
    4c54:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c56:	81 50       	subi	r24, 0x01	; 1
    4c58:	8c 87       	std	Y+12, r24	; 0x0c
    u32 Local_u32_CheckVariable = 0;
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
    4c5a:	ea 85       	ldd	r30, Y+10	; 0x0a
    4c5c:	fb 85       	ldd	r31, Y+11	; 0x0b
    4c5e:	e0 80       	ld	r14, Z
    4c60:	f1 80       	ldd	r15, Z+1	; 0x01
    4c62:	02 81       	ldd	r16, Z+2	; 0x02
    4c64:	13 81       	ldd	r17, Z+3	; 0x03
    4c66:	6d 81       	ldd	r22, Y+5	; 0x05
    4c68:	7e 81       	ldd	r23, Y+6	; 0x06
    4c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    4c6c:	98 85       	ldd	r25, Y+8	; 0x08
    4c6e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
    4c72:	9b 01       	movw	r18, r22
    4c74:	ac 01       	movw	r20, r24
    4c76:	c8 01       	movw	r24, r16
    4c78:	b7 01       	movw	r22, r14
    4c7a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4c7e:	dc 01       	movw	r26, r24
    4c80:	cb 01       	movw	r24, r22
    4c82:	bc 01       	movw	r22, r24
    4c84:	cd 01       	movw	r24, r26
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	30 e0       	ldi	r19, 0x00	; 0
    4c8a:	40 e0       	ldi	r20, 0x00	; 0
    4c8c:	50 e0       	ldi	r21, 0x00	; 0
    4c8e:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    4c92:	88 23       	and	r24, r24
    4c94:	09 f0       	breq	.+2      	; 0x4c98 <enu_ConvertFloatToInteger+0xc8>
    4c96:	b8 cf       	rjmp	.-144    	; 0x4c08 <enu_ConvertFloatToInteger+0x38>
    4c98:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c9a:	88 23       	and	r24, r24
    4c9c:	09 f4       	brne	.+2      	; 0x4ca0 <enu_ConvertFloatToInteger+0xd0>
    4c9e:	b4 cf       	rjmp	.-152    	; 0x4c08 <enu_ConvertFloatToInteger+0x38>
            Copy_u8_FloatPrecision--;

        }


        Local_f32_TempDecimalDigits = *Copy_f32_DecimalDigits - Local_u32_CheckVariable;
    4ca0:	ea 85       	ldd	r30, Y+10	; 0x0a
    4ca2:	fb 85       	ldd	r31, Y+11	; 0x0b
    4ca4:	e0 80       	ld	r14, Z
    4ca6:	f1 80       	ldd	r15, Z+1	; 0x01
    4ca8:	02 81       	ldd	r16, Z+2	; 0x02
    4caa:	13 81       	ldd	r17, Z+3	; 0x03
    4cac:	6d 81       	ldd	r22, Y+5	; 0x05
    4cae:	7e 81       	ldd	r23, Y+6	; 0x06
    4cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    4cb2:	98 85       	ldd	r25, Y+8	; 0x08
    4cb4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
    4cb8:	9b 01       	movw	r18, r22
    4cba:	ac 01       	movw	r20, r24
    4cbc:	c8 01       	movw	r24, r16
    4cbe:	b7 01       	movw	r22, r14
    4cc0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4cc4:	dc 01       	movw	r26, r24
    4cc6:	cb 01       	movw	r24, r22
    4cc8:	89 83       	std	Y+1, r24	; 0x01
    4cca:	9a 83       	std	Y+2, r25	; 0x02
    4ccc:	ab 83       	std	Y+3, r26	; 0x03
    4cce:	bc 83       	std	Y+4, r27	; 0x04
        Local_f32_TempDecimalDigits *= 10;
    4cd0:	69 81       	ldd	r22, Y+1	; 0x01
    4cd2:	7a 81       	ldd	r23, Y+2	; 0x02
    4cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    4cd8:	20 e0       	ldi	r18, 0x00	; 0
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	40 e2       	ldi	r20, 0x20	; 32
    4cde:	51 e4       	ldi	r21, 0x41	; 65
    4ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ce4:	dc 01       	movw	r26, r24
    4ce6:	cb 01       	movw	r24, r22
    4ce8:	89 83       	std	Y+1, r24	; 0x01
    4cea:	9a 83       	std	Y+2, r25	; 0x02
    4cec:	ab 83       	std	Y+3, r26	; 0x03
    4cee:	bc 83       	std	Y+4, r27	; 0x04

        // First decimal digit is acquired
        Local_u32_CheckVariable = Local_f32_TempDecimalDigits;
    4cf0:	69 81       	ldd	r22, Y+1	; 0x01
    4cf2:	7a 81       	ldd	r23, Y+2	; 0x02
    4cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    4cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    4cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cfc:	dc 01       	movw	r26, r24
    4cfe:	cb 01       	movw	r24, r22
    4d00:	8d 83       	std	Y+5, r24	; 0x05
    4d02:	9e 83       	std	Y+6, r25	; 0x06
    4d04:	af 83       	std	Y+7, r26	; 0x07
    4d06:	b8 87       	std	Y+8, r27	; 0x08

        //Rounding number
        if(Local_u32_CheckVariable >= 5)
    4d08:	8d 81       	ldd	r24, Y+5	; 0x05
    4d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d0c:	af 81       	ldd	r26, Y+7	; 0x07
    4d0e:	b8 85       	ldd	r27, Y+8	; 0x08
    4d10:	85 30       	cpi	r24, 0x05	; 5
    4d12:	91 05       	cpc	r25, r1
    4d14:	a1 05       	cpc	r26, r1
    4d16:	b1 05       	cpc	r27, r1
    4d18:	40 f0       	brcs	.+16     	; 0x4d2a <enu_ConvertFloatToInteger+0x15a>
        {
            *Copy_f32_DecimalDigits++;
    4d1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d1e:	04 96       	adiw	r24, 0x04	; 4
    4d20:	9b 87       	std	Y+11, r25	; 0x0b
    4d22:	8a 87       	std	Y+10, r24	; 0x0a
    4d24:	02 c0       	rjmp	.+4      	; 0x4d2a <enu_ConvertFloatToInteger+0x15a>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4d26:	83 e0       	ldi	r24, 0x03	; 3
    4d28:	89 87       	std	Y+9, r24	; 0x09
    }

    return Local_u8_ErrorFlag;
    4d2a:	89 85       	ldd	r24, Y+9	; 0x09
}
    4d2c:	2c 96       	adiw	r28, 0x0c	; 12
    4d2e:	0f b6       	in	r0, 0x3f	; 63
    4d30:	f8 94       	cli
    4d32:	de bf       	out	0x3e, r29	; 62
    4d34:	0f be       	out	0x3f, r0	; 63
    4d36:	cd bf       	out	0x3d, r28	; 61
    4d38:	cf 91       	pop	r28
    4d3a:	df 91       	pop	r29
    4d3c:	1f 91       	pop	r17
    4d3e:	0f 91       	pop	r16
    4d40:	ff 90       	pop	r15
    4d42:	ef 90       	pop	r14
    4d44:	08 95       	ret

00004d46 <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    4d46:	df 93       	push	r29
    4d48:	cf 93       	push	r28
    4d4a:	00 d0       	rcall	.+0      	; 0x4d4c <Keypad_enu_Initialization+0x6>
    4d4c:	cd b7       	in	r28, 0x3d	; 61
    4d4e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    4d54:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    4d56:	19 82       	std	Y+1, r1	; 0x01
    4d58:	31 c0       	rjmp	.+98     	; 0x4dbc <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    4d5a:	89 81       	ldd	r24, Y+1	; 0x01
    4d5c:	88 2f       	mov	r24, r24
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	88 0f       	add	r24, r24
    4d62:	99 1f       	adc	r25, r25
    4d64:	fc 01       	movw	r30, r24
    4d66:	eb 57       	subi	r30, 0x7B	; 123
    4d68:	fe 4f       	sbci	r31, 0xFE	; 254
    4d6a:	20 81       	ld	r18, Z
    4d6c:	89 81       	ldd	r24, Y+1	; 0x01
    4d6e:	88 2f       	mov	r24, r24
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	88 0f       	add	r24, r24
    4d74:	99 1f       	adc	r25, r25
    4d76:	fc 01       	movw	r30, r24
    4d78:	ea 57       	subi	r30, 0x7A	; 122
    4d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    4d7c:	90 81       	ld	r25, Z
    4d7e:	82 2f       	mov	r24, r18
    4d80:	69 2f       	mov	r22, r25
    4d82:	40 e0       	ldi	r20, 0x00	; 0
    4d84:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    4d88:	89 81       	ldd	r24, Y+1	; 0x01
    4d8a:	88 2f       	mov	r24, r24
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	88 0f       	add	r24, r24
    4d90:	99 1f       	adc	r25, r25
    4d92:	fc 01       	movw	r30, r24
    4d94:	eb 57       	subi	r30, 0x7B	; 123
    4d96:	fe 4f       	sbci	r31, 0xFE	; 254
    4d98:	20 81       	ld	r18, Z
    4d9a:	89 81       	ldd	r24, Y+1	; 0x01
    4d9c:	88 2f       	mov	r24, r24
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	88 0f       	add	r24, r24
    4da2:	99 1f       	adc	r25, r25
    4da4:	fc 01       	movw	r30, r24
    4da6:	ea 57       	subi	r30, 0x7A	; 122
    4da8:	fe 4f       	sbci	r31, 0xFE	; 254
    4daa:	90 81       	ld	r25, Z
    4dac:	82 2f       	mov	r24, r18
    4dae:	69 2f       	mov	r22, r25
    4db0:	41 e0       	ldi	r20, 0x01	; 1
    4db2:	0e 94 9b 14 	call	0x2936	; 0x2936 <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    4db6:	89 81       	ldd	r24, Y+1	; 0x01
    4db8:	8f 5f       	subi	r24, 0xFF	; 255
    4dba:	89 83       	std	Y+1, r24	; 0x01
    4dbc:	89 81       	ldd	r24, Y+1	; 0x01
    4dbe:	84 30       	cpi	r24, 0x04	; 4
    4dc0:	60 f2       	brcs	.-104    	; 0x4d5a <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    4dc2:	19 82       	std	Y+1, r1	; 0x01
    4dc4:	31 c0       	rjmp	.+98     	; 0x4e28 <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    4dc6:	89 81       	ldd	r24, Y+1	; 0x01
    4dc8:	88 2f       	mov	r24, r24
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	88 0f       	add	r24, r24
    4dce:	99 1f       	adc	r25, r25
    4dd0:	fc 01       	movw	r30, r24
    4dd2:	e3 57       	subi	r30, 0x73	; 115
    4dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    4dd6:	20 81       	ld	r18, Z
    4dd8:	89 81       	ldd	r24, Y+1	; 0x01
    4dda:	88 2f       	mov	r24, r24
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	88 0f       	add	r24, r24
    4de0:	99 1f       	adc	r25, r25
    4de2:	fc 01       	movw	r30, r24
    4de4:	e2 57       	subi	r30, 0x72	; 114
    4de6:	fe 4f       	sbci	r31, 0xFE	; 254
    4de8:	90 81       	ld	r25, Z
    4dea:	82 2f       	mov	r24, r18
    4dec:	69 2f       	mov	r22, r25
    4dee:	41 e0       	ldi	r20, 0x01	; 1
    4df0:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    4df4:	89 81       	ldd	r24, Y+1	; 0x01
    4df6:	88 2f       	mov	r24, r24
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	88 0f       	add	r24, r24
    4dfc:	99 1f       	adc	r25, r25
    4dfe:	fc 01       	movw	r30, r24
    4e00:	e3 57       	subi	r30, 0x73	; 115
    4e02:	fe 4f       	sbci	r31, 0xFE	; 254
    4e04:	20 81       	ld	r18, Z
    4e06:	89 81       	ldd	r24, Y+1	; 0x01
    4e08:	88 2f       	mov	r24, r24
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	88 0f       	add	r24, r24
    4e0e:	99 1f       	adc	r25, r25
    4e10:	fc 01       	movw	r30, r24
    4e12:	e2 57       	subi	r30, 0x72	; 114
    4e14:	fe 4f       	sbci	r31, 0xFE	; 254
    4e16:	90 81       	ld	r25, Z
    4e18:	82 2f       	mov	r24, r18
    4e1a:	69 2f       	mov	r22, r25
    4e1c:	40 e0       	ldi	r20, 0x00	; 0
    4e1e:	0e 94 9b 14 	call	0x2936	; 0x2936 <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    4e22:	89 81       	ldd	r24, Y+1	; 0x01
    4e24:	8f 5f       	subi	r24, 0xFF	; 255
    4e26:	89 83       	std	Y+1, r24	; 0x01
    4e28:	89 81       	ldd	r24, Y+1	; 0x01
    4e2a:	84 30       	cpi	r24, 0x04	; 4
    4e2c:	60 f2       	brcs	.-104    	; 0x4dc6 <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    4e2e:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    4e30:	8a 81       	ldd	r24, Y+2	; 0x02

}
    4e32:	0f 90       	pop	r0
    4e34:	0f 90       	pop	r0
    4e36:	cf 91       	pop	r28
    4e38:	df 91       	pop	r29
    4e3a:	08 95       	ret

00004e3c <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    4e3c:	df 93       	push	r29
    4e3e:	cf 93       	push	r28
    4e40:	cd b7       	in	r28, 0x3d	; 61
    4e42:	de b7       	in	r29, 0x3e	; 62
    4e44:	aa 97       	sbiw	r28, 0x2a	; 42
    4e46:	0f b6       	in	r0, 0x3f	; 63
    4e48:	f8 94       	cli
    4e4a:	de bf       	out	0x3e, r29	; 62
    4e4c:	0f be       	out	0x3f, r0	; 63
    4e4e:	cd bf       	out	0x3d, r28	; 61
    4e50:	9d a3       	std	Y+37, r25	; 0x25
    4e52:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    4e54:	81 e0       	ldi	r24, 0x01	; 1
    4e56:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    4e58:	8c a1       	ldd	r24, Y+36	; 0x24
    4e5a:	9d a1       	ldd	r25, Y+37	; 0x25
    4e5c:	00 97       	sbiw	r24, 0x00	; 0
    4e5e:	09 f4       	brne	.+2      	; 0x4e62 <Keypad_enu_GetButtonPressedValue+0x26>
    4e60:	68 c1       	rjmp	.+720    	; 0x5132 <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    4e62:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    4e64:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    4e66:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    4e68:	ec a1       	ldd	r30, Y+36	; 0x24
    4e6a:	fd a1       	ldd	r31, Y+37	; 0x25
    4e6c:	8f ef       	ldi	r24, 0xFF	; 255
    4e6e:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    4e70:	19 8a       	std	Y+17, r1	; 0x11
    4e72:	5a c1       	rjmp	.+692    	; 0x5128 <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    4e74:	89 89       	ldd	r24, Y+17	; 0x11
    4e76:	88 2f       	mov	r24, r24
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	88 0f       	add	r24, r24
    4e7c:	99 1f       	adc	r25, r25
    4e7e:	fc 01       	movw	r30, r24
    4e80:	eb 57       	subi	r30, 0x7B	; 123
    4e82:	fe 4f       	sbci	r31, 0xFE	; 254
    4e84:	40 81       	ld	r20, Z
    4e86:	89 89       	ldd	r24, Y+17	; 0x11
    4e88:	88 2f       	mov	r24, r24
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	88 0f       	add	r24, r24
    4e8e:	99 1f       	adc	r25, r25
    4e90:	fc 01       	movw	r30, r24
    4e92:	ea 57       	subi	r30, 0x7A	; 122
    4e94:	fe 4f       	sbci	r31, 0xFE	; 254
    4e96:	90 81       	ld	r25, Z
    4e98:	9e 01       	movw	r18, r28
    4e9a:	2d 5e       	subi	r18, 0xED	; 237
    4e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e9e:	84 2f       	mov	r24, r20
    4ea0:	69 2f       	mov	r22, r25
    4ea2:	a9 01       	movw	r20, r18
    4ea4:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    4ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    4eaa:	88 23       	and	r24, r24
    4eac:	09 f0       	breq	.+2      	; 0x4eb0 <Keypad_enu_GetButtonPressedValue+0x74>
    4eae:	36 c1       	rjmp	.+620    	; 0x511c <Keypad_enu_GetButtonPressedValue+0x2e0>
    4eb0:	80 e0       	ldi	r24, 0x00	; 0
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	a0 e4       	ldi	r26, 0x40	; 64
    4eb6:	b0 e4       	ldi	r27, 0x40	; 64
    4eb8:	8b 87       	std	Y+11, r24	; 0x0b
    4eba:	9c 87       	std	Y+12, r25	; 0x0c
    4ebc:	ad 87       	std	Y+13, r26	; 0x0d
    4ebe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ec8:	20 e0       	ldi	r18, 0x00	; 0
    4eca:	30 e0       	ldi	r19, 0x00	; 0
    4ecc:	4a e7       	ldi	r20, 0x7A	; 122
    4ece:	55 e4       	ldi	r21, 0x45	; 69
    4ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	cb 01       	movw	r24, r22
    4ed8:	8f 83       	std	Y+7, r24	; 0x07
    4eda:	98 87       	std	Y+8, r25	; 0x08
    4edc:	a9 87       	std	Y+9, r26	; 0x09
    4ede:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ee2:	78 85       	ldd	r23, Y+8	; 0x08
    4ee4:	89 85       	ldd	r24, Y+9	; 0x09
    4ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ee8:	20 e0       	ldi	r18, 0x00	; 0
    4eea:	30 e0       	ldi	r19, 0x00	; 0
    4eec:	40 e8       	ldi	r20, 0x80	; 128
    4eee:	5f e3       	ldi	r21, 0x3F	; 63
    4ef0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    4ef4:	88 23       	and	r24, r24
    4ef6:	2c f4       	brge	.+10     	; 0x4f02 <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    4ef8:	81 e0       	ldi	r24, 0x01	; 1
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	9e 83       	std	Y+6, r25	; 0x06
    4efe:	8d 83       	std	Y+5, r24	; 0x05
    4f00:	3f c0       	rjmp	.+126    	; 0x4f80 <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    4f02:	6f 81       	ldd	r22, Y+7	; 0x07
    4f04:	78 85       	ldd	r23, Y+8	; 0x08
    4f06:	89 85       	ldd	r24, Y+9	; 0x09
    4f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f0a:	20 e0       	ldi	r18, 0x00	; 0
    4f0c:	3f ef       	ldi	r19, 0xFF	; 255
    4f0e:	4f e7       	ldi	r20, 0x7F	; 127
    4f10:	57 e4       	ldi	r21, 0x47	; 71
    4f12:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    4f16:	18 16       	cp	r1, r24
    4f18:	4c f5       	brge	.+82     	; 0x4f6c <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f22:	20 e0       	ldi	r18, 0x00	; 0
    4f24:	30 e0       	ldi	r19, 0x00	; 0
    4f26:	40 e2       	ldi	r20, 0x20	; 32
    4f28:	51 e4       	ldi	r21, 0x41	; 65
    4f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f2e:	dc 01       	movw	r26, r24
    4f30:	cb 01       	movw	r24, r22
    4f32:	bc 01       	movw	r22, r24
    4f34:	cd 01       	movw	r24, r26
    4f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f3a:	dc 01       	movw	r26, r24
    4f3c:	cb 01       	movw	r24, r22
    4f3e:	9e 83       	std	Y+6, r25	; 0x06
    4f40:	8d 83       	std	Y+5, r24	; 0x05
    4f42:	0f c0       	rjmp	.+30     	; 0x4f62 <Keypad_enu_GetButtonPressedValue+0x126>
    4f44:	80 e9       	ldi	r24, 0x90	; 144
    4f46:	91 e0       	ldi	r25, 0x01	; 1
    4f48:	9c 83       	std	Y+4, r25	; 0x04
    4f4a:	8b 83       	std	Y+3, r24	; 0x03
    4f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f50:	01 97       	sbiw	r24, 0x01	; 1
    4f52:	f1 f7       	brne	.-4      	; 0x4f50 <Keypad_enu_GetButtonPressedValue+0x114>
    4f54:	9c 83       	std	Y+4, r25	; 0x04
    4f56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f58:	8d 81       	ldd	r24, Y+5	; 0x05
    4f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f5c:	01 97       	sbiw	r24, 0x01	; 1
    4f5e:	9e 83       	std	Y+6, r25	; 0x06
    4f60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f62:	8d 81       	ldd	r24, Y+5	; 0x05
    4f64:	9e 81       	ldd	r25, Y+6	; 0x06
    4f66:	00 97       	sbiw	r24, 0x00	; 0
    4f68:	69 f7       	brne	.-38     	; 0x4f44 <Keypad_enu_GetButtonPressedValue+0x108>
    4f6a:	14 c0       	rjmp	.+40     	; 0x4f94 <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f6e:	78 85       	ldd	r23, Y+8	; 0x08
    4f70:	89 85       	ldd	r24, Y+9	; 0x09
    4f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f78:	dc 01       	movw	r26, r24
    4f7a:	cb 01       	movw	r24, r22
    4f7c:	9e 83       	std	Y+6, r25	; 0x06
    4f7e:	8d 83       	std	Y+5, r24	; 0x05
    4f80:	8d 81       	ldd	r24, Y+5	; 0x05
    4f82:	9e 81       	ldd	r25, Y+6	; 0x06
    4f84:	9a 83       	std	Y+2, r25	; 0x02
    4f86:	89 83       	std	Y+1, r24	; 0x01
    4f88:	89 81       	ldd	r24, Y+1	; 0x01
    4f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f8c:	01 97       	sbiw	r24, 0x01	; 1
    4f8e:	f1 f7       	brne	.-4      	; 0x4f8c <Keypad_enu_GetButtonPressedValue+0x150>
    4f90:	9a 83       	std	Y+2, r25	; 0x02
    4f92:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    4f94:	89 89       	ldd	r24, Y+17	; 0x11
    4f96:	88 2f       	mov	r24, r24
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	88 0f       	add	r24, r24
    4f9c:	99 1f       	adc	r25, r25
    4f9e:	fc 01       	movw	r30, r24
    4fa0:	eb 57       	subi	r30, 0x7B	; 123
    4fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    4fa4:	40 81       	ld	r20, Z
    4fa6:	89 89       	ldd	r24, Y+17	; 0x11
    4fa8:	88 2f       	mov	r24, r24
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	88 0f       	add	r24, r24
    4fae:	99 1f       	adc	r25, r25
    4fb0:	fc 01       	movw	r30, r24
    4fb2:	ea 57       	subi	r30, 0x7A	; 122
    4fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    4fb6:	90 81       	ld	r25, Z
    4fb8:	9e 01       	movw	r18, r28
    4fba:	2d 5e       	subi	r18, 0xED	; 237
    4fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    4fbe:	84 2f       	mov	r24, r20
    4fc0:	69 2f       	mov	r22, r25
    4fc2:	a9 01       	movw	r20, r18
    4fc4:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    4fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    4fca:	88 23       	and	r24, r24
    4fcc:	09 f0       	breq	.+2      	; 0x4fd0 <Keypad_enu_GetButtonPressedValue+0x194>
    4fce:	a6 c0       	rjmp	.+332    	; 0x511c <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    4fd0:	18 8a       	std	Y+16, r1	; 0x10
    4fd2:	a0 c0       	rjmp	.+320    	; 0x5114 <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    4fd4:	88 89       	ldd	r24, Y+16	; 0x10
    4fd6:	88 2f       	mov	r24, r24
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	88 0f       	add	r24, r24
    4fdc:	99 1f       	adc	r25, r25
    4fde:	fc 01       	movw	r30, r24
    4fe0:	e3 57       	subi	r30, 0x73	; 115
    4fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    4fe4:	20 81       	ld	r18, Z
    4fe6:	88 89       	ldd	r24, Y+16	; 0x10
    4fe8:	88 2f       	mov	r24, r24
    4fea:	90 e0       	ldi	r25, 0x00	; 0
    4fec:	88 0f       	add	r24, r24
    4fee:	99 1f       	adc	r25, r25
    4ff0:	fc 01       	movw	r30, r24
    4ff2:	e2 57       	subi	r30, 0x72	; 114
    4ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ff6:	90 81       	ld	r25, Z
    4ff8:	82 2f       	mov	r24, r18
    4ffa:	69 2f       	mov	r22, r25
    4ffc:	41 e0       	ldi	r20, 0x01	; 1
    4ffe:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    5002:	89 89       	ldd	r24, Y+17	; 0x11
    5004:	88 2f       	mov	r24, r24
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	88 0f       	add	r24, r24
    500a:	99 1f       	adc	r25, r25
    500c:	fc 01       	movw	r30, r24
    500e:	eb 57       	subi	r30, 0x7B	; 123
    5010:	fe 4f       	sbci	r31, 0xFE	; 254
    5012:	40 81       	ld	r20, Z
    5014:	89 89       	ldd	r24, Y+17	; 0x11
    5016:	88 2f       	mov	r24, r24
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	88 0f       	add	r24, r24
    501c:	99 1f       	adc	r25, r25
    501e:	fc 01       	movw	r30, r24
    5020:	ea 57       	subi	r30, 0x7A	; 122
    5022:	fe 4f       	sbci	r31, 0xFE	; 254
    5024:	90 81       	ld	r25, Z
    5026:	9e 01       	movw	r18, r28
    5028:	2d 5e       	subi	r18, 0xED	; 237
    502a:	3f 4f       	sbci	r19, 0xFF	; 255
    502c:	84 2f       	mov	r24, r20
    502e:	69 2f       	mov	r22, r25
    5030:	a9 01       	movw	r20, r18
    5032:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    5036:	8b 89       	ldd	r24, Y+19	; 0x13
    5038:	81 30       	cpi	r24, 0x01	; 1
    503a:	09 f0       	breq	.+2      	; 0x503e <Keypad_enu_GetButtonPressedValue+0x202>
    503c:	51 c0       	rjmp	.+162    	; 0x50e0 <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    503e:	ce 01       	movw	r24, r28
    5040:	44 96       	adiw	r24, 0x14	; 20
    5042:	9f a3       	std	Y+39, r25	; 0x27
    5044:	8e a3       	std	Y+38, r24	; 0x26
    5046:	e8 e9       	ldi	r30, 0x98	; 152
    5048:	f1 e0       	ldi	r31, 0x01	; 1
    504a:	f9 a7       	std	Y+41, r31	; 0x29
    504c:	e8 a7       	std	Y+40, r30	; 0x28
    504e:	f0 e1       	ldi	r31, 0x10	; 16
    5050:	fa a7       	std	Y+42, r31	; 0x2a
    5052:	e8 a5       	ldd	r30, Y+40	; 0x28
    5054:	f9 a5       	ldd	r31, Y+41	; 0x29
    5056:	00 80       	ld	r0, Z
    5058:	88 a5       	ldd	r24, Y+40	; 0x28
    505a:	99 a5       	ldd	r25, Y+41	; 0x29
    505c:	01 96       	adiw	r24, 0x01	; 1
    505e:	99 a7       	std	Y+41, r25	; 0x29
    5060:	88 a7       	std	Y+40, r24	; 0x28
    5062:	ee a1       	ldd	r30, Y+38	; 0x26
    5064:	ff a1       	ldd	r31, Y+39	; 0x27
    5066:	00 82       	st	Z, r0
    5068:	8e a1       	ldd	r24, Y+38	; 0x26
    506a:	9f a1       	ldd	r25, Y+39	; 0x27
    506c:	01 96       	adiw	r24, 0x01	; 1
    506e:	9f a3       	std	Y+39, r25	; 0x27
    5070:	8e a3       	std	Y+38, r24	; 0x26
    5072:	9a a5       	ldd	r25, Y+42	; 0x2a
    5074:	91 50       	subi	r25, 0x01	; 1
    5076:	9a a7       	std	Y+42, r25	; 0x2a
    5078:	ea a5       	ldd	r30, Y+42	; 0x2a
    507a:	ee 23       	and	r30, r30
    507c:	51 f7       	brne	.-44     	; 0x5052 <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    507e:	89 89       	ldd	r24, Y+17	; 0x11
    5080:	28 2f       	mov	r18, r24
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	88 89       	ldd	r24, Y+16	; 0x10
    5086:	48 2f       	mov	r20, r24
    5088:	50 e0       	ldi	r21, 0x00	; 0
    508a:	22 0f       	add	r18, r18
    508c:	33 1f       	adc	r19, r19
    508e:	22 0f       	add	r18, r18
    5090:	33 1f       	adc	r19, r19
    5092:	ce 01       	movw	r24, r28
    5094:	01 96       	adiw	r24, 0x01	; 1
    5096:	82 0f       	add	r24, r18
    5098:	93 1f       	adc	r25, r19
    509a:	84 0f       	add	r24, r20
    509c:	95 1f       	adc	r25, r21
    509e:	fc 01       	movw	r30, r24
    50a0:	73 96       	adiw	r30, 0x13	; 19
    50a2:	80 81       	ld	r24, Z
    50a4:	ec a1       	ldd	r30, Y+36	; 0x24
    50a6:	fd a1       	ldd	r31, Y+37	; 0x25
    50a8:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    50aa:	81 e0       	ldi	r24, 0x01	; 1
    50ac:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    50ae:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    50b0:	88 89       	ldd	r24, Y+16	; 0x10
    50b2:	88 2f       	mov	r24, r24
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	88 0f       	add	r24, r24
    50b8:	99 1f       	adc	r25, r25
    50ba:	fc 01       	movw	r30, r24
    50bc:	e3 57       	subi	r30, 0x73	; 115
    50be:	fe 4f       	sbci	r31, 0xFE	; 254
    50c0:	20 81       	ld	r18, Z
    50c2:	88 89       	ldd	r24, Y+16	; 0x10
    50c4:	88 2f       	mov	r24, r24
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	88 0f       	add	r24, r24
    50ca:	99 1f       	adc	r25, r25
    50cc:	fc 01       	movw	r30, r24
    50ce:	e2 57       	subi	r30, 0x72	; 114
    50d0:	fe 4f       	sbci	r31, 0xFE	; 254
    50d2:	90 81       	ld	r25, Z
    50d4:	82 2f       	mov	r24, r18
    50d6:	69 2f       	mov	r22, r25
    50d8:	40 e0       	ldi	r20, 0x00	; 0
    50da:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    50de:	1e c0       	rjmp	.+60     	; 0x511c <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    50e0:	88 89       	ldd	r24, Y+16	; 0x10
    50e2:	88 2f       	mov	r24, r24
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	88 0f       	add	r24, r24
    50e8:	99 1f       	adc	r25, r25
    50ea:	fc 01       	movw	r30, r24
    50ec:	e3 57       	subi	r30, 0x73	; 115
    50ee:	fe 4f       	sbci	r31, 0xFE	; 254
    50f0:	20 81       	ld	r18, Z
    50f2:	88 89       	ldd	r24, Y+16	; 0x10
    50f4:	88 2f       	mov	r24, r24
    50f6:	90 e0       	ldi	r25, 0x00	; 0
    50f8:	88 0f       	add	r24, r24
    50fa:	99 1f       	adc	r25, r25
    50fc:	fc 01       	movw	r30, r24
    50fe:	e2 57       	subi	r30, 0x72	; 114
    5100:	fe 4f       	sbci	r31, 0xFE	; 254
    5102:	90 81       	ld	r25, Z
    5104:	82 2f       	mov	r24, r18
    5106:	69 2f       	mov	r22, r25
    5108:	40 e0       	ldi	r20, 0x00	; 0
    510a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    510e:	88 89       	ldd	r24, Y+16	; 0x10
    5110:	8f 5f       	subi	r24, 0xFF	; 255
    5112:	88 8b       	std	Y+16, r24	; 0x10
    5114:	88 89       	ldd	r24, Y+16	; 0x10
    5116:	84 30       	cpi	r24, 0x04	; 4
    5118:	08 f4       	brcc	.+2      	; 0x511c <Keypad_enu_GetButtonPressedValue+0x2e0>
    511a:	5c cf       	rjmp	.-328    	; 0x4fd4 <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    511c:	8f 85       	ldd	r24, Y+15	; 0x0f
    511e:	88 23       	and	r24, r24
    5120:	51 f4       	brne	.+20     	; 0x5136 <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    5122:	89 89       	ldd	r24, Y+17	; 0x11
    5124:	8f 5f       	subi	r24, 0xFF	; 255
    5126:	89 8b       	std	Y+17, r24	; 0x11
    5128:	89 89       	ldd	r24, Y+17	; 0x11
    512a:	84 30       	cpi	r24, 0x04	; 4
    512c:	08 f4       	brcc	.+2      	; 0x5130 <Keypad_enu_GetButtonPressedValue+0x2f4>
    512e:	a2 ce       	rjmp	.-700    	; 0x4e74 <Keypad_enu_GetButtonPressedValue+0x38>
    5130:	02 c0       	rjmp	.+4      	; 0x5136 <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    5132:	83 e0       	ldi	r24, 0x03	; 3
    5134:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    5136:	8a 89       	ldd	r24, Y+18	; 0x12

}
    5138:	aa 96       	adiw	r28, 0x2a	; 42
    513a:	0f b6       	in	r0, 0x3f	; 63
    513c:	f8 94       	cli
    513e:	de bf       	out	0x3e, r29	; 62
    5140:	0f be       	out	0x3f, r0	; 63
    5142:	cd bf       	out	0x3d, r28	; 61
    5144:	cf 91       	pop	r28
    5146:	df 91       	pop	r29
    5148:	08 95       	ret

0000514a <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    514a:	df 93       	push	r29
    514c:	cf 93       	push	r28
    514e:	0f 92       	push	r0
    5150:	cd b7       	in	r28, 0x3d	; 61
    5152:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    5158:	80 e0       	ldi	r24, 0x00	; 0
    515a:	64 e0       	ldi	r22, 0x04	; 4
    515c:	41 e0       	ldi	r20, 0x01	; 1
    515e:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    5162:	80 e0       	ldi	r24, 0x00	; 0
    5164:	65 e0       	ldi	r22, 0x05	; 5
    5166:	41 e0       	ldi	r20, 0x01	; 1
    5168:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	66 e0       	ldi	r22, 0x06	; 6
    5170:	41 e0       	ldi	r20, 0x01	; 1
    5172:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    5176:	80 e0       	ldi	r24, 0x00	; 0
    5178:	67 e0       	ldi	r22, 0x07	; 7
    517a:	41 e0       	ldi	r20, 0x01	; 1
    517c:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    5180:	81 e0       	ldi	r24, 0x01	; 1
    5182:	62 e0       	ldi	r22, 0x02	; 2
    5184:	41 e0       	ldi	r20, 0x01	; 1
    5186:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    518a:	81 e0       	ldi	r24, 0x01	; 1
    518c:	61 e0       	ldi	r22, 0x01	; 1
    518e:	41 e0       	ldi	r20, 0x01	; 1
    5190:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    5194:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    5196:	89 81       	ldd	r24, Y+1	; 0x01

}
    5198:	0f 90       	pop	r0
    519a:	cf 91       	pop	r28
    519c:	df 91       	pop	r29
    519e:	08 95       	ret

000051a0 <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    51a0:	df 93       	push	r29
    51a2:	cf 93       	push	r28
    51a4:	00 d0       	rcall	.+0      	; 0x51a6 <Hexadecoder_enu_DisplayNum+0x6>
    51a6:	cd b7       	in	r28, 0x3d	; 61
    51a8:	de b7       	in	r29, 0x3e	; 62
    51aa:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    51ac:	81 e0       	ldi	r24, 0x01	; 1
    51ae:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    51b0:	8a 81       	ldd	r24, Y+2	; 0x02
    51b2:	8a 30       	cpi	r24, 0x0A	; 10
    51b4:	40 f5       	brcc	.+80     	; 0x5206 <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    51b6:	8a 81       	ldd	r24, Y+2	; 0x02
    51b8:	98 2f       	mov	r25, r24
    51ba:	91 70       	andi	r25, 0x01	; 1
    51bc:	80 e0       	ldi	r24, 0x00	; 0
    51be:	64 e0       	ldi	r22, 0x04	; 4
    51c0:	49 2f       	mov	r20, r25
    51c2:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    51c6:	8a 81       	ldd	r24, Y+2	; 0x02
    51c8:	86 95       	lsr	r24
    51ca:	98 2f       	mov	r25, r24
    51cc:	91 70       	andi	r25, 0x01	; 1
    51ce:	80 e0       	ldi	r24, 0x00	; 0
    51d0:	65 e0       	ldi	r22, 0x05	; 5
    51d2:	49 2f       	mov	r20, r25
    51d4:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    51d8:	8a 81       	ldd	r24, Y+2	; 0x02
    51da:	86 95       	lsr	r24
    51dc:	86 95       	lsr	r24
    51de:	98 2f       	mov	r25, r24
    51e0:	91 70       	andi	r25, 0x01	; 1
    51e2:	80 e0       	ldi	r24, 0x00	; 0
    51e4:	66 e0       	ldi	r22, 0x06	; 6
    51e6:	49 2f       	mov	r20, r25
    51e8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    51ec:	8a 81       	ldd	r24, Y+2	; 0x02
    51ee:	86 95       	lsr	r24
    51f0:	86 95       	lsr	r24
    51f2:	86 95       	lsr	r24
    51f4:	98 2f       	mov	r25, r24
    51f6:	91 70       	andi	r25, 0x01	; 1
    51f8:	80 e0       	ldi	r24, 0x00	; 0
    51fa:	67 e0       	ldi	r22, 0x07	; 7
    51fc:	49 2f       	mov	r20, r25
    51fe:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    5202:	19 82       	std	Y+1, r1	; 0x01
    5204:	02 c0       	rjmp	.+4      	; 0x520a <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5206:	82 e0       	ldi	r24, 0x02	; 2
    5208:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    520a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    520c:	0f 90       	pop	r0
    520e:	0f 90       	pop	r0
    5210:	cf 91       	pop	r28
    5212:	df 91       	pop	r29
    5214:	08 95       	ret

00005216 <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    5216:	df 93       	push	r29
    5218:	cf 93       	push	r28
    521a:	00 d0       	rcall	.+0      	; 0x521c <Hexadecoder_enu_EnableSSG+0x6>
    521c:	00 d0       	rcall	.+0      	; 0x521e <Hexadecoder_enu_EnableSSG+0x8>
    521e:	cd b7       	in	r28, 0x3d	; 61
    5220:	de b7       	in	r29, 0x3e	; 62
    5222:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5224:	81 e0       	ldi	r24, 0x01	; 1
    5226:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    5228:	8a 81       	ldd	r24, Y+2	; 0x02
    522a:	28 2f       	mov	r18, r24
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	3c 83       	std	Y+4, r19	; 0x04
    5230:	2b 83       	std	Y+3, r18	; 0x03
    5232:	8b 81       	ldd	r24, Y+3	; 0x03
    5234:	9c 81       	ldd	r25, Y+4	; 0x04
    5236:	00 97       	sbiw	r24, 0x00	; 0
    5238:	31 f0       	breq	.+12     	; 0x5246 <Hexadecoder_enu_EnableSSG+0x30>
    523a:	2b 81       	ldd	r18, Y+3	; 0x03
    523c:	3c 81       	ldd	r19, Y+4	; 0x04
    523e:	21 30       	cpi	r18, 0x01	; 1
    5240:	31 05       	cpc	r19, r1
    5242:	41 f0       	breq	.+16     	; 0x5254 <Hexadecoder_enu_EnableSSG+0x3e>
    5244:	0e c0       	rjmp	.+28     	; 0x5262 <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    5246:	81 e0       	ldi	r24, 0x01	; 1
    5248:	62 e0       	ldi	r22, 0x02	; 2
    524a:	41 e0       	ldi	r20, 0x01	; 1
    524c:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5250:	19 82       	std	Y+1, r1	; 0x01
    5252:	09 c0       	rjmp	.+18     	; 0x5266 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    5254:	81 e0       	ldi	r24, 0x01	; 1
    5256:	61 e0       	ldi	r22, 0x01	; 1
    5258:	41 e0       	ldi	r20, 0x01	; 1
    525a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    525e:	19 82       	std	Y+1, r1	; 0x01
    5260:	02 c0       	rjmp	.+4      	; 0x5266 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5262:	82 e0       	ldi	r24, 0x02	; 2
    5264:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    5266:	89 81       	ldd	r24, Y+1	; 0x01
}
    5268:	0f 90       	pop	r0
    526a:	0f 90       	pop	r0
    526c:	0f 90       	pop	r0
    526e:	0f 90       	pop	r0
    5270:	cf 91       	pop	r28
    5272:	df 91       	pop	r29
    5274:	08 95       	ret

00005276 <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    5276:	df 93       	push	r29
    5278:	cf 93       	push	r28
    527a:	00 d0       	rcall	.+0      	; 0x527c <Hexadecoder_enu_DisableSSG+0x6>
    527c:	00 d0       	rcall	.+0      	; 0x527e <Hexadecoder_enu_DisableSSG+0x8>
    527e:	cd b7       	in	r28, 0x3d	; 61
    5280:	de b7       	in	r29, 0x3e	; 62
    5282:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5284:	81 e0       	ldi	r24, 0x01	; 1
    5286:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    5288:	8a 81       	ldd	r24, Y+2	; 0x02
    528a:	28 2f       	mov	r18, r24
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	3c 83       	std	Y+4, r19	; 0x04
    5290:	2b 83       	std	Y+3, r18	; 0x03
    5292:	8b 81       	ldd	r24, Y+3	; 0x03
    5294:	9c 81       	ldd	r25, Y+4	; 0x04
    5296:	00 97       	sbiw	r24, 0x00	; 0
    5298:	31 f0       	breq	.+12     	; 0x52a6 <Hexadecoder_enu_DisableSSG+0x30>
    529a:	2b 81       	ldd	r18, Y+3	; 0x03
    529c:	3c 81       	ldd	r19, Y+4	; 0x04
    529e:	21 30       	cpi	r18, 0x01	; 1
    52a0:	31 05       	cpc	r19, r1
    52a2:	41 f0       	breq	.+16     	; 0x52b4 <Hexadecoder_enu_DisableSSG+0x3e>
    52a4:	0e c0       	rjmp	.+28     	; 0x52c2 <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    52a6:	81 e0       	ldi	r24, 0x01	; 1
    52a8:	62 e0       	ldi	r22, 0x02	; 2
    52aa:	40 e0       	ldi	r20, 0x00	; 0
    52ac:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    52b0:	19 82       	std	Y+1, r1	; 0x01
    52b2:	09 c0       	rjmp	.+18     	; 0x52c6 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    52b4:	81 e0       	ldi	r24, 0x01	; 1
    52b6:	61 e0       	ldi	r22, 0x01	; 1
    52b8:	40 e0       	ldi	r20, 0x00	; 0
    52ba:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    52be:	19 82       	std	Y+1, r1	; 0x01
    52c0:	02 c0       	rjmp	.+4      	; 0x52c6 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    52c2:	82 e0       	ldi	r24, 0x02	; 2
    52c4:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    52c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    52c8:	0f 90       	pop	r0
    52ca:	0f 90       	pop	r0
    52cc:	0f 90       	pop	r0
    52ce:	0f 90       	pop	r0
    52d0:	cf 91       	pop	r28
    52d2:	df 91       	pop	r29
    52d4:	08 95       	ret

000052d6 <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    52d6:	df 93       	push	r29
    52d8:	cf 93       	push	r28
    52da:	0f 92       	push	r0
    52dc:	cd b7       	in	r28, 0x3d	; 61
    52de:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    52e0:	81 e0       	ldi	r24, 0x01	; 1
    52e2:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    52e4:	81 e0       	ldi	r24, 0x01	; 1
    52e6:	62 e0       	ldi	r22, 0x02	; 2
    52e8:	40 e0       	ldi	r20, 0x00	; 0
    52ea:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    52ee:	81 e0       	ldi	r24, 0x01	; 1
    52f0:	61 e0       	ldi	r22, 0x01	; 1
    52f2:	40 e0       	ldi	r20, 0x00	; 0
    52f4:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    52f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    52fa:	0f 90       	pop	r0
    52fc:	cf 91       	pop	r28
    52fe:	df 91       	pop	r29
    5300:	08 95       	ret

00005302 <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    5302:	df 93       	push	r29
    5304:	cf 93       	push	r28
    5306:	00 d0       	rcall	.+0      	; 0x5308 <Buzzer_enu_Initialization+0x6>
    5308:	cd b7       	in	r28, 0x3d	; 61
    530a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    530c:	81 e0       	ldi	r24, 0x01	; 1
    530e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    5310:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5312:	19 82       	std	Y+1, r1	; 0x01
    5314:	31 c0       	rjmp	.+98     	; 0x5378 <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    5316:	89 81       	ldd	r24, Y+1	; 0x01
    5318:	88 2f       	mov	r24, r24
    531a:	90 e0       	ldi	r25, 0x00	; 0
    531c:	88 0f       	add	r24, r24
    531e:	99 1f       	adc	r25, r25
    5320:	fc 01       	movw	r30, r24
    5322:	ea 56       	subi	r30, 0x6A	; 106
    5324:	fe 4f       	sbci	r31, 0xFE	; 254
    5326:	20 81       	ld	r18, Z
    5328:	89 81       	ldd	r24, Y+1	; 0x01
    532a:	88 2f       	mov	r24, r24
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	88 0f       	add	r24, r24
    5330:	99 1f       	adc	r25, r25
    5332:	fc 01       	movw	r30, r24
    5334:	e9 56       	subi	r30, 0x69	; 105
    5336:	fe 4f       	sbci	r31, 0xFE	; 254
    5338:	90 81       	ld	r25, Z
    533a:	82 2f       	mov	r24, r18
    533c:	69 2f       	mov	r22, r25
    533e:	41 e0       	ldi	r20, 0x01	; 1
    5340:	0e 94 af 13 	call	0x275e	; 0x275e <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    5344:	89 81       	ldd	r24, Y+1	; 0x01
    5346:	88 2f       	mov	r24, r24
    5348:	90 e0       	ldi	r25, 0x00	; 0
    534a:	88 0f       	add	r24, r24
    534c:	99 1f       	adc	r25, r25
    534e:	fc 01       	movw	r30, r24
    5350:	ea 56       	subi	r30, 0x6A	; 106
    5352:	fe 4f       	sbci	r31, 0xFE	; 254
    5354:	20 81       	ld	r18, Z
    5356:	89 81       	ldd	r24, Y+1	; 0x01
    5358:	88 2f       	mov	r24, r24
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	88 0f       	add	r24, r24
    535e:	99 1f       	adc	r25, r25
    5360:	fc 01       	movw	r30, r24
    5362:	e9 56       	subi	r30, 0x69	; 105
    5364:	fe 4f       	sbci	r31, 0xFE	; 254
    5366:	90 81       	ld	r25, Z
    5368:	82 2f       	mov	r24, r18
    536a:	69 2f       	mov	r22, r25
    536c:	40 e0       	ldi	r20, 0x00	; 0
    536e:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5372:	89 81       	ldd	r24, Y+1	; 0x01
    5374:	8f 5f       	subi	r24, 0xFF	; 255
    5376:	89 83       	std	Y+1, r24	; 0x01
    5378:	90 91 95 01 	lds	r25, 0x0195
    537c:	89 81       	ldd	r24, Y+1	; 0x01
    537e:	89 17       	cp	r24, r25
    5380:	50 f2       	brcs	.-108    	; 0x5316 <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    5382:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    5384:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5386:	0f 90       	pop	r0
    5388:	0f 90       	pop	r0
    538a:	cf 91       	pop	r28
    538c:	df 91       	pop	r29
    538e:	08 95       	ret

00005390 <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    5390:	df 93       	push	r29
    5392:	cf 93       	push	r28
    5394:	00 d0       	rcall	.+0      	; 0x5396 <Buzzer_enu_TuronOnBuzzer+0x6>
    5396:	cd b7       	in	r28, 0x3d	; 61
    5398:	de b7       	in	r29, 0x3e	; 62
    539a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    539c:	81 e0       	ldi	r24, 0x01	; 1
    539e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    53a0:	90 91 95 01 	lds	r25, 0x0195
    53a4:	8a 81       	ldd	r24, Y+2	; 0x02
    53a6:	89 17       	cp	r24, r25
    53a8:	c8 f4       	brcc	.+50     	; 0x53dc <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    53aa:	8a 81       	ldd	r24, Y+2	; 0x02
    53ac:	88 2f       	mov	r24, r24
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	88 0f       	add	r24, r24
    53b2:	99 1f       	adc	r25, r25
    53b4:	fc 01       	movw	r30, r24
    53b6:	ea 56       	subi	r30, 0x6A	; 106
    53b8:	fe 4f       	sbci	r31, 0xFE	; 254
    53ba:	20 81       	ld	r18, Z
    53bc:	8a 81       	ldd	r24, Y+2	; 0x02
    53be:	88 2f       	mov	r24, r24
    53c0:	90 e0       	ldi	r25, 0x00	; 0
    53c2:	88 0f       	add	r24, r24
    53c4:	99 1f       	adc	r25, r25
    53c6:	fc 01       	movw	r30, r24
    53c8:	e9 56       	subi	r30, 0x69	; 105
    53ca:	fe 4f       	sbci	r31, 0xFE	; 254
    53cc:	90 81       	ld	r25, Z
    53ce:	82 2f       	mov	r24, r18
    53d0:	69 2f       	mov	r22, r25
    53d2:	41 e0       	ldi	r20, 0x01	; 1
    53d4:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    53d8:	89 83       	std	Y+1, r24	; 0x01
    53da:	02 c0       	rjmp	.+4      	; 0x53e0 <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    53dc:	82 e0       	ldi	r24, 0x02	; 2
    53de:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    53e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    53e2:	0f 90       	pop	r0
    53e4:	0f 90       	pop	r0
    53e6:	cf 91       	pop	r28
    53e8:	df 91       	pop	r29
    53ea:	08 95       	ret

000053ec <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    53ec:	df 93       	push	r29
    53ee:	cf 93       	push	r28
    53f0:	00 d0       	rcall	.+0      	; 0x53f2 <Buzzer_enu_TuronOffBuzzer+0x6>
    53f2:	cd b7       	in	r28, 0x3d	; 61
    53f4:	de b7       	in	r29, 0x3e	; 62
    53f6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    53f8:	81 e0       	ldi	r24, 0x01	; 1
    53fa:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    53fc:	90 91 95 01 	lds	r25, 0x0195
    5400:	8a 81       	ldd	r24, Y+2	; 0x02
    5402:	89 17       	cp	r24, r25
    5404:	c8 f4       	brcc	.+50     	; 0x5438 <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    5406:	8a 81       	ldd	r24, Y+2	; 0x02
    5408:	88 2f       	mov	r24, r24
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	88 0f       	add	r24, r24
    540e:	99 1f       	adc	r25, r25
    5410:	fc 01       	movw	r30, r24
    5412:	ea 56       	subi	r30, 0x6A	; 106
    5414:	fe 4f       	sbci	r31, 0xFE	; 254
    5416:	20 81       	ld	r18, Z
    5418:	8a 81       	ldd	r24, Y+2	; 0x02
    541a:	88 2f       	mov	r24, r24
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	88 0f       	add	r24, r24
    5420:	99 1f       	adc	r25, r25
    5422:	fc 01       	movw	r30, r24
    5424:	e9 56       	subi	r30, 0x69	; 105
    5426:	fe 4f       	sbci	r31, 0xFE	; 254
    5428:	90 81       	ld	r25, Z
    542a:	82 2f       	mov	r24, r18
    542c:	69 2f       	mov	r22, r25
    542e:	40 e0       	ldi	r20, 0x00	; 0
    5430:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
    5434:	89 83       	std	Y+1, r24	; 0x01
    5436:	02 c0       	rjmp	.+4      	; 0x543c <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5438:	82 e0       	ldi	r24, 0x02	; 2
    543a:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    543c:	89 81       	ldd	r24, Y+1	; 0x01
}
    543e:	0f 90       	pop	r0
    5440:	0f 90       	pop	r0
    5442:	cf 91       	pop	r28
    5444:	df 91       	pop	r29
    5446:	08 95       	ret

00005448 <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    5448:	df 93       	push	r29
    544a:	cf 93       	push	r28
    544c:	00 d0       	rcall	.+0      	; 0x544e <Buzzer_enu_TurnOnAllBuzzers+0x6>
    544e:	cd b7       	in	r28, 0x3d	; 61
    5450:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5452:	81 e0       	ldi	r24, 0x01	; 1
    5454:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    5456:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5458:	19 82       	std	Y+1, r1	; 0x01
    545a:	1a c0       	rjmp	.+52     	; 0x5490 <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    545c:	89 81       	ldd	r24, Y+1	; 0x01
    545e:	88 2f       	mov	r24, r24
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	88 0f       	add	r24, r24
    5464:	99 1f       	adc	r25, r25
    5466:	fc 01       	movw	r30, r24
    5468:	ea 56       	subi	r30, 0x6A	; 106
    546a:	fe 4f       	sbci	r31, 0xFE	; 254
    546c:	20 81       	ld	r18, Z
    546e:	89 81       	ldd	r24, Y+1	; 0x01
    5470:	88 2f       	mov	r24, r24
    5472:	90 e0       	ldi	r25, 0x00	; 0
    5474:	88 0f       	add	r24, r24
    5476:	99 1f       	adc	r25, r25
    5478:	fc 01       	movw	r30, r24
    547a:	e9 56       	subi	r30, 0x69	; 105
    547c:	fe 4f       	sbci	r31, 0xFE	; 254
    547e:	90 81       	ld	r25, Z
    5480:	82 2f       	mov	r24, r18
    5482:	69 2f       	mov	r22, r25
    5484:	41 e0       	ldi	r20, 0x01	; 1
    5486:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    548a:	89 81       	ldd	r24, Y+1	; 0x01
    548c:	8f 5f       	subi	r24, 0xFF	; 255
    548e:	89 83       	std	Y+1, r24	; 0x01
    5490:	90 91 95 01 	lds	r25, 0x0195
    5494:	89 81       	ldd	r24, Y+1	; 0x01
    5496:	89 17       	cp	r24, r25
    5498:	08 f3       	brcs	.-62     	; 0x545c <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    549a:	82 e0       	ldi	r24, 0x02	; 2
    549c:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    549e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    54a0:	0f 90       	pop	r0
    54a2:	0f 90       	pop	r0
    54a4:	cf 91       	pop	r28
    54a6:	df 91       	pop	r29
    54a8:	08 95       	ret

000054aa <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    54aa:	df 93       	push	r29
    54ac:	cf 93       	push	r28
    54ae:	00 d0       	rcall	.+0      	; 0x54b0 <Buzzer_enu_TurnOffAllBuzzers+0x6>
    54b0:	cd b7       	in	r28, 0x3d	; 61
    54b2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    54b4:	81 e0       	ldi	r24, 0x01	; 1
    54b6:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    54b8:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    54ba:	19 82       	std	Y+1, r1	; 0x01
    54bc:	1a c0       	rjmp	.+52     	; 0x54f2 <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    54be:	89 81       	ldd	r24, Y+1	; 0x01
    54c0:	88 2f       	mov	r24, r24
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	88 0f       	add	r24, r24
    54c6:	99 1f       	adc	r25, r25
    54c8:	fc 01       	movw	r30, r24
    54ca:	ea 56       	subi	r30, 0x6A	; 106
    54cc:	fe 4f       	sbci	r31, 0xFE	; 254
    54ce:	20 81       	ld	r18, Z
    54d0:	89 81       	ldd	r24, Y+1	; 0x01
    54d2:	88 2f       	mov	r24, r24
    54d4:	90 e0       	ldi	r25, 0x00	; 0
    54d6:	88 0f       	add	r24, r24
    54d8:	99 1f       	adc	r25, r25
    54da:	fc 01       	movw	r30, r24
    54dc:	e9 56       	subi	r30, 0x69	; 105
    54de:	fe 4f       	sbci	r31, 0xFE	; 254
    54e0:	90 81       	ld	r25, Z
    54e2:	82 2f       	mov	r24, r18
    54e4:	69 2f       	mov	r22, r25
    54e6:	40 e0       	ldi	r20, 0x00	; 0
    54e8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    54ec:	89 81       	ldd	r24, Y+1	; 0x01
    54ee:	8f 5f       	subi	r24, 0xFF	; 255
    54f0:	89 83       	std	Y+1, r24	; 0x01
    54f2:	90 91 95 01 	lds	r25, 0x0195
    54f6:	89 81       	ldd	r24, Y+1	; 0x01
    54f8:	89 17       	cp	r24, r25
    54fa:	08 f3       	brcs	.-62     	; 0x54be <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    54fc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    54fe:	0f 90       	pop	r0
    5500:	0f 90       	pop	r0
    5502:	cf 91       	pop	r28
    5504:	df 91       	pop	r29
    5506:	08 95       	ret

00005508 <main>:

#include <stdio.h>


int main()
{
    5508:	0f 93       	push	r16
    550a:	df 93       	push	r29
    550c:	cf 93       	push	r28
    550e:	00 d0       	rcall	.+0      	; 0x5510 <main+0x8>
    5510:	00 d0       	rcall	.+0      	; 0x5512 <main+0xa>
    5512:	cd b7       	in	r28, 0x3d	; 61
    5514:	de b7       	in	r29, 0x3e	; 62

	//Initializng timer0
//	Timer_enu_Initialization();


	LCD_enu_Initialization();
    5516:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <LCD_enu_Initialization>

	f32 x = 45.21;
    551a:	8a e0       	ldi	r24, 0x0A	; 10
    551c:	97 ed       	ldi	r25, 0xD7	; 215
    551e:	a4 e3       	ldi	r26, 0x34	; 52
    5520:	b2 e4       	ldi	r27, 0x42	; 66
    5522:	89 83       	std	Y+1, r24	; 0x01
    5524:	9a 83       	std	Y+2, r25	; 0x02
    5526:	ab 83       	std	Y+3, r26	; 0x03
    5528:	bc 83       	std	Y+4, r27	; 0x04

	LCD_enu_WriteFloatNum(x, LCD_ROW_1, LCD_COLUMN_1, LCD_PAGE_1);
    552a:	89 81       	ldd	r24, Y+1	; 0x01
    552c:	9a 81       	ldd	r25, Y+2	; 0x02
    552e:	ab 81       	ldd	r26, Y+3	; 0x03
    5530:	bc 81       	ldd	r27, Y+4	; 0x04
    5532:	bc 01       	movw	r22, r24
    5534:	cd 01       	movw	r24, r26
    5536:	41 e0       	ldi	r20, 0x01	; 1
    5538:	21 e0       	ldi	r18, 0x01	; 1
    553a:	01 e0       	ldi	r16, 0x01	; 1
    553c:	0e 94 65 21 	call	0x42ca	; 0x42ca <LCD_enu_WriteFloatNum>

	return 0;
    5540:	80 e0       	ldi	r24, 0x00	; 0
    5542:	90 e0       	ldi	r25, 0x00	; 0
}
    5544:	0f 90       	pop	r0
    5546:	0f 90       	pop	r0
    5548:	0f 90       	pop	r0
    554a:	0f 90       	pop	r0
    554c:	cf 91       	pop	r28
    554e:	df 91       	pop	r29
    5550:	0f 91       	pop	r16
    5552:	08 95       	ret

00005554 <__mulsi3>:
    5554:	62 9f       	mul	r22, r18
    5556:	d0 01       	movw	r26, r0
    5558:	73 9f       	mul	r23, r19
    555a:	f0 01       	movw	r30, r0
    555c:	82 9f       	mul	r24, r18
    555e:	e0 0d       	add	r30, r0
    5560:	f1 1d       	adc	r31, r1
    5562:	64 9f       	mul	r22, r20
    5564:	e0 0d       	add	r30, r0
    5566:	f1 1d       	adc	r31, r1
    5568:	92 9f       	mul	r25, r18
    556a:	f0 0d       	add	r31, r0
    556c:	83 9f       	mul	r24, r19
    556e:	f0 0d       	add	r31, r0
    5570:	74 9f       	mul	r23, r20
    5572:	f0 0d       	add	r31, r0
    5574:	65 9f       	mul	r22, r21
    5576:	f0 0d       	add	r31, r0
    5578:	99 27       	eor	r25, r25
    557a:	72 9f       	mul	r23, r18
    557c:	b0 0d       	add	r27, r0
    557e:	e1 1d       	adc	r30, r1
    5580:	f9 1f       	adc	r31, r25
    5582:	63 9f       	mul	r22, r19
    5584:	b0 0d       	add	r27, r0
    5586:	e1 1d       	adc	r30, r1
    5588:	f9 1f       	adc	r31, r25
    558a:	bd 01       	movw	r22, r26
    558c:	cf 01       	movw	r24, r30
    558e:	11 24       	eor	r1, r1
    5590:	08 95       	ret

00005592 <__udivmodsi4>:
    5592:	a1 e2       	ldi	r26, 0x21	; 33
    5594:	1a 2e       	mov	r1, r26
    5596:	aa 1b       	sub	r26, r26
    5598:	bb 1b       	sub	r27, r27
    559a:	fd 01       	movw	r30, r26
    559c:	0d c0       	rjmp	.+26     	; 0x55b8 <__udivmodsi4_ep>

0000559e <__udivmodsi4_loop>:
    559e:	aa 1f       	adc	r26, r26
    55a0:	bb 1f       	adc	r27, r27
    55a2:	ee 1f       	adc	r30, r30
    55a4:	ff 1f       	adc	r31, r31
    55a6:	a2 17       	cp	r26, r18
    55a8:	b3 07       	cpc	r27, r19
    55aa:	e4 07       	cpc	r30, r20
    55ac:	f5 07       	cpc	r31, r21
    55ae:	20 f0       	brcs	.+8      	; 0x55b8 <__udivmodsi4_ep>
    55b0:	a2 1b       	sub	r26, r18
    55b2:	b3 0b       	sbc	r27, r19
    55b4:	e4 0b       	sbc	r30, r20
    55b6:	f5 0b       	sbc	r31, r21

000055b8 <__udivmodsi4_ep>:
    55b8:	66 1f       	adc	r22, r22
    55ba:	77 1f       	adc	r23, r23
    55bc:	88 1f       	adc	r24, r24
    55be:	99 1f       	adc	r25, r25
    55c0:	1a 94       	dec	r1
    55c2:	69 f7       	brne	.-38     	; 0x559e <__udivmodsi4_loop>
    55c4:	60 95       	com	r22
    55c6:	70 95       	com	r23
    55c8:	80 95       	com	r24
    55ca:	90 95       	com	r25
    55cc:	9b 01       	movw	r18, r22
    55ce:	ac 01       	movw	r20, r24
    55d0:	bd 01       	movw	r22, r26
    55d2:	cf 01       	movw	r24, r30
    55d4:	08 95       	ret

000055d6 <__divmodsi4>:
    55d6:	97 fb       	bst	r25, 7
    55d8:	09 2e       	mov	r0, r25
    55da:	05 26       	eor	r0, r21
    55dc:	0e d0       	rcall	.+28     	; 0x55fa <__divmodsi4_neg1>
    55de:	57 fd       	sbrc	r21, 7
    55e0:	04 d0       	rcall	.+8      	; 0x55ea <__divmodsi4_neg2>
    55e2:	d7 df       	rcall	.-82     	; 0x5592 <__udivmodsi4>
    55e4:	0a d0       	rcall	.+20     	; 0x55fa <__divmodsi4_neg1>
    55e6:	00 1c       	adc	r0, r0
    55e8:	38 f4       	brcc	.+14     	; 0x55f8 <__divmodsi4_exit>

000055ea <__divmodsi4_neg2>:
    55ea:	50 95       	com	r21
    55ec:	40 95       	com	r20
    55ee:	30 95       	com	r19
    55f0:	21 95       	neg	r18
    55f2:	3f 4f       	sbci	r19, 0xFF	; 255
    55f4:	4f 4f       	sbci	r20, 0xFF	; 255
    55f6:	5f 4f       	sbci	r21, 0xFF	; 255

000055f8 <__divmodsi4_exit>:
    55f8:	08 95       	ret

000055fa <__divmodsi4_neg1>:
    55fa:	f6 f7       	brtc	.-4      	; 0x55f8 <__divmodsi4_exit>
    55fc:	90 95       	com	r25
    55fe:	80 95       	com	r24
    5600:	70 95       	com	r23
    5602:	61 95       	neg	r22
    5604:	7f 4f       	sbci	r23, 0xFF	; 255
    5606:	8f 4f       	sbci	r24, 0xFF	; 255
    5608:	9f 4f       	sbci	r25, 0xFF	; 255
    560a:	08 95       	ret

0000560c <__prologue_saves__>:
    560c:	2f 92       	push	r2
    560e:	3f 92       	push	r3
    5610:	4f 92       	push	r4
    5612:	5f 92       	push	r5
    5614:	6f 92       	push	r6
    5616:	7f 92       	push	r7
    5618:	8f 92       	push	r8
    561a:	9f 92       	push	r9
    561c:	af 92       	push	r10
    561e:	bf 92       	push	r11
    5620:	cf 92       	push	r12
    5622:	df 92       	push	r13
    5624:	ef 92       	push	r14
    5626:	ff 92       	push	r15
    5628:	0f 93       	push	r16
    562a:	1f 93       	push	r17
    562c:	cf 93       	push	r28
    562e:	df 93       	push	r29
    5630:	cd b7       	in	r28, 0x3d	; 61
    5632:	de b7       	in	r29, 0x3e	; 62
    5634:	ca 1b       	sub	r28, r26
    5636:	db 0b       	sbc	r29, r27
    5638:	0f b6       	in	r0, 0x3f	; 63
    563a:	f8 94       	cli
    563c:	de bf       	out	0x3e, r29	; 62
    563e:	0f be       	out	0x3f, r0	; 63
    5640:	cd bf       	out	0x3d, r28	; 61
    5642:	09 94       	ijmp

00005644 <__epilogue_restores__>:
    5644:	2a 88       	ldd	r2, Y+18	; 0x12
    5646:	39 88       	ldd	r3, Y+17	; 0x11
    5648:	48 88       	ldd	r4, Y+16	; 0x10
    564a:	5f 84       	ldd	r5, Y+15	; 0x0f
    564c:	6e 84       	ldd	r6, Y+14	; 0x0e
    564e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5650:	8c 84       	ldd	r8, Y+12	; 0x0c
    5652:	9b 84       	ldd	r9, Y+11	; 0x0b
    5654:	aa 84       	ldd	r10, Y+10	; 0x0a
    5656:	b9 84       	ldd	r11, Y+9	; 0x09
    5658:	c8 84       	ldd	r12, Y+8	; 0x08
    565a:	df 80       	ldd	r13, Y+7	; 0x07
    565c:	ee 80       	ldd	r14, Y+6	; 0x06
    565e:	fd 80       	ldd	r15, Y+5	; 0x05
    5660:	0c 81       	ldd	r16, Y+4	; 0x04
    5662:	1b 81       	ldd	r17, Y+3	; 0x03
    5664:	aa 81       	ldd	r26, Y+2	; 0x02
    5666:	b9 81       	ldd	r27, Y+1	; 0x01
    5668:	ce 0f       	add	r28, r30
    566a:	d1 1d       	adc	r29, r1
    566c:	0f b6       	in	r0, 0x3f	; 63
    566e:	f8 94       	cli
    5670:	de bf       	out	0x3e, r29	; 62
    5672:	0f be       	out	0x3f, r0	; 63
    5674:	cd bf       	out	0x3d, r28	; 61
    5676:	ed 01       	movw	r28, r26
    5678:	08 95       	ret

0000567a <_exit>:
    567a:	f8 94       	cli

0000567c <__stop_program>:
    567c:	ff cf       	rjmp	.-2      	; 0x567c <__stop_program>
