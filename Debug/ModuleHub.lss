
ModuleHub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000138  00800100  00003334  000033a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003334  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00003c54  00000000  00000000  000034e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001a0f  00000000  00000000  00007134  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00008b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f1  00000000  00000000  00008ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000228e  00000000  00000000  00008ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ca  00000000  00000000  0000b162  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d4  00000000  00000000  0000c42c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000d500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c9  00000000  00000000  0000d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ea  00000000  00000000  0000d989  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
       8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
       c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d8 e0       	ldi	r29, 0x08	; 8
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	12 e0       	ldi	r17, 0x02	; 2
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e4 e3       	ldi	r30, 0x34	; 52
      70:	f3 e3       	ldi	r31, 0x33	; 51
      72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
      78:	a8 33       	cpi	r26, 0x38	; 56
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>
      7e:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <main>
      82:	0c 94 98 19 	jmp	0x3330	; 0x3330 <_exit>

00000086 <__bad_interrupt>:
      86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <__fixunssfsi>:
      8a:	ef 92       	push	r14
      8c:	ff 92       	push	r15
      8e:	0f 93       	push	r16
      90:	1f 93       	push	r17
      92:	7b 01       	movw	r14, r22
      94:	8c 01       	movw	r16, r24
      96:	20 e0       	ldi	r18, 0x00	; 0
      98:	30 e0       	ldi	r19, 0x00	; 0
      9a:	40 e0       	ldi	r20, 0x00	; 0
      9c:	5f e4       	ldi	r21, 0x4F	; 79
      9e:	0e 94 75 03 	call	0x6ea	; 0x6ea <__gesf2>
      a2:	88 23       	and	r24, r24
      a4:	8c f0       	brlt	.+34     	; 0xc8 <__fixunssfsi+0x3e>
      a6:	c8 01       	movw	r24, r16
      a8:	b7 01       	movw	r22, r14
      aa:	20 e0       	ldi	r18, 0x00	; 0
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	40 e0       	ldi	r20, 0x00	; 0
      b0:	5f e4       	ldi	r21, 0x4F	; 79
      b2:	0e 94 bd 01 	call	0x37a	; 0x37a <__subsf3>
      b6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fixsfsi>
      ba:	9b 01       	movw	r18, r22
      bc:	ac 01       	movw	r20, r24
      be:	20 50       	subi	r18, 0x00	; 0
      c0:	30 40       	sbci	r19, 0x00	; 0
      c2:	40 40       	sbci	r20, 0x00	; 0
      c4:	50 48       	sbci	r21, 0x80	; 128
      c6:	06 c0       	rjmp	.+12     	; 0xd4 <__fixunssfsi+0x4a>
      c8:	c8 01       	movw	r24, r16
      ca:	b7 01       	movw	r22, r14
      cc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fixsfsi>
      d0:	9b 01       	movw	r18, r22
      d2:	ac 01       	movw	r20, r24
      d4:	b9 01       	movw	r22, r18
      d6:	ca 01       	movw	r24, r20
      d8:	1f 91       	pop	r17
      da:	0f 91       	pop	r16
      dc:	ff 90       	pop	r15
      de:	ef 90       	pop	r14
      e0:	08 95       	ret

000000e2 <_fpadd_parts>:
      e2:	a0 e0       	ldi	r26, 0x00	; 0
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	e7 e7       	ldi	r30, 0x77	; 119
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__prologue_saves__>
      ee:	dc 01       	movw	r26, r24
      f0:	2b 01       	movw	r4, r22
      f2:	fa 01       	movw	r30, r20
      f4:	9c 91       	ld	r25, X
      f6:	92 30       	cpi	r25, 0x02	; 2
      f8:	08 f4       	brcc	.+2      	; 0xfc <_fpadd_parts+0x1a>
      fa:	39 c1       	rjmp	.+626    	; 0x36e <_fpadd_parts+0x28c>
      fc:	eb 01       	movw	r28, r22
      fe:	88 81       	ld	r24, Y
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f4       	brcc	.+2      	; 0x106 <_fpadd_parts+0x24>
     104:	33 c1       	rjmp	.+614    	; 0x36c <_fpadd_parts+0x28a>
     106:	94 30       	cpi	r25, 0x04	; 4
     108:	69 f4       	brne	.+26     	; 0x124 <_fpadd_parts+0x42>
     10a:	84 30       	cpi	r24, 0x04	; 4
     10c:	09 f0       	breq	.+2      	; 0x110 <_fpadd_parts+0x2e>
     10e:	2f c1       	rjmp	.+606    	; 0x36e <_fpadd_parts+0x28c>
     110:	11 96       	adiw	r26, 0x01	; 1
     112:	9c 91       	ld	r25, X
     114:	11 97       	sbiw	r26, 0x01	; 1
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	98 17       	cp	r25, r24
     11a:	09 f4       	brne	.+2      	; 0x11e <_fpadd_parts+0x3c>
     11c:	28 c1       	rjmp	.+592    	; 0x36e <_fpadd_parts+0x28c>
     11e:	a0 e0       	ldi	r26, 0x00	; 0
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	25 c1       	rjmp	.+586    	; 0x36e <_fpadd_parts+0x28c>
     124:	84 30       	cpi	r24, 0x04	; 4
     126:	09 f4       	brne	.+2      	; 0x12a <_fpadd_parts+0x48>
     128:	21 c1       	rjmp	.+578    	; 0x36c <_fpadd_parts+0x28a>
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	a9 f4       	brne	.+42     	; 0x158 <_fpadd_parts+0x76>
     12e:	92 30       	cpi	r25, 0x02	; 2
     130:	09 f0       	breq	.+2      	; 0x134 <_fpadd_parts+0x52>
     132:	1d c1       	rjmp	.+570    	; 0x36e <_fpadd_parts+0x28c>
     134:	9a 01       	movw	r18, r20
     136:	ad 01       	movw	r20, r26
     138:	88 e0       	ldi	r24, 0x08	; 8
     13a:	ea 01       	movw	r28, r20
     13c:	09 90       	ld	r0, Y+
     13e:	ae 01       	movw	r20, r28
     140:	e9 01       	movw	r28, r18
     142:	09 92       	st	Y+, r0
     144:	9e 01       	movw	r18, r28
     146:	81 50       	subi	r24, 0x01	; 1
     148:	c1 f7       	brne	.-16     	; 0x13a <_fpadd_parts+0x58>
     14a:	e2 01       	movw	r28, r4
     14c:	89 81       	ldd	r24, Y+1	; 0x01
     14e:	11 96       	adiw	r26, 0x01	; 1
     150:	9c 91       	ld	r25, X
     152:	89 23       	and	r24, r25
     154:	81 83       	std	Z+1, r24	; 0x01
     156:	08 c1       	rjmp	.+528    	; 0x368 <_fpadd_parts+0x286>
     158:	92 30       	cpi	r25, 0x02	; 2
     15a:	09 f4       	brne	.+2      	; 0x15e <_fpadd_parts+0x7c>
     15c:	07 c1       	rjmp	.+526    	; 0x36c <_fpadd_parts+0x28a>
     15e:	12 96       	adiw	r26, 0x02	; 2
     160:	2d 90       	ld	r2, X+
     162:	3c 90       	ld	r3, X
     164:	13 97       	sbiw	r26, 0x03	; 3
     166:	eb 01       	movw	r28, r22
     168:	8a 81       	ldd	r24, Y+2	; 0x02
     16a:	9b 81       	ldd	r25, Y+3	; 0x03
     16c:	14 96       	adiw	r26, 0x04	; 4
     16e:	ad 90       	ld	r10, X+
     170:	bd 90       	ld	r11, X+
     172:	cd 90       	ld	r12, X+
     174:	dc 90       	ld	r13, X
     176:	17 97       	sbiw	r26, 0x07	; 7
     178:	ec 80       	ldd	r14, Y+4	; 0x04
     17a:	fd 80       	ldd	r15, Y+5	; 0x05
     17c:	0e 81       	ldd	r16, Y+6	; 0x06
     17e:	1f 81       	ldd	r17, Y+7	; 0x07
     180:	91 01       	movw	r18, r2
     182:	28 1b       	sub	r18, r24
     184:	39 0b       	sbc	r19, r25
     186:	b9 01       	movw	r22, r18
     188:	37 ff       	sbrs	r19, 7
     18a:	04 c0       	rjmp	.+8      	; 0x194 <_fpadd_parts+0xb2>
     18c:	66 27       	eor	r22, r22
     18e:	77 27       	eor	r23, r23
     190:	62 1b       	sub	r22, r18
     192:	73 0b       	sbc	r23, r19
     194:	60 32       	cpi	r22, 0x20	; 32
     196:	71 05       	cpc	r23, r1
     198:	0c f0       	brlt	.+2      	; 0x19c <_fpadd_parts+0xba>
     19a:	61 c0       	rjmp	.+194    	; 0x25e <_fpadd_parts+0x17c>
     19c:	12 16       	cp	r1, r18
     19e:	13 06       	cpc	r1, r19
     1a0:	6c f5       	brge	.+90     	; 0x1fc <_fpadd_parts+0x11a>
     1a2:	37 01       	movw	r6, r14
     1a4:	48 01       	movw	r8, r16
     1a6:	06 2e       	mov	r0, r22
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <_fpadd_parts+0xd0>
     1aa:	96 94       	lsr	r9
     1ac:	87 94       	ror	r8
     1ae:	77 94       	ror	r7
     1b0:	67 94       	ror	r6
     1b2:	0a 94       	dec	r0
     1b4:	d2 f7       	brpl	.-12     	; 0x1aa <_fpadd_parts+0xc8>
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	40 e0       	ldi	r20, 0x00	; 0
     1bc:	50 e0       	ldi	r21, 0x00	; 0
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <_fpadd_parts+0xe6>
     1c0:	22 0f       	add	r18, r18
     1c2:	33 1f       	adc	r19, r19
     1c4:	44 1f       	adc	r20, r20
     1c6:	55 1f       	adc	r21, r21
     1c8:	6a 95       	dec	r22
     1ca:	d2 f7       	brpl	.-12     	; 0x1c0 <_fpadd_parts+0xde>
     1cc:	21 50       	subi	r18, 0x01	; 1
     1ce:	30 40       	sbci	r19, 0x00	; 0
     1d0:	40 40       	sbci	r20, 0x00	; 0
     1d2:	50 40       	sbci	r21, 0x00	; 0
     1d4:	2e 21       	and	r18, r14
     1d6:	3f 21       	and	r19, r15
     1d8:	40 23       	and	r20, r16
     1da:	51 23       	and	r21, r17
     1dc:	21 15       	cp	r18, r1
     1de:	31 05       	cpc	r19, r1
     1e0:	41 05       	cpc	r20, r1
     1e2:	51 05       	cpc	r21, r1
     1e4:	21 f0       	breq	.+8      	; 0x1ee <_fpadd_parts+0x10c>
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	40 e0       	ldi	r20, 0x00	; 0
     1ec:	50 e0       	ldi	r21, 0x00	; 0
     1ee:	79 01       	movw	r14, r18
     1f0:	8a 01       	movw	r16, r20
     1f2:	e6 28       	or	r14, r6
     1f4:	f7 28       	or	r15, r7
     1f6:	08 29       	or	r16, r8
     1f8:	19 29       	or	r17, r9
     1fa:	3c c0       	rjmp	.+120    	; 0x274 <_fpadd_parts+0x192>
     1fc:	23 2b       	or	r18, r19
     1fe:	d1 f1       	breq	.+116    	; 0x274 <_fpadd_parts+0x192>
     200:	26 0e       	add	r2, r22
     202:	37 1e       	adc	r3, r23
     204:	35 01       	movw	r6, r10
     206:	46 01       	movw	r8, r12
     208:	06 2e       	mov	r0, r22
     20a:	04 c0       	rjmp	.+8      	; 0x214 <_fpadd_parts+0x132>
     20c:	96 94       	lsr	r9
     20e:	87 94       	ror	r8
     210:	77 94       	ror	r7
     212:	67 94       	ror	r6
     214:	0a 94       	dec	r0
     216:	d2 f7       	brpl	.-12     	; 0x20c <_fpadd_parts+0x12a>
     218:	21 e0       	ldi	r18, 0x01	; 1
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	40 e0       	ldi	r20, 0x00	; 0
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	04 c0       	rjmp	.+8      	; 0x22a <_fpadd_parts+0x148>
     222:	22 0f       	add	r18, r18
     224:	33 1f       	adc	r19, r19
     226:	44 1f       	adc	r20, r20
     228:	55 1f       	adc	r21, r21
     22a:	6a 95       	dec	r22
     22c:	d2 f7       	brpl	.-12     	; 0x222 <_fpadd_parts+0x140>
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	30 40       	sbci	r19, 0x00	; 0
     232:	40 40       	sbci	r20, 0x00	; 0
     234:	50 40       	sbci	r21, 0x00	; 0
     236:	2a 21       	and	r18, r10
     238:	3b 21       	and	r19, r11
     23a:	4c 21       	and	r20, r12
     23c:	5d 21       	and	r21, r13
     23e:	21 15       	cp	r18, r1
     240:	31 05       	cpc	r19, r1
     242:	41 05       	cpc	r20, r1
     244:	51 05       	cpc	r21, r1
     246:	21 f0       	breq	.+8      	; 0x250 <_fpadd_parts+0x16e>
     248:	21 e0       	ldi	r18, 0x01	; 1
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	59 01       	movw	r10, r18
     252:	6a 01       	movw	r12, r20
     254:	a6 28       	or	r10, r6
     256:	b7 28       	or	r11, r7
     258:	c8 28       	or	r12, r8
     25a:	d9 28       	or	r13, r9
     25c:	0b c0       	rjmp	.+22     	; 0x274 <_fpadd_parts+0x192>
     25e:	82 15       	cp	r24, r2
     260:	93 05       	cpc	r25, r3
     262:	2c f0       	brlt	.+10     	; 0x26e <_fpadd_parts+0x18c>
     264:	1c 01       	movw	r2, r24
     266:	aa 24       	eor	r10, r10
     268:	bb 24       	eor	r11, r11
     26a:	65 01       	movw	r12, r10
     26c:	03 c0       	rjmp	.+6      	; 0x274 <_fpadd_parts+0x192>
     26e:	ee 24       	eor	r14, r14
     270:	ff 24       	eor	r15, r15
     272:	87 01       	movw	r16, r14
     274:	11 96       	adiw	r26, 0x01	; 1
     276:	9c 91       	ld	r25, X
     278:	d2 01       	movw	r26, r4
     27a:	11 96       	adiw	r26, 0x01	; 1
     27c:	8c 91       	ld	r24, X
     27e:	98 17       	cp	r25, r24
     280:	09 f4       	brne	.+2      	; 0x284 <_fpadd_parts+0x1a2>
     282:	45 c0       	rjmp	.+138    	; 0x30e <_fpadd_parts+0x22c>
     284:	99 23       	and	r25, r25
     286:	39 f0       	breq	.+14     	; 0x296 <_fpadd_parts+0x1b4>
     288:	a8 01       	movw	r20, r16
     28a:	97 01       	movw	r18, r14
     28c:	2a 19       	sub	r18, r10
     28e:	3b 09       	sbc	r19, r11
     290:	4c 09       	sbc	r20, r12
     292:	5d 09       	sbc	r21, r13
     294:	06 c0       	rjmp	.+12     	; 0x2a2 <_fpadd_parts+0x1c0>
     296:	a6 01       	movw	r20, r12
     298:	95 01       	movw	r18, r10
     29a:	2e 19       	sub	r18, r14
     29c:	3f 09       	sbc	r19, r15
     29e:	40 0b       	sbc	r20, r16
     2a0:	51 0b       	sbc	r21, r17
     2a2:	57 fd       	sbrc	r21, 7
     2a4:	08 c0       	rjmp	.+16     	; 0x2b6 <_fpadd_parts+0x1d4>
     2a6:	11 82       	std	Z+1, r1	; 0x01
     2a8:	33 82       	std	Z+3, r3	; 0x03
     2aa:	22 82       	std	Z+2, r2	; 0x02
     2ac:	24 83       	std	Z+4, r18	; 0x04
     2ae:	35 83       	std	Z+5, r19	; 0x05
     2b0:	46 83       	std	Z+6, r20	; 0x06
     2b2:	57 83       	std	Z+7, r21	; 0x07
     2b4:	1d c0       	rjmp	.+58     	; 0x2f0 <_fpadd_parts+0x20e>
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	81 83       	std	Z+1, r24	; 0x01
     2ba:	33 82       	std	Z+3, r3	; 0x03
     2bc:	22 82       	std	Z+2, r2	; 0x02
     2be:	88 27       	eor	r24, r24
     2c0:	99 27       	eor	r25, r25
     2c2:	dc 01       	movw	r26, r24
     2c4:	82 1b       	sub	r24, r18
     2c6:	93 0b       	sbc	r25, r19
     2c8:	a4 0b       	sbc	r26, r20
     2ca:	b5 0b       	sbc	r27, r21
     2cc:	84 83       	std	Z+4, r24	; 0x04
     2ce:	95 83       	std	Z+5, r25	; 0x05
     2d0:	a6 83       	std	Z+6, r26	; 0x06
     2d2:	b7 83       	std	Z+7, r27	; 0x07
     2d4:	0d c0       	rjmp	.+26     	; 0x2f0 <_fpadd_parts+0x20e>
     2d6:	22 0f       	add	r18, r18
     2d8:	33 1f       	adc	r19, r19
     2da:	44 1f       	adc	r20, r20
     2dc:	55 1f       	adc	r21, r21
     2de:	24 83       	std	Z+4, r18	; 0x04
     2e0:	35 83       	std	Z+5, r19	; 0x05
     2e2:	46 83       	std	Z+6, r20	; 0x06
     2e4:	57 83       	std	Z+7, r21	; 0x07
     2e6:	82 81       	ldd	r24, Z+2	; 0x02
     2e8:	93 81       	ldd	r25, Z+3	; 0x03
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	93 83       	std	Z+3, r25	; 0x03
     2ee:	82 83       	std	Z+2, r24	; 0x02
     2f0:	24 81       	ldd	r18, Z+4	; 0x04
     2f2:	35 81       	ldd	r19, Z+5	; 0x05
     2f4:	46 81       	ldd	r20, Z+6	; 0x06
     2f6:	57 81       	ldd	r21, Z+7	; 0x07
     2f8:	da 01       	movw	r26, r20
     2fa:	c9 01       	movw	r24, r18
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	a1 09       	sbc	r26, r1
     300:	b1 09       	sbc	r27, r1
     302:	8f 5f       	subi	r24, 0xFF	; 255
     304:	9f 4f       	sbci	r25, 0xFF	; 255
     306:	af 4f       	sbci	r26, 0xFF	; 255
     308:	bf 43       	sbci	r27, 0x3F	; 63
     30a:	28 f3       	brcs	.-54     	; 0x2d6 <_fpadd_parts+0x1f4>
     30c:	0b c0       	rjmp	.+22     	; 0x324 <_fpadd_parts+0x242>
     30e:	91 83       	std	Z+1, r25	; 0x01
     310:	33 82       	std	Z+3, r3	; 0x03
     312:	22 82       	std	Z+2, r2	; 0x02
     314:	ea 0c       	add	r14, r10
     316:	fb 1c       	adc	r15, r11
     318:	0c 1d       	adc	r16, r12
     31a:	1d 1d       	adc	r17, r13
     31c:	e4 82       	std	Z+4, r14	; 0x04
     31e:	f5 82       	std	Z+5, r15	; 0x05
     320:	06 83       	std	Z+6, r16	; 0x06
     322:	17 83       	std	Z+7, r17	; 0x07
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	80 83       	st	Z, r24
     328:	24 81       	ldd	r18, Z+4	; 0x04
     32a:	35 81       	ldd	r19, Z+5	; 0x05
     32c:	46 81       	ldd	r20, Z+6	; 0x06
     32e:	57 81       	ldd	r21, Z+7	; 0x07
     330:	57 ff       	sbrs	r21, 7
     332:	1a c0       	rjmp	.+52     	; 0x368 <_fpadd_parts+0x286>
     334:	c9 01       	movw	r24, r18
     336:	aa 27       	eor	r26, r26
     338:	97 fd       	sbrc	r25, 7
     33a:	a0 95       	com	r26
     33c:	ba 2f       	mov	r27, r26
     33e:	81 70       	andi	r24, 0x01	; 1
     340:	90 70       	andi	r25, 0x00	; 0
     342:	a0 70       	andi	r26, 0x00	; 0
     344:	b0 70       	andi	r27, 0x00	; 0
     346:	56 95       	lsr	r21
     348:	47 95       	ror	r20
     34a:	37 95       	ror	r19
     34c:	27 95       	ror	r18
     34e:	82 2b       	or	r24, r18
     350:	93 2b       	or	r25, r19
     352:	a4 2b       	or	r26, r20
     354:	b5 2b       	or	r27, r21
     356:	84 83       	std	Z+4, r24	; 0x04
     358:	95 83       	std	Z+5, r25	; 0x05
     35a:	a6 83       	std	Z+6, r26	; 0x06
     35c:	b7 83       	std	Z+7, r27	; 0x07
     35e:	82 81       	ldd	r24, Z+2	; 0x02
     360:	93 81       	ldd	r25, Z+3	; 0x03
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	93 83       	std	Z+3, r25	; 0x03
     366:	82 83       	std	Z+2, r24	; 0x02
     368:	df 01       	movw	r26, r30
     36a:	01 c0       	rjmp	.+2      	; 0x36e <_fpadd_parts+0x28c>
     36c:	d2 01       	movw	r26, r4
     36e:	cd 01       	movw	r24, r26
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	e2 e1       	ldi	r30, 0x12	; 18
     376:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__epilogue_restores__>

0000037a <__subsf3>:
     37a:	a0 e2       	ldi	r26, 0x20	; 32
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	e3 ec       	ldi	r30, 0xC3	; 195
     380:	f1 e0       	ldi	r31, 0x01	; 1
     382:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__prologue_saves__+0x18>
     386:	69 83       	std	Y+1, r22	; 0x01
     388:	7a 83       	std	Y+2, r23	; 0x02
     38a:	8b 83       	std	Y+3, r24	; 0x03
     38c:	9c 83       	std	Y+4, r25	; 0x04
     38e:	2d 83       	std	Y+5, r18	; 0x05
     390:	3e 83       	std	Y+6, r19	; 0x06
     392:	4f 83       	std	Y+7, r20	; 0x07
     394:	58 87       	std	Y+8, r21	; 0x08
     396:	e9 e0       	ldi	r30, 0x09	; 9
     398:	ee 2e       	mov	r14, r30
     39a:	f1 2c       	mov	r15, r1
     39c:	ec 0e       	add	r14, r28
     39e:	fd 1e       	adc	r15, r29
     3a0:	ce 01       	movw	r24, r28
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	b7 01       	movw	r22, r14
     3a6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     3aa:	8e 01       	movw	r16, r28
     3ac:	0f 5e       	subi	r16, 0xEF	; 239
     3ae:	1f 4f       	sbci	r17, 0xFF	; 255
     3b0:	ce 01       	movw	r24, r28
     3b2:	05 96       	adiw	r24, 0x05	; 5
     3b4:	b8 01       	movw	r22, r16
     3b6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     3ba:	8a 89       	ldd	r24, Y+18	; 0x12
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	89 27       	eor	r24, r25
     3c0:	8a 8b       	std	Y+18, r24	; 0x12
     3c2:	c7 01       	movw	r24, r14
     3c4:	b8 01       	movw	r22, r16
     3c6:	ae 01       	movw	r20, r28
     3c8:	47 5e       	subi	r20, 0xE7	; 231
     3ca:	5f 4f       	sbci	r21, 0xFF	; 255
     3cc:	0e 94 71 00 	call	0xe2	; 0xe2 <_fpadd_parts>
     3d0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__pack_f>
     3d4:	a0 96       	adiw	r28, 0x20	; 32
     3d6:	e6 e0       	ldi	r30, 0x06	; 6
     3d8:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__epilogue_restores__+0x18>

000003dc <__addsf3>:
     3dc:	a0 e2       	ldi	r26, 0x20	; 32
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	e4 ef       	ldi	r30, 0xF4	; 244
     3e2:	f1 e0       	ldi	r31, 0x01	; 1
     3e4:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__prologue_saves__+0x18>
     3e8:	69 83       	std	Y+1, r22	; 0x01
     3ea:	7a 83       	std	Y+2, r23	; 0x02
     3ec:	8b 83       	std	Y+3, r24	; 0x03
     3ee:	9c 83       	std	Y+4, r25	; 0x04
     3f0:	2d 83       	std	Y+5, r18	; 0x05
     3f2:	3e 83       	std	Y+6, r19	; 0x06
     3f4:	4f 83       	std	Y+7, r20	; 0x07
     3f6:	58 87       	std	Y+8, r21	; 0x08
     3f8:	f9 e0       	ldi	r31, 0x09	; 9
     3fa:	ef 2e       	mov	r14, r31
     3fc:	f1 2c       	mov	r15, r1
     3fe:	ec 0e       	add	r14, r28
     400:	fd 1e       	adc	r15, r29
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	b7 01       	movw	r22, r14
     408:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     40c:	8e 01       	movw	r16, r28
     40e:	0f 5e       	subi	r16, 0xEF	; 239
     410:	1f 4f       	sbci	r17, 0xFF	; 255
     412:	ce 01       	movw	r24, r28
     414:	05 96       	adiw	r24, 0x05	; 5
     416:	b8 01       	movw	r22, r16
     418:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     41c:	c7 01       	movw	r24, r14
     41e:	b8 01       	movw	r22, r16
     420:	ae 01       	movw	r20, r28
     422:	47 5e       	subi	r20, 0xE7	; 231
     424:	5f 4f       	sbci	r21, 0xFF	; 255
     426:	0e 94 71 00 	call	0xe2	; 0xe2 <_fpadd_parts>
     42a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__pack_f>
     42e:	a0 96       	adiw	r28, 0x20	; 32
     430:	e6 e0       	ldi	r30, 0x06	; 6
     432:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__epilogue_restores__+0x18>

00000436 <__mulsf3>:
     436:	a0 e2       	ldi	r26, 0x20	; 32
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	e1 e2       	ldi	r30, 0x21	; 33
     43c:	f2 e0       	ldi	r31, 0x02	; 2
     43e:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__prologue_saves__>
     442:	69 83       	std	Y+1, r22	; 0x01
     444:	7a 83       	std	Y+2, r23	; 0x02
     446:	8b 83       	std	Y+3, r24	; 0x03
     448:	9c 83       	std	Y+4, r25	; 0x04
     44a:	2d 83       	std	Y+5, r18	; 0x05
     44c:	3e 83       	std	Y+6, r19	; 0x06
     44e:	4f 83       	std	Y+7, r20	; 0x07
     450:	58 87       	std	Y+8, r21	; 0x08
     452:	ce 01       	movw	r24, r28
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	be 01       	movw	r22, r28
     458:	67 5f       	subi	r22, 0xF7	; 247
     45a:	7f 4f       	sbci	r23, 0xFF	; 255
     45c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     460:	ce 01       	movw	r24, r28
     462:	05 96       	adiw	r24, 0x05	; 5
     464:	be 01       	movw	r22, r28
     466:	6f 5e       	subi	r22, 0xEF	; 239
     468:	7f 4f       	sbci	r23, 0xFF	; 255
     46a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     46e:	99 85       	ldd	r25, Y+9	; 0x09
     470:	92 30       	cpi	r25, 0x02	; 2
     472:	88 f0       	brcs	.+34     	; 0x496 <__mulsf3+0x60>
     474:	89 89       	ldd	r24, Y+17	; 0x11
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	c8 f0       	brcs	.+50     	; 0x4ac <__mulsf3+0x76>
     47a:	94 30       	cpi	r25, 0x04	; 4
     47c:	19 f4       	brne	.+6      	; 0x484 <__mulsf3+0x4e>
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	51 f4       	brne	.+20     	; 0x496 <__mulsf3+0x60>
     482:	04 c0       	rjmp	.+8      	; 0x48c <__mulsf3+0x56>
     484:	84 30       	cpi	r24, 0x04	; 4
     486:	29 f4       	brne	.+10     	; 0x492 <__mulsf3+0x5c>
     488:	92 30       	cpi	r25, 0x02	; 2
     48a:	81 f4       	brne	.+32     	; 0x4ac <__mulsf3+0x76>
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	c6 c0       	rjmp	.+396    	; 0x61e <__mulsf3+0x1e8>
     492:	92 30       	cpi	r25, 0x02	; 2
     494:	49 f4       	brne	.+18     	; 0x4a8 <__mulsf3+0x72>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	9a 85       	ldd	r25, Y+10	; 0x0a
     49a:	8a 89       	ldd	r24, Y+18	; 0x12
     49c:	98 13       	cpse	r25, r24
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	2a 87       	std	Y+10, r18	; 0x0a
     4a2:	ce 01       	movw	r24, r28
     4a4:	09 96       	adiw	r24, 0x09	; 9
     4a6:	bb c0       	rjmp	.+374    	; 0x61e <__mulsf3+0x1e8>
     4a8:	82 30       	cpi	r24, 0x02	; 2
     4aa:	49 f4       	brne	.+18     	; 0x4be <__mulsf3+0x88>
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b0:	8a 89       	ldd	r24, Y+18	; 0x12
     4b2:	98 13       	cpse	r25, r24
     4b4:	21 e0       	ldi	r18, 0x01	; 1
     4b6:	2a 8b       	std	Y+18, r18	; 0x12
     4b8:	ce 01       	movw	r24, r28
     4ba:	41 96       	adiw	r24, 0x11	; 17
     4bc:	b0 c0       	rjmp	.+352    	; 0x61e <__mulsf3+0x1e8>
     4be:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c0:	3e 84       	ldd	r3, Y+14	; 0x0e
     4c2:	4f 84       	ldd	r4, Y+15	; 0x0f
     4c4:	58 88       	ldd	r5, Y+16	; 0x10
     4c6:	6d 88       	ldd	r6, Y+21	; 0x15
     4c8:	7e 88       	ldd	r7, Y+22	; 0x16
     4ca:	8f 88       	ldd	r8, Y+23	; 0x17
     4cc:	98 8c       	ldd	r9, Y+24	; 0x18
     4ce:	ee 24       	eor	r14, r14
     4d0:	ff 24       	eor	r15, r15
     4d2:	87 01       	movw	r16, r14
     4d4:	aa 24       	eor	r10, r10
     4d6:	bb 24       	eor	r11, r11
     4d8:	65 01       	movw	r12, r10
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	e0 e0       	ldi	r30, 0x00	; 0
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	c1 01       	movw	r24, r2
     4e8:	81 70       	andi	r24, 0x01	; 1
     4ea:	90 70       	andi	r25, 0x00	; 0
     4ec:	89 2b       	or	r24, r25
     4ee:	e9 f0       	breq	.+58     	; 0x52a <__mulsf3+0xf4>
     4f0:	e6 0c       	add	r14, r6
     4f2:	f7 1c       	adc	r15, r7
     4f4:	08 1d       	adc	r16, r8
     4f6:	19 1d       	adc	r17, r9
     4f8:	9a 01       	movw	r18, r20
     4fa:	ab 01       	movw	r20, r22
     4fc:	2a 0d       	add	r18, r10
     4fe:	3b 1d       	adc	r19, r11
     500:	4c 1d       	adc	r20, r12
     502:	5d 1d       	adc	r21, r13
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	a0 e0       	ldi	r26, 0x00	; 0
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	e6 14       	cp	r14, r6
     50e:	f7 04       	cpc	r15, r7
     510:	08 05       	cpc	r16, r8
     512:	19 05       	cpc	r17, r9
     514:	20 f4       	brcc	.+8      	; 0x51e <__mulsf3+0xe8>
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	a0 e0       	ldi	r26, 0x00	; 0
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	ba 01       	movw	r22, r20
     520:	a9 01       	movw	r20, r18
     522:	48 0f       	add	r20, r24
     524:	59 1f       	adc	r21, r25
     526:	6a 1f       	adc	r22, r26
     528:	7b 1f       	adc	r23, r27
     52a:	aa 0c       	add	r10, r10
     52c:	bb 1c       	adc	r11, r11
     52e:	cc 1c       	adc	r12, r12
     530:	dd 1c       	adc	r13, r13
     532:	97 fe       	sbrs	r9, 7
     534:	08 c0       	rjmp	.+16     	; 0x546 <__mulsf3+0x110>
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	a0 e0       	ldi	r26, 0x00	; 0
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	a8 2a       	or	r10, r24
     540:	b9 2a       	or	r11, r25
     542:	ca 2a       	or	r12, r26
     544:	db 2a       	or	r13, r27
     546:	31 96       	adiw	r30, 0x01	; 1
     548:	e0 32       	cpi	r30, 0x20	; 32
     54a:	f1 05       	cpc	r31, r1
     54c:	49 f0       	breq	.+18     	; 0x560 <__mulsf3+0x12a>
     54e:	66 0c       	add	r6, r6
     550:	77 1c       	adc	r7, r7
     552:	88 1c       	adc	r8, r8
     554:	99 1c       	adc	r9, r9
     556:	56 94       	lsr	r5
     558:	47 94       	ror	r4
     55a:	37 94       	ror	r3
     55c:	27 94       	ror	r2
     55e:	c3 cf       	rjmp	.-122    	; 0x4e6 <__mulsf3+0xb0>
     560:	fa 85       	ldd	r31, Y+10	; 0x0a
     562:	ea 89       	ldd	r30, Y+18	; 0x12
     564:	2b 89       	ldd	r18, Y+19	; 0x13
     566:	3c 89       	ldd	r19, Y+20	; 0x14
     568:	8b 85       	ldd	r24, Y+11	; 0x0b
     56a:	9c 85       	ldd	r25, Y+12	; 0x0c
     56c:	28 0f       	add	r18, r24
     56e:	39 1f       	adc	r19, r25
     570:	2e 5f       	subi	r18, 0xFE	; 254
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	17 c0       	rjmp	.+46     	; 0x5a4 <__mulsf3+0x16e>
     576:	ca 01       	movw	r24, r20
     578:	81 70       	andi	r24, 0x01	; 1
     57a:	90 70       	andi	r25, 0x00	; 0
     57c:	89 2b       	or	r24, r25
     57e:	61 f0       	breq	.+24     	; 0x598 <__mulsf3+0x162>
     580:	16 95       	lsr	r17
     582:	07 95       	ror	r16
     584:	f7 94       	ror	r15
     586:	e7 94       	ror	r14
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a0 e0       	ldi	r26, 0x00	; 0
     58e:	b0 e8       	ldi	r27, 0x80	; 128
     590:	e8 2a       	or	r14, r24
     592:	f9 2a       	or	r15, r25
     594:	0a 2b       	or	r16, r26
     596:	1b 2b       	or	r17, r27
     598:	76 95       	lsr	r23
     59a:	67 95       	ror	r22
     59c:	57 95       	ror	r21
     59e:	47 95       	ror	r20
     5a0:	2f 5f       	subi	r18, 0xFF	; 255
     5a2:	3f 4f       	sbci	r19, 0xFF	; 255
     5a4:	77 fd       	sbrc	r23, 7
     5a6:	e7 cf       	rjmp	.-50     	; 0x576 <__mulsf3+0x140>
     5a8:	0c c0       	rjmp	.+24     	; 0x5c2 <__mulsf3+0x18c>
     5aa:	44 0f       	add	r20, r20
     5ac:	55 1f       	adc	r21, r21
     5ae:	66 1f       	adc	r22, r22
     5b0:	77 1f       	adc	r23, r23
     5b2:	17 fd       	sbrc	r17, 7
     5b4:	41 60       	ori	r20, 0x01	; 1
     5b6:	ee 0c       	add	r14, r14
     5b8:	ff 1c       	adc	r15, r15
     5ba:	00 1f       	adc	r16, r16
     5bc:	11 1f       	adc	r17, r17
     5be:	21 50       	subi	r18, 0x01	; 1
     5c0:	30 40       	sbci	r19, 0x00	; 0
     5c2:	40 30       	cpi	r20, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	59 07       	cpc	r21, r25
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	69 07       	cpc	r22, r25
     5cc:	90 e4       	ldi	r25, 0x40	; 64
     5ce:	79 07       	cpc	r23, r25
     5d0:	60 f3       	brcs	.-40     	; 0x5aa <__mulsf3+0x174>
     5d2:	2b 8f       	std	Y+27, r18	; 0x1b
     5d4:	3c 8f       	std	Y+28, r19	; 0x1c
     5d6:	db 01       	movw	r26, r22
     5d8:	ca 01       	movw	r24, r20
     5da:	8f 77       	andi	r24, 0x7F	; 127
     5dc:	90 70       	andi	r25, 0x00	; 0
     5de:	a0 70       	andi	r26, 0x00	; 0
     5e0:	b0 70       	andi	r27, 0x00	; 0
     5e2:	80 34       	cpi	r24, 0x40	; 64
     5e4:	91 05       	cpc	r25, r1
     5e6:	a1 05       	cpc	r26, r1
     5e8:	b1 05       	cpc	r27, r1
     5ea:	61 f4       	brne	.+24     	; 0x604 <__mulsf3+0x1ce>
     5ec:	47 fd       	sbrc	r20, 7
     5ee:	0a c0       	rjmp	.+20     	; 0x604 <__mulsf3+0x1ce>
     5f0:	e1 14       	cp	r14, r1
     5f2:	f1 04       	cpc	r15, r1
     5f4:	01 05       	cpc	r16, r1
     5f6:	11 05       	cpc	r17, r1
     5f8:	29 f0       	breq	.+10     	; 0x604 <__mulsf3+0x1ce>
     5fa:	40 5c       	subi	r20, 0xC0	; 192
     5fc:	5f 4f       	sbci	r21, 0xFF	; 255
     5fe:	6f 4f       	sbci	r22, 0xFF	; 255
     600:	7f 4f       	sbci	r23, 0xFF	; 255
     602:	40 78       	andi	r20, 0x80	; 128
     604:	1a 8e       	std	Y+26, r1	; 0x1a
     606:	fe 17       	cp	r31, r30
     608:	11 f0       	breq	.+4      	; 0x60e <__mulsf3+0x1d8>
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	8a 8f       	std	Y+26, r24	; 0x1a
     60e:	4d 8f       	std	Y+29, r20	; 0x1d
     610:	5e 8f       	std	Y+30, r21	; 0x1e
     612:	6f 8f       	std	Y+31, r22	; 0x1f
     614:	78 a3       	std	Y+32, r23	; 0x20
     616:	83 e0       	ldi	r24, 0x03	; 3
     618:	89 8f       	std	Y+25, r24	; 0x19
     61a:	ce 01       	movw	r24, r28
     61c:	49 96       	adiw	r24, 0x19	; 25
     61e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__pack_f>
     622:	a0 96       	adiw	r28, 0x20	; 32
     624:	e2 e1       	ldi	r30, 0x12	; 18
     626:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__epilogue_restores__>

0000062a <__nesf2>:
     62a:	a8 e1       	ldi	r26, 0x18	; 24
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	eb e1       	ldi	r30, 0x1B	; 27
     630:	f3 e0       	ldi	r31, 0x03	; 3
     632:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__prologue_saves__+0x18>
     636:	69 83       	std	Y+1, r22	; 0x01
     638:	7a 83       	std	Y+2, r23	; 0x02
     63a:	8b 83       	std	Y+3, r24	; 0x03
     63c:	9c 83       	std	Y+4, r25	; 0x04
     63e:	2d 83       	std	Y+5, r18	; 0x05
     640:	3e 83       	std	Y+6, r19	; 0x06
     642:	4f 83       	std	Y+7, r20	; 0x07
     644:	58 87       	std	Y+8, r21	; 0x08
     646:	89 e0       	ldi	r24, 0x09	; 9
     648:	e8 2e       	mov	r14, r24
     64a:	f1 2c       	mov	r15, r1
     64c:	ec 0e       	add	r14, r28
     64e:	fd 1e       	adc	r15, r29
     650:	ce 01       	movw	r24, r28
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	b7 01       	movw	r22, r14
     656:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     65a:	8e 01       	movw	r16, r28
     65c:	0f 5e       	subi	r16, 0xEF	; 239
     65e:	1f 4f       	sbci	r17, 0xFF	; 255
     660:	ce 01       	movw	r24, r28
     662:	05 96       	adiw	r24, 0x05	; 5
     664:	b8 01       	movw	r22, r16
     666:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     66a:	89 85       	ldd	r24, Y+9	; 0x09
     66c:	82 30       	cpi	r24, 0x02	; 2
     66e:	40 f0       	brcs	.+16     	; 0x680 <__nesf2+0x56>
     670:	89 89       	ldd	r24, Y+17	; 0x11
     672:	82 30       	cpi	r24, 0x02	; 2
     674:	28 f0       	brcs	.+10     	; 0x680 <__nesf2+0x56>
     676:	c7 01       	movw	r24, r14
     678:	b8 01       	movw	r22, r16
     67a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fpcmp_parts_f>
     67e:	01 c0       	rjmp	.+2      	; 0x682 <__nesf2+0x58>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	68 96       	adiw	r28, 0x18	; 24
     684:	e6 e0       	ldi	r30, 0x06	; 6
     686:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__epilogue_restores__+0x18>

0000068a <__gtsf2>:
     68a:	a8 e1       	ldi	r26, 0x18	; 24
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	eb e4       	ldi	r30, 0x4B	; 75
     690:	f3 e0       	ldi	r31, 0x03	; 3
     692:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__prologue_saves__+0x18>
     696:	69 83       	std	Y+1, r22	; 0x01
     698:	7a 83       	std	Y+2, r23	; 0x02
     69a:	8b 83       	std	Y+3, r24	; 0x03
     69c:	9c 83       	std	Y+4, r25	; 0x04
     69e:	2d 83       	std	Y+5, r18	; 0x05
     6a0:	3e 83       	std	Y+6, r19	; 0x06
     6a2:	4f 83       	std	Y+7, r20	; 0x07
     6a4:	58 87       	std	Y+8, r21	; 0x08
     6a6:	89 e0       	ldi	r24, 0x09	; 9
     6a8:	e8 2e       	mov	r14, r24
     6aa:	f1 2c       	mov	r15, r1
     6ac:	ec 0e       	add	r14, r28
     6ae:	fd 1e       	adc	r15, r29
     6b0:	ce 01       	movw	r24, r28
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	b7 01       	movw	r22, r14
     6b6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     6ba:	8e 01       	movw	r16, r28
     6bc:	0f 5e       	subi	r16, 0xEF	; 239
     6be:	1f 4f       	sbci	r17, 0xFF	; 255
     6c0:	ce 01       	movw	r24, r28
     6c2:	05 96       	adiw	r24, 0x05	; 5
     6c4:	b8 01       	movw	r22, r16
     6c6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     6ca:	89 85       	ldd	r24, Y+9	; 0x09
     6cc:	82 30       	cpi	r24, 0x02	; 2
     6ce:	40 f0       	brcs	.+16     	; 0x6e0 <__gtsf2+0x56>
     6d0:	89 89       	ldd	r24, Y+17	; 0x11
     6d2:	82 30       	cpi	r24, 0x02	; 2
     6d4:	28 f0       	brcs	.+10     	; 0x6e0 <__gtsf2+0x56>
     6d6:	c7 01       	movw	r24, r14
     6d8:	b8 01       	movw	r22, r16
     6da:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fpcmp_parts_f>
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <__gtsf2+0x58>
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	68 96       	adiw	r28, 0x18	; 24
     6e4:	e6 e0       	ldi	r30, 0x06	; 6
     6e6:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__epilogue_restores__+0x18>

000006ea <__gesf2>:
     6ea:	a8 e1       	ldi	r26, 0x18	; 24
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	eb e7       	ldi	r30, 0x7B	; 123
     6f0:	f3 e0       	ldi	r31, 0x03	; 3
     6f2:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__prologue_saves__+0x18>
     6f6:	69 83       	std	Y+1, r22	; 0x01
     6f8:	7a 83       	std	Y+2, r23	; 0x02
     6fa:	8b 83       	std	Y+3, r24	; 0x03
     6fc:	9c 83       	std	Y+4, r25	; 0x04
     6fe:	2d 83       	std	Y+5, r18	; 0x05
     700:	3e 83       	std	Y+6, r19	; 0x06
     702:	4f 83       	std	Y+7, r20	; 0x07
     704:	58 87       	std	Y+8, r21	; 0x08
     706:	89 e0       	ldi	r24, 0x09	; 9
     708:	e8 2e       	mov	r14, r24
     70a:	f1 2c       	mov	r15, r1
     70c:	ec 0e       	add	r14, r28
     70e:	fd 1e       	adc	r15, r29
     710:	ce 01       	movw	r24, r28
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	b7 01       	movw	r22, r14
     716:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     71a:	8e 01       	movw	r16, r28
     71c:	0f 5e       	subi	r16, 0xEF	; 239
     71e:	1f 4f       	sbci	r17, 0xFF	; 255
     720:	ce 01       	movw	r24, r28
     722:	05 96       	adiw	r24, 0x05	; 5
     724:	b8 01       	movw	r22, r16
     726:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     72a:	89 85       	ldd	r24, Y+9	; 0x09
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	40 f0       	brcs	.+16     	; 0x740 <__gesf2+0x56>
     730:	89 89       	ldd	r24, Y+17	; 0x11
     732:	82 30       	cpi	r24, 0x02	; 2
     734:	28 f0       	brcs	.+10     	; 0x740 <__gesf2+0x56>
     736:	c7 01       	movw	r24, r14
     738:	b8 01       	movw	r22, r16
     73a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fpcmp_parts_f>
     73e:	01 c0       	rjmp	.+2      	; 0x742 <__gesf2+0x58>
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	68 96       	adiw	r28, 0x18	; 24
     744:	e6 e0       	ldi	r30, 0x06	; 6
     746:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__epilogue_restores__+0x18>

0000074a <__ltsf2>:
     74a:	a8 e1       	ldi	r26, 0x18	; 24
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	eb ea       	ldi	r30, 0xAB	; 171
     750:	f3 e0       	ldi	r31, 0x03	; 3
     752:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__prologue_saves__+0x18>
     756:	69 83       	std	Y+1, r22	; 0x01
     758:	7a 83       	std	Y+2, r23	; 0x02
     75a:	8b 83       	std	Y+3, r24	; 0x03
     75c:	9c 83       	std	Y+4, r25	; 0x04
     75e:	2d 83       	std	Y+5, r18	; 0x05
     760:	3e 83       	std	Y+6, r19	; 0x06
     762:	4f 83       	std	Y+7, r20	; 0x07
     764:	58 87       	std	Y+8, r21	; 0x08
     766:	89 e0       	ldi	r24, 0x09	; 9
     768:	e8 2e       	mov	r14, r24
     76a:	f1 2c       	mov	r15, r1
     76c:	ec 0e       	add	r14, r28
     76e:	fd 1e       	adc	r15, r29
     770:	ce 01       	movw	r24, r28
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	b7 01       	movw	r22, r14
     776:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     77a:	8e 01       	movw	r16, r28
     77c:	0f 5e       	subi	r16, 0xEF	; 239
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	ce 01       	movw	r24, r28
     782:	05 96       	adiw	r24, 0x05	; 5
     784:	b8 01       	movw	r22, r16
     786:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     78a:	89 85       	ldd	r24, Y+9	; 0x09
     78c:	82 30       	cpi	r24, 0x02	; 2
     78e:	40 f0       	brcs	.+16     	; 0x7a0 <__ltsf2+0x56>
     790:	89 89       	ldd	r24, Y+17	; 0x11
     792:	82 30       	cpi	r24, 0x02	; 2
     794:	28 f0       	brcs	.+10     	; 0x7a0 <__ltsf2+0x56>
     796:	c7 01       	movw	r24, r14
     798:	b8 01       	movw	r22, r16
     79a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fpcmp_parts_f>
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <__ltsf2+0x58>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	68 96       	adiw	r28, 0x18	; 24
     7a4:	e6 e0       	ldi	r30, 0x06	; 6
     7a6:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__epilogue_restores__+0x18>

000007aa <__fixsfsi>:
     7aa:	ac e0       	ldi	r26, 0x0C	; 12
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	eb ed       	ldi	r30, 0xDB	; 219
     7b0:	f3 e0       	ldi	r31, 0x03	; 3
     7b2:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__prologue_saves__+0x20>
     7b6:	69 83       	std	Y+1, r22	; 0x01
     7b8:	7a 83       	std	Y+2, r23	; 0x02
     7ba:	8b 83       	std	Y+3, r24	; 0x03
     7bc:	9c 83       	std	Y+4, r25	; 0x04
     7be:	ce 01       	movw	r24, r28
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	be 01       	movw	r22, r28
     7c4:	6b 5f       	subi	r22, 0xFB	; 251
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__unpack_f>
     7cc:	8d 81       	ldd	r24, Y+5	; 0x05
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	61 f1       	breq	.+88     	; 0x82a <__fixsfsi+0x80>
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	50 f1       	brcs	.+84     	; 0x82a <__fixsfsi+0x80>
     7d6:	84 30       	cpi	r24, 0x04	; 4
     7d8:	21 f4       	brne	.+8      	; 0x7e2 <__fixsfsi+0x38>
     7da:	8e 81       	ldd	r24, Y+6	; 0x06
     7dc:	88 23       	and	r24, r24
     7de:	51 f1       	breq	.+84     	; 0x834 <__fixsfsi+0x8a>
     7e0:	2e c0       	rjmp	.+92     	; 0x83e <__fixsfsi+0x94>
     7e2:	2f 81       	ldd	r18, Y+7	; 0x07
     7e4:	38 85       	ldd	r19, Y+8	; 0x08
     7e6:	37 fd       	sbrc	r19, 7
     7e8:	20 c0       	rjmp	.+64     	; 0x82a <__fixsfsi+0x80>
     7ea:	6e 81       	ldd	r22, Y+6	; 0x06
     7ec:	2f 31       	cpi	r18, 0x1F	; 31
     7ee:	31 05       	cpc	r19, r1
     7f0:	1c f0       	brlt	.+6      	; 0x7f8 <__fixsfsi+0x4e>
     7f2:	66 23       	and	r22, r22
     7f4:	f9 f0       	breq	.+62     	; 0x834 <__fixsfsi+0x8a>
     7f6:	23 c0       	rjmp	.+70     	; 0x83e <__fixsfsi+0x94>
     7f8:	8e e1       	ldi	r24, 0x1E	; 30
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	82 1b       	sub	r24, r18
     7fe:	93 0b       	sbc	r25, r19
     800:	29 85       	ldd	r18, Y+9	; 0x09
     802:	3a 85       	ldd	r19, Y+10	; 0x0a
     804:	4b 85       	ldd	r20, Y+11	; 0x0b
     806:	5c 85       	ldd	r21, Y+12	; 0x0c
     808:	04 c0       	rjmp	.+8      	; 0x812 <__fixsfsi+0x68>
     80a:	56 95       	lsr	r21
     80c:	47 95       	ror	r20
     80e:	37 95       	ror	r19
     810:	27 95       	ror	r18
     812:	8a 95       	dec	r24
     814:	d2 f7       	brpl	.-12     	; 0x80a <__fixsfsi+0x60>
     816:	66 23       	and	r22, r22
     818:	b1 f0       	breq	.+44     	; 0x846 <__fixsfsi+0x9c>
     81a:	50 95       	com	r21
     81c:	40 95       	com	r20
     81e:	30 95       	com	r19
     820:	21 95       	neg	r18
     822:	3f 4f       	sbci	r19, 0xFF	; 255
     824:	4f 4f       	sbci	r20, 0xFF	; 255
     826:	5f 4f       	sbci	r21, 0xFF	; 255
     828:	0e c0       	rjmp	.+28     	; 0x846 <__fixsfsi+0x9c>
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	09 c0       	rjmp	.+18     	; 0x846 <__fixsfsi+0x9c>
     834:	2f ef       	ldi	r18, 0xFF	; 255
     836:	3f ef       	ldi	r19, 0xFF	; 255
     838:	4f ef       	ldi	r20, 0xFF	; 255
     83a:	5f e7       	ldi	r21, 0x7F	; 127
     83c:	04 c0       	rjmp	.+8      	; 0x846 <__fixsfsi+0x9c>
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	50 e8       	ldi	r21, 0x80	; 128
     846:	b9 01       	movw	r22, r18
     848:	ca 01       	movw	r24, r20
     84a:	2c 96       	adiw	r28, 0x0c	; 12
     84c:	e2 e0       	ldi	r30, 0x02	; 2
     84e:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__epilogue_restores__+0x20>

00000852 <__floatunsisf>:
     852:	a8 e0       	ldi	r26, 0x08	; 8
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	ef e2       	ldi	r30, 0x2F	; 47
     858:	f4 e0       	ldi	r31, 0x04	; 4
     85a:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__prologue_saves__+0x10>
     85e:	7b 01       	movw	r14, r22
     860:	8c 01       	movw	r16, r24
     862:	61 15       	cp	r22, r1
     864:	71 05       	cpc	r23, r1
     866:	81 05       	cpc	r24, r1
     868:	91 05       	cpc	r25, r1
     86a:	19 f4       	brne	.+6      	; 0x872 <__floatunsisf+0x20>
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	89 83       	std	Y+1, r24	; 0x01
     870:	60 c0       	rjmp	.+192    	; 0x932 <__stack+0x33>
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	89 83       	std	Y+1, r24	; 0x01
     876:	8e e1       	ldi	r24, 0x1E	; 30
     878:	c8 2e       	mov	r12, r24
     87a:	d1 2c       	mov	r13, r1
     87c:	dc 82       	std	Y+4, r13	; 0x04
     87e:	cb 82       	std	Y+3, r12	; 0x03
     880:	ed 82       	std	Y+5, r14	; 0x05
     882:	fe 82       	std	Y+6, r15	; 0x06
     884:	0f 83       	std	Y+7, r16	; 0x07
     886:	18 87       	std	Y+8, r17	; 0x08
     888:	c8 01       	movw	r24, r16
     88a:	b7 01       	movw	r22, r14
     88c:	0e 94 a2 04 	call	0x944	; 0x944 <__clzsi2>
     890:	fc 01       	movw	r30, r24
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	f7 ff       	sbrs	r31, 7
     896:	3b c0       	rjmp	.+118    	; 0x90e <__stack+0xf>
     898:	22 27       	eor	r18, r18
     89a:	33 27       	eor	r19, r19
     89c:	2e 1b       	sub	r18, r30
     89e:	3f 0b       	sbc	r19, r31
     8a0:	57 01       	movw	r10, r14
     8a2:	68 01       	movw	r12, r16
     8a4:	02 2e       	mov	r0, r18
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <__floatunsisf+0x5e>
     8a8:	d6 94       	lsr	r13
     8aa:	c7 94       	ror	r12
     8ac:	b7 94       	ror	r11
     8ae:	a7 94       	ror	r10
     8b0:	0a 94       	dec	r0
     8b2:	d2 f7       	brpl	.-12     	; 0x8a8 <__floatunsisf+0x56>
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	a0 e0       	ldi	r26, 0x00	; 0
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	04 c0       	rjmp	.+8      	; 0x8ce <__floatunsisf+0x7c>
     8c6:	88 0f       	add	r24, r24
     8c8:	99 1f       	adc	r25, r25
     8ca:	aa 1f       	adc	r26, r26
     8cc:	bb 1f       	adc	r27, r27
     8ce:	2a 95       	dec	r18
     8d0:	d2 f7       	brpl	.-12     	; 0x8c6 <__floatunsisf+0x74>
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	a1 09       	sbc	r26, r1
     8d6:	b1 09       	sbc	r27, r1
     8d8:	8e 21       	and	r24, r14
     8da:	9f 21       	and	r25, r15
     8dc:	a0 23       	and	r26, r16
     8de:	b1 23       	and	r27, r17
     8e0:	00 97       	sbiw	r24, 0x00	; 0
     8e2:	a1 05       	cpc	r26, r1
     8e4:	b1 05       	cpc	r27, r1
     8e6:	21 f0       	breq	.+8      	; 0x8f0 <__floatunsisf+0x9e>
     8e8:	41 e0       	ldi	r20, 0x01	; 1
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	4a 29       	or	r20, r10
     8f2:	5b 29       	or	r21, r11
     8f4:	6c 29       	or	r22, r12
     8f6:	7d 29       	or	r23, r13
     8f8:	4d 83       	std	Y+5, r20	; 0x05
     8fa:	5e 83       	std	Y+6, r21	; 0x06
     8fc:	6f 83       	std	Y+7, r22	; 0x07
     8fe:	78 87       	std	Y+8, r23	; 0x08
     900:	8e e1       	ldi	r24, 0x1E	; 30
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	8e 1b       	sub	r24, r30
     906:	9f 0b       	sbc	r25, r31
     908:	9c 83       	std	Y+4, r25	; 0x04
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	12 c0       	rjmp	.+36     	; 0x932 <__stack+0x33>
     90e:	30 97       	sbiw	r30, 0x00	; 0
     910:	81 f0       	breq	.+32     	; 0x932 <__stack+0x33>
     912:	0e 2e       	mov	r0, r30
     914:	04 c0       	rjmp	.+8      	; 0x91e <__stack+0x1f>
     916:	ee 0c       	add	r14, r14
     918:	ff 1c       	adc	r15, r15
     91a:	00 1f       	adc	r16, r16
     91c:	11 1f       	adc	r17, r17
     91e:	0a 94       	dec	r0
     920:	d2 f7       	brpl	.-12     	; 0x916 <__stack+0x17>
     922:	ed 82       	std	Y+5, r14	; 0x05
     924:	fe 82       	std	Y+6, r15	; 0x06
     926:	0f 83       	std	Y+7, r16	; 0x07
     928:	18 87       	std	Y+8, r17	; 0x08
     92a:	ce 1a       	sub	r12, r30
     92c:	df 0a       	sbc	r13, r31
     92e:	dc 82       	std	Y+4, r13	; 0x04
     930:	cb 82       	std	Y+3, r12	; 0x03
     932:	1a 82       	std	Y+2, r1	; 0x02
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__pack_f>
     93c:	28 96       	adiw	r28, 0x08	; 8
     93e:	ea e0       	ldi	r30, 0x0A	; 10
     940:	0c 94 85 19 	jmp	0x330a	; 0x330a <__epilogue_restores__+0x10>

00000944 <__clzsi2>:
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	7b 01       	movw	r14, r22
     94e:	8c 01       	movw	r16, r24
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	e8 16       	cp	r14, r24
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	f8 06       	cpc	r15, r24
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	08 07       	cpc	r16, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	18 07       	cpc	r17, r24
     960:	88 f4       	brcc	.+34     	; 0x984 <__clzsi2+0x40>
     962:	8f ef       	ldi	r24, 0xFF	; 255
     964:	e8 16       	cp	r14, r24
     966:	f1 04       	cpc	r15, r1
     968:	01 05       	cpc	r16, r1
     96a:	11 05       	cpc	r17, r1
     96c:	31 f0       	breq	.+12     	; 0x97a <__clzsi2+0x36>
     96e:	28 f0       	brcs	.+10     	; 0x97a <__clzsi2+0x36>
     970:	88 e0       	ldi	r24, 0x08	; 8
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e0       	ldi	r26, 0x00	; 0
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	17 c0       	rjmp	.+46     	; 0x9a8 <__clzsi2+0x64>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	a0 e0       	ldi	r26, 0x00	; 0
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	12 c0       	rjmp	.+36     	; 0x9a8 <__clzsi2+0x64>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	e8 16       	cp	r14, r24
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	f8 06       	cpc	r15, r24
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	08 07       	cpc	r16, r24
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	18 07       	cpc	r17, r24
     994:	28 f0       	brcs	.+10     	; 0x9a0 <__clzsi2+0x5c>
     996:	88 e1       	ldi	r24, 0x18	; 24
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e0       	ldi	r26, 0x00	; 0
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	04 c0       	rjmp	.+8      	; 0x9a8 <__clzsi2+0x64>
     9a0:	80 e1       	ldi	r24, 0x10	; 16
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	20 e2       	ldi	r18, 0x20	; 32
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	28 1b       	sub	r18, r24
     9b2:	39 0b       	sbc	r19, r25
     9b4:	4a 0b       	sbc	r20, r26
     9b6:	5b 0b       	sbc	r21, r27
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__clzsi2+0x7e>
     9ba:	16 95       	lsr	r17
     9bc:	07 95       	ror	r16
     9be:	f7 94       	ror	r15
     9c0:	e7 94       	ror	r14
     9c2:	8a 95       	dec	r24
     9c4:	d2 f7       	brpl	.-12     	; 0x9ba <__clzsi2+0x76>
     9c6:	f7 01       	movw	r30, r14
     9c8:	e8 5f       	subi	r30, 0xF8	; 248
     9ca:	fe 4f       	sbci	r31, 0xFE	; 254
     9cc:	80 81       	ld	r24, Z
     9ce:	28 1b       	sub	r18, r24
     9d0:	31 09       	sbc	r19, r1
     9d2:	41 09       	sbc	r20, r1
     9d4:	51 09       	sbc	r21, r1
     9d6:	c9 01       	movw	r24, r18
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	08 95       	ret

000009e2 <__pack_f>:
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	fc 01       	movw	r30, r24
     9ee:	e4 80       	ldd	r14, Z+4	; 0x04
     9f0:	f5 80       	ldd	r15, Z+5	; 0x05
     9f2:	06 81       	ldd	r16, Z+6	; 0x06
     9f4:	17 81       	ldd	r17, Z+7	; 0x07
     9f6:	d1 80       	ldd	r13, Z+1	; 0x01
     9f8:	80 81       	ld	r24, Z
     9fa:	82 30       	cpi	r24, 0x02	; 2
     9fc:	48 f4       	brcc	.+18     	; 0xa10 <__pack_f+0x2e>
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	a0 e1       	ldi	r26, 0x10	; 16
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e8 2a       	or	r14, r24
     a08:	f9 2a       	or	r15, r25
     a0a:	0a 2b       	or	r16, r26
     a0c:	1b 2b       	or	r17, r27
     a0e:	a5 c0       	rjmp	.+330    	; 0xb5a <__pack_f+0x178>
     a10:	84 30       	cpi	r24, 0x04	; 4
     a12:	09 f4       	brne	.+2      	; 0xa16 <__pack_f+0x34>
     a14:	9f c0       	rjmp	.+318    	; 0xb54 <__pack_f+0x172>
     a16:	82 30       	cpi	r24, 0x02	; 2
     a18:	21 f4       	brne	.+8      	; 0xa22 <__pack_f+0x40>
     a1a:	ee 24       	eor	r14, r14
     a1c:	ff 24       	eor	r15, r15
     a1e:	87 01       	movw	r16, r14
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <__pack_f+0x4a>
     a22:	e1 14       	cp	r14, r1
     a24:	f1 04       	cpc	r15, r1
     a26:	01 05       	cpc	r16, r1
     a28:	11 05       	cpc	r17, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__pack_f+0x50>
     a2c:	e0 e0       	ldi	r30, 0x00	; 0
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	96 c0       	rjmp	.+300    	; 0xb5e <__pack_f+0x17c>
     a32:	62 81       	ldd	r22, Z+2	; 0x02
     a34:	73 81       	ldd	r23, Z+3	; 0x03
     a36:	9f ef       	ldi	r25, 0xFF	; 255
     a38:	62 38       	cpi	r22, 0x82	; 130
     a3a:	79 07       	cpc	r23, r25
     a3c:	0c f0       	brlt	.+2      	; 0xa40 <__pack_f+0x5e>
     a3e:	5b c0       	rjmp	.+182    	; 0xaf6 <__pack_f+0x114>
     a40:	22 e8       	ldi	r18, 0x82	; 130
     a42:	3f ef       	ldi	r19, 0xFF	; 255
     a44:	26 1b       	sub	r18, r22
     a46:	37 0b       	sbc	r19, r23
     a48:	2a 31       	cpi	r18, 0x1A	; 26
     a4a:	31 05       	cpc	r19, r1
     a4c:	2c f0       	brlt	.+10     	; 0xa58 <__pack_f+0x76>
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	2a c0       	rjmp	.+84     	; 0xaac <__pack_f+0xca>
     a58:	b8 01       	movw	r22, r16
     a5a:	a7 01       	movw	r20, r14
     a5c:	02 2e       	mov	r0, r18
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__pack_f+0x86>
     a60:	76 95       	lsr	r23
     a62:	67 95       	ror	r22
     a64:	57 95       	ror	r21
     a66:	47 95       	ror	r20
     a68:	0a 94       	dec	r0
     a6a:	d2 f7       	brpl	.-12     	; 0xa60 <__pack_f+0x7e>
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__pack_f+0x9c>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	aa 1f       	adc	r26, r26
     a7c:	bb 1f       	adc	r27, r27
     a7e:	2a 95       	dec	r18
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__pack_f+0x94>
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	a1 09       	sbc	r26, r1
     a86:	b1 09       	sbc	r27, r1
     a88:	8e 21       	and	r24, r14
     a8a:	9f 21       	and	r25, r15
     a8c:	a0 23       	and	r26, r16
     a8e:	b1 23       	and	r27, r17
     a90:	00 97       	sbiw	r24, 0x00	; 0
     a92:	a1 05       	cpc	r26, r1
     a94:	b1 05       	cpc	r27, r1
     a96:	21 f0       	breq	.+8      	; 0xaa0 <__pack_f+0xbe>
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	9a 01       	movw	r18, r20
     aa2:	ab 01       	movw	r20, r22
     aa4:	28 2b       	or	r18, r24
     aa6:	39 2b       	or	r19, r25
     aa8:	4a 2b       	or	r20, r26
     aaa:	5b 2b       	or	r21, r27
     aac:	da 01       	movw	r26, r20
     aae:	c9 01       	movw	r24, r18
     ab0:	8f 77       	andi	r24, 0x7F	; 127
     ab2:	90 70       	andi	r25, 0x00	; 0
     ab4:	a0 70       	andi	r26, 0x00	; 0
     ab6:	b0 70       	andi	r27, 0x00	; 0
     ab8:	80 34       	cpi	r24, 0x40	; 64
     aba:	91 05       	cpc	r25, r1
     abc:	a1 05       	cpc	r26, r1
     abe:	b1 05       	cpc	r27, r1
     ac0:	39 f4       	brne	.+14     	; 0xad0 <__pack_f+0xee>
     ac2:	27 ff       	sbrs	r18, 7
     ac4:	09 c0       	rjmp	.+18     	; 0xad8 <__pack_f+0xf6>
     ac6:	20 5c       	subi	r18, 0xC0	; 192
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	4f 4f       	sbci	r20, 0xFF	; 255
     acc:	5f 4f       	sbci	r21, 0xFF	; 255
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <__pack_f+0xf6>
     ad0:	21 5c       	subi	r18, 0xC1	; 193
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	4f 4f       	sbci	r20, 0xFF	; 255
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	e0 e0       	ldi	r30, 0x00	; 0
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	20 30       	cpi	r18, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	3a 07       	cpc	r19, r26
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	4a 07       	cpc	r20, r26
     ae6:	a0 e4       	ldi	r26, 0x40	; 64
     ae8:	5a 07       	cpc	r21, r26
     aea:	10 f0       	brcs	.+4      	; 0xaf0 <__pack_f+0x10e>
     aec:	e1 e0       	ldi	r30, 0x01	; 1
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	79 01       	movw	r14, r18
     af2:	8a 01       	movw	r16, r20
     af4:	27 c0       	rjmp	.+78     	; 0xb44 <__pack_f+0x162>
     af6:	60 38       	cpi	r22, 0x80	; 128
     af8:	71 05       	cpc	r23, r1
     afa:	64 f5       	brge	.+88     	; 0xb54 <__pack_f+0x172>
     afc:	fb 01       	movw	r30, r22
     afe:	e1 58       	subi	r30, 0x81	; 129
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	d8 01       	movw	r26, r16
     b04:	c7 01       	movw	r24, r14
     b06:	8f 77       	andi	r24, 0x7F	; 127
     b08:	90 70       	andi	r25, 0x00	; 0
     b0a:	a0 70       	andi	r26, 0x00	; 0
     b0c:	b0 70       	andi	r27, 0x00	; 0
     b0e:	80 34       	cpi	r24, 0x40	; 64
     b10:	91 05       	cpc	r25, r1
     b12:	a1 05       	cpc	r26, r1
     b14:	b1 05       	cpc	r27, r1
     b16:	39 f4       	brne	.+14     	; 0xb26 <__pack_f+0x144>
     b18:	e7 fe       	sbrs	r14, 7
     b1a:	0d c0       	rjmp	.+26     	; 0xb36 <__pack_f+0x154>
     b1c:	80 e4       	ldi	r24, 0x40	; 64
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <__pack_f+0x14c>
     b26:	8f e3       	ldi	r24, 0x3F	; 63
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	e8 0e       	add	r14, r24
     b30:	f9 1e       	adc	r15, r25
     b32:	0a 1f       	adc	r16, r26
     b34:	1b 1f       	adc	r17, r27
     b36:	17 ff       	sbrs	r17, 7
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <__pack_f+0x162>
     b3a:	16 95       	lsr	r17
     b3c:	07 95       	ror	r16
     b3e:	f7 94       	ror	r15
     b40:	e7 94       	ror	r14
     b42:	31 96       	adiw	r30, 0x01	; 1
     b44:	87 e0       	ldi	r24, 0x07	; 7
     b46:	16 95       	lsr	r17
     b48:	07 95       	ror	r16
     b4a:	f7 94       	ror	r15
     b4c:	e7 94       	ror	r14
     b4e:	8a 95       	dec	r24
     b50:	d1 f7       	brne	.-12     	; 0xb46 <__pack_f+0x164>
     b52:	05 c0       	rjmp	.+10     	; 0xb5e <__pack_f+0x17c>
     b54:	ee 24       	eor	r14, r14
     b56:	ff 24       	eor	r15, r15
     b58:	87 01       	movw	r16, r14
     b5a:	ef ef       	ldi	r30, 0xFF	; 255
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	6e 2f       	mov	r22, r30
     b60:	67 95       	ror	r22
     b62:	66 27       	eor	r22, r22
     b64:	67 95       	ror	r22
     b66:	90 2f       	mov	r25, r16
     b68:	9f 77       	andi	r25, 0x7F	; 127
     b6a:	d7 94       	ror	r13
     b6c:	dd 24       	eor	r13, r13
     b6e:	d7 94       	ror	r13
     b70:	8e 2f       	mov	r24, r30
     b72:	86 95       	lsr	r24
     b74:	49 2f       	mov	r20, r25
     b76:	46 2b       	or	r20, r22
     b78:	58 2f       	mov	r21, r24
     b7a:	5d 29       	or	r21, r13
     b7c:	b7 01       	movw	r22, r14
     b7e:	ca 01       	movw	r24, r20
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	08 95       	ret

00000b8c <__unpack_f>:
     b8c:	fc 01       	movw	r30, r24
     b8e:	db 01       	movw	r26, r22
     b90:	40 81       	ld	r20, Z
     b92:	51 81       	ldd	r21, Z+1	; 0x01
     b94:	22 81       	ldd	r18, Z+2	; 0x02
     b96:	62 2f       	mov	r22, r18
     b98:	6f 77       	andi	r22, 0x7F	; 127
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	22 1f       	adc	r18, r18
     b9e:	22 27       	eor	r18, r18
     ba0:	22 1f       	adc	r18, r18
     ba2:	93 81       	ldd	r25, Z+3	; 0x03
     ba4:	89 2f       	mov	r24, r25
     ba6:	88 0f       	add	r24, r24
     ba8:	82 2b       	or	r24, r18
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	99 1f       	adc	r25, r25
     bb0:	99 27       	eor	r25, r25
     bb2:	99 1f       	adc	r25, r25
     bb4:	11 96       	adiw	r26, 0x01	; 1
     bb6:	9c 93       	st	X, r25
     bb8:	11 97       	sbiw	r26, 0x01	; 1
     bba:	21 15       	cp	r18, r1
     bbc:	31 05       	cpc	r19, r1
     bbe:	a9 f5       	brne	.+106    	; 0xc2a <__unpack_f+0x9e>
     bc0:	41 15       	cp	r20, r1
     bc2:	51 05       	cpc	r21, r1
     bc4:	61 05       	cpc	r22, r1
     bc6:	71 05       	cpc	r23, r1
     bc8:	11 f4       	brne	.+4      	; 0xbce <__unpack_f+0x42>
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	37 c0       	rjmp	.+110    	; 0xc3c <__unpack_f+0xb0>
     bce:	82 e8       	ldi	r24, 0x82	; 130
     bd0:	9f ef       	ldi	r25, 0xFF	; 255
     bd2:	13 96       	adiw	r26, 0x03	; 3
     bd4:	9c 93       	st	X, r25
     bd6:	8e 93       	st	-X, r24
     bd8:	12 97       	sbiw	r26, 0x02	; 2
     bda:	9a 01       	movw	r18, r20
     bdc:	ab 01       	movw	r20, r22
     bde:	67 e0       	ldi	r22, 0x07	; 7
     be0:	22 0f       	add	r18, r18
     be2:	33 1f       	adc	r19, r19
     be4:	44 1f       	adc	r20, r20
     be6:	55 1f       	adc	r21, r21
     be8:	6a 95       	dec	r22
     bea:	d1 f7       	brne	.-12     	; 0xbe0 <__unpack_f+0x54>
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	8c 93       	st	X, r24
     bf0:	0d c0       	rjmp	.+26     	; 0xc0c <__unpack_f+0x80>
     bf2:	22 0f       	add	r18, r18
     bf4:	33 1f       	adc	r19, r19
     bf6:	44 1f       	adc	r20, r20
     bf8:	55 1f       	adc	r21, r21
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	8d 91       	ld	r24, X+
     bfe:	9c 91       	ld	r25, X
     c00:	13 97       	sbiw	r26, 0x03	; 3
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	13 96       	adiw	r26, 0x03	; 3
     c06:	9c 93       	st	X, r25
     c08:	8e 93       	st	-X, r24
     c0a:	12 97       	sbiw	r26, 0x02	; 2
     c0c:	20 30       	cpi	r18, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	38 07       	cpc	r19, r24
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	48 07       	cpc	r20, r24
     c16:	80 e4       	ldi	r24, 0x40	; 64
     c18:	58 07       	cpc	r21, r24
     c1a:	58 f3       	brcs	.-42     	; 0xbf2 <__unpack_f+0x66>
     c1c:	14 96       	adiw	r26, 0x04	; 4
     c1e:	2d 93       	st	X+, r18
     c20:	3d 93       	st	X+, r19
     c22:	4d 93       	st	X+, r20
     c24:	5c 93       	st	X, r21
     c26:	17 97       	sbiw	r26, 0x07	; 7
     c28:	08 95       	ret
     c2a:	2f 3f       	cpi	r18, 0xFF	; 255
     c2c:	31 05       	cpc	r19, r1
     c2e:	79 f4       	brne	.+30     	; 0xc4e <__unpack_f+0xc2>
     c30:	41 15       	cp	r20, r1
     c32:	51 05       	cpc	r21, r1
     c34:	61 05       	cpc	r22, r1
     c36:	71 05       	cpc	r23, r1
     c38:	19 f4       	brne	.+6      	; 0xc40 <__unpack_f+0xb4>
     c3a:	84 e0       	ldi	r24, 0x04	; 4
     c3c:	8c 93       	st	X, r24
     c3e:	08 95       	ret
     c40:	64 ff       	sbrs	r22, 4
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <__unpack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	8c 93       	st	X, r24
     c48:	12 c0       	rjmp	.+36     	; 0xc6e <__unpack_f+0xe2>
     c4a:	1c 92       	st	X, r1
     c4c:	10 c0       	rjmp	.+32     	; 0xc6e <__unpack_f+0xe2>
     c4e:	2f 57       	subi	r18, 0x7F	; 127
     c50:	30 40       	sbci	r19, 0x00	; 0
     c52:	13 96       	adiw	r26, 0x03	; 3
     c54:	3c 93       	st	X, r19
     c56:	2e 93       	st	-X, r18
     c58:	12 97       	sbiw	r26, 0x02	; 2
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	8c 93       	st	X, r24
     c5e:	87 e0       	ldi	r24, 0x07	; 7
     c60:	44 0f       	add	r20, r20
     c62:	55 1f       	adc	r21, r21
     c64:	66 1f       	adc	r22, r22
     c66:	77 1f       	adc	r23, r23
     c68:	8a 95       	dec	r24
     c6a:	d1 f7       	brne	.-12     	; 0xc60 <__unpack_f+0xd4>
     c6c:	70 64       	ori	r23, 0x40	; 64
     c6e:	14 96       	adiw	r26, 0x04	; 4
     c70:	4d 93       	st	X+, r20
     c72:	5d 93       	st	X+, r21
     c74:	6d 93       	st	X+, r22
     c76:	7c 93       	st	X, r23
     c78:	17 97       	sbiw	r26, 0x07	; 7
     c7a:	08 95       	ret

00000c7c <__fpcmp_parts_f>:
     c7c:	1f 93       	push	r17
     c7e:	dc 01       	movw	r26, r24
     c80:	fb 01       	movw	r30, r22
     c82:	9c 91       	ld	r25, X
     c84:	92 30       	cpi	r25, 0x02	; 2
     c86:	08 f4       	brcc	.+2      	; 0xc8a <__fpcmp_parts_f+0xe>
     c88:	47 c0       	rjmp	.+142    	; 0xd18 <__fpcmp_parts_f+0x9c>
     c8a:	80 81       	ld	r24, Z
     c8c:	82 30       	cpi	r24, 0x02	; 2
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <__fpcmp_parts_f+0x16>
     c90:	43 c0       	rjmp	.+134    	; 0xd18 <__fpcmp_parts_f+0x9c>
     c92:	94 30       	cpi	r25, 0x04	; 4
     c94:	51 f4       	brne	.+20     	; 0xcaa <__fpcmp_parts_f+0x2e>
     c96:	11 96       	adiw	r26, 0x01	; 1
     c98:	1c 91       	ld	r17, X
     c9a:	84 30       	cpi	r24, 0x04	; 4
     c9c:	99 f5       	brne	.+102    	; 0xd04 <__fpcmp_parts_f+0x88>
     c9e:	81 81       	ldd	r24, Z+1	; 0x01
     ca0:	68 2f       	mov	r22, r24
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	61 1b       	sub	r22, r17
     ca6:	71 09       	sbc	r23, r1
     ca8:	3f c0       	rjmp	.+126    	; 0xd28 <__fpcmp_parts_f+0xac>
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	21 f0       	breq	.+8      	; 0xcb6 <__fpcmp_parts_f+0x3a>
     cae:	92 30       	cpi	r25, 0x02	; 2
     cb0:	31 f4       	brne	.+12     	; 0xcbe <__fpcmp_parts_f+0x42>
     cb2:	82 30       	cpi	r24, 0x02	; 2
     cb4:	b9 f1       	breq	.+110    	; 0xd24 <__fpcmp_parts_f+0xa8>
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	88 23       	and	r24, r24
     cba:	89 f1       	breq	.+98     	; 0xd1e <__fpcmp_parts_f+0xa2>
     cbc:	2d c0       	rjmp	.+90     	; 0xd18 <__fpcmp_parts_f+0x9c>
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	1c 91       	ld	r17, X
     cc2:	11 97       	sbiw	r26, 0x01	; 1
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	f1 f0       	breq	.+60     	; 0xd04 <__fpcmp_parts_f+0x88>
     cc8:	81 81       	ldd	r24, Z+1	; 0x01
     cca:	18 17       	cp	r17, r24
     ccc:	d9 f4       	brne	.+54     	; 0xd04 <__fpcmp_parts_f+0x88>
     cce:	12 96       	adiw	r26, 0x02	; 2
     cd0:	2d 91       	ld	r18, X+
     cd2:	3c 91       	ld	r19, X
     cd4:	13 97       	sbiw	r26, 0x03	; 3
     cd6:	82 81       	ldd	r24, Z+2	; 0x02
     cd8:	93 81       	ldd	r25, Z+3	; 0x03
     cda:	82 17       	cp	r24, r18
     cdc:	93 07       	cpc	r25, r19
     cde:	94 f0       	brlt	.+36     	; 0xd04 <__fpcmp_parts_f+0x88>
     ce0:	28 17       	cp	r18, r24
     ce2:	39 07       	cpc	r19, r25
     ce4:	bc f0       	brlt	.+46     	; 0xd14 <__fpcmp_parts_f+0x98>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	8d 91       	ld	r24, X+
     cea:	9d 91       	ld	r25, X+
     cec:	0d 90       	ld	r0, X+
     cee:	bc 91       	ld	r27, X
     cf0:	a0 2d       	mov	r26, r0
     cf2:	24 81       	ldd	r18, Z+4	; 0x04
     cf4:	35 81       	ldd	r19, Z+5	; 0x05
     cf6:	46 81       	ldd	r20, Z+6	; 0x06
     cf8:	57 81       	ldd	r21, Z+7	; 0x07
     cfa:	28 17       	cp	r18, r24
     cfc:	39 07       	cpc	r19, r25
     cfe:	4a 07       	cpc	r20, r26
     d00:	5b 07       	cpc	r21, r27
     d02:	18 f4       	brcc	.+6      	; 0xd0a <__fpcmp_parts_f+0x8e>
     d04:	11 23       	and	r17, r17
     d06:	41 f0       	breq	.+16     	; 0xd18 <__fpcmp_parts_f+0x9c>
     d08:	0a c0       	rjmp	.+20     	; 0xd1e <__fpcmp_parts_f+0xa2>
     d0a:	82 17       	cp	r24, r18
     d0c:	93 07       	cpc	r25, r19
     d0e:	a4 07       	cpc	r26, r20
     d10:	b5 07       	cpc	r27, r21
     d12:	40 f4       	brcc	.+16     	; 0xd24 <__fpcmp_parts_f+0xa8>
     d14:	11 23       	and	r17, r17
     d16:	19 f0       	breq	.+6      	; 0xd1e <__fpcmp_parts_f+0xa2>
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <__fpcmp_parts_f+0xac>
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <__fpcmp_parts_f+0xac>
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	cb 01       	movw	r24, r22
     d2a:	1f 91       	pop	r17
     d2c:	08 95       	ret

00000d2e <SREG_vid_EnableeBitI>:

void SREG_vid_EnableeBitI(void)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
     d36:	78 94       	sei
}
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
     d46:	f8 94       	cli

     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <DIO_enu_SetPinDiretion>:

//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void);

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	00 d0       	rcall	.+0      	; 0xd54 <DIO_enu_SetPinDiretion+0x6>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <DIO_enu_SetPinDiretion+0x8>
     d56:	00 d0       	rcall	.+0      	; 0xd58 <DIO_enu_SetPinDiretion+0xa>
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	8a 83       	std	Y+2, r24	; 0x02
     d5e:	6b 83       	std	Y+3, r22	; 0x03
     d60:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	84 30       	cpi	r24, 0x04	; 4
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <DIO_enu_SetPinDiretion+0x20>
     d6c:	d0 c0       	rjmp	.+416    	; 0xf0e <DIO_enu_SetPinDiretion+0x1c0>
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	88 30       	cpi	r24, 0x08	; 8
     d72:	08 f0       	brcs	.+2      	; 0xd76 <DIO_enu_SetPinDiretion+0x28>
     d74:	cc c0       	rjmp	.+408    	; 0xf0e <DIO_enu_SetPinDiretion+0x1c0>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	08 f0       	brcs	.+2      	; 0xd7e <DIO_enu_SetPinDiretion+0x30>
     d7c:	c8 c0       	rjmp	.+400    	; 0xf0e <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	3e 83       	std	Y+6, r19	; 0x06
     d86:	2d 83       	std	Y+5, r18	; 0x05
     d88:	6d 81       	ldd	r22, Y+5	; 0x05
     d8a:	7e 81       	ldd	r23, Y+6	; 0x06
     d8c:	61 30       	cpi	r22, 0x01	; 1
     d8e:	71 05       	cpc	r23, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <DIO_enu_SetPinDiretion+0x46>
     d92:	41 c0       	rjmp	.+130    	; 0xe16 <DIO_enu_SetPinDiretion+0xc8>
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	9e 81       	ldd	r25, Y+6	; 0x06
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	91 05       	cpc	r25, r1
     d9c:	34 f4       	brge	.+12     	; 0xdaa <DIO_enu_SetPinDiretion+0x5c>
     d9e:	2d 81       	ldd	r18, Y+5	; 0x05
     da0:	3e 81       	ldd	r19, Y+6	; 0x06
     da2:	21 15       	cp	r18, r1
     da4:	31 05       	cpc	r19, r1
     da6:	71 f0       	breq	.+28     	; 0xdc4 <DIO_enu_SetPinDiretion+0x76>
     da8:	b0 c0       	rjmp	.+352    	; 0xf0a <DIO_enu_SetPinDiretion+0x1bc>
     daa:	6d 81       	ldd	r22, Y+5	; 0x05
     dac:	7e 81       	ldd	r23, Y+6	; 0x06
     dae:	62 30       	cpi	r22, 0x02	; 2
     db0:	71 05       	cpc	r23, r1
     db2:	09 f4       	brne	.+2      	; 0xdb6 <DIO_enu_SetPinDiretion+0x68>
     db4:	59 c0       	rjmp	.+178    	; 0xe68 <DIO_enu_SetPinDiretion+0x11a>
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	9e 81       	ldd	r25, Y+6	; 0x06
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	91 05       	cpc	r25, r1
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <DIO_enu_SetPinDiretion+0x74>
     dc0:	7c c0       	rjmp	.+248    	; 0xeba <DIO_enu_SetPinDiretion+0x16c>
     dc2:	a3 c0       	rjmp	.+326    	; 0xf0a <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
     dc4:	aa e3       	ldi	r26, 0x3A	; 58
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	ea e3       	ldi	r30, 0x3A	; 58
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_enu_SetPinDiretion+0x92>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	2a 95       	dec	r18
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_enu_SetPinDiretion+0x8e>
     de4:	80 95       	com	r24
     de6:	84 23       	and	r24, r20
     de8:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     dea:	aa e3       	ldi	r26, 0x3A	; 58
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ea e3       	ldi	r30, 0x3A	; 58
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8c 81       	ldd	r24, Y+4	; 0x04
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	b9 01       	movw	r22, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_enu_SetPinDiretion+0xbc>
     e06:	66 0f       	add	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	8a 95       	dec	r24
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_enu_SetPinDiretion+0xb8>
     e0e:	cb 01       	movw	r24, r22
     e10:	84 2b       	or	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	7a c0       	rjmp	.+244    	; 0xf0a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
     e16:	a7 e3       	ldi	r26, 0x37	; 55
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e7 e3       	ldi	r30, 0x37	; 55
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_enu_SetPinDiretion+0xe4>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	2a 95       	dec	r18
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_enu_SetPinDiretion+0xe0>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     e3c:	a7 e3       	ldi	r26, 0x37	; 55
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e7 e3       	ldi	r30, 0x37	; 55
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	b9 01       	movw	r22, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_enu_SetPinDiretion+0x10e>
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	8a 95       	dec	r24
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_enu_SetPinDiretion+0x10a>
     e60:	cb 01       	movw	r24, r22
     e62:	84 2b       	or	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	51 c0       	rjmp	.+162    	; 0xf0a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
     e68:	a4 e3       	ldi	r26, 0x34	; 52
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e4 e3       	ldi	r30, 0x34	; 52
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_enu_SetPinDiretion+0x136>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	2a 95       	dec	r18
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_enu_SetPinDiretion+0x132>
     e88:	80 95       	com	r24
     e8a:	84 23       	and	r24, r20
     e8c:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     e8e:	a4 e3       	ldi	r26, 0x34	; 52
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e4 e3       	ldi	r30, 0x34	; 52
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	b9 01       	movw	r22, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_enu_SetPinDiretion+0x160>
     eaa:	66 0f       	add	r22, r22
     eac:	77 1f       	adc	r23, r23
     eae:	8a 95       	dec	r24
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_enu_SetPinDiretion+0x15c>
     eb2:	cb 01       	movw	r24, r22
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	28 c0       	rjmp	.+80     	; 0xf0a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
     eba:	a1 e3       	ldi	r26, 0x31	; 49
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e1 e3       	ldi	r30, 0x31	; 49
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_enu_SetPinDiretion+0x188>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	2a 95       	dec	r18
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_enu_SetPinDiretion+0x184>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     ee0:	a1 e3       	ldi	r26, 0x31	; 49
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e1 e3       	ldi	r30, 0x31	; 49
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	b9 01       	movw	r22, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_enu_SetPinDiretion+0x1b2>
     efc:	66 0f       	add	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	8a 95       	dec	r24
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_enu_SetPinDiretion+0x1ae>
     f04:	cb 01       	movw	r24, r22
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     f0a:	19 82       	std	Y+1, r1	; 0x01
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	26 96       	adiw	r28, 0x06	; 6
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <DIO_enu_SetPinState+0x6>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <DIO_enu_SetPinState+0x8>
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <DIO_enu_SetPinState+0xa>
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	8a 83       	std	Y+2, r24	; 0x02
     f36:	6b 83       	std	Y+3, r22	; 0x03
     f38:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	84 30       	cpi	r24, 0x04	; 4
     f42:	08 f0       	brcs	.+2      	; 0xf46 <DIO_enu_SetPinState+0x20>
     f44:	d0 c0       	rjmp	.+416    	; 0x10e6 <DIO_enu_SetPinState+0x1c0>
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	88 30       	cpi	r24, 0x08	; 8
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <DIO_enu_SetPinState+0x28>
     f4c:	cc c0       	rjmp	.+408    	; 0x10e6 <DIO_enu_SetPinState+0x1c0>
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	08 f0       	brcs	.+2      	; 0xf56 <DIO_enu_SetPinState+0x30>
     f54:	c8 c0       	rjmp	.+400    	; 0x10e6 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3e 83       	std	Y+6, r19	; 0x06
     f5e:	2d 83       	std	Y+5, r18	; 0x05
     f60:	6d 81       	ldd	r22, Y+5	; 0x05
     f62:	7e 81       	ldd	r23, Y+6	; 0x06
     f64:	61 30       	cpi	r22, 0x01	; 1
     f66:	71 05       	cpc	r23, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <DIO_enu_SetPinState+0x46>
     f6a:	41 c0       	rjmp	.+130    	; 0xfee <DIO_enu_SetPinState+0xc8>
     f6c:	8d 81       	ldd	r24, Y+5	; 0x05
     f6e:	9e 81       	ldd	r25, Y+6	; 0x06
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	91 05       	cpc	r25, r1
     f74:	34 f4       	brge	.+12     	; 0xf82 <DIO_enu_SetPinState+0x5c>
     f76:	2d 81       	ldd	r18, Y+5	; 0x05
     f78:	3e 81       	ldd	r19, Y+6	; 0x06
     f7a:	21 15       	cp	r18, r1
     f7c:	31 05       	cpc	r19, r1
     f7e:	71 f0       	breq	.+28     	; 0xf9c <DIO_enu_SetPinState+0x76>
     f80:	b0 c0       	rjmp	.+352    	; 0x10e2 <DIO_enu_SetPinState+0x1bc>
     f82:	6d 81       	ldd	r22, Y+5	; 0x05
     f84:	7e 81       	ldd	r23, Y+6	; 0x06
     f86:	62 30       	cpi	r22, 0x02	; 2
     f88:	71 05       	cpc	r23, r1
     f8a:	09 f4       	brne	.+2      	; 0xf8e <DIO_enu_SetPinState+0x68>
     f8c:	59 c0       	rjmp	.+178    	; 0x1040 <DIO_enu_SetPinState+0x11a>
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <DIO_enu_SetPinState+0x74>
     f98:	7c c0       	rjmp	.+248    	; 0x1092 <DIO_enu_SetPinState+0x16c>
     f9a:	a3 c0       	rjmp	.+326    	; 0x10e2 <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
     f9c:	ab e3       	ldi	r26, 0x3B	; 59
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	eb e3       	ldi	r30, 0x3B	; 59
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_enu_SetPinState+0x92>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	2a 95       	dec	r18
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_enu_SetPinState+0x8e>
     fbc:	80 95       	com	r24
     fbe:	84 23       	and	r24, r20
     fc0:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     fc2:	ab e3       	ldi	r26, 0x3B	; 59
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	eb e3       	ldi	r30, 0x3B	; 59
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	b9 01       	movw	r22, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_enu_SetPinState+0xbc>
     fde:	66 0f       	add	r22, r22
     fe0:	77 1f       	adc	r23, r23
     fe2:	8a 95       	dec	r24
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_enu_SetPinState+0xb8>
     fe6:	cb 01       	movw	r24, r22
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	7a c0       	rjmp	.+244    	; 0x10e2 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
     fee:	a8 e3       	ldi	r26, 0x38	; 56
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e8 e3       	ldi	r30, 0x38	; 56
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_enu_SetPinState+0xe4>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	2a 95       	dec	r18
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_enu_SetPinState+0xe0>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1014:	a8 e3       	ldi	r26, 0x38	; 56
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e8 e3       	ldi	r30, 0x38	; 56
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	b9 01       	movw	r22, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_enu_SetPinState+0x10e>
    1030:	66 0f       	add	r22, r22
    1032:	77 1f       	adc	r23, r23
    1034:	8a 95       	dec	r24
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_enu_SetPinState+0x10a>
    1038:	cb 01       	movw	r24, r22
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	51 c0       	rjmp	.+162    	; 0x10e2 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    1040:	a5 e3       	ldi	r26, 0x35	; 53
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e5 e3       	ldi	r30, 0x35	; 53
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_enu_SetPinState+0x136>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	2a 95       	dec	r18
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_enu_SetPinState+0x132>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1066:	a5 e3       	ldi	r26, 0x35	; 53
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e3       	ldi	r30, 0x35	; 53
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	b9 01       	movw	r22, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_enu_SetPinState+0x160>
    1082:	66 0f       	add	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	8a 95       	dec	r24
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_enu_SetPinState+0x15c>
    108a:	cb 01       	movw	r24, r22
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	28 c0       	rjmp	.+80     	; 0x10e2 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    1092:	a2 e3       	ldi	r26, 0x32	; 50
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e2 e3       	ldi	r30, 0x32	; 50
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_enu_SetPinState+0x188>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	2a 95       	dec	r18
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_enu_SetPinState+0x184>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    10b8:	a2 e3       	ldi	r26, 0x32	; 50
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e2 e3       	ldi	r30, 0x32	; 50
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	b9 01       	movw	r22, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_enu_SetPinState+0x1b2>
    10d4:	66 0f       	add	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_enu_SetPinState+0x1ae>
    10dc:	cb 01       	movw	r24, r22
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    10e2:	19 82       	std	Y+1, r1	; 0x01
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ec:	26 96       	adiw	r28, 0x06	; 6
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	00 d0       	rcall	.+0      	; 0x1104 <DIO_enu_SetPinValue+0x6>
    1104:	00 d0       	rcall	.+0      	; 0x1106 <DIO_enu_SetPinValue+0x8>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <DIO_enu_SetPinValue+0xa>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	8a 83       	std	Y+2, r24	; 0x02
    110e:	6b 83       	std	Y+3, r22	; 0x03
    1110:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	08 f0       	brcs	.+2      	; 0x111e <DIO_enu_SetPinValue+0x20>
    111c:	db c0       	rjmp	.+438    	; 0x12d4 <DIO_enu_SetPinValue+0x1d6>
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 30       	cpi	r24, 0x08	; 8
    1122:	08 f0       	brcs	.+2      	; 0x1126 <DIO_enu_SetPinValue+0x28>
    1124:	d7 c0       	rjmp	.+430    	; 0x12d4 <DIO_enu_SetPinValue+0x1d6>
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	08 f0       	brcs	.+2      	; 0x112e <DIO_enu_SetPinValue+0x30>
    112c:	d3 c0       	rjmp	.+422    	; 0x12d4 <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3e 83       	std	Y+6, r19	; 0x06
    1136:	2d 83       	std	Y+5, r18	; 0x05
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <DIO_enu_SetPinValue+0x46>
    1142:	43 c0       	rjmp	.+134    	; 0x11ca <DIO_enu_SetPinValue+0xcc>
    1144:	2d 81       	ldd	r18, Y+5	; 0x05
    1146:	3e 81       	ldd	r19, Y+6	; 0x06
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	2c f4       	brge	.+10     	; 0x1158 <DIO_enu_SetPinValue+0x5a>
    114e:	8d 81       	ldd	r24, Y+5	; 0x05
    1150:	9e 81       	ldd	r25, Y+6	; 0x06
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	71 f0       	breq	.+28     	; 0x1172 <DIO_enu_SetPinValue+0x74>
    1156:	bc c0       	rjmp	.+376    	; 0x12d0 <DIO_enu_SetPinValue+0x1d2>
    1158:	2d 81       	ldd	r18, Y+5	; 0x05
    115a:	3e 81       	ldd	r19, Y+6	; 0x06
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <DIO_enu_SetPinValue+0x66>
    1162:	5f c0       	rjmp	.+190    	; 0x1222 <DIO_enu_SetPinValue+0x124>
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	91 05       	cpc	r25, r1
    116c:	09 f4       	brne	.+2      	; 0x1170 <DIO_enu_SetPinValue+0x72>
    116e:	85 c0       	rjmp	.+266    	; 0x127a <DIO_enu_SetPinValue+0x17c>
    1170:	af c0       	rjmp	.+350    	; 0x12d0 <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	a1 f4       	brne	.+40     	; 0x11a0 <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    1178:	ab e3       	ldi	r26, 0x3B	; 59
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	eb e3       	ldi	r30, 0x3B	; 59
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_enu_SetPinValue+0x98>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_enu_SetPinValue+0x94>
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	98 c0       	rjmp	.+304    	; 0x12d0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    11a0:	ab e3       	ldi	r26, 0x3B	; 59
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	eb e3       	ldi	r30, 0x3B	; 59
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_enu_SetPinValue+0xc0>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_enu_SetPinValue+0xbc>
    11c2:	80 95       	com	r24
    11c4:	84 23       	and	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	83 c0       	rjmp	.+262    	; 0x12d0 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	a1 f4       	brne	.+40     	; 0x11f8 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    11d0:	a8 e3       	ldi	r26, 0x38	; 56
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e8 e3       	ldi	r30, 0x38	; 56
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_enu_SetPinValue+0xf0>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_enu_SetPinValue+0xec>
    11f2:	84 2b       	or	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	6c c0       	rjmp	.+216    	; 0x12d0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    11f8:	a8 e3       	ldi	r26, 0x38	; 56
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e8 e3       	ldi	r30, 0x38	; 56
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_enu_SetPinValue+0x118>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_enu_SetPinValue+0x114>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	57 c0       	rjmp	.+174    	; 0x12d0 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	a1 f4       	brne	.+40     	; 0x1250 <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    1228:	a5 e3       	ldi	r26, 0x35	; 53
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e3       	ldi	r30, 0x35	; 53
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_enu_SetPinValue+0x148>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_enu_SetPinValue+0x144>
    124a:	84 2b       	or	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	40 c0       	rjmp	.+128    	; 0x12d0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    1250:	a5 e3       	ldi	r26, 0x35	; 53
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e5 e3       	ldi	r30, 0x35	; 53
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_enu_SetPinValue+0x170>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_enu_SetPinValue+0x16c>
    1272:	80 95       	com	r24
    1274:	84 23       	and	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	2b c0       	rjmp	.+86     	; 0x12d0 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	a1 f4       	brne	.+40     	; 0x12a8 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    1280:	a2 e3       	ldi	r26, 0x32	; 50
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e2 e3       	ldi	r30, 0x32	; 50
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_enu_SetPinValue+0x1a0>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_enu_SetPinValue+0x19c>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    12a8:	a2 e3       	ldi	r26, 0x32	; 50
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e2 e3       	ldi	r30, 0x32	; 50
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_enu_SetPinValue+0x1c8>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_enu_SetPinValue+0x1c4>
    12ca:	80 95       	com	r24
    12cc:	84 23       	and	r24, r20
    12ce:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    12d0:	19 82       	std	Y+1, r1	; 0x01
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12da:	26 96       	adiw	r28, 0x06	; 6
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <DIO_enu_TogglePinValue+0x6>
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <DIO_enu_TogglePinValue+0x8>
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	8a 83       	std	Y+2, r24	; 0x02
    12fc:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	08 f0       	brcs	.+2      	; 0x130a <DIO_enu_TogglePinValue+0x1e>
    1308:	73 c0       	rjmp	.+230    	; 0x13f0 <DIO_enu_TogglePinValue+0x104>
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 30       	cpi	r24, 0x08	; 8
    130e:	08 f0       	brcs	.+2      	; 0x1312 <DIO_enu_TogglePinValue+0x26>
    1310:	6f c0       	rjmp	.+222    	; 0x13f0 <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3d 83       	std	Y+5, r19	; 0x05
    131a:	2c 83       	std	Y+4, r18	; 0x04
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	91 05       	cpc	r25, r1
    1324:	49 f1       	breq	.+82     	; 0x1378 <DIO_enu_TogglePinValue+0x8c>
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	3d 81       	ldd	r19, Y+5	; 0x05
    132a:	22 30       	cpi	r18, 0x02	; 2
    132c:	31 05       	cpc	r19, r1
    132e:	2c f4       	brge	.+10     	; 0x133a <DIO_enu_TogglePinValue+0x4e>
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	61 f0       	breq	.+24     	; 0x1350 <DIO_enu_TogglePinValue+0x64>
    1338:	5a c0       	rjmp	.+180    	; 0x13ee <DIO_enu_TogglePinValue+0x102>
    133a:	2c 81       	ldd	r18, Y+4	; 0x04
    133c:	3d 81       	ldd	r19, Y+5	; 0x05
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	71 f1       	breq	.+92     	; 0x13a0 <DIO_enu_TogglePinValue+0xb4>
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	9d 81       	ldd	r25, Y+5	; 0x05
    1348:	83 30       	cpi	r24, 0x03	; 3
    134a:	91 05       	cpc	r25, r1
    134c:	e9 f1       	breq	.+122    	; 0x13c8 <DIO_enu_TogglePinValue+0xdc>
    134e:	4f c0       	rjmp	.+158    	; 0x13ee <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    1350:	ab e3       	ldi	r26, 0x3B	; 59
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	eb e3       	ldi	r30, 0x3B	; 59
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_enu_TogglePinValue+0x82>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_enu_TogglePinValue+0x7e>
    1372:	84 27       	eor	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	3b c0       	rjmp	.+118    	; 0x13ee <DIO_enu_TogglePinValue+0x102>
            break;
            
            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    1378:	a8 e3       	ldi	r26, 0x38	; 56
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e8 e3       	ldi	r30, 0x38	; 56
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_enu_TogglePinValue+0xaa>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_enu_TogglePinValue+0xa6>
    139a:	84 27       	eor	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	27 c0       	rjmp	.+78     	; 0x13ee <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    13a0:	a5 e3       	ldi	r26, 0x35	; 53
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e5 e3       	ldi	r30, 0x35	; 53
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_enu_TogglePinValue+0xd2>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_enu_TogglePinValue+0xce>
    13c2:	84 27       	eor	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	13 c0       	rjmp	.+38     	; 0x13ee <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    13c8:	a2 e3       	ldi	r26, 0x32	; 50
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e2 e3       	ldi	r30, 0x32	; 50
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_enu_TogglePinValue+0xfa>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <DIO_enu_TogglePinValue+0xf6>
    13ea:	84 27       	eor	r24, r20
    13ec:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    13ee:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	27 97       	sbiw	r28, 0x07	; 7
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	8a 83       	std	Y+2, r24	; 0x02
    1418:	6b 83       	std	Y+3, r22	; 0x03
    141a:	5d 83       	std	Y+5, r21	; 0x05
    141c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
    1424:	9d 81       	ldd	r25, Y+5	; 0x05
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	09 f4       	brne	.+2      	; 0x142c <DIO_enu_GetPinValue+0x2a>
    142a:	7d c0       	rjmp	.+250    	; 0x1526 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	08 f0       	brcs	.+2      	; 0x1434 <DIO_enu_GetPinValue+0x32>
    1432:	76 c0       	rjmp	.+236    	; 0x1520 <DIO_enu_GetPinValue+0x11e>
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 30       	cpi	r24, 0x08	; 8
    1438:	08 f0       	brcs	.+2      	; 0x143c <DIO_enu_GetPinValue+0x3a>
    143a:	72 c0       	rjmp	.+228    	; 0x1520 <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3f 83       	std	Y+7, r19	; 0x07
    1444:	2e 83       	std	Y+6, r18	; 0x06
    1446:	4e 81       	ldd	r20, Y+6	; 0x06
    1448:	5f 81       	ldd	r21, Y+7	; 0x07
    144a:	41 30       	cpi	r20, 0x01	; 1
    144c:	51 05       	cpc	r21, r1
    144e:	59 f1       	breq	.+86     	; 0x14a6 <DIO_enu_GetPinValue+0xa4>
    1450:	8e 81       	ldd	r24, Y+6	; 0x06
    1452:	9f 81       	ldd	r25, Y+7	; 0x07
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	91 05       	cpc	r25, r1
    1458:	34 f4       	brge	.+12     	; 0x1466 <DIO_enu_GetPinValue+0x64>
    145a:	2e 81       	ldd	r18, Y+6	; 0x06
    145c:	3f 81       	ldd	r19, Y+7	; 0x07
    145e:	21 15       	cp	r18, r1
    1460:	31 05       	cpc	r19, r1
    1462:	69 f0       	breq	.+26     	; 0x147e <DIO_enu_GetPinValue+0x7c>
    1464:	5b c0       	rjmp	.+182    	; 0x151c <DIO_enu_GetPinValue+0x11a>
    1466:	4e 81       	ldd	r20, Y+6	; 0x06
    1468:	5f 81       	ldd	r21, Y+7	; 0x07
    146a:	42 30       	cpi	r20, 0x02	; 2
    146c:	51 05       	cpc	r21, r1
    146e:	79 f1       	breq	.+94     	; 0x14ce <DIO_enu_GetPinValue+0xcc>
    1470:	8e 81       	ldd	r24, Y+6	; 0x06
    1472:	9f 81       	ldd	r25, Y+7	; 0x07
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	91 05       	cpc	r25, r1
    1478:	09 f4       	brne	.+2      	; 0x147c <DIO_enu_GetPinValue+0x7a>
    147a:	3d c0       	rjmp	.+122    	; 0x14f6 <DIO_enu_GetPinValue+0xf4>
    147c:	4f c0       	rjmp	.+158    	; 0x151c <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    147e:	e9 e3       	ldi	r30, 0x39	; 57
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a9 01       	movw	r20, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_enu_GetPinValue+0x94>
    1492:	55 95       	asr	r21
    1494:	47 95       	ror	r20
    1496:	8a 95       	dec	r24
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_enu_GetPinValue+0x90>
    149a:	ca 01       	movw	r24, r20
    149c:	81 70       	andi	r24, 0x01	; 1
    149e:	ec 81       	ldd	r30, Y+4	; 0x04
    14a0:	fd 81       	ldd	r31, Y+5	; 0x05
    14a2:	80 83       	st	Z, r24
    14a4:	3b c0       	rjmp	.+118    	; 0x151c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    14a6:	e6 e3       	ldi	r30, 0x36	; 54
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a9 01       	movw	r20, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <DIO_enu_GetPinValue+0xbc>
    14ba:	55 95       	asr	r21
    14bc:	47 95       	ror	r20
    14be:	8a 95       	dec	r24
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <DIO_enu_GetPinValue+0xb8>
    14c2:	ca 01       	movw	r24, r20
    14c4:	81 70       	andi	r24, 0x01	; 1
    14c6:	ec 81       	ldd	r30, Y+4	; 0x04
    14c8:	fd 81       	ldd	r31, Y+5	; 0x05
    14ca:	80 83       	st	Z, r24
    14cc:	27 c0       	rjmp	.+78     	; 0x151c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    14ce:	e3 e3       	ldi	r30, 0x33	; 51
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a9 01       	movw	r20, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <DIO_enu_GetPinValue+0xe4>
    14e2:	55 95       	asr	r21
    14e4:	47 95       	ror	r20
    14e6:	8a 95       	dec	r24
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <DIO_enu_GetPinValue+0xe0>
    14ea:	ca 01       	movw	r24, r20
    14ec:	81 70       	andi	r24, 0x01	; 1
    14ee:	ec 81       	ldd	r30, Y+4	; 0x04
    14f0:	fd 81       	ldd	r31, Y+5	; 0x05
    14f2:	80 83       	st	Z, r24
    14f4:	13 c0       	rjmp	.+38     	; 0x151c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    14f6:	e0 e3       	ldi	r30, 0x30	; 48
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a9 01       	movw	r20, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <DIO_enu_GetPinValue+0x10c>
    150a:	55 95       	asr	r21
    150c:	47 95       	ror	r20
    150e:	8a 95       	dec	r24
    1510:	e2 f7       	brpl	.-8      	; 0x150a <DIO_enu_GetPinValue+0x108>
    1512:	ca 01       	movw	r24, r20
    1514:	81 70       	andi	r24, 0x01	; 1
    1516:	ec 81       	ldd	r30, Y+4	; 0x04
    1518:	fd 81       	ldd	r31, Y+5	; 0x05
    151a:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    151c:	19 82       	std	Y+1, r1	; 0x01
    151e:	05 c0       	rjmp	.+10     	; 0x152a <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
}
    152c:	27 96       	adiw	r28, 0x07	; 7
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <SW_enu_Initialization+0x6>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    154c:	19 82       	std	Y+1, r1	; 0x01
    154e:	34 c0       	rjmp	.+104    	; 0x15b8 <SW_enu_Initialization+0x7a>
    {
        
       Local_u8_ErrorFlag = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	c9 01       	movw	r24, r18
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	82 0f       	add	r24, r18
    155e:	93 1f       	adc	r25, r19
    1560:	fc 01       	movw	r30, r24
    1562:	e7 5f       	subi	r30, 0xF7	; 247
    1564:	fd 4f       	sbci	r31, 0xFD	; 253
    1566:	40 81       	ld	r20, Z
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	c9 01       	movw	r24, r18
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	82 0f       	add	r24, r18
    1576:	93 1f       	adc	r25, r19
    1578:	fc 01       	movw	r30, r24
    157a:	e6 5f       	subi	r30, 0xF6	; 246
    157c:	fd 4f       	sbci	r31, 0xFD	; 253
    157e:	90 81       	ld	r25, Z
    1580:	84 2f       	mov	r24, r20
    1582:	69 2f       	mov	r22, r25
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
    158a:	8a 83       	std	Y+2, r24	; 0x02
       if(Local_u8_ErrorFlag != ES_OK)
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	88 23       	and	r24, r24
    1590:	c1 f4       	brne	.+48     	; 0x15c2 <SW_enu_Initialization+0x84>
       {
        break;
       }
       Local_u8_ErrorFlag = (SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	c9 01       	movw	r24, r18
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	82 0f       	add	r24, r18
    15a0:	93 1f       	adc	r25, r19
    15a2:	fc 01       	movw	r30, r24
    15a4:	e5 5f       	subi	r30, 0xF5	; 245
    15a6:	fd 4f       	sbci	r31, 0xFD	; 253
    15a8:	80 81       	ld	r24, Z
    15aa:	8a 83       	std	Y+2, r24	; 0x02

        if(Local_u8_ErrorFlag != ES_OK)
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	88 23       	and	r24, r24
    15b0:	41 f4       	brne	.+16     	; 0x15c2 <SW_enu_Initialization+0x84>
extern ErrorState_t SW_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	8f 5f       	subi	r24, 0xFF	; 255
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	90 91 08 02 	lds	r25, 0x0208
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	89 17       	cp	r24, r25
    15c0:	38 f2       	brcs	.-114    	; 0x1550 <SW_enu_Initialization+0x12>
       {
        break;
       }
    }

    Local_u8_ErrorFlag = ES_OK;
    15c2:	1a 82       	std	Y+2, r1	; 0x02


    return Local_u8_ErrorFlag;
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <SW_enu_GetSwValue+0x6>
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <SW_enu_GetSwValue+0x8>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	8a 83       	std	Y+2, r24	; 0x02
    15de:	7c 83       	std	Y+4, r23	; 0x04
    15e0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	49 f1       	breq	.+82     	; 0x1640 <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    15ee:	90 91 08 02 	lds	r25, 0x0208
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	98 17       	cp	r25, r24
    15f6:	08 f1       	brcs	.+66     	; 0x163a <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	c9 01       	movw	r24, r18
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	82 0f       	add	r24, r18
    1606:	93 1f       	adc	r25, r19
    1608:	fc 01       	movw	r30, r24
    160a:	e7 5f       	subi	r30, 0xF7	; 247
    160c:	fd 4f       	sbci	r31, 0xFD	; 253
    160e:	40 81       	ld	r20, Z
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	c9 01       	movw	r24, r18
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	82 0f       	add	r24, r18
    161e:	93 1f       	adc	r25, r19
    1620:	fc 01       	movw	r30, r24
    1622:	e6 5f       	subi	r30, 0xF6	; 246
    1624:	fd 4f       	sbci	r31, 0xFD	; 253
    1626:	90 81       	ld	r25, Z
    1628:	2b 81       	ldd	r18, Y+3	; 0x03
    162a:	3c 81       	ldd	r19, Y+4	; 0x04
    162c:	84 2f       	mov	r24, r20
    162e:	69 2f       	mov	r22, r25
    1630:	a9 01       	movw	r20, r18
    1632:	0e 94 01 0a 	call	0x1402	; 0x1402 <DIO_enu_GetPinValue>
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	05 c0       	rjmp	.+10     	; 0x1644 <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1644:	89 81       	ldd	r24, Y+1	; 0x01

}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <Relay_enu_Initialization+0x6>
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1662:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1664:	19 82       	std	Y+1, r1	; 0x01
    1666:	31 c0       	rjmp	.+98     	; 0x16ca <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	88 2f       	mov	r24, r24
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	fc 01       	movw	r30, r24
    1674:	ed 5e       	subi	r30, 0xED	; 237
    1676:	fd 4f       	sbci	r31, 0xFD	; 253
    1678:	20 81       	ld	r18, Z
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	fc 01       	movw	r30, r24
    1686:	ec 5e       	subi	r30, 0xEC	; 236
    1688:	fd 4f       	sbci	r31, 0xFD	; 253
    168a:	90 81       	ld	r25, Z
    168c:	82 2f       	mov	r24, r18
    168e:	69 2f       	mov	r22, r25
    1690:	41 e0       	ldi	r20, 0x01	; 1
    1692:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	fc 01       	movw	r30, r24
    16a2:	ed 5e       	subi	r30, 0xED	; 237
    16a4:	fd 4f       	sbci	r31, 0xFD	; 253
    16a6:	20 81       	ld	r18, Z
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	fc 01       	movw	r30, r24
    16b4:	ec 5e       	subi	r30, 0xEC	; 236
    16b6:	fd 4f       	sbci	r31, 0xFD	; 253
    16b8:	90 81       	ld	r25, Z
    16ba:	82 2f       	mov	r24, r18
    16bc:	69 2f       	mov	r22, r25
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	8f 5f       	subi	r24, 0xFF	; 255
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	90 91 12 02 	lds	r25, 0x0212
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	89 17       	cp	r24, r25
    16d2:	50 f2       	brcs	.-108    	; 0x1668 <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    16d4:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <Relay_enu_TuronOnRelay+0x6>
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    16f2:	90 91 12 02 	lds	r25, 0x0212
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	89 17       	cp	r24, r25
    16fa:	c8 f4       	brcc	.+50     	; 0x172e <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	fc 01       	movw	r30, r24
    1708:	ed 5e       	subi	r30, 0xED	; 237
    170a:	fd 4f       	sbci	r31, 0xFD	; 253
    170c:	20 81       	ld	r18, Z
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	fc 01       	movw	r30, r24
    171a:	ec 5e       	subi	r30, 0xEC	; 236
    171c:	fd 4f       	sbci	r31, 0xFD	; 253
    171e:	90 81       	ld	r25, Z
    1720:	82 2f       	mov	r24, r18
    1722:	69 2f       	mov	r22, r25
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    1732:	89 81       	ldd	r24, Y+1	; 0x01
}
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	00 d0       	rcall	.+0      	; 0x1744 <Relay_enu_TuronOffRelay+0x6>
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    174e:	90 91 12 02 	lds	r25, 0x0212
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	89 17       	cp	r24, r25
    1756:	c8 f4       	brcc	.+50     	; 0x178a <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	fc 01       	movw	r30, r24
    1764:	ed 5e       	subi	r30, 0xED	; 237
    1766:	fd 4f       	sbci	r31, 0xFD	; 253
    1768:	20 81       	ld	r18, Z
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	fc 01       	movw	r30, r24
    1776:	ec 5e       	subi	r30, 0xEC	; 236
    1778:	fd 4f       	sbci	r31, 0xFD	; 253
    177a:	90 81       	ld	r25, Z
    177c:	82 2f       	mov	r24, r18
    177e:	69 2f       	mov	r22, r25
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	02 c0       	rjmp	.+4      	; 0x178e <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    178e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <Relay_enu_TurnOnAllRelays+0x6>
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    17a8:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    17aa:	19 82       	std	Y+1, r1	; 0x01
    17ac:	1a c0       	rjmp	.+52     	; 0x17e2 <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	fc 01       	movw	r30, r24
    17ba:	ed 5e       	subi	r30, 0xED	; 237
    17bc:	fd 4f       	sbci	r31, 0xFD	; 253
    17be:	20 81       	ld	r18, Z
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	fc 01       	movw	r30, r24
    17cc:	ec 5e       	subi	r30, 0xEC	; 236
    17ce:	fd 4f       	sbci	r31, 0xFD	; 253
    17d0:	90 81       	ld	r25, Z
    17d2:	82 2f       	mov	r24, r18
    17d4:	69 2f       	mov	r22, r25
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	8f 5f       	subi	r24, 0xFF	; 255
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	90 91 12 02 	lds	r25, 0x0212
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	89 17       	cp	r24, r25
    17ea:	08 f3       	brcs	.-62     	; 0x17ae <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    17ec:	82 e0       	ldi	r24, 0x02	; 2
    17ee:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <Relay_enu_TurnOffAllRelays+0x6>
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    180a:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    180c:	19 82       	std	Y+1, r1	; 0x01
    180e:	1a c0       	rjmp	.+52     	; 0x1844 <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	fc 01       	movw	r30, r24
    181c:	ed 5e       	subi	r30, 0xED	; 237
    181e:	fd 4f       	sbci	r31, 0xFD	; 253
    1820:	20 81       	ld	r18, Z
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	fc 01       	movw	r30, r24
    182e:	ec 5e       	subi	r30, 0xEC	; 236
    1830:	fd 4f       	sbci	r31, 0xFD	; 253
    1832:	90 81       	ld	r25, Z
    1834:	82 2f       	mov	r24, r18
    1836:	69 2f       	mov	r22, r25
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	90 91 12 02 	lds	r25, 0x0212
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	89 17       	cp	r24, r25
    184c:	08 f3       	brcs	.-62     	; 0x1810 <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	6d 97       	sbiw	r28, 0x1d	; 29
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	8d 8f       	std	Y+29, r24	; 0x1d
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	ac e0       	ldi	r26, 0x0C	; 12
    1878:	b2 e4       	ldi	r27, 0x42	; 66
    187a:	89 8f       	std	Y+25, r24	; 0x19
    187c:	9a 8f       	std	Y+26, r25	; 0x1a
    187e:	ab 8f       	std	Y+27, r26	; 0x1b
    1880:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1882:	69 8d       	ldd	r22, Y+25	; 0x19
    1884:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1886:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1888:	9c 8d       	ldd	r25, Y+28	; 0x1c
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a e7       	ldi	r20, 0x7A	; 122
    1890:	53 e4       	ldi	r21, 0x43	; 67
    1892:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	8d 8b       	std	Y+21, r24	; 0x15
    189c:	9e 8b       	std	Y+22, r25	; 0x16
    189e:	af 8b       	std	Y+23, r26	; 0x17
    18a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18a2:	6d 89       	ldd	r22, Y+21	; 0x15
    18a4:	7e 89       	ldd	r23, Y+22	; 0x16
    18a6:	8f 89       	ldd	r24, Y+23	; 0x17
    18a8:	98 8d       	ldd	r25, Y+24	; 0x18
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 a5 03 	call	0x74a	; 0x74a <__ltsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	9c 8b       	std	Y+20, r25	; 0x14
    18c0:	8b 8b       	std	Y+19, r24	; 0x13
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    18c4:	6d 89       	ldd	r22, Y+21	; 0x15
    18c6:	7e 89       	ldd	r23, Y+22	; 0x16
    18c8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ca:	98 8d       	ldd	r25, Y+24	; 0x18
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	3f ef       	ldi	r19, 0xFF	; 255
    18d0:	4f e7       	ldi	r20, 0x7F	; 127
    18d2:	57 e4       	ldi	r21, 0x47	; 71
    18d4:	0e 94 45 03 	call	0x68a	; 0x68a <__gtsf2>
    18d8:	18 16       	cp	r1, r24
    18da:	4c f5       	brge	.+82     	; 0x192e <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18dc:	69 8d       	ldd	r22, Y+25	; 0x19
    18de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e2       	ldi	r20, 0x20	; 32
    18ea:	51 e4       	ldi	r21, 0x41	; 65
    18ec:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9c 8b       	std	Y+20, r25	; 0x14
    1902:	8b 8b       	std	Y+19, r24	; 0x13
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <LCD_enu_Initialization+0xca>
    1906:	89 e1       	ldi	r24, 0x19	; 25
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9a 8b       	std	Y+18, r25	; 0x12
    190c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    190e:	89 89       	ldd	r24, Y+17	; 0x11
    1910:	9a 89       	ldd	r25, Y+18	; 0x12
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	f1 f7       	brne	.-4      	; 0x1912 <LCD_enu_Initialization+0xb8>
    1916:	9a 8b       	std	Y+18, r25	; 0x12
    1918:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191a:	8b 89       	ldd	r24, Y+19	; 0x13
    191c:	9c 89       	ldd	r25, Y+20	; 0x14
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	9c 8b       	std	Y+20, r25	; 0x14
    1922:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	8b 89       	ldd	r24, Y+19	; 0x13
    1926:	9c 89       	ldd	r25, Y+20	; 0x14
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	69 f7       	brne	.-38     	; 0x1906 <LCD_enu_Initialization+0xac>
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192e:	6d 89       	ldd	r22, Y+21	; 0x15
    1930:	7e 89       	ldd	r23, Y+22	; 0x16
    1932:	8f 89       	ldd	r24, Y+23	; 0x17
    1934:	98 8d       	ldd	r25, Y+24	; 0x18
    1936:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	9c 8b       	std	Y+20, r25	; 0x14
    1940:	8b 8b       	std	Y+19, r24	; 0x13
    1942:	8b 89       	ldd	r24, Y+19	; 0x13
    1944:	9c 89       	ldd	r25, Y+20	; 0x14
    1946:	98 8b       	std	Y+16, r25	; 0x10
    1948:	8f 87       	std	Y+15, r24	; 0x0f
    194a:	8f 85       	ldd	r24, Y+15	; 0x0f
    194c:	98 89       	ldd	r25, Y+16	; 0x10
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <LCD_enu_Initialization+0xf4>
    1952:	98 8b       	std	Y+16, r25	; 0x10
    1954:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	61 e0       	ldi	r22, 0x01	; 1
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	62 e0       	ldi	r22, 0x02	; 2
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	63 e0       	ldi	r22, 0x03	; 3
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	67 e0       	ldi	r22, 0x07	; 7
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	66 e0       	ldi	r22, 0x06	; 6
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	65 e0       	ldi	r22, 0x05	; 5
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	64 e0       	ldi	r22, 0x04	; 4
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	61 e0       	ldi	r22, 0x01	; 1
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	67 e0       	ldi	r22, 0x07	; 7
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	66 e0       	ldi	r22, 0x06	; 6
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	65 e0       	ldi	r22, 0x05	; 5
    19be:	41 e0       	ldi	r20, 0x01	; 1
    19c0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	64 e0       	ldi	r22, 0x04	; 4
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	63 e0       	ldi	r22, 0x03	; 3
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	a0 e8       	ldi	r26, 0x80	; 128
    19de:	bf e3       	ldi	r27, 0x3F	; 63
    19e0:	8b 87       	std	Y+11, r24	; 0x0b
    19e2:	9c 87       	std	Y+12, r25	; 0x0c
    19e4:	ad 87       	std	Y+13, r26	; 0x0d
    19e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a e7       	ldi	r20, 0x7A	; 122
    19f6:	53 e4       	ldi	r21, 0x43	; 67
    19f8:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8f 83       	std	Y+7, r24	; 0x07
    1a02:	98 87       	std	Y+8, r25	; 0x08
    1a04:	a9 87       	std	Y+9, r26	; 0x09
    1a06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a08:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0a:	78 85       	ldd	r23, Y+8	; 0x08
    1a0c:	89 85       	ldd	r24, Y+9	; 0x09
    1a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 a5 03 	call	0x74a	; 0x74a <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 45 03 	call	0x68a	; 0x68a <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	4c f5       	brge	.+82     	; 0x1a94 <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <LCD_enu_Initialization+0x230>
    1a6c:	89 e1       	ldi	r24, 0x19	; 25
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9c 83       	std	Y+4, r25	; 0x04
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_enu_Initialization+0x21e>
    1a7c:	9c 83       	std	Y+4, r25	; 0x04
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <LCD_enu_Initialization+0x212>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	9a 83       	std	Y+2, r25	; 0x02
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <LCD_enu_Initialization+0x25a>
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	63 e0       	ldi	r22, 0x03	; 3
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    1ad0:	88 e2       	ldi	r24, 0x28	; 40
    1ad2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0F);
    1ae0:	8f e0       	ldi	r24, 0x0F	; 15
    1ae2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	61 e0       	ldi	r22, 0x01	; 1
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    1b00:	86 e0       	ldi	r24, 0x06	; 6
    1b02:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    1b06:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    1b08:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1b0a:	6d 96       	adiw	r28, 0x1d	; 29
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <LCD_enu_SendCommand+0x6>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    1b3c:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <LCD_enu_SendData+0x6>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	61 e0       	ldi	r22, 0x01	; 1
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    1b6a:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <LCD_enu_GoToPosition+0x6>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <LCD_enu_GoToPosition+0x8>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	8a 83       	std	Y+2, r24	; 0x02
    1b86:	6b 83       	std	Y+3, r22	; 0x03
    1b88:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	81 31       	cpi	r24, 0x11	; 17
    1b92:	88 f5       	brcc	.+98     	; 0x1bf6 <LCD_enu_GoToPosition+0x7e>
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	88 23       	and	r24, r24
    1b98:	71 f1       	breq	.+92     	; 0x1bf6 <LCD_enu_GoToPosition+0x7e>
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	83 30       	cpi	r24, 0x03	; 3
    1b9e:	58 f5       	brcc	.+86     	; 0x1bf6 <LCD_enu_GoToPosition+0x7e>
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	88 23       	and	r24, r24
    1ba4:	41 f1       	breq	.+80     	; 0x1bf6 <LCD_enu_GoToPosition+0x7e>
    1ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba8:	85 30       	cpi	r24, 0x05	; 5
    1baa:	28 f5       	brcc	.+74     	; 0x1bf6 <LCD_enu_GoToPosition+0x7e>
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	88 23       	and	r24, r24
    1bb0:	11 f1       	breq	.+68     	; 0x1bf6 <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9c 01       	movw	r18, r24
    1bc4:	21 50       	subi	r18, 0x01	; 1
    1bc6:	30 40       	sbci	r19, 0x00	; 0
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	88 2f       	mov	r24, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	82 0f       	add	r24, r18
    1bda:	93 1f       	adc	r25, r19
    1bdc:	82 95       	swap	r24
    1bde:	92 95       	swap	r25
    1be0:	90 7f       	andi	r25, 0xF0	; 240
    1be2:	98 27       	eor	r25, r24
    1be4:	80 7f       	andi	r24, 0xF0	; 240
    1be6:	98 27       	eor	r25, r24
    1be8:	98 2f       	mov	r25, r24
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	89 0f       	add	r24, r25
    1bee:	81 58       	subi	r24, 0x81	; 129
    1bf0:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1bf6:	82 e0       	ldi	r24, 0x02	; 2
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <LCD_enu_SendString+0x6>
    1c10:	0f 92       	push	r0
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	9b 83       	std	Y+3, r25	; 0x03
    1c18:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	c1 f0       	breq	.+48     	; 0x1c56 <LCD_enu_SendString+0x4c>
    1c26:	10 c0       	rjmp	.+32     	; 0x1c48 <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    1c32:	ea 81       	ldd	r30, Y+2	; 0x02
    1c34:	fb 81       	ldd	r31, Y+3	; 0x03
    1c36:	20 81       	ld	r18, Z
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	01 96       	adiw	r24, 0x01	; 1
    1c3e:	9b 83       	std	Y+3, r25	; 0x03
    1c40:	8a 83       	std	Y+2, r24	; 0x02
    1c42:	82 2f       	mov	r24, r18
    1c44:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    1c48:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4c:	80 81       	ld	r24, Z
    1c4e:	88 23       	and	r24, r24
    1c50:	59 f7       	brne	.-42     	; 0x1c28 <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    1c52:	19 82       	std	Y+1, r1	; 0x01
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <LCD_enu_ClearPage+0x6>
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	88 23       	and	r24, r24
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <LCD_enu_ClearPage+0x1a>
    1c80:	49 c0       	rjmp	.+146    	; 0x1d14 <LCD_enu_ClearPage+0xac>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	85 30       	cpi	r24, 0x05	; 5
    1c86:	08 f0       	brcs	.+2      	; 0x1c8a <LCD_enu_ClearPage+0x22>
    1c88:	45 c0       	rjmp	.+138    	; 0x1d14 <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    1c8a:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	07 96       	adiw	r24, 0x07	; 7
    1c9e:	82 95       	swap	r24
    1ca0:	92 95       	swap	r25
    1ca2:	90 7f       	andi	r25, 0xF0	; 240
    1ca4:	98 27       	eor	r25, r24
    1ca6:	80 7f       	andi	r24, 0xF0	; 240
    1ca8:	98 27       	eor	r25, r24
    1caa:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	61 e0       	ldi	r22, 0x01	; 1
    1cb2:	41 e0       	ldi	r20, 0x01	; 1
    1cb4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    1cb8:	19 82       	std	Y+1, r1	; 0x01
    1cba:	06 c0       	rjmp	.+12     	; 0x1cc8 <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    1cbc:	80 e2       	ldi	r24, 0x20	; 32
    1cbe:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	8f 5f       	subi	r24, 0xFF	; 255
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	80 31       	cpi	r24, 0x10	; 16
    1ccc:	b8 f3       	brcs	.-18     	; 0x1cbc <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	61 e0       	ldi	r22, 0x01	; 1
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0b 96       	adiw	r24, 0x0b	; 11
    1ce0:	82 95       	swap	r24
    1ce2:	92 95       	swap	r25
    1ce4:	90 7f       	andi	r25, 0xF0	; 240
    1ce6:	98 27       	eor	r25, r24
    1ce8:	80 7f       	andi	r24, 0xF0	; 240
    1cea:	98 27       	eor	r25, r24
    1cec:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    1cfa:	19 82       	std	Y+1, r1	; 0x01
    1cfc:	06 c0       	rjmp	.+12     	; 0x1d0a <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    1cfe:	80 e2       	ldi	r24, 0x20	; 32
    1d00:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	8f 5f       	subi	r24, 0xFF	; 255
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	80 31       	cpi	r24, 0x10	; 16
    1d0e:	b8 f3       	brcs	.-18     	; 0x1cfe <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    1d10:	1a 82       	std	Y+2, r1	; 0x02
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    1d26:	cf 92       	push	r12
    1d28:	ef 92       	push	r14
    1d2a:	0f 93       	push	r16
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	2e 97       	sbiw	r28, 0x0e	; 14
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
    1d44:	6f 83       	std	Y+7, r22	; 0x07
    1d46:	48 87       	std	Y+8, r20	; 0x08
    1d48:	29 87       	std	Y+9, r18	; 0x09
    1d4a:	0a 87       	std	Y+10, r16	; 0x0a
    1d4c:	eb 86       	std	Y+11, r14	; 0x0b
    1d4e:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <LCD_enu_DrawSpecialCharacter+0x38>
    1d5c:	b3 c0       	rjmp	.+358    	; 0x1ec4 <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    1d5e:	1b 82       	std	Y+3, r1	; 0x03
    1d60:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    1d62:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    1d64:	8f 81       	ldd	r24, Y+7	; 0x07
    1d66:	88 23       	and	r24, r24
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <LCD_enu_DrawSpecialCharacter+0x46>
    1d6a:	a9 c0       	rjmp	.+338    	; 0x1ebe <LCD_enu_DrawSpecialCharacter+0x198>
    1d6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d6e:	89 30       	cpi	r24, 0x09	; 9
    1d70:	08 f0       	brcs	.+2      	; 0x1d74 <LCD_enu_DrawSpecialCharacter+0x4e>
    1d72:	a5 c0       	rjmp	.+330    	; 0x1ebe <LCD_enu_DrawSpecialCharacter+0x198>
    1d74:	88 85       	ldd	r24, Y+8	; 0x08
    1d76:	88 30       	cpi	r24, 0x08	; 8
    1d78:	08 f0       	brcs	.+2      	; 0x1d7c <LCD_enu_DrawSpecialCharacter+0x56>
    1d7a:	a1 c0       	rjmp	.+322    	; 0x1ebe <LCD_enu_DrawSpecialCharacter+0x198>
    1d7c:	88 85       	ldd	r24, Y+8	; 0x08
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	88 e0       	ldi	r24, 0x08	; 8
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	ac 01       	movw	r20, r24
    1d88:	42 1b       	sub	r20, r18
    1d8a:	53 0b       	sbc	r21, r19
    1d8c:	9a 01       	movw	r18, r20
    1d8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	28 17       	cp	r18, r24
    1d96:	39 07       	cpc	r19, r25
    1d98:	0c f4       	brge	.+2      	; 0x1d9c <LCD_enu_DrawSpecialCharacter+0x76>
    1d9a:	91 c0       	rjmp	.+290    	; 0x1ebe <LCD_enu_DrawSpecialCharacter+0x198>
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	88 23       	and	r24, r24
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <LCD_enu_DrawSpecialCharacter+0x7e>
    1da2:	8d c0       	rjmp	.+282    	; 0x1ebe <LCD_enu_DrawSpecialCharacter+0x198>
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	08 f0       	brcs	.+2      	; 0x1dac <LCD_enu_DrawSpecialCharacter+0x86>
    1daa:	89 c0       	rjmp	.+274    	; 0x1ebe <LCD_enu_DrawSpecialCharacter+0x198>
    1dac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dae:	88 23       	and	r24, r24
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <LCD_enu_DrawSpecialCharacter+0x8e>
    1db2:	85 c0       	rjmp	.+266    	; 0x1ebe <LCD_enu_DrawSpecialCharacter+0x198>
    1db4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1db6:	81 31       	cpi	r24, 0x11	; 17
    1db8:	08 f0       	brcs	.+2      	; 0x1dbc <LCD_enu_DrawSpecialCharacter+0x96>
    1dba:	81 c0       	rjmp	.+258    	; 0x1ebe <LCD_enu_DrawSpecialCharacter+0x198>
    1dbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dbe:	82 30       	cpi	r24, 0x02	; 2
    1dc0:	08 f0       	brcs	.+2      	; 0x1dc4 <LCD_enu_DrawSpecialCharacter+0x9e>
    1dc2:	7d c0       	rjmp	.+250    	; 0x1ebe <LCD_enu_DrawSpecialCharacter+0x198>
    1dc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dc6:	85 30       	cpi	r24, 0x05	; 5
    1dc8:	08 f0       	brcs	.+2      	; 0x1dcc <LCD_enu_DrawSpecialCharacter+0xa6>
    1dca:	79 c0       	rjmp	.+242    	; 0x1ebe <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    1dcc:	19 82       	std	Y+1, r1	; 0x01
    1dce:	19 c0       	rjmp	.+50     	; 0x1e02 <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	82 0f       	add	r24, r18
    1ddc:	93 1f       	adc	r25, r19
    1dde:	9b 83       	std	Y+3, r25	; 0x03
    1de0:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	98 2f       	mov	r25, r24
    1de6:	96 95       	lsr	r25
    1de8:	96 95       	lsr	r25
    1dea:	96 95       	lsr	r25
    1dec:	88 85       	ldd	r24, Y+8	; 0x08
    1dee:	29 2f       	mov	r18, r25
    1df0:	28 0f       	add	r18, r24
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	62 2f       	mov	r22, r18
    1df8:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	88 5f       	subi	r24, 0xF8	; 248
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	8f 81       	ldd	r24, Y+7	; 0x07
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	28 17       	cp	r18, r24
    1e1c:	39 07       	cpc	r19, r25
    1e1e:	c4 f2       	brlt	.-80     	; 0x1dd0 <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    1e2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	3e 87       	std	Y+14, r19	; 0x0e
    1e32:	2d 87       	std	Y+13, r18	; 0x0d
    1e34:	4d 85       	ldd	r20, Y+13	; 0x0d
    1e36:	5e 85       	ldd	r21, Y+14	; 0x0e
    1e38:	41 15       	cp	r20, r1
    1e3a:	51 05       	cpc	r21, r1
    1e3c:	49 f0       	breq	.+18     	; 0x1e50 <LCD_enu_DrawSpecialCharacter+0x12a>
    1e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	91 05       	cpc	r25, r1
    1e46:	39 f4       	brne	.+14     	; 0x1e56 <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    1e48:	86 e0       	ldi	r24, 0x06	; 6
    1e4a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    1e50:	84 e0       	ldi	r24, 0x04	; 4
    1e52:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	61 e0       	ldi	r22, 0x01	; 1
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    1e60:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9c 01       	movw	r18, r24
    1e68:	21 50       	subi	r18, 0x01	; 1
    1e6a:	30 40       	sbci	r19, 0x00	; 0
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	82 0f       	add	r24, r18
    1e7e:	93 1f       	adc	r25, r19
    1e80:	82 95       	swap	r24
    1e82:	92 95       	swap	r25
    1e84:	90 7f       	andi	r25, 0xF0	; 240
    1e86:	98 27       	eor	r25, r24
    1e88:	80 7f       	andi	r24, 0xF0	; 240
    1e8a:	98 27       	eor	r25, r24
    1e8c:	98 2f       	mov	r25, r24
    1e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e90:	89 0f       	add	r24, r25
    1e92:	81 58       	subi	r24, 0x81	; 129
    1e94:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    1ea2:	19 82       	std	Y+1, r1	; 0x01
    1ea4:	06 c0       	rjmp	.+12     	; 0x1eb2 <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	99 81       	ldd	r25, Y+1	; 0x01
    1eb4:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb6:	98 17       	cp	r25, r24
    1eb8:	b0 f3       	brcs	.-20     	; 0x1ea6 <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    1eba:	1c 82       	std	Y+4, r1	; 0x04
    1ebc:	05 c0       	rjmp	.+10     	; 0x1ec8 <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	8c 83       	std	Y+4, r24	; 0x04
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    1ec4:	83 e0       	ldi	r24, 0x03	; 3
    1ec6:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    1ec8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1eca:	2e 96       	adiw	r28, 0x0e	; 14
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	0f 91       	pop	r16
    1edc:	ef 90       	pop	r14
    1ede:	cf 90       	pop	r12
    1ee0:	08 95       	ret

00001ee2 <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    1ee2:	0f 93       	push	r16
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	2e 97       	sbiw	r28, 0x0e	; 14
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	68 87       	std	Y+8, r22	; 0x08
    1efa:	79 87       	std	Y+9, r23	; 0x09
    1efc:	8a 87       	std	Y+10, r24	; 0x0a
    1efe:	9b 87       	std	Y+11, r25	; 0x0b
    1f00:	4c 87       	std	Y+12, r20	; 0x0c
    1f02:	2d 87       	std	Y+13, r18	; 0x0d
    1f04:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    1f0a:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    1f0c:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    1f0e:	88 85       	ldd	r24, Y+8	; 0x08
    1f10:	99 85       	ldd	r25, Y+9	; 0x09
    1f12:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f14:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f16:	bb 23       	and	r27, r27
    1f18:	8c f4       	brge	.+34     	; 0x1f3c <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    1f1e:	88 85       	ldd	r24, Y+8	; 0x08
    1f20:	99 85       	ldd	r25, Y+9	; 0x09
    1f22:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f24:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f26:	b0 95       	com	r27
    1f28:	a0 95       	com	r26
    1f2a:	90 95       	com	r25
    1f2c:	81 95       	neg	r24
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	af 4f       	sbci	r26, 0xFF	; 255
    1f32:	bf 4f       	sbci	r27, 0xFF	; 255
    1f34:	88 87       	std	Y+8, r24	; 0x08
    1f36:	99 87       	std	Y+9, r25	; 0x09
    1f38:	aa 87       	std	Y+10, r26	; 0x0a
    1f3a:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    1f3c:	88 85       	ldd	r24, Y+8	; 0x08
    1f3e:	99 85       	ldd	r25, Y+9	; 0x09
    1f40:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f42:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f44:	8c 83       	std	Y+4, r24	; 0x04
    1f46:	9d 83       	std	Y+5, r25	; 0x05
    1f48:	ae 83       	std	Y+6, r26	; 0x06
    1f4a:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	8f 5f       	subi	r24, 0xFF	; 255
    1f50:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	9d 81       	ldd	r25, Y+5	; 0x05
    1f56:	ae 81       	ldd	r26, Y+6	; 0x06
    1f58:	bf 81       	ldd	r27, Y+7	; 0x07
    1f5a:	2a e0       	ldi	r18, 0x0A	; 10
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 46 19 	call	0x328c	; 0x328c <__divmodsi4>
    1f6a:	da 01       	movw	r26, r20
    1f6c:	c9 01       	movw	r24, r18
    1f6e:	8c 83       	std	Y+4, r24	; 0x04
    1f70:	9d 83       	std	Y+5, r25	; 0x05
    1f72:	ae 83       	std	Y+6, r26	; 0x06
    1f74:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    1f76:	8c 81       	ldd	r24, Y+4	; 0x04
    1f78:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7a:	ae 81       	ldd	r26, Y+6	; 0x06
    1f7c:	bf 81       	ldd	r27, Y+7	; 0x07
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	a1 05       	cpc	r26, r1
    1f82:	b1 05       	cpc	r27, r1
    1f84:	19 f7       	brne	.-58     	; 0x1f4c <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    1f86:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f88:	88 23       	and	r24, r24
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <LCD_enu_WriteIntegerNum+0xac>
    1f8c:	6b c0       	rjmp	.+214    	; 0x2064 <LCD_enu_WriteIntegerNum+0x182>
    1f8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	08 f0       	brcs	.+2      	; 0x1f96 <LCD_enu_WriteIntegerNum+0xb4>
    1f94:	67 c0       	rjmp	.+206    	; 0x2064 <LCD_enu_WriteIntegerNum+0x182>
    1f96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f98:	88 23       	and	r24, r24
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <LCD_enu_WriteIntegerNum+0xbc>
    1f9c:	63 c0       	rjmp	.+198    	; 0x2064 <LCD_enu_WriteIntegerNum+0x182>
    1f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa0:	81 31       	cpi	r24, 0x11	; 17
    1fa2:	08 f0       	brcs	.+2      	; 0x1fa6 <LCD_enu_WriteIntegerNum+0xc4>
    1fa4:	5f c0       	rjmp	.+190    	; 0x2064 <LCD_enu_WriteIntegerNum+0x182>
    1fa6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fa8:	85 30       	cpi	r24, 0x05	; 5
    1faa:	08 f0       	brcs	.+2      	; 0x1fae <LCD_enu_WriteIntegerNum+0xcc>
    1fac:	5b c0       	rjmp	.+182    	; 0x2064 <LCD_enu_WriteIntegerNum+0x182>
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	81 31       	cpi	r24, 0x11	; 17
    1fb2:	08 f0       	brcs	.+2      	; 0x1fb6 <LCD_enu_WriteIntegerNum+0xd4>
    1fb4:	57 c0       	rjmp	.+174    	; 0x2064 <LCD_enu_WriteIntegerNum+0x182>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    1fb6:	88 85       	ldd	r24, Y+8	; 0x08
    1fb8:	99 85       	ldd	r25, Y+9	; 0x09
    1fba:	aa 85       	ldd	r26, Y+10	; 0x0a
    1fbc:	bb 85       	ldd	r27, Y+11	; 0x0b
    1fbe:	8c 83       	std	Y+4, r24	; 0x04
    1fc0:	9d 83       	std	Y+5, r25	; 0x05
    1fc2:	ae 83       	std	Y+6, r26	; 0x06
    1fc4:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	04 96       	adiw	r24, 0x04	; 4
    1fca:	0e 94 9d 14 	call	0x293a	; 0x293a <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	61 e0       	ldi	r22, 0x01	; 1
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	61 e0       	ldi	r22, 0x01	; 1
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	88 23       	and	r24, r24
    1fe6:	51 f1       	breq	.+84     	; 0x203c <LCD_enu_WriteIntegerNum+0x15a>
        {
            enu_PassByteAndLatch('-');
    1fe8:	8d e2       	ldi	r24, 0x2D	; 45
    1fea:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
    1fee:	26 c0       	rjmp	.+76     	; 0x203c <LCD_enu_WriteIntegerNum+0x15a>
        }
        //Printing one digit at a time
        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    1ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff4:	ae 81       	ldd	r26, Y+6	; 0x06
    1ff6:	bf 81       	ldd	r27, Y+7	; 0x07
    1ff8:	2a e0       	ldi	r18, 0x0A	; 10
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 46 19 	call	0x328c	; 0x328c <__divmodsi4>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	80 5d       	subi	r24, 0xD0	; 208
    200e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    2012:	8c 81       	ldd	r24, Y+4	; 0x04
    2014:	9d 81       	ldd	r25, Y+5	; 0x05
    2016:	ae 81       	ldd	r26, Y+6	; 0x06
    2018:	bf 81       	ldd	r27, Y+7	; 0x07
    201a:	2a e0       	ldi	r18, 0x0A	; 10
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 46 19 	call	0x328c	; 0x328c <__divmodsi4>
    202a:	da 01       	movw	r26, r20
    202c:	c9 01       	movw	r24, r18
    202e:	8c 83       	std	Y+4, r24	; 0x04
    2030:	9d 83       	std	Y+5, r25	; 0x05
    2032:	ae 83       	std	Y+6, r26	; 0x06
    2034:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	81 50       	subi	r24, 0x01	; 1
    203a:	8a 83       	std	Y+2, r24	; 0x02
        if(local_u8_NegativeFlag)
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time
        while (Local_u32_TempVariable)
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	9d 81       	ldd	r25, Y+5	; 0x05
    2040:	ae 81       	ldd	r26, Y+6	; 0x06
    2042:	bf 81       	ldd	r27, Y+7	; 0x07
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	a1 05       	cpc	r26, r1
    2048:	b1 05       	cpc	r27, r1
    204a:	91 f6       	brne	.-92     	; 0x1ff0 <LCD_enu_WriteIntegerNum+0x10e>
    204c:	06 c0       	rjmp	.+12     	; 0x205a <LCD_enu_WriteIntegerNum+0x178>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    204e:	80 e3       	ldi	r24, 0x30	; 48
    2050:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	81 50       	subi	r24, 0x01	; 1
    2058:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	88 23       	and	r24, r24
    205e:	b9 f7       	brne	.-18     	; 0x204e <LCD_enu_WriteIntegerNum+0x16c>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    2060:	1b 82       	std	Y+3, r1	; 0x03
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <LCD_enu_WriteIntegerNum+0x186>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
}
    206a:	2e 96       	adiw	r28, 0x0e	; 14
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	0f 91       	pop	r16
    207c:	08 95       	ret

0000207e <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    207e:	0f 93       	push	r16
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	63 97       	sbiw	r28, 0x13	; 19
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	6d 87       	std	Y+13, r22	; 0x0d
    2096:	7e 87       	std	Y+14, r23	; 0x0e
    2098:	8f 87       	std	Y+15, r24	; 0x0f
    209a:	98 8b       	std	Y+16, r25	; 0x10
    209c:	49 8b       	std	Y+17, r20	; 0x11
    209e:	2a 8b       	std	Y+18, r18	; 0x12
    20a0:	0b 8b       	std	Y+19, r16	; 0x13
    u8 Local_u8_ErrorFlag = ES_NOK;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	88 87       	std	Y+8, r24	; 0x08

    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    20a6:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = 0;
    20a8:	1a 82       	std	Y+2, r1	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    20aa:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    20ac:	6d 85       	ldd	r22, Y+13	; 0x0d
    20ae:	7e 85       	ldd	r23, Y+14	; 0x0e
    20b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b2:	98 89       	ldd	r25, Y+16	; 0x10
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	50 e0       	ldi	r21, 0x00	; 0
    20bc:	0e 94 a5 03 	call	0x74a	; 0x74a <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	5c f4       	brge	.+22     	; 0x20da <LCD_enu_WriteFloatNum+0x5c>
    {
        local_u8_NegativeFlag = True;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    20c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    20cc:	af 85       	ldd	r26, Y+15	; 0x0f
    20ce:	b8 89       	ldd	r27, Y+16	; 0x10
    20d0:	b0 58       	subi	r27, 0x80	; 128
    20d2:	8d 87       	std	Y+13, r24	; 0x0d
    20d4:	9e 87       	std	Y+14, r25	; 0x0e
    20d6:	af 87       	std	Y+15, r26	; 0x0f
    20d8:	b8 8b       	std	Y+16, r27	; 0x10
    }


    Local_u32_WholeDigits = Copy_f32_Num;
    20da:	6d 85       	ldd	r22, Y+13	; 0x0d
    20dc:	7e 85       	ldd	r23, Y+14	; 0x0e
    20de:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e0:	98 89       	ldd	r25, Y+16	; 0x10
    20e2:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	89 87       	std	Y+9, r24	; 0x09
    20ec:	9a 87       	std	Y+10, r25	; 0x0a
    20ee:	ab 87       	std	Y+11, r26	; 0x0b
    20f0:	bc 87       	std	Y+12, r27	; 0x0c

    Local_f32_DecimalDigits = Copy_f32_Num - (f32)(Local_u32_WholeDigits);
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	ab 85       	ldd	r26, Y+11	; 0x0b
    20f8:	bc 85       	ldd	r27, Y+12	; 0x0c
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 29 04 	call	0x852	; 0x852 <__floatunsisf>
    2102:	9b 01       	movw	r18, r22
    2104:	ac 01       	movw	r20, r24
    2106:	6d 85       	ldd	r22, Y+13	; 0x0d
    2108:	7e 85       	ldd	r23, Y+14	; 0x0e
    210a:	8f 85       	ldd	r24, Y+15	; 0x0f
    210c:	98 89       	ldd	r25, Y+16	; 0x10
    210e:	0e 94 bd 01 	call	0x37a	; 0x37a <__subsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	8c 83       	std	Y+4, r24	; 0x04
    2118:	9d 83       	std	Y+5, r25	; 0x05
    211a:	ae 83       	std	Y+6, r26	; 0x06
    211c:	bf 83       	std	Y+7, r27	; 0x07
   
    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	8b 83       	std	Y+3, r24	; 0x03
        Local_u32_WholeDigits  /= 10;
    2124:	89 85       	ldd	r24, Y+9	; 0x09
    2126:	9a 85       	ldd	r25, Y+10	; 0x0a
    2128:	ab 85       	ldd	r26, Y+11	; 0x0b
    212a:	bc 85       	ldd	r27, Y+12	; 0x0c
    212c:	2a e0       	ldi	r18, 0x0A	; 10
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	0e 94 24 19 	call	0x3248	; 0x3248 <__udivmodsi4>
    213c:	da 01       	movw	r26, r20
    213e:	c9 01       	movw	r24, r18
    2140:	89 87       	std	Y+9, r24	; 0x09
    2142:	9a 87       	std	Y+10, r25	; 0x0a
    2144:	ab 87       	std	Y+11, r26	; 0x0b
    2146:	bc 87       	std	Y+12, r27	; 0x0c

    }while(Local_u32_WholeDigits);
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	ab 85       	ldd	r26, Y+11	; 0x0b
    214e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	a1 05       	cpc	r26, r1
    2154:	b1 05       	cpc	r27, r1
    2156:	19 f7       	brne	.-58     	; 0x211e <LCD_enu_WriteFloatNum+0xa0>

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	61 e0       	ldi	r22, 0x01	; 1
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    2162:	19 86       	std	Y+9, r1	; 0x09
    2164:	1a 86       	std	Y+10, r1	; 0x0a
    2166:	1b 86       	std	Y+11, r1	; 0x0b
    2168:	1c 86       	std	Y+12, r1	; 0x0c
    216a:	1f c0       	rjmp	.+62     	; 0x21aa <LCD_enu_WriteFloatNum+0x12c>
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    {
        Local_f32_DecimalDigits *= 10;
    216c:	6c 81       	ldd	r22, Y+4	; 0x04
    216e:	7d 81       	ldd	r23, Y+5	; 0x05
    2170:	8e 81       	ldd	r24, Y+6	; 0x06
    2172:	9f 81       	ldd	r25, Y+7	; 0x07
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8c 83       	std	Y+4, r24	; 0x04
    2186:	9d 83       	std	Y+5, r25	; 0x05
    2188:	ae 83       	std	Y+6, r26	; 0x06
    218a:	bf 83       	std	Y+7, r27	; 0x07
        Local_u32_WholeDigits = Local_f32_DecimalDigits;
    218c:	6c 81       	ldd	r22, Y+4	; 0x04
    218e:	7d 81       	ldd	r23, Y+5	; 0x05
    2190:	8e 81       	ldd	r24, Y+6	; 0x06
    2192:	9f 81       	ldd	r25, Y+7	; 0x07
    2194:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	89 87       	std	Y+9, r24	; 0x09
    219e:	9a 87       	std	Y+10, r25	; 0x0a
    21a0:	ab 87       	std	Y+11, r26	; 0x0b
    21a2:	bc 87       	std	Y+12, r27	; 0x0c
        Local_u8_DecimalDigitCount++;
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	8f 5f       	subi	r24, 0xFF	; 255
    21a8:	8a 83       	std	Y+2, r24	; 0x02

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    21aa:	89 85       	ldd	r24, Y+9	; 0x09
    21ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    21b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 29 04 	call	0x852	; 0x852 <__floatunsisf>
    21ba:	9b 01       	movw	r18, r22
    21bc:	ac 01       	movw	r20, r24
    21be:	6c 81       	ldd	r22, Y+4	; 0x04
    21c0:	7d 81       	ldd	r23, Y+5	; 0x05
    21c2:	8e 81       	ldd	r24, Y+6	; 0x06
    21c4:	9f 81       	ldd	r25, Y+7	; 0x07
    21c6:	0e 94 bd 01 	call	0x37a	; 0x37a <__subsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	2c ea       	ldi	r18, 0xAC	; 172
    21d4:	35 ec       	ldi	r19, 0xC5	; 197
    21d6:	47 e2       	ldi	r20, 0x27	; 39
    21d8:	57 e3       	ldi	r21, 0x37	; 55
    21da:	0e 94 75 03 	call	0x6ea	; 0x6ea <__gesf2>
    21de:	88 23       	and	r24, r24
    21e0:	2c f6       	brge	.-118    	; 0x216c <LCD_enu_WriteFloatNum+0xee>
        Local_u8_DecimalDigitCount++;
        
    
    }

    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && ((Local_u32_WholeDigits + Local_u8_DecimalDigitCount) <= LCD_MAX_INTEGER_LENGTH))
    21e2:	89 89       	ldd	r24, Y+17	; 0x11
    21e4:	88 23       	and	r24, r24
    21e6:	09 f4       	brne	.+2      	; 0x21ea <LCD_enu_WriteFloatNum+0x16c>
    21e8:	fd c0       	rjmp	.+506    	; 0x23e4 <LCD_enu_WriteFloatNum+0x366>
    21ea:	89 89       	ldd	r24, Y+17	; 0x11
    21ec:	83 30       	cpi	r24, 0x03	; 3
    21ee:	08 f0       	brcs	.+2      	; 0x21f2 <LCD_enu_WriteFloatNum+0x174>
    21f0:	f9 c0       	rjmp	.+498    	; 0x23e4 <LCD_enu_WriteFloatNum+0x366>
    21f2:	8a 89       	ldd	r24, Y+18	; 0x12
    21f4:	88 23       	and	r24, r24
    21f6:	09 f4       	brne	.+2      	; 0x21fa <LCD_enu_WriteFloatNum+0x17c>
    21f8:	f5 c0       	rjmp	.+490    	; 0x23e4 <LCD_enu_WriteFloatNum+0x366>
    21fa:	8a 89       	ldd	r24, Y+18	; 0x12
    21fc:	81 31       	cpi	r24, 0x11	; 17
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <LCD_enu_WriteFloatNum+0x184>
    2200:	f1 c0       	rjmp	.+482    	; 0x23e4 <LCD_enu_WriteFloatNum+0x366>
    2202:	8b 89       	ldd	r24, Y+19	; 0x13
    2204:	85 30       	cpi	r24, 0x05	; 5
    2206:	08 f0       	brcs	.+2      	; 0x220a <LCD_enu_WriteFloatNum+0x18c>
    2208:	ed c0       	rjmp	.+474    	; 0x23e4 <LCD_enu_WriteFloatNum+0x366>
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	89 85       	ldd	r24, Y+9	; 0x09
    2216:	9a 85       	ldd	r25, Y+10	; 0x0a
    2218:	ab 85       	ldd	r26, Y+11	; 0x0b
    221a:	bc 85       	ldd	r27, Y+12	; 0x0c
    221c:	82 0f       	add	r24, r18
    221e:	93 1f       	adc	r25, r19
    2220:	a4 1f       	adc	r26, r20
    2222:	b5 1f       	adc	r27, r21
    2224:	81 31       	cpi	r24, 0x11	; 17
    2226:	91 05       	cpc	r25, r1
    2228:	a1 05       	cpc	r26, r1
    222a:	b1 05       	cpc	r27, r1
    222c:	08 f0       	brcs	.+2      	; 0x2230 <LCD_enu_WriteFloatNum+0x1b2>
    222e:	da c0       	rjmp	.+436    	; 0x23e4 <LCD_enu_WriteFloatNum+0x366>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    223a:	8b 89       	ldd	r24, Y+19	; 0x13
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9c 01       	movw	r18, r24
    2242:	21 50       	subi	r18, 0x01	; 1
    2244:	30 40       	sbci	r19, 0x00	; 0
    2246:	89 89       	ldd	r24, Y+17	; 0x11
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	82 0f       	add	r24, r18
    2258:	93 1f       	adc	r25, r19
    225a:	82 95       	swap	r24
    225c:	92 95       	swap	r25
    225e:	90 7f       	andi	r25, 0xF0	; 240
    2260:	98 27       	eor	r25, r24
    2262:	80 7f       	andi	r24, 0xF0	; 240
    2264:	98 27       	eor	r25, r24
    2266:	98 2f       	mov	r25, r24
    2268:	8a 89       	ldd	r24, Y+18	; 0x12
    226a:	89 0f       	add	r24, r25
    226c:	81 58       	subi	r24, 0x81	; 129
    226e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
        
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	41 e0       	ldi	r20, 0x01	; 1
    2278:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	88 23       	and	r24, r24
    2280:	19 f0       	breq	.+6      	; 0x2288 <LCD_enu_WriteFloatNum+0x20a>
        {
            enu_PassByteAndLatch('-');
    2282:	8d e2       	ldi	r24, 0x2D	; 45
    2284:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
        }

        //A] Printing whole digits 
        Local_u32_WholeDigits = Copy_f32_Num;
    2288:	6d 85       	ldd	r22, Y+13	; 0x0d
    228a:	7e 85       	ldd	r23, Y+14	; 0x0e
    228c:	8f 85       	ldd	r24, Y+15	; 0x0f
    228e:	98 89       	ldd	r25, Y+16	; 0x10
    2290:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	89 87       	std	Y+9, r24	; 0x09
    229a:	9a 87       	std	Y+10, r25	; 0x0a
    229c:	ab 87       	std	Y+11, r26	; 0x0b
    229e:	bc 87       	std	Y+12, r27	; 0x0c
        enu_ReverseInteger(&Local_u32_WholeDigits);
    22a0:	ce 01       	movw	r24, r28
    22a2:	09 96       	adiw	r24, 0x09	; 9
    22a4:	0e 94 9d 14 	call	0x293a	; 0x293a <enu_ReverseInteger>


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	61 e0       	ldi	r22, 0x01	; 1
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    22b2:	26 c0       	rjmp	.+76     	; 0x2300 <LCD_enu_WriteFloatNum+0x282>
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	ab 85       	ldd	r26, Y+11	; 0x0b
    22ba:	bc 85       	ldd	r27, Y+12	; 0x0c
    22bc:	2a e0       	ldi	r18, 0x0A	; 10
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 24 19 	call	0x3248	; 0x3248 <__udivmodsi4>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	80 5d       	subi	r24, 0xD0	; 208
    22d2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
            Local_u32_WholeDigits /= 10;
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22da:	ab 85       	ldd	r26, Y+11	; 0x0b
    22dc:	bc 85       	ldd	r27, Y+12	; 0x0c
    22de:	2a e0       	ldi	r18, 0x0A	; 10
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 24 19 	call	0x3248	; 0x3248 <__udivmodsi4>
    22ee:	da 01       	movw	r26, r20
    22f0:	c9 01       	movw	r24, r18
    22f2:	89 87       	std	Y+9, r24	; 0x09
    22f4:	9a 87       	std	Y+10, r25	; 0x0a
    22f6:	ab 87       	std	Y+11, r26	; 0x0b
    22f8:	bc 87       	std	Y+12, r27	; 0x0c
            Local_u8_WholeDigitCount--;
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	81 50       	subi	r24, 0x01	; 1
    22fe:	8b 83       	std	Y+3, r24	; 0x03


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	ab 85       	ldd	r26, Y+11	; 0x0b
    2306:	bc 85       	ldd	r27, Y+12	; 0x0c
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	a1 05       	cpc	r26, r1
    230c:	b1 05       	cpc	r27, r1
    230e:	91 f6       	brne	.-92     	; 0x22b4 <LCD_enu_WriteFloatNum+0x236>
    2310:	06 c0       	rjmp	.+12     	; 0x231e <LCD_enu_WriteFloatNum+0x2a0>
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    2312:	80 e3       	ldi	r24, 0x30	; 48
    2314:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
            Local_u8_WholeDigitCount--;
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	81 50       	subi	r24, 0x01	; 1
    231c:	8b 83       	std	Y+3, r24	; 0x03
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
            Local_u32_WholeDigits /= 10;
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	88 23       	and	r24, r24
    2322:	b9 f7       	brne	.-18     	; 0x2312 <LCD_enu_WriteFloatNum+0x294>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    2324:	6c 81       	ldd	r22, Y+4	; 0x04
    2326:	7d 81       	ldd	r23, Y+5	; 0x05
    2328:	8e 81       	ldd	r24, Y+6	; 0x06
    232a:	9f 81       	ldd	r25, Y+7	; 0x07
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	0e 94 15 03 	call	0x62a	; 0x62a <__nesf2>
    2338:	88 23       	and	r24, r24
    233a:	09 f4       	brne	.+2      	; 0x233e <LCD_enu_WriteFloatNum+0x2c0>
    233c:	51 c0       	rjmp	.+162    	; 0x23e0 <LCD_enu_WriteFloatNum+0x362>
        {
            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	61 e0       	ldi	r22, 0x01	; 1
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>

            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    2348:	8e e2       	ldi	r24, 0x2E	; 46
    234a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>

            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
    234e:	6c 81       	ldd	r22, Y+4	; 0x04
    2350:	7d 81       	ldd	r23, Y+5	; 0x05
    2352:	8e 81       	ldd	r24, Y+6	; 0x06
    2354:	9f 81       	ldd	r25, Y+7	; 0x07
    2356:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	89 87       	std	Y+9, r24	; 0x09
    2360:	9a 87       	std	Y+10, r25	; 0x0a
    2362:	ab 87       	std	Y+11, r26	; 0x0b
    2364:	bc 87       	std	Y+12, r27	; 0x0c
            enu_ReverseInteger(&Local_u32_WholeDigits);
    2366:	ce 01       	movw	r24, r28
    2368:	09 96       	adiw	r24, 0x09	; 9
    236a:	0e 94 9d 14 	call	0x293a	; 0x293a <enu_ReverseInteger>
    236e:	26 c0       	rjmp	.+76     	; 0x23bc <LCD_enu_WriteFloatNum+0x33e>
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
            {
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    2370:	89 85       	ldd	r24, Y+9	; 0x09
    2372:	9a 85       	ldd	r25, Y+10	; 0x0a
    2374:	ab 85       	ldd	r26, Y+11	; 0x0b
    2376:	bc 85       	ldd	r27, Y+12	; 0x0c
    2378:	2a e0       	ldi	r18, 0x0A	; 10
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e0       	ldi	r20, 0x00	; 0
    237e:	50 e0       	ldi	r21, 0x00	; 0
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 24 19 	call	0x3248	; 0x3248 <__udivmodsi4>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	80 5d       	subi	r24, 0xD0	; 208
    238e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
                Local_u32_WholeDigits /= 10;
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	ab 85       	ldd	r26, Y+11	; 0x0b
    2398:	bc 85       	ldd	r27, Y+12	; 0x0c
    239a:	2a e0       	ldi	r18, 0x0A	; 10
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 24 19 	call	0x3248	; 0x3248 <__udivmodsi4>
    23aa:	da 01       	movw	r26, r20
    23ac:	c9 01       	movw	r24, r18
    23ae:	89 87       	std	Y+9, r24	; 0x09
    23b0:	9a 87       	std	Y+10, r25	; 0x0a
    23b2:	ab 87       	std	Y+11, r26	; 0x0b
    23b4:	bc 87       	std	Y+12, r27	; 0x0c
                Local_u8_DecimalDigitCount--;
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	81 50       	subi	r24, 0x01	; 1
    23ba:	8a 83       	std	Y+2, r24	; 0x02
            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
            enu_ReverseInteger(&Local_u32_WholeDigits);
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
    23bc:	89 85       	ldd	r24, Y+9	; 0x09
    23be:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    23c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	a1 05       	cpc	r26, r1
    23c8:	b1 05       	cpc	r27, r1
    23ca:	91 f6       	brne	.-92     	; 0x2370 <LCD_enu_WriteFloatNum+0x2f2>
    23cc:	06 c0       	rjmp	.+12     	; 0x23da <LCD_enu_WriteFloatNum+0x35c>
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    23ce:	80 e3       	ldi	r24, 0x30	; 48
    23d0:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	81 50       	subi	r24, 0x01	; 1
    23d8:	8a 83       	std	Y+2, r24	; 0x02
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
                Local_u32_WholeDigits /= 10;
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	88 23       	and	r24, r24
    23de:	b9 f7       	brne	.-18     	; 0x23ce <LCD_enu_WriteFloatNum+0x350>
            
            

        }

        Local_u8_ErrorFlag = ES_OK;
    23e0:	18 86       	std	Y+8, r1	; 0x08
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <LCD_enu_WriteFloatNum+0x36a>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	88 87       	std	Y+8, r24	; 0x08
    }

    return Local_u8_ErrorFlag;
    23e8:	88 85       	ldd	r24, Y+8	; 0x08

}
    23ea:	63 96       	adiw	r28, 0x13	; 19
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	0f 91       	pop	r16
    23fc:	08 95       	ret

000023fe <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	ac 97       	sbiw	r28, 0x2c	; 44
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	62 e0       	ldi	r22, 0x02	; 2
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	63 e0       	ldi	r22, 0x03	; 3
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    242c:	8c a5       	ldd	r24, Y+44	; 0x2c
    242e:	98 2f       	mov	r25, r24
    2430:	99 1f       	adc	r25, r25
    2432:	99 27       	eor	r25, r25
    2434:	99 1f       	adc	r25, r25
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	67 e0       	ldi	r22, 0x07	; 7
    243a:	49 2f       	mov	r20, r25
    243c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    2440:	8c a5       	ldd	r24, Y+44	; 0x2c
    2442:	82 95       	swap	r24
    2444:	86 95       	lsr	r24
    2446:	86 95       	lsr	r24
    2448:	83 70       	andi	r24, 0x03	; 3
    244a:	98 2f       	mov	r25, r24
    244c:	91 70       	andi	r25, 0x01	; 1
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	66 e0       	ldi	r22, 0x06	; 6
    2452:	49 2f       	mov	r20, r25
    2454:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    2458:	8c a5       	ldd	r24, Y+44	; 0x2c
    245a:	82 95       	swap	r24
    245c:	86 95       	lsr	r24
    245e:	87 70       	andi	r24, 0x07	; 7
    2460:	98 2f       	mov	r25, r24
    2462:	91 70       	andi	r25, 0x01	; 1
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	65 e0       	ldi	r22, 0x05	; 5
    2468:	49 2f       	mov	r20, r25
    246a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    246e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2470:	82 95       	swap	r24
    2472:	8f 70       	andi	r24, 0x0F	; 15
    2474:	98 2f       	mov	r25, r24
    2476:	91 70       	andi	r25, 0x01	; 1
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	64 e0       	ldi	r22, 0x04	; 4
    247c:	49 2f       	mov	r20, r25
    247e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	63 e0       	ldi	r22, 0x03	; 3
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a0 e8       	ldi	r26, 0x80	; 128
    2492:	bf e3       	ldi	r27, 0x3F	; 63
    2494:	8f a3       	std	Y+39, r24	; 0x27
    2496:	98 a7       	std	Y+40, r25	; 0x28
    2498:	a9 a7       	std	Y+41, r26	; 0x29
    249a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249c:	6f a1       	ldd	r22, Y+39	; 0x27
    249e:	78 a5       	ldd	r23, Y+40	; 0x28
    24a0:	89 a5       	ldd	r24, Y+41	; 0x29
    24a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	4a e7       	ldi	r20, 0x7A	; 122
    24aa:	53 e4       	ldi	r21, 0x43	; 67
    24ac:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	8b a3       	std	Y+35, r24	; 0x23
    24b6:	9c a3       	std	Y+36, r25	; 0x24
    24b8:	ad a3       	std	Y+37, r26	; 0x25
    24ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24bc:	6b a1       	ldd	r22, Y+35	; 0x23
    24be:	7c a1       	ldd	r23, Y+36	; 0x24
    24c0:	8d a1       	ldd	r24, Y+37	; 0x25
    24c2:	9e a1       	ldd	r25, Y+38	; 0x26
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e8       	ldi	r20, 0x80	; 128
    24ca:	5f e3       	ldi	r21, 0x3F	; 63
    24cc:	0e 94 a5 03 	call	0x74a	; 0x74a <__ltsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	2c f4       	brge	.+10     	; 0x24de <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	9a a3       	std	Y+34, r25	; 0x22
    24da:	89 a3       	std	Y+33, r24	; 0x21
    24dc:	3f c0       	rjmp	.+126    	; 0x255c <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    24de:	6b a1       	ldd	r22, Y+35	; 0x23
    24e0:	7c a1       	ldd	r23, Y+36	; 0x24
    24e2:	8d a1       	ldd	r24, Y+37	; 0x25
    24e4:	9e a1       	ldd	r25, Y+38	; 0x26
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	3f ef       	ldi	r19, 0xFF	; 255
    24ea:	4f e7       	ldi	r20, 0x7F	; 127
    24ec:	57 e4       	ldi	r21, 0x47	; 71
    24ee:	0e 94 45 03 	call	0x68a	; 0x68a <__gtsf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	4c f5       	brge	.+82     	; 0x2548 <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f6:	6f a1       	ldd	r22, Y+39	; 0x27
    24f8:	78 a5       	ldd	r23, Y+40	; 0x28
    24fa:	89 a5       	ldd	r24, Y+41	; 0x29
    24fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e2       	ldi	r20, 0x20	; 32
    2504:	51 e4       	ldi	r21, 0x41	; 65
    2506:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9a a3       	std	Y+34, r25	; 0x22
    251c:	89 a3       	std	Y+33, r24	; 0x21
    251e:	0f c0       	rjmp	.+30     	; 0x253e <enu_PassByteAndLatch+0x140>
    2520:	89 e1       	ldi	r24, 0x19	; 25
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	98 a3       	std	Y+32, r25	; 0x20
    2526:	8f 8f       	std	Y+31, r24	; 0x1f
    2528:	8f 8d       	ldd	r24, Y+31	; 0x1f
    252a:	98 a1       	ldd	r25, Y+32	; 0x20
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <enu_PassByteAndLatch+0x12e>
    2530:	98 a3       	std	Y+32, r25	; 0x20
    2532:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2534:	89 a1       	ldd	r24, Y+33	; 0x21
    2536:	9a a1       	ldd	r25, Y+34	; 0x22
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	9a a3       	std	Y+34, r25	; 0x22
    253c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253e:	89 a1       	ldd	r24, Y+33	; 0x21
    2540:	9a a1       	ldd	r25, Y+34	; 0x22
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	69 f7       	brne	.-38     	; 0x2520 <enu_PassByteAndLatch+0x122>
    2546:	14 c0       	rjmp	.+40     	; 0x2570 <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2548:	6b a1       	ldd	r22, Y+35	; 0x23
    254a:	7c a1       	ldd	r23, Y+36	; 0x24
    254c:	8d a1       	ldd	r24, Y+37	; 0x25
    254e:	9e a1       	ldd	r25, Y+38	; 0x26
    2550:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9a a3       	std	Y+34, r25	; 0x22
    255a:	89 a3       	std	Y+33, r24	; 0x21
    255c:	89 a1       	ldd	r24, Y+33	; 0x21
    255e:	9a a1       	ldd	r25, Y+34	; 0x22
    2560:	9e 8f       	std	Y+30, r25	; 0x1e
    2562:	8d 8f       	std	Y+29, r24	; 0x1d
    2564:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2566:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <enu_PassByteAndLatch+0x16a>
    256c:	9e 8f       	std	Y+30, r25	; 0x1e
    256e:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	63 e0       	ldi	r22, 0x03	; 3
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    257a:	8c a5       	ldd	r24, Y+44	; 0x2c
    257c:	86 95       	lsr	r24
    257e:	86 95       	lsr	r24
    2580:	86 95       	lsr	r24
    2582:	98 2f       	mov	r25, r24
    2584:	91 70       	andi	r25, 0x01	; 1
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	67 e0       	ldi	r22, 0x07	; 7
    258a:	49 2f       	mov	r20, r25
    258c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    2590:	8c a5       	ldd	r24, Y+44	; 0x2c
    2592:	86 95       	lsr	r24
    2594:	86 95       	lsr	r24
    2596:	98 2f       	mov	r25, r24
    2598:	91 70       	andi	r25, 0x01	; 1
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	66 e0       	ldi	r22, 0x06	; 6
    259e:	49 2f       	mov	r20, r25
    25a0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    25a4:	8c a5       	ldd	r24, Y+44	; 0x2c
    25a6:	86 95       	lsr	r24
    25a8:	98 2f       	mov	r25, r24
    25aa:	91 70       	andi	r25, 0x01	; 1
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	65 e0       	ldi	r22, 0x05	; 5
    25b0:	49 2f       	mov	r20, r25
    25b2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    25b6:	8c a5       	ldd	r24, Y+44	; 0x2c
    25b8:	98 2f       	mov	r25, r24
    25ba:	91 70       	andi	r25, 0x01	; 1
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	64 e0       	ldi	r22, 0x04	; 4
    25c0:	49 2f       	mov	r20, r25
    25c2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	63 e0       	ldi	r22, 0x03	; 3
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a0 e8       	ldi	r26, 0x80	; 128
    25d6:	bf e3       	ldi	r27, 0x3F	; 63
    25d8:	89 8f       	std	Y+25, r24	; 0x19
    25da:	9a 8f       	std	Y+26, r25	; 0x1a
    25dc:	ab 8f       	std	Y+27, r26	; 0x1b
    25de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	69 8d       	ldd	r22, Y+25	; 0x19
    25e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a e7       	ldi	r20, 0x7A	; 122
    25ee:	53 e4       	ldi	r21, 0x43	; 67
    25f0:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8d 8b       	std	Y+21, r24	; 0x15
    25fa:	9e 8b       	std	Y+22, r25	; 0x16
    25fc:	af 8b       	std	Y+23, r26	; 0x17
    25fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2600:	6d 89       	ldd	r22, Y+21	; 0x15
    2602:	7e 89       	ldd	r23, Y+22	; 0x16
    2604:	8f 89       	ldd	r24, Y+23	; 0x17
    2606:	98 8d       	ldd	r25, Y+24	; 0x18
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 a5 03 	call	0x74a	; 0x74a <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9c 8b       	std	Y+20, r25	; 0x14
    261e:	8b 8b       	std	Y+19, r24	; 0x13
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    2622:	6d 89       	ldd	r22, Y+21	; 0x15
    2624:	7e 89       	ldd	r23, Y+22	; 0x16
    2626:	8f 89       	ldd	r24, Y+23	; 0x17
    2628:	98 8d       	ldd	r25, Y+24	; 0x18
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 45 03 	call	0x68a	; 0x68a <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	69 8d       	ldd	r22, Y+25	; 0x19
    263c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    263e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2640:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9c 8b       	std	Y+20, r25	; 0x14
    2660:	8b 8b       	std	Y+19, r24	; 0x13
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <enu_PassByteAndLatch+0x284>
    2664:	89 e1       	ldi	r24, 0x19	; 25
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9a 8b       	std	Y+18, r25	; 0x12
    266a:	89 8b       	std	Y+17, r24	; 0x11
    266c:	89 89       	ldd	r24, Y+17	; 0x11
    266e:	9a 89       	ldd	r25, Y+18	; 0x12
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <enu_PassByteAndLatch+0x272>
    2674:	9a 8b       	std	Y+18, r25	; 0x12
    2676:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8b 89       	ldd	r24, Y+19	; 0x13
    267a:	9c 89       	ldd	r25, Y+20	; 0x14
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9c 8b       	std	Y+20, r25	; 0x14
    2680:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8b 89       	ldd	r24, Y+19	; 0x13
    2684:	9c 89       	ldd	r25, Y+20	; 0x14
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <enu_PassByteAndLatch+0x266>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6d 89       	ldd	r22, Y+21	; 0x15
    268e:	7e 89       	ldd	r23, Y+22	; 0x16
    2690:	8f 89       	ldd	r24, Y+23	; 0x17
    2692:	98 8d       	ldd	r25, Y+24	; 0x18
    2694:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9c 8b       	std	Y+20, r25	; 0x14
    269e:	8b 8b       	std	Y+19, r24	; 0x13
    26a0:	8b 89       	ldd	r24, Y+19	; 0x13
    26a2:	9c 89       	ldd	r25, Y+20	; 0x14
    26a4:	98 8b       	std	Y+16, r25	; 0x10
    26a6:	8f 87       	std	Y+15, r24	; 0x0f
    26a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26aa:	98 89       	ldd	r25, Y+16	; 0x10
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <enu_PassByteAndLatch+0x2ae>
    26b0:	98 8b       	std	Y+16, r25	; 0x10
    26b2:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	63 e0       	ldi	r22, 0x03	; 3
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	a0 e0       	ldi	r26, 0x00	; 0
    26c4:	b0 e4       	ldi	r27, 0x40	; 64
    26c6:	8b 87       	std	Y+11, r24	; 0x0b
    26c8:	9c 87       	std	Y+12, r25	; 0x0c
    26ca:	ad 87       	std	Y+13, r26	; 0x0d
    26cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	4a e7       	ldi	r20, 0x7A	; 122
    26dc:	53 e4       	ldi	r21, 0x43	; 67
    26de:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	8f 83       	std	Y+7, r24	; 0x07
    26e8:	98 87       	std	Y+8, r25	; 0x08
    26ea:	a9 87       	std	Y+9, r26	; 0x09
    26ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ee:	6f 81       	ldd	r22, Y+7	; 0x07
    26f0:	78 85       	ldd	r23, Y+8	; 0x08
    26f2:	89 85       	ldd	r24, Y+9	; 0x09
    26f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e8       	ldi	r20, 0x80	; 128
    26fc:	5f e3       	ldi	r21, 0x3F	; 63
    26fe:	0e 94 a5 03 	call	0x74a	; 0x74a <__ltsf2>
    2702:	88 23       	and	r24, r24
    2704:	2c f4       	brge	.+10     	; 0x2710 <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	9e 83       	std	Y+6, r25	; 0x06
    270c:	8d 83       	std	Y+5, r24	; 0x05
    270e:	3f c0       	rjmp	.+126    	; 0x278e <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    2710:	6f 81       	ldd	r22, Y+7	; 0x07
    2712:	78 85       	ldd	r23, Y+8	; 0x08
    2714:	89 85       	ldd	r24, Y+9	; 0x09
    2716:	9a 85       	ldd	r25, Y+10	; 0x0a
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	3f ef       	ldi	r19, 0xFF	; 255
    271c:	4f e7       	ldi	r20, 0x7F	; 127
    271e:	57 e4       	ldi	r21, 0x47	; 71
    2720:	0e 94 45 03 	call	0x68a	; 0x68a <__gtsf2>
    2724:	18 16       	cp	r1, r24
    2726:	4c f5       	brge	.+82     	; 0x277a <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2728:	6b 85       	ldd	r22, Y+11	; 0x0b
    272a:	7c 85       	ldd	r23, Y+12	; 0x0c
    272c:	8d 85       	ldd	r24, Y+13	; 0x0d
    272e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e2       	ldi	r20, 0x20	; 32
    2736:	51 e4       	ldi	r21, 0x41	; 65
    2738:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	bc 01       	movw	r22, r24
    2742:	cd 01       	movw	r24, r26
    2744:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	8d 83       	std	Y+5, r24	; 0x05
    2750:	0f c0       	rjmp	.+30     	; 0x2770 <enu_PassByteAndLatch+0x372>
    2752:	89 e1       	ldi	r24, 0x19	; 25
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	9c 83       	std	Y+4, r25	; 0x04
    2758:	8b 83       	std	Y+3, r24	; 0x03
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <enu_PassByteAndLatch+0x360>
    2762:	9c 83       	std	Y+4, r25	; 0x04
    2764:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2766:	8d 81       	ldd	r24, Y+5	; 0x05
    2768:	9e 81       	ldd	r25, Y+6	; 0x06
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2770:	8d 81       	ldd	r24, Y+5	; 0x05
    2772:	9e 81       	ldd	r25, Y+6	; 0x06
    2774:	00 97       	sbiw	r24, 0x00	; 0
    2776:	69 f7       	brne	.-38     	; 0x2752 <enu_PassByteAndLatch+0x354>
    2778:	14 c0       	rjmp	.+40     	; 0x27a2 <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277a:	6f 81       	ldd	r22, Y+7	; 0x07
    277c:	78 85       	ldd	r23, Y+8	; 0x08
    277e:	89 85       	ldd	r24, Y+9	; 0x09
    2780:	9a 85       	ldd	r25, Y+10	; 0x0a
    2782:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	8d 83       	std	Y+5, r24	; 0x05
    278e:	8d 81       	ldd	r24, Y+5	; 0x05
    2790:	9e 81       	ldd	r25, Y+6	; 0x06
    2792:	9a 83       	std	Y+2, r25	; 0x02
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	9a 81       	ldd	r25, Y+2	; 0x02
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	f1 f7       	brne	.-4      	; 0x279a <enu_PassByteAndLatch+0x39c>
    279e:	9a 83       	std	Y+2, r25	; 0x02
    27a0:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    27a2:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    27a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    27a6:	ac 96       	adiw	r28, 0x2c	; 44
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	27 97       	sbiw	r28, 0x07	; 7
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	9c 83       	std	Y+4, r25	; 0x04
    27ce:	8b 83       	std	Y+3, r24	; 0x03
    27d0:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <enu_AddCustomCharacter+0x28>
    27de:	79 c0       	rjmp	.+242    	; 0x28d2 <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	88 30       	cpi	r24, 0x08	; 8
    27e4:	08 f0       	brcs	.+2      	; 0x27e8 <enu_AddCustomCharacter+0x30>
    27e6:	72 c0       	rjmp	.+228    	; 0x28cc <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    27e8:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	61 e0       	ldi	r22, 0x01	; 1
    27ee:	40 e0       	ldi	r20, 0x00	; 0
    27f0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    27f4:	8d 81       	ldd	r24, Y+5	; 0x05
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	3f 83       	std	Y+7, r19	; 0x07
    27fc:	2e 83       	std	Y+6, r18	; 0x06
    27fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2800:	9f 81       	ldd	r25, Y+7	; 0x07
    2802:	83 30       	cpi	r24, 0x03	; 3
    2804:	91 05       	cpc	r25, r1
    2806:	a9 f1       	breq	.+106    	; 0x2872 <enu_AddCustomCharacter+0xba>
    2808:	2e 81       	ldd	r18, Y+6	; 0x06
    280a:	3f 81       	ldd	r19, Y+7	; 0x07
    280c:	24 30       	cpi	r18, 0x04	; 4
    280e:	31 05       	cpc	r19, r1
    2810:	7c f4       	brge	.+30     	; 0x2830 <enu_AddCustomCharacter+0x78>
    2812:	8e 81       	ldd	r24, Y+6	; 0x06
    2814:	9f 81       	ldd	r25, Y+7	; 0x07
    2816:	81 30       	cpi	r24, 0x01	; 1
    2818:	91 05       	cpc	r25, r1
    281a:	19 f1       	breq	.+70     	; 0x2862 <enu_AddCustomCharacter+0xaa>
    281c:	2e 81       	ldd	r18, Y+6	; 0x06
    281e:	3f 81       	ldd	r19, Y+7	; 0x07
    2820:	22 30       	cpi	r18, 0x02	; 2
    2822:	31 05       	cpc	r19, r1
    2824:	14 f5       	brge	.+68     	; 0x286a <enu_AddCustomCharacter+0xb2>
    2826:	8e 81       	ldd	r24, Y+6	; 0x06
    2828:	9f 81       	ldd	r25, Y+7	; 0x07
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	b1 f0       	breq	.+44     	; 0x285a <enu_AddCustomCharacter+0xa2>
    282e:	34 c0       	rjmp	.+104    	; 0x2898 <enu_AddCustomCharacter+0xe0>
    2830:	2e 81       	ldd	r18, Y+6	; 0x06
    2832:	3f 81       	ldd	r19, Y+7	; 0x07
    2834:	25 30       	cpi	r18, 0x05	; 5
    2836:	31 05       	cpc	r19, r1
    2838:	21 f1       	breq	.+72     	; 0x2882 <enu_AddCustomCharacter+0xca>
    283a:	8e 81       	ldd	r24, Y+6	; 0x06
    283c:	9f 81       	ldd	r25, Y+7	; 0x07
    283e:	85 30       	cpi	r24, 0x05	; 5
    2840:	91 05       	cpc	r25, r1
    2842:	dc f0       	brlt	.+54     	; 0x287a <enu_AddCustomCharacter+0xc2>
    2844:	2e 81       	ldd	r18, Y+6	; 0x06
    2846:	3f 81       	ldd	r19, Y+7	; 0x07
    2848:	26 30       	cpi	r18, 0x06	; 6
    284a:	31 05       	cpc	r19, r1
    284c:	f1 f0       	breq	.+60     	; 0x288a <enu_AddCustomCharacter+0xd2>
    284e:	8e 81       	ldd	r24, Y+6	; 0x06
    2850:	9f 81       	ldd	r25, Y+7	; 0x07
    2852:	87 30       	cpi	r24, 0x07	; 7
    2854:	91 05       	cpc	r25, r1
    2856:	e9 f0       	breq	.+58     	; 0x2892 <enu_AddCustomCharacter+0xda>
    2858:	1f c0       	rjmp	.+62     	; 0x2898 <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    285a:	80 e4       	ldi	r24, 0x40	; 64
    285c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
    2860:	1b c0       	rjmp	.+54     	; 0x2898 <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    2862:	88 e4       	ldi	r24, 0x48	; 72
    2864:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
    2868:	17 c0       	rjmp	.+46     	; 0x2898 <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    286a:	80 e5       	ldi	r24, 0x50	; 80
    286c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
    2870:	13 c0       	rjmp	.+38     	; 0x2898 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    2872:	88 e5       	ldi	r24, 0x58	; 88
    2874:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    287a:	80 e6       	ldi	r24, 0x60	; 96
    287c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
    2880:	0b c0       	rjmp	.+22     	; 0x2898 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    2882:	88 e6       	ldi	r24, 0x68	; 104
    2884:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
    2888:	07 c0       	rjmp	.+14     	; 0x2898 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    288a:	80 e7       	ldi	r24, 0x70	; 112
    288c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
    2890:	03 c0       	rjmp	.+6      	; 0x2898 <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    2892:	88 e7       	ldi	r24, 0x78	; 120
    2894:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	61 e0       	ldi	r22, 0x01	; 1
    289c:	41 e0       	ldi	r20, 0x01	; 1
    289e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    28a2:	19 82       	std	Y+1, r1	; 0x01
    28a4:	0e c0       	rjmp	.+28     	; 0x28c2 <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	28 2f       	mov	r18, r24
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	fc 01       	movw	r30, r24
    28b2:	e2 0f       	add	r30, r18
    28b4:	f3 1f       	adc	r31, r19
    28b6:	80 81       	ld	r24, Z
    28b8:	0e 94 ff 11 	call	0x23fe	; 0x23fe <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	8f 5f       	subi	r24, 0xFF	; 255
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	88 30       	cpi	r24, 0x08	; 8
    28c6:	78 f3       	brcs	.-34     	; 0x28a6 <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    28c8:	1a 82       	std	Y+2, r1	; 0x02
    28ca:	05 c0       	rjmp	.+10     	; 0x28d6 <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    28cc:	82 e0       	ldi	r24, 0x02	; 2
    28ce:	8a 83       	std	Y+2, r24	; 0x02
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    28d2:	83 e0       	ldi	r24, 0x03	; 3
    28d4:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    28d8:	27 96       	adiw	r28, 0x07	; 7
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <enu_ConvertDigitToASCII+0x6>
    28f0:	0f 92       	push	r0
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	9b 83       	std	Y+3, r25	; 0x03
    28f8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	9b 81       	ldd	r25, Y+3	; 0x03
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	89 f0       	breq	.+34     	; 0x2928 <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    2906:	ea 81       	ldd	r30, Y+2	; 0x02
    2908:	fb 81       	ldd	r31, Y+3	; 0x03
    290a:	80 81       	ld	r24, Z
    290c:	8a 30       	cpi	r24, 0x0A	; 10
    290e:	48 f4       	brcc	.+18     	; 0x2922 <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    2910:	ea 81       	ldd	r30, Y+2	; 0x02
    2912:	fb 81       	ldd	r31, Y+3	; 0x03
    2914:	80 81       	ld	r24, Z
    2916:	80 5d       	subi	r24, 0xD0	; 208
    2918:	ea 81       	ldd	r30, Y+2	; 0x02
    291a:	fb 81       	ldd	r31, Y+3	; 0x03
    291c:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    291e:	19 82       	std	Y+1, r1	; 0x01
    2920:	05 c0       	rjmp	.+10     	; 0x292c <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	02 c0       	rjmp	.+4      	; 0x292c <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    2928:	83 e0       	ldi	r24, 0x03	; 3
    292a:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    292c:	89 81       	ldd	r24, Y+1	; 0x01
}
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    293a:	ef 92       	push	r14
    293c:	ff 92       	push	r15
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	27 97       	sbiw	r28, 0x07	; 7
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	9f 83       	std	Y+7, r25	; 0x07
    2958:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    295a:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    295c:	8e 81       	ldd	r24, Y+6	; 0x06
    295e:	9f 81       	ldd	r25, Y+7	; 0x07
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	09 f4       	brne	.+2      	; 0x2966 <enu_ReverseInteger+0x2c>
    2964:	58 c0       	rjmp	.+176    	; 0x2a16 <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    2966:	19 82       	std	Y+1, r1	; 0x01
    2968:	1a 82       	std	Y+2, r1	; 0x02
    296a:	1b 82       	std	Y+3, r1	; 0x03
    296c:	1c 82       	std	Y+4, r1	; 0x04
    296e:	3c c0       	rjmp	.+120    	; 0x29e8 <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	ab 81       	ldd	r26, Y+3	; 0x03
    2976:	bc 81       	ldd	r27, Y+4	; 0x04
    2978:	2a e0       	ldi	r18, 0x0A	; 10
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	50 e0       	ldi	r21, 0x00	; 0
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 05 19 	call	0x320a	; 0x320a <__mulsi3>
    2988:	7b 01       	movw	r14, r22
    298a:	8c 01       	movw	r16, r24
    298c:	ee 81       	ldd	r30, Y+6	; 0x06
    298e:	ff 81       	ldd	r31, Y+7	; 0x07
    2990:	80 81       	ld	r24, Z
    2992:	91 81       	ldd	r25, Z+1	; 0x01
    2994:	a2 81       	ldd	r26, Z+2	; 0x02
    2996:	b3 81       	ldd	r27, Z+3	; 0x03
    2998:	2a e0       	ldi	r18, 0x0A	; 10
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	50 e0       	ldi	r21, 0x00	; 0
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 24 19 	call	0x3248	; 0x3248 <__udivmodsi4>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	8e 0d       	add	r24, r14
    29ae:	9f 1d       	adc	r25, r15
    29b0:	a0 1f       	adc	r26, r16
    29b2:	b1 1f       	adc	r27, r17
    29b4:	89 83       	std	Y+1, r24	; 0x01
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	ab 83       	std	Y+3, r26	; 0x03
    29ba:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    29bc:	ee 81       	ldd	r30, Y+6	; 0x06
    29be:	ff 81       	ldd	r31, Y+7	; 0x07
    29c0:	80 81       	ld	r24, Z
    29c2:	91 81       	ldd	r25, Z+1	; 0x01
    29c4:	a2 81       	ldd	r26, Z+2	; 0x02
    29c6:	b3 81       	ldd	r27, Z+3	; 0x03
    29c8:	2a e0       	ldi	r18, 0x0A	; 10
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 24 19 	call	0x3248	; 0x3248 <__udivmodsi4>
    29d8:	da 01       	movw	r26, r20
    29da:	c9 01       	movw	r24, r18
    29dc:	ee 81       	ldd	r30, Y+6	; 0x06
    29de:	ff 81       	ldd	r31, Y+7	; 0x07
    29e0:	80 83       	st	Z, r24
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	a2 83       	std	Z+2, r26	; 0x02
    29e6:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    29e8:	ee 81       	ldd	r30, Y+6	; 0x06
    29ea:	ff 81       	ldd	r31, Y+7	; 0x07
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	a2 81       	ldd	r26, Z+2	; 0x02
    29f2:	b3 81       	ldd	r27, Z+3	; 0x03
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	a1 05       	cpc	r26, r1
    29f8:	b1 05       	cpc	r27, r1
    29fa:	09 f0       	breq	.+2      	; 0x29fe <enu_ReverseInteger+0xc4>
    29fc:	b9 cf       	rjmp	.-142    	; 0x2970 <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    29fe:	ee 81       	ldd	r30, Y+6	; 0x06
    2a00:	ff 81       	ldd	r31, Y+7	; 0x07
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	ab 81       	ldd	r26, Y+3	; 0x03
    2a08:	bc 81       	ldd	r27, Y+4	; 0x04
    2a0a:	80 83       	st	Z, r24
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	a2 83       	std	Z+2, r26	; 0x02
    2a10:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    2a12:	1d 82       	std	Y+5, r1	; 0x05
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2a16:	83 e0       	ldi	r24, 0x03	; 3
    2a18:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    2a1a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2a1c:	27 96       	adiw	r28, 0x07	; 7
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	f8 94       	cli
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	1f 91       	pop	r17
    2a2e:	0f 91       	pop	r16
    2a30:	ff 90       	pop	r15
    2a32:	ef 90       	pop	r14
    2a34:	08 95       	ret

00002a36 <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <Keypad_enu_Initialization+0x6>
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    2a44:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    2a46:	19 82       	std	Y+1, r1	; 0x01
    2a48:	31 c0       	rjmp	.+98     	; 0x2aac <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	88 2f       	mov	r24, r24
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	fc 01       	movw	r30, r24
    2a56:	eb 5e       	subi	r30, 0xEB	; 235
    2a58:	fd 4f       	sbci	r31, 0xFD	; 253
    2a5a:	20 81       	ld	r18, Z
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	88 2f       	mov	r24, r24
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	fc 01       	movw	r30, r24
    2a68:	ea 5e       	subi	r30, 0xEA	; 234
    2a6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2a6c:	90 81       	ld	r25, Z
    2a6e:	82 2f       	mov	r24, r18
    2a70:	69 2f       	mov	r22, r25
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	88 2f       	mov	r24, r24
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	88 0f       	add	r24, r24
    2a80:	99 1f       	adc	r25, r25
    2a82:	fc 01       	movw	r30, r24
    2a84:	eb 5e       	subi	r30, 0xEB	; 235
    2a86:	fd 4f       	sbci	r31, 0xFD	; 253
    2a88:	20 81       	ld	r18, Z
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	88 2f       	mov	r24, r24
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	fc 01       	movw	r30, r24
    2a96:	ea 5e       	subi	r30, 0xEA	; 234
    2a98:	fd 4f       	sbci	r31, 0xFD	; 253
    2a9a:	90 81       	ld	r25, Z
    2a9c:	82 2f       	mov	r24, r18
    2a9e:	69 2f       	mov	r22, r25
    2aa0:	41 e0       	ldi	r20, 0x01	; 1
    2aa2:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	8f 5f       	subi	r24, 0xFF	; 255
    2aaa:	89 83       	std	Y+1, r24	; 0x01
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	84 30       	cpi	r24, 0x04	; 4
    2ab0:	60 f2       	brcs	.-104    	; 0x2a4a <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    2ab2:	19 82       	std	Y+1, r1	; 0x01
    2ab4:	31 c0       	rjmp	.+98     	; 0x2b18 <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	e3 5e       	subi	r30, 0xE3	; 227
    2ac4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ac6:	20 81       	ld	r18, Z
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	88 2f       	mov	r24, r24
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	e2 5e       	subi	r30, 0xE2	; 226
    2ad6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ad8:	90 81       	ld	r25, Z
    2ada:	82 2f       	mov	r24, r18
    2adc:	69 2f       	mov	r22, r25
    2ade:	41 e0       	ldi	r20, 0x01	; 1
    2ae0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	88 2f       	mov	r24, r24
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	88 0f       	add	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	fc 01       	movw	r30, r24
    2af0:	e3 5e       	subi	r30, 0xE3	; 227
    2af2:	fd 4f       	sbci	r31, 0xFD	; 253
    2af4:	20 81       	ld	r18, Z
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	88 2f       	mov	r24, r24
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	fc 01       	movw	r30, r24
    2b02:	e2 5e       	subi	r30, 0xE2	; 226
    2b04:	fd 4f       	sbci	r31, 0xFD	; 253
    2b06:	90 81       	ld	r25, Z
    2b08:	82 2f       	mov	r24, r18
    2b0a:	69 2f       	mov	r22, r25
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	8f 5f       	subi	r24, 0xFF	; 255
    2b16:	89 83       	std	Y+1, r24	; 0x01
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	84 30       	cpi	r24, 0x04	; 4
    2b1c:	60 f2       	brcs	.-104    	; 0x2ab6 <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    2b1e:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	aa 97       	sbiw	r28, 0x2a	; 42
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	cd bf       	out	0x3d, r28	; 61
    2b40:	9d a3       	std	Y+37, r25	; 0x25
    2b42:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    2b48:	8c a1       	ldd	r24, Y+36	; 0x24
    2b4a:	9d a1       	ldd	r25, Y+37	; 0x25
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <Keypad_enu_GetButtonPressedValue+0x26>
    2b50:	68 c1       	rjmp	.+720    	; 0x2e22 <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    2b52:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    2b54:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    2b56:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    2b58:	ec a1       	ldd	r30, Y+36	; 0x24
    2b5a:	fd a1       	ldd	r31, Y+37	; 0x25
    2b5c:	8f ef       	ldi	r24, 0xFF	; 255
    2b5e:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    2b60:	19 8a       	std	Y+17, r1	; 0x11
    2b62:	5a c1       	rjmp	.+692    	; 0x2e18 <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    2b64:	89 89       	ldd	r24, Y+17	; 0x11
    2b66:	88 2f       	mov	r24, r24
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	fc 01       	movw	r30, r24
    2b70:	eb 5e       	subi	r30, 0xEB	; 235
    2b72:	fd 4f       	sbci	r31, 0xFD	; 253
    2b74:	40 81       	ld	r20, Z
    2b76:	89 89       	ldd	r24, Y+17	; 0x11
    2b78:	88 2f       	mov	r24, r24
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	fc 01       	movw	r30, r24
    2b82:	ea 5e       	subi	r30, 0xEA	; 234
    2b84:	fd 4f       	sbci	r31, 0xFD	; 253
    2b86:	90 81       	ld	r25, Z
    2b88:	9e 01       	movw	r18, r28
    2b8a:	2d 5e       	subi	r18, 0xED	; 237
    2b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8e:	84 2f       	mov	r24, r20
    2b90:	69 2f       	mov	r22, r25
    2b92:	a9 01       	movw	r20, r18
    2b94:	0e 94 01 0a 	call	0x1402	; 0x1402 <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    2b98:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9a:	88 23       	and	r24, r24
    2b9c:	09 f0       	breq	.+2      	; 0x2ba0 <Keypad_enu_GetButtonPressedValue+0x74>
    2b9e:	36 c1       	rjmp	.+620    	; 0x2e0c <Keypad_enu_GetButtonPressedValue+0x2e0>
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	a0 e4       	ldi	r26, 0x40	; 64
    2ba6:	b0 e4       	ldi	r27, 0x40	; 64
    2ba8:	8b 87       	std	Y+11, r24	; 0x0b
    2baa:	9c 87       	std	Y+12, r25	; 0x0c
    2bac:	ad 87       	std	Y+13, r26	; 0x0d
    2bae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	4a e7       	ldi	r20, 0x7A	; 122
    2bbe:	53 e4       	ldi	r21, 0x43	; 67
    2bc0:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	8f 83       	std	Y+7, r24	; 0x07
    2bca:	98 87       	std	Y+8, r25	; 0x08
    2bcc:	a9 87       	std	Y+9, r26	; 0x09
    2bce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd2:	78 85       	ldd	r23, Y+8	; 0x08
    2bd4:	89 85       	ldd	r24, Y+9	; 0x09
    2bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e8       	ldi	r20, 0x80	; 128
    2bde:	5f e3       	ldi	r21, 0x3F	; 63
    2be0:	0e 94 a5 03 	call	0x74a	; 0x74a <__ltsf2>
    2be4:	88 23       	and	r24, r24
    2be6:	2c f4       	brge	.+10     	; 0x2bf2 <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9e 83       	std	Y+6, r25	; 0x06
    2bee:	8d 83       	std	Y+5, r24	; 0x05
    2bf0:	3f c0       	rjmp	.+126    	; 0x2c70 <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    2bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf4:	78 85       	ldd	r23, Y+8	; 0x08
    2bf6:	89 85       	ldd	r24, Y+9	; 0x09
    2bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	4f e7       	ldi	r20, 0x7F	; 127
    2c00:	57 e4       	ldi	r21, 0x47	; 71
    2c02:	0e 94 45 03 	call	0x68a	; 0x68a <__gtsf2>
    2c06:	18 16       	cp	r1, r24
    2c08:	4c f5       	brge	.+82     	; 0x2c5c <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e2       	ldi	r20, 0x20	; 32
    2c18:	51 e4       	ldi	r21, 0x41	; 65
    2c1a:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	bc 01       	movw	r22, r24
    2c24:	cd 01       	movw	r24, r26
    2c26:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	9e 83       	std	Y+6, r25	; 0x06
    2c30:	8d 83       	std	Y+5, r24	; 0x05
    2c32:	0f c0       	rjmp	.+30     	; 0x2c52 <Keypad_enu_GetButtonPressedValue+0x126>
    2c34:	89 e1       	ldi	r24, 0x19	; 25
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	9c 83       	std	Y+4, r25	; 0x04
    2c3a:	8b 83       	std	Y+3, r24	; 0x03
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <Keypad_enu_GetButtonPressedValue+0x114>
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c48:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	9e 83       	std	Y+6, r25	; 0x06
    2c50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c52:	8d 81       	ldd	r24, Y+5	; 0x05
    2c54:	9e 81       	ldd	r25, Y+6	; 0x06
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	69 f7       	brne	.-38     	; 0x2c34 <Keypad_enu_GetButtonPressedValue+0x108>
    2c5a:	14 c0       	rjmp	.+40     	; 0x2c84 <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5e:	78 85       	ldd	r23, Y+8	; 0x08
    2c60:	89 85       	ldd	r24, Y+9	; 0x09
    2c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c64:	0e 94 45 00 	call	0x8a	; 0x8a <__fixunssfsi>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	9e 83       	std	Y+6, r25	; 0x06
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	8d 81       	ldd	r24, Y+5	; 0x05
    2c72:	9e 81       	ldd	r25, Y+6	; 0x06
    2c74:	9a 83       	std	Y+2, r25	; 0x02
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	f1 f7       	brne	.-4      	; 0x2c7c <Keypad_enu_GetButtonPressedValue+0x150>
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    2c84:	89 89       	ldd	r24, Y+17	; 0x11
    2c86:	88 2f       	mov	r24, r24
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	88 0f       	add	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	fc 01       	movw	r30, r24
    2c90:	eb 5e       	subi	r30, 0xEB	; 235
    2c92:	fd 4f       	sbci	r31, 0xFD	; 253
    2c94:	40 81       	ld	r20, Z
    2c96:	89 89       	ldd	r24, Y+17	; 0x11
    2c98:	88 2f       	mov	r24, r24
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	88 0f       	add	r24, r24
    2c9e:	99 1f       	adc	r25, r25
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	ea 5e       	subi	r30, 0xEA	; 234
    2ca4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ca6:	90 81       	ld	r25, Z
    2ca8:	9e 01       	movw	r18, r28
    2caa:	2d 5e       	subi	r18, 0xED	; 237
    2cac:	3f 4f       	sbci	r19, 0xFF	; 255
    2cae:	84 2f       	mov	r24, r20
    2cb0:	69 2f       	mov	r22, r25
    2cb2:	a9 01       	movw	r20, r18
    2cb4:	0e 94 01 0a 	call	0x1402	; 0x1402 <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    2cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cba:	88 23       	and	r24, r24
    2cbc:	09 f0       	breq	.+2      	; 0x2cc0 <Keypad_enu_GetButtonPressedValue+0x194>
    2cbe:	a6 c0       	rjmp	.+332    	; 0x2e0c <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    2cc0:	18 8a       	std	Y+16, r1	; 0x10
    2cc2:	a0 c0       	rjmp	.+320    	; 0x2e04 <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    2cc4:	88 89       	ldd	r24, Y+16	; 0x10
    2cc6:	88 2f       	mov	r24, r24
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	88 0f       	add	r24, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	fc 01       	movw	r30, r24
    2cd0:	e3 5e       	subi	r30, 0xE3	; 227
    2cd2:	fd 4f       	sbci	r31, 0xFD	; 253
    2cd4:	20 81       	ld	r18, Z
    2cd6:	88 89       	ldd	r24, Y+16	; 0x10
    2cd8:	88 2f       	mov	r24, r24
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	e2 5e       	subi	r30, 0xE2	; 226
    2ce4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ce6:	90 81       	ld	r25, Z
    2ce8:	82 2f       	mov	r24, r18
    2cea:	69 2f       	mov	r22, r25
    2cec:	41 e0       	ldi	r20, 0x01	; 1
    2cee:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    2cf2:	89 89       	ldd	r24, Y+17	; 0x11
    2cf4:	88 2f       	mov	r24, r24
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	eb 5e       	subi	r30, 0xEB	; 235
    2d00:	fd 4f       	sbci	r31, 0xFD	; 253
    2d02:	40 81       	ld	r20, Z
    2d04:	89 89       	ldd	r24, Y+17	; 0x11
    2d06:	88 2f       	mov	r24, r24
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	88 0f       	add	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	fc 01       	movw	r30, r24
    2d10:	ea 5e       	subi	r30, 0xEA	; 234
    2d12:	fd 4f       	sbci	r31, 0xFD	; 253
    2d14:	90 81       	ld	r25, Z
    2d16:	9e 01       	movw	r18, r28
    2d18:	2d 5e       	subi	r18, 0xED	; 237
    2d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1c:	84 2f       	mov	r24, r20
    2d1e:	69 2f       	mov	r22, r25
    2d20:	a9 01       	movw	r20, r18
    2d22:	0e 94 01 0a 	call	0x1402	; 0x1402 <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    2d26:	8b 89       	ldd	r24, Y+19	; 0x13
    2d28:	81 30       	cpi	r24, 0x01	; 1
    2d2a:	09 f0       	breq	.+2      	; 0x2d2e <Keypad_enu_GetButtonPressedValue+0x202>
    2d2c:	51 c0       	rjmp	.+162    	; 0x2dd0 <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    2d2e:	ce 01       	movw	r24, r28
    2d30:	44 96       	adiw	r24, 0x14	; 20
    2d32:	9f a3       	std	Y+39, r25	; 0x27
    2d34:	8e a3       	std	Y+38, r24	; 0x26
    2d36:	e8 e2       	ldi	r30, 0x28	; 40
    2d38:	f2 e0       	ldi	r31, 0x02	; 2
    2d3a:	f9 a7       	std	Y+41, r31	; 0x29
    2d3c:	e8 a7       	std	Y+40, r30	; 0x28
    2d3e:	f0 e1       	ldi	r31, 0x10	; 16
    2d40:	fa a7       	std	Y+42, r31	; 0x2a
    2d42:	e8 a5       	ldd	r30, Y+40	; 0x28
    2d44:	f9 a5       	ldd	r31, Y+41	; 0x29
    2d46:	00 80       	ld	r0, Z
    2d48:	88 a5       	ldd	r24, Y+40	; 0x28
    2d4a:	99 a5       	ldd	r25, Y+41	; 0x29
    2d4c:	01 96       	adiw	r24, 0x01	; 1
    2d4e:	99 a7       	std	Y+41, r25	; 0x29
    2d50:	88 a7       	std	Y+40, r24	; 0x28
    2d52:	ee a1       	ldd	r30, Y+38	; 0x26
    2d54:	ff a1       	ldd	r31, Y+39	; 0x27
    2d56:	00 82       	st	Z, r0
    2d58:	8e a1       	ldd	r24, Y+38	; 0x26
    2d5a:	9f a1       	ldd	r25, Y+39	; 0x27
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	9f a3       	std	Y+39, r25	; 0x27
    2d60:	8e a3       	std	Y+38, r24	; 0x26
    2d62:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d64:	91 50       	subi	r25, 0x01	; 1
    2d66:	9a a7       	std	Y+42, r25	; 0x2a
    2d68:	ea a5       	ldd	r30, Y+42	; 0x2a
    2d6a:	ee 23       	and	r30, r30
    2d6c:	51 f7       	brne	.-44     	; 0x2d42 <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    2d6e:	89 89       	ldd	r24, Y+17	; 0x11
    2d70:	28 2f       	mov	r18, r24
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	88 89       	ldd	r24, Y+16	; 0x10
    2d76:	48 2f       	mov	r20, r24
    2d78:	50 e0       	ldi	r21, 0x00	; 0
    2d7a:	22 0f       	add	r18, r18
    2d7c:	33 1f       	adc	r19, r19
    2d7e:	22 0f       	add	r18, r18
    2d80:	33 1f       	adc	r19, r19
    2d82:	ce 01       	movw	r24, r28
    2d84:	01 96       	adiw	r24, 0x01	; 1
    2d86:	82 0f       	add	r24, r18
    2d88:	93 1f       	adc	r25, r19
    2d8a:	84 0f       	add	r24, r20
    2d8c:	95 1f       	adc	r25, r21
    2d8e:	fc 01       	movw	r30, r24
    2d90:	73 96       	adiw	r30, 0x13	; 19
    2d92:	80 81       	ld	r24, Z
    2d94:	ec a1       	ldd	r30, Y+36	; 0x24
    2d96:	fd a1       	ldd	r31, Y+37	; 0x25
    2d98:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    2d9e:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    2da0:	88 89       	ldd	r24, Y+16	; 0x10
    2da2:	88 2f       	mov	r24, r24
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	fc 01       	movw	r30, r24
    2dac:	e3 5e       	subi	r30, 0xE3	; 227
    2dae:	fd 4f       	sbci	r31, 0xFD	; 253
    2db0:	20 81       	ld	r18, Z
    2db2:	88 89       	ldd	r24, Y+16	; 0x10
    2db4:	88 2f       	mov	r24, r24
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	e2 5e       	subi	r30, 0xE2	; 226
    2dc0:	fd 4f       	sbci	r31, 0xFD	; 253
    2dc2:	90 81       	ld	r25, Z
    2dc4:	82 2f       	mov	r24, r18
    2dc6:	69 2f       	mov	r22, r25
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    2dce:	1e c0       	rjmp	.+60     	; 0x2e0c <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    2dd0:	88 89       	ldd	r24, Y+16	; 0x10
    2dd2:	88 2f       	mov	r24, r24
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	fc 01       	movw	r30, r24
    2ddc:	e3 5e       	subi	r30, 0xE3	; 227
    2dde:	fd 4f       	sbci	r31, 0xFD	; 253
    2de0:	20 81       	ld	r18, Z
    2de2:	88 89       	ldd	r24, Y+16	; 0x10
    2de4:	88 2f       	mov	r24, r24
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	fc 01       	movw	r30, r24
    2dee:	e2 5e       	subi	r30, 0xE2	; 226
    2df0:	fd 4f       	sbci	r31, 0xFD	; 253
    2df2:	90 81       	ld	r25, Z
    2df4:	82 2f       	mov	r24, r18
    2df6:	69 2f       	mov	r22, r25
    2df8:	40 e0       	ldi	r20, 0x00	; 0
    2dfa:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    2dfe:	88 89       	ldd	r24, Y+16	; 0x10
    2e00:	8f 5f       	subi	r24, 0xFF	; 255
    2e02:	88 8b       	std	Y+16, r24	; 0x10
    2e04:	88 89       	ldd	r24, Y+16	; 0x10
    2e06:	84 30       	cpi	r24, 0x04	; 4
    2e08:	08 f4       	brcc	.+2      	; 0x2e0c <Keypad_enu_GetButtonPressedValue+0x2e0>
    2e0a:	5c cf       	rjmp	.-328    	; 0x2cc4 <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    2e0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e0e:	88 23       	and	r24, r24
    2e10:	51 f4       	brne	.+20     	; 0x2e26 <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    2e12:	89 89       	ldd	r24, Y+17	; 0x11
    2e14:	8f 5f       	subi	r24, 0xFF	; 255
    2e16:	89 8b       	std	Y+17, r24	; 0x11
    2e18:	89 89       	ldd	r24, Y+17	; 0x11
    2e1a:	84 30       	cpi	r24, 0x04	; 4
    2e1c:	08 f4       	brcc	.+2      	; 0x2e20 <Keypad_enu_GetButtonPressedValue+0x2f4>
    2e1e:	a2 ce       	rjmp	.-700    	; 0x2b64 <Keypad_enu_GetButtonPressedValue+0x38>
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2e22:	83 e0       	ldi	r24, 0x03	; 3
    2e24:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    2e26:	8a 89       	ldd	r24, Y+18	; 0x12

}
    2e28:	aa 96       	adiw	r28, 0x2a	; 42
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	0f 92       	push	r0
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	64 e0       	ldi	r22, 0x04	; 4
    2e4c:	41 e0       	ldi	r20, 0x01	; 1
    2e4e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	65 e0       	ldi	r22, 0x05	; 5
    2e56:	41 e0       	ldi	r20, 0x01	; 1
    2e58:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	66 e0       	ldi	r22, 0x06	; 6
    2e60:	41 e0       	ldi	r20, 0x01	; 1
    2e62:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	67 e0       	ldi	r22, 0x07	; 7
    2e6a:	41 e0       	ldi	r20, 0x01	; 1
    2e6c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	62 e0       	ldi	r22, 0x02	; 2
    2e74:	41 e0       	ldi	r20, 0x01	; 1
    2e76:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	61 e0       	ldi	r22, 0x01	; 1
    2e7e:	41 e0       	ldi	r20, 0x01	; 1
    2e80:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    2e84:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    2e86:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e88:	0f 90       	pop	r0
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	08 95       	ret

00002e90 <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <Hexadecoder_enu_DisplayNum+0x6>
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	8a 30       	cpi	r24, 0x0A	; 10
    2ea4:	40 f5       	brcc	.+80     	; 0x2ef6 <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	98 2f       	mov	r25, r24
    2eaa:	91 70       	andi	r25, 0x01	; 1
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	64 e0       	ldi	r22, 0x04	; 4
    2eb0:	49 2f       	mov	r20, r25
    2eb2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	86 95       	lsr	r24
    2eba:	98 2f       	mov	r25, r24
    2ebc:	91 70       	andi	r25, 0x01	; 1
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	65 e0       	ldi	r22, 0x05	; 5
    2ec2:	49 2f       	mov	r20, r25
    2ec4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	86 95       	lsr	r24
    2ecc:	86 95       	lsr	r24
    2ece:	98 2f       	mov	r25, r24
    2ed0:	91 70       	andi	r25, 0x01	; 1
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	66 e0       	ldi	r22, 0x06	; 6
    2ed6:	49 2f       	mov	r20, r25
    2ed8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    2edc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ede:	86 95       	lsr	r24
    2ee0:	86 95       	lsr	r24
    2ee2:	86 95       	lsr	r24
    2ee4:	98 2f       	mov	r25, r24
    2ee6:	91 70       	andi	r25, 0x01	; 1
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	67 e0       	ldi	r22, 0x07	; 7
    2eec:	49 2f       	mov	r20, r25
    2eee:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    2ef2:	19 82       	std	Y+1, r1	; 0x01
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2ef6:	82 e0       	ldi	r24, 0x02	; 2
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	cf 91       	pop	r28
    2f02:	df 91       	pop	r29
    2f04:	08 95       	ret

00002f06 <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	00 d0       	rcall	.+0      	; 0x2f0c <Hexadecoder_enu_EnableSSG+0x6>
    2f0c:	00 d0       	rcall	.+0      	; 0x2f0e <Hexadecoder_enu_EnableSSG+0x8>
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	3c 83       	std	Y+4, r19	; 0x04
    2f20:	2b 83       	std	Y+3, r18	; 0x03
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	31 f0       	breq	.+12     	; 0x2f36 <Hexadecoder_enu_EnableSSG+0x30>
    2f2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f2e:	21 30       	cpi	r18, 0x01	; 1
    2f30:	31 05       	cpc	r19, r1
    2f32:	41 f0       	breq	.+16     	; 0x2f44 <Hexadecoder_enu_EnableSSG+0x3e>
    2f34:	0e c0       	rjmp	.+28     	; 0x2f52 <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	62 e0       	ldi	r22, 0x02	; 2
    2f3a:	41 e0       	ldi	r20, 0x01	; 1
    2f3c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    2f40:	19 82       	std	Y+1, r1	; 0x01
    2f42:	09 c0       	rjmp	.+18     	; 0x2f56 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	61 e0       	ldi	r22, 0x01	; 1
    2f48:	41 e0       	ldi	r20, 0x01	; 1
    2f4a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    2f4e:	19 82       	std	Y+1, r1	; 0x01
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2f52:	82 e0       	ldi	r24, 0x02	; 2
    2f54:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	0f 90       	pop	r0
    2f60:	cf 91       	pop	r28
    2f62:	df 91       	pop	r29
    2f64:	08 95       	ret

00002f66 <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    2f66:	df 93       	push	r29
    2f68:	cf 93       	push	r28
    2f6a:	00 d0       	rcall	.+0      	; 0x2f6c <Hexadecoder_enu_DisableSSG+0x6>
    2f6c:	00 d0       	rcall	.+0      	; 0x2f6e <Hexadecoder_enu_DisableSSG+0x8>
    2f6e:	cd b7       	in	r28, 0x3d	; 61
    2f70:	de b7       	in	r29, 0x3e	; 62
    2f72:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    2f78:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	3c 83       	std	Y+4, r19	; 0x04
    2f80:	2b 83       	std	Y+3, r18	; 0x03
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	9c 81       	ldd	r25, Y+4	; 0x04
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	31 f0       	breq	.+12     	; 0x2f96 <Hexadecoder_enu_DisableSSG+0x30>
    2f8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f8e:	21 30       	cpi	r18, 0x01	; 1
    2f90:	31 05       	cpc	r19, r1
    2f92:	41 f0       	breq	.+16     	; 0x2fa4 <Hexadecoder_enu_DisableSSG+0x3e>
    2f94:	0e c0       	rjmp	.+28     	; 0x2fb2 <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	62 e0       	ldi	r22, 0x02	; 2
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    2fa0:	19 82       	std	Y+1, r1	; 0x01
    2fa2:	09 c0       	rjmp	.+18     	; 0x2fb6 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	61 e0       	ldi	r22, 0x01	; 1
    2fa8:	40 e0       	ldi	r20, 0x00	; 0
    2faa:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    2fae:	19 82       	std	Y+1, r1	; 0x01
    2fb0:	02 c0       	rjmp	.+4      	; 0x2fb6 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
    2fb4:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	0f 92       	push	r0
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	62 e0       	ldi	r22, 0x02	; 2
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	61 e0       	ldi	r22, 0x01	; 1
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fea:	0f 90       	pop	r0
    2fec:	cf 91       	pop	r28
    2fee:	df 91       	pop	r29
    2ff0:	08 95       	ret

00002ff2 <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <Buzzer_enu_Initialization+0x6>
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3000:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3002:	19 82       	std	Y+1, r1	; 0x01
    3004:	31 c0       	rjmp	.+98     	; 0x3068 <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    3006:	89 81       	ldd	r24, Y+1	; 0x01
    3008:	88 2f       	mov	r24, r24
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	88 0f       	add	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	fc 01       	movw	r30, r24
    3012:	ea 5d       	subi	r30, 0xDA	; 218
    3014:	fd 4f       	sbci	r31, 0xFD	; 253
    3016:	20 81       	ld	r18, Z
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	88 2f       	mov	r24, r24
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	88 0f       	add	r24, r24
    3020:	99 1f       	adc	r25, r25
    3022:	fc 01       	movw	r30, r24
    3024:	e9 5d       	subi	r30, 0xD9	; 217
    3026:	fd 4f       	sbci	r31, 0xFD	; 253
    3028:	90 81       	ld	r25, Z
    302a:	82 2f       	mov	r24, r18
    302c:	69 2f       	mov	r22, r25
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	88 2f       	mov	r24, r24
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	88 0f       	add	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	fc 01       	movw	r30, r24
    3040:	ea 5d       	subi	r30, 0xDA	; 218
    3042:	fd 4f       	sbci	r31, 0xFD	; 253
    3044:	20 81       	ld	r18, Z
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	88 2f       	mov	r24, r24
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	fc 01       	movw	r30, r24
    3052:	e9 5d       	subi	r30, 0xD9	; 217
    3054:	fd 4f       	sbci	r31, 0xFD	; 253
    3056:	90 81       	ld	r25, Z
    3058:	82 2f       	mov	r24, r18
    305a:	69 2f       	mov	r22, r25
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	8f 5f       	subi	r24, 0xFF	; 255
    3066:	89 83       	std	Y+1, r24	; 0x01
    3068:	90 91 25 02 	lds	r25, 0x0225
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	89 17       	cp	r24, r25
    3070:	50 f2       	brcs	.-108    	; 0x3006 <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    3072:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    3074:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	00 d0       	rcall	.+0      	; 0x3086 <Buzzer_enu_TuronOnBuzzer+0x6>
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    3090:	90 91 25 02 	lds	r25, 0x0225
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	89 17       	cp	r24, r25
    3098:	c8 f4       	brcc	.+50     	; 0x30cc <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    309a:	8a 81       	ldd	r24, Y+2	; 0x02
    309c:	88 2f       	mov	r24, r24
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	88 0f       	add	r24, r24
    30a2:	99 1f       	adc	r25, r25
    30a4:	fc 01       	movw	r30, r24
    30a6:	ea 5d       	subi	r30, 0xDA	; 218
    30a8:	fd 4f       	sbci	r31, 0xFD	; 253
    30aa:	20 81       	ld	r18, Z
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	88 2f       	mov	r24, r24
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	88 0f       	add	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	fc 01       	movw	r30, r24
    30b8:	e9 5d       	subi	r30, 0xD9	; 217
    30ba:	fd 4f       	sbci	r31, 0xFD	; 253
    30bc:	90 81       	ld	r25, Z
    30be:	82 2f       	mov	r24, r18
    30c0:	69 2f       	mov	r22, r25
    30c2:	41 e0       	ldi	r20, 0x01	; 1
    30c4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	02 c0       	rjmp	.+4      	; 0x30d0 <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    30cc:	82 e0       	ldi	r24, 0x02	; 2
    30ce:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <Buzzer_enu_TuronOffBuzzer+0x6>
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    30ec:	90 91 25 02 	lds	r25, 0x0225
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	89 17       	cp	r24, r25
    30f4:	c8 f4       	brcc	.+50     	; 0x3128 <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	88 2f       	mov	r24, r24
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	88 0f       	add	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	fc 01       	movw	r30, r24
    3102:	ea 5d       	subi	r30, 0xDA	; 218
    3104:	fd 4f       	sbci	r31, 0xFD	; 253
    3106:	20 81       	ld	r18, Z
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	88 2f       	mov	r24, r24
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	88 0f       	add	r24, r24
    3110:	99 1f       	adc	r25, r25
    3112:	fc 01       	movw	r30, r24
    3114:	e9 5d       	subi	r30, 0xD9	; 217
    3116:	fd 4f       	sbci	r31, 0xFD	; 253
    3118:	90 81       	ld	r25, Z
    311a:	82 2f       	mov	r24, r18
    311c:	69 2f       	mov	r22, r25
    311e:	40 e0       	ldi	r20, 0x00	; 0
    3120:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
    3124:	89 83       	std	Y+1, r24	; 0x01
    3126:	02 c0       	rjmp	.+4      	; 0x312c <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    312c:	89 81       	ldd	r24, Y+1	; 0x01
}
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

00003138 <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	00 d0       	rcall	.+0      	; 0x313e <Buzzer_enu_TurnOnAllBuzzers+0x6>
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3146:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3148:	19 82       	std	Y+1, r1	; 0x01
    314a:	1a c0       	rjmp	.+52     	; 0x3180 <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	88 2f       	mov	r24, r24
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	fc 01       	movw	r30, r24
    3158:	ea 5d       	subi	r30, 0xDA	; 218
    315a:	fd 4f       	sbci	r31, 0xFD	; 253
    315c:	20 81       	ld	r18, Z
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	88 2f       	mov	r24, r24
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	88 0f       	add	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	fc 01       	movw	r30, r24
    316a:	e9 5d       	subi	r30, 0xD9	; 217
    316c:	fd 4f       	sbci	r31, 0xFD	; 253
    316e:	90 81       	ld	r25, Z
    3170:	82 2f       	mov	r24, r18
    3172:	69 2f       	mov	r22, r25
    3174:	41 e0       	ldi	r20, 0x01	; 1
    3176:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	8f 5f       	subi	r24, 0xFF	; 255
    317e:	89 83       	std	Y+1, r24	; 0x01
    3180:	90 91 25 02 	lds	r25, 0x0225
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	89 17       	cp	r24, r25
    3188:	08 f3       	brcs	.-62     	; 0x314c <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    318a:	82 e0       	ldi	r24, 0x02	; 2
    318c:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    318e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	cf 91       	pop	r28
    3196:	df 91       	pop	r29
    3198:	08 95       	ret

0000319a <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    319a:	df 93       	push	r29
    319c:	cf 93       	push	r28
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <Buzzer_enu_TurnOffAllBuzzers+0x6>
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    31a8:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    31aa:	19 82       	std	Y+1, r1	; 0x01
    31ac:	1a c0       	rjmp	.+52     	; 0x31e2 <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	88 0f       	add	r24, r24
    31b6:	99 1f       	adc	r25, r25
    31b8:	fc 01       	movw	r30, r24
    31ba:	ea 5d       	subi	r30, 0xDA	; 218
    31bc:	fd 4f       	sbci	r31, 0xFD	; 253
    31be:	20 81       	ld	r18, Z
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	88 2f       	mov	r24, r24
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	fc 01       	movw	r30, r24
    31cc:	e9 5d       	subi	r30, 0xD9	; 217
    31ce:	fd 4f       	sbci	r31, 0xFD	; 253
    31d0:	90 81       	ld	r25, Z
    31d2:	82 2f       	mov	r24, r18
    31d4:	69 2f       	mov	r22, r25
    31d6:	40 e0       	ldi	r20, 0x00	; 0
    31d8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	8f 5f       	subi	r24, 0xFF	; 255
    31e0:	89 83       	std	Y+1, r24	; 0x01
    31e2:	90 91 25 02 	lds	r25, 0x0225
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	89 17       	cp	r24, r25
    31ea:	08 f3       	brcs	.-62     	; 0x31ae <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    31ec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <main>:
 int main ()
 {
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
	 return 0;
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	90 e0       	ldi	r25, 0x00	; 0
 }
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <__mulsi3>:
    320a:	62 9f       	mul	r22, r18
    320c:	d0 01       	movw	r26, r0
    320e:	73 9f       	mul	r23, r19
    3210:	f0 01       	movw	r30, r0
    3212:	82 9f       	mul	r24, r18
    3214:	e0 0d       	add	r30, r0
    3216:	f1 1d       	adc	r31, r1
    3218:	64 9f       	mul	r22, r20
    321a:	e0 0d       	add	r30, r0
    321c:	f1 1d       	adc	r31, r1
    321e:	92 9f       	mul	r25, r18
    3220:	f0 0d       	add	r31, r0
    3222:	83 9f       	mul	r24, r19
    3224:	f0 0d       	add	r31, r0
    3226:	74 9f       	mul	r23, r20
    3228:	f0 0d       	add	r31, r0
    322a:	65 9f       	mul	r22, r21
    322c:	f0 0d       	add	r31, r0
    322e:	99 27       	eor	r25, r25
    3230:	72 9f       	mul	r23, r18
    3232:	b0 0d       	add	r27, r0
    3234:	e1 1d       	adc	r30, r1
    3236:	f9 1f       	adc	r31, r25
    3238:	63 9f       	mul	r22, r19
    323a:	b0 0d       	add	r27, r0
    323c:	e1 1d       	adc	r30, r1
    323e:	f9 1f       	adc	r31, r25
    3240:	bd 01       	movw	r22, r26
    3242:	cf 01       	movw	r24, r30
    3244:	11 24       	eor	r1, r1
    3246:	08 95       	ret

00003248 <__udivmodsi4>:
    3248:	a1 e2       	ldi	r26, 0x21	; 33
    324a:	1a 2e       	mov	r1, r26
    324c:	aa 1b       	sub	r26, r26
    324e:	bb 1b       	sub	r27, r27
    3250:	fd 01       	movw	r30, r26
    3252:	0d c0       	rjmp	.+26     	; 0x326e <__udivmodsi4_ep>

00003254 <__udivmodsi4_loop>:
    3254:	aa 1f       	adc	r26, r26
    3256:	bb 1f       	adc	r27, r27
    3258:	ee 1f       	adc	r30, r30
    325a:	ff 1f       	adc	r31, r31
    325c:	a2 17       	cp	r26, r18
    325e:	b3 07       	cpc	r27, r19
    3260:	e4 07       	cpc	r30, r20
    3262:	f5 07       	cpc	r31, r21
    3264:	20 f0       	brcs	.+8      	; 0x326e <__udivmodsi4_ep>
    3266:	a2 1b       	sub	r26, r18
    3268:	b3 0b       	sbc	r27, r19
    326a:	e4 0b       	sbc	r30, r20
    326c:	f5 0b       	sbc	r31, r21

0000326e <__udivmodsi4_ep>:
    326e:	66 1f       	adc	r22, r22
    3270:	77 1f       	adc	r23, r23
    3272:	88 1f       	adc	r24, r24
    3274:	99 1f       	adc	r25, r25
    3276:	1a 94       	dec	r1
    3278:	69 f7       	brne	.-38     	; 0x3254 <__udivmodsi4_loop>
    327a:	60 95       	com	r22
    327c:	70 95       	com	r23
    327e:	80 95       	com	r24
    3280:	90 95       	com	r25
    3282:	9b 01       	movw	r18, r22
    3284:	ac 01       	movw	r20, r24
    3286:	bd 01       	movw	r22, r26
    3288:	cf 01       	movw	r24, r30
    328a:	08 95       	ret

0000328c <__divmodsi4>:
    328c:	97 fb       	bst	r25, 7
    328e:	09 2e       	mov	r0, r25
    3290:	05 26       	eor	r0, r21
    3292:	0e d0       	rcall	.+28     	; 0x32b0 <__divmodsi4_neg1>
    3294:	57 fd       	sbrc	r21, 7
    3296:	04 d0       	rcall	.+8      	; 0x32a0 <__divmodsi4_neg2>
    3298:	d7 df       	rcall	.-82     	; 0x3248 <__udivmodsi4>
    329a:	0a d0       	rcall	.+20     	; 0x32b0 <__divmodsi4_neg1>
    329c:	00 1c       	adc	r0, r0
    329e:	38 f4       	brcc	.+14     	; 0x32ae <__divmodsi4_exit>

000032a0 <__divmodsi4_neg2>:
    32a0:	50 95       	com	r21
    32a2:	40 95       	com	r20
    32a4:	30 95       	com	r19
    32a6:	21 95       	neg	r18
    32a8:	3f 4f       	sbci	r19, 0xFF	; 255
    32aa:	4f 4f       	sbci	r20, 0xFF	; 255
    32ac:	5f 4f       	sbci	r21, 0xFF	; 255

000032ae <__divmodsi4_exit>:
    32ae:	08 95       	ret

000032b0 <__divmodsi4_neg1>:
    32b0:	f6 f7       	brtc	.-4      	; 0x32ae <__divmodsi4_exit>
    32b2:	90 95       	com	r25
    32b4:	80 95       	com	r24
    32b6:	70 95       	com	r23
    32b8:	61 95       	neg	r22
    32ba:	7f 4f       	sbci	r23, 0xFF	; 255
    32bc:	8f 4f       	sbci	r24, 0xFF	; 255
    32be:	9f 4f       	sbci	r25, 0xFF	; 255
    32c0:	08 95       	ret

000032c2 <__prologue_saves__>:
    32c2:	2f 92       	push	r2
    32c4:	3f 92       	push	r3
    32c6:	4f 92       	push	r4
    32c8:	5f 92       	push	r5
    32ca:	6f 92       	push	r6
    32cc:	7f 92       	push	r7
    32ce:	8f 92       	push	r8
    32d0:	9f 92       	push	r9
    32d2:	af 92       	push	r10
    32d4:	bf 92       	push	r11
    32d6:	cf 92       	push	r12
    32d8:	df 92       	push	r13
    32da:	ef 92       	push	r14
    32dc:	ff 92       	push	r15
    32de:	0f 93       	push	r16
    32e0:	1f 93       	push	r17
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	ca 1b       	sub	r28, r26
    32ec:	db 0b       	sbc	r29, r27
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	09 94       	ijmp

000032fa <__epilogue_restores__>:
    32fa:	2a 88       	ldd	r2, Y+18	; 0x12
    32fc:	39 88       	ldd	r3, Y+17	; 0x11
    32fe:	48 88       	ldd	r4, Y+16	; 0x10
    3300:	5f 84       	ldd	r5, Y+15	; 0x0f
    3302:	6e 84       	ldd	r6, Y+14	; 0x0e
    3304:	7d 84       	ldd	r7, Y+13	; 0x0d
    3306:	8c 84       	ldd	r8, Y+12	; 0x0c
    3308:	9b 84       	ldd	r9, Y+11	; 0x0b
    330a:	aa 84       	ldd	r10, Y+10	; 0x0a
    330c:	b9 84       	ldd	r11, Y+9	; 0x09
    330e:	c8 84       	ldd	r12, Y+8	; 0x08
    3310:	df 80       	ldd	r13, Y+7	; 0x07
    3312:	ee 80       	ldd	r14, Y+6	; 0x06
    3314:	fd 80       	ldd	r15, Y+5	; 0x05
    3316:	0c 81       	ldd	r16, Y+4	; 0x04
    3318:	1b 81       	ldd	r17, Y+3	; 0x03
    331a:	aa 81       	ldd	r26, Y+2	; 0x02
    331c:	b9 81       	ldd	r27, Y+1	; 0x01
    331e:	ce 0f       	add	r28, r30
    3320:	d1 1d       	adc	r29, r1
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	ed 01       	movw	r28, r26
    332e:	08 95       	ret

00003330 <_exit>:
    3330:	f8 94       	cli

00003332 <__stop_program>:
    3332:	ff cf       	rjmp	.-2      	; 0x3332 <__stop_program>
