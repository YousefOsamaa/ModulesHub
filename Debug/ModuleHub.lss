
ModuleHub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  00003e20  00003eb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001aa  008001aa  00003ffe  2**0
                  ALLOC
  3 .stab         000053a0  00000000  00000000  00004000  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000021e7  00000000  00000000  000093a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b587  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f1  00000000  00000000  0000b727  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228e  00000000  00000000  0000b918  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ca  00000000  00000000  0000dba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d4  00000000  00000000  0000ee70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ff44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c9  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ea  00000000  00000000  000103cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010cb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__vector_1>
       8:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_2>
       c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <main>
      8a:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d7 1e 	jmp	0x3dae	; 0x3dae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e3 1e 	jmp	0x3dc6	; 0x3dc6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e3 1e 	jmp	0x3dc6	; 0x3dc6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d7 1e 	jmp	0x3dae	; 0x3dae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e3 1e 	jmp	0x3dc6	; 0x3dc6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e3 1e 	jmp	0x3dc6	; 0x3dc6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e3 1e 	jmp	0x3dc6	; 0x3dc6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e3 1e 	jmp	0x3dc6	; 0x3dc6 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__epilogue_restores__+0x18>

000007b2 <__fixsfsi>:
     7b2:	ac e0       	ldi	r26, 0x0C	; 12
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <__prologue_saves__+0x20>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	be 01       	movw	r22, r28
     7cc:	6b 5f       	subi	r22, 0xFB	; 251
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f1       	breq	.+88     	; 0x832 <__fixsfsi+0x80>
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	50 f1       	brcs	.+84     	; 0x832 <__fixsfsi+0x80>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	21 f4       	brne	.+8      	; 0x7ea <__fixsfsi+0x38>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	88 23       	and	r24, r24
     7e6:	51 f1       	breq	.+84     	; 0x83c <__fixsfsi+0x8a>
     7e8:	2e c0       	rjmp	.+92     	; 0x846 <__fixsfsi+0x94>
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	38 85       	ldd	r19, Y+8	; 0x08
     7ee:	37 fd       	sbrc	r19, 7
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <__fixsfsi+0x80>
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	2f 31       	cpi	r18, 0x1F	; 31
     7f6:	31 05       	cpc	r19, r1
     7f8:	1c f0       	brlt	.+6      	; 0x800 <__fixsfsi+0x4e>
     7fa:	66 23       	and	r22, r22
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__fixsfsi+0x8a>
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <__fixsfsi+0x94>
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	29 85       	ldd	r18, Y+9	; 0x09
     80a:	3a 85       	ldd	r19, Y+10	; 0x0a
     80c:	4b 85       	ldd	r20, Y+11	; 0x0b
     80e:	5c 85       	ldd	r21, Y+12	; 0x0c
     810:	04 c0       	rjmp	.+8      	; 0x81a <__fixsfsi+0x68>
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	37 95       	ror	r19
     818:	27 95       	ror	r18
     81a:	8a 95       	dec	r24
     81c:	d2 f7       	brpl	.-12     	; 0x812 <__fixsfsi+0x60>
     81e:	66 23       	and	r22, r22
     820:	b1 f0       	breq	.+44     	; 0x84e <__fixsfsi+0x9c>
     822:	50 95       	com	r21
     824:	40 95       	com	r20
     826:	30 95       	com	r19
     828:	21 95       	neg	r18
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	0e c0       	rjmp	.+28     	; 0x84e <__fixsfsi+0x9c>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__fixsfsi+0x9c>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f ef       	ldi	r20, 0xFF	; 255
     842:	5f e7       	ldi	r21, 0x7F	; 127
     844:	04 c0       	rjmp	.+8      	; 0x84e <__fixsfsi+0x9c>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e8       	ldi	r21, 0x80	; 128
     84e:	b9 01       	movw	r22, r18
     850:	ca 01       	movw	r24, r20
     852:	2c 96       	adiw	r28, 0x0c	; 12
     854:	e2 e0       	ldi	r30, 0x02	; 2
     856:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <__epilogue_restores__+0x20>

0000085a <__floatunsisf>:
     85a:	a8 e0       	ldi	r26, 0x08	; 8
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e3 e3       	ldi	r30, 0x33	; 51
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__prologue_saves__+0x10>
     866:	7b 01       	movw	r14, r22
     868:	8c 01       	movw	r16, r24
     86a:	61 15       	cp	r22, r1
     86c:	71 05       	cpc	r23, r1
     86e:	81 05       	cpc	r24, r1
     870:	91 05       	cpc	r25, r1
     872:	19 f4       	brne	.+6      	; 0x87a <__stack+0x1b>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	60 c0       	rjmp	.+192    	; 0x93a <__stack+0xdb>
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	c8 2e       	mov	r12, r24
     882:	d1 2c       	mov	r13, r1
     884:	dc 82       	std	Y+4, r13	; 0x04
     886:	cb 82       	std	Y+3, r12	; 0x03
     888:	ed 82       	std	Y+5, r14	; 0x05
     88a:	fe 82       	std	Y+6, r15	; 0x06
     88c:	0f 83       	std	Y+7, r16	; 0x07
     88e:	18 87       	std	Y+8, r17	; 0x08
     890:	c8 01       	movw	r24, r16
     892:	b7 01       	movw	r22, r14
     894:	0e 94 a6 04 	call	0x94c	; 0x94c <__clzsi2>
     898:	fc 01       	movw	r30, r24
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f7 ff       	sbrs	r31, 7
     89e:	3b c0       	rjmp	.+118    	; 0x916 <__stack+0xb7>
     8a0:	22 27       	eor	r18, r18
     8a2:	33 27       	eor	r19, r19
     8a4:	2e 1b       	sub	r18, r30
     8a6:	3f 0b       	sbc	r19, r31
     8a8:	57 01       	movw	r10, r14
     8aa:	68 01       	movw	r12, r16
     8ac:	02 2e       	mov	r0, r18
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	d6 94       	lsr	r13
     8b2:	c7 94       	ror	r12
     8b4:	b7 94       	ror	r11
     8b6:	a7 94       	ror	r10
     8b8:	0a 94       	dec	r0
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <__stack+0x51>
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	2a 95       	dec	r18
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__stack+0x6f>
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	a1 09       	sbc	r26, r1
     8de:	b1 09       	sbc	r27, r1
     8e0:	8e 21       	and	r24, r14
     8e2:	9f 21       	and	r25, r15
     8e4:	a0 23       	and	r26, r16
     8e6:	b1 23       	and	r27, r17
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	4a 29       	or	r20, r10
     8fa:	5b 29       	or	r21, r11
     8fc:	6c 29       	or	r22, r12
     8fe:	7d 29       	or	r23, r13
     900:	4d 83       	std	Y+5, r20	; 0x05
     902:	5e 83       	std	Y+6, r21	; 0x06
     904:	6f 83       	std	Y+7, r22	; 0x07
     906:	78 87       	std	Y+8, r23	; 0x08
     908:	8e e1       	ldi	r24, 0x1E	; 30
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	8e 1b       	sub	r24, r30
     90e:	9f 0b       	sbc	r25, r31
     910:	9c 83       	std	Y+4, r25	; 0x04
     912:	8b 83       	std	Y+3, r24	; 0x03
     914:	12 c0       	rjmp	.+36     	; 0x93a <__stack+0xdb>
     916:	30 97       	sbiw	r30, 0x00	; 0
     918:	81 f0       	breq	.+32     	; 0x93a <__stack+0xdb>
     91a:	0e 2e       	mov	r0, r30
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0xc7>
     91e:	ee 0c       	add	r14, r14
     920:	ff 1c       	adc	r15, r15
     922:	00 1f       	adc	r16, r16
     924:	11 1f       	adc	r17, r17
     926:	0a 94       	dec	r0
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0xbf>
     92a:	ed 82       	std	Y+5, r14	; 0x05
     92c:	fe 82       	std	Y+6, r15	; 0x06
     92e:	0f 83       	std	Y+7, r16	; 0x07
     930:	18 87       	std	Y+8, r17	; 0x08
     932:	ce 1a       	sub	r12, r30
     934:	df 0a       	sbc	r13, r31
     936:	dc 82       	std	Y+4, r13	; 0x04
     938:	cb 82       	std	Y+3, r12	; 0x03
     93a:	1a 82       	std	Y+2, r1	; 0x02
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     944:	28 96       	adiw	r28, 0x08	; 8
     946:	ea e0       	ldi	r30, 0x0A	; 10
     948:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__epilogue_restores__+0x10>

0000094c <__clzsi2>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	7b 01       	movw	r14, r22
     956:	8c 01       	movw	r16, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	e8 16       	cp	r14, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	f8 06       	cpc	r15, r24
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 07       	cpc	r16, r24
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	18 07       	cpc	r17, r24
     968:	88 f4       	brcc	.+34     	; 0x98c <__clzsi2+0x40>
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	e8 16       	cp	r14, r24
     96e:	f1 04       	cpc	r15, r1
     970:	01 05       	cpc	r16, r1
     972:	11 05       	cpc	r17, r1
     974:	31 f0       	breq	.+12     	; 0x982 <__clzsi2+0x36>
     976:	28 f0       	brcs	.+10     	; 0x982 <__clzsi2+0x36>
     978:	88 e0       	ldi	r24, 0x08	; 8
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	17 c0       	rjmp	.+46     	; 0x9b0 <__clzsi2+0x64>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <__clzsi2+0x64>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	e8 16       	cp	r14, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	f8 06       	cpc	r15, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	08 07       	cpc	r16, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	18 07       	cpc	r17, r24
     99c:	28 f0       	brcs	.+10     	; 0x9a8 <__clzsi2+0x5c>
     99e:	88 e1       	ldi	r24, 0x18	; 24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__clzsi2+0x64>
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	20 e2       	ldi	r18, 0x20	; 32
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	4a 0b       	sbc	r20, r26
     9be:	5b 0b       	sbc	r21, r27
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__clzsi2+0x7e>
     9c2:	16 95       	lsr	r17
     9c4:	07 95       	ror	r16
     9c6:	f7 94       	ror	r15
     9c8:	e7 94       	ror	r14
     9ca:	8a 95       	dec	r24
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__clzsi2+0x76>
     9ce:	f7 01       	movw	r30, r14
     9d0:	e8 59       	subi	r30, 0x98	; 152
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	80 81       	ld	r24, Z
     9d6:	28 1b       	sub	r18, r24
     9d8:	31 09       	sbc	r19, r1
     9da:	41 09       	sbc	r20, r1
     9dc:	51 09       	sbc	r21, r1
     9de:	c9 01       	movw	r24, r18
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <__pack_f>:
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	fc 01       	movw	r30, r24
     9f6:	e4 80       	ldd	r14, Z+4	; 0x04
     9f8:	f5 80       	ldd	r15, Z+5	; 0x05
     9fa:	06 81       	ldd	r16, Z+6	; 0x06
     9fc:	17 81       	ldd	r17, Z+7	; 0x07
     9fe:	d1 80       	ldd	r13, Z+1	; 0x01
     a00:	80 81       	ld	r24, Z
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	48 f4       	brcc	.+18     	; 0xa18 <__pack_f+0x2e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e1       	ldi	r26, 0x10	; 16
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 2a       	or	r14, r24
     a10:	f9 2a       	or	r15, r25
     a12:	0a 2b       	or	r16, r26
     a14:	1b 2b       	or	r17, r27
     a16:	a5 c0       	rjmp	.+330    	; 0xb62 <__pack_f+0x178>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__pack_f+0x34>
     a1c:	9f c0       	rjmp	.+318    	; 0xb5c <__pack_f+0x172>
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	21 f4       	brne	.+8      	; 0xa2a <__pack_f+0x40>
     a22:	ee 24       	eor	r14, r14
     a24:	ff 24       	eor	r15, r15
     a26:	87 01       	movw	r16, r14
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <__pack_f+0x4a>
     a2a:	e1 14       	cp	r14, r1
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__pack_f+0x50>
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	96 c0       	rjmp	.+300    	; 0xb66 <__pack_f+0x17c>
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	62 38       	cpi	r22, 0x82	; 130
     a42:	79 07       	cpc	r23, r25
     a44:	0c f0       	brlt	.+2      	; 0xa48 <__pack_f+0x5e>
     a46:	5b c0       	rjmp	.+182    	; 0xafe <__pack_f+0x114>
     a48:	22 e8       	ldi	r18, 0x82	; 130
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	26 1b       	sub	r18, r22
     a4e:	37 0b       	sbc	r19, r23
     a50:	2a 31       	cpi	r18, 0x1A	; 26
     a52:	31 05       	cpc	r19, r1
     a54:	2c f0       	brlt	.+10     	; 0xa60 <__pack_f+0x76>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	2a c0       	rjmp	.+84     	; 0xab4 <__pack_f+0xca>
     a60:	b8 01       	movw	r22, r16
     a62:	a7 01       	movw	r20, r14
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0x86>
     a68:	76 95       	lsr	r23
     a6a:	67 95       	ror	r22
     a6c:	57 95       	ror	r21
     a6e:	47 95       	ror	r20
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__pack_f+0x7e>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__pack_f+0x9c>
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	2a 95       	dec	r18
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__pack_f+0x94>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	a1 09       	sbc	r26, r1
     a8e:	b1 09       	sbc	r27, r1
     a90:	8e 21       	and	r24, r14
     a92:	9f 21       	and	r25, r15
     a94:	a0 23       	and	r26, r16
     a96:	b1 23       	and	r27, r17
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 05       	cpc	r26, r1
     a9c:	b1 05       	cpc	r27, r1
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <__pack_f+0xbe>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	9a 01       	movw	r18, r20
     aaa:	ab 01       	movw	r20, r22
     aac:	28 2b       	or	r18, r24
     aae:	39 2b       	or	r19, r25
     ab0:	4a 2b       	or	r20, r26
     ab2:	5b 2b       	or	r21, r27
     ab4:	da 01       	movw	r26, r20
     ab6:	c9 01       	movw	r24, r18
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	a0 70       	andi	r26, 0x00	; 0
     abe:	b0 70       	andi	r27, 0x00	; 0
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__pack_f+0xee>
     aca:	27 ff       	sbrs	r18, 7
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__pack_f+0xf6>
     ace:	20 5c       	subi	r18, 0xC0	; 192
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	4f 4f       	sbci	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__pack_f+0xf6>
     ad8:	21 5c       	subi	r18, 0xC1	; 193
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	3a 07       	cpc	r19, r26
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	4a 07       	cpc	r20, r26
     aee:	a0 e4       	ldi	r26, 0x40	; 64
     af0:	5a 07       	cpc	r21, r26
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <__pack_f+0x10e>
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	79 01       	movw	r14, r18
     afa:	8a 01       	movw	r16, r20
     afc:	27 c0       	rjmp	.+78     	; 0xb4c <__pack_f+0x162>
     afe:	60 38       	cpi	r22, 0x80	; 128
     b00:	71 05       	cpc	r23, r1
     b02:	64 f5       	brge	.+88     	; 0xb5c <__pack_f+0x172>
     b04:	fb 01       	movw	r30, r22
     b06:	e1 58       	subi	r30, 0x81	; 129
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	d8 01       	movw	r26, r16
     b0c:	c7 01       	movw	r24, r14
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	90 70       	andi	r25, 0x00	; 0
     b12:	a0 70       	andi	r26, 0x00	; 0
     b14:	b0 70       	andi	r27, 0x00	; 0
     b16:	80 34       	cpi	r24, 0x40	; 64
     b18:	91 05       	cpc	r25, r1
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__pack_f+0x144>
     b20:	e7 fe       	sbrs	r14, 7
     b22:	0d c0       	rjmp	.+26     	; 0xb3e <__pack_f+0x154>
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__pack_f+0x14c>
     b2e:	8f e3       	ldi	r24, 0x3F	; 63
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e8 0e       	add	r14, r24
     b38:	f9 1e       	adc	r15, r25
     b3a:	0a 1f       	adc	r16, r26
     b3c:	1b 1f       	adc	r17, r27
     b3e:	17 ff       	sbrs	r17, 7
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__pack_f+0x162>
     b42:	16 95       	lsr	r17
     b44:	07 95       	ror	r16
     b46:	f7 94       	ror	r15
     b48:	e7 94       	ror	r14
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	16 95       	lsr	r17
     b50:	07 95       	ror	r16
     b52:	f7 94       	ror	r15
     b54:	e7 94       	ror	r14
     b56:	8a 95       	dec	r24
     b58:	d1 f7       	brne	.-12     	; 0xb4e <__pack_f+0x164>
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <__pack_f+0x17c>
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	87 01       	movw	r16, r14
     b62:	ef ef       	ldi	r30, 0xFF	; 255
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	6e 2f       	mov	r22, r30
     b68:	67 95       	ror	r22
     b6a:	66 27       	eor	r22, r22
     b6c:	67 95       	ror	r22
     b6e:	90 2f       	mov	r25, r16
     b70:	9f 77       	andi	r25, 0x7F	; 127
     b72:	d7 94       	ror	r13
     b74:	dd 24       	eor	r13, r13
     b76:	d7 94       	ror	r13
     b78:	8e 2f       	mov	r24, r30
     b7a:	86 95       	lsr	r24
     b7c:	49 2f       	mov	r20, r25
     b7e:	46 2b       	or	r20, r22
     b80:	58 2f       	mov	r21, r24
     b82:	5d 29       	or	r21, r13
     b84:	b7 01       	movw	r22, r14
     b86:	ca 01       	movw	r24, r20
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <__unpack_f>:
     b94:	fc 01       	movw	r30, r24
     b96:	db 01       	movw	r26, r22
     b98:	40 81       	ld	r20, Z
     b9a:	51 81       	ldd	r21, Z+1	; 0x01
     b9c:	22 81       	ldd	r18, Z+2	; 0x02
     b9e:	62 2f       	mov	r22, r18
     ba0:	6f 77       	andi	r22, 0x7F	; 127
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	22 1f       	adc	r18, r18
     ba6:	22 27       	eor	r18, r18
     ba8:	22 1f       	adc	r18, r18
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	89 2f       	mov	r24, r25
     bae:	88 0f       	add	r24, r24
     bb0:	82 2b       	or	r24, r18
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	99 1f       	adc	r25, r25
     bb8:	99 27       	eor	r25, r25
     bba:	99 1f       	adc	r25, r25
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	11 97       	sbiw	r26, 0x01	; 1
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	a9 f5       	brne	.+106    	; 0xc32 <__unpack_f+0x9e>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <__unpack_f+0x42>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	37 c0       	rjmp	.+110    	; 0xc44 <__unpack_f+0xb0>
     bd6:	82 e8       	ldi	r24, 0x82	; 130
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	9c 93       	st	X, r25
     bde:	8e 93       	st	-X, r24
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	9a 01       	movw	r18, r20
     be4:	ab 01       	movw	r20, r22
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	6a 95       	dec	r22
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__unpack_f+0x54>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	8c 93       	st	X, r24
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__unpack_f+0x80>
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	44 1f       	adc	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 93       	st	X, r25
     c10:	8e 93       	st	-X, r24
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	20 30       	cpi	r18, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	38 07       	cpc	r19, r24
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	48 07       	cpc	r20, r24
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	58 07       	cpc	r21, r24
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__unpack_f+0x66>
     c24:	14 96       	adiw	r26, 0x04	; 4
     c26:	2d 93       	st	X+, r18
     c28:	3d 93       	st	X+, r19
     c2a:	4d 93       	st	X+, r20
     c2c:	5c 93       	st	X, r21
     c2e:	17 97       	sbiw	r26, 0x07	; 7
     c30:	08 95       	ret
     c32:	2f 3f       	cpi	r18, 0xFF	; 255
     c34:	31 05       	cpc	r19, r1
     c36:	79 f4       	brne	.+30     	; 0xc56 <__unpack_f+0xc2>
     c38:	41 15       	cp	r20, r1
     c3a:	51 05       	cpc	r21, r1
     c3c:	61 05       	cpc	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	19 f4       	brne	.+6      	; 0xc48 <__unpack_f+0xb4>
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	08 95       	ret
     c48:	64 ff       	sbrs	r22, 4
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <__unpack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	8c 93       	st	X, r24
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <__unpack_f+0xe2>
     c52:	1c 92       	st	X, r1
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <__unpack_f+0xe2>
     c56:	2f 57       	subi	r18, 0x7F	; 127
     c58:	30 40       	sbci	r19, 0x00	; 0
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	3c 93       	st	X, r19
     c5e:	2e 93       	st	-X, r18
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	8c 93       	st	X, r24
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	8a 95       	dec	r24
     c72:	d1 f7       	brne	.-12     	; 0xc68 <__unpack_f+0xd4>
     c74:	70 64       	ori	r23, 0x40	; 64
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	4d 93       	st	X+, r20
     c7a:	5d 93       	st	X+, r21
     c7c:	6d 93       	st	X+, r22
     c7e:	7c 93       	st	X, r23
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	08 95       	ret

00000c84 <__fpcmp_parts_f>:
     c84:	1f 93       	push	r17
     c86:	dc 01       	movw	r26, r24
     c88:	fb 01       	movw	r30, r22
     c8a:	9c 91       	ld	r25, X
     c8c:	92 30       	cpi	r25, 0x02	; 2
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <__fpcmp_parts_f+0xe>
     c90:	47 c0       	rjmp	.+142    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c92:	80 81       	ld	r24, Z
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__fpcmp_parts_f+0x16>
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c9a:	94 30       	cpi	r25, 0x04	; 4
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <__fpcmp_parts_f+0x2e>
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	1c 91       	ld	r17, X
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	99 f5       	brne	.+102    	; 0xd0c <__fpcmp_parts_f+0x88>
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	68 2f       	mov	r22, r24
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	61 1b       	sub	r22, r17
     cae:	71 09       	sbc	r23, r1
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <__fpcmp_parts_f+0xac>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__fpcmp_parts_f+0x3a>
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__fpcmp_parts_f+0x42>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	b9 f1       	breq	.+110    	; 0xd2c <__fpcmp_parts_f+0xa8>
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	89 f1       	breq	.+98     	; 0xd26 <__fpcmp_parts_f+0xa2>
     cc4:	2d c0       	rjmp	.+90     	; 0xd20 <__fpcmp_parts_f+0x9c>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 91       	ld	r17, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	f1 f0       	breq	.+60     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	18 17       	cp	r17, r24
     cd4:	d9 f4       	brne	.+54     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	94 f0       	brlt	.+36     	; 0xd0c <__fpcmp_parts_f+0x88>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	bc f0       	brlt	.+46     	; 0xd1c <__fpcmp_parts_f+0x98>
     cee:	14 96       	adiw	r26, 0x04	; 4
     cf0:	8d 91       	ld	r24, X+
     cf2:	9d 91       	ld	r25, X+
     cf4:	0d 90       	ld	r0, X+
     cf6:	bc 91       	ld	r27, X
     cf8:	a0 2d       	mov	r26, r0
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	46 81       	ldd	r20, Z+6	; 0x06
     d00:	57 81       	ldd	r21, Z+7	; 0x07
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	4a 07       	cpc	r20, r26
     d08:	5b 07       	cpc	r21, r27
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <__fpcmp_parts_f+0x8e>
     d0c:	11 23       	and	r17, r17
     d0e:	41 f0       	breq	.+16     	; 0xd20 <__fpcmp_parts_f+0x9c>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <__fpcmp_parts_f+0xa2>
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	a4 07       	cpc	r26, r20
     d18:	b5 07       	cpc	r27, r21
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fpcmp_parts_f+0xa8>
     d1c:	11 23       	and	r17, r17
     d1e:	19 f0       	breq	.+6      	; 0xd26 <__fpcmp_parts_f+0xa2>
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <__fpcmp_parts_f+0xac>
     d26:	6f ef       	ldi	r22, 0xFF	; 255
     d28:	7f ef       	ldi	r23, 0xFF	; 255
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <__fpcmp_parts_f+0xac>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	cb 01       	movw	r24, r22
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
     d3e:	78 94       	sei
}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
     d4e:	f8 94       	cli

     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <EXTI_enu_Initialization+0x6>
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
     d64:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
     d66:	19 82       	std	Y+1, r1	; 0x01
     d68:	3b c0       	rjmp	.+118    	; 0xde0 <EXTI_enu_Initialization+0x8a>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	c9 01       	movw	r24, r18
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	82 0f       	add	r24, r18
     d78:	93 1f       	adc	r25, r19
     d7a:	fc 01       	movw	r30, r24
     d7c:	e7 59       	subi	r30, 0x97	; 151
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	40 81       	ld	r20, Z
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	c9 01       	movw	r24, r18
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	82 0f       	add	r24, r18
     d90:	93 1f       	adc	r25, r19
     d92:	fc 01       	movw	r30, r24
     d94:	e6 59       	subi	r30, 0x96	; 150
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	90 81       	ld	r25, Z
     d9a:	84 2f       	mov	r24, r20
     d9c:	69 2f       	mov	r22, r25
     d9e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	c9 01       	movw	r24, r18
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	fc 01       	movw	r30, r24
     db4:	e7 59       	subi	r30, 0x97	; 151
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	40 81       	ld	r20, Z
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	c9 01       	movw	r24, r18
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	82 0f       	add	r24, r18
     dc8:	93 1f       	adc	r25, r19
     dca:	fc 01       	movw	r30, r24
     dcc:	e5 59       	subi	r30, 0x95	; 149
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	90 81       	ld	r25, Z
     dd2:	84 2f       	mov	r24, r20
     dd4:	69 2f       	mov	r22, r25
     dd6:	0e 94 cc 08 	call	0x1198	; 0x1198 <enu_SetSenseLevel>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	90 91 68 01 	lds	r25, 0x0168
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	89 17       	cp	r24, r25
     de8:	08 f4       	brcc	.+2      	; 0xdec <EXTI_enu_Initialization+0x96>
     dea:	bf cf       	rjmp	.-130    	; 0xd6a <EXTI_enu_Initialization+0x14>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    }
    
    Local_u8_ErrorFlag = ES_OK;
     dec:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <EXTI_enu_ISC+0x6>
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	8a 83       	std	Y+2, r24	; 0x02
     e08:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	6b 81       	ldd	r22, Y+3	; 0x03
     e12:	0e 94 cc 08 	call	0x1198	; 0x1198 <enu_SetSenseLevel>
     e16:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <EXTI_enu_INTMode+0x6>
     e2c:	0f 92       	push	r0
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	6b 81       	ldd	r22, Y+3	; 0x03
     e3e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <enu_SetMode>
     e42:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <EXTI_enu_GetPIF+0x6>
     e58:	00 d0       	rcall	.+0      	; 0xe5a <EXTI_enu_GetPIF+0x8>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <EXTI_enu_GetPIF+0xa>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	8a 83       	std	Y+2, r24	; 0x02
     e62:	7c 83       	std	Y+4, r23	; 0x04
     e64:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	d1 f1       	breq	.+116    	; 0xee6 <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	3e 83       	std	Y+6, r19	; 0x06
     e7a:	2d 83       	std	Y+5, r18	; 0x05
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	91 05       	cpc	r25, r1
     e84:	b1 f0       	breq	.+44     	; 0xeb2 <EXTI_enu_GetPIF+0x60>
     e86:	2d 81       	ldd	r18, Y+5	; 0x05
     e88:	3e 81       	ldd	r19, Y+6	; 0x06
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	31 05       	cpc	r19, r1
     e8e:	e1 f0       	breq	.+56     	; 0xec8 <EXTI_enu_GetPIF+0x76>
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
     e92:	9e 81       	ldd	r25, Y+6	; 0x06
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	21 f5       	brne	.+72     	; 0xee0 <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
     e98:	ea e5       	ldi	r30, 0x5A	; 90
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	82 95       	swap	r24
     ea0:	86 95       	lsr	r24
     ea2:	86 95       	lsr	r24
     ea4:	83 70       	andi	r24, 0x03	; 3
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	eb 81       	ldd	r30, Y+3	; 0x03
     eaa:	fc 81       	ldd	r31, Y+4	; 0x04
     eac:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     eae:	19 82       	std	Y+1, r1	; 0x01
     eb0:	1c c0       	rjmp	.+56     	; 0xeea <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
     eb2:	ea e5       	ldi	r30, 0x5A	; 90
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 1f       	adc	r24, r24
     eba:	88 27       	eor	r24, r24
     ebc:	88 1f       	adc	r24, r24
     ebe:	eb 81       	ldd	r30, Y+3	; 0x03
     ec0:	fc 81       	ldd	r31, Y+4	; 0x04
     ec2:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     ec4:	19 82       	std	Y+1, r1	; 0x01
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
     ec8:	ea e5       	ldi	r30, 0x5A	; 90
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	82 95       	swap	r24
     ed0:	86 95       	lsr	r24
     ed2:	87 70       	andi	r24, 0x07	; 7
     ed4:	81 70       	andi	r24, 0x01	; 1
     ed6:	eb 81       	ldd	r30, Y+3	; 0x03
     ed8:	fc 81       	ldd	r31, Y+4	; 0x04
     eda:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     edc:	19 82       	std	Y+1, r1	; 0x01
     ede:	05 c0       	rjmp	.+10     	; 0xeea <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
     eea:	89 81       	ldd	r24, Y+1	; 0x01
}
     eec:	26 96       	adiw	r28, 0x06	; 6
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <EXTI_enu_SeTPIF>:

extern ErrorState_t EXTI_enu_SeTPIF (u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <EXTI_enu_SeTPIF+0x6>
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	8a 83       	std	Y+2, r24	; 0x02
     f0c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, Copy_u8_Value);
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	6b 81       	ldd	r22, Y+3	; 0x03
     f16:	0e 94 73 09 	call	0x12e6	; 0x12e6 <enu_SetFlagValue>
     f1a:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void))
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <EXTI_enu_SetCallBack+0x6>
     f30:	00 d0       	rcall	.+0      	; 0xf32 <EXTI_enu_SetCallBack+0x8>
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	8a 83       	std	Y+2, r24	; 0x02
     f38:	7c 83       	std	Y+4, r23	; 0x04
     f3a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	61 f0       	breq	.+24     	; 0xf60 <EXTI_enu_SetCallBack+0x36>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	fc 01       	movw	r30, r24
     f54:	e6 55       	subi	r30, 0x56	; 86
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	9c 81       	ldd	r25, Y+4	; 0x04
     f5c:	91 83       	std	Z+1, r25	; 0x01
     f5e:	80 83       	st	Z, r24
    }

    return Local_u8_ErrorFlag;
     f60:	89 81       	ldd	r24, Y+1	; 0x01
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
     f9a:	80 91 aa 01 	lds	r24, 0x01AA
     f9e:	90 91 ab 01 	lds	r25, 0x01AB
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	29 f0       	breq	.+10     	; 0xfb0 <__vector_1+0x40>
    {
        pfun_ISRPointers[EXTI_INT0] ();
     fa6:	e0 91 aa 01 	lds	r30, 0x01AA
     faa:	f0 91 ab 01 	lds	r31, 0x01AB
     fae:	09 95       	icall
    }
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_2>:
//INT1
void __vector_2 (void)
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	2f 93       	push	r18
     fe2:	3f 93       	push	r19
     fe4:	4f 93       	push	r20
     fe6:	5f 93       	push	r21
     fe8:	6f 93       	push	r22
     fea:	7f 93       	push	r23
     fec:	8f 93       	push	r24
     fee:	9f 93       	push	r25
     ff0:	af 93       	push	r26
     ff2:	bf 93       	push	r27
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
    1000:	80 91 ac 01 	lds	r24, 0x01AC
    1004:	90 91 ad 01 	lds	r25, 0x01AD
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	29 f0       	breq	.+10     	; 0x1016 <__vector_2+0x40>
    {
        pfun_ISRPointers[EXTI_INT1] ();
    100c:	e0 91 ac 01 	lds	r30, 0x01AC
    1010:	f0 91 ad 01 	lds	r31, 0x01AD
    1014:	09 95       	icall
    }
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	ff 91       	pop	r31
    101c:	ef 91       	pop	r30
    101e:	bf 91       	pop	r27
    1020:	af 91       	pop	r26
    1022:	9f 91       	pop	r25
    1024:	8f 91       	pop	r24
    1026:	7f 91       	pop	r23
    1028:	6f 91       	pop	r22
    102a:	5f 91       	pop	r21
    102c:	4f 91       	pop	r20
    102e:	3f 91       	pop	r19
    1030:	2f 91       	pop	r18
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	0f 90       	pop	r0
    1038:	1f 90       	pop	r1
    103a:	18 95       	reti

0000103c <__vector_3>:
//INT2
void __vector_3 (void)
{
    103c:	1f 92       	push	r1
    103e:	0f 92       	push	r0
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	0f 92       	push	r0
    1044:	11 24       	eor	r1, r1
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
    1066:	80 91 ae 01 	lds	r24, 0x01AE
    106a:	90 91 af 01 	lds	r25, 0x01AF
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	29 f0       	breq	.+10     	; 0x107c <__vector_3+0x40>
    {
        pfun_ISRPointers[EXTI_INT2] ();
    1072:	e0 91 ae 01 	lds	r30, 0x01AE
    1076:	f0 91 af 01 	lds	r31, 0x01AF
    107a:	09 95       	icall
    }
    
}
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	7f 91       	pop	r23
    108e:	6f 91       	pop	r22
    1090:	5f 91       	pop	r21
    1092:	4f 91       	pop	r20
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	0f 90       	pop	r0
    109e:	1f 90       	pop	r1
    10a0:	18 95       	reti

000010a2 <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <enu_SetMode+0x6>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <enu_SetMode+0x8>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	8a 83       	std	Y+2, r24	; 0x02
    10b2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	3d 83       	std	Y+5, r19	; 0x05
    10c0:	2c 83       	std	Y+4, r18	; 0x04
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	91 05       	cpc	r25, r1
    10ca:	29 f1       	breq	.+74     	; 0x1116 <enu_SetMode+0x74>
    10cc:	2c 81       	ldd	r18, Y+4	; 0x04
    10ce:	3d 81       	ldd	r19, Y+5	; 0x05
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	d9 f1       	breq	.+118    	; 0x114c <enu_SetMode+0xaa>
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <enu_SetMode+0x3e>
    10de:	51 c0       	rjmp	.+162    	; 0x1182 <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	49 f4       	brne	.+18     	; 0x10f8 <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
    10e6:	ab e5       	ldi	r26, 0x5B	; 91
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	eb e5       	ldi	r30, 0x5B	; 91
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 64       	ori	r24, 0x40	; 64
    10f2:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    10f4:	19 82       	std	Y+1, r1	; 0x01
    10f6:	47 c0       	rjmp	.+142    	; 0x1186 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 23       	and	r24, r24
    10fc:	49 f4       	brne	.+18     	; 0x1110 <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
    10fe:	ab e5       	ldi	r26, 0x5B	; 91
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	eb e5       	ldi	r30, 0x5B	; 91
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7b       	andi	r24, 0xBF	; 191
    110a:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    110c:	19 82       	std	Y+1, r1	; 0x01
    110e:	3b c0       	rjmp	.+118    	; 0x1186 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	38 c0       	rjmp	.+112    	; 0x1186 <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	49 f4       	brne	.+18     	; 0x112e <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
    111c:	ab e5       	ldi	r26, 0x5B	; 91
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	eb e5       	ldi	r30, 0x5B	; 91
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	80 68       	ori	r24, 0x80	; 128
    1128:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    112a:	19 82       	std	Y+1, r1	; 0x01
    112c:	2c c0       	rjmp	.+88     	; 0x1186 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	88 23       	and	r24, r24
    1132:	49 f4       	brne	.+18     	; 0x1146 <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
    1134:	ab e5       	ldi	r26, 0x5B	; 91
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	eb e5       	ldi	r30, 0x5B	; 91
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8f 77       	andi	r24, 0x7F	; 127
    1140:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1142:	19 82       	std	Y+1, r1	; 0x01
    1144:	20 c0       	rjmp	.+64     	; 0x1186 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	1d c0       	rjmp	.+58     	; 0x1186 <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	49 f4       	brne	.+18     	; 0x1164 <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
    1152:	ab e5       	ldi	r26, 0x5B	; 91
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	eb e5       	ldi	r30, 0x5B	; 91
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	80 62       	ori	r24, 0x20	; 32
    115e:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1160:	19 82       	std	Y+1, r1	; 0x01
    1162:	11 c0       	rjmp	.+34     	; 0x1186 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 23       	and	r24, r24
    1168:	49 f4       	brne	.+18     	; 0x117c <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
    116a:	ab e5       	ldi	r26, 0x5B	; 91
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb e5       	ldi	r30, 0x5B	; 91
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8f 7d       	andi	r24, 0xDF	; 223
    1176:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1178:	19 82       	std	Y+1, r1	; 0x01
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    1186:	89 81       	ldd	r24, Y+1	; 0x01
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <enu_SetSenseLevel+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <enu_SetSenseLevel+0x8>
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	8a 83       	std	Y+2, r24	; 0x02
    11a8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3d 83       	std	Y+5, r19	; 0x05
    11b6:	2c 83       	std	Y+4, r18	; 0x04
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	91 05       	cpc	r25, r1
    11c0:	e9 f1       	breq	.+122    	; 0x123c <enu_SetSenseLevel+0xa4>
    11c2:	2c 81       	ldd	r18, Y+4	; 0x04
    11c4:	3d 81       	ldd	r19, Y+5	; 0x05
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <enu_SetSenseLevel+0x36>
    11cc:	69 c0       	rjmp	.+210    	; 0x12a0 <enu_SetSenseLevel+0x108>
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <enu_SetSenseLevel+0x40>
    11d6:	7c c0       	rjmp	.+248    	; 0x12d0 <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
    11d8:	a5 e5       	ldi	r26, 0x55	; 85
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e5 e5       	ldi	r30, 0x55	; 85
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8c 7f       	andi	r24, 0xFC	; 252
    11e4:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	88 23       	and	r24, r24
    11ea:	11 f4       	brne	.+4      	; 0x11f0 <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    11ec:	19 82       	std	Y+1, r1	; 0x01
    11ee:	72 c0       	rjmp	.+228    	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	49 f4       	brne	.+18     	; 0x1208 <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
    11f6:	a5 e5       	ldi	r26, 0x55	; 85
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e5       	ldi	r30, 0x55	; 85
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	81 60       	ori	r24, 0x01	; 1
    1202:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1204:	19 82       	std	Y+1, r1	; 0x01
    1206:	66 c0       	rjmp	.+204    	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	82 30       	cpi	r24, 0x02	; 2
    120c:	41 f4       	brne	.+16     	; 0x121e <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
    120e:	a5 e5       	ldi	r26, 0x55	; 85
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e5 e5       	ldi	r30, 0x55	; 85
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	82 60       	ori	r24, 0x02	; 2
    121a:	8c 93       	st	X, r24
    121c:	5b c0       	rjmp	.+182    	; 0x12d4 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	49 f4       	brne	.+18     	; 0x1236 <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
    1224:	a5 e5       	ldi	r26, 0x55	; 85
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e5 e5       	ldi	r30, 0x55	; 85
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	83 60       	ori	r24, 0x03	; 3
    1230:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1232:	19 82       	std	Y+1, r1	; 0x01
    1234:	4f c0       	rjmp	.+158    	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	4c c0       	rjmp	.+152    	; 0x12d4 <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
    123c:	a5 e5       	ldi	r26, 0x55	; 85
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e5 e5       	ldi	r30, 0x55	; 85
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	83 7f       	andi	r24, 0xF3	; 243
    1248:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 23       	and	r24, r24
    124e:	11 f4       	brne	.+4      	; 0x1254 <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    1250:	19 82       	std	Y+1, r1	; 0x01
    1252:	40 c0       	rjmp	.+128    	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	49 f4       	brne	.+18     	; 0x126c <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
    125a:	a5 e5       	ldi	r26, 0x55	; 85
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e5 e5       	ldi	r30, 0x55	; 85
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	84 60       	ori	r24, 0x04	; 4
    1266:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1268:	19 82       	std	Y+1, r1	; 0x01
    126a:	34 c0       	rjmp	.+104    	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	41 f4       	brne	.+16     	; 0x1282 <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
    1272:	a5 e5       	ldi	r26, 0x55	; 85
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e5 e5       	ldi	r30, 0x55	; 85
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	88 60       	ori	r24, 0x08	; 8
    127e:	8c 93       	st	X, r24
    1280:	29 c0       	rjmp	.+82     	; 0x12d4 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	49 f4       	brne	.+18     	; 0x129a <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
    1288:	a5 e5       	ldi	r26, 0x55	; 85
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e5 e5       	ldi	r30, 0x55	; 85
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8c 60       	ori	r24, 0x0C	; 12
    1294:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1296:	19 82       	std	Y+1, r1	; 0x01
    1298:	1d c0       	rjmp	.+58     	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	1a c0       	rjmp	.+52     	; 0x12d4 <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	49 f4       	brne	.+18     	; 0x12b8 <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
    12a6:	a4 e5       	ldi	r26, 0x54	; 84
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e4 e5       	ldi	r30, 0x54	; 84
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 7b       	andi	r24, 0xBF	; 191
    12b2:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    12b4:	19 82       	std	Y+1, r1	; 0x01
    12b6:	0e c0       	rjmp	.+28     	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	59 f4       	brne	.+22     	; 0x12d4 <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
    12be:	a4 e5       	ldi	r26, 0x54	; 84
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e4 e5       	ldi	r30, 0x54	; 84
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 64       	ori	r24, 0x40	; 64
    12ca:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    12cc:	19 82       	std	Y+1, r1	; 0x01
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <enu_SetFlagValue+0x6>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <enu_SetFlagValue+0x8>
    12ee:	0f 92       	push	r0
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	3d 83       	std	Y+5, r19	; 0x05
    1304:	2c 83       	std	Y+4, r18	; 0x04
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	91 05       	cpc	r25, r1
    130e:	29 f1       	breq	.+74     	; 0x135a <enu_SetFlagValue+0x74>
    1310:	2c 81       	ldd	r18, Y+4	; 0x04
    1312:	3d 81       	ldd	r19, Y+5	; 0x05
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	d9 f1       	breq	.+118    	; 0x1390 <enu_SetFlagValue+0xaa>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	09 f0       	breq	.+2      	; 0x1324 <enu_SetFlagValue+0x3e>
    1322:	51 c0       	rjmp	.+162    	; 0x13c6 <enu_SetFlagValue+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	49 f4       	brne	.+18     	; 0x133c <enu_SetFlagValue+0x56>
            {
                GIFR |= ( 1 << GIFR_INTF0);
    132a:	aa e5       	ldi	r26, 0x5A	; 90
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	ea e5       	ldi	r30, 0x5A	; 90
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	80 64       	ori	r24, 0x40	; 64
    1336:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1338:	19 82       	std	Y+1, r1	; 0x01
    133a:	47 c0       	rjmp	.+142    	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	88 23       	and	r24, r24
    1340:	49 f4       	brne	.+18     	; 0x1354 <enu_SetFlagValue+0x6e>
            {
                GIFR &= ~( 1 << GIFR_INTF0);
    1342:	aa e5       	ldi	r26, 0x5A	; 90
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	ea e5       	ldi	r30, 0x5A	; 90
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8f 7b       	andi	r24, 0xBF	; 191
    134e:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1350:	19 82       	std	Y+1, r1	; 0x01
    1352:	3b c0       	rjmp	.+118    	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	38 c0       	rjmp	.+112    	; 0x13ca <enu_SetFlagValue+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	49 f4       	brne	.+18     	; 0x1372 <enu_SetFlagValue+0x8c>
            {
                GIFR |= ( 1 << GIFR_INTF1);
    1360:	aa e5       	ldi	r26, 0x5A	; 90
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ea e5       	ldi	r30, 0x5A	; 90
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	80 68       	ori	r24, 0x80	; 128
    136c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    136e:	19 82       	std	Y+1, r1	; 0x01
    1370:	2c c0       	rjmp	.+88     	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	88 23       	and	r24, r24
    1376:	49 f4       	brne	.+18     	; 0x138a <enu_SetFlagValue+0xa4>
            {
                GIFR &= ~( 1 << GIFR_INTF1);
    1378:	aa e5       	ldi	r26, 0x5A	; 90
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ea e5       	ldi	r30, 0x5A	; 90
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8f 77       	andi	r24, 0x7F	; 127
    1384:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1386:	19 82       	std	Y+1, r1	; 0x01
    1388:	20 c0       	rjmp	.+64     	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	1d c0       	rjmp	.+58     	; 0x13ca <enu_SetFlagValue+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	49 f4       	brne	.+18     	; 0x13a8 <enu_SetFlagValue+0xc2>
            {
                GIFR |= ( 1 << GIFR_INTF2);
    1396:	aa e5       	ldi	r26, 0x5A	; 90
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ea e5       	ldi	r30, 0x5A	; 90
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 62       	ori	r24, 0x20	; 32
    13a2:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	11 c0       	rjmp	.+34     	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	88 23       	and	r24, r24
    13ac:	49 f4       	brne	.+18     	; 0x13c0 <enu_SetFlagValue+0xda>
            {
                GIFR &= ~( 1 << GIFR_INTF2);
    13ae:	aa e5       	ldi	r26, 0x5A	; 90
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	ea e5       	ldi	r30, 0x5A	; 90
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8f 7d       	andi	r24, 0xDF	; 223
    13ba:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    13bc:	19 82       	std	Y+1, r1	; 0x01
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <enu_SetFlagValue+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	0f 92       	push	r0
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    13ea:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <DIO_enu_SetPinDiretion+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <DIO_enu_SetPinDiretion+0x8>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <DIO_enu_SetPinDiretion+0xa>
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	8a 83       	std	Y+2, r24	; 0x02
    1406:	6b 83       	std	Y+3, r22	; 0x03
    1408:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	08 f0       	brcs	.+2      	; 0x1416 <DIO_enu_SetPinDiretion+0x20>
    1414:	d0 c0       	rjmp	.+416    	; 0x15b6 <DIO_enu_SetPinDiretion+0x1c0>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 30       	cpi	r24, 0x08	; 8
    141a:	08 f0       	brcs	.+2      	; 0x141e <DIO_enu_SetPinDiretion+0x28>
    141c:	cc c0       	rjmp	.+408    	; 0x15b6 <DIO_enu_SetPinDiretion+0x1c0>
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	08 f0       	brcs	.+2      	; 0x1426 <DIO_enu_SetPinDiretion+0x30>
    1424:	c8 c0       	rjmp	.+400    	; 0x15b6 <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3e 83       	std	Y+6, r19	; 0x06
    142e:	2d 83       	std	Y+5, r18	; 0x05
    1430:	6d 81       	ldd	r22, Y+5	; 0x05
    1432:	7e 81       	ldd	r23, Y+6	; 0x06
    1434:	61 30       	cpi	r22, 0x01	; 1
    1436:	71 05       	cpc	r23, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <DIO_enu_SetPinDiretion+0x46>
    143a:	41 c0       	rjmp	.+130    	; 0x14be <DIO_enu_SetPinDiretion+0xc8>
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	9e 81       	ldd	r25, Y+6	; 0x06
    1440:	82 30       	cpi	r24, 0x02	; 2
    1442:	91 05       	cpc	r25, r1
    1444:	34 f4       	brge	.+12     	; 0x1452 <DIO_enu_SetPinDiretion+0x5c>
    1446:	2d 81       	ldd	r18, Y+5	; 0x05
    1448:	3e 81       	ldd	r19, Y+6	; 0x06
    144a:	21 15       	cp	r18, r1
    144c:	31 05       	cpc	r19, r1
    144e:	71 f0       	breq	.+28     	; 0x146c <DIO_enu_SetPinDiretion+0x76>
    1450:	b0 c0       	rjmp	.+352    	; 0x15b2 <DIO_enu_SetPinDiretion+0x1bc>
    1452:	6d 81       	ldd	r22, Y+5	; 0x05
    1454:	7e 81       	ldd	r23, Y+6	; 0x06
    1456:	62 30       	cpi	r22, 0x02	; 2
    1458:	71 05       	cpc	r23, r1
    145a:	09 f4       	brne	.+2      	; 0x145e <DIO_enu_SetPinDiretion+0x68>
    145c:	59 c0       	rjmp	.+178    	; 0x1510 <DIO_enu_SetPinDiretion+0x11a>
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	91 05       	cpc	r25, r1
    1466:	09 f4       	brne	.+2      	; 0x146a <DIO_enu_SetPinDiretion+0x74>
    1468:	7c c0       	rjmp	.+248    	; 0x1562 <DIO_enu_SetPinDiretion+0x16c>
    146a:	a3 c0       	rjmp	.+326    	; 0x15b2 <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    146c:	aa e3       	ldi	r26, 0x3A	; 58
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ea e3       	ldi	r30, 0x3A	; 58
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_enu_SetPinDiretion+0x92>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	2a 95       	dec	r18
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_enu_SetPinDiretion+0x8e>
    148c:	80 95       	com	r24
    148e:	84 23       	and	r24, r20
    1490:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    1492:	aa e3       	ldi	r26, 0x3A	; 58
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ea e3       	ldi	r30, 0x3A	; 58
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	b9 01       	movw	r22, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_enu_SetPinDiretion+0xbc>
    14ae:	66 0f       	add	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	8a 95       	dec	r24
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <DIO_enu_SetPinDiretion+0xb8>
    14b6:	cb 01       	movw	r24, r22
    14b8:	84 2b       	or	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	7a c0       	rjmp	.+244    	; 0x15b2 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    14be:	a7 e3       	ldi	r26, 0x37	; 55
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e7 e3       	ldi	r30, 0x37	; 55
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <DIO_enu_SetPinDiretion+0xe4>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	2a 95       	dec	r18
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <DIO_enu_SetPinDiretion+0xe0>
    14de:	80 95       	com	r24
    14e0:	84 23       	and	r24, r20
    14e2:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    14e4:	a7 e3       	ldi	r26, 0x37	; 55
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e7 e3       	ldi	r30, 0x37	; 55
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	b9 01       	movw	r22, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_enu_SetPinDiretion+0x10e>
    1500:	66 0f       	add	r22, r22
    1502:	77 1f       	adc	r23, r23
    1504:	8a 95       	dec	r24
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_enu_SetPinDiretion+0x10a>
    1508:	cb 01       	movw	r24, r22
    150a:	84 2b       	or	r24, r20
    150c:	8c 93       	st	X, r24
    150e:	51 c0       	rjmp	.+162    	; 0x15b2 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    1510:	a4 e3       	ldi	r26, 0x34	; 52
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e4 e3       	ldi	r30, 0x34	; 52
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_enu_SetPinDiretion+0x136>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	2a 95       	dec	r18
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_enu_SetPinDiretion+0x132>
    1530:	80 95       	com	r24
    1532:	84 23       	and	r24, r20
    1534:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    1536:	a4 e3       	ldi	r26, 0x34	; 52
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e4 e3       	ldi	r30, 0x34	; 52
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	b9 01       	movw	r22, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_enu_SetPinDiretion+0x160>
    1552:	66 0f       	add	r22, r22
    1554:	77 1f       	adc	r23, r23
    1556:	8a 95       	dec	r24
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_enu_SetPinDiretion+0x15c>
    155a:	cb 01       	movw	r24, r22
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	28 c0       	rjmp	.+80     	; 0x15b2 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    1562:	a1 e3       	ldi	r26, 0x31	; 49
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e1 e3       	ldi	r30, 0x31	; 49
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <DIO_enu_SetPinDiretion+0x188>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	2a 95       	dec	r18
    1580:	e2 f7       	brpl	.-8      	; 0x157a <DIO_enu_SetPinDiretion+0x184>
    1582:	80 95       	com	r24
    1584:	84 23       	and	r24, r20
    1586:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    1588:	a1 e3       	ldi	r26, 0x31	; 49
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e1 e3       	ldi	r30, 0x31	; 49
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	b9 01       	movw	r22, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_enu_SetPinDiretion+0x1b2>
    15a4:	66 0f       	add	r22, r22
    15a6:	77 1f       	adc	r23, r23
    15a8:	8a 95       	dec	r24
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_enu_SetPinDiretion+0x1ae>
    15ac:	cb 01       	movw	r24, r22
    15ae:	84 2b       	or	r24, r20
    15b0:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    15b2:	19 82       	std	Y+1, r1	; 0x01
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    15bc:	26 96       	adiw	r28, 0x06	; 6
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <DIO_enu_SetPinState+0x6>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <DIO_enu_SetPinState+0x8>
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <DIO_enu_SetPinState+0xa>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	8a 83       	std	Y+2, r24	; 0x02
    15de:	6b 83       	std	Y+3, r22	; 0x03
    15e0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	84 30       	cpi	r24, 0x04	; 4
    15ea:	08 f0       	brcs	.+2      	; 0x15ee <DIO_enu_SetPinState+0x20>
    15ec:	d0 c0       	rjmp	.+416    	; 0x178e <DIO_enu_SetPinState+0x1c0>
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	88 30       	cpi	r24, 0x08	; 8
    15f2:	08 f0       	brcs	.+2      	; 0x15f6 <DIO_enu_SetPinState+0x28>
    15f4:	cc c0       	rjmp	.+408    	; 0x178e <DIO_enu_SetPinState+0x1c0>
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	82 30       	cpi	r24, 0x02	; 2
    15fa:	08 f0       	brcs	.+2      	; 0x15fe <DIO_enu_SetPinState+0x30>
    15fc:	c8 c0       	rjmp	.+400    	; 0x178e <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3e 83       	std	Y+6, r19	; 0x06
    1606:	2d 83       	std	Y+5, r18	; 0x05
    1608:	6d 81       	ldd	r22, Y+5	; 0x05
    160a:	7e 81       	ldd	r23, Y+6	; 0x06
    160c:	61 30       	cpi	r22, 0x01	; 1
    160e:	71 05       	cpc	r23, r1
    1610:	09 f4       	brne	.+2      	; 0x1614 <DIO_enu_SetPinState+0x46>
    1612:	41 c0       	rjmp	.+130    	; 0x1696 <DIO_enu_SetPinState+0xc8>
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	91 05       	cpc	r25, r1
    161c:	34 f4       	brge	.+12     	; 0x162a <DIO_enu_SetPinState+0x5c>
    161e:	2d 81       	ldd	r18, Y+5	; 0x05
    1620:	3e 81       	ldd	r19, Y+6	; 0x06
    1622:	21 15       	cp	r18, r1
    1624:	31 05       	cpc	r19, r1
    1626:	71 f0       	breq	.+28     	; 0x1644 <DIO_enu_SetPinState+0x76>
    1628:	b0 c0       	rjmp	.+352    	; 0x178a <DIO_enu_SetPinState+0x1bc>
    162a:	6d 81       	ldd	r22, Y+5	; 0x05
    162c:	7e 81       	ldd	r23, Y+6	; 0x06
    162e:	62 30       	cpi	r22, 0x02	; 2
    1630:	71 05       	cpc	r23, r1
    1632:	09 f4       	brne	.+2      	; 0x1636 <DIO_enu_SetPinState+0x68>
    1634:	59 c0       	rjmp	.+178    	; 0x16e8 <DIO_enu_SetPinState+0x11a>
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	91 05       	cpc	r25, r1
    163e:	09 f4       	brne	.+2      	; 0x1642 <DIO_enu_SetPinState+0x74>
    1640:	7c c0       	rjmp	.+248    	; 0x173a <DIO_enu_SetPinState+0x16c>
    1642:	a3 c0       	rjmp	.+326    	; 0x178a <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    1644:	ab e3       	ldi	r26, 0x3B	; 59
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	eb e3       	ldi	r30, 0x3B	; 59
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <DIO_enu_SetPinState+0x92>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	2a 95       	dec	r18
    1662:	e2 f7       	brpl	.-8      	; 0x165c <DIO_enu_SetPinState+0x8e>
    1664:	80 95       	com	r24
    1666:	84 23       	and	r24, r20
    1668:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    166a:	ab e3       	ldi	r26, 0x3B	; 59
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e3       	ldi	r30, 0x3B	; 59
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	88 2f       	mov	r24, r24
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	b9 01       	movw	r22, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_enu_SetPinState+0xbc>
    1686:	66 0f       	add	r22, r22
    1688:	77 1f       	adc	r23, r23
    168a:	8a 95       	dec	r24
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_enu_SetPinState+0xb8>
    168e:	cb 01       	movw	r24, r22
    1690:	84 2b       	or	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	7a c0       	rjmp	.+244    	; 0x178a <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    1696:	a8 e3       	ldi	r26, 0x38	; 56
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e8 e3       	ldi	r30, 0x38	; 56
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_enu_SetPinState+0xe4>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	2a 95       	dec	r18
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_enu_SetPinState+0xe0>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    16bc:	a8 e3       	ldi	r26, 0x38	; 56
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e8 e3       	ldi	r30, 0x38	; 56
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	88 2f       	mov	r24, r24
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	b9 01       	movw	r22, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_enu_SetPinState+0x10e>
    16d8:	66 0f       	add	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	8a 95       	dec	r24
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_enu_SetPinState+0x10a>
    16e0:	cb 01       	movw	r24, r22
    16e2:	84 2b       	or	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	51 c0       	rjmp	.+162    	; 0x178a <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    16e8:	a5 e3       	ldi	r26, 0x35	; 53
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e5 e3       	ldi	r30, 0x35	; 53
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_enu_SetPinState+0x136>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	2a 95       	dec	r18
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_enu_SetPinState+0x132>
    1708:	80 95       	com	r24
    170a:	84 23       	and	r24, r20
    170c:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    170e:	a5 e3       	ldi	r26, 0x35	; 53
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e5 e3       	ldi	r30, 0x35	; 53
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	b9 01       	movw	r22, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <DIO_enu_SetPinState+0x160>
    172a:	66 0f       	add	r22, r22
    172c:	77 1f       	adc	r23, r23
    172e:	8a 95       	dec	r24
    1730:	e2 f7       	brpl	.-8      	; 0x172a <DIO_enu_SetPinState+0x15c>
    1732:	cb 01       	movw	r24, r22
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	28 c0       	rjmp	.+80     	; 0x178a <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    173a:	a2 e3       	ldi	r26, 0x32	; 50
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e2 e3       	ldi	r30, 0x32	; 50
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <DIO_enu_SetPinState+0x188>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	2a 95       	dec	r18
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <DIO_enu_SetPinState+0x184>
    175a:	80 95       	com	r24
    175c:	84 23       	and	r24, r20
    175e:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1760:	a2 e3       	ldi	r26, 0x32	; 50
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e2 e3       	ldi	r30, 0x32	; 50
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	b9 01       	movw	r22, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_enu_SetPinState+0x1b2>
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	8a 95       	dec	r24
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_enu_SetPinState+0x1ae>
    1784:	cb 01       	movw	r24, r22
    1786:	84 2b       	or	r24, r20
    1788:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    178a:	19 82       	std	Y+1, r1	; 0x01
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1792:	89 81       	ldd	r24, Y+1	; 0x01
}
    1794:	26 96       	adiw	r28, 0x06	; 6
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <DIO_enu_SetPinValue+0x6>
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <DIO_enu_SetPinValue+0x8>
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <DIO_enu_SetPinValue+0xa>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	8a 83       	std	Y+2, r24	; 0x02
    17b6:	6b 83       	std	Y+3, r22	; 0x03
    17b8:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <DIO_enu_SetPinValue+0x20>
    17c4:	db c0       	rjmp	.+438    	; 0x197c <DIO_enu_SetPinValue+0x1d6>
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 30       	cpi	r24, 0x08	; 8
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <DIO_enu_SetPinValue+0x28>
    17cc:	d7 c0       	rjmp	.+430    	; 0x197c <DIO_enu_SetPinValue+0x1d6>
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	82 30       	cpi	r24, 0x02	; 2
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <DIO_enu_SetPinValue+0x30>
    17d4:	d3 c0       	rjmp	.+422    	; 0x197c <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	3e 83       	std	Y+6, r19	; 0x06
    17de:	2d 83       	std	Y+5, r18	; 0x05
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	91 05       	cpc	r25, r1
    17e8:	09 f4       	brne	.+2      	; 0x17ec <DIO_enu_SetPinValue+0x46>
    17ea:	43 c0       	rjmp	.+134    	; 0x1872 <DIO_enu_SetPinValue+0xcc>
    17ec:	2d 81       	ldd	r18, Y+5	; 0x05
    17ee:	3e 81       	ldd	r19, Y+6	; 0x06
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	2c f4       	brge	.+10     	; 0x1800 <DIO_enu_SetPinValue+0x5a>
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	71 f0       	breq	.+28     	; 0x181a <DIO_enu_SetPinValue+0x74>
    17fe:	bc c0       	rjmp	.+376    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
    1800:	2d 81       	ldd	r18, Y+5	; 0x05
    1802:	3e 81       	ldd	r19, Y+6	; 0x06
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	09 f4       	brne	.+2      	; 0x180c <DIO_enu_SetPinValue+0x66>
    180a:	5f c0       	rjmp	.+190    	; 0x18ca <DIO_enu_SetPinValue+0x124>
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	83 30       	cpi	r24, 0x03	; 3
    1812:	91 05       	cpc	r25, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <DIO_enu_SetPinValue+0x72>
    1816:	85 c0       	rjmp	.+266    	; 0x1922 <DIO_enu_SetPinValue+0x17c>
    1818:	af c0       	rjmp	.+350    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	a1 f4       	brne	.+40     	; 0x1848 <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    1820:	ab e3       	ldi	r26, 0x3B	; 59
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	eb e3       	ldi	r30, 0x3B	; 59
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <DIO_enu_SetPinValue+0x98>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <DIO_enu_SetPinValue+0x94>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	98 c0       	rjmp	.+304    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    1848:	ab e3       	ldi	r26, 0x3B	; 59
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	eb e3       	ldi	r30, 0x3B	; 59
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_enu_SetPinValue+0xc0>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_enu_SetPinValue+0xbc>
    186a:	80 95       	com	r24
    186c:	84 23       	and	r24, r20
    186e:	8c 93       	st	X, r24
    1870:	83 c0       	rjmp	.+262    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	a1 f4       	brne	.+40     	; 0x18a0 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    1878:	a8 e3       	ldi	r26, 0x38	; 56
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e8 e3       	ldi	r30, 0x38	; 56
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_enu_SetPinValue+0xf0>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_enu_SetPinValue+0xec>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	6c c0       	rjmp	.+216    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    18a0:	a8 e3       	ldi	r26, 0x38	; 56
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e8 e3       	ldi	r30, 0x38	; 56
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_enu_SetPinValue+0x118>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_enu_SetPinValue+0x114>
    18c2:	80 95       	com	r24
    18c4:	84 23       	and	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	57 c0       	rjmp	.+174    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	a1 f4       	brne	.+40     	; 0x18f8 <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    18d0:	a5 e3       	ldi	r26, 0x35	; 53
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e5 e3       	ldi	r30, 0x35	; 53
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_enu_SetPinValue+0x148>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <DIO_enu_SetPinValue+0x144>
    18f2:	84 2b       	or	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	40 c0       	rjmp	.+128    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    18f8:	a5 e3       	ldi	r26, 0x35	; 53
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e5 e3       	ldi	r30, 0x35	; 53
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_enu_SetPinValue+0x170>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_enu_SetPinValue+0x16c>
    191a:	80 95       	com	r24
    191c:	84 23       	and	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	2b c0       	rjmp	.+86     	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	a1 f4       	brne	.+40     	; 0x1950 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    1928:	a2 e3       	ldi	r26, 0x32	; 50
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e2 e3       	ldi	r30, 0x32	; 50
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_enu_SetPinValue+0x1a0>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_enu_SetPinValue+0x19c>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    1950:	a2 e3       	ldi	r26, 0x32	; 50
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e2 e3       	ldi	r30, 0x32	; 50
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <DIO_enu_SetPinValue+0x1c8>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <DIO_enu_SetPinValue+0x1c4>
    1972:	80 95       	com	r24
    1974:	84 23       	and	r24, r20
    1976:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1978:	19 82       	std	Y+1, r1	; 0x01
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
}
    1982:	26 96       	adiw	r28, 0x06	; 6
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	00 d0       	rcall	.+0      	; 0x199a <DIO_enu_TogglePinValue+0x6>
    199a:	00 d0       	rcall	.+0      	; 0x199c <DIO_enu_TogglePinValue+0x8>
    199c:	0f 92       	push	r0
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	8a 83       	std	Y+2, r24	; 0x02
    19a4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	84 30       	cpi	r24, 0x04	; 4
    19ae:	08 f0       	brcs	.+2      	; 0x19b2 <DIO_enu_TogglePinValue+0x1e>
    19b0:	73 c0       	rjmp	.+230    	; 0x1a98 <DIO_enu_TogglePinValue+0x104>
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	88 30       	cpi	r24, 0x08	; 8
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <DIO_enu_TogglePinValue+0x26>
    19b8:	6f c0       	rjmp	.+222    	; 0x1a98 <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	3d 83       	std	Y+5, r19	; 0x05
    19c2:	2c 83       	std	Y+4, r18	; 0x04
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	9d 81       	ldd	r25, Y+5	; 0x05
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	91 05       	cpc	r25, r1
    19cc:	49 f1       	breq	.+82     	; 0x1a20 <DIO_enu_TogglePinValue+0x8c>
    19ce:	2c 81       	ldd	r18, Y+4	; 0x04
    19d0:	3d 81       	ldd	r19, Y+5	; 0x05
    19d2:	22 30       	cpi	r18, 0x02	; 2
    19d4:	31 05       	cpc	r19, r1
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <DIO_enu_TogglePinValue+0x4e>
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	61 f0       	breq	.+24     	; 0x19f8 <DIO_enu_TogglePinValue+0x64>
    19e0:	5a c0       	rjmp	.+180    	; 0x1a96 <DIO_enu_TogglePinValue+0x102>
    19e2:	2c 81       	ldd	r18, Y+4	; 0x04
    19e4:	3d 81       	ldd	r19, Y+5	; 0x05
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	71 f1       	breq	.+92     	; 0x1a48 <DIO_enu_TogglePinValue+0xb4>
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	9d 81       	ldd	r25, Y+5	; 0x05
    19f0:	83 30       	cpi	r24, 0x03	; 3
    19f2:	91 05       	cpc	r25, r1
    19f4:	e9 f1       	breq	.+122    	; 0x1a70 <DIO_enu_TogglePinValue+0xdc>
    19f6:	4f c0       	rjmp	.+158    	; 0x1a96 <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    19f8:	ab e3       	ldi	r26, 0x3B	; 59
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	eb e3       	ldi	r30, 0x3B	; 59
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <DIO_enu_TogglePinValue+0x82>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <DIO_enu_TogglePinValue+0x7e>
    1a1a:	84 27       	eor	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	3b c0       	rjmp	.+118    	; 0x1a96 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    1a20:	a8 e3       	ldi	r26, 0x38	; 56
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e8 e3       	ldi	r30, 0x38	; 56
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_enu_TogglePinValue+0xaa>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <DIO_enu_TogglePinValue+0xa6>
    1a42:	84 27       	eor	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	27 c0       	rjmp	.+78     	; 0x1a96 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    1a48:	a5 e3       	ldi	r26, 0x35	; 53
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e5 e3       	ldi	r30, 0x35	; 53
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_enu_TogglePinValue+0xd2>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_enu_TogglePinValue+0xce>
    1a6a:	84 27       	eor	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	13 c0       	rjmp	.+38     	; 0x1a96 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    1a70:	a2 e3       	ldi	r26, 0x32	; 50
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e2 e3       	ldi	r30, 0x32	; 50
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_enu_TogglePinValue+0xfa>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_enu_TogglePinValue+0xf6>
    1a92:	84 27       	eor	r24, r20
    1a94:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1a96:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	27 97       	sbiw	r28, 0x07	; 7
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	8a 83       	std	Y+2, r24	; 0x02
    1ac0:	6b 83       	std	Y+3, r22	; 0x03
    1ac2:	5d 83       	std	Y+5, r21	; 0x05
    1ac4:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    1aca:	8c 81       	ldd	r24, Y+4	; 0x04
    1acc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <DIO_enu_GetPinValue+0x2a>
    1ad2:	7d c0       	rjmp	.+250    	; 0x1bce <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	08 f0       	brcs	.+2      	; 0x1adc <DIO_enu_GetPinValue+0x32>
    1ada:	76 c0       	rjmp	.+236    	; 0x1bc8 <DIO_enu_GetPinValue+0x11e>
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	88 30       	cpi	r24, 0x08	; 8
    1ae0:	08 f0       	brcs	.+2      	; 0x1ae4 <DIO_enu_GetPinValue+0x3a>
    1ae2:	72 c0       	rjmp	.+228    	; 0x1bc8 <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	3f 83       	std	Y+7, r19	; 0x07
    1aec:	2e 83       	std	Y+6, r18	; 0x06
    1aee:	4e 81       	ldd	r20, Y+6	; 0x06
    1af0:	5f 81       	ldd	r21, Y+7	; 0x07
    1af2:	41 30       	cpi	r20, 0x01	; 1
    1af4:	51 05       	cpc	r21, r1
    1af6:	59 f1       	breq	.+86     	; 0x1b4e <DIO_enu_GetPinValue+0xa4>
    1af8:	8e 81       	ldd	r24, Y+6	; 0x06
    1afa:	9f 81       	ldd	r25, Y+7	; 0x07
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	91 05       	cpc	r25, r1
    1b00:	34 f4       	brge	.+12     	; 0x1b0e <DIO_enu_GetPinValue+0x64>
    1b02:	2e 81       	ldd	r18, Y+6	; 0x06
    1b04:	3f 81       	ldd	r19, Y+7	; 0x07
    1b06:	21 15       	cp	r18, r1
    1b08:	31 05       	cpc	r19, r1
    1b0a:	69 f0       	breq	.+26     	; 0x1b26 <DIO_enu_GetPinValue+0x7c>
    1b0c:	5b c0       	rjmp	.+182    	; 0x1bc4 <DIO_enu_GetPinValue+0x11a>
    1b0e:	4e 81       	ldd	r20, Y+6	; 0x06
    1b10:	5f 81       	ldd	r21, Y+7	; 0x07
    1b12:	42 30       	cpi	r20, 0x02	; 2
    1b14:	51 05       	cpc	r21, r1
    1b16:	79 f1       	breq	.+94     	; 0x1b76 <DIO_enu_GetPinValue+0xcc>
    1b18:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1c:	83 30       	cpi	r24, 0x03	; 3
    1b1e:	91 05       	cpc	r25, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <DIO_enu_GetPinValue+0x7a>
    1b22:	3d c0       	rjmp	.+122    	; 0x1b9e <DIO_enu_GetPinValue+0xf4>
    1b24:	4f c0       	rjmp	.+158    	; 0x1bc4 <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    1b26:	e9 e3       	ldi	r30, 0x39	; 57
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a9 01       	movw	r20, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <DIO_enu_GetPinValue+0x94>
    1b3a:	55 95       	asr	r21
    1b3c:	47 95       	ror	r20
    1b3e:	8a 95       	dec	r24
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <DIO_enu_GetPinValue+0x90>
    1b42:	ca 01       	movw	r24, r20
    1b44:	81 70       	andi	r24, 0x01	; 1
    1b46:	ec 81       	ldd	r30, Y+4	; 0x04
    1b48:	fd 81       	ldd	r31, Y+5	; 0x05
    1b4a:	80 83       	st	Z, r24
    1b4c:	3b c0       	rjmp	.+118    	; 0x1bc4 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    1b4e:	e6 e3       	ldi	r30, 0x36	; 54
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a9 01       	movw	r20, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <DIO_enu_GetPinValue+0xbc>
    1b62:	55 95       	asr	r21
    1b64:	47 95       	ror	r20
    1b66:	8a 95       	dec	r24
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <DIO_enu_GetPinValue+0xb8>
    1b6a:	ca 01       	movw	r24, r20
    1b6c:	81 70       	andi	r24, 0x01	; 1
    1b6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1b70:	fd 81       	ldd	r31, Y+5	; 0x05
    1b72:	80 83       	st	Z, r24
    1b74:	27 c0       	rjmp	.+78     	; 0x1bc4 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    1b76:	e3 e3       	ldi	r30, 0x33	; 51
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a9 01       	movw	r20, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <DIO_enu_GetPinValue+0xe4>
    1b8a:	55 95       	asr	r21
    1b8c:	47 95       	ror	r20
    1b8e:	8a 95       	dec	r24
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <DIO_enu_GetPinValue+0xe0>
    1b92:	ca 01       	movw	r24, r20
    1b94:	81 70       	andi	r24, 0x01	; 1
    1b96:	ec 81       	ldd	r30, Y+4	; 0x04
    1b98:	fd 81       	ldd	r31, Y+5	; 0x05
    1b9a:	80 83       	st	Z, r24
    1b9c:	13 c0       	rjmp	.+38     	; 0x1bc4 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    1b9e:	e0 e3       	ldi	r30, 0x30	; 48
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	88 2f       	mov	r24, r24
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	a9 01       	movw	r20, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <DIO_enu_GetPinValue+0x10c>
    1bb2:	55 95       	asr	r21
    1bb4:	47 95       	ror	r20
    1bb6:	8a 95       	dec	r24
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <DIO_enu_GetPinValue+0x108>
    1bba:	ca 01       	movw	r24, r20
    1bbc:	81 70       	andi	r24, 0x01	; 1
    1bbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1bc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1bc2:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    1bc4:	19 82       	std	Y+1, r1	; 0x01
    1bc6:	05 c0       	rjmp	.+10     	; 0x1bd2 <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd4:	27 96       	adiw	r28, 0x07	; 7
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <SW_enu_Initialization+0x6>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    1bf4:	19 82       	std	Y+1, r1	; 0x01
    1bf6:	34 c0       	rjmp	.+104    	; 0x1c60 <SW_enu_Initialization+0x7a>
    {
        
       Local_u8_ErrorFlag = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	c9 01       	movw	r24, r18
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	82 0f       	add	r24, r18
    1c06:	93 1f       	adc	r25, r19
    1c08:	fc 01       	movw	r30, r24
    1c0a:	ed 58       	subi	r30, 0x8D	; 141
    1c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c0e:	40 81       	ld	r20, Z
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	c9 01       	movw	r24, r18
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	82 0f       	add	r24, r18
    1c1e:	93 1f       	adc	r25, r19
    1c20:	fc 01       	movw	r30, r24
    1c22:	ec 58       	subi	r30, 0x8C	; 140
    1c24:	fe 4f       	sbci	r31, 0xFE	; 254
    1c26:	90 81       	ld	r25, Z
    1c28:	84 2f       	mov	r24, r20
    1c2a:	69 2f       	mov	r22, r25
    1c2c:	40 e0       	ldi	r20, 0x00	; 0
    1c2e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    1c32:	8a 83       	std	Y+2, r24	; 0x02
       if(Local_u8_ErrorFlag != ES_OK)
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	88 23       	and	r24, r24
    1c38:	c1 f4       	brne	.+48     	; 0x1c6a <SW_enu_Initialization+0x84>
       {
        break;
       }
       Local_u8_ErrorFlag = (SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	c9 01       	movw	r24, r18
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	82 0f       	add	r24, r18
    1c48:	93 1f       	adc	r25, r19
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	eb 58       	subi	r30, 0x8B	; 139
    1c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c50:	80 81       	ld	r24, Z
    1c52:	8a 83       	std	Y+2, r24	; 0x02

        if(Local_u8_ErrorFlag != ES_OK)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	88 23       	and	r24, r24
    1c58:	41 f4       	brne	.+16     	; 0x1c6a <SW_enu_Initialization+0x84>
extern ErrorState_t SW_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	8f 5f       	subi	r24, 0xFF	; 255
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	90 91 72 01 	lds	r25, 0x0172
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	89 17       	cp	r24, r25
    1c68:	38 f2       	brcs	.-114    	; 0x1bf8 <SW_enu_Initialization+0x12>
       {
        break;
       }
    }

    Local_u8_ErrorFlag = ES_OK;
    1c6a:	1a 82       	std	Y+2, r1	; 0x02


    return Local_u8_ErrorFlag;
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <SW_enu_GetSwValue+0x6>
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <SW_enu_GetSwValue+0x8>
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	8a 83       	std	Y+2, r24	; 0x02
    1c86:	7c 83       	std	Y+4, r23	; 0x04
    1c88:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	49 f1       	breq	.+82     	; 0x1ce8 <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    1c96:	90 91 72 01 	lds	r25, 0x0172
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	98 17       	cp	r25, r24
    1c9e:	08 f1       	brcs	.+66     	; 0x1ce2 <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	c9 01       	movw	r24, r18
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	82 0f       	add	r24, r18
    1cae:	93 1f       	adc	r25, r19
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	ed 58       	subi	r30, 0x8D	; 141
    1cb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb6:	40 81       	ld	r20, Z
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	c9 01       	movw	r24, r18
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	82 0f       	add	r24, r18
    1cc6:	93 1f       	adc	r25, r19
    1cc8:	fc 01       	movw	r30, r24
    1cca:	ec 58       	subi	r30, 0x8C	; 140
    1ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cce:	90 81       	ld	r25, Z
    1cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd4:	84 2f       	mov	r24, r20
    1cd6:	69 2f       	mov	r22, r25
    1cd8:	a9 01       	movw	r20, r18
    1cda:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_enu_GetPinValue>
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	05 c0       	rjmp	.+10     	; 0x1cec <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1ce8:	83 e0       	ldi	r24, 0x03	; 3
    1cea:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01

}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <Relay_enu_Initialization+0x6>
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1d0a:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1d0c:	19 82       	std	Y+1, r1	; 0x01
    1d0e:	31 c0       	rjmp	.+98     	; 0x1d72 <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	e3 58       	subi	r30, 0x83	; 131
    1d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d20:	20 81       	ld	r18, Z
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	e2 58       	subi	r30, 0x82	; 130
    1d30:	fe 4f       	sbci	r31, 0xFE	; 254
    1d32:	90 81       	ld	r25, Z
    1d34:	82 2f       	mov	r24, r18
    1d36:	69 2f       	mov	r22, r25
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	88 2f       	mov	r24, r24
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	fc 01       	movw	r30, r24
    1d4a:	e3 58       	subi	r30, 0x83	; 131
    1d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d4e:	20 81       	ld	r18, Z
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	e2 58       	subi	r30, 0x82	; 130
    1d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d60:	90 81       	ld	r25, Z
    1d62:	82 2f       	mov	r24, r18
    1d64:	69 2f       	mov	r22, r25
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	8f 5f       	subi	r24, 0xFF	; 255
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	90 91 7c 01 	lds	r25, 0x017C
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	89 17       	cp	r24, r25
    1d7a:	50 f2       	brcs	.-108    	; 0x1d10 <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    1d7c:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <Relay_enu_TuronOnRelay+0x6>
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    1d9a:	90 91 7c 01 	lds	r25, 0x017C
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	89 17       	cp	r24, r25
    1da2:	c8 f4       	brcc	.+50     	; 0x1dd6 <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	88 2f       	mov	r24, r24
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	fc 01       	movw	r30, r24
    1db0:	e3 58       	subi	r30, 0x83	; 131
    1db2:	fe 4f       	sbci	r31, 0xFE	; 254
    1db4:	20 81       	ld	r18, Z
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e2 58       	subi	r30, 0x82	; 130
    1dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc6:	90 81       	ld	r25, Z
    1dc8:	82 2f       	mov	r24, r18
    1dca:	69 2f       	mov	r22, r25
    1dcc:	41 e0       	ldi	r20, 0x01	; 1
    1dce:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <Relay_enu_TuronOffRelay+0x6>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    1df6:	90 91 7c 01 	lds	r25, 0x017C
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	89 17       	cp	r24, r25
    1dfe:	c8 f4       	brcc	.+50     	; 0x1e32 <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	88 2f       	mov	r24, r24
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	e3 58       	subi	r30, 0x83	; 131
    1e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e10:	20 81       	ld	r18, Z
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	e2 58       	subi	r30, 0x82	; 130
    1e20:	fe 4f       	sbci	r31, 0xFE	; 254
    1e22:	90 81       	ld	r25, Z
    1e24:	82 2f       	mov	r24, r18
    1e26:	69 2f       	mov	r22, r25
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <Relay_enu_TurnOnAllRelays+0x6>
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1e50:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1e52:	19 82       	std	Y+1, r1	; 0x01
    1e54:	1a c0       	rjmp	.+52     	; 0x1e8a <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	fc 01       	movw	r30, r24
    1e62:	e3 58       	subi	r30, 0x83	; 131
    1e64:	fe 4f       	sbci	r31, 0xFE	; 254
    1e66:	20 81       	ld	r18, Z
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	fc 01       	movw	r30, r24
    1e74:	e2 58       	subi	r30, 0x82	; 130
    1e76:	fe 4f       	sbci	r31, 0xFE	; 254
    1e78:	90 81       	ld	r25, Z
    1e7a:	82 2f       	mov	r24, r18
    1e7c:	69 2f       	mov	r22, r25
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	8f 5f       	subi	r24, 0xFF	; 255
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	90 91 7c 01 	lds	r25, 0x017C
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	89 17       	cp	r24, r25
    1e92:	08 f3       	brcs	.-62     	; 0x1e56 <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <Relay_enu_TurnOffAllRelays+0x6>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1eb2:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1eb4:	19 82       	std	Y+1, r1	; 0x01
    1eb6:	1a c0       	rjmp	.+52     	; 0x1eec <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	e3 58       	subi	r30, 0x83	; 131
    1ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec8:	20 81       	ld	r18, Z
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	e2 58       	subi	r30, 0x82	; 130
    1ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eda:	90 81       	ld	r25, Z
    1edc:	82 2f       	mov	r24, r18
    1ede:	69 2f       	mov	r22, r25
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	8f 5f       	subi	r24, 0xFF	; 255
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	90 91 7c 01 	lds	r25, 0x017C
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	89 17       	cp	r24, r25
    1ef4:	08 f3       	brcs	.-62     	; 0x1eb8 <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <LED_enu_Initialization+0x6>
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    1f10:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    1f12:	19 82       	std	Y+1, r1	; 0x01
    1f14:	31 c0       	rjmp	.+98     	; 0x1f78 <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	88 2f       	mov	r24, r24
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	fc 01       	movw	r30, r24
    1f22:	e0 58       	subi	r30, 0x80	; 128
    1f24:	fe 4f       	sbci	r31, 0xFE	; 254
    1f26:	20 81       	ld	r18, Z
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	fc 01       	movw	r30, r24
    1f34:	ef 57       	subi	r30, 0x7F	; 127
    1f36:	fe 4f       	sbci	r31, 0xFE	; 254
    1f38:	90 81       	ld	r25, Z
    1f3a:	82 2f       	mov	r24, r18
    1f3c:	69 2f       	mov	r22, r25
    1f3e:	41 e0       	ldi	r20, 0x01	; 1
    1f40:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	fc 01       	movw	r30, r24
    1f50:	e0 58       	subi	r30, 0x80	; 128
    1f52:	fe 4f       	sbci	r31, 0xFE	; 254
    1f54:	20 81       	ld	r18, Z
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	fc 01       	movw	r30, r24
    1f62:	ef 57       	subi	r30, 0x7F	; 127
    1f64:	fe 4f       	sbci	r31, 0xFE	; 254
    1f66:	90 81       	ld	r25, Z
    1f68:	82 2f       	mov	r24, r18
    1f6a:	69 2f       	mov	r22, r25
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	8f 5f       	subi	r24, 0xFF	; 255
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	90 91 7f 01 	lds	r25, 0x017F
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	89 17       	cp	r24, r25
    1f80:	50 f2       	brcs	.-108    	; 0x1f16 <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    1f82:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <LED_enu_TurnOnLED+0x6>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    1fa0:	90 91 7f 01 	lds	r25, 0x017F
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	89 17       	cp	r24, r25
    1fa8:	c8 f4       	brcc	.+50     	; 0x1fdc <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	e0 58       	subi	r30, 0x80	; 128
    1fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fba:	20 81       	ld	r18, Z
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	ef 57       	subi	r30, 0x7F	; 127
    1fca:	fe 4f       	sbci	r31, 0xFE	; 254
    1fcc:	90 81       	ld	r25, Z
    1fce:	82 2f       	mov	r24, r18
    1fd0:	69 2f       	mov	r22, r25
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <LED_enu_TurnOffLED+0x6>
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    1ffc:	90 91 7f 01 	lds	r25, 0x017F
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	98 17       	cp	r25, r24
    2004:	c8 f0       	brcs	.+50     	; 0x2038 <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	88 2f       	mov	r24, r24
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	fc 01       	movw	r30, r24
    2012:	e0 58       	subi	r30, 0x80	; 128
    2014:	fe 4f       	sbci	r31, 0xFE	; 254
    2016:	20 81       	ld	r18, Z
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	88 2f       	mov	r24, r24
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	fc 01       	movw	r30, r24
    2024:	ef 57       	subi	r30, 0x7F	; 127
    2026:	fe 4f       	sbci	r31, 0xFE	; 254
    2028:	90 81       	ld	r25, Z
    202a:	82 2f       	mov	r24, r18
    202c:	69 2f       	mov	r22, r25
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	02 c0       	rjmp	.+4      	; 0x203c <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    203c:	89 81       	ldd	r24, Y+1	; 0x01
}
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <LED_enu_TurnOnAllLEDs+0x6>
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    2056:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    2058:	19 82       	std	Y+1, r1	; 0x01
    205a:	1a c0       	rjmp	.+52     	; 0x2090 <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	88 2f       	mov	r24, r24
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	fc 01       	movw	r30, r24
    2068:	e0 58       	subi	r30, 0x80	; 128
    206a:	fe 4f       	sbci	r31, 0xFE	; 254
    206c:	20 81       	ld	r18, Z
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	88 2f       	mov	r24, r24
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	fc 01       	movw	r30, r24
    207a:	ef 57       	subi	r30, 0x7F	; 127
    207c:	fe 4f       	sbci	r31, 0xFE	; 254
    207e:	90 81       	ld	r25, Z
    2080:	82 2f       	mov	r24, r18
    2082:	69 2f       	mov	r22, r25
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	8f 5f       	subi	r24, 0xFF	; 255
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	90 91 7f 01 	lds	r25, 0x017F
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	89 17       	cp	r24, r25
    2098:	08 f3       	brcs	.-62     	; 0x205c <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    209a:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <LED_enu_TurnOffAllLEDs+0x6>
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    20b6:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    20b8:	19 82       	std	Y+1, r1	; 0x01
    20ba:	1a c0       	rjmp	.+52     	; 0x20f0 <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	fc 01       	movw	r30, r24
    20c8:	e0 58       	subi	r30, 0x80	; 128
    20ca:	fe 4f       	sbci	r31, 0xFE	; 254
    20cc:	20 81       	ld	r18, Z
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	fc 01       	movw	r30, r24
    20da:	ef 57       	subi	r30, 0x7F	; 127
    20dc:	fe 4f       	sbci	r31, 0xFE	; 254
    20de:	90 81       	ld	r25, Z
    20e0:	82 2f       	mov	r24, r18
    20e2:	69 2f       	mov	r22, r25
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	8f 5f       	subi	r24, 0xFF	; 255
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	90 91 7f 01 	lds	r25, 0x017F
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	89 17       	cp	r24, r25
    20f8:	08 f3       	brcs	.-62     	; 0x20bc <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    20fa:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	6d 97       	sbiw	r28, 0x1d	; 29
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	8d 8f       	std	Y+29, r24	; 0x1d
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	ac e0       	ldi	r26, 0x0C	; 12
    2126:	b2 e4       	ldi	r27, 0x42	; 66
    2128:	89 8f       	std	Y+25, r24	; 0x19
    212a:	9a 8f       	std	Y+26, r25	; 0x1a
    212c:	ab 8f       	std	Y+27, r26	; 0x1b
    212e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2130:	69 8d       	ldd	r22, Y+25	; 0x19
    2132:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2134:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2136:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a e7       	ldi	r20, 0x7A	; 122
    213e:	55 e4       	ldi	r21, 0x45	; 69
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	8d 8b       	std	Y+21, r24	; 0x15
    214a:	9e 8b       	std	Y+22, r25	; 0x16
    214c:	af 8b       	std	Y+23, r26	; 0x17
    214e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2150:	6d 89       	ldd	r22, Y+21	; 0x15
    2152:	7e 89       	ldd	r23, Y+22	; 0x16
    2154:	8f 89       	ldd	r24, Y+23	; 0x17
    2156:	98 8d       	ldd	r25, Y+24	; 0x18
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	2c f4       	brge	.+10     	; 0x2172 <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9c 8b       	std	Y+20, r25	; 0x14
    216e:	8b 8b       	std	Y+19, r24	; 0x13
    2170:	3f c0       	rjmp	.+126    	; 0x21f0 <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    2172:	6d 89       	ldd	r22, Y+21	; 0x15
    2174:	7e 89       	ldd	r23, Y+22	; 0x16
    2176:	8f 89       	ldd	r24, Y+23	; 0x17
    2178:	98 8d       	ldd	r25, Y+24	; 0x18
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	3f ef       	ldi	r19, 0xFF	; 255
    217e:	4f e7       	ldi	r20, 0x7F	; 127
    2180:	57 e4       	ldi	r21, 0x47	; 71
    2182:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2186:	18 16       	cp	r1, r24
    2188:	4c f5       	brge	.+82     	; 0x21dc <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218a:	69 8d       	ldd	r22, Y+25	; 0x19
    218c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    218e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2190:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9c 8b       	std	Y+20, r25	; 0x14
    21b0:	8b 8b       	std	Y+19, r24	; 0x13
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <LCD_enu_Initialization+0xca>
    21b4:	80 e9       	ldi	r24, 0x90	; 144
    21b6:	91 e0       	ldi	r25, 0x01	; 1
    21b8:	9a 8b       	std	Y+18, r25	; 0x12
    21ba:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21bc:	89 89       	ldd	r24, Y+17	; 0x11
    21be:	9a 89       	ldd	r25, Y+18	; 0x12
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_enu_Initialization+0xb8>
    21c4:	9a 8b       	std	Y+18, r25	; 0x12
    21c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ca:	9c 89       	ldd	r25, Y+20	; 0x14
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	9c 8b       	std	Y+20, r25	; 0x14
    21d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	8b 89       	ldd	r24, Y+19	; 0x13
    21d4:	9c 89       	ldd	r25, Y+20	; 0x14
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <LCD_enu_Initialization+0xac>
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21dc:	6d 89       	ldd	r22, Y+21	; 0x15
    21de:	7e 89       	ldd	r23, Y+22	; 0x16
    21e0:	8f 89       	ldd	r24, Y+23	; 0x17
    21e2:	98 8d       	ldd	r25, Y+24	; 0x18
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9c 8b       	std	Y+20, r25	; 0x14
    21ee:	8b 8b       	std	Y+19, r24	; 0x13
    21f0:	8b 89       	ldd	r24, Y+19	; 0x13
    21f2:	9c 89       	ldd	r25, Y+20	; 0x14
    21f4:	98 8b       	std	Y+16, r25	; 0x10
    21f6:	8f 87       	std	Y+15, r24	; 0x0f
    21f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fa:	98 89       	ldd	r25, Y+16	; 0x10
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_enu_Initialization+0xf4>
    2200:	98 8b       	std	Y+16, r25	; 0x10
    2202:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	61 e0       	ldi	r22, 0x01	; 1
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	62 e0       	ldi	r22, 0x02	; 2
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	63 e0       	ldi	r22, 0x03	; 3
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	67 e0       	ldi	r22, 0x07	; 7
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	66 e0       	ldi	r22, 0x06	; 6
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	65 e0       	ldi	r22, 0x05	; 5
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	64 e0       	ldi	r22, 0x04	; 4
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	61 e0       	ldi	r22, 0x01	; 1
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	67 e0       	ldi	r22, 0x07	; 7
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	66 e0       	ldi	r22, 0x06	; 6
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	65 e0       	ldi	r22, 0x05	; 5
    226c:	41 e0       	ldi	r20, 0x01	; 1
    226e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	64 e0       	ldi	r22, 0x04	; 4
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	63 e0       	ldi	r22, 0x03	; 3
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a0 e8       	ldi	r26, 0x80	; 128
    228c:	bf e3       	ldi	r27, 0x3F	; 63
    228e:	8b 87       	std	Y+11, r24	; 0x0b
    2290:	9c 87       	std	Y+12, r25	; 0x0c
    2292:	ad 87       	std	Y+13, r26	; 0x0d
    2294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2296:	6b 85       	ldd	r22, Y+11	; 0x0b
    2298:	7c 85       	ldd	r23, Y+12	; 0x0c
    229a:	8d 85       	ldd	r24, Y+13	; 0x0d
    229c:	9e 85       	ldd	r25, Y+14	; 0x0e
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	4a e7       	ldi	r20, 0x7A	; 122
    22a4:	55 e4       	ldi	r21, 0x45	; 69
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	8f 83       	std	Y+7, r24	; 0x07
    22b0:	98 87       	std	Y+8, r25	; 0x08
    22b2:	a9 87       	std	Y+9, r26	; 0x09
    22b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b6:	6f 81       	ldd	r22, Y+7	; 0x07
    22b8:	78 85       	ldd	r23, Y+8	; 0x08
    22ba:	89 85       	ldd	r24, Y+9	; 0x09
    22bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e8       	ldi	r20, 0x80	; 128
    22c4:	5f e3       	ldi	r21, 0x3F	; 63
    22c6:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    22ca:	88 23       	and	r24, r24
    22cc:	2c f4       	brge	.+10     	; 0x22d8 <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	3f c0       	rjmp	.+126    	; 0x2356 <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    22d8:	6f 81       	ldd	r22, Y+7	; 0x07
    22da:	78 85       	ldd	r23, Y+8	; 0x08
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	3f ef       	ldi	r19, 0xFF	; 255
    22e4:	4f e7       	ldi	r20, 0x7F	; 127
    22e6:	57 e4       	ldi	r21, 0x47	; 71
    22e8:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    22ec:	18 16       	cp	r1, r24
    22ee:	4c f5       	brge	.+82     	; 0x2342 <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e2       	ldi	r20, 0x20	; 32
    22fe:	51 e4       	ldi	r21, 0x41	; 65
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	0f c0       	rjmp	.+30     	; 0x2338 <LCD_enu_Initialization+0x230>
    231a:	80 e9       	ldi	r24, 0x90	; 144
    231c:	91 e0       	ldi	r25, 0x01	; 1
    231e:	9c 83       	std	Y+4, r25	; 0x04
    2320:	8b 83       	std	Y+3, r24	; 0x03
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <LCD_enu_Initialization+0x21e>
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2338:	8d 81       	ldd	r24, Y+5	; 0x05
    233a:	9e 81       	ldd	r25, Y+6	; 0x06
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	69 f7       	brne	.-38     	; 0x231a <LCD_enu_Initialization+0x212>
    2340:	14 c0       	rjmp	.+40     	; 0x236a <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	9a 83       	std	Y+2, r25	; 0x02
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <LCD_enu_Initialization+0x25a>
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	63 e0       	ldi	r22, 0x03	; 3
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	61 e0       	ldi	r22, 0x01	; 1
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    237e:	88 e2       	ldi	r24, 0x28	; 40
    2380:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	61 e0       	ldi	r22, 0x01	; 1
    2388:	40 e0       	ldi	r20, 0x00	; 0
    238a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0F);
    238e:	8f e0       	ldi	r24, 0x0F	; 15
    2390:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	61 e0       	ldi	r22, 0x01	; 1
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    23ae:	86 e0       	ldi	r24, 0x06	; 6
    23b0:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    23b4:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    23b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    23b8:	6d 96       	adiw	r28, 0x1d	; 29
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <LCD_enu_SendCommand+0x6>
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	61 e0       	ldi	r22, 0x01	; 1
    23de:	40 e0       	ldi	r20, 0x00	; 0
    23e0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    23ea:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01

}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <LCD_enu_SendData+0x6>
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	41 e0       	ldi	r20, 0x01	; 1
    240e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    2418:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    241a:	89 81       	ldd	r24, Y+1	; 0x01

}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	00 d0       	rcall	.+0      	; 0x242c <LCD_enu_GoToPosition+0x6>
    242c:	00 d0       	rcall	.+0      	; 0x242e <LCD_enu_GoToPosition+0x8>
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	8a 83       	std	Y+2, r24	; 0x02
    2434:	6b 83       	std	Y+3, r22	; 0x03
    2436:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	81 31       	cpi	r24, 0x11	; 17
    2440:	88 f5       	brcc	.+98     	; 0x24a4 <LCD_enu_GoToPosition+0x7e>
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	88 23       	and	r24, r24
    2446:	71 f1       	breq	.+92     	; 0x24a4 <LCD_enu_GoToPosition+0x7e>
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	83 30       	cpi	r24, 0x03	; 3
    244c:	58 f5       	brcc	.+86     	; 0x24a4 <LCD_enu_GoToPosition+0x7e>
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	88 23       	and	r24, r24
    2452:	41 f1       	breq	.+80     	; 0x24a4 <LCD_enu_GoToPosition+0x7e>
    2454:	8c 81       	ldd	r24, Y+4	; 0x04
    2456:	85 30       	cpi	r24, 0x05	; 5
    2458:	28 f5       	brcc	.+74     	; 0x24a4 <LCD_enu_GoToPosition+0x7e>
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	88 23       	and	r24, r24
    245e:	11 f1       	breq	.+68     	; 0x24a4 <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    246a:	8c 81       	ldd	r24, Y+4	; 0x04
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9c 01       	movw	r18, r24
    2472:	21 50       	subi	r18, 0x01	; 1
    2474:	30 40       	sbci	r19, 0x00	; 0
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	88 0f       	add	r24, r24
    2484:	99 1f       	adc	r25, r25
    2486:	82 0f       	add	r24, r18
    2488:	93 1f       	adc	r25, r19
    248a:	82 95       	swap	r24
    248c:	92 95       	swap	r25
    248e:	90 7f       	andi	r25, 0xF0	; 240
    2490:	98 27       	eor	r25, r24
    2492:	80 7f       	andi	r24, 0xF0	; 240
    2494:	98 27       	eor	r25, r24
    2496:	98 2f       	mov	r25, r24
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	89 0f       	add	r24, r25
    249c:	81 58       	subi	r24, 0x81	; 129
    249e:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    24a4:	82 e0       	ldi	r24, 0x02	; 2
    24a6:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	00 d0       	rcall	.+0      	; 0x24be <LCD_enu_SendString+0x6>
    24be:	0f 92       	push	r0
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	9b 83       	std	Y+3, r25	; 0x03
    24c6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	9b 81       	ldd	r25, Y+3	; 0x03
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	c1 f0       	breq	.+48     	; 0x2504 <LCD_enu_SendString+0x4c>
    24d4:	10 c0       	rjmp	.+32     	; 0x24f6 <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	61 e0       	ldi	r22, 0x01	; 1
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    24e0:	ea 81       	ldd	r30, Y+2	; 0x02
    24e2:	fb 81       	ldd	r31, Y+3	; 0x03
    24e4:	20 81       	ld	r18, Z
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	9b 83       	std	Y+3, r25	; 0x03
    24ee:	8a 83       	std	Y+2, r24	; 0x02
    24f0:	82 2f       	mov	r24, r18
    24f2:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    24f6:	ea 81       	ldd	r30, Y+2	; 0x02
    24f8:	fb 81       	ldd	r31, Y+3	; 0x03
    24fa:	80 81       	ld	r24, Z
    24fc:	88 23       	and	r24, r24
    24fe:	59 f7       	brne	.-42     	; 0x24d6 <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    2500:	19 82       	std	Y+1, r1	; 0x01
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2504:	83 e0       	ldi	r24, 0x03	; 3
    2506:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2508:	89 81       	ldd	r24, Y+1	; 0x01
}
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	00 d0       	rcall	.+0      	; 0x251c <LCD_enu_ClearPage+0x6>
    251c:	0f 92       	push	r0
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	88 23       	and	r24, r24
    252c:	09 f4       	brne	.+2      	; 0x2530 <LCD_enu_ClearPage+0x1a>
    252e:	49 c0       	rjmp	.+146    	; 0x25c2 <LCD_enu_ClearPage+0xac>
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	85 30       	cpi	r24, 0x05	; 5
    2534:	08 f0       	brcs	.+2      	; 0x2538 <LCD_enu_ClearPage+0x22>
    2536:	45 c0       	rjmp	.+138    	; 0x25c2 <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    2538:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	61 e0       	ldi	r22, 0x01	; 1
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	88 2f       	mov	r24, r24
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	07 96       	adiw	r24, 0x07	; 7
    254c:	82 95       	swap	r24
    254e:	92 95       	swap	r25
    2550:	90 7f       	andi	r25, 0xF0	; 240
    2552:	98 27       	eor	r25, r24
    2554:	80 7f       	andi	r24, 0xF0	; 240
    2556:	98 27       	eor	r25, r24
    2558:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	61 e0       	ldi	r22, 0x01	; 1
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    2566:	19 82       	std	Y+1, r1	; 0x01
    2568:	06 c0       	rjmp	.+12     	; 0x2576 <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    256a:	80 e2       	ldi	r24, 0x20	; 32
    256c:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	80 31       	cpi	r24, 0x10	; 16
    257a:	b8 f3       	brcs	.-18     	; 0x256a <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	61 e0       	ldi	r22, 0x01	; 1
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	0b 96       	adiw	r24, 0x0b	; 11
    258e:	82 95       	swap	r24
    2590:	92 95       	swap	r25
    2592:	90 7f       	andi	r25, 0xF0	; 240
    2594:	98 27       	eor	r25, r24
    2596:	80 7f       	andi	r24, 0xF0	; 240
    2598:	98 27       	eor	r25, r24
    259a:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	61 e0       	ldi	r22, 0x01	; 1
    25a2:	41 e0       	ldi	r20, 0x01	; 1
    25a4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    25a8:	19 82       	std	Y+1, r1	; 0x01
    25aa:	06 c0       	rjmp	.+12     	; 0x25b8 <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    25ac:	80 e2       	ldi	r24, 0x20	; 32
    25ae:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	8f 5f       	subi	r24, 0xFF	; 255
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	80 31       	cpi	r24, 0x10	; 16
    25bc:	b8 f3       	brcs	.-18     	; 0x25ac <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    25be:	1a 82       	std	Y+2, r1	; 0x02
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02

}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    25d4:	cf 92       	push	r12
    25d6:	ef 92       	push	r14
    25d8:	0f 93       	push	r16
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	2e 97       	sbiw	r28, 0x0e	; 14
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	9e 83       	std	Y+6, r25	; 0x06
    25f0:	8d 83       	std	Y+5, r24	; 0x05
    25f2:	6f 83       	std	Y+7, r22	; 0x07
    25f4:	48 87       	std	Y+8, r20	; 0x08
    25f6:	29 87       	std	Y+9, r18	; 0x09
    25f8:	0a 87       	std	Y+10, r16	; 0x0a
    25fa:	eb 86       	std	Y+11, r14	; 0x0b
    25fc:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	9e 81       	ldd	r25, Y+6	; 0x06
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	09 f4       	brne	.+2      	; 0x260c <LCD_enu_DrawSpecialCharacter+0x38>
    260a:	b3 c0       	rjmp	.+358    	; 0x2772 <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    260c:	1b 82       	std	Y+3, r1	; 0x03
    260e:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    2610:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    2612:	8f 81       	ldd	r24, Y+7	; 0x07
    2614:	88 23       	and	r24, r24
    2616:	09 f4       	brne	.+2      	; 0x261a <LCD_enu_DrawSpecialCharacter+0x46>
    2618:	a9 c0       	rjmp	.+338    	; 0x276c <LCD_enu_DrawSpecialCharacter+0x198>
    261a:	8f 81       	ldd	r24, Y+7	; 0x07
    261c:	89 30       	cpi	r24, 0x09	; 9
    261e:	08 f0       	brcs	.+2      	; 0x2622 <LCD_enu_DrawSpecialCharacter+0x4e>
    2620:	a5 c0       	rjmp	.+330    	; 0x276c <LCD_enu_DrawSpecialCharacter+0x198>
    2622:	88 85       	ldd	r24, Y+8	; 0x08
    2624:	88 30       	cpi	r24, 0x08	; 8
    2626:	08 f0       	brcs	.+2      	; 0x262a <LCD_enu_DrawSpecialCharacter+0x56>
    2628:	a1 c0       	rjmp	.+322    	; 0x276c <LCD_enu_DrawSpecialCharacter+0x198>
    262a:	88 85       	ldd	r24, Y+8	; 0x08
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	88 e0       	ldi	r24, 0x08	; 8
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	ac 01       	movw	r20, r24
    2636:	42 1b       	sub	r20, r18
    2638:	53 0b       	sbc	r21, r19
    263a:	9a 01       	movw	r18, r20
    263c:	8f 81       	ldd	r24, Y+7	; 0x07
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	28 17       	cp	r18, r24
    2644:	39 07       	cpc	r19, r25
    2646:	0c f4       	brge	.+2      	; 0x264a <LCD_enu_DrawSpecialCharacter+0x76>
    2648:	91 c0       	rjmp	.+290    	; 0x276c <LCD_enu_DrawSpecialCharacter+0x198>
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	88 23       	and	r24, r24
    264e:	09 f4       	brne	.+2      	; 0x2652 <LCD_enu_DrawSpecialCharacter+0x7e>
    2650:	8d c0       	rjmp	.+282    	; 0x276c <LCD_enu_DrawSpecialCharacter+0x198>
    2652:	89 85       	ldd	r24, Y+9	; 0x09
    2654:	83 30       	cpi	r24, 0x03	; 3
    2656:	08 f0       	brcs	.+2      	; 0x265a <LCD_enu_DrawSpecialCharacter+0x86>
    2658:	89 c0       	rjmp	.+274    	; 0x276c <LCD_enu_DrawSpecialCharacter+0x198>
    265a:	8a 85       	ldd	r24, Y+10	; 0x0a
    265c:	88 23       	and	r24, r24
    265e:	09 f4       	brne	.+2      	; 0x2662 <LCD_enu_DrawSpecialCharacter+0x8e>
    2660:	85 c0       	rjmp	.+266    	; 0x276c <LCD_enu_DrawSpecialCharacter+0x198>
    2662:	8a 85       	ldd	r24, Y+10	; 0x0a
    2664:	81 31       	cpi	r24, 0x11	; 17
    2666:	08 f0       	brcs	.+2      	; 0x266a <LCD_enu_DrawSpecialCharacter+0x96>
    2668:	81 c0       	rjmp	.+258    	; 0x276c <LCD_enu_DrawSpecialCharacter+0x198>
    266a:	8c 85       	ldd	r24, Y+12	; 0x0c
    266c:	82 30       	cpi	r24, 0x02	; 2
    266e:	08 f0       	brcs	.+2      	; 0x2672 <LCD_enu_DrawSpecialCharacter+0x9e>
    2670:	7d c0       	rjmp	.+250    	; 0x276c <LCD_enu_DrawSpecialCharacter+0x198>
    2672:	8b 85       	ldd	r24, Y+11	; 0x0b
    2674:	85 30       	cpi	r24, 0x05	; 5
    2676:	08 f0       	brcs	.+2      	; 0x267a <LCD_enu_DrawSpecialCharacter+0xa6>
    2678:	79 c0       	rjmp	.+242    	; 0x276c <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    267a:	19 82       	std	Y+1, r1	; 0x01
    267c:	19 c0       	rjmp	.+50     	; 0x26b0 <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	82 0f       	add	r24, r18
    268a:	93 1f       	adc	r25, r19
    268c:	9b 83       	std	Y+3, r25	; 0x03
    268e:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	98 2f       	mov	r25, r24
    2694:	96 95       	lsr	r25
    2696:	96 95       	lsr	r25
    2698:	96 95       	lsr	r25
    269a:	88 85       	ldd	r24, Y+8	; 0x08
    269c:	29 2f       	mov	r18, r25
    269e:	28 0f       	add	r18, r24
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	9b 81       	ldd	r25, Y+3	; 0x03
    26a4:	62 2f       	mov	r22, r18
    26a6:	0e 94 33 18 	call	0x3066	; 0x3066 <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	88 5f       	subi	r24, 0xF8	; 248
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	28 2f       	mov	r18, r24
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	8f 81       	ldd	r24, Y+7	; 0x07
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	88 0f       	add	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	88 0f       	add	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	28 17       	cp	r18, r24
    26ca:	39 07       	cpc	r19, r25
    26cc:	c4 f2       	brlt	.-80     	; 0x267e <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    26d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	3e 87       	std	Y+14, r19	; 0x0e
    26e0:	2d 87       	std	Y+13, r18	; 0x0d
    26e2:	4d 85       	ldd	r20, Y+13	; 0x0d
    26e4:	5e 85       	ldd	r21, Y+14	; 0x0e
    26e6:	41 15       	cp	r20, r1
    26e8:	51 05       	cpc	r21, r1
    26ea:	49 f0       	breq	.+18     	; 0x26fe <LCD_enu_DrawSpecialCharacter+0x12a>
    26ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	91 05       	cpc	r25, r1
    26f4:	39 f4       	brne	.+14     	; 0x2704 <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    26f6:	86 e0       	ldi	r24, 0x06	; 6
    26f8:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
    26fc:	03 c0       	rjmp	.+6      	; 0x2704 <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    26fe:	84 e0       	ldi	r24, 0x04	; 4
    2700:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	61 e0       	ldi	r22, 0x01	; 1
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    270e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2710:	88 2f       	mov	r24, r24
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	9c 01       	movw	r18, r24
    2716:	21 50       	subi	r18, 0x01	; 1
    2718:	30 40       	sbci	r19, 0x00	; 0
    271a:	89 85       	ldd	r24, Y+9	; 0x09
    271c:	88 2f       	mov	r24, r24
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	88 0f       	add	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	82 0f       	add	r24, r18
    272c:	93 1f       	adc	r25, r19
    272e:	82 95       	swap	r24
    2730:	92 95       	swap	r25
    2732:	90 7f       	andi	r25, 0xF0	; 240
    2734:	98 27       	eor	r25, r24
    2736:	80 7f       	andi	r24, 0xF0	; 240
    2738:	98 27       	eor	r25, r24
    273a:	98 2f       	mov	r25, r24
    273c:	8a 85       	ldd	r24, Y+10	; 0x0a
    273e:	89 0f       	add	r24, r25
    2740:	81 58       	subi	r24, 0x81	; 129
    2742:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	41 e0       	ldi	r20, 0x01	; 1
    274c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    2750:	19 82       	std	Y+1, r1	; 0x01
    2752:	06 c0       	rjmp	.+12     	; 0x2760 <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	89 83       	std	Y+1, r24	; 0x01
    2760:	99 81       	ldd	r25, Y+1	; 0x01
    2762:	8f 81       	ldd	r24, Y+7	; 0x07
    2764:	98 17       	cp	r25, r24
    2766:	b0 f3       	brcs	.-20     	; 0x2754 <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    2768:	1c 82       	std	Y+4, r1	; 0x04
    276a:	05 c0       	rjmp	.+10     	; 0x2776 <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	8c 83       	std	Y+4, r24	; 0x04
    2770:	02 c0       	rjmp	.+4      	; 0x2776 <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    2772:	83 e0       	ldi	r24, 0x03	; 3
    2774:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    2776:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2778:	2e 96       	adiw	r28, 0x0e	; 14
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	0f 91       	pop	r16
    278a:	ef 90       	pop	r14
    278c:	cf 90       	pop	r12
    278e:	08 95       	ret

00002790 <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    2790:	0f 93       	push	r16
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	2e 97       	sbiw	r28, 0x0e	; 14
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	68 87       	std	Y+8, r22	; 0x08
    27a8:	79 87       	std	Y+9, r23	; 0x09
    27aa:	8a 87       	std	Y+10, r24	; 0x0a
    27ac:	9b 87       	std	Y+11, r25	; 0x0b
    27ae:	4c 87       	std	Y+12, r20	; 0x0c
    27b0:	2d 87       	std	Y+13, r18	; 0x0d
    27b2:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    27b8:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    27ba:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    27bc:	88 85       	ldd	r24, Y+8	; 0x08
    27be:	99 85       	ldd	r25, Y+9	; 0x09
    27c0:	aa 85       	ldd	r26, Y+10	; 0x0a
    27c2:	bb 85       	ldd	r27, Y+11	; 0x0b
    27c4:	bb 23       	and	r27, r27
    27c6:	8c f4       	brge	.+34     	; 0x27ea <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    27cc:	88 85       	ldd	r24, Y+8	; 0x08
    27ce:	99 85       	ldd	r25, Y+9	; 0x09
    27d0:	aa 85       	ldd	r26, Y+10	; 0x0a
    27d2:	bb 85       	ldd	r27, Y+11	; 0x0b
    27d4:	b0 95       	com	r27
    27d6:	a0 95       	com	r26
    27d8:	90 95       	com	r25
    27da:	81 95       	neg	r24
    27dc:	9f 4f       	sbci	r25, 0xFF	; 255
    27de:	af 4f       	sbci	r26, 0xFF	; 255
    27e0:	bf 4f       	sbci	r27, 0xFF	; 255
    27e2:	88 87       	std	Y+8, r24	; 0x08
    27e4:	99 87       	std	Y+9, r25	; 0x09
    27e6:	aa 87       	std	Y+10, r26	; 0x0a
    27e8:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    27ea:	88 85       	ldd	r24, Y+8	; 0x08
    27ec:	99 85       	ldd	r25, Y+9	; 0x09
    27ee:	aa 85       	ldd	r26, Y+10	; 0x0a
    27f0:	bb 85       	ldd	r27, Y+11	; 0x0b
    27f2:	8c 83       	std	Y+4, r24	; 0x04
    27f4:	9d 83       	std	Y+5, r25	; 0x05
    27f6:	ae 83       	std	Y+6, r26	; 0x06
    27f8:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	8f 5f       	subi	r24, 0xFF	; 255
    27fe:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    2800:	8c 81       	ldd	r24, Y+4	; 0x04
    2802:	9d 81       	ldd	r25, Y+5	; 0x05
    2804:	ae 81       	ldd	r26, Y+6	; 0x06
    2806:	bf 81       	ldd	r27, Y+7	; 0x07
    2808:	2a e0       	ldi	r18, 0x0A	; 10
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	bc 01       	movw	r22, r24
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__divmodsi4>
    2818:	da 01       	movw	r26, r20
    281a:	c9 01       	movw	r24, r18
    281c:	8c 83       	std	Y+4, r24	; 0x04
    281e:	9d 83       	std	Y+5, r25	; 0x05
    2820:	ae 83       	std	Y+6, r26	; 0x06
    2822:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    2824:	8c 81       	ldd	r24, Y+4	; 0x04
    2826:	9d 81       	ldd	r25, Y+5	; 0x05
    2828:	ae 81       	ldd	r26, Y+6	; 0x06
    282a:	bf 81       	ldd	r27, Y+7	; 0x07
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	a1 05       	cpc	r26, r1
    2830:	b1 05       	cpc	r27, r1
    2832:	19 f7       	brne	.-58     	; 0x27fa <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    2834:	8c 85       	ldd	r24, Y+12	; 0x0c
    2836:	88 23       	and	r24, r24
    2838:	09 f4       	brne	.+2      	; 0x283c <LCD_enu_WriteIntegerNum+0xac>
    283a:	6b c0       	rjmp	.+214    	; 0x2912 <LCD_enu_WriteIntegerNum+0x182>
    283c:	8c 85       	ldd	r24, Y+12	; 0x0c
    283e:	83 30       	cpi	r24, 0x03	; 3
    2840:	08 f0       	brcs	.+2      	; 0x2844 <LCD_enu_WriteIntegerNum+0xb4>
    2842:	67 c0       	rjmp	.+206    	; 0x2912 <LCD_enu_WriteIntegerNum+0x182>
    2844:	8d 85       	ldd	r24, Y+13	; 0x0d
    2846:	88 23       	and	r24, r24
    2848:	09 f4       	brne	.+2      	; 0x284c <LCD_enu_WriteIntegerNum+0xbc>
    284a:	63 c0       	rjmp	.+198    	; 0x2912 <LCD_enu_WriteIntegerNum+0x182>
    284c:	8d 85       	ldd	r24, Y+13	; 0x0d
    284e:	81 31       	cpi	r24, 0x11	; 17
    2850:	08 f0       	brcs	.+2      	; 0x2854 <LCD_enu_WriteIntegerNum+0xc4>
    2852:	5f c0       	rjmp	.+190    	; 0x2912 <LCD_enu_WriteIntegerNum+0x182>
    2854:	8e 85       	ldd	r24, Y+14	; 0x0e
    2856:	85 30       	cpi	r24, 0x05	; 5
    2858:	08 f0       	brcs	.+2      	; 0x285c <LCD_enu_WriteIntegerNum+0xcc>
    285a:	5b c0       	rjmp	.+182    	; 0x2912 <LCD_enu_WriteIntegerNum+0x182>
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	81 31       	cpi	r24, 0x11	; 17
    2860:	08 f0       	brcs	.+2      	; 0x2864 <LCD_enu_WriteIntegerNum+0xd4>
    2862:	57 c0       	rjmp	.+174    	; 0x2912 <LCD_enu_WriteIntegerNum+0x182>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    2864:	88 85       	ldd	r24, Y+8	; 0x08
    2866:	99 85       	ldd	r25, Y+9	; 0x09
    2868:	aa 85       	ldd	r26, Y+10	; 0x0a
    286a:	bb 85       	ldd	r27, Y+11	; 0x0b
    286c:	8c 83       	std	Y+4, r24	; 0x04
    286e:	9d 83       	std	Y+5, r25	; 0x05
    2870:	ae 83       	std	Y+6, r26	; 0x06
    2872:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    2874:	ce 01       	movw	r24, r28
    2876:	04 96       	adiw	r24, 0x04	; 4
    2878:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	61 e0       	ldi	r22, 0x01	; 1
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	41 e0       	ldi	r20, 0x01	; 1
    288c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	88 23       	and	r24, r24
    2894:	51 f1       	breq	.+84     	; 0x28ea <LCD_enu_WriteIntegerNum+0x15a>
        {
            enu_PassByteAndLatch('-');
    2896:	8d e2       	ldi	r24, 0x2D	; 45
    2898:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
    289c:	26 c0       	rjmp	.+76     	; 0x28ea <LCD_enu_WriteIntegerNum+0x15a>
        }
        //Printing one digit at a time
        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    289e:	8c 81       	ldd	r24, Y+4	; 0x04
    28a0:	9d 81       	ldd	r25, Y+5	; 0x05
    28a2:	ae 81       	ldd	r26, Y+6	; 0x06
    28a4:	bf 81       	ldd	r27, Y+7	; 0x07
    28a6:	2a e0       	ldi	r18, 0x0A	; 10
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__divmodsi4>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	80 5d       	subi	r24, 0xD0	; 208
    28bc:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    28c0:	8c 81       	ldd	r24, Y+4	; 0x04
    28c2:	9d 81       	ldd	r25, Y+5	; 0x05
    28c4:	ae 81       	ldd	r26, Y+6	; 0x06
    28c6:	bf 81       	ldd	r27, Y+7	; 0x07
    28c8:	2a e0       	ldi	r18, 0x0A	; 10
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__divmodsi4>
    28d8:	da 01       	movw	r26, r20
    28da:	c9 01       	movw	r24, r18
    28dc:	8c 83       	std	Y+4, r24	; 0x04
    28de:	9d 83       	std	Y+5, r25	; 0x05
    28e0:	ae 83       	std	Y+6, r26	; 0x06
    28e2:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	81 50       	subi	r24, 0x01	; 1
    28e8:	8a 83       	std	Y+2, r24	; 0x02
        if(local_u8_NegativeFlag)
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time
        while (Local_u32_TempVariable)
    28ea:	8c 81       	ldd	r24, Y+4	; 0x04
    28ec:	9d 81       	ldd	r25, Y+5	; 0x05
    28ee:	ae 81       	ldd	r26, Y+6	; 0x06
    28f0:	bf 81       	ldd	r27, Y+7	; 0x07
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	a1 05       	cpc	r26, r1
    28f6:	b1 05       	cpc	r27, r1
    28f8:	91 f6       	brne	.-92     	; 0x289e <LCD_enu_WriteIntegerNum+0x10e>
    28fa:	06 c0       	rjmp	.+12     	; 0x2908 <LCD_enu_WriteIntegerNum+0x178>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    28fc:	80 e3       	ldi	r24, 0x30	; 48
    28fe:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	81 50       	subi	r24, 0x01	; 1
    2906:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	88 23       	and	r24, r24
    290c:	b9 f7       	brne	.-18     	; 0x28fc <LCD_enu_WriteIntegerNum+0x16c>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    290e:	1b 82       	std	Y+3, r1	; 0x03
    2910:	02 c0       	rjmp	.+4      	; 0x2916 <LCD_enu_WriteIntegerNum+0x186>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2918:	2e 96       	adiw	r28, 0x0e	; 14
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	0f 91       	pop	r16
    292a:	08 95       	ret

0000292c <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    292c:	0f 93       	push	r16
    292e:	df 93       	push	r29
    2930:	cf 93       	push	r28
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	63 97       	sbiw	r28, 0x13	; 19
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	6d 87       	std	Y+13, r22	; 0x0d
    2944:	7e 87       	std	Y+14, r23	; 0x0e
    2946:	8f 87       	std	Y+15, r24	; 0x0f
    2948:	98 8b       	std	Y+16, r25	; 0x10
    294a:	49 8b       	std	Y+17, r20	; 0x11
    294c:	2a 8b       	std	Y+18, r18	; 0x12
    294e:	0b 8b       	std	Y+19, r16	; 0x13
    u8 Local_u8_ErrorFlag = ES_NOK;
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	88 87       	std	Y+8, r24	; 0x08

    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    2954:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = 0;
    2956:	1a 82       	std	Y+2, r1	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    2958:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    295a:	6d 85       	ldd	r22, Y+13	; 0x0d
    295c:	7e 85       	ldd	r23, Y+14	; 0x0e
    295e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2960:	98 89       	ldd	r25, Y+16	; 0x10
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    296e:	88 23       	and	r24, r24
    2970:	5c f4       	brge	.+22     	; 0x2988 <LCD_enu_WriteFloatNum+0x5c>
    {
        local_u8_NegativeFlag = True;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    2976:	8d 85       	ldd	r24, Y+13	; 0x0d
    2978:	9e 85       	ldd	r25, Y+14	; 0x0e
    297a:	af 85       	ldd	r26, Y+15	; 0x0f
    297c:	b8 89       	ldd	r27, Y+16	; 0x10
    297e:	b0 58       	subi	r27, 0x80	; 128
    2980:	8d 87       	std	Y+13, r24	; 0x0d
    2982:	9e 87       	std	Y+14, r25	; 0x0e
    2984:	af 87       	std	Y+15, r26	; 0x0f
    2986:	b8 8b       	std	Y+16, r27	; 0x10
    }


    Local_u32_WholeDigits = Copy_f32_Num;
    2988:	6d 85       	ldd	r22, Y+13	; 0x0d
    298a:	7e 85       	ldd	r23, Y+14	; 0x0e
    298c:	8f 85       	ldd	r24, Y+15	; 0x0f
    298e:	98 89       	ldd	r25, Y+16	; 0x10
    2990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	89 87       	std	Y+9, r24	; 0x09
    299a:	9a 87       	std	Y+10, r25	; 0x0a
    299c:	ab 87       	std	Y+11, r26	; 0x0b
    299e:	bc 87       	std	Y+12, r27	; 0x0c

    Local_f32_DecimalDigits = Copy_f32_Num - (f32)(Local_u32_WholeDigits);
    29a0:	89 85       	ldd	r24, Y+9	; 0x09
    29a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a4:	ab 85       	ldd	r26, Y+11	; 0x0b
    29a6:	bc 85       	ldd	r27, Y+12	; 0x0c
    29a8:	bc 01       	movw	r22, r24
    29aa:	cd 01       	movw	r24, r26
    29ac:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    29b0:	9b 01       	movw	r18, r22
    29b2:	ac 01       	movw	r20, r24
    29b4:	6d 85       	ldd	r22, Y+13	; 0x0d
    29b6:	7e 85       	ldd	r23, Y+14	; 0x0e
    29b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ba:	98 89       	ldd	r25, Y+16	; 0x10
    29bc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8c 83       	std	Y+4, r24	; 0x04
    29c6:	9d 83       	std	Y+5, r25	; 0x05
    29c8:	ae 83       	std	Y+6, r26	; 0x06
    29ca:	bf 83       	std	Y+7, r27	; 0x07
   
    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	8f 5f       	subi	r24, 0xFF	; 255
    29d0:	8b 83       	std	Y+3, r24	; 0x03
        Local_u32_WholeDigits  /= 10;
    29d2:	89 85       	ldd	r24, Y+9	; 0x09
    29d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    29d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    29da:	2a e0       	ldi	r18, 0x0A	; 10
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	50 e0       	ldi	r21, 0x00	; 0
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__udivmodsi4>
    29ea:	da 01       	movw	r26, r20
    29ec:	c9 01       	movw	r24, r18
    29ee:	89 87       	std	Y+9, r24	; 0x09
    29f0:	9a 87       	std	Y+10, r25	; 0x0a
    29f2:	ab 87       	std	Y+11, r26	; 0x0b
    29f4:	bc 87       	std	Y+12, r27	; 0x0c

    }while(Local_u32_WholeDigits);
    29f6:	89 85       	ldd	r24, Y+9	; 0x09
    29f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    29fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	a1 05       	cpc	r26, r1
    2a02:	b1 05       	cpc	r27, r1
    2a04:	19 f7       	brne	.-58     	; 0x29cc <LCD_enu_WriteFloatNum+0xa0>

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	41 e0       	ldi	r20, 0x01	; 1
    2a0c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    2a10:	19 86       	std	Y+9, r1	; 0x09
    2a12:	1a 86       	std	Y+10, r1	; 0x0a
    2a14:	1b 86       	std	Y+11, r1	; 0x0b
    2a16:	1c 86       	std	Y+12, r1	; 0x0c
    2a18:	1f c0       	rjmp	.+62     	; 0x2a58 <LCD_enu_WriteFloatNum+0x12c>
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    {
        Local_f32_DecimalDigits *= 10;
    2a1a:	6c 81       	ldd	r22, Y+4	; 0x04
    2a1c:	7d 81       	ldd	r23, Y+5	; 0x05
    2a1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a20:	9f 81       	ldd	r25, Y+7	; 0x07
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e2       	ldi	r20, 0x20	; 32
    2a28:	51 e4       	ldi	r21, 0x41	; 65
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	8c 83       	std	Y+4, r24	; 0x04
    2a34:	9d 83       	std	Y+5, r25	; 0x05
    2a36:	ae 83       	std	Y+6, r26	; 0x06
    2a38:	bf 83       	std	Y+7, r27	; 0x07
        Local_u32_WholeDigits = Local_f32_DecimalDigits;
    2a3a:	6c 81       	ldd	r22, Y+4	; 0x04
    2a3c:	7d 81       	ldd	r23, Y+5	; 0x05
    2a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a40:	9f 81       	ldd	r25, Y+7	; 0x07
    2a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	89 87       	std	Y+9, r24	; 0x09
    2a4c:	9a 87       	std	Y+10, r25	; 0x0a
    2a4e:	ab 87       	std	Y+11, r26	; 0x0b
    2a50:	bc 87       	std	Y+12, r27	; 0x0c
        Local_u8_DecimalDigitCount++;
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	8f 5f       	subi	r24, 0xFF	; 255
    2a56:	8a 83       	std	Y+2, r24	; 0x02

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a5e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    2a68:	9b 01       	movw	r18, r22
    2a6a:	ac 01       	movw	r20, r24
    2a6c:	6c 81       	ldd	r22, Y+4	; 0x04
    2a6e:	7d 81       	ldd	r23, Y+5	; 0x05
    2a70:	8e 81       	ldd	r24, Y+6	; 0x06
    2a72:	9f 81       	ldd	r25, Y+7	; 0x07
    2a74:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	2c ea       	ldi	r18, 0xAC	; 172
    2a82:	35 ec       	ldi	r19, 0xC5	; 197
    2a84:	47 e2       	ldi	r20, 0x27	; 39
    2a86:	57 e3       	ldi	r21, 0x37	; 55
    2a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
    2a8c:	88 23       	and	r24, r24
    2a8e:	2c f6       	brge	.-118    	; 0x2a1a <LCD_enu_WriteFloatNum+0xee>
        Local_u8_DecimalDigitCount++;
        
    
    }

    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && ((Local_u32_WholeDigits + Local_u8_DecimalDigitCount) <= LCD_MAX_INTEGER_LENGTH))
    2a90:	89 89       	ldd	r24, Y+17	; 0x11
    2a92:	88 23       	and	r24, r24
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <LCD_enu_WriteFloatNum+0x16c>
    2a96:	fd c0       	rjmp	.+506    	; 0x2c92 <LCD_enu_WriteFloatNum+0x366>
    2a98:	89 89       	ldd	r24, Y+17	; 0x11
    2a9a:	83 30       	cpi	r24, 0x03	; 3
    2a9c:	08 f0       	brcs	.+2      	; 0x2aa0 <LCD_enu_WriteFloatNum+0x174>
    2a9e:	f9 c0       	rjmp	.+498    	; 0x2c92 <LCD_enu_WriteFloatNum+0x366>
    2aa0:	8a 89       	ldd	r24, Y+18	; 0x12
    2aa2:	88 23       	and	r24, r24
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <LCD_enu_WriteFloatNum+0x17c>
    2aa6:	f5 c0       	rjmp	.+490    	; 0x2c92 <LCD_enu_WriteFloatNum+0x366>
    2aa8:	8a 89       	ldd	r24, Y+18	; 0x12
    2aaa:	81 31       	cpi	r24, 0x11	; 17
    2aac:	08 f0       	brcs	.+2      	; 0x2ab0 <LCD_enu_WriteFloatNum+0x184>
    2aae:	f1 c0       	rjmp	.+482    	; 0x2c92 <LCD_enu_WriteFloatNum+0x366>
    2ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab2:	85 30       	cpi	r24, 0x05	; 5
    2ab4:	08 f0       	brcs	.+2      	; 0x2ab8 <LCD_enu_WriteFloatNum+0x18c>
    2ab6:	ed c0       	rjmp	.+474    	; 0x2c92 <LCD_enu_WriteFloatNum+0x366>
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	50 e0       	ldi	r21, 0x00	; 0
    2ac2:	89 85       	ldd	r24, Y+9	; 0x09
    2ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac6:	ab 85       	ldd	r26, Y+11	; 0x0b
    2ac8:	bc 85       	ldd	r27, Y+12	; 0x0c
    2aca:	82 0f       	add	r24, r18
    2acc:	93 1f       	adc	r25, r19
    2ace:	a4 1f       	adc	r26, r20
    2ad0:	b5 1f       	adc	r27, r21
    2ad2:	81 31       	cpi	r24, 0x11	; 17
    2ad4:	91 05       	cpc	r25, r1
    2ad6:	a1 05       	cpc	r26, r1
    2ad8:	b1 05       	cpc	r27, r1
    2ada:	08 f0       	brcs	.+2      	; 0x2ade <LCD_enu_WriteFloatNum+0x1b2>
    2adc:	da c0       	rjmp	.+436    	; 0x2c92 <LCD_enu_WriteFloatNum+0x366>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	61 e0       	ldi	r22, 0x01	; 1
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    2ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	9c 01       	movw	r18, r24
    2af0:	21 50       	subi	r18, 0x01	; 1
    2af2:	30 40       	sbci	r19, 0x00	; 0
    2af4:	89 89       	ldd	r24, Y+17	; 0x11
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	82 0f       	add	r24, r18
    2b06:	93 1f       	adc	r25, r19
    2b08:	82 95       	swap	r24
    2b0a:	92 95       	swap	r25
    2b0c:	90 7f       	andi	r25, 0xF0	; 240
    2b0e:	98 27       	eor	r25, r24
    2b10:	80 7f       	andi	r24, 0xF0	; 240
    2b12:	98 27       	eor	r25, r24
    2b14:	98 2f       	mov	r25, r24
    2b16:	8a 89       	ldd	r24, Y+18	; 0x12
    2b18:	89 0f       	add	r24, r25
    2b1a:	81 58       	subi	r24, 0x81	; 129
    2b1c:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
        
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	61 e0       	ldi	r22, 0x01	; 1
    2b24:	41 e0       	ldi	r20, 0x01	; 1
    2b26:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	88 23       	and	r24, r24
    2b2e:	19 f0       	breq	.+6      	; 0x2b36 <LCD_enu_WriteFloatNum+0x20a>
        {
            enu_PassByteAndLatch('-');
    2b30:	8d e2       	ldi	r24, 0x2D	; 45
    2b32:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
        }

        //A] Printing whole digits 
        Local_u32_WholeDigits = Copy_f32_Num;
    2b36:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b38:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b3c:	98 89       	ldd	r25, Y+16	; 0x10
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	89 87       	std	Y+9, r24	; 0x09
    2b48:	9a 87       	std	Y+10, r25	; 0x0a
    2b4a:	ab 87       	std	Y+11, r26	; 0x0b
    2b4c:	bc 87       	std	Y+12, r27	; 0x0c
        enu_ReverseInteger(&Local_u32_WholeDigits);
    2b4e:	ce 01       	movw	r24, r28
    2b50:	09 96       	adiw	r24, 0x09	; 9
    2b52:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <enu_ReverseInteger>


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	61 e0       	ldi	r22, 0x01	; 1
    2b5a:	41 e0       	ldi	r20, 0x01	; 1
    2b5c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    2b60:	26 c0       	rjmp	.+76     	; 0x2bae <LCD_enu_WriteFloatNum+0x282>
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    2b62:	89 85       	ldd	r24, Y+9	; 0x09
    2b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b66:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b68:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b6a:	2a e0       	ldi	r18, 0x0A	; 10
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	50 e0       	ldi	r21, 0x00	; 0
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__udivmodsi4>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	80 5d       	subi	r24, 0xD0	; 208
    2b80:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
            Local_u32_WholeDigits /= 10;
    2b84:	89 85       	ldd	r24, Y+9	; 0x09
    2b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b88:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b8a:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b8c:	2a e0       	ldi	r18, 0x0A	; 10
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	50 e0       	ldi	r21, 0x00	; 0
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__udivmodsi4>
    2b9c:	da 01       	movw	r26, r20
    2b9e:	c9 01       	movw	r24, r18
    2ba0:	89 87       	std	Y+9, r24	; 0x09
    2ba2:	9a 87       	std	Y+10, r25	; 0x0a
    2ba4:	ab 87       	std	Y+11, r26	; 0x0b
    2ba6:	bc 87       	std	Y+12, r27	; 0x0c
            Local_u8_WholeDigitCount--;
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	81 50       	subi	r24, 0x01	; 1
    2bac:	8b 83       	std	Y+3, r24	; 0x03


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bb4:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	a1 05       	cpc	r26, r1
    2bba:	b1 05       	cpc	r27, r1
    2bbc:	91 f6       	brne	.-92     	; 0x2b62 <LCD_enu_WriteFloatNum+0x236>
    2bbe:	06 c0       	rjmp	.+12     	; 0x2bcc <LCD_enu_WriteFloatNum+0x2a0>
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    2bc0:	80 e3       	ldi	r24, 0x30	; 48
    2bc2:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
            Local_u8_WholeDigitCount--;
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	81 50       	subi	r24, 0x01	; 1
    2bca:	8b 83       	std	Y+3, r24	; 0x03
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
            Local_u32_WholeDigits /= 10;
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	88 23       	and	r24, r24
    2bd0:	b9 f7       	brne	.-18     	; 0x2bc0 <LCD_enu_WriteFloatNum+0x294>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    2bd2:	6c 81       	ldd	r22, Y+4	; 0x04
    2bd4:	7d 81       	ldd	r23, Y+5	; 0x05
    2bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    2be6:	88 23       	and	r24, r24
    2be8:	09 f4       	brne	.+2      	; 0x2bec <LCD_enu_WriteFloatNum+0x2c0>
    2bea:	51 c0       	rjmp	.+162    	; 0x2c8e <LCD_enu_WriteFloatNum+0x362>
        {
            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	61 e0       	ldi	r22, 0x01	; 1
    2bf0:	41 e0       	ldi	r20, 0x01	; 1
    2bf2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    2bf6:	8e e2       	ldi	r24, 0x2E	; 46
    2bf8:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>

            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
    2bfc:	6c 81       	ldd	r22, Y+4	; 0x04
    2bfe:	7d 81       	ldd	r23, Y+5	; 0x05
    2c00:	8e 81       	ldd	r24, Y+6	; 0x06
    2c02:	9f 81       	ldd	r25, Y+7	; 0x07
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	89 87       	std	Y+9, r24	; 0x09
    2c0e:	9a 87       	std	Y+10, r25	; 0x0a
    2c10:	ab 87       	std	Y+11, r26	; 0x0b
    2c12:	bc 87       	std	Y+12, r27	; 0x0c
            enu_ReverseInteger(&Local_u32_WholeDigits);
    2c14:	ce 01       	movw	r24, r28
    2c16:	09 96       	adiw	r24, 0x09	; 9
    2c18:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <enu_ReverseInteger>
    2c1c:	26 c0       	rjmp	.+76     	; 0x2c6a <LCD_enu_WriteFloatNum+0x33e>
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
            {
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c22:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c24:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c26:	2a e0       	ldi	r18, 0x0A	; 10
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e0       	ldi	r20, 0x00	; 0
    2c2c:	50 e0       	ldi	r21, 0x00	; 0
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__udivmodsi4>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	80 5d       	subi	r24, 0xD0	; 208
    2c3c:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
                Local_u32_WholeDigits /= 10;
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c44:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c46:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c48:	2a e0       	ldi	r18, 0x0A	; 10
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	bc 01       	movw	r22, r24
    2c52:	cd 01       	movw	r24, r26
    2c54:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__udivmodsi4>
    2c58:	da 01       	movw	r26, r20
    2c5a:	c9 01       	movw	r24, r18
    2c5c:	89 87       	std	Y+9, r24	; 0x09
    2c5e:	9a 87       	std	Y+10, r25	; 0x0a
    2c60:	ab 87       	std	Y+11, r26	; 0x0b
    2c62:	bc 87       	std	Y+12, r27	; 0x0c
                Local_u8_DecimalDigitCount--;
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	81 50       	subi	r24, 0x01	; 1
    2c68:	8a 83       	std	Y+2, r24	; 0x02
            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
            enu_ReverseInteger(&Local_u32_WholeDigits);
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
    2c6a:	89 85       	ldd	r24, Y+9	; 0x09
    2c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c70:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c72:	00 97       	sbiw	r24, 0x00	; 0
    2c74:	a1 05       	cpc	r26, r1
    2c76:	b1 05       	cpc	r27, r1
    2c78:	91 f6       	brne	.-92     	; 0x2c1e <LCD_enu_WriteFloatNum+0x2f2>
    2c7a:	06 c0       	rjmp	.+12     	; 0x2c88 <LCD_enu_WriteFloatNum+0x35c>
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    2c7c:	80 e3       	ldi	r24, 0x30	; 48
    2c7e:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	81 50       	subi	r24, 0x01	; 1
    2c86:	8a 83       	std	Y+2, r24	; 0x02
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
                Local_u32_WholeDigits /= 10;
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	88 23       	and	r24, r24
    2c8c:	b9 f7       	brne	.-18     	; 0x2c7c <LCD_enu_WriteFloatNum+0x350>
            
            

        }

        Local_u8_ErrorFlag = ES_OK;
    2c8e:	18 86       	std	Y+8, r1	; 0x08
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <LCD_enu_WriteFloatNum+0x36a>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2c92:	82 e0       	ldi	r24, 0x02	; 2
    2c94:	88 87       	std	Y+8, r24	; 0x08
    }

    return Local_u8_ErrorFlag;
    2c96:	88 85       	ldd	r24, Y+8	; 0x08

}
    2c98:	63 96       	adiw	r28, 0x13	; 19
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	0f 91       	pop	r16
    2caa:	08 95       	ret

00002cac <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	ac 97       	sbiw	r28, 0x2c	; 44
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	62 e0       	ldi	r22, 0x02	; 2
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	63 e0       	ldi	r22, 0x03	; 3
    2cd4:	40 e0       	ldi	r20, 0x00	; 0
    2cd6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    2cda:	8c a5       	ldd	r24, Y+44	; 0x2c
    2cdc:	98 2f       	mov	r25, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	99 27       	eor	r25, r25
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	67 e0       	ldi	r22, 0x07	; 7
    2ce8:	49 2f       	mov	r20, r25
    2cea:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    2cee:	8c a5       	ldd	r24, Y+44	; 0x2c
    2cf0:	82 95       	swap	r24
    2cf2:	86 95       	lsr	r24
    2cf4:	86 95       	lsr	r24
    2cf6:	83 70       	andi	r24, 0x03	; 3
    2cf8:	98 2f       	mov	r25, r24
    2cfa:	91 70       	andi	r25, 0x01	; 1
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	66 e0       	ldi	r22, 0x06	; 6
    2d00:	49 2f       	mov	r20, r25
    2d02:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    2d06:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d08:	82 95       	swap	r24
    2d0a:	86 95       	lsr	r24
    2d0c:	87 70       	andi	r24, 0x07	; 7
    2d0e:	98 2f       	mov	r25, r24
    2d10:	91 70       	andi	r25, 0x01	; 1
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	65 e0       	ldi	r22, 0x05	; 5
    2d16:	49 2f       	mov	r20, r25
    2d18:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    2d1c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d1e:	82 95       	swap	r24
    2d20:	8f 70       	andi	r24, 0x0F	; 15
    2d22:	98 2f       	mov	r25, r24
    2d24:	91 70       	andi	r25, 0x01	; 1
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	64 e0       	ldi	r22, 0x04	; 4
    2d2a:	49 2f       	mov	r20, r25
    2d2c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	63 e0       	ldi	r22, 0x03	; 3
    2d34:	41 e0       	ldi	r20, 0x01	; 1
    2d36:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	a0 e8       	ldi	r26, 0x80	; 128
    2d40:	bf e3       	ldi	r27, 0x3F	; 63
    2d42:	8f a3       	std	Y+39, r24	; 0x27
    2d44:	98 a7       	std	Y+40, r25	; 0x28
    2d46:	a9 a7       	std	Y+41, r26	; 0x29
    2d48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2d50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	4a e7       	ldi	r20, 0x7A	; 122
    2d58:	55 e4       	ldi	r21, 0x45	; 69
    2d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	8b a3       	std	Y+35, r24	; 0x23
    2d64:	9c a3       	std	Y+36, r25	; 0x24
    2d66:	ad a3       	std	Y+37, r26	; 0x25
    2d68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d70:	9e a1       	ldd	r25, Y+38	; 0x26
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 e8       	ldi	r20, 0x80	; 128
    2d78:	5f e3       	ldi	r21, 0x3F	; 63
    2d7a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2d7e:	88 23       	and	r24, r24
    2d80:	2c f4       	brge	.+10     	; 0x2d8c <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	9a a3       	std	Y+34, r25	; 0x22
    2d88:	89 a3       	std	Y+33, r24	; 0x21
    2d8a:	3f c0       	rjmp	.+126    	; 0x2e0a <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    2d8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d90:	8d a1       	ldd	r24, Y+37	; 0x25
    2d92:	9e a1       	ldd	r25, Y+38	; 0x26
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	3f ef       	ldi	r19, 0xFF	; 255
    2d98:	4f e7       	ldi	r20, 0x7F	; 127
    2d9a:	57 e4       	ldi	r21, 0x47	; 71
    2d9c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2da0:	18 16       	cp	r1, r24
    2da2:	4c f5       	brge	.+82     	; 0x2df6 <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da4:	6f a1       	ldd	r22, Y+39	; 0x27
    2da6:	78 a5       	ldd	r23, Y+40	; 0x28
    2da8:	89 a5       	ldd	r24, Y+41	; 0x29
    2daa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e2       	ldi	r20, 0x20	; 32
    2db2:	51 e4       	ldi	r21, 0x41	; 65
    2db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	bc 01       	movw	r22, r24
    2dbe:	cd 01       	movw	r24, r26
    2dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9a a3       	std	Y+34, r25	; 0x22
    2dca:	89 a3       	std	Y+33, r24	; 0x21
    2dcc:	0f c0       	rjmp	.+30     	; 0x2dec <enu_PassByteAndLatch+0x140>
    2dce:	80 e9       	ldi	r24, 0x90	; 144
    2dd0:	91 e0       	ldi	r25, 0x01	; 1
    2dd2:	98 a3       	std	Y+32, r25	; 0x20
    2dd4:	8f 8f       	std	Y+31, r24	; 0x1f
    2dd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dd8:	98 a1       	ldd	r25, Y+32	; 0x20
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <enu_PassByteAndLatch+0x12e>
    2dde:	98 a3       	std	Y+32, r25	; 0x20
    2de0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de2:	89 a1       	ldd	r24, Y+33	; 0x21
    2de4:	9a a1       	ldd	r25, Y+34	; 0x22
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	9a a3       	std	Y+34, r25	; 0x22
    2dea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dec:	89 a1       	ldd	r24, Y+33	; 0x21
    2dee:	9a a1       	ldd	r25, Y+34	; 0x22
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	69 f7       	brne	.-38     	; 0x2dce <enu_PassByteAndLatch+0x122>
    2df4:	14 c0       	rjmp	.+40     	; 0x2e1e <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df6:	6b a1       	ldd	r22, Y+35	; 0x23
    2df8:	7c a1       	ldd	r23, Y+36	; 0x24
    2dfa:	8d a1       	ldd	r24, Y+37	; 0x25
    2dfc:	9e a1       	ldd	r25, Y+38	; 0x26
    2dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	9a a3       	std	Y+34, r25	; 0x22
    2e08:	89 a3       	std	Y+33, r24	; 0x21
    2e0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e10:	8d 8f       	std	Y+29, r24	; 0x1d
    2e12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <enu_PassByteAndLatch+0x16a>
    2e1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e1c:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	63 e0       	ldi	r22, 0x03	; 3
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    2e28:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e2a:	86 95       	lsr	r24
    2e2c:	86 95       	lsr	r24
    2e2e:	86 95       	lsr	r24
    2e30:	98 2f       	mov	r25, r24
    2e32:	91 70       	andi	r25, 0x01	; 1
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	67 e0       	ldi	r22, 0x07	; 7
    2e38:	49 2f       	mov	r20, r25
    2e3a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    2e3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e40:	86 95       	lsr	r24
    2e42:	86 95       	lsr	r24
    2e44:	98 2f       	mov	r25, r24
    2e46:	91 70       	andi	r25, 0x01	; 1
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	66 e0       	ldi	r22, 0x06	; 6
    2e4c:	49 2f       	mov	r20, r25
    2e4e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    2e52:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e54:	86 95       	lsr	r24
    2e56:	98 2f       	mov	r25, r24
    2e58:	91 70       	andi	r25, 0x01	; 1
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	65 e0       	ldi	r22, 0x05	; 5
    2e5e:	49 2f       	mov	r20, r25
    2e60:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    2e64:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e66:	98 2f       	mov	r25, r24
    2e68:	91 70       	andi	r25, 0x01	; 1
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	64 e0       	ldi	r22, 0x04	; 4
    2e6e:	49 2f       	mov	r20, r25
    2e70:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	63 e0       	ldi	r22, 0x03	; 3
    2e78:	41 e0       	ldi	r20, 0x01	; 1
    2e7a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	a0 e8       	ldi	r26, 0x80	; 128
    2e84:	bf e3       	ldi	r27, 0x3F	; 63
    2e86:	89 8f       	std	Y+25, r24	; 0x19
    2e88:	9a 8f       	std	Y+26, r25	; 0x1a
    2e8a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	4a e7       	ldi	r20, 0x7A	; 122
    2e9c:	55 e4       	ldi	r21, 0x45	; 69
    2e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	8d 8b       	std	Y+21, r24	; 0x15
    2ea8:	9e 8b       	std	Y+22, r25	; 0x16
    2eaa:	af 8b       	std	Y+23, r26	; 0x17
    2eac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2eae:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e8       	ldi	r20, 0x80	; 128
    2ebc:	5f e3       	ldi	r21, 0x3F	; 63
    2ebe:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2ec2:	88 23       	and	r24, r24
    2ec4:	2c f4       	brge	.+10     	; 0x2ed0 <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	9c 8b       	std	Y+20, r25	; 0x14
    2ecc:	8b 8b       	std	Y+19, r24	; 0x13
    2ece:	3f c0       	rjmp	.+126    	; 0x2f4e <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    2ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	3f ef       	ldi	r19, 0xFF	; 255
    2edc:	4f e7       	ldi	r20, 0x7F	; 127
    2ede:	57 e4       	ldi	r21, 0x47	; 71
    2ee0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2ee4:	18 16       	cp	r1, r24
    2ee6:	4c f5       	brge	.+82     	; 0x2f3a <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    2eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e2       	ldi	r20, 0x20	; 32
    2ef6:	51 e4       	ldi	r21, 0x41	; 65
    2ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	bc 01       	movw	r22, r24
    2f02:	cd 01       	movw	r24, r26
    2f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	9c 8b       	std	Y+20, r25	; 0x14
    2f0e:	8b 8b       	std	Y+19, r24	; 0x13
    2f10:	0f c0       	rjmp	.+30     	; 0x2f30 <enu_PassByteAndLatch+0x284>
    2f12:	80 e9       	ldi	r24, 0x90	; 144
    2f14:	91 e0       	ldi	r25, 0x01	; 1
    2f16:	9a 8b       	std	Y+18, r25	; 0x12
    2f18:	89 8b       	std	Y+17, r24	; 0x11
    2f1a:	89 89       	ldd	r24, Y+17	; 0x11
    2f1c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <enu_PassByteAndLatch+0x272>
    2f22:	9a 8b       	std	Y+18, r25	; 0x12
    2f24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f26:	8b 89       	ldd	r24, Y+19	; 0x13
    2f28:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	9c 8b       	std	Y+20, r25	; 0x14
    2f2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f30:	8b 89       	ldd	r24, Y+19	; 0x13
    2f32:	9c 89       	ldd	r25, Y+20	; 0x14
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	69 f7       	brne	.-38     	; 0x2f12 <enu_PassByteAndLatch+0x266>
    2f38:	14 c0       	rjmp	.+40     	; 0x2f62 <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f40:	98 8d       	ldd	r25, Y+24	; 0x18
    2f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	9c 8b       	std	Y+20, r25	; 0x14
    2f4c:	8b 8b       	std	Y+19, r24	; 0x13
    2f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f50:	9c 89       	ldd	r25, Y+20	; 0x14
    2f52:	98 8b       	std	Y+16, r25	; 0x10
    2f54:	8f 87       	std	Y+15, r24	; 0x0f
    2f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f58:	98 89       	ldd	r25, Y+16	; 0x10
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <enu_PassByteAndLatch+0x2ae>
    2f5e:	98 8b       	std	Y+16, r25	; 0x10
    2f60:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	63 e0       	ldi	r22, 0x03	; 3
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	a0 e0       	ldi	r26, 0x00	; 0
    2f72:	b0 e4       	ldi	r27, 0x40	; 64
    2f74:	8b 87       	std	Y+11, r24	; 0x0b
    2f76:	9c 87       	std	Y+12, r25	; 0x0c
    2f78:	ad 87       	std	Y+13, r26	; 0x0d
    2f7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	4a e7       	ldi	r20, 0x7A	; 122
    2f8a:	55 e4       	ldi	r21, 0x45	; 69
    2f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	8f 83       	std	Y+7, r24	; 0x07
    2f96:	98 87       	std	Y+8, r25	; 0x08
    2f98:	a9 87       	std	Y+9, r26	; 0x09
    2f9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9e:	78 85       	ldd	r23, Y+8	; 0x08
    2fa0:	89 85       	ldd	r24, Y+9	; 0x09
    2fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e8       	ldi	r20, 0x80	; 128
    2faa:	5f e3       	ldi	r21, 0x3F	; 63
    2fac:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2fb0:	88 23       	and	r24, r24
    2fb2:	2c f4       	brge	.+10     	; 0x2fbe <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	8d 83       	std	Y+5, r24	; 0x05
    2fbc:	3f c0       	rjmp	.+126    	; 0x303c <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    2fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc0:	78 85       	ldd	r23, Y+8	; 0x08
    2fc2:	89 85       	ldd	r24, Y+9	; 0x09
    2fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	3f ef       	ldi	r19, 0xFF	; 255
    2fca:	4f e7       	ldi	r20, 0x7F	; 127
    2fcc:	57 e4       	ldi	r21, 0x47	; 71
    2fce:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2fd2:	18 16       	cp	r1, r24
    2fd4:	4c f5       	brge	.+82     	; 0x3028 <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e2       	ldi	r20, 0x20	; 32
    2fe4:	51 e4       	ldi	r21, 0x41	; 65
    2fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	9e 83       	std	Y+6, r25	; 0x06
    2ffc:	8d 83       	std	Y+5, r24	; 0x05
    2ffe:	0f c0       	rjmp	.+30     	; 0x301e <enu_PassByteAndLatch+0x372>
    3000:	80 e9       	ldi	r24, 0x90	; 144
    3002:	91 e0       	ldi	r25, 0x01	; 1
    3004:	9c 83       	std	Y+4, r25	; 0x04
    3006:	8b 83       	std	Y+3, r24	; 0x03
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	9c 81       	ldd	r25, Y+4	; 0x04
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <enu_PassByteAndLatch+0x360>
    3010:	9c 83       	std	Y+4, r25	; 0x04
    3012:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3014:	8d 81       	ldd	r24, Y+5	; 0x05
    3016:	9e 81       	ldd	r25, Y+6	; 0x06
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	9e 83       	std	Y+6, r25	; 0x06
    301c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	9e 81       	ldd	r25, Y+6	; 0x06
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	69 f7       	brne	.-38     	; 0x3000 <enu_PassByteAndLatch+0x354>
    3026:	14 c0       	rjmp	.+40     	; 0x3050 <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3028:	6f 81       	ldd	r22, Y+7	; 0x07
    302a:	78 85       	ldd	r23, Y+8	; 0x08
    302c:	89 85       	ldd	r24, Y+9	; 0x09
    302e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	9e 83       	std	Y+6, r25	; 0x06
    303a:	8d 83       	std	Y+5, r24	; 0x05
    303c:	8d 81       	ldd	r24, Y+5	; 0x05
    303e:	9e 81       	ldd	r25, Y+6	; 0x06
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	9a 81       	ldd	r25, Y+2	; 0x02
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	f1 f7       	brne	.-4      	; 0x3048 <enu_PassByteAndLatch+0x39c>
    304c:	9a 83       	std	Y+2, r25	; 0x02
    304e:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    3050:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    3052:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    3054:	ac 96       	adiw	r28, 0x2c	; 44
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	cf 91       	pop	r28
    3062:	df 91       	pop	r29
    3064:	08 95       	ret

00003066 <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	27 97       	sbiw	r28, 0x07	; 7
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	9c 83       	std	Y+4, r25	; 0x04
    307c:	8b 83       	std	Y+3, r24	; 0x03
    307e:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    3084:	8b 81       	ldd	r24, Y+3	; 0x03
    3086:	9c 81       	ldd	r25, Y+4	; 0x04
    3088:	00 97       	sbiw	r24, 0x00	; 0
    308a:	09 f4       	brne	.+2      	; 0x308e <enu_AddCustomCharacter+0x28>
    308c:	79 c0       	rjmp	.+242    	; 0x3180 <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    308e:	8d 81       	ldd	r24, Y+5	; 0x05
    3090:	88 30       	cpi	r24, 0x08	; 8
    3092:	08 f0       	brcs	.+2      	; 0x3096 <enu_AddCustomCharacter+0x30>
    3094:	72 c0       	rjmp	.+228    	; 0x317a <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    3096:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	61 e0       	ldi	r22, 0x01	; 1
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    30a2:	8d 81       	ldd	r24, Y+5	; 0x05
    30a4:	28 2f       	mov	r18, r24
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	3f 83       	std	Y+7, r19	; 0x07
    30aa:	2e 83       	std	Y+6, r18	; 0x06
    30ac:	8e 81       	ldd	r24, Y+6	; 0x06
    30ae:	9f 81       	ldd	r25, Y+7	; 0x07
    30b0:	83 30       	cpi	r24, 0x03	; 3
    30b2:	91 05       	cpc	r25, r1
    30b4:	a9 f1       	breq	.+106    	; 0x3120 <enu_AddCustomCharacter+0xba>
    30b6:	2e 81       	ldd	r18, Y+6	; 0x06
    30b8:	3f 81       	ldd	r19, Y+7	; 0x07
    30ba:	24 30       	cpi	r18, 0x04	; 4
    30bc:	31 05       	cpc	r19, r1
    30be:	7c f4       	brge	.+30     	; 0x30de <enu_AddCustomCharacter+0x78>
    30c0:	8e 81       	ldd	r24, Y+6	; 0x06
    30c2:	9f 81       	ldd	r25, Y+7	; 0x07
    30c4:	81 30       	cpi	r24, 0x01	; 1
    30c6:	91 05       	cpc	r25, r1
    30c8:	19 f1       	breq	.+70     	; 0x3110 <enu_AddCustomCharacter+0xaa>
    30ca:	2e 81       	ldd	r18, Y+6	; 0x06
    30cc:	3f 81       	ldd	r19, Y+7	; 0x07
    30ce:	22 30       	cpi	r18, 0x02	; 2
    30d0:	31 05       	cpc	r19, r1
    30d2:	14 f5       	brge	.+68     	; 0x3118 <enu_AddCustomCharacter+0xb2>
    30d4:	8e 81       	ldd	r24, Y+6	; 0x06
    30d6:	9f 81       	ldd	r25, Y+7	; 0x07
    30d8:	00 97       	sbiw	r24, 0x00	; 0
    30da:	b1 f0       	breq	.+44     	; 0x3108 <enu_AddCustomCharacter+0xa2>
    30dc:	34 c0       	rjmp	.+104    	; 0x3146 <enu_AddCustomCharacter+0xe0>
    30de:	2e 81       	ldd	r18, Y+6	; 0x06
    30e0:	3f 81       	ldd	r19, Y+7	; 0x07
    30e2:	25 30       	cpi	r18, 0x05	; 5
    30e4:	31 05       	cpc	r19, r1
    30e6:	21 f1       	breq	.+72     	; 0x3130 <enu_AddCustomCharacter+0xca>
    30e8:	8e 81       	ldd	r24, Y+6	; 0x06
    30ea:	9f 81       	ldd	r25, Y+7	; 0x07
    30ec:	85 30       	cpi	r24, 0x05	; 5
    30ee:	91 05       	cpc	r25, r1
    30f0:	dc f0       	brlt	.+54     	; 0x3128 <enu_AddCustomCharacter+0xc2>
    30f2:	2e 81       	ldd	r18, Y+6	; 0x06
    30f4:	3f 81       	ldd	r19, Y+7	; 0x07
    30f6:	26 30       	cpi	r18, 0x06	; 6
    30f8:	31 05       	cpc	r19, r1
    30fa:	f1 f0       	breq	.+60     	; 0x3138 <enu_AddCustomCharacter+0xd2>
    30fc:	8e 81       	ldd	r24, Y+6	; 0x06
    30fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3100:	87 30       	cpi	r24, 0x07	; 7
    3102:	91 05       	cpc	r25, r1
    3104:	e9 f0       	breq	.+58     	; 0x3140 <enu_AddCustomCharacter+0xda>
    3106:	1f c0       	rjmp	.+62     	; 0x3146 <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    3108:	80 e4       	ldi	r24, 0x40	; 64
    310a:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
    310e:	1b c0       	rjmp	.+54     	; 0x3146 <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    3110:	88 e4       	ldi	r24, 0x48	; 72
    3112:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
    3116:	17 c0       	rjmp	.+46     	; 0x3146 <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    3118:	80 e5       	ldi	r24, 0x50	; 80
    311a:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
    311e:	13 c0       	rjmp	.+38     	; 0x3146 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    3120:	88 e5       	ldi	r24, 0x58	; 88
    3122:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
    3126:	0f c0       	rjmp	.+30     	; 0x3146 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    3128:	80 e6       	ldi	r24, 0x60	; 96
    312a:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
    312e:	0b c0       	rjmp	.+22     	; 0x3146 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    3130:	88 e6       	ldi	r24, 0x68	; 104
    3132:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
    3136:	07 c0       	rjmp	.+14     	; 0x3146 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    3138:	80 e7       	ldi	r24, 0x70	; 112
    313a:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
    313e:	03 c0       	rjmp	.+6      	; 0x3146 <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    3140:	88 e7       	ldi	r24, 0x78	; 120
    3142:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	61 e0       	ldi	r22, 0x01	; 1
    314a:	41 e0       	ldi	r20, 0x01	; 1
    314c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    3150:	19 82       	std	Y+1, r1	; 0x01
    3152:	0e c0       	rjmp	.+28     	; 0x3170 <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	28 2f       	mov	r18, r24
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	9c 81       	ldd	r25, Y+4	; 0x04
    315e:	fc 01       	movw	r30, r24
    3160:	e2 0f       	add	r30, r18
    3162:	f3 1f       	adc	r31, r19
    3164:	80 81       	ld	r24, Z
    3166:	0e 94 56 16 	call	0x2cac	; 0x2cac <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	8f 5f       	subi	r24, 0xFF	; 255
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	88 30       	cpi	r24, 0x08	; 8
    3174:	78 f3       	brcs	.-34     	; 0x3154 <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    3176:	1a 82       	std	Y+2, r1	; 0x02
    3178:	05 c0       	rjmp	.+10     	; 0x3184 <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    317a:	82 e0       	ldi	r24, 0x02	; 2
    317c:	8a 83       	std	Y+2, r24	; 0x02
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3180:	83 e0       	ldi	r24, 0x03	; 3
    3182:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3186:	27 96       	adiw	r28, 0x07	; 7
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	00 d0       	rcall	.+0      	; 0x319e <enu_ConvertDigitToASCII+0x6>
    319e:	0f 92       	push	r0
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	9b 83       	std	Y+3, r25	; 0x03
    31a6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	9b 81       	ldd	r25, Y+3	; 0x03
    31b0:	00 97       	sbiw	r24, 0x00	; 0
    31b2:	89 f0       	breq	.+34     	; 0x31d6 <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    31b4:	ea 81       	ldd	r30, Y+2	; 0x02
    31b6:	fb 81       	ldd	r31, Y+3	; 0x03
    31b8:	80 81       	ld	r24, Z
    31ba:	8a 30       	cpi	r24, 0x0A	; 10
    31bc:	48 f4       	brcc	.+18     	; 0x31d0 <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    31be:	ea 81       	ldd	r30, Y+2	; 0x02
    31c0:	fb 81       	ldd	r31, Y+3	; 0x03
    31c2:	80 81       	ld	r24, Z
    31c4:	80 5d       	subi	r24, 0xD0	; 208
    31c6:	ea 81       	ldd	r30, Y+2	; 0x02
    31c8:	fb 81       	ldd	r31, Y+3	; 0x03
    31ca:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    31cc:	19 82       	std	Y+1, r1	; 0x01
    31ce:	05 c0       	rjmp	.+10     	; 0x31da <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	89 83       	std	Y+1, r24	; 0x01
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    31d6:	83 e0       	ldi	r24, 0x03	; 3
    31d8:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    31da:	89 81       	ldd	r24, Y+1	; 0x01
}
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	08 95       	ret

000031e8 <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    31e8:	ef 92       	push	r14
    31ea:	ff 92       	push	r15
    31ec:	0f 93       	push	r16
    31ee:	1f 93       	push	r17
    31f0:	df 93       	push	r29
    31f2:	cf 93       	push	r28
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	27 97       	sbiw	r28, 0x07	; 7
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	9f 83       	std	Y+7, r25	; 0x07
    3206:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    3208:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    320a:	8e 81       	ldd	r24, Y+6	; 0x06
    320c:	9f 81       	ldd	r25, Y+7	; 0x07
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	09 f4       	brne	.+2      	; 0x3214 <enu_ReverseInteger+0x2c>
    3212:	58 c0       	rjmp	.+176    	; 0x32c4 <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    3214:	19 82       	std	Y+1, r1	; 0x01
    3216:	1a 82       	std	Y+2, r1	; 0x02
    3218:	1b 82       	std	Y+3, r1	; 0x03
    321a:	1c 82       	std	Y+4, r1	; 0x04
    321c:	3c c0       	rjmp	.+120    	; 0x3296 <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	9a 81       	ldd	r25, Y+2	; 0x02
    3222:	ab 81       	ldd	r26, Y+3	; 0x03
    3224:	bc 81       	ldd	r27, Y+4	; 0x04
    3226:	2a e0       	ldi	r18, 0x0A	; 10
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e0       	ldi	r20, 0x00	; 0
    322c:	50 e0       	ldi	r21, 0x00	; 0
    322e:	bc 01       	movw	r22, r24
    3230:	cd 01       	movw	r24, r26
    3232:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <__mulsi3>
    3236:	7b 01       	movw	r14, r22
    3238:	8c 01       	movw	r16, r24
    323a:	ee 81       	ldd	r30, Y+6	; 0x06
    323c:	ff 81       	ldd	r31, Y+7	; 0x07
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	a2 81       	ldd	r26, Z+2	; 0x02
    3244:	b3 81       	ldd	r27, Z+3	; 0x03
    3246:	2a e0       	ldi	r18, 0x0A	; 10
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e0       	ldi	r20, 0x00	; 0
    324c:	50 e0       	ldi	r21, 0x00	; 0
    324e:	bc 01       	movw	r22, r24
    3250:	cd 01       	movw	r24, r26
    3252:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__udivmodsi4>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	8e 0d       	add	r24, r14
    325c:	9f 1d       	adc	r25, r15
    325e:	a0 1f       	adc	r26, r16
    3260:	b1 1f       	adc	r27, r17
    3262:	89 83       	std	Y+1, r24	; 0x01
    3264:	9a 83       	std	Y+2, r25	; 0x02
    3266:	ab 83       	std	Y+3, r26	; 0x03
    3268:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    326a:	ee 81       	ldd	r30, Y+6	; 0x06
    326c:	ff 81       	ldd	r31, Y+7	; 0x07
    326e:	80 81       	ld	r24, Z
    3270:	91 81       	ldd	r25, Z+1	; 0x01
    3272:	a2 81       	ldd	r26, Z+2	; 0x02
    3274:	b3 81       	ldd	r27, Z+3	; 0x03
    3276:	2a e0       	ldi	r18, 0x0A	; 10
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e0       	ldi	r20, 0x00	; 0
    327c:	50 e0       	ldi	r21, 0x00	; 0
    327e:	bc 01       	movw	r22, r24
    3280:	cd 01       	movw	r24, r26
    3282:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__udivmodsi4>
    3286:	da 01       	movw	r26, r20
    3288:	c9 01       	movw	r24, r18
    328a:	ee 81       	ldd	r30, Y+6	; 0x06
    328c:	ff 81       	ldd	r31, Y+7	; 0x07
    328e:	80 83       	st	Z, r24
    3290:	91 83       	std	Z+1, r25	; 0x01
    3292:	a2 83       	std	Z+2, r26	; 0x02
    3294:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    3296:	ee 81       	ldd	r30, Y+6	; 0x06
    3298:	ff 81       	ldd	r31, Y+7	; 0x07
    329a:	80 81       	ld	r24, Z
    329c:	91 81       	ldd	r25, Z+1	; 0x01
    329e:	a2 81       	ldd	r26, Z+2	; 0x02
    32a0:	b3 81       	ldd	r27, Z+3	; 0x03
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	a1 05       	cpc	r26, r1
    32a6:	b1 05       	cpc	r27, r1
    32a8:	09 f0       	breq	.+2      	; 0x32ac <enu_ReverseInteger+0xc4>
    32aa:	b9 cf       	rjmp	.-142    	; 0x321e <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    32ac:	ee 81       	ldd	r30, Y+6	; 0x06
    32ae:	ff 81       	ldd	r31, Y+7	; 0x07
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	9a 81       	ldd	r25, Y+2	; 0x02
    32b4:	ab 81       	ldd	r26, Y+3	; 0x03
    32b6:	bc 81       	ldd	r27, Y+4	; 0x04
    32b8:	80 83       	st	Z, r24
    32ba:	91 83       	std	Z+1, r25	; 0x01
    32bc:	a2 83       	std	Z+2, r26	; 0x02
    32be:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    32c0:	1d 82       	std	Y+5, r1	; 0x05
    32c2:	02 c0       	rjmp	.+4      	; 0x32c8 <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    32c4:	83 e0       	ldi	r24, 0x03	; 3
    32c6:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    32c8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    32ca:	27 96       	adiw	r28, 0x07	; 7
    32cc:	0f b6       	in	r0, 0x3f	; 63
    32ce:	f8 94       	cli
    32d0:	de bf       	out	0x3e, r29	; 62
    32d2:	0f be       	out	0x3f, r0	; 63
    32d4:	cd bf       	out	0x3d, r28	; 61
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	1f 91       	pop	r17
    32dc:	0f 91       	pop	r16
    32de:	ff 90       	pop	r15
    32e0:	ef 90       	pop	r14
    32e2:	08 95       	ret

000032e4 <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    32e4:	df 93       	push	r29
    32e6:	cf 93       	push	r28
    32e8:	00 d0       	rcall	.+0      	; 0x32ea <Keypad_enu_Initialization+0x6>
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    32f2:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    32f4:	19 82       	std	Y+1, r1	; 0x01
    32f6:	31 c0       	rjmp	.+98     	; 0x335a <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	88 2f       	mov	r24, r24
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	88 0f       	add	r24, r24
    3300:	99 1f       	adc	r25, r25
    3302:	fc 01       	movw	r30, r24
    3304:	ea 57       	subi	r30, 0x7A	; 122
    3306:	fe 4f       	sbci	r31, 0xFE	; 254
    3308:	20 81       	ld	r18, Z
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	88 2f       	mov	r24, r24
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	88 0f       	add	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	fc 01       	movw	r30, r24
    3316:	e9 57       	subi	r30, 0x79	; 121
    3318:	fe 4f       	sbci	r31, 0xFE	; 254
    331a:	90 81       	ld	r25, Z
    331c:	82 2f       	mov	r24, r18
    331e:	69 2f       	mov	r22, r25
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	88 2f       	mov	r24, r24
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	88 0f       	add	r24, r24
    332e:	99 1f       	adc	r25, r25
    3330:	fc 01       	movw	r30, r24
    3332:	ea 57       	subi	r30, 0x7A	; 122
    3334:	fe 4f       	sbci	r31, 0xFE	; 254
    3336:	20 81       	ld	r18, Z
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	88 2f       	mov	r24, r24
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	88 0f       	add	r24, r24
    3340:	99 1f       	adc	r25, r25
    3342:	fc 01       	movw	r30, r24
    3344:	e9 57       	subi	r30, 0x79	; 121
    3346:	fe 4f       	sbci	r31, 0xFE	; 254
    3348:	90 81       	ld	r25, Z
    334a:	82 2f       	mov	r24, r18
    334c:	69 2f       	mov	r22, r25
    334e:	41 e0       	ldi	r20, 0x01	; 1
    3350:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	8f 5f       	subi	r24, 0xFF	; 255
    3358:	89 83       	std	Y+1, r24	; 0x01
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	84 30       	cpi	r24, 0x04	; 4
    335e:	60 f2       	brcs	.-104    	; 0x32f8 <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    3360:	19 82       	std	Y+1, r1	; 0x01
    3362:	31 c0       	rjmp	.+98     	; 0x33c6 <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	88 2f       	mov	r24, r24
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	88 0f       	add	r24, r24
    336c:	99 1f       	adc	r25, r25
    336e:	fc 01       	movw	r30, r24
    3370:	e2 57       	subi	r30, 0x72	; 114
    3372:	fe 4f       	sbci	r31, 0xFE	; 254
    3374:	20 81       	ld	r18, Z
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	88 2f       	mov	r24, r24
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	fc 01       	movw	r30, r24
    3382:	e1 57       	subi	r30, 0x71	; 113
    3384:	fe 4f       	sbci	r31, 0xFE	; 254
    3386:	90 81       	ld	r25, Z
    3388:	82 2f       	mov	r24, r18
    338a:	69 2f       	mov	r22, r25
    338c:	41 e0       	ldi	r20, 0x01	; 1
    338e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	88 2f       	mov	r24, r24
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	88 0f       	add	r24, r24
    339a:	99 1f       	adc	r25, r25
    339c:	fc 01       	movw	r30, r24
    339e:	e2 57       	subi	r30, 0x72	; 114
    33a0:	fe 4f       	sbci	r31, 0xFE	; 254
    33a2:	20 81       	ld	r18, Z
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	88 2f       	mov	r24, r24
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	fc 01       	movw	r30, r24
    33b0:	e1 57       	subi	r30, 0x71	; 113
    33b2:	fe 4f       	sbci	r31, 0xFE	; 254
    33b4:	90 81       	ld	r25, Z
    33b6:	82 2f       	mov	r24, r18
    33b8:	69 2f       	mov	r22, r25
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	8f 5f       	subi	r24, 0xFF	; 255
    33c4:	89 83       	std	Y+1, r24	; 0x01
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	84 30       	cpi	r24, 0x04	; 4
    33ca:	60 f2       	brcs	.-104    	; 0x3364 <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    33cc:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    33ce:	8a 81       	ldd	r24, Y+2	; 0x02

}
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	08 95       	ret

000033da <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	aa 97       	sbiw	r28, 0x2a	; 42
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	9d a3       	std	Y+37, r25	; 0x25
    33f0:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    33f6:	8c a1       	ldd	r24, Y+36	; 0x24
    33f8:	9d a1       	ldd	r25, Y+37	; 0x25
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	09 f4       	brne	.+2      	; 0x3400 <Keypad_enu_GetButtonPressedValue+0x26>
    33fe:	68 c1       	rjmp	.+720    	; 0x36d0 <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    3400:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    3402:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    3404:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    3406:	ec a1       	ldd	r30, Y+36	; 0x24
    3408:	fd a1       	ldd	r31, Y+37	; 0x25
    340a:	8f ef       	ldi	r24, 0xFF	; 255
    340c:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    340e:	19 8a       	std	Y+17, r1	; 0x11
    3410:	5a c1       	rjmp	.+692    	; 0x36c6 <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    3412:	89 89       	ldd	r24, Y+17	; 0x11
    3414:	88 2f       	mov	r24, r24
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	88 0f       	add	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	fc 01       	movw	r30, r24
    341e:	ea 57       	subi	r30, 0x7A	; 122
    3420:	fe 4f       	sbci	r31, 0xFE	; 254
    3422:	40 81       	ld	r20, Z
    3424:	89 89       	ldd	r24, Y+17	; 0x11
    3426:	88 2f       	mov	r24, r24
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	88 0f       	add	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	fc 01       	movw	r30, r24
    3430:	e9 57       	subi	r30, 0x79	; 121
    3432:	fe 4f       	sbci	r31, 0xFE	; 254
    3434:	90 81       	ld	r25, Z
    3436:	9e 01       	movw	r18, r28
    3438:	2d 5e       	subi	r18, 0xED	; 237
    343a:	3f 4f       	sbci	r19, 0xFF	; 255
    343c:	84 2f       	mov	r24, r20
    343e:	69 2f       	mov	r22, r25
    3440:	a9 01       	movw	r20, r18
    3442:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    3446:	8b 89       	ldd	r24, Y+19	; 0x13
    3448:	88 23       	and	r24, r24
    344a:	09 f0       	breq	.+2      	; 0x344e <Keypad_enu_GetButtonPressedValue+0x74>
    344c:	36 c1       	rjmp	.+620    	; 0x36ba <Keypad_enu_GetButtonPressedValue+0x2e0>
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	a0 e4       	ldi	r26, 0x40	; 64
    3454:	b0 e4       	ldi	r27, 0x40	; 64
    3456:	8b 87       	std	Y+11, r24	; 0x0b
    3458:	9c 87       	std	Y+12, r25	; 0x0c
    345a:	ad 87       	std	Y+13, r26	; 0x0d
    345c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3460:	7c 85       	ldd	r23, Y+12	; 0x0c
    3462:	8d 85       	ldd	r24, Y+13	; 0x0d
    3464:	9e 85       	ldd	r25, Y+14	; 0x0e
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	4a e7       	ldi	r20, 0x7A	; 122
    346c:	55 e4       	ldi	r21, 0x45	; 69
    346e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	8f 83       	std	Y+7, r24	; 0x07
    3478:	98 87       	std	Y+8, r25	; 0x08
    347a:	a9 87       	std	Y+9, r26	; 0x09
    347c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    347e:	6f 81       	ldd	r22, Y+7	; 0x07
    3480:	78 85       	ldd	r23, Y+8	; 0x08
    3482:	89 85       	ldd	r24, Y+9	; 0x09
    3484:	9a 85       	ldd	r25, Y+10	; 0x0a
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e8       	ldi	r20, 0x80	; 128
    348c:	5f e3       	ldi	r21, 0x3F	; 63
    348e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3492:	88 23       	and	r24, r24
    3494:	2c f4       	brge	.+10     	; 0x34a0 <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	8d 83       	std	Y+5, r24	; 0x05
    349e:	3f c0       	rjmp	.+126    	; 0x351e <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    34a0:	6f 81       	ldd	r22, Y+7	; 0x07
    34a2:	78 85       	ldd	r23, Y+8	; 0x08
    34a4:	89 85       	ldd	r24, Y+9	; 0x09
    34a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a8:	20 e0       	ldi	r18, 0x00	; 0
    34aa:	3f ef       	ldi	r19, 0xFF	; 255
    34ac:	4f e7       	ldi	r20, 0x7F	; 127
    34ae:	57 e4       	ldi	r21, 0x47	; 71
    34b0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    34b4:	18 16       	cp	r1, r24
    34b6:	4c f5       	brge	.+82     	; 0x350a <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    34bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34be:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	40 e2       	ldi	r20, 0x20	; 32
    34c6:	51 e4       	ldi	r21, 0x41	; 65
    34c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	bc 01       	movw	r22, r24
    34d2:	cd 01       	movw	r24, r26
    34d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	9e 83       	std	Y+6, r25	; 0x06
    34de:	8d 83       	std	Y+5, r24	; 0x05
    34e0:	0f c0       	rjmp	.+30     	; 0x3500 <Keypad_enu_GetButtonPressedValue+0x126>
    34e2:	80 e9       	ldi	r24, 0x90	; 144
    34e4:	91 e0       	ldi	r25, 0x01	; 1
    34e6:	9c 83       	std	Y+4, r25	; 0x04
    34e8:	8b 83       	std	Y+3, r24	; 0x03
    34ea:	8b 81       	ldd	r24, Y+3	; 0x03
    34ec:	9c 81       	ldd	r25, Y+4	; 0x04
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	f1 f7       	brne	.-4      	; 0x34ee <Keypad_enu_GetButtonPressedValue+0x114>
    34f2:	9c 83       	std	Y+4, r25	; 0x04
    34f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f6:	8d 81       	ldd	r24, Y+5	; 0x05
    34f8:	9e 81       	ldd	r25, Y+6	; 0x06
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	9e 83       	std	Y+6, r25	; 0x06
    34fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3500:	8d 81       	ldd	r24, Y+5	; 0x05
    3502:	9e 81       	ldd	r25, Y+6	; 0x06
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	69 f7       	brne	.-38     	; 0x34e2 <Keypad_enu_GetButtonPressedValue+0x108>
    3508:	14 c0       	rjmp	.+40     	; 0x3532 <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    350a:	6f 81       	ldd	r22, Y+7	; 0x07
    350c:	78 85       	ldd	r23, Y+8	; 0x08
    350e:	89 85       	ldd	r24, Y+9	; 0x09
    3510:	9a 85       	ldd	r25, Y+10	; 0x0a
    3512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	9e 83       	std	Y+6, r25	; 0x06
    351c:	8d 83       	std	Y+5, r24	; 0x05
    351e:	8d 81       	ldd	r24, Y+5	; 0x05
    3520:	9e 81       	ldd	r25, Y+6	; 0x06
    3522:	9a 83       	std	Y+2, r25	; 0x02
    3524:	89 83       	std	Y+1, r24	; 0x01
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	9a 81       	ldd	r25, Y+2	; 0x02
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	f1 f7       	brne	.-4      	; 0x352a <Keypad_enu_GetButtonPressedValue+0x150>
    352e:	9a 83       	std	Y+2, r25	; 0x02
    3530:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    3532:	89 89       	ldd	r24, Y+17	; 0x11
    3534:	88 2f       	mov	r24, r24
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	88 0f       	add	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	fc 01       	movw	r30, r24
    353e:	ea 57       	subi	r30, 0x7A	; 122
    3540:	fe 4f       	sbci	r31, 0xFE	; 254
    3542:	40 81       	ld	r20, Z
    3544:	89 89       	ldd	r24, Y+17	; 0x11
    3546:	88 2f       	mov	r24, r24
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	88 0f       	add	r24, r24
    354c:	99 1f       	adc	r25, r25
    354e:	fc 01       	movw	r30, r24
    3550:	e9 57       	subi	r30, 0x79	; 121
    3552:	fe 4f       	sbci	r31, 0xFE	; 254
    3554:	90 81       	ld	r25, Z
    3556:	9e 01       	movw	r18, r28
    3558:	2d 5e       	subi	r18, 0xED	; 237
    355a:	3f 4f       	sbci	r19, 0xFF	; 255
    355c:	84 2f       	mov	r24, r20
    355e:	69 2f       	mov	r22, r25
    3560:	a9 01       	movw	r20, r18
    3562:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    3566:	8b 89       	ldd	r24, Y+19	; 0x13
    3568:	88 23       	and	r24, r24
    356a:	09 f0       	breq	.+2      	; 0x356e <Keypad_enu_GetButtonPressedValue+0x194>
    356c:	a6 c0       	rjmp	.+332    	; 0x36ba <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    356e:	18 8a       	std	Y+16, r1	; 0x10
    3570:	a0 c0       	rjmp	.+320    	; 0x36b2 <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    3572:	88 89       	ldd	r24, Y+16	; 0x10
    3574:	88 2f       	mov	r24, r24
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	88 0f       	add	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	fc 01       	movw	r30, r24
    357e:	e2 57       	subi	r30, 0x72	; 114
    3580:	fe 4f       	sbci	r31, 0xFE	; 254
    3582:	20 81       	ld	r18, Z
    3584:	88 89       	ldd	r24, Y+16	; 0x10
    3586:	88 2f       	mov	r24, r24
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	88 0f       	add	r24, r24
    358c:	99 1f       	adc	r25, r25
    358e:	fc 01       	movw	r30, r24
    3590:	e1 57       	subi	r30, 0x71	; 113
    3592:	fe 4f       	sbci	r31, 0xFE	; 254
    3594:	90 81       	ld	r25, Z
    3596:	82 2f       	mov	r24, r18
    3598:	69 2f       	mov	r22, r25
    359a:	41 e0       	ldi	r20, 0x01	; 1
    359c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    35a0:	89 89       	ldd	r24, Y+17	; 0x11
    35a2:	88 2f       	mov	r24, r24
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	88 0f       	add	r24, r24
    35a8:	99 1f       	adc	r25, r25
    35aa:	fc 01       	movw	r30, r24
    35ac:	ea 57       	subi	r30, 0x7A	; 122
    35ae:	fe 4f       	sbci	r31, 0xFE	; 254
    35b0:	40 81       	ld	r20, Z
    35b2:	89 89       	ldd	r24, Y+17	; 0x11
    35b4:	88 2f       	mov	r24, r24
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	88 0f       	add	r24, r24
    35ba:	99 1f       	adc	r25, r25
    35bc:	fc 01       	movw	r30, r24
    35be:	e9 57       	subi	r30, 0x79	; 121
    35c0:	fe 4f       	sbci	r31, 0xFE	; 254
    35c2:	90 81       	ld	r25, Z
    35c4:	9e 01       	movw	r18, r28
    35c6:	2d 5e       	subi	r18, 0xED	; 237
    35c8:	3f 4f       	sbci	r19, 0xFF	; 255
    35ca:	84 2f       	mov	r24, r20
    35cc:	69 2f       	mov	r22, r25
    35ce:	a9 01       	movw	r20, r18
    35d0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    35d4:	8b 89       	ldd	r24, Y+19	; 0x13
    35d6:	81 30       	cpi	r24, 0x01	; 1
    35d8:	09 f0       	breq	.+2      	; 0x35dc <Keypad_enu_GetButtonPressedValue+0x202>
    35da:	51 c0       	rjmp	.+162    	; 0x367e <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    35dc:	ce 01       	movw	r24, r28
    35de:	44 96       	adiw	r24, 0x14	; 20
    35e0:	9f a3       	std	Y+39, r25	; 0x27
    35e2:	8e a3       	std	Y+38, r24	; 0x26
    35e4:	e9 e9       	ldi	r30, 0x99	; 153
    35e6:	f1 e0       	ldi	r31, 0x01	; 1
    35e8:	f9 a7       	std	Y+41, r31	; 0x29
    35ea:	e8 a7       	std	Y+40, r30	; 0x28
    35ec:	f0 e1       	ldi	r31, 0x10	; 16
    35ee:	fa a7       	std	Y+42, r31	; 0x2a
    35f0:	e8 a5       	ldd	r30, Y+40	; 0x28
    35f2:	f9 a5       	ldd	r31, Y+41	; 0x29
    35f4:	00 80       	ld	r0, Z
    35f6:	88 a5       	ldd	r24, Y+40	; 0x28
    35f8:	99 a5       	ldd	r25, Y+41	; 0x29
    35fa:	01 96       	adiw	r24, 0x01	; 1
    35fc:	99 a7       	std	Y+41, r25	; 0x29
    35fe:	88 a7       	std	Y+40, r24	; 0x28
    3600:	ee a1       	ldd	r30, Y+38	; 0x26
    3602:	ff a1       	ldd	r31, Y+39	; 0x27
    3604:	00 82       	st	Z, r0
    3606:	8e a1       	ldd	r24, Y+38	; 0x26
    3608:	9f a1       	ldd	r25, Y+39	; 0x27
    360a:	01 96       	adiw	r24, 0x01	; 1
    360c:	9f a3       	std	Y+39, r25	; 0x27
    360e:	8e a3       	std	Y+38, r24	; 0x26
    3610:	9a a5       	ldd	r25, Y+42	; 0x2a
    3612:	91 50       	subi	r25, 0x01	; 1
    3614:	9a a7       	std	Y+42, r25	; 0x2a
    3616:	ea a5       	ldd	r30, Y+42	; 0x2a
    3618:	ee 23       	and	r30, r30
    361a:	51 f7       	brne	.-44     	; 0x35f0 <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    361c:	89 89       	ldd	r24, Y+17	; 0x11
    361e:	28 2f       	mov	r18, r24
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	88 89       	ldd	r24, Y+16	; 0x10
    3624:	48 2f       	mov	r20, r24
    3626:	50 e0       	ldi	r21, 0x00	; 0
    3628:	22 0f       	add	r18, r18
    362a:	33 1f       	adc	r19, r19
    362c:	22 0f       	add	r18, r18
    362e:	33 1f       	adc	r19, r19
    3630:	ce 01       	movw	r24, r28
    3632:	01 96       	adiw	r24, 0x01	; 1
    3634:	82 0f       	add	r24, r18
    3636:	93 1f       	adc	r25, r19
    3638:	84 0f       	add	r24, r20
    363a:	95 1f       	adc	r25, r21
    363c:	fc 01       	movw	r30, r24
    363e:	73 96       	adiw	r30, 0x13	; 19
    3640:	80 81       	ld	r24, Z
    3642:	ec a1       	ldd	r30, Y+36	; 0x24
    3644:	fd a1       	ldd	r31, Y+37	; 0x25
    3646:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    364c:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    364e:	88 89       	ldd	r24, Y+16	; 0x10
    3650:	88 2f       	mov	r24, r24
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	88 0f       	add	r24, r24
    3656:	99 1f       	adc	r25, r25
    3658:	fc 01       	movw	r30, r24
    365a:	e2 57       	subi	r30, 0x72	; 114
    365c:	fe 4f       	sbci	r31, 0xFE	; 254
    365e:	20 81       	ld	r18, Z
    3660:	88 89       	ldd	r24, Y+16	; 0x10
    3662:	88 2f       	mov	r24, r24
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	88 0f       	add	r24, r24
    3668:	99 1f       	adc	r25, r25
    366a:	fc 01       	movw	r30, r24
    366c:	e1 57       	subi	r30, 0x71	; 113
    366e:	fe 4f       	sbci	r31, 0xFE	; 254
    3670:	90 81       	ld	r25, Z
    3672:	82 2f       	mov	r24, r18
    3674:	69 2f       	mov	r22, r25
    3676:	40 e0       	ldi	r20, 0x00	; 0
    3678:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    367c:	1e c0       	rjmp	.+60     	; 0x36ba <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    367e:	88 89       	ldd	r24, Y+16	; 0x10
    3680:	88 2f       	mov	r24, r24
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	88 0f       	add	r24, r24
    3686:	99 1f       	adc	r25, r25
    3688:	fc 01       	movw	r30, r24
    368a:	e2 57       	subi	r30, 0x72	; 114
    368c:	fe 4f       	sbci	r31, 0xFE	; 254
    368e:	20 81       	ld	r18, Z
    3690:	88 89       	ldd	r24, Y+16	; 0x10
    3692:	88 2f       	mov	r24, r24
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	88 0f       	add	r24, r24
    3698:	99 1f       	adc	r25, r25
    369a:	fc 01       	movw	r30, r24
    369c:	e1 57       	subi	r30, 0x71	; 113
    369e:	fe 4f       	sbci	r31, 0xFE	; 254
    36a0:	90 81       	ld	r25, Z
    36a2:	82 2f       	mov	r24, r18
    36a4:	69 2f       	mov	r22, r25
    36a6:	40 e0       	ldi	r20, 0x00	; 0
    36a8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    36ac:	88 89       	ldd	r24, Y+16	; 0x10
    36ae:	8f 5f       	subi	r24, 0xFF	; 255
    36b0:	88 8b       	std	Y+16, r24	; 0x10
    36b2:	88 89       	ldd	r24, Y+16	; 0x10
    36b4:	84 30       	cpi	r24, 0x04	; 4
    36b6:	08 f4       	brcc	.+2      	; 0x36ba <Keypad_enu_GetButtonPressedValue+0x2e0>
    36b8:	5c cf       	rjmp	.-328    	; 0x3572 <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    36ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    36bc:	88 23       	and	r24, r24
    36be:	51 f4       	brne	.+20     	; 0x36d4 <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    36c0:	89 89       	ldd	r24, Y+17	; 0x11
    36c2:	8f 5f       	subi	r24, 0xFF	; 255
    36c4:	89 8b       	std	Y+17, r24	; 0x11
    36c6:	89 89       	ldd	r24, Y+17	; 0x11
    36c8:	84 30       	cpi	r24, 0x04	; 4
    36ca:	08 f4       	brcc	.+2      	; 0x36ce <Keypad_enu_GetButtonPressedValue+0x2f4>
    36cc:	a2 ce       	rjmp	.-700    	; 0x3412 <Keypad_enu_GetButtonPressedValue+0x38>
    36ce:	02 c0       	rjmp	.+4      	; 0x36d4 <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    36d0:	83 e0       	ldi	r24, 0x03	; 3
    36d2:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    36d4:	8a 89       	ldd	r24, Y+18	; 0x12

}
    36d6:	aa 96       	adiw	r28, 0x2a	; 42
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	cf 91       	pop	r28
    36e4:	df 91       	pop	r29
    36e6:	08 95       	ret

000036e8 <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    36e8:	df 93       	push	r29
    36ea:	cf 93       	push	r28
    36ec:	0f 92       	push	r0
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    36f6:	80 e0       	ldi	r24, 0x00	; 0
    36f8:	64 e0       	ldi	r22, 0x04	; 4
    36fa:	41 e0       	ldi	r20, 0x01	; 1
    36fc:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	65 e0       	ldi	r22, 0x05	; 5
    3704:	41 e0       	ldi	r20, 0x01	; 1
    3706:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	66 e0       	ldi	r22, 0x06	; 6
    370e:	41 e0       	ldi	r20, 0x01	; 1
    3710:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	67 e0       	ldi	r22, 0x07	; 7
    3718:	41 e0       	ldi	r20, 0x01	; 1
    371a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	62 e0       	ldi	r22, 0x02	; 2
    3722:	41 e0       	ldi	r20, 0x01	; 1
    3724:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	61 e0       	ldi	r22, 0x01	; 1
    372c:	41 e0       	ldi	r20, 0x01	; 1
    372e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    3732:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    3734:	89 81       	ldd	r24, Y+1	; 0x01

}
    3736:	0f 90       	pop	r0
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	08 95       	ret

0000373e <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    373e:	df 93       	push	r29
    3740:	cf 93       	push	r28
    3742:	00 d0       	rcall	.+0      	; 0x3744 <Hexadecoder_enu_DisplayNum+0x6>
    3744:	cd b7       	in	r28, 0x3d	; 61
    3746:	de b7       	in	r29, 0x3e	; 62
    3748:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    374e:	8a 81       	ldd	r24, Y+2	; 0x02
    3750:	8a 30       	cpi	r24, 0x0A	; 10
    3752:	40 f5       	brcc	.+80     	; 0x37a4 <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	98 2f       	mov	r25, r24
    3758:	91 70       	andi	r25, 0x01	; 1
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	64 e0       	ldi	r22, 0x04	; 4
    375e:	49 2f       	mov	r20, r25
    3760:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    3764:	8a 81       	ldd	r24, Y+2	; 0x02
    3766:	86 95       	lsr	r24
    3768:	98 2f       	mov	r25, r24
    376a:	91 70       	andi	r25, 0x01	; 1
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	65 e0       	ldi	r22, 0x05	; 5
    3770:	49 2f       	mov	r20, r25
    3772:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	86 95       	lsr	r24
    377a:	86 95       	lsr	r24
    377c:	98 2f       	mov	r25, r24
    377e:	91 70       	andi	r25, 0x01	; 1
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	66 e0       	ldi	r22, 0x06	; 6
    3784:	49 2f       	mov	r20, r25
    3786:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    378a:	8a 81       	ldd	r24, Y+2	; 0x02
    378c:	86 95       	lsr	r24
    378e:	86 95       	lsr	r24
    3790:	86 95       	lsr	r24
    3792:	98 2f       	mov	r25, r24
    3794:	91 70       	andi	r25, 0x01	; 1
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	67 e0       	ldi	r22, 0x07	; 7
    379a:	49 2f       	mov	r20, r25
    379c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    37a0:	19 82       	std	Y+1, r1	; 0x01
    37a2:	02 c0       	rjmp	.+4      	; 0x37a8 <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    37a4:	82 e0       	ldi	r24, 0x02	; 2
    37a6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    37aa:	0f 90       	pop	r0
    37ac:	0f 90       	pop	r0
    37ae:	cf 91       	pop	r28
    37b0:	df 91       	pop	r29
    37b2:	08 95       	ret

000037b4 <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    37b4:	df 93       	push	r29
    37b6:	cf 93       	push	r28
    37b8:	00 d0       	rcall	.+0      	; 0x37ba <Hexadecoder_enu_EnableSSG+0x6>
    37ba:	00 d0       	rcall	.+0      	; 0x37bc <Hexadecoder_enu_EnableSSG+0x8>
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
    37c0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    37c6:	8a 81       	ldd	r24, Y+2	; 0x02
    37c8:	28 2f       	mov	r18, r24
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	3c 83       	std	Y+4, r19	; 0x04
    37ce:	2b 83       	std	Y+3, r18	; 0x03
    37d0:	8b 81       	ldd	r24, Y+3	; 0x03
    37d2:	9c 81       	ldd	r25, Y+4	; 0x04
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	31 f0       	breq	.+12     	; 0x37e4 <Hexadecoder_enu_EnableSSG+0x30>
    37d8:	2b 81       	ldd	r18, Y+3	; 0x03
    37da:	3c 81       	ldd	r19, Y+4	; 0x04
    37dc:	21 30       	cpi	r18, 0x01	; 1
    37de:	31 05       	cpc	r19, r1
    37e0:	41 f0       	breq	.+16     	; 0x37f2 <Hexadecoder_enu_EnableSSG+0x3e>
    37e2:	0e c0       	rjmp	.+28     	; 0x3800 <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	62 e0       	ldi	r22, 0x02	; 2
    37e8:	41 e0       	ldi	r20, 0x01	; 1
    37ea:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    37ee:	19 82       	std	Y+1, r1	; 0x01
    37f0:	09 c0       	rjmp	.+18     	; 0x3804 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	61 e0       	ldi	r22, 0x01	; 1
    37f6:	41 e0       	ldi	r20, 0x01	; 1
    37f8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    37fc:	19 82       	std	Y+1, r1	; 0x01
    37fe:	02 c0       	rjmp	.+4      	; 0x3804 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3800:	82 e0       	ldi	r24, 0x02	; 2
    3802:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    3804:	89 81       	ldd	r24, Y+1	; 0x01
}
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
    380e:	cf 91       	pop	r28
    3810:	df 91       	pop	r29
    3812:	08 95       	ret

00003814 <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    3814:	df 93       	push	r29
    3816:	cf 93       	push	r28
    3818:	00 d0       	rcall	.+0      	; 0x381a <Hexadecoder_enu_DisableSSG+0x6>
    381a:	00 d0       	rcall	.+0      	; 0x381c <Hexadecoder_enu_DisableSSG+0x8>
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
    3820:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    3826:	8a 81       	ldd	r24, Y+2	; 0x02
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	3c 83       	std	Y+4, r19	; 0x04
    382e:	2b 83       	std	Y+3, r18	; 0x03
    3830:	8b 81       	ldd	r24, Y+3	; 0x03
    3832:	9c 81       	ldd	r25, Y+4	; 0x04
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	31 f0       	breq	.+12     	; 0x3844 <Hexadecoder_enu_DisableSSG+0x30>
    3838:	2b 81       	ldd	r18, Y+3	; 0x03
    383a:	3c 81       	ldd	r19, Y+4	; 0x04
    383c:	21 30       	cpi	r18, 0x01	; 1
    383e:	31 05       	cpc	r19, r1
    3840:	41 f0       	breq	.+16     	; 0x3852 <Hexadecoder_enu_DisableSSG+0x3e>
    3842:	0e c0       	rjmp	.+28     	; 0x3860 <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	62 e0       	ldi	r22, 0x02	; 2
    3848:	40 e0       	ldi	r20, 0x00	; 0
    384a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    384e:	19 82       	std	Y+1, r1	; 0x01
    3850:	09 c0       	rjmp	.+18     	; 0x3864 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	61 e0       	ldi	r22, 0x01	; 1
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    385c:	19 82       	std	Y+1, r1	; 0x01
    385e:	02 c0       	rjmp	.+4      	; 0x3864 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3860:	82 e0       	ldi	r24, 0x02	; 2
    3862:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    3864:	89 81       	ldd	r24, Y+1	; 0x01
}
    3866:	0f 90       	pop	r0
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	0f 92       	push	r0
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	62 e0       	ldi	r22, 0x02	; 2
    3886:	40 e0       	ldi	r20, 0x00	; 0
    3888:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	61 e0       	ldi	r22, 0x01	; 1
    3890:	40 e0       	ldi	r20, 0x00	; 0
    3892:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    3896:	89 81       	ldd	r24, Y+1	; 0x01
}
    3898:	0f 90       	pop	r0
    389a:	cf 91       	pop	r28
    389c:	df 91       	pop	r29
    389e:	08 95       	ret

000038a0 <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    38a0:	df 93       	push	r29
    38a2:	cf 93       	push	r28
    38a4:	00 d0       	rcall	.+0      	; 0x38a6 <Buzzer_enu_Initialization+0x6>
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    38ae:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    38b0:	19 82       	std	Y+1, r1	; 0x01
    38b2:	31 c0       	rjmp	.+98     	; 0x3916 <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    38b4:	89 81       	ldd	r24, Y+1	; 0x01
    38b6:	88 2f       	mov	r24, r24
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	88 0f       	add	r24, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	fc 01       	movw	r30, r24
    38c0:	e9 56       	subi	r30, 0x69	; 105
    38c2:	fe 4f       	sbci	r31, 0xFE	; 254
    38c4:	20 81       	ld	r18, Z
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	88 2f       	mov	r24, r24
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	88 0f       	add	r24, r24
    38ce:	99 1f       	adc	r25, r25
    38d0:	fc 01       	movw	r30, r24
    38d2:	e8 56       	subi	r30, 0x68	; 104
    38d4:	fe 4f       	sbci	r31, 0xFE	; 254
    38d6:	90 81       	ld	r25, Z
    38d8:	82 2f       	mov	r24, r18
    38da:	69 2f       	mov	r22, r25
    38dc:	41 e0       	ldi	r20, 0x01	; 1
    38de:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	88 2f       	mov	r24, r24
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	88 0f       	add	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	fc 01       	movw	r30, r24
    38ee:	e9 56       	subi	r30, 0x69	; 105
    38f0:	fe 4f       	sbci	r31, 0xFE	; 254
    38f2:	20 81       	ld	r18, Z
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	88 2f       	mov	r24, r24
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	fc 01       	movw	r30, r24
    3900:	e8 56       	subi	r30, 0x68	; 104
    3902:	fe 4f       	sbci	r31, 0xFE	; 254
    3904:	90 81       	ld	r25, Z
    3906:	82 2f       	mov	r24, r18
    3908:	69 2f       	mov	r22, r25
    390a:	40 e0       	ldi	r20, 0x00	; 0
    390c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	8f 5f       	subi	r24, 0xFF	; 255
    3914:	89 83       	std	Y+1, r24	; 0x01
    3916:	90 91 96 01 	lds	r25, 0x0196
    391a:	89 81       	ldd	r24, Y+1	; 0x01
    391c:	89 17       	cp	r24, r25
    391e:	50 f2       	brcs	.-108    	; 0x38b4 <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    3920:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    3922:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3924:	0f 90       	pop	r0
    3926:	0f 90       	pop	r0
    3928:	cf 91       	pop	r28
    392a:	df 91       	pop	r29
    392c:	08 95       	ret

0000392e <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    392e:	df 93       	push	r29
    3930:	cf 93       	push	r28
    3932:	00 d0       	rcall	.+0      	; 0x3934 <Buzzer_enu_TuronOnBuzzer+0x6>
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
    3938:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    393e:	90 91 96 01 	lds	r25, 0x0196
    3942:	8a 81       	ldd	r24, Y+2	; 0x02
    3944:	89 17       	cp	r24, r25
    3946:	c8 f4       	brcc	.+50     	; 0x397a <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    3948:	8a 81       	ldd	r24, Y+2	; 0x02
    394a:	88 2f       	mov	r24, r24
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	88 0f       	add	r24, r24
    3950:	99 1f       	adc	r25, r25
    3952:	fc 01       	movw	r30, r24
    3954:	e9 56       	subi	r30, 0x69	; 105
    3956:	fe 4f       	sbci	r31, 0xFE	; 254
    3958:	20 81       	ld	r18, Z
    395a:	8a 81       	ldd	r24, Y+2	; 0x02
    395c:	88 2f       	mov	r24, r24
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	88 0f       	add	r24, r24
    3962:	99 1f       	adc	r25, r25
    3964:	fc 01       	movw	r30, r24
    3966:	e8 56       	subi	r30, 0x68	; 104
    3968:	fe 4f       	sbci	r31, 0xFE	; 254
    396a:	90 81       	ld	r25, Z
    396c:	82 2f       	mov	r24, r18
    396e:	69 2f       	mov	r22, r25
    3970:	41 e0       	ldi	r20, 0x01	; 1
    3972:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    3976:	89 83       	std	Y+1, r24	; 0x01
    3978:	02 c0       	rjmp	.+4      	; 0x397e <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    397a:	82 e0       	ldi	r24, 0x02	; 2
    397c:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    397e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3980:	0f 90       	pop	r0
    3982:	0f 90       	pop	r0
    3984:	cf 91       	pop	r28
    3986:	df 91       	pop	r29
    3988:	08 95       	ret

0000398a <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	00 d0       	rcall	.+0      	; 0x3990 <Buzzer_enu_TuronOffBuzzer+0x6>
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
    3994:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    399a:	90 91 96 01 	lds	r25, 0x0196
    399e:	8a 81       	ldd	r24, Y+2	; 0x02
    39a0:	89 17       	cp	r24, r25
    39a2:	c8 f4       	brcc	.+50     	; 0x39d6 <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    39a4:	8a 81       	ldd	r24, Y+2	; 0x02
    39a6:	88 2f       	mov	r24, r24
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	88 0f       	add	r24, r24
    39ac:	99 1f       	adc	r25, r25
    39ae:	fc 01       	movw	r30, r24
    39b0:	e9 56       	subi	r30, 0x69	; 105
    39b2:	fe 4f       	sbci	r31, 0xFE	; 254
    39b4:	20 81       	ld	r18, Z
    39b6:	8a 81       	ldd	r24, Y+2	; 0x02
    39b8:	88 2f       	mov	r24, r24
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	88 0f       	add	r24, r24
    39be:	99 1f       	adc	r25, r25
    39c0:	fc 01       	movw	r30, r24
    39c2:	e8 56       	subi	r30, 0x68	; 104
    39c4:	fe 4f       	sbci	r31, 0xFE	; 254
    39c6:	90 81       	ld	r25, Z
    39c8:	82 2f       	mov	r24, r18
    39ca:	69 2f       	mov	r22, r25
    39cc:	40 e0       	ldi	r20, 0x00	; 0
    39ce:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    39d2:	89 83       	std	Y+1, r24	; 0x01
    39d4:	02 c0       	rjmp	.+4      	; 0x39da <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    39d6:	82 e0       	ldi	r24, 0x02	; 2
    39d8:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    39da:	89 81       	ldd	r24, Y+1	; 0x01
}
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	cf 91       	pop	r28
    39e2:	df 91       	pop	r29
    39e4:	08 95       	ret

000039e6 <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    39e6:	df 93       	push	r29
    39e8:	cf 93       	push	r28
    39ea:	00 d0       	rcall	.+0      	; 0x39ec <Buzzer_enu_TurnOnAllBuzzers+0x6>
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    39f4:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    39f6:	19 82       	std	Y+1, r1	; 0x01
    39f8:	1a c0       	rjmp	.+52     	; 0x3a2e <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
    39fc:	88 2f       	mov	r24, r24
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	88 0f       	add	r24, r24
    3a02:	99 1f       	adc	r25, r25
    3a04:	fc 01       	movw	r30, r24
    3a06:	e9 56       	subi	r30, 0x69	; 105
    3a08:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0a:	20 81       	ld	r18, Z
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	88 2f       	mov	r24, r24
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	88 0f       	add	r24, r24
    3a14:	99 1f       	adc	r25, r25
    3a16:	fc 01       	movw	r30, r24
    3a18:	e8 56       	subi	r30, 0x68	; 104
    3a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a1c:	90 81       	ld	r25, Z
    3a1e:	82 2f       	mov	r24, r18
    3a20:	69 2f       	mov	r22, r25
    3a22:	41 e0       	ldi	r20, 0x01	; 1
    3a24:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3a28:	89 81       	ldd	r24, Y+1	; 0x01
    3a2a:	8f 5f       	subi	r24, 0xFF	; 255
    3a2c:	89 83       	std	Y+1, r24	; 0x01
    3a2e:	90 91 96 01 	lds	r25, 0x0196
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	89 17       	cp	r24, r25
    3a36:	08 f3       	brcs	.-62     	; 0x39fa <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3a38:	82 e0       	ldi	r24, 0x02	; 2
    3a3a:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    3a3c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	cf 91       	pop	r28
    3a44:	df 91       	pop	r29
    3a46:	08 95       	ret

00003a48 <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    3a48:	df 93       	push	r29
    3a4a:	cf 93       	push	r28
    3a4c:	00 d0       	rcall	.+0      	; 0x3a4e <Buzzer_enu_TurnOffAllBuzzers+0x6>
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3a56:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3a58:	19 82       	std	Y+1, r1	; 0x01
    3a5a:	1a c0       	rjmp	.+52     	; 0x3a90 <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	88 2f       	mov	r24, r24
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	fc 01       	movw	r30, r24
    3a68:	e9 56       	subi	r30, 0x69	; 105
    3a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a6c:	20 81       	ld	r18, Z
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	88 2f       	mov	r24, r24
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	88 0f       	add	r24, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	fc 01       	movw	r30, r24
    3a7a:	e8 56       	subi	r30, 0x68	; 104
    3a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7e:	90 81       	ld	r25, Z
    3a80:	82 2f       	mov	r24, r18
    3a82:	69 2f       	mov	r22, r25
    3a84:	40 e0       	ldi	r20, 0x00	; 0
    3a86:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	8f 5f       	subi	r24, 0xFF	; 255
    3a8e:	89 83       	std	Y+1, r24	; 0x01
    3a90:	90 91 96 01 	lds	r25, 0x0196
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	89 17       	cp	r24, r25
    3a98:	08 f3       	brcs	.-62     	; 0x3a5c <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    3a9a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	cf 91       	pop	r28
    3aa2:	df 91       	pop	r29
    3aa4:	08 95       	ret

00003aa6 <tog>:
#include "../MCAL/DIO/DIO_Interface.h"
#include "../MCAL/SREG/SREG_Interface.h"
#include <util/delay.h>
 
void tog (void)
{
    3aa6:	df 93       	push	r29
    3aa8:	cf 93       	push	r28
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	2e 97       	sbiw	r28, 0x0e	; 14
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61
	DIO_enu_TogglePinValue(DIO_PIN_GROUP_C , DIO_PIN_7);
    3aba:	82 e0       	ldi	r24, 0x02	; 2
    3abc:	67 e0       	ldi	r22, 0x07	; 7
    3abe:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enu_TogglePinValue>
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	aa ef       	ldi	r26, 0xFA	; 250
    3ac8:	b4 e4       	ldi	r27, 0x44	; 68
    3aca:	8b 87       	std	Y+11, r24	; 0x0b
    3acc:	9c 87       	std	Y+12, r25	; 0x0c
    3ace:	ad 87       	std	Y+13, r26	; 0x0d
    3ad0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	4a e7       	ldi	r20, 0x7A	; 122
    3ae0:	55 e4       	ldi	r21, 0x45	; 69
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	8f 83       	std	Y+7, r24	; 0x07
    3aec:	98 87       	std	Y+8, r25	; 0x08
    3aee:	a9 87       	std	Y+9, r26	; 0x09
    3af0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3af2:	6f 81       	ldd	r22, Y+7	; 0x07
    3af4:	78 85       	ldd	r23, Y+8	; 0x08
    3af6:	89 85       	ldd	r24, Y+9	; 0x09
    3af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	40 e8       	ldi	r20, 0x80	; 128
    3b00:	5f e3       	ldi	r21, 0x3F	; 63
    3b02:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3b06:	88 23       	and	r24, r24
    3b08:	2c f4       	brge	.+10     	; 0x3b14 <tog+0x6e>
		__ticks = 1;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	9e 83       	std	Y+6, r25	; 0x06
    3b10:	8d 83       	std	Y+5, r24	; 0x05
    3b12:	3f c0       	rjmp	.+126    	; 0x3b92 <tog+0xec>
	else if (__tmp > 65535)
    3b14:	6f 81       	ldd	r22, Y+7	; 0x07
    3b16:	78 85       	ldd	r23, Y+8	; 0x08
    3b18:	89 85       	ldd	r24, Y+9	; 0x09
    3b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	3f ef       	ldi	r19, 0xFF	; 255
    3b20:	4f e7       	ldi	r20, 0x7F	; 127
    3b22:	57 e4       	ldi	r21, 0x47	; 71
    3b24:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3b28:	18 16       	cp	r1, r24
    3b2a:	4c f5       	brge	.+82     	; 0x3b7e <tog+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e2       	ldi	r20, 0x20	; 32
    3b3a:	51 e4       	ldi	r21, 0x41	; 65
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	9e 83       	std	Y+6, r25	; 0x06
    3b52:	8d 83       	std	Y+5, r24	; 0x05
    3b54:	0f c0       	rjmp	.+30     	; 0x3b74 <tog+0xce>
    3b56:	80 e9       	ldi	r24, 0x90	; 144
    3b58:	91 e0       	ldi	r25, 0x01	; 1
    3b5a:	9c 83       	std	Y+4, r25	; 0x04
    3b5c:	8b 83       	std	Y+3, r24	; 0x03
    3b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b60:	9c 81       	ldd	r25, Y+4	; 0x04
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	f1 f7       	brne	.-4      	; 0x3b62 <tog+0xbc>
    3b66:	9c 83       	std	Y+4, r25	; 0x04
    3b68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	9e 83       	std	Y+6, r25	; 0x06
    3b72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b74:	8d 81       	ldd	r24, Y+5	; 0x05
    3b76:	9e 81       	ldd	r25, Y+6	; 0x06
    3b78:	00 97       	sbiw	r24, 0x00	; 0
    3b7a:	69 f7       	brne	.-38     	; 0x3b56 <tog+0xb0>
    3b7c:	14 c0       	rjmp	.+40     	; 0x3ba6 <tog+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b80:	78 85       	ldd	r23, Y+8	; 0x08
    3b82:	89 85       	ldd	r24, Y+9	; 0x09
    3b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	9e 83       	std	Y+6, r25	; 0x06
    3b90:	8d 83       	std	Y+5, r24	; 0x05
    3b92:	8d 81       	ldd	r24, Y+5	; 0x05
    3b94:	9e 81       	ldd	r25, Y+6	; 0x06
    3b96:	9a 83       	std	Y+2, r25	; 0x02
    3b98:	89 83       	std	Y+1, r24	; 0x01
    3b9a:	89 81       	ldd	r24, Y+1	; 0x01
    3b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9e:	01 97       	sbiw	r24, 0x01	; 1
    3ba0:	f1 f7       	brne	.-4      	; 0x3b9e <tog+0xf8>
    3ba2:	9a 83       	std	Y+2, r25	; 0x02
    3ba4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
    3ba6:	2e 96       	adiw	r28, 0x0e	; 14
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	cd bf       	out	0x3d, r28	; 61
    3bb2:	cf 91       	pop	r28
    3bb4:	df 91       	pop	r29
    3bb6:	08 95       	ret

00003bb8 <main>:

int 
main(void)
{
    3bb8:	df 93       	push	r29
    3bba:	cf 93       	push	r28
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	2e 97       	sbiw	r28, 0x0e	; 14
    3bc2:	0f b6       	in	r0, 0x3f	; 63
    3bc4:	f8 94       	cli
    3bc6:	de bf       	out	0x3e, r29	; 62
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	cd bf       	out	0x3d, r28	; 61
	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_D , DIO_PIN_2 , DIO_PIN_READ);
    3bcc:	83 e0       	ldi	r24, 0x03	; 3
    3bce:	62 e0       	ldi	r22, 0x02	; 2
    3bd0:	40 e0       	ldi	r20, 0x00	; 0
    3bd2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
	DIO_enu_SetPinState(DIO_PIN_GROUP_D , DIO_PIN_2 , DIO_FLOAT);
    3bd6:	83 e0       	ldi	r24, 0x03	; 3
    3bd8:	62 e0       	ldi	r22, 0x02	; 2
    3bda:	40 e0       	ldi	r20, 0x00	; 0
    3bdc:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <DIO_enu_SetPinState>
	
	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_C , DIO_PIN_7 , DIO_PIN_WRITE);
    3be0:	82 e0       	ldi	r24, 0x02	; 2
    3be2:	67 e0       	ldi	r22, 0x07	; 7
    3be4:	41 e0       	ldi	r20, 0x01	; 1
    3be6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
	DIO_enu_SetPinValue(DIO_PIN_GROUP_C , DIO_PIN_7 , DIO_LOW);
    3bea:	82 e0       	ldi	r24, 0x02	; 2
    3bec:	67 e0       	ldi	r22, 0x07	; 7
    3bee:	40 e0       	ldi	r20, 0x00	; 0
    3bf0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	aa ef       	ldi	r26, 0xFA	; 250
    3bfa:	b4 e4       	ldi	r27, 0x44	; 68
    3bfc:	8b 87       	std	Y+11, r24	; 0x0b
    3bfe:	9c 87       	std	Y+12, r25	; 0x0c
    3c00:	ad 87       	std	Y+13, r26	; 0x0d
    3c02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	4a e7       	ldi	r20, 0x7A	; 122
    3c12:	55 e4       	ldi	r21, 0x45	; 69
    3c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	8f 83       	std	Y+7, r24	; 0x07
    3c1e:	98 87       	std	Y+8, r25	; 0x08
    3c20:	a9 87       	std	Y+9, r26	; 0x09
    3c22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c24:	6f 81       	ldd	r22, Y+7	; 0x07
    3c26:	78 85       	ldd	r23, Y+8	; 0x08
    3c28:	89 85       	ldd	r24, Y+9	; 0x09
    3c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	40 e8       	ldi	r20, 0x80	; 128
    3c32:	5f e3       	ldi	r21, 0x3F	; 63
    3c34:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3c38:	88 23       	and	r24, r24
    3c3a:	2c f4       	brge	.+10     	; 0x3c46 <main+0x8e>
		__ticks = 1;
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	9e 83       	std	Y+6, r25	; 0x06
    3c42:	8d 83       	std	Y+5, r24	; 0x05
    3c44:	3f c0       	rjmp	.+126    	; 0x3cc4 <main+0x10c>
	else if (__tmp > 65535)
    3c46:	6f 81       	ldd	r22, Y+7	; 0x07
    3c48:	78 85       	ldd	r23, Y+8	; 0x08
    3c4a:	89 85       	ldd	r24, Y+9	; 0x09
    3c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	3f ef       	ldi	r19, 0xFF	; 255
    3c52:	4f e7       	ldi	r20, 0x7F	; 127
    3c54:	57 e4       	ldi	r21, 0x47	; 71
    3c56:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3c5a:	18 16       	cp	r1, r24
    3c5c:	4c f5       	brge	.+82     	; 0x3cb0 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	40 e2       	ldi	r20, 0x20	; 32
    3c6c:	51 e4       	ldi	r21, 0x41	; 65
    3c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	bc 01       	movw	r22, r24
    3c78:	cd 01       	movw	r24, r26
    3c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	9e 83       	std	Y+6, r25	; 0x06
    3c84:	8d 83       	std	Y+5, r24	; 0x05
    3c86:	0f c0       	rjmp	.+30     	; 0x3ca6 <main+0xee>
    3c88:	80 e9       	ldi	r24, 0x90	; 144
    3c8a:	91 e0       	ldi	r25, 0x01	; 1
    3c8c:	9c 83       	std	Y+4, r25	; 0x04
    3c8e:	8b 83       	std	Y+3, r24	; 0x03
    3c90:	8b 81       	ldd	r24, Y+3	; 0x03
    3c92:	9c 81       	ldd	r25, Y+4	; 0x04
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	f1 f7       	brne	.-4      	; 0x3c94 <main+0xdc>
    3c98:	9c 83       	std	Y+4, r25	; 0x04
    3c9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	9e 83       	std	Y+6, r25	; 0x06
    3ca4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	69 f7       	brne	.-38     	; 0x3c88 <main+0xd0>
    3cae:	14 c0       	rjmp	.+40     	; 0x3cd8 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb2:	78 85       	ldd	r23, Y+8	; 0x08
    3cb4:	89 85       	ldd	r24, Y+9	; 0x09
    3cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	9e 83       	std	Y+6, r25	; 0x06
    3cc2:	8d 83       	std	Y+5, r24	; 0x05
    3cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc8:	9a 83       	std	Y+2, r25	; 0x02
    3cca:	89 83       	std	Y+1, r24	; 0x01
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	f1 f7       	brne	.-4      	; 0x3cd0 <main+0x118>
    3cd4:	9a 83       	std	Y+2, r25	; 0x02
    3cd6:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(2000);

	EXTI_enu_Initialization();
    3cd8:	0e 94 ab 06 	call	0xd56	; 0xd56 <EXTI_enu_Initialization>

	EXTI_enu_SetCallBack(EXTI_INT1 , tog);
    3cdc:	23 e5       	ldi	r18, 0x53	; 83
    3cde:	3d e1       	ldi	r19, 0x1D	; 29
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	b9 01       	movw	r22, r18
    3ce4:	0e 94 95 07 	call	0xf2a	; 0xf2a <EXTI_enu_SetCallBack>


	SREG_vid_EnableBitI();
    3ce8:	0e 94 9b 06 	call	0xd36	; 0xd36 <SREG_vid_EnableBitI>

	EXTI_enu_SeTPIF(EXTI_INT1, EXTI_HIGH);	
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	61 e0       	ldi	r22, 0x01	; 1
    3cf0:	0e 94 7f 07 	call	0xefe	; 0xefe <EXTI_enu_SeTPIF>
    3cf4:	ff cf       	rjmp	.-2      	; 0x3cf4 <main+0x13c>

00003cf6 <__mulsi3>:
    3cf6:	62 9f       	mul	r22, r18
    3cf8:	d0 01       	movw	r26, r0
    3cfa:	73 9f       	mul	r23, r19
    3cfc:	f0 01       	movw	r30, r0
    3cfe:	82 9f       	mul	r24, r18
    3d00:	e0 0d       	add	r30, r0
    3d02:	f1 1d       	adc	r31, r1
    3d04:	64 9f       	mul	r22, r20
    3d06:	e0 0d       	add	r30, r0
    3d08:	f1 1d       	adc	r31, r1
    3d0a:	92 9f       	mul	r25, r18
    3d0c:	f0 0d       	add	r31, r0
    3d0e:	83 9f       	mul	r24, r19
    3d10:	f0 0d       	add	r31, r0
    3d12:	74 9f       	mul	r23, r20
    3d14:	f0 0d       	add	r31, r0
    3d16:	65 9f       	mul	r22, r21
    3d18:	f0 0d       	add	r31, r0
    3d1a:	99 27       	eor	r25, r25
    3d1c:	72 9f       	mul	r23, r18
    3d1e:	b0 0d       	add	r27, r0
    3d20:	e1 1d       	adc	r30, r1
    3d22:	f9 1f       	adc	r31, r25
    3d24:	63 9f       	mul	r22, r19
    3d26:	b0 0d       	add	r27, r0
    3d28:	e1 1d       	adc	r30, r1
    3d2a:	f9 1f       	adc	r31, r25
    3d2c:	bd 01       	movw	r22, r26
    3d2e:	cf 01       	movw	r24, r30
    3d30:	11 24       	eor	r1, r1
    3d32:	08 95       	ret

00003d34 <__udivmodsi4>:
    3d34:	a1 e2       	ldi	r26, 0x21	; 33
    3d36:	1a 2e       	mov	r1, r26
    3d38:	aa 1b       	sub	r26, r26
    3d3a:	bb 1b       	sub	r27, r27
    3d3c:	fd 01       	movw	r30, r26
    3d3e:	0d c0       	rjmp	.+26     	; 0x3d5a <__udivmodsi4_ep>

00003d40 <__udivmodsi4_loop>:
    3d40:	aa 1f       	adc	r26, r26
    3d42:	bb 1f       	adc	r27, r27
    3d44:	ee 1f       	adc	r30, r30
    3d46:	ff 1f       	adc	r31, r31
    3d48:	a2 17       	cp	r26, r18
    3d4a:	b3 07       	cpc	r27, r19
    3d4c:	e4 07       	cpc	r30, r20
    3d4e:	f5 07       	cpc	r31, r21
    3d50:	20 f0       	brcs	.+8      	; 0x3d5a <__udivmodsi4_ep>
    3d52:	a2 1b       	sub	r26, r18
    3d54:	b3 0b       	sbc	r27, r19
    3d56:	e4 0b       	sbc	r30, r20
    3d58:	f5 0b       	sbc	r31, r21

00003d5a <__udivmodsi4_ep>:
    3d5a:	66 1f       	adc	r22, r22
    3d5c:	77 1f       	adc	r23, r23
    3d5e:	88 1f       	adc	r24, r24
    3d60:	99 1f       	adc	r25, r25
    3d62:	1a 94       	dec	r1
    3d64:	69 f7       	brne	.-38     	; 0x3d40 <__udivmodsi4_loop>
    3d66:	60 95       	com	r22
    3d68:	70 95       	com	r23
    3d6a:	80 95       	com	r24
    3d6c:	90 95       	com	r25
    3d6e:	9b 01       	movw	r18, r22
    3d70:	ac 01       	movw	r20, r24
    3d72:	bd 01       	movw	r22, r26
    3d74:	cf 01       	movw	r24, r30
    3d76:	08 95       	ret

00003d78 <__divmodsi4>:
    3d78:	97 fb       	bst	r25, 7
    3d7a:	09 2e       	mov	r0, r25
    3d7c:	05 26       	eor	r0, r21
    3d7e:	0e d0       	rcall	.+28     	; 0x3d9c <__divmodsi4_neg1>
    3d80:	57 fd       	sbrc	r21, 7
    3d82:	04 d0       	rcall	.+8      	; 0x3d8c <__divmodsi4_neg2>
    3d84:	d7 df       	rcall	.-82     	; 0x3d34 <__udivmodsi4>
    3d86:	0a d0       	rcall	.+20     	; 0x3d9c <__divmodsi4_neg1>
    3d88:	00 1c       	adc	r0, r0
    3d8a:	38 f4       	brcc	.+14     	; 0x3d9a <__divmodsi4_exit>

00003d8c <__divmodsi4_neg2>:
    3d8c:	50 95       	com	r21
    3d8e:	40 95       	com	r20
    3d90:	30 95       	com	r19
    3d92:	21 95       	neg	r18
    3d94:	3f 4f       	sbci	r19, 0xFF	; 255
    3d96:	4f 4f       	sbci	r20, 0xFF	; 255
    3d98:	5f 4f       	sbci	r21, 0xFF	; 255

00003d9a <__divmodsi4_exit>:
    3d9a:	08 95       	ret

00003d9c <__divmodsi4_neg1>:
    3d9c:	f6 f7       	brtc	.-4      	; 0x3d9a <__divmodsi4_exit>
    3d9e:	90 95       	com	r25
    3da0:	80 95       	com	r24
    3da2:	70 95       	com	r23
    3da4:	61 95       	neg	r22
    3da6:	7f 4f       	sbci	r23, 0xFF	; 255
    3da8:	8f 4f       	sbci	r24, 0xFF	; 255
    3daa:	9f 4f       	sbci	r25, 0xFF	; 255
    3dac:	08 95       	ret

00003dae <__prologue_saves__>:
    3dae:	2f 92       	push	r2
    3db0:	3f 92       	push	r3
    3db2:	4f 92       	push	r4
    3db4:	5f 92       	push	r5
    3db6:	6f 92       	push	r6
    3db8:	7f 92       	push	r7
    3dba:	8f 92       	push	r8
    3dbc:	9f 92       	push	r9
    3dbe:	af 92       	push	r10
    3dc0:	bf 92       	push	r11
    3dc2:	cf 92       	push	r12
    3dc4:	df 92       	push	r13
    3dc6:	ef 92       	push	r14
    3dc8:	ff 92       	push	r15
    3dca:	0f 93       	push	r16
    3dcc:	1f 93       	push	r17
    3dce:	cf 93       	push	r28
    3dd0:	df 93       	push	r29
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	ca 1b       	sub	r28, r26
    3dd8:	db 0b       	sbc	r29, r27
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	de bf       	out	0x3e, r29	; 62
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	cd bf       	out	0x3d, r28	; 61
    3de4:	09 94       	ijmp

00003de6 <__epilogue_restores__>:
    3de6:	2a 88       	ldd	r2, Y+18	; 0x12
    3de8:	39 88       	ldd	r3, Y+17	; 0x11
    3dea:	48 88       	ldd	r4, Y+16	; 0x10
    3dec:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dee:	6e 84       	ldd	r6, Y+14	; 0x0e
    3df0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3df2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3df4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3df6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3df8:	b9 84       	ldd	r11, Y+9	; 0x09
    3dfa:	c8 84       	ldd	r12, Y+8	; 0x08
    3dfc:	df 80       	ldd	r13, Y+7	; 0x07
    3dfe:	ee 80       	ldd	r14, Y+6	; 0x06
    3e00:	fd 80       	ldd	r15, Y+5	; 0x05
    3e02:	0c 81       	ldd	r16, Y+4	; 0x04
    3e04:	1b 81       	ldd	r17, Y+3	; 0x03
    3e06:	aa 81       	ldd	r26, Y+2	; 0x02
    3e08:	b9 81       	ldd	r27, Y+1	; 0x01
    3e0a:	ce 0f       	add	r28, r30
    3e0c:	d1 1d       	adc	r29, r1
    3e0e:	0f b6       	in	r0, 0x3f	; 63
    3e10:	f8 94       	cli
    3e12:	de bf       	out	0x3e, r29	; 62
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	cd bf       	out	0x3d, r28	; 61
    3e18:	ed 01       	movw	r28, r26
    3e1a:	08 95       	ret

00003e1c <_exit>:
    3e1c:	f8 94       	cli

00003e1e <__stop_program>:
    3e1e:	ff cf       	rjmp	.-2      	; 0x3e1e <__stop_program>
