
ModuleHub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006090  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00006090  00006124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004b  008001a4  008001a4  00006268  2**0
                  ALLOC
  3 .stab         00008e14  00000000  00000000  00006268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003e24  00000000  00000000  0000f07c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00012ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022e  00000000  00000000  00013080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002909  00000000  00000000  000132ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  00015bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137c  00000000  00000000  000171f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00018570  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000306  00000000  00000000  00018770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e6  00000000  00000000  00018a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001945c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 27 14 	jmp	0x284e	; 0x284e <__vector_1>
       8:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__vector_2>
       c:	0c 94 95 14 	jmp	0x292a	; 0x292a <__vector_3>
      10:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_4>
      14:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__vector_10>
      2c:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f0 e6       	ldi	r31, 0x60	; 96
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3e       	cpi	r26, 0xEF	; 239
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <main>
      8a:	0c 94 46 30 	jmp	0x608c	; 0x608c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0f 30 	jmp	0x601e	; 0x601e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2b 30 	jmp	0x6056	; 0x6056 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 37 30 	jmp	0x606e	; 0x606e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 37 30 	jmp	0x606e	; 0x606e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0f 30 	jmp	0x601e	; 0x601e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2b 30 	jmp	0x6056	; 0x6056 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 17 30 	jmp	0x602e	; 0x602e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 33 30 	jmp	0x6066	; 0x6066 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 37 30 	jmp	0x606e	; 0x606e <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 37 30 	jmp	0x606e	; 0x606e <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 37 30 	jmp	0x606e	; 0x606e <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 37 30 	jmp	0x606e	; 0x606e <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 37 30 	jmp	0x606e	; 0x606e <__epilogue_restores__+0x18>

0000096a <__fixsfsi>:
     96a:	ac e0       	ldi	r26, 0x0C	; 12
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 1f 30 	jmp	0x603e	; 0x603e <__prologue_saves__+0x20>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	be 01       	movw	r22, r28
     984:	6b 5f       	subi	r22, 0xFB	; 251
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	61 f1       	breq	.+88     	; 0x9ea <__fixsfsi+0x80>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	50 f1       	brcs	.+84     	; 0x9ea <__fixsfsi+0x80>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	21 f4       	brne	.+8      	; 0x9a2 <__fixsfsi+0x38>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 23       	and	r24, r24
     99e:	51 f1       	breq	.+84     	; 0x9f4 <__fixsfsi+0x8a>
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <__fixsfsi+0x94>
     9a2:	2f 81       	ldd	r18, Y+7	; 0x07
     9a4:	38 85       	ldd	r19, Y+8	; 0x08
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__fixsfsi+0x80>
     9aa:	6e 81       	ldd	r22, Y+6	; 0x06
     9ac:	2f 31       	cpi	r18, 0x1F	; 31
     9ae:	31 05       	cpc	r19, r1
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <__fixsfsi+0x4e>
     9b2:	66 23       	and	r22, r22
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <__fixsfsi+0x8a>
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__fixsfsi+0x94>
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fixsfsi+0x68>
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	8a 95       	dec	r24
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__fixsfsi+0x60>
     9d6:	66 23       	and	r22, r22
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <__fixsfsi+0x9c>
     9da:	50 95       	com	r21
     9dc:	40 95       	com	r20
     9de:	30 95       	com	r19
     9e0:	21 95       	neg	r18
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	4f 4f       	sbci	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__fixsfsi+0x9c>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	5f e7       	ldi	r21, 0x7F	; 127
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fixsfsi+0x9c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e8       	ldi	r21, 0x80	; 128
     a06:	b9 01       	movw	r22, r18
     a08:	ca 01       	movw	r24, r20
     a0a:	2c 96       	adiw	r28, 0x0c	; 12
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 3b 30 	jmp	0x6076	; 0x6076 <__epilogue_restores__+0x20>

00000a12 <__floatunsisf>:
     a12:	a8 e0       	ldi	r26, 0x08	; 8
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 17 30 	jmp	0x602e	; 0x602e <__prologue_saves__+0x10>
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	61 15       	cp	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__floatunsisf+0x20>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	60 c0       	rjmp	.+192    	; 0xaf2 <__floatunsisf+0xe0>
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	c8 2e       	mov	r12, r24
     a3a:	d1 2c       	mov	r13, r1
     a3c:	dc 82       	std	Y+4, r13	; 0x04
     a3e:	cb 82       	std	Y+3, r12	; 0x03
     a40:	ed 82       	std	Y+5, r14	; 0x05
     a42:	fe 82       	std	Y+6, r15	; 0x06
     a44:	0f 83       	std	Y+7, r16	; 0x07
     a46:	18 87       	std	Y+8, r17	; 0x08
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 82 05 	call	0xb04	; 0xb04 <__clzsi2>
     a50:	fc 01       	movw	r30, r24
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f7 ff       	sbrs	r31, 7
     a56:	3b c0       	rjmp	.+118    	; 0xace <__floatunsisf+0xbc>
     a58:	22 27       	eor	r18, r18
     a5a:	33 27       	eor	r19, r19
     a5c:	2e 1b       	sub	r18, r30
     a5e:	3f 0b       	sbc	r19, r31
     a60:	57 01       	movw	r10, r14
     a62:	68 01       	movw	r12, r16
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__floatunsisf+0x5e>
     a68:	d6 94       	lsr	r13
     a6a:	c7 94       	ror	r12
     a6c:	b7 94       	ror	r11
     a6e:	a7 94       	ror	r10
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__floatunsisf+0x56>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0x7c>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	2a 95       	dec	r18
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0x74>
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	a1 09       	sbc	r26, r1
     a96:	b1 09       	sbc	r27, r1
     a98:	8e 21       	and	r24, r14
     a9a:	9f 21       	and	r25, r15
     a9c:	a0 23       	and	r26, r16
     a9e:	b1 23       	and	r27, r17
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatunsisf+0x9e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	4a 29       	or	r20, r10
     ab2:	5b 29       	or	r21, r11
     ab4:	6c 29       	or	r22, r12
     ab6:	7d 29       	or	r23, r13
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8e 1b       	sub	r24, r30
     ac6:	9f 0b       	sbc	r25, r31
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__floatunsisf+0xe0>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <__floatunsisf+0xe0>
     ad2:	0e 2e       	mov	r0, r30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__floatunsisf+0xcc>
     ad6:	ee 0c       	add	r14, r14
     ad8:	ff 1c       	adc	r15, r15
     ada:	00 1f       	adc	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	0a 94       	dec	r0
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__floatunsisf+0xc4>
     ae2:	ed 82       	std	Y+5, r14	; 0x05
     ae4:	fe 82       	std	Y+6, r15	; 0x06
     ae6:	0f 83       	std	Y+7, r16	; 0x07
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	ce 1a       	sub	r12, r30
     aec:	df 0a       	sbc	r13, r31
     aee:	dc 82       	std	Y+4, r13	; 0x04
     af0:	cb 82       	std	Y+3, r12	; 0x03
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     afc:	28 96       	adiw	r28, 0x08	; 8
     afe:	ea e0       	ldi	r30, 0x0A	; 10
     b00:	0c 94 33 30 	jmp	0x6066	; 0x6066 <__epilogue_restores__+0x10>

00000b04 <__clzsi2>:
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	e8 16       	cp	r14, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	f8 06       	cpc	r15, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 07       	cpc	r16, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	18 07       	cpc	r17, r24
     b20:	88 f4       	brcc	.+34     	; 0xb44 <__clzsi2+0x40>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	e8 16       	cp	r14, r24
     b26:	f1 04       	cpc	r15, r1
     b28:	01 05       	cpc	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__clzsi2+0x36>
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <__clzsi2+0x36>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <__clzsi2+0x64>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__clzsi2+0x64>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	e8 16       	cp	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f8 06       	cpc	r15, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 07       	cpc	r16, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	18 07       	cpc	r17, r24
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__clzsi2+0x5c>
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__clzsi2+0x64>
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	4a 0b       	sbc	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__clzsi2+0x7e>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	8a 95       	dec	r24
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__clzsi2+0x76>
     b86:	f7 01       	movw	r30, r14
     b88:	e8 59       	subi	r30, 0x98	; 152
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 1b       	sub	r18, r24
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
     b96:	c9 01       	movw	r24, r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <__pack_f>:
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
     bae:	e4 80       	ldd	r14, Z+4	; 0x04
     bb0:	f5 80       	ldd	r15, Z+5	; 0x05
     bb2:	06 81       	ldd	r16, Z+6	; 0x06
     bb4:	17 81       	ldd	r17, Z+7	; 0x07
     bb6:	d1 80       	ldd	r13, Z+1	; 0x01
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__pack_f+0x2e>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e1       	ldi	r26, 0x10	; 16
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e8 2a       	or	r14, r24
     bc8:	f9 2a       	or	r15, r25
     bca:	0a 2b       	or	r16, r26
     bcc:	1b 2b       	or	r17, r27
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <__pack_f+0x178>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__pack_f+0x34>
     bd4:	9f c0       	rjmp	.+318    	; 0xd14 <__pack_f+0x172>
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <__pack_f+0x40>
     bda:	ee 24       	eor	r14, r14
     bdc:	ff 24       	eor	r15, r15
     bde:	87 01       	movw	r16, r14
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__pack_f+0x4a>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	01 05       	cpc	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	19 f4       	brne	.+6      	; 0xbf2 <__pack_f+0x50>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <__pack_f+0x17c>
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	62 38       	cpi	r22, 0x82	; 130
     bfa:	79 07       	cpc	r23, r25
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__pack_f+0x5e>
     bfe:	5b c0       	rjmp	.+182    	; 0xcb6 <__pack_f+0x114>
     c00:	22 e8       	ldi	r18, 0x82	; 130
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 1b       	sub	r18, r22
     c06:	37 0b       	sbc	r19, r23
     c08:	2a 31       	cpi	r18, 0x1A	; 26
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f0       	brlt	.+10     	; 0xc18 <__pack_f+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <__pack_f+0xca>
     c18:	b8 01       	movw	r22, r16
     c1a:	a7 01       	movw	r20, r14
     c1c:	02 2e       	mov	r0, r18
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0x86>
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__pack_f+0x7e>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__pack_f+0x9c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 95       	dec	r18
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__pack_f+0x94>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	8e 21       	and	r24, r14
     c4a:	9f 21       	and	r25, r15
     c4c:	a0 23       	and	r26, r16
     c4e:	b1 23       	and	r27, r17
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	21 f0       	breq	.+8      	; 0xc60 <__pack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	9a 01       	movw	r18, r20
     c62:	ab 01       	movw	r20, r22
     c64:	28 2b       	or	r18, r24
     c66:	39 2b       	or	r19, r25
     c68:	4a 2b       	or	r20, r26
     c6a:	5b 2b       	or	r21, r27
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	a0 70       	andi	r26, 0x00	; 0
     c76:	b0 70       	andi	r27, 0x00	; 0
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	91 05       	cpc	r25, r1
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f4       	brne	.+14     	; 0xc90 <__pack_f+0xee>
     c82:	27 ff       	sbrs	r18, 7
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__pack_f+0xf6>
     c86:	20 5c       	subi	r18, 0xC0	; 192
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	4f 4f       	sbci	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__pack_f+0xf6>
     c90:	21 5c       	subi	r18, 0xC1	; 193
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	4f 4f       	sbci	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	20 30       	cpi	r18, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	3a 07       	cpc	r19, r26
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	4a 07       	cpc	r20, r26
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	5a 07       	cpc	r21, r26
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__pack_f+0x10e>
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	79 01       	movw	r14, r18
     cb2:	8a 01       	movw	r16, r20
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__pack_f+0x162>
     cb6:	60 38       	cpi	r22, 0x80	; 128
     cb8:	71 05       	cpc	r23, r1
     cba:	64 f5       	brge	.+88     	; 0xd14 <__pack_f+0x172>
     cbc:	fb 01       	movw	r30, r22
     cbe:	e1 58       	subi	r30, 0x81	; 129
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	d8 01       	movw	r26, r16
     cc4:	c7 01       	movw	r24, r14
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__pack_f+0x144>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__pack_f+0x154>
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__pack_f+0x14c>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	17 ff       	sbrs	r17, 7
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__pack_f+0x162>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	16 95       	lsr	r17
     d08:	07 95       	ror	r16
     d0a:	f7 94       	ror	r15
     d0c:	e7 94       	ror	r14
     d0e:	8a 95       	dec	r24
     d10:	d1 f7       	brne	.-12     	; 0xd06 <__pack_f+0x164>
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <__pack_f+0x17c>
     d14:	ee 24       	eor	r14, r14
     d16:	ff 24       	eor	r15, r15
     d18:	87 01       	movw	r16, r14
     d1a:	ef ef       	ldi	r30, 0xFF	; 255
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	6e 2f       	mov	r22, r30
     d20:	67 95       	ror	r22
     d22:	66 27       	eor	r22, r22
     d24:	67 95       	ror	r22
     d26:	90 2f       	mov	r25, r16
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	d7 94       	ror	r13
     d2c:	dd 24       	eor	r13, r13
     d2e:	d7 94       	ror	r13
     d30:	8e 2f       	mov	r24, r30
     d32:	86 95       	lsr	r24
     d34:	49 2f       	mov	r20, r25
     d36:	46 2b       	or	r20, r22
     d38:	58 2f       	mov	r21, r24
     d3a:	5d 29       	or	r21, r13
     d3c:	b7 01       	movw	r22, r14
     d3e:	ca 01       	movw	r24, r20
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <__unpack_f>:
     d4c:	fc 01       	movw	r30, r24
     d4e:	db 01       	movw	r26, r22
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	62 2f       	mov	r22, r18
     d58:	6f 77       	andi	r22, 0x7F	; 127
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	22 1f       	adc	r18, r18
     d5e:	22 27       	eor	r18, r18
     d60:	22 1f       	adc	r18, r18
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	89 2f       	mov	r24, r25
     d66:	88 0f       	add	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	99 1f       	adc	r25, r25
     d70:	99 27       	eor	r25, r25
     d72:	99 1f       	adc	r25, r25
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	21 15       	cp	r18, r1
     d7c:	31 05       	cpc	r19, r1
     d7e:	a9 f5       	brne	.+106    	; 0xdea <__unpack_f+0x9e>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <__unpack_f+0x42>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	37 c0       	rjmp	.+110    	; 0xdfc <__unpack_f+0xb0>
     d8e:	82 e8       	ldi	r24, 0x82	; 130
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	9c 93       	st	X, r25
     d96:	8e 93       	st	-X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	9a 01       	movw	r18, r20
     d9c:	ab 01       	movw	r20, r22
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	d1 f7       	brne	.-12     	; 0xda0 <__unpack_f+0x54>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 93       	st	X, r24
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <__unpack_f+0x80>
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	20 30       	cpi	r18, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	38 07       	cpc	r19, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	48 07       	cpc	r20, r24
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	58 07       	cpc	r21, r24
     dda:	58 f3       	brcs	.-42     	; 0xdb2 <__unpack_f+0x66>
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	2d 93       	st	X+, r18
     de0:	3d 93       	st	X+, r19
     de2:	4d 93       	st	X+, r20
     de4:	5c 93       	st	X, r21
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	08 95       	ret
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	31 05       	cpc	r19, r1
     dee:	79 f4       	brne	.+30     	; 0xe0e <__unpack_f+0xc2>
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	61 05       	cpc	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__unpack_f+0xb4>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret
     e00:	64 ff       	sbrs	r22, 4
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <__unpack_f+0xbe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__unpack_f+0xe2>
     e0a:	1c 92       	st	X, r1
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__unpack_f+0xe2>
     e0e:	2f 57       	subi	r18, 0x7F	; 127
     e10:	30 40       	sbci	r19, 0x00	; 0
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	3c 93       	st	X, r19
     e16:	2e 93       	st	-X, r18
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <__unpack_f+0xd4>
     e2c:	70 64       	ori	r23, 0x40	; 64
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4d 93       	st	X+, r20
     e32:	5d 93       	st	X+, r21
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	08 95       	ret

00000e3c <__fpcmp_parts_f>:
     e3c:	1f 93       	push	r17
     e3e:	dc 01       	movw	r26, r24
     e40:	fb 01       	movw	r30, r22
     e42:	9c 91       	ld	r25, X
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__fpcmp_parts_f+0xe>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e4a:	80 81       	ld	r24, Z
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__fpcmp_parts_f+0x16>
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e52:	94 30       	cpi	r25, 0x04	; 4
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fpcmp_parts_f+0x2e>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	99 f5       	brne	.+102    	; 0xec4 <__fpcmp_parts_f+0x88>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	68 2f       	mov	r22, r24
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	61 1b       	sub	r22, r17
     e66:	71 09       	sbc	r23, r1
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <__fpcmp_parts_f+0xac>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__fpcmp_parts_f+0x3a>
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <__fpcmp_parts_f+0x42>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	b9 f1       	breq	.+110    	; 0xee4 <__fpcmp_parts_f+0xa8>
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	89 f1       	breq	.+98     	; 0xede <__fpcmp_parts_f+0xa2>
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <__fpcmp_parts_f+0x9c>
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	1c 91       	ld	r17, X
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	f1 f0       	breq	.+60     	; 0xec4 <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	18 17       	cp	r17, r24
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__fpcmp_parts_f+0x88>
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	94 f0       	brlt	.+36     	; 0xec4 <__fpcmp_parts_f+0x88>
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	bc f0       	brlt	.+46     	; 0xed4 <__fpcmp_parts_f+0x98>
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9d 91       	ld	r25, X+
     eac:	0d 90       	ld	r0, X+
     eae:	bc 91       	ld	r27, X
     eb0:	a0 2d       	mov	r26, r0
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	46 81       	ldd	r20, Z+6	; 0x06
     eb8:	57 81       	ldd	r21, Z+7	; 0x07
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	4a 07       	cpc	r20, r26
     ec0:	5b 07       	cpc	r21, r27
     ec2:	18 f4       	brcc	.+6      	; 0xeca <__fpcmp_parts_f+0x8e>
     ec4:	11 23       	and	r17, r17
     ec6:	41 f0       	breq	.+16     	; 0xed8 <__fpcmp_parts_f+0x9c>
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__fpcmp_parts_f+0xa2>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	a4 07       	cpc	r26, r20
     ed0:	b5 07       	cpc	r27, r21
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fpcmp_parts_f+0xa8>
     ed4:	11 23       	and	r17, r17
     ed6:	19 f0       	breq	.+6      	; 0xede <__fpcmp_parts_f+0xa2>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__fpcmp_parts_f+0xac>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__fpcmp_parts_f+0xac>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <USART_enu_Initialization>:
void (*pfun_ISR)(void*) = NULL;
void* pvid_ParamtersOfISrs = NULL; 

//APIs' implementation
extern ErrorState_t USART_enu_Initialization(void)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <USART_enu_Initialization+0x6>
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	8b 83       	std	Y+3, r24	; 0x03
    //****************************************************************************************
    //                                   Initialize Baud Rate                                              
    //****************************************************************************************

    //Wriing to UBBRH
    UBBRH &= ~(1 << UBBRH_URSEL);
     efe:	a0 e4       	ldi	r26, 0x40	; 64
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e0 e4       	ldi	r30, 0x40	; 64
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8f 77       	andi	r24, 0x7F	; 127
     f0a:	8c 93       	st	X, r24

    u16 Local_u16_ValueOfUBRR;

    #if  USART_MODE == USART_NORMAL_ASYNCHRONOUS_MODE    
        
        Local_u16_ValueOfUBRR = USART_BAUD_RATE_MACRO(16);
     f0c:	87 e6       	ldi	r24, 0x67	; 103
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01

        //Placing Most Signficant 4 bits in UBBRH 3:0
        UBBRH |= (u8)(Local_u16_ValueOfUBRR >> 8);
     f14:	a0 e4       	ldi	r26, 0x40	; 64
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e0 e4       	ldi	r30, 0x40	; 64
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	20 81       	ld	r18, Z
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	89 2f       	mov	r24, r25
     f24:	99 27       	eor	r25, r25
     f26:	82 2b       	or	r24, r18
     f28:	8c 93       	st	X, r24
        //Placing the least significant 8 bits in UBBRL
        UBBRL = (u8)(Local_u16_ValueOfUBRR); 
     f2a:	e9 e2       	ldi	r30, 0x29	; 41
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	80 83       	st	Z, r24
        UCSRB &= ~( 1 << UCSRB_TXEN );

    #elif USART_COMMUNICATION_MODE == USART_ENABLE_TX_ONLY

        //Turning off RX
        UCSRB &= ~( 1 << UCSRB_RXEN );
     f32:	aa e2       	ldi	r26, 0x2A	; 42
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ea e2       	ldi	r30, 0x2A	; 42
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 7e       	andi	r24, 0xEF	; 239
     f3e:	8c 93       	st	X, r24
        //Turning on TX
        UCSRB |= ( 1 << UCSRB_TXEN );
     f40:	aa e2       	ldi	r26, 0x2A	; 42
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e2       	ldi	r30, 0x2A	; 42
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 60       	ori	r24, 0x08	; 8
     f4c:	8c 93       	st	X, r24
    //****************************************************************************************
    //                                      Initialzing Synchronization                       
    //****************************************************************************************

    //Writing to UCSRA
    UCSRC |= (1 << UCSRC_URSEL);
     f4e:	a0 e4       	ldi	r26, 0x40	; 64
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 68       	ori	r24, 0x80	; 128
     f5a:	8c 93       	st	X, r24
        UCSRC |= (1 << UCSRC_UMSEL);
    
    #elif USART_MODE == USART_NORMAL_ASYNCHRONOUS_MODE

        //Choosing Asynchronous mode
        UCSRC &= ~(1 << UCSRC_UMSEL);
     f5c:	a0 e4       	ldi	r26, 0x40	; 64
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e0 e4       	ldi	r30, 0x40	; 64
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8f 7b       	andi	r24, 0xBF	; 191
     f68:	8c 93       	st	X, r24
    //****************************************************************************************
                        
    //1] Character Size:  UCSRB_UCSZ2  UCSRC_UCSZ1  UCSRC_UCSZ0

    //Writing to UCSRC
    UCSRC |= (1 << UCSRC_URSEL);
     f6a:	a0 e4       	ldi	r26, 0x40	; 64
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e0 e4       	ldi	r30, 0x40	; 64
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 68       	ori	r24, 0x80	; 128
     f76:	8c 93       	st	X, r24

    //Clearing UCSZ1 and UCSZ0 
    UCSRC &= ~(3 << UCSRC_UCSZ0);
     f78:	a0 e4       	ldi	r26, 0x40	; 64
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e0 e4       	ldi	r30, 0x40	; 64
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	89 7f       	andi	r24, 0xF9	; 249
     f84:	8c 93       	st	X, r24
    //Clearing UCSZ2
    UCSRB &= ~(1 << UCSRB_UCSZ2);
     f86:	aa e2       	ldi	r26, 0x2A	; 42
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea e2       	ldi	r30, 0x2A	; 42
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8b 7f       	andi	r24, 0xFB	; 251
     f92:	8c 93       	st	X, r24
        UCSRC |= (1 << UCSRC_UCSZ1);
    
    #elif USART_CHARACTER_SIZE == USART_8_BITS
      
        //Bits contain 011
        UCSRC |= (1 << UCSRC_UCSZ0);
     f94:	a0 e4       	ldi	r26, 0x40	; 64
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e0 e4       	ldi	r30, 0x40	; 64
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	82 60       	ori	r24, 0x02	; 2
     fa0:	8c 93       	st	X, r24
        UCSRC |= (1 << UCSRC_UCSZ1);
     fa2:	a0 e4       	ldi	r26, 0x40	; 64
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e0 e4       	ldi	r30, 0x40	; 64
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	84 60       	ori	r24, 0x04	; 4
     fae:	8c 93       	st	X, r24


    //2] Stop Bits Selection:    UCSRC_USBS

    //Writing to UCSRC
    UCSRC |= (1 << UCSRC_URSEL);
     fb0:	a0 e4       	ldi	r26, 0x40	; 64
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e0 e4       	ldi	r30, 0x40	; 64
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	80 68       	ori	r24, 0x80	; 128
     fbc:	8c 93       	st	X, r24

    #if USART_NUMBER_OF_STOP_BITS == USART_1_STOP_BIT 

        //Bit contains 0
        UCSRC &= ~( 1 << UCSRC_USBS);
     fbe:	a0 e4       	ldi	r26, 0x40	; 64
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e0 e4       	ldi	r30, 0x40	; 64
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	87 7f       	andi	r24, 0xF7	; 247
     fca:	8c 93       	st	X, r24


    //3] Parity Check Mode Selection: UCSRC_UPM1 UCSRC_UPM0

    //Writing to UCSRC
    UCSRC |= (1 << UCSRC_URSEL);
     fcc:	a0 e4       	ldi	r26, 0x40	; 64
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e0 e4       	ldi	r30, 0x40	; 64
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	80 68       	ori	r24, 0x80	; 128
     fd8:	8c 93       	st	X, r24

    //Bits contain 00
    UCSRC &= ~(3 << UCSRC_UPM0);
     fda:	a0 e4       	ldi	r26, 0x40	; 64
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e0 e4       	ldi	r30, 0x40	; 64
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 7c       	andi	r24, 0xCF	; 207
     fe6:	8c 93       	st	X, r24
    //****************************************************************************************
    //                                      Initialzing Interrupts                       
    //****************************************************************************************

    //Clearing 3 bits  RXCIE TXCIE UDRIE
    UCSRB &= ~(7 << UCSRB_UDRIE); 
     fe8:	aa e2       	ldi	r26, 0x2A	; 42
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ea e2       	ldi	r30, 0x2A	; 42
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	8f 71       	andi	r24, 0x1F	; 31
     ff4:	8c 93       	st	X, r24





    return Local_u8_ErrorFlag;
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <USART_enu_SendData>:

extern ErrorState_t USART_enu_SendData(u16 Copy_u16_Data)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <USART_enu_SendData+0x6>
    100a:	0f 92       	push	r0
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	9b 83       	std	Y+3, r25	; 0x03
    1012:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	89 83       	std	Y+1, r24	; 0x01

    //Seeing if Transmitter Buffer is ready to take a new value
    if((UCSRA >> UCSRA_UDRE) & 1)
    1018:	eb e2       	ldi	r30, 0x2B	; 43
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	82 95       	swap	r24
    1020:	86 95       	lsr	r24
    1022:	87 70       	andi	r24, 0x07	; 7
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	81 70       	andi	r24, 0x01	; 1
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	88 23       	and	r24, r24
    102e:	31 f0       	breq	.+12     	; 0x103c <USART_enu_SendData+0x38>
            //Placing 9nth-bit in TXB8
            UCSRB |= (Local_u8_ErrorFlag << UCSRB_TXB8);

        #endif
        
        UDR = (u8)(Copy_u16_Data);
    1030:	ec e2       	ldi	r30, 0x2C	; 44
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    1038:	19 82       	std	Y+1, r1	; 0x01
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <USART_enu_SendData+0x3c>
    }
    else
    {
        Local_u8_ErrorFlag = ES_WAIT;
    103c:	84 e0       	ldi	r24, 0x04	; 4
    103e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1040:	89 81       	ldd	r24, Y+1	; 0x01
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <USART_enu_ReceiveData>:

extern ErrorState_t USART_enu_ReceiveData(u16* Copy_pu16_Data)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <USART_enu_ReceiveData+0x6>
    1054:	00 d0       	rcall	.+0      	; 0x1056 <USART_enu_ReceiveData+0x8>
    1056:	0f 92       	push	r0
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	9d 83       	std	Y+5, r25	; 0x05
    105e:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	8b 83       	std	Y+3, r24	; 0x03

    u16 Local_u16_TempData = 0x00;
    1064:	1a 82       	std	Y+2, r1	; 0x02
    1066:	19 82       	std	Y+1, r1	; 0x01

    //Seeing if Receiver Buffer has a new value
    if((UCSRA >> UCSRA_RXC) & 1)
    1068:	eb e2       	ldi	r30, 0x2B	; 43
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	88 23       	and	r24, r24
    1070:	4c f4       	brge	.+18     	; 0x1084 <USART_enu_ReceiveData+0x36>
            Local_u16_TempData |= (Local_u8_DataBit8 >> 8); 

        #endif

        //Placing rest of data in Local temp
        Local_u16_TempData = UDR;
    1072:	ec e2       	ldi	r30, 0x2C	; 44
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
        
        Local_u8_ErrorFlag = ES_OK;
    1080:	1b 82       	std	Y+3, r1	; 0x03
    1082:	06 c0       	rjmp	.+12     	; 0x1090 <USART_enu_ReceiveData+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_WAIT;
    1084:	84 e0       	ldi	r24, 0x04	; 4
    1086:	8b 83       	std	Y+3, r24	; 0x03

        Local_u16_TempData = USART_NOT_DATA_RECEIVED;
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    }

    
    *Copy_pu16_Data = Local_u16_TempData;
    1090:	ec 81       	ldd	r30, Y+4	; 0x04
    1092:	fd 81       	ldd	r31, Y+5	; 0x05
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	91 83       	std	Z+1, r25	; 0x01
    109a:	80 83       	st	Z, r24

    return Local_u8_ErrorFlag;
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <USART_enu_SendString>:

extern ErrorState_t USART_enu_SendString (u8* Copy_pu8_String)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <USART_enu_SendString+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <USART_enu_SendString+0x8>
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	9d 83       	std	Y+5, r25	; 0x05
    10be:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	8b 83       	std	Y+3, r24	; 0x03

    if(Copy_pu8_String)
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	b9 f0       	breq	.+46     	; 0x10fa <USART_enu_SendString+0x4c>
    {
        u8* Local_pu8_SendingPoninter = Copy_pu8_String;
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	9d 81       	ldd	r25, Y+5	; 0x05
    10d0:	9a 83       	std	Y+2, r25	; 0x02
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	0c c0       	rjmp	.+24     	; 0x10ee <USART_enu_SendString+0x40>

        while(*Local_pu8_SendingPoninter)
        {
            USART_enu_SendData(*Local_pu8_SendingPoninter);
    10d6:	e9 81       	ldd	r30, Y+1	; 0x01
    10d8:	fa 81       	ldd	r31, Y+2	; 0x02
    10da:	80 81       	ld	r24, Z
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 02 08 	call	0x1004	; 0x1004 <USART_enu_SendData>

            Local_pu8_SendingPoninter++;
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_String)
    {
        u8* Local_pu8_SendingPoninter = Copy_pu8_String;

        while(*Local_pu8_SendingPoninter)
    10ee:	e9 81       	ldd	r30, Y+1	; 0x01
    10f0:	fa 81       	ldd	r31, Y+2	; 0x02
    10f2:	80 81       	ld	r24, Z
    10f4:	88 23       	and	r24, r24
    10f6:	79 f7       	brne	.-34     	; 0x10d6 <USART_enu_SendString+0x28>
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <USART_enu_SendString+0x50>
            Local_pu8_SendingPoninter++;
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	8b 83       	std	Y+3, r24	; 0x03
    }
    return Local_u8_ErrorFlag;
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <USART_enu_SetCallBack>:

extern ErrorState_t USART_enu_SetCallBack (void (*Copy_pfun_AppFun)(void*), void* Copy_pvid_Paramters)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <USART_enu_SetCallBack+0x6>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <USART_enu_SetCallBack+0x8>
    1118:	0f 92       	push	r0
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	9b 83       	std	Y+3, r25	; 0x03
    1120:	8a 83       	std	Y+2, r24	; 0x02
    1122:	7d 83       	std	Y+5, r23	; 0x05
    1124:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFun)
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	9b 81       	ldd	r25, Y+3	; 0x03
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	71 f0       	breq	.+28     	; 0x114e <USART_enu_SetCallBack+0x3e>
    {
        pfun_ISR = Copy_pfun_AppFun;
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	90 93 a5 01 	sts	0x01A5, r25
    113a:	80 93 a4 01 	sts	0x01A4, r24

        pvid_ParamtersOfISrs = Copy_pvid_Paramters;
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	90 93 a7 01 	sts	0x01A7, r25
    1146:	80 93 a6 01 	sts	0x01A6, r24

        Local_u8_ErrorFlag = ES_OK;
    114a:	19 82       	std	Y+1, r1	; 0x01
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <USART_enu_SetCallBack+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <Timer_enu_Initialization>:
static void (* apfun_ISRpointers[TIMER_ISR_COUNT])(void*)= { NULL};
static void* apvid_ISRParameters[TIMER_ISR_COUNT] = {NULL};

//APIs implementaion
extern ErrorState_t Timer_enu_Initialization(void)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <Timer_enu_Initialization+0x6>
    116a:	00 d0       	rcall	.+0      	; 0x116c <Timer_enu_Initialization+0x8>
    116c:	00 d0       	rcall	.+0      	; 0x116e <Timer_enu_Initialization+0xa>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
    1172:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Counter = 0;
    1174:	19 82       	std	Y+1, r1	; 0x01

    u8 Local_au8_ErrorStates [4] ={0};
    1176:	1b 82       	std	Y+3, r1	; 0x03
    1178:	1c 82       	std	Y+4, r1	; 0x04
    117a:	1d 82       	std	Y+5, r1	; 0x05
    117c:	1e 82       	std	Y+6, r1	; 0x06

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
    117e:	19 82       	std	Y+1, r1	; 0x01
    1180:	b3 c0       	rjmp	.+358    	; 0x12e8 <Timer_enu_Initialization+0x184>
    {
        
      Local_au8_ErrorStates[0] = enu_SetTimerMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode);
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	c9 01       	movw	r24, r18
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	82 0f       	add	r24, r18
    1194:	93 1f       	adc	r25, r19
    1196:	fc 01       	movw	r30, r24
    1198:	e7 59       	subi	r30, 0x97	; 151
    119a:	fe 4f       	sbci	r31, 0xFE	; 254
    119c:	40 81       	ld	r20, Z
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	c9 01       	movw	r24, r18
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	82 0f       	add	r24, r18
    11b0:	93 1f       	adc	r25, r19
    11b2:	fc 01       	movw	r30, r24
    11b4:	e6 59       	subi	r30, 0x96	; 150
    11b6:	fe 4f       	sbci	r31, 0xFE	; 254
    11b8:	90 81       	ld	r25, Z
    11ba:	84 2f       	mov	r24, r20
    11bc:	69 2f       	mov	r22, r25
    11be:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <enu_SetTimerMode>
    11c2:	8b 83       	std	Y+3, r24	; 0x03
      Local_au8_ErrorStates[1] = enu_SetClockSelection(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].ClockSelection);
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	c9 01       	movw	r24, r18
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	82 0f       	add	r24, r18
    11d6:	93 1f       	adc	r25, r19
    11d8:	fc 01       	movw	r30, r24
    11da:	e7 59       	subi	r30, 0x97	; 151
    11dc:	fe 4f       	sbci	r31, 0xFE	; 254
    11de:	40 81       	ld	r20, Z
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	c9 01       	movw	r24, r18
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	82 0f       	add	r24, r18
    11f2:	93 1f       	adc	r25, r19
    11f4:	fc 01       	movw	r30, r24
    11f6:	e5 59       	subi	r30, 0x95	; 149
    11f8:	fe 4f       	sbci	r31, 0xFE	; 254
    11fa:	90 81       	ld	r25, Z
    11fc:	84 2f       	mov	r24, r20
    11fe:	69 2f       	mov	r22, r25
    1200:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <enu_SetClockSelection>
    1204:	8c 83       	std	Y+4, r24	; 0x04
      Local_au8_ErrorStates[2] = enu_SetInterruptMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode, Timer_astr_TimerList[Local_u8_Counter].InterruptMode);
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	c9 01       	movw	r24, r18
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	82 0f       	add	r24, r18
    1218:	93 1f       	adc	r25, r19
    121a:	fc 01       	movw	r30, r24
    121c:	e7 59       	subi	r30, 0x97	; 151
    121e:	fe 4f       	sbci	r31, 0xFE	; 254
    1220:	50 81       	ld	r21, Z
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	c9 01       	movw	r24, r18
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	82 0f       	add	r24, r18
    1234:	93 1f       	adc	r25, r19
    1236:	fc 01       	movw	r30, r24
    1238:	e6 59       	subi	r30, 0x96	; 150
    123a:	fe 4f       	sbci	r31, 0xFE	; 254
    123c:	40 81       	ld	r20, Z
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	c9 01       	movw	r24, r18
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	82 0f       	add	r24, r18
    1250:	93 1f       	adc	r25, r19
    1252:	fc 01       	movw	r30, r24
    1254:	e4 59       	subi	r30, 0x94	; 148
    1256:	fe 4f       	sbci	r31, 0xFE	; 254
    1258:	90 81       	ld	r25, Z
    125a:	85 2f       	mov	r24, r21
    125c:	64 2f       	mov	r22, r20
    125e:	49 2f       	mov	r20, r25
    1260:	0e 94 68 11 	call	0x22d0	; 0x22d0 <enu_SetInterruptMode>
    1264:	8d 83       	std	Y+5, r24	; 0x05
      Local_au8_ErrorStates[3] = enu_SetOCxBehavior(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode ,Timer_astr_TimerList[Local_u8_Counter].OCxPinBehavior);
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	c9 01       	movw	r24, r18
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	82 0f       	add	r24, r18
    1278:	93 1f       	adc	r25, r19
    127a:	fc 01       	movw	r30, r24
    127c:	e7 59       	subi	r30, 0x97	; 151
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	50 81       	ld	r21, Z
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	c9 01       	movw	r24, r18
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	82 0f       	add	r24, r18
    1294:	93 1f       	adc	r25, r19
    1296:	fc 01       	movw	r30, r24
    1298:	e6 59       	subi	r30, 0x96	; 150
    129a:	fe 4f       	sbci	r31, 0xFE	; 254
    129c:	40 81       	ld	r20, Z
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	c9 01       	movw	r24, r18
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	82 0f       	add	r24, r18
    12b0:	93 1f       	adc	r25, r19
    12b2:	fc 01       	movw	r30, r24
    12b4:	e3 59       	subi	r30, 0x93	; 147
    12b6:	fe 4f       	sbci	r31, 0xFE	; 254
    12b8:	90 81       	ld	r25, Z
    12ba:	85 2f       	mov	r24, r21
    12bc:	64 2f       	mov	r22, r20
    12be:	49 2f       	mov	r20, r25
    12c0:	0e 94 04 12 	call	0x2408	; 0x2408 <enu_SetOCxBehavior>
    12c4:	8e 83       	std	Y+6, r24	; 0x06
    
      if((Local_au8_ErrorStates[0] == ES_NOK) || (Local_au8_ErrorStates[1] == ES_NOK) || (Local_au8_ErrorStates[2] == ES_NOK) || (Local_au8_ErrorStates[3] == ES_NOK))
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	49 f0       	breq	.+18     	; 0x12de <Timer_enu_Initialization+0x17a>
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	31 f0       	breq	.+12     	; 0x12de <Timer_enu_Initialization+0x17a>
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	19 f0       	breq	.+6      	; 0x12de <Timer_enu_Initialization+0x17a>
    12d8:	8e 81       	ldd	r24, Y+6	; 0x06
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <Timer_enu_Initialization+0x17e>
      {
        Local_u8_ErrorFlag = ES_NOK;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Counter = 0;

    u8 Local_au8_ErrorStates [4] ={0};

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	8f 5f       	subi	r24, 0xFF	; 255
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	90 91 68 01 	lds	r25, 0x0168
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	89 17       	cp	r24, r25
    12f0:	08 f4       	brcc	.+2      	; 0x12f4 <Timer_enu_Initialization+0x190>
    12f2:	47 cf       	rjmp	.-370    	; 0x1182 <Timer_enu_Initialization+0x1e>
      }
    }
    


    return Local_u8_ErrorFlag;
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12f6:	26 96       	adiw	r28, 0x06	; 6
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <Timer_enu_SetOCRxValue>:

extern ErrorState_t Timer_enu_SetOCRxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <Timer_enu_SetOCRxValue+0x6>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <Timer_enu_SetOCRxValue+0x8>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <Timer_enu_SetOCRxValue+0xa>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	8a 83       	std	Y+2, r24	; 0x02
    1318:	7c 83       	std	Y+4, r23	; 0x04
    131a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	3e 83       	std	Y+6, r19	; 0x06
    1328:	2d 83       	std	Y+5, r18	; 0x05
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	91 05       	cpc	r25, r1
    1332:	b9 f0       	breq	.+46     	; 0x1362 <Timer_enu_SetOCRxValue+0x5a>
    1334:	2d 81       	ldd	r18, Y+5	; 0x05
    1336:	3e 81       	ldd	r19, Y+6	; 0x06
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	51 f0       	breq	.+20     	; 0x1352 <Timer_enu_SetOCRxValue+0x4a>
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	61 f4       	brne	.+24     	; 0x135e <Timer_enu_SetOCRxValue+0x56>
    {
        case TIMER_0:
        {
            OCR0 = Copy_u16_Value;
    1346:	ec e5       	ldi	r30, 0x5C	; 92
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    134e:	19 82       	std	Y+1, r1	; 0x01
    1350:	08 c0       	rjmp	.+16     	; 0x1362 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }

        case TIMER_2:
        {
            OCR2 = Copy_u16_Value;
    1352:	e3 e4       	ldi	r30, 0x43	; 67
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    135a:	19 82       	std	Y+1, r1	; 0x01
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
}
    1364:	26 96       	adiw	r28, 0x06	; 6
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <Timer_enu_SetTCNTxValue>:

extern ErrorState_t Timer_enu_SetTCNTxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <Timer_enu_SetTCNTxValue+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <Timer_enu_SetTCNTxValue+0x8>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <Timer_enu_SetTCNTxValue+0xa>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	7c 83       	std	Y+4, r23	; 0x04
    1388:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	3e 83       	std	Y+6, r19	; 0x06
    1396:	2d 83       	std	Y+5, r18	; 0x05
    1398:	8d 81       	ldd	r24, Y+5	; 0x05
    139a:	9e 81       	ldd	r25, Y+6	; 0x06
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	91 05       	cpc	r25, r1
    13a0:	b1 f0       	breq	.+44     	; 0x13ce <Timer_enu_SetTCNTxValue+0x58>
    13a2:	2d 81       	ldd	r18, Y+5	; 0x05
    13a4:	3e 81       	ldd	r19, Y+6	; 0x06
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	31 05       	cpc	r19, r1
    13aa:	51 f0       	breq	.+20     	; 0x13c0 <Timer_enu_SetTCNTxValue+0x4a>
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	59 f4       	brne	.+22     	; 0x13ca <Timer_enu_SetTCNTxValue+0x54>
    {
        case TIMER_0:
        {
            TCNT0 = Copy_u16_Value;
    13b4:	e2 e5       	ldi	r30, 0x52	; 82
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    13bc:	19 82       	std	Y+1, r1	; 0x01
    13be:	07 c0       	rjmp	.+14     	; 0x13ce <Timer_enu_SetTCNTxValue+0x58>
            break;
        }

        case TIMER_2:
        {
            TCNT2 = (u8)Copy_u16_Value;
    13c0:	e4 e4       	ldi	r30, 0x44	; 68
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	80 83       	st	Z, r24
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <Timer_enu_SetTCNTxValue+0x58>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d0:	26 96       	adiw	r28, 0x06	; 6
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <Timer_enu_ReadTCNTxValue>:

extern ErrorState_t Timer_enu_ReadTCNTxValue(u8 Copy_u8_TimerNumber, u16* Copy_u16_Value)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <Timer_enu_ReadTCNTxValue+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <Timer_enu_ReadTCNTxValue+0x8>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <Timer_enu_ReadTCNTxValue+0xa>
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	7c 83       	std	Y+4, r23	; 0x04
    13f4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u16_Value)
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	61 f1       	breq	.+88     	; 0x145a <Timer_enu_ReadTCNTxValue+0x78>
    {
        switch (Copy_u8_TimerNumber)
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	3e 83       	std	Y+6, r19	; 0x06
    140a:	2d 83       	std	Y+5, r18	; 0x05
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	91 05       	cpc	r25, r1
    1414:	21 f1       	breq	.+72     	; 0x145e <Timer_enu_ReadTCNTxValue+0x7c>
    1416:	2d 81       	ldd	r18, Y+5	; 0x05
    1418:	3e 81       	ldd	r19, Y+6	; 0x06
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	79 f0       	breq	.+30     	; 0x143e <Timer_enu_ReadTCNTxValue+0x5c>
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	b1 f4       	brne	.+44     	; 0x1454 <Timer_enu_ReadTCNTxValue+0x72>
        {
            case TIMER_0:
            {
                *Copy_u16_Value = TCNT0;
    1428:	e2 e5       	ldi	r30, 0x52	; 82
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	eb 81       	ldd	r30, Y+3	; 0x03
    1434:	fc 81       	ldd	r31, Y+4	; 0x04
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    143a:	19 82       	std	Y+1, r1	; 0x01
    143c:	10 c0       	rjmp	.+32     	; 0x145e <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }

            case TIMER_2:
            {
                *Copy_u16_Value = TCNT2;
    143e:	e4 e4       	ldi	r30, 0x44	; 68
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	eb 81       	ldd	r30, Y+3	; 0x03
    144a:	fc 81       	ldd	r31, Y+4	; 0x04
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    1450:	19 82       	std	Y+1, r1	; 0x01
    1452:	05 c0       	rjmp	.+10     	; 0x145e <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	02 c0       	rjmp	.+4      	; 0x145e <Timer_enu_ReadTCNTxValue+0x7c>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    145e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1460:	26 96       	adiw	r28, 0x06	; 6
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <Timer_enu_SetClock>:

extern ErrorState_t Timer_enu_SetClock (u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <Timer_enu_SetClock+0x6>
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	8a 83       	std	Y+2, r24	; 0x02
    1480:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetClockSelection(Copy_u8_TimerNumber, Copy_u8_ClockSelection);
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	6b 81       	ldd	r22, Y+3	; 0x03
    148a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <enu_SetClockSelection>
    148e:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    1490:	89 81       	ldd	r24, Y+1	; 0x01
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <Timer_enu_SetDutyCycleForPWM>:

extern ErrorState_t Timer_enu_SetDutyCycleForPWM(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_PulseType, f32 Copy_f32_DutyCyclePercentage)
{
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	2c 97       	sbiw	r28, 0x0c	; 12
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	8a 83       	std	Y+2, r24	; 0x02
    14b8:	6b 83       	std	Y+3, r22	; 0x03
    14ba:	4c 83       	std	Y+4, r20	; 0x04
    14bc:	0d 83       	std	Y+5, r16	; 0x05
    14be:	1e 83       	std	Y+6, r17	; 0x06
    14c0:	2f 83       	std	Y+7, r18	; 0x07
    14c2:	38 87       	std	Y+8, r19	; 0x08
    u8 Local_u8_ErrorFlag = ES_NOK;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_f32_DutyCyclePercentage >= TIMER_DUTYCYCLE_0) && (Copy_f32_DutyCyclePercentage <= TIMER_DUTYCYCLE_100))
    14c8:	1c 86       	std	Y+12, r1	; 0x0c
    14ca:	6d 81       	ldd	r22, Y+5	; 0x05
    14cc:	7e 81       	ldd	r23, Y+6	; 0x06
    14ce:	8f 81       	ldd	r24, Y+7	; 0x07
    14d0:	98 85       	ldd	r25, Y+8	; 0x08
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    14de:	88 23       	and	r24, r24
    14e0:	14 f0       	brlt	.+4      	; 0x14e6 <Timer_enu_SetDutyCycleForPWM+0x48>
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	2c 87       	std	Y+12, r18	; 0x0c
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    14ea:	83 27       	eor	r24, r19
    14ec:	88 23       	and	r24, r24
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <Timer_enu_SetDutyCycleForPWM+0x54>
    14f0:	64 c1       	rjmp	.+712    	; 0x17ba <Timer_enu_SetDutyCycleForPWM+0x31c>
    14f2:	1b 86       	std	Y+11, r1	; 0x0b
    14f4:	6d 81       	ldd	r22, Y+5	; 0x05
    14f6:	7e 81       	ldd	r23, Y+6	; 0x06
    14f8:	8f 81       	ldd	r24, Y+7	; 0x07
    14fa:	98 85       	ldd	r25, Y+8	; 0x08
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    1508:	18 16       	cp	r1, r24
    150a:	14 f0       	brlt	.+4      	; 0x1510 <Timer_enu_SetDutyCycleForPWM+0x72>
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	8b 87       	std	Y+11, r24	; 0x0b
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	9b 85       	ldd	r25, Y+11	; 0x0b
    1514:	89 27       	eor	r24, r25
    1516:	88 23       	and	r24, r24
    1518:	09 f0       	breq	.+2      	; 0x151c <Timer_enu_SetDutyCycleForPWM+0x7e>
    151a:	4f c1       	rjmp	.+670    	; 0x17ba <Timer_enu_SetDutyCycleForPWM+0x31c>
    {
        switch (Copy_u8_TimerNumber)
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	e8 2f       	mov	r30, r24
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	fa 87       	std	Y+10, r31	; 0x0a
    1524:	e9 87       	std	Y+9, r30	; 0x09
    1526:	29 85       	ldd	r18, Y+9	; 0x09
    1528:	3a 85       	ldd	r19, Y+10	; 0x0a
    152a:	21 30       	cpi	r18, 0x01	; 1
    152c:	31 05       	cpc	r19, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <Timer_enu_SetDutyCycleForPWM+0x94>
    1530:	46 c1       	rjmp	.+652    	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <Timer_enu_SetDutyCycleForPWM+0xa0>
    153c:	a0 c0       	rjmp	.+320    	; 0x167e <Timer_enu_SetDutyCycleForPWM+0x1e0>
    153e:	e9 85       	ldd	r30, Y+9	; 0x09
    1540:	fa 85       	ldd	r31, Y+10	; 0x0a
    1542:	30 97       	sbiw	r30, 0x00	; 0
    1544:	09 f0       	breq	.+2      	; 0x1548 <Timer_enu_SetDutyCycleForPWM+0xaa>
    1546:	36 c1       	rjmp	.+620    	; 0x17b4 <Timer_enu_SetDutyCycleForPWM+0x316>
        {
            case TIMER_0:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	82 30       	cpi	r24, 0x02	; 2
    154c:	09 f0       	breq	.+2      	; 0x1550 <Timer_enu_SetDutyCycleForPWM+0xb2>
    154e:	43 c0       	rjmp	.+134    	; 0x15d6 <Timer_enu_SetDutyCycleForPWM+0x138>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	86 30       	cpi	r24, 0x06	; 6
    1554:	c1 f4       	brne	.+48     	; 0x1586 <Timer_enu_SetDutyCycleForPWM+0xe8>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = Copy_f32_DutyCyclePercentage*TIMER_TCNT0_TOP;
    1556:	0c e5       	ldi	r16, 0x5C	; 92
    1558:	10 e0       	ldi	r17, 0x00	; 0
    155a:	6d 81       	ldd	r22, Y+5	; 0x05
    155c:	7e 81       	ldd	r23, Y+6	; 0x06
    155e:	8f 81       	ldd	r24, Y+7	; 0x07
    1560:	98 85       	ldd	r25, Y+8	; 0x08
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	53 e4       	ldi	r21, 0x43	; 67
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	f8 01       	movw	r30, r16
    1580:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1582:	19 82       	std	Y+1, r1	; 0x01
    1584:	1c c1       	rjmp	.+568    	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	87 30       	cpi	r24, 0x07	; 7
    158a:	11 f5       	brne	.+68     	; 0x15d0 <Timer_enu_SetDutyCycleForPWM+0x132>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP* (1 - Copy_f32_DutyCyclePercentage );
    158c:	0c e5       	ldi	r16, 0x5C	; 92
    158e:	10 e0       	ldi	r17, 0x00	; 0
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	80 e8       	ldi	r24, 0x80	; 128
    1596:	9f e3       	ldi	r25, 0x3F	; 63
    1598:	2d 81       	ldd	r18, Y+5	; 0x05
    159a:	3e 81       	ldd	r19, Y+6	; 0x06
    159c:	4f 81       	ldd	r20, Y+7	; 0x07
    159e:	58 85       	ldd	r21, Y+8	; 0x08
    15a0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	53 e4       	ldi	r21, 0x43	; 67
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	f8 01       	movw	r30, r16
    15ca:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    15cc:	19 82       	std	Y+1, r1	; 0x01
    15ce:	f7 c0       	rjmp	.+494    	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	f4 c0       	rjmp	.+488    	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	09 f0       	breq	.+2      	; 0x15de <Timer_enu_SetDutyCycleForPWM+0x140>
    15dc:	4d c0       	rjmp	.+154    	; 0x1678 <Timer_enu_SetDutyCycleForPWM+0x1da>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	84 30       	cpi	r24, 0x04	; 4
    15e2:	11 f5       	brne	.+68     	; 0x1628 <Timer_enu_SetDutyCycleForPWM+0x18a>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1)) - 1;
    15e4:	0c e5       	ldi	r16, 0x5C	; 92
    15e6:	10 e0       	ldi	r17, 0x00	; 0
    15e8:	6d 81       	ldd	r22, Y+5	; 0x05
    15ea:	7e 81       	ldd	r23, Y+6	; 0x06
    15ec:	8f 81       	ldd	r24, Y+7	; 0x07
    15ee:	98 85       	ldd	r25, Y+8	; 0x08
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	53 e4       	ldi	r21, 0x43	; 67
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	bc 01       	movw	r22, r24
    1602:	cd 01       	movw	r24, r26
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e8       	ldi	r20, 0x80	; 128
    160a:	5f e3       	ldi	r21, 0x3F	; 63
    160c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	f8 01       	movw	r30, r16
    1622:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1624:	19 82       	std	Y+1, r1	; 0x01
    1626:	cb c0       	rjmp	.+406    	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	85 30       	cpi	r24, 0x05	; 5
    162c:	11 f5       	brne	.+68     	; 0x1672 <Timer_enu_SetDutyCycleForPWM+0x1d4>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1));
    162e:	0c e5       	ldi	r16, 0x5C	; 92
    1630:	10 e0       	ldi	r17, 0x00	; 0
    1632:	6d 81       	ldd	r22, Y+5	; 0x05
    1634:	7e 81       	ldd	r23, Y+6	; 0x06
    1636:	8f 81       	ldd	r24, Y+7	; 0x07
    1638:	98 85       	ldd	r25, Y+8	; 0x08
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	53 ec       	ldi	r21, 0xC3	; 195
    1642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4f e7       	ldi	r20, 0x7F	; 127
    1654:	53 e4       	ldi	r21, 0x43	; 67
    1656:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	bc 01       	movw	r22, r24
    1660:	cd 01       	movw	r24, r26
    1662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	f8 01       	movw	r30, r16
    166c:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    166e:	19 82       	std	Y+1, r1	; 0x01
    1670:	a6 c0       	rjmp	.+332    	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1672:	82 e0       	ldi	r24, 0x02	; 2
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	a3 c0       	rjmp	.+326    	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	a0 c0       	rjmp	.+320    	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                break;
            }

            case TIMER_2:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	82 30       	cpi	r24, 0x02	; 2
    1682:	09 f0       	breq	.+2      	; 0x1686 <Timer_enu_SetDutyCycleForPWM+0x1e8>
    1684:	43 c0       	rjmp	.+134    	; 0x170c <Timer_enu_SetDutyCycleForPWM+0x26e>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	86 30       	cpi	r24, 0x06	; 6
    168a:	c1 f4       	brne	.+48     	; 0x16bc <Timer_enu_SetDutyCycleForPWM+0x21e>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = Copy_f32_DutyCyclePercentage*TIMER_TCNT2_TOP;
    168c:	03 e4       	ldi	r16, 0x43	; 67
    168e:	10 e0       	ldi	r17, 0x00	; 0
    1690:	6d 81       	ldd	r22, Y+5	; 0x05
    1692:	7e 81       	ldd	r23, Y+6	; 0x06
    1694:	8f 81       	ldd	r24, Y+7	; 0x07
    1696:	98 85       	ldd	r25, Y+8	; 0x08
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4f e7       	ldi	r20, 0x7F	; 127
    169e:	53 e4       	ldi	r21, 0x43	; 67
    16a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	f8 01       	movw	r30, r16
    16b6:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    16b8:	19 82       	std	Y+1, r1	; 0x01
    16ba:	81 c0       	rjmp	.+258    	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	87 30       	cpi	r24, 0x07	; 7
    16c0:	11 f5       	brne	.+68     	; 0x1706 <Timer_enu_SetDutyCycleForPWM+0x268>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP* (1 - Copy_f32_DutyCyclePercentage );
    16c2:	03 e4       	ldi	r16, 0x43	; 67
    16c4:	10 e0       	ldi	r17, 0x00	; 0
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	80 e8       	ldi	r24, 0x80	; 128
    16cc:	9f e3       	ldi	r25, 0x3F	; 63
    16ce:	2d 81       	ldd	r18, Y+5	; 0x05
    16d0:	3e 81       	ldd	r19, Y+6	; 0x06
    16d2:	4f 81       	ldd	r20, Y+7	; 0x07
    16d4:	58 85       	ldd	r21, Y+8	; 0x08
    16d6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	bc 01       	movw	r22, r24
    16e0:	cd 01       	movw	r24, r26
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	53 e4       	ldi	r21, 0x43	; 67
    16ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	f8 01       	movw	r30, r16
    1700:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1702:	19 82       	std	Y+1, r1	; 0x01
    1704:	5c c0       	rjmp	.+184    	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	59 c0       	rjmp	.+178    	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	09 f0       	breq	.+2      	; 0x1714 <Timer_enu_SetDutyCycleForPWM+0x276>
    1712:	4d c0       	rjmp	.+154    	; 0x17ae <Timer_enu_SetDutyCycleForPWM+0x310>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	84 30       	cpi	r24, 0x04	; 4
    1718:	11 f5       	brne	.+68     	; 0x175e <Timer_enu_SetDutyCycleForPWM+0x2c0>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1)) - 1;
    171a:	03 e4       	ldi	r16, 0x43	; 67
    171c:	10 e0       	ldi	r17, 0x00	; 0
    171e:	6d 81       	ldd	r22, Y+5	; 0x05
    1720:	7e 81       	ldd	r23, Y+6	; 0x06
    1722:	8f 81       	ldd	r24, Y+7	; 0x07
    1724:	98 85       	ldd	r25, Y+8	; 0x08
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e8       	ldi	r20, 0x80	; 128
    172c:	53 e4       	ldi	r21, 0x43	; 67
    172e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	f8 01       	movw	r30, r16
    1758:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    175a:	19 82       	std	Y+1, r1	; 0x01
    175c:	30 c0       	rjmp	.+96     	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	85 30       	cpi	r24, 0x05	; 5
    1762:	11 f5       	brne	.+68     	; 0x17a8 <Timer_enu_SetDutyCycleForPWM+0x30a>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1));
    1764:	03 e4       	ldi	r16, 0x43	; 67
    1766:	10 e0       	ldi	r17, 0x00	; 0
    1768:	6d 81       	ldd	r22, Y+5	; 0x05
    176a:	7e 81       	ldd	r23, Y+6	; 0x06
    176c:	8f 81       	ldd	r24, Y+7	; 0x07
    176e:	98 85       	ldd	r25, Y+8	; 0x08
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	53 ec       	ldi	r21, 0xC3	; 195
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	53 e4       	ldi	r21, 0x43	; 67
    178c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	f8 01       	movw	r30, r16
    17a2:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	0b c0       	rjmp	.+22     	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	08 c0       	rjmp	.+16     	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	05 c0       	rjmp	.+10     	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    17b4:	82 e0       	ldi	r24, 0x02	; 2
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <Timer_enu_SetDutyCycleForPWM+0x320>
            }
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    17be:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c0:	2c 96       	adiw	r28, 0x0c	; 12
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	08 95       	ret

000017d6 <Timer_enu_ForceCompareMatch>:

extern ErrorState_t Timer_enu_ForceCompareMatch (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	00 d0       	rcall	.+0      	; 0x17dc <Timer_enu_ForceCompareMatch+0x6>
    17dc:	00 d0       	rcall	.+0      	; 0x17de <Timer_enu_ForceCompareMatch+0x8>
    17de:	0f 92       	push	r0
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	8a 83       	std	Y+2, r24	; 0x02
    17e6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_TimerMode == TIMER_NORMAL) || (TIMER_CTC))
    {
        switch (Copy_u8_TimerNumber)
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3d 83       	std	Y+5, r19	; 0x05
    17f4:	2c 83       	std	Y+4, r18	; 0x04
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
    17f8:	9d 81       	ldd	r25, Y+5	; 0x05
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	e9 f0       	breq	.+58     	; 0x183a <Timer_enu_ForceCompareMatch+0x64>
    1800:	2c 81       	ldd	r18, Y+4	; 0x04
    1802:	3d 81       	ldd	r19, Y+5	; 0x05
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	69 f0       	breq	.+26     	; 0x1824 <Timer_enu_ForceCompareMatch+0x4e>
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	91 f4       	brne	.+36     	; 0x1836 <Timer_enu_ForceCompareMatch+0x60>
        {
            case TIMER_0:
            {
                //Bit contains 1
                TCCR0 |= (1 << TCCR0_FOC0);
    1812:	a3 e5       	ldi	r26, 0x53	; 83
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e3 e5       	ldi	r30, 0x53	; 83
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	80 68       	ori	r24, 0x80	; 128
    181e:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	0b c0       	rjmp	.+22     	; 0x183a <Timer_enu_ForceCompareMatch+0x64>
                break;
            }
            case TIMER_2:
            {
                //Bit contains 1
                TCCR2 |= (1 << TCCR2_FOC2);
    1824:	a5 e4       	ldi	r26, 0x45	; 69
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e5 e4       	ldi	r30, 0x45	; 69
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 68       	ori	r24, 0x80	; 128
    1830:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1832:	19 82       	std	Y+1, r1	; 0x01
    1834:	02 c0       	rjmp	.+4      	; 0x183a <Timer_enu_ForceCompareMatch+0x64>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }
    return Local_u8_ErrorFlag;
    183a:	89 81       	ldd	r24, Y+1	; 0x01
}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <Timer_enu_SetTimerMode>:

extern ErrorState_t Timer_enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_TimerMode)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <Timer_enu_SetTimerMode+0x6>
    1852:	0f 92       	push	r0
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	8a 83       	std	Y+2, r24	; 0x02
    185a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetTimerMode(Copy_u8_TimerNumber, Copy_TimerMode);
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	6b 81       	ldd	r22, Y+3	; 0x03
    1864:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <enu_SetTimerMode>
    1868:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <Timer_enu_SetFOCx>:

extern ErrorState_t Timer_enu_SetFOCx (u8 Copy_u8_TimerNumber)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <Timer_enu_SetFOCx+0x6>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <Timer_enu_SetFOCx+0x8>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3c 83       	std	Y+4, r19	; 0x04
    1892:	2b 83       	std	Y+3, r18	; 0x03
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	91 05       	cpc	r25, r1
    189c:	91 f0       	breq	.+36     	; 0x18c2 <Timer_enu_SetFOCx+0x4a>
    189e:	2b 81       	ldd	r18, Y+3	; 0x03
    18a0:	3c 81       	ldd	r19, Y+4	; 0x04
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	79 f0       	breq	.+30     	; 0x18c6 <Timer_enu_SetFOCx+0x4e>
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	a1 f4       	brne	.+40     	; 0x18d8 <Timer_enu_SetFOCx+0x60>
    {
        case TIMER_0:
        {
            TCCR0 |= (1 << TCCR0_FOC0);
    18b0:	a3 e5       	ldi	r26, 0x53	; 83
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e3 e5       	ldi	r30, 0x53	; 83
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	80 68       	ori	r24, 0x80	; 128
    18bc:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    18be:	19 82       	std	Y+1, r1	; 0x01
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <Timer_enu_SetFOCx+0x64>
        }

        case TIMER_1:
        {

            Local_u8_ErrorFlag = ES_OK;
    18c2:	19 82       	std	Y+1, r1	; 0x01
    18c4:	0b c0       	rjmp	.+22     	; 0x18dc <Timer_enu_SetFOCx+0x64>
        }

        case TIMER_2:
        {

            TCCR2 |= (1 << TCCR2_FOC2);
    18c6:	a5 e4       	ldi	r26, 0x45	; 69
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e5 e4       	ldi	r30, 0x45	; 69
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	80 68       	ori	r24, 0x80	; 128
    18d2:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    18d4:	19 82       	std	Y+1, r1	; 0x01
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <Timer_enu_SetFOCx+0x64>
            break;
        }
        
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <Timer_enu_TimeDelay>:

extern ErrorState_t Timer_enu_TimeDelay(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimeinSec)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <Timer_enu_TimeDelay+0x6>
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	8a 83       	std	Y+2, r24	; 0x02
    18fa:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	89 83       	std	Y+1, r24	; 0x01


    return Local_u8_ErrorFlag;
    1900:	89 81       	ldd	r24, Y+1	; 0x01
}
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <Timer_enu_SetCallBack>:

extern ErrorState_t Timer_enu_SetCallBack (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, void (*Copy_pfun_AppFunction)(void*), void* Copy_pvid_Parameters)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	29 97       	sbiw	r28, 0x09	; 9
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	8a 83       	std	Y+2, r24	; 0x02
    1924:	6b 83       	std	Y+3, r22	; 0x03
    1926:	5d 83       	std	Y+5, r21	; 0x05
    1928:	4c 83       	std	Y+4, r20	; 0x04
    192a:	3f 83       	std	Y+7, r19	; 0x07
    192c:	2e 83       	std	Y+6, r18	; 0x06
    u8 Local_u8_ErrorFlag = ES_NOK;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pfun_AppFunction)
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	9d 81       	ldd	r25, Y+5	; 0x05
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	09 f4       	brne	.+2      	; 0x193c <Timer_enu_SetCallBack+0x2e>
    193a:	62 c0       	rjmp	.+196    	; 0x1a00 <Timer_enu_SetCallBack+0xf2>
    {
        switch (Copy_u8_TimerNumber)
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	39 87       	std	Y+9, r19	; 0x09
    1944:	28 87       	std	Y+8, r18	; 0x08
    1946:	88 85       	ldd	r24, Y+8	; 0x08
    1948:	99 85       	ldd	r25, Y+9	; 0x09
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	91 05       	cpc	r25, r1
    194e:	09 f4       	brne	.+2      	; 0x1952 <Timer_enu_SetCallBack+0x44>
    1950:	59 c0       	rjmp	.+178    	; 0x1a04 <Timer_enu_SetCallBack+0xf6>
    1952:	28 85       	ldd	r18, Y+8	; 0x08
    1954:	39 85       	ldd	r19, Y+9	; 0x09
    1956:	22 30       	cpi	r18, 0x02	; 2
    1958:	31 05       	cpc	r19, r1
    195a:	51 f1       	breq	.+84     	; 0x19b0 <Timer_enu_SetCallBack+0xa2>
    195c:	88 85       	ldd	r24, Y+8	; 0x08
    195e:	99 85       	ldd	r25, Y+9	; 0x09
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	09 f0       	breq	.+2      	; 0x1966 <Timer_enu_SetCallBack+0x58>
    1964:	4a c0       	rjmp	.+148    	; 0x19fa <Timer_enu_SetCallBack+0xec>
        {
            case TIMER_0:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	88 23       	and	r24, r24
    196a:	71 f4       	brne	.+28     	; 0x1988 <Timer_enu_SetCallBack+0x7a>
                {
                    apfun_ISRpointers[TIMER_0_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	9d 81       	ldd	r25, Y+5	; 0x05
    1970:	90 93 b7 01 	sts	0x01B7, r25
    1974:	80 93 b6 01 	sts	0x01B6, r24

                    apvid_ISRParameters[TIMER_0_OVERFLOW_ISR] = Copy_pvid_Parameters;
    1978:	8e 81       	ldd	r24, Y+6	; 0x06
    197a:	9f 81       	ldd	r25, Y+7	; 0x07
    197c:	90 93 c7 01 	sts	0x01C7, r25
    1980:	80 93 c6 01 	sts	0x01C6, r24

                    Local_u8_ErrorFlag = ES_OK;
    1984:	19 82       	std	Y+1, r1	; 0x01
    1986:	3e c0       	rjmp	.+124    	; 0x1a04 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	71 f4       	brne	.+28     	; 0x19aa <Timer_enu_SetCallBack+0x9c>
                {
                    apfun_ISRpointers[TIMER_0_CTC_ISR] = Copy_pfun_AppFunction;
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	9d 81       	ldd	r25, Y+5	; 0x05
    1992:	90 93 b5 01 	sts	0x01B5, r25
    1996:	80 93 b4 01 	sts	0x01B4, r24

                    apvid_ISRParameters[TIMER_0_CTC_ISR] = Copy_pvid_Parameters;
    199a:	8e 81       	ldd	r24, Y+6	; 0x06
    199c:	9f 81       	ldd	r25, Y+7	; 0x07
    199e:	90 93 c5 01 	sts	0x01C5, r25
    19a2:	80 93 c4 01 	sts	0x01C4, r24

                    Local_u8_ErrorFlag = ES_OK;
    19a6:	19 82       	std	Y+1, r1	; 0x01
    19a8:	2d c0       	rjmp	.+90     	; 0x1a04 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	2a c0       	rjmp	.+84     	; 0x1a04 <Timer_enu_SetCallBack+0xf6>
                break;
            }

            case TIMER_2:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	88 23       	and	r24, r24
    19b4:	71 f4       	brne	.+28     	; 0x19d2 <Timer_enu_SetCallBack+0xc4>
                {
                    apfun_ISRpointers[TIMER_2_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ba:	90 93 ab 01 	sts	0x01AB, r25
    19be:	80 93 aa 01 	sts	0x01AA, r24

                    apvid_ISRParameters[TIMER_2_OVERFLOW_ISR] = Copy_pvid_Parameters;
    19c2:	8e 81       	ldd	r24, Y+6	; 0x06
    19c4:	9f 81       	ldd	r25, Y+7	; 0x07
    19c6:	90 93 bb 01 	sts	0x01BB, r25
    19ca:	80 93 ba 01 	sts	0x01BA, r24

                    Local_u8_ErrorFlag = ES_OK;
    19ce:	19 82       	std	Y+1, r1	; 0x01
    19d0:	19 c0       	rjmp	.+50     	; 0x1a04 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	71 f4       	brne	.+28     	; 0x19f4 <Timer_enu_SetCallBack+0xe6>
                {
                    apfun_ISRpointers[TIMER_2_CTC_ISR] = Copy_pfun_AppFunction;
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	90 93 a9 01 	sts	0x01A9, r25
    19e0:	80 93 a8 01 	sts	0x01A8, r24

                    apvid_ISRParameters[TIMER_2_CTC_ISR] = Copy_pvid_Parameters;
    19e4:	8e 81       	ldd	r24, Y+6	; 0x06
    19e6:	9f 81       	ldd	r25, Y+7	; 0x07
    19e8:	90 93 b9 01 	sts	0x01B9, r25
    19ec:	80 93 b8 01 	sts	0x01B8, r24

                    Local_u8_ErrorFlag = ES_OK;
    19f0:	19 82       	std	Y+1, r1	; 0x01
    19f2:	08 c0       	rjmp	.+16     	; 0x1a04 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	05 c0       	rjmp	.+10     	; 0x1a04 <Timer_enu_SetCallBack+0xf6>

                break;
            }
            
            default:
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <Timer_enu_SetCallBack+0xf6>
            break;
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a06:	29 96       	adiw	r28, 0x09	; 9
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <Timer_enu_GetPSUsed>:

extern ErrorState_t Timer_enu_GetPSUsed(u8 Copy_u8_TimerNumber, u16* Copy_pu16_PS)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	29 97       	sbiw	r28, 0x09	; 9
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	8b 83       	std	Y+3, r24	; 0x03
    1a2e:	7d 83       	std	Y+5, r23	; 0x05
    1a30:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	8a 83       	std	Y+2, r24	; 0x02

    switch (Copy_u8_TimerNumber)
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	39 87       	std	Y+9, r19	; 0x09
    1a3e:	28 87       	std	Y+8, r18	; 0x08
    1a40:	88 85       	ldd	r24, Y+8	; 0x08
    1a42:	99 85       	ldd	r25, Y+9	; 0x09
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	91 05       	cpc	r25, r1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <Timer_enu_GetPSUsed+0x34>
    1a4a:	66 c0       	rjmp	.+204    	; 0x1b18 <Timer_enu_GetPSUsed+0x100>
    1a4c:	28 85       	ldd	r18, Y+8	; 0x08
    1a4e:	39 85       	ldd	r19, Y+9	; 0x09
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <Timer_enu_GetPSUsed+0x40>
    1a56:	60 c0       	rjmp	.+192    	; 0x1b18 <Timer_enu_GetPSUsed+0x100>
    1a58:	88 85       	ldd	r24, Y+8	; 0x08
    1a5a:	99 85       	ldd	r25, Y+9	; 0x09
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <Timer_enu_GetPSUsed+0x4a>
    1a60:	59 c0       	rjmp	.+178    	; 0x1b14 <Timer_enu_GetPSUsed+0xfc>
    {
        case TIMER_0:
        {
            u8 Local_u8_CS_Bits = TCCR0 & 0x07; //Acquiring the least significant 3 bits CS2:0\
    1a62:	e3 e5       	ldi	r30, 0x53	; 83
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	87 70       	andi	r24, 0x07	; 7
    1a6a:	89 83       	std	Y+1, r24	; 0x01

            switch (Local_u8_CS_Bits)
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3f 83       	std	Y+7, r19	; 0x07
    1a74:	2e 83       	std	Y+6, r18	; 0x06
    1a76:	8e 81       	ldd	r24, Y+6	; 0x06
    1a78:	9f 81       	ldd	r25, Y+7	; 0x07
    1a7a:	82 30       	cpi	r24, 0x02	; 2
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	59 f1       	breq	.+86     	; 0x1ad6 <Timer_enu_GetPSUsed+0xbe>
    1a80:	2e 81       	ldd	r18, Y+6	; 0x06
    1a82:	3f 81       	ldd	r19, Y+7	; 0x07
    1a84:	23 30       	cpi	r18, 0x03	; 3
    1a86:	31 05       	cpc	r19, r1
    1a88:	54 f4       	brge	.+20     	; 0x1a9e <Timer_enu_GetPSUsed+0x86>
    1a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	b1 f0       	breq	.+44     	; 0x1abe <Timer_enu_GetPSUsed+0xa6>
    1a92:	2e 81       	ldd	r18, Y+6	; 0x06
    1a94:	3f 81       	ldd	r19, Y+7	; 0x07
    1a96:	21 30       	cpi	r18, 0x01	; 1
    1a98:	31 05       	cpc	r19, r1
    1a9a:	b1 f0       	breq	.+44     	; 0x1ac8 <Timer_enu_GetPSUsed+0xb0>
    1a9c:	38 c0       	rjmp	.+112    	; 0x1b0e <Timer_enu_GetPSUsed+0xf6>
    1a9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa0:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa2:	84 30       	cpi	r24, 0x04	; 4
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	29 f1       	breq	.+74     	; 0x1af2 <Timer_enu_GetPSUsed+0xda>
    1aa8:	2e 81       	ldd	r18, Y+6	; 0x06
    1aaa:	3f 81       	ldd	r19, Y+7	; 0x07
    1aac:	24 30       	cpi	r18, 0x04	; 4
    1aae:	31 05       	cpc	r19, r1
    1ab0:	cc f0       	brlt	.+50     	; 0x1ae4 <Timer_enu_GetPSUsed+0xcc>
    1ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab6:	85 30       	cpi	r24, 0x05	; 5
    1ab8:	91 05       	cpc	r25, r1
    1aba:	11 f1       	breq	.+68     	; 0x1b00 <Timer_enu_GetPSUsed+0xe8>
    1abc:	28 c0       	rjmp	.+80     	; 0x1b0e <Timer_enu_GetPSUsed+0xf6>
            {
            
                case 0:
                {
                    *Copy_pu16_PS = 0;
    1abe:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac2:	11 82       	std	Z+1, r1	; 0x01
    1ac4:	10 82       	st	Z, r1
    1ac6:	28 c0       	rjmp	.+80     	; 0x1b18 <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                case 1:
                {
                    *Copy_pu16_PS = 1;
    1ac8:	ec 81       	ldd	r30, Y+4	; 0x04
    1aca:	fd 81       	ldd	r31, Y+5	; 0x05
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	80 83       	st	Z, r24
    1ad4:	21 c0       	rjmp	.+66     	; 0x1b18 <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                case 2:
                {
                    *Copy_pu16_PS = 8;
    1ad6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ad8:	fd 81       	ldd	r31, Y+5	; 0x05
    1ada:	88 e0       	ldi	r24, 0x08	; 8
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	91 83       	std	Z+1, r25	; 0x01
    1ae0:	80 83       	st	Z, r24
    1ae2:	1a c0       	rjmp	.+52     	; 0x1b18 <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                case 3:
                {
                    *Copy_pu16_PS = 64;
    1ae4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ae6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ae8:	80 e4       	ldi	r24, 0x40	; 64
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
    1af0:	13 c0       	rjmp	.+38     	; 0x1b18 <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                case 4:
                {
                    *Copy_pu16_PS = 256;
    1af2:	ec 81       	ldd	r30, Y+4	; 0x04
    1af4:	fd 81       	ldd	r31, Y+5	; 0x05
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	80 83       	st	Z, r24
    1afe:	0c c0       	rjmp	.+24     	; 0x1b18 <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                case 5:
                {
                    *Copy_pu16_PS = 1024;
    1b00:	ec 81       	ldd	r30, Y+4	; 0x04
    1b02:	fd 81       	ldd	r31, Y+5	; 0x05
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	94 e0       	ldi	r25, 0x04	; 4
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24
    1b0c:	05 c0       	rjmp	.+10     	; 0x1b18 <Timer_enu_GetPSUsed+0x100>
                    break;
                }

                default:
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	8a 83       	std	Y+2, r24	; 0x02
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <Timer_enu_GetPSUsed+0x100>
        {
            break;
        }
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1b14:	82 e0       	ldi	r24, 0x02	; 2
    1b16:	8a 83       	std	Y+2, r24	; 0x02
            break;
        }
    }

    return Local_u8_ErrorFlag;
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b1a:	29 96       	adiw	r28, 0x09	; 9
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <Timer_enu_GetTovx>:

extern ErrorState_t Timer_enu_GetTovx (u8 Copy_u8_TimerNumber, u8* Copy_pu8_TovxFlag)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <Timer_enu_GetTovx+0x6>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <Timer_enu_GetTovx+0x8>
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	8a 83       	std	Y+2, r24	; 0x02
    1b3a:	7c 83       	std	Y+4, r23	; 0x04
    1b3c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	41 f4       	brne	.+16     	; 0x1b5c <Timer_enu_GetTovx+0x30>
    {
    
        case TIMER_0:
        {
            *Copy_pu8_TovxFlag = (TIFR >> TIFR_TOV0) & 1; //Getting Tov0 Flag
    1b4c:	e8 e5       	ldi	r30, 0x58	; 88
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	81 70       	andi	r24, 0x01	; 1
    1b54:	eb 81       	ldd	r30, Y+3	; 0x03
    1b56:	fc 81       	ldd	r31, Y+4	; 0x04
    1b58:	80 83       	st	Z, r24
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <Timer_enu_GetTovx+0x34>
            break;
        }

        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
        
    }
    return Local_u8_ErrorFlag;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <Timer_enu_SetTovx>:

extern ErrorState_t Timer_enu_SetTovx (u8 Copy_u8_TimerNumber)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <Timer_enu_SetTovx+0x6>
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	41 f4       	brne	.+16     	; 0x1b9a <Timer_enu_SetTovx+0x2a>
    {
        case TIMER_0:
        {
            TIFR |= ( 1 << TIFR_TOV0);
    1b8a:	a8 e5       	ldi	r26, 0x58	; 88
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e8 e5       	ldi	r30, 0x58	; 88
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	81 60       	ori	r24, 0x01	; 1
    1b96:	8c 93       	st	X, r24
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <Timer_enu_SetTovx+0x2e>
            break;
        }

        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1b9a:	82 e0       	ldi	r24, 0x02	; 2
    1b9c:	89 83       	std	Y+1, r24	; 0x01

            break;
        }
    }

    return Local_u8_ErrorFlag;
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <Timer_enu_EnableInterruptMode>:

extern ErrorState_t Timer_enu_EnableInterruptMode (u8 Copy_u8_TimerNumber, u8 Copu_u8_TimerMode)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <Timer_enu_EnableInterruptMode+0x6>
    1bb0:	0f 92       	push	r0
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	8a 83       	std	Y+2, r24	; 0x02
    1bb8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = enu_SetInterruptMode(Copy_u8_TimerNumber, Copu_u8_TimerMode, TIMER_INT_MODE);
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	6b 81       	ldd	r22, Y+3	; 0x03
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 68 11 	call	0x22d0	; 0x22d0 <enu_SetInterruptMode>
    1bc4:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <Timer_enu_DisableInterruptMode>:

extern ErrorState_t Timer_enu_DisableInterruptMode (u8 Copy_u8_TimerNumber, u8 Copu_u8_TimerMode)
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <Timer_enu_DisableInterruptMode+0x6>
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	8a 83       	std	Y+2, r24	; 0x02
    1be2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = enu_SetInterruptMode(Copy_u8_TimerNumber, Copu_u8_TimerMode, TIMER_POLLING_MODE);
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	6b 81       	ldd	r22, Y+3	; 0x03
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	0e 94 68 11 	call	0x22d0	; 0x22d0 <enu_SetInterruptMode>
    1bee:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <__vector_4>:
// void __vector_10 (void)__attribute__((signal));
void __vector_11 (void)__attribute__((signal));


void __vector_4 (void)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    1c06:	80 91 a8 01 	lds	r24, 0x01A8
    1c0a:	90 91 a9 01 	lds	r25, 0x01A9
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	49 f0       	breq	.+18     	; 0x1c24 <__vector_4+0x26>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    1c12:	e0 91 a8 01 	lds	r30, 0x01A8
    1c16:	f0 91 a9 01 	lds	r31, 0x01A9
    1c1a:	80 91 b8 01 	lds	r24, 0x01B8
    1c1e:	90 91 b9 01 	lds	r25, 0x01B9
    1c22:	09 95       	icall
    }
}
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <__vector_5>:

void __vector_5 (void)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    1c32:	80 91 a8 01 	lds	r24, 0x01A8
    1c36:	90 91 a9 01 	lds	r25, 0x01A9
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	49 f0       	breq	.+18     	; 0x1c50 <__vector_5+0x26>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    1c3e:	e0 91 a8 01 	lds	r30, 0x01A8
    1c42:	f0 91 a9 01 	lds	r31, 0x01A9
    1c46:	80 91 b8 01 	lds	r24, 0x01B8
    1c4a:	90 91 b9 01 	lds	r25, 0x01B9
    1c4e:	09 95       	icall
    }
}
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <__vector_10>:

void __vector_10 (void)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_CTC_ISR])
    1c5e:	80 91 b4 01 	lds	r24, 0x01B4
    1c62:	90 91 b5 01 	lds	r25, 0x01B5
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	49 f0       	breq	.+18     	; 0x1c7c <__vector_10+0x26>
    {
       apfun_ISRpointers[TIMER_0_CTC_ISR](apvid_ISRParameters[TIMER_0_CTC_ISR]);
    1c6a:	e0 91 b4 01 	lds	r30, 0x01B4
    1c6e:	f0 91 b5 01 	lds	r31, 0x01B5
    1c72:	80 91 c4 01 	lds	r24, 0x01C4
    1c76:	90 91 c5 01 	lds	r25, 0x01C5
    1c7a:	09 95       	icall
    }
}
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <__vector_11>:

void __vector_11 (void)
{
    1c82:	1f 92       	push	r1
    1c84:	0f 92       	push	r0
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	0f 92       	push	r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	2f 93       	push	r18
    1c8e:	3f 93       	push	r19
    1c90:	4f 93       	push	r20
    1c92:	5f 93       	push	r21
    1c94:	6f 93       	push	r22
    1c96:	7f 93       	push	r23
    1c98:	8f 93       	push	r24
    1c9a:	9f 93       	push	r25
    1c9c:	af 93       	push	r26
    1c9e:	bf 93       	push	r27
    1ca0:	ef 93       	push	r30
    1ca2:	ff 93       	push	r31
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_OVERFLOW_ISR])
    1cac:	80 91 b6 01 	lds	r24, 0x01B6
    1cb0:	90 91 b7 01 	lds	r25, 0x01B7
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	49 f0       	breq	.+18     	; 0x1cca <__vector_11+0x48>
    {
        apfun_ISRpointers[TIMER_0_OVERFLOW_ISR](apvid_ISRParameters[TIMER_0_OVERFLOW_ISR]);
    1cb8:	e0 91 b6 01 	lds	r30, 0x01B6
    1cbc:	f0 91 b7 01 	lds	r31, 0x01B7
    1cc0:	80 91 c6 01 	lds	r24, 0x01C6
    1cc4:	90 91 c7 01 	lds	r25, 0x01C7
    1cc8:	09 95       	icall
    }
}
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	ff 91       	pop	r31
    1cd0:	ef 91       	pop	r30
    1cd2:	bf 91       	pop	r27
    1cd4:	af 91       	pop	r26
    1cd6:	9f 91       	pop	r25
    1cd8:	8f 91       	pop	r24
    1cda:	7f 91       	pop	r23
    1cdc:	6f 91       	pop	r22
    1cde:	5f 91       	pop	r21
    1ce0:	4f 91       	pop	r20
    1ce2:	3f 91       	pop	r19
    1ce4:	2f 91       	pop	r18
    1ce6:	0f 90       	pop	r0
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	0f 90       	pop	r0
    1cec:	1f 90       	pop	r1
    1cee:	18 95       	reti

00001cf0 <enu_SetTimerMode>:



//Local functions' implementation
static ErrorState_t enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <enu_SetTimerMode+0x6>
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <enu_SetTimerMode+0x8>
    1cf8:	0f 92       	push	r0
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	89 83       	std	Y+1, r24	; 0x01

    switch(Copy_u8_TimerNumber)
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	3d 83       	std	Y+5, r19	; 0x05
    1d0e:	2c 83       	std	Y+4, r18	; 0x04
    1d10:	8c 81       	ldd	r24, Y+4	; 0x04
    1d12:	9d 81       	ldd	r25, Y+5	; 0x05
    1d14:	81 30       	cpi	r24, 0x01	; 1
    1d16:	91 05       	cpc	r25, r1
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <enu_SetTimerMode+0x2c>
    1d1a:	ab c0       	rjmp	.+342    	; 0x1e72 <enu_SetTimerMode+0x182>
    1d1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d20:	22 30       	cpi	r18, 0x02	; 2
    1d22:	31 05       	cpc	r19, r1
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <enu_SetTimerMode+0x38>
    1d26:	54 c0       	rjmp	.+168    	; 0x1dd0 <enu_SetTimerMode+0xe0>
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <enu_SetTimerMode+0x42>
    1d30:	9e c0       	rjmp	.+316    	; 0x1e6e <enu_SetTimerMode+0x17e>
    {
        case TIMER_0:
        {

            if(Copy_u8_TimerMode == TIMER_NORMAL)
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	88 23       	and	r24, r24
    1d36:	81 f4       	brne	.+32     	; 0x1d58 <enu_SetTimerMode+0x68>
            {
                //Bits contain 00
                TCCR0 &= ~(1 << TCCR0_WGM00);
    1d38:	a3 e5       	ldi	r26, 0x53	; 83
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e3 e5       	ldi	r30, 0x53	; 83
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	8f 7b       	andi	r24, 0xBF	; 191
    1d44:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    1d46:	a3 e5       	ldi	r26, 0x53	; 83
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e3 e5       	ldi	r30, 0x53	; 83
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	87 7f       	andi	r24, 0xF7	; 247
    1d52:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1d54:	19 82       	std	Y+1, r1	; 0x01
    1d56:	8d c0       	rjmp	.+282    	; 0x1e72 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	82 30       	cpi	r24, 0x02	; 2
    1d5c:	81 f4       	brne	.+32     	; 0x1d7e <enu_SetTimerMode+0x8e>
            {
                //Bits contain 01
                TCCR0 |= (1 << TCCR0_WGM00);
    1d5e:	a3 e5       	ldi	r26, 0x53	; 83
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e3 e5       	ldi	r30, 0x53	; 83
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 64       	ori	r24, 0x40	; 64
    1d6a:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    1d6c:	a3 e5       	ldi	r26, 0x53	; 83
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e3 e5       	ldi	r30, 0x53	; 83
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	87 7f       	andi	r24, 0xF7	; 247
    1d78:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1d7a:	19 82       	std	Y+1, r1	; 0x01
    1d7c:	7a c0       	rjmp	.+244    	; 0x1e72 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	81 f4       	brne	.+32     	; 0x1da4 <enu_SetTimerMode+0xb4>
            {
                //Bits contain 10
                TCCR0 &= ~(1 << TCCR0_WGM00);
    1d84:	a3 e5       	ldi	r26, 0x53	; 83
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e3 e5       	ldi	r30, 0x53	; 83
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 7b       	andi	r24, 0xBF	; 191
    1d90:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    1d92:	a3 e5       	ldi	r26, 0x53	; 83
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e3 e5       	ldi	r30, 0x53	; 83
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	88 60       	ori	r24, 0x08	; 8
    1d9e:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1da0:	19 82       	std	Y+1, r1	; 0x01
    1da2:	67 c0       	rjmp	.+206    	; 0x1e72 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	81 f4       	brne	.+32     	; 0x1dca <enu_SetTimerMode+0xda>
            {
                //Bits contain 11
                TCCR0 |= (1 << TCCR0_WGM00);
    1daa:	a3 e5       	ldi	r26, 0x53	; 83
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e3 e5       	ldi	r30, 0x53	; 83
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	80 64       	ori	r24, 0x40	; 64
    1db6:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    1db8:	a3 e5       	ldi	r26, 0x53	; 83
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e3 e5       	ldi	r30, 0x53	; 83
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	88 60       	ori	r24, 0x08	; 8
    1dc4:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1dc6:	19 82       	std	Y+1, r1	; 0x01
    1dc8:	54 c0       	rjmp	.+168    	; 0x1e72 <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	51 c0       	rjmp	.+162    	; 0x1e72 <enu_SetTimerMode+0x182>
        break;
     
        case TIMER_2:
        {
            
            if(Copy_u8_TimerMode == TIMER_NORMAL)
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	88 23       	and	r24, r24
    1dd4:	81 f4       	brne	.+32     	; 0x1df6 <enu_SetTimerMode+0x106>
            {
                //Bits contain 00
                TCCR2 &= ~(1 << TCCR2_WGM20);
    1dd6:	a5 e4       	ldi	r26, 0x45	; 69
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e5 e4       	ldi	r30, 0x45	; 69
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8f 7b       	andi	r24, 0xBF	; 191
    1de2:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    1de4:	a5 e4       	ldi	r26, 0x45	; 69
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e5 e4       	ldi	r30, 0x45	; 69
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	87 7f       	andi	r24, 0xF7	; 247
    1df0:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1df2:	19 82       	std	Y+1, r1	; 0x01
    1df4:	3e c0       	rjmp	.+124    	; 0x1e72 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	82 30       	cpi	r24, 0x02	; 2
    1dfa:	81 f4       	brne	.+32     	; 0x1e1c <enu_SetTimerMode+0x12c>
            {
                //Bits contain 01
                TCCR2 |= (1 << TCCR2_WGM20);
    1dfc:	a5 e4       	ldi	r26, 0x45	; 69
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e5 e4       	ldi	r30, 0x45	; 69
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	80 64       	ori	r24, 0x40	; 64
    1e08:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    1e0a:	a5 e4       	ldi	r26, 0x45	; 69
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e5 e4       	ldi	r30, 0x45	; 69
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	87 7f       	andi	r24, 0xF7	; 247
    1e16:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1e18:	19 82       	std	Y+1, r1	; 0x01
    1e1a:	2b c0       	rjmp	.+86     	; 0x1e72 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	81 f4       	brne	.+32     	; 0x1e42 <enu_SetTimerMode+0x152>
            {
                //Bits contain 10
                TCCR2 &= ~(1 << TCCR2_WGM20);
    1e22:	a5 e4       	ldi	r26, 0x45	; 69
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e5 e4       	ldi	r30, 0x45	; 69
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8f 7b       	andi	r24, 0xBF	; 191
    1e2e:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    1e30:	a5 e4       	ldi	r26, 0x45	; 69
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e5 e4       	ldi	r30, 0x45	; 69
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	88 60       	ori	r24, 0x08	; 8
    1e3c:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1e3e:	19 82       	std	Y+1, r1	; 0x01
    1e40:	18 c0       	rjmp	.+48     	; 0x1e72 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	83 30       	cpi	r24, 0x03	; 3
    1e46:	81 f4       	brne	.+32     	; 0x1e68 <enu_SetTimerMode+0x178>
            {
                //Bits contain 11
                TCCR2 |= (1 << TCCR2_WGM20);
    1e48:	a5 e4       	ldi	r26, 0x45	; 69
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e5 e4       	ldi	r30, 0x45	; 69
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	80 64       	ori	r24, 0x40	; 64
    1e54:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    1e56:	a5 e4       	ldi	r26, 0x45	; 69
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e5 e4       	ldi	r30, 0x45	; 69
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	88 60       	ori	r24, 0x08	; 8
    1e62:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1e64:	19 82       	std	Y+1, r1	; 0x01
    1e66:	05 c0       	rjmp	.+10     	; 0x1e72 <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <enu_SetTimerMode+0x182>
        
     


        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <enu_SetClockSelection>:

static ErrorState_t enu_SetClockSelection(u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	29 97       	sbiw	r28, 0x09	; 9
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	8a 83       	std	Y+2, r24	; 0x02
    1e9a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_TimerNumber)
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	39 87       	std	Y+9, r19	; 0x09
    1ea8:	28 87       	std	Y+8, r18	; 0x08
    1eaa:	88 85       	ldd	r24, Y+8	; 0x08
    1eac:	99 85       	ldd	r25, Y+9	; 0x09
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <enu_SetClockSelection+0x32>
    1eb4:	03 c2       	rjmp	.+1030   	; 0x22bc <enu_SetClockSelection+0x438>
    1eb6:	28 85       	ldd	r18, Y+8	; 0x08
    1eb8:	39 85       	ldd	r19, Y+9	; 0x09
    1eba:	22 30       	cpi	r18, 0x02	; 2
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <enu_SetClockSelection+0x3e>
    1ec0:	00 c1       	rjmp	.+512    	; 0x20c2 <enu_SetClockSelection+0x23e>
    1ec2:	88 85       	ldd	r24, Y+8	; 0x08
    1ec4:	99 85       	ldd	r25, Y+9	; 0x09
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <enu_SetClockSelection+0x48>
    1eca:	f6 c1       	rjmp	.+1004   	; 0x22b8 <enu_SetClockSelection+0x434>
    {
        case TIMER_0:
        {
            switch (Copy_u8_ClockSelection)
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	3f 83       	std	Y+7, r19	; 0x07
    1ed4:	2e 83       	std	Y+6, r18	; 0x06
    1ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eda:	84 30       	cpi	r24, 0x04	; 4
    1edc:	91 05       	cpc	r25, r1
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <enu_SetClockSelection+0x5e>
    1ee0:	7a c0       	rjmp	.+244    	; 0x1fd6 <enu_SetClockSelection+0x152>
    1ee2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ee4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ee6:	25 30       	cpi	r18, 0x05	; 5
    1ee8:	31 05       	cpc	r19, r1
    1eea:	8c f4       	brge	.+34     	; 0x1f0e <enu_SetClockSelection+0x8a>
    1eec:	8e 81       	ldd	r24, Y+6	; 0x06
    1eee:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <enu_SetClockSelection+0x74>
    1ef6:	41 c0       	rjmp	.+130    	; 0x1f7a <enu_SetClockSelection+0xf6>
    1ef8:	2e 81       	ldd	r18, Y+6	; 0x06
    1efa:	3f 81       	ldd	r19, Y+7	; 0x07
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	31 05       	cpc	r19, r1
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <enu_SetClockSelection+0x80>
    1f02:	52 c0       	rjmp	.+164    	; 0x1fa8 <enu_SetClockSelection+0x124>
    1f04:	8e 81       	ldd	r24, Y+6	; 0x06
    1f06:	9f 81       	ldd	r25, Y+7	; 0x07
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	01 f1       	breq	.+64     	; 0x1f4c <enu_SetClockSelection+0xc8>
    1f0c:	d7 c0       	rjmp	.+430    	; 0x20bc <enu_SetClockSelection+0x238>
    1f0e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f10:	3f 81       	ldd	r19, Y+7	; 0x07
    1f12:	27 30       	cpi	r18, 0x07	; 7
    1f14:	31 05       	cpc	r19, r1
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <enu_SetClockSelection+0x96>
    1f18:	8c c0       	rjmp	.+280    	; 0x2032 <enu_SetClockSelection+0x1ae>
    1f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1e:	88 30       	cpi	r24, 0x08	; 8
    1f20:	91 05       	cpc	r25, r1
    1f22:	3c f4       	brge	.+14     	; 0x1f32 <enu_SetClockSelection+0xae>
    1f24:	2e 81       	ldd	r18, Y+6	; 0x06
    1f26:	3f 81       	ldd	r19, Y+7	; 0x07
    1f28:	26 30       	cpi	r18, 0x06	; 6
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <enu_SetClockSelection+0xac>
    1f2e:	6a c0       	rjmp	.+212    	; 0x2004 <enu_SetClockSelection+0x180>
    1f30:	c5 c0       	rjmp	.+394    	; 0x20bc <enu_SetClockSelection+0x238>
    1f32:	8e 81       	ldd	r24, Y+6	; 0x06
    1f34:	9f 81       	ldd	r25, Y+7	; 0x07
    1f36:	88 30       	cpi	r24, 0x08	; 8
    1f38:	91 05       	cpc	r25, r1
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <enu_SetClockSelection+0xba>
    1f3c:	91 c0       	rjmp	.+290    	; 0x2060 <enu_SetClockSelection+0x1dc>
    1f3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f40:	3f 81       	ldd	r19, Y+7	; 0x07
    1f42:	29 30       	cpi	r18, 0x09	; 9
    1f44:	31 05       	cpc	r19, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <enu_SetClockSelection+0xc6>
    1f48:	a2 c0       	rjmp	.+324    	; 0x208e <enu_SetClockSelection+0x20a>
    1f4a:	b8 c0       	rjmp	.+368    	; 0x20bc <enu_SetClockSelection+0x238>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR0 &= ~ (1 << TCCR0_CS00);
    1f4c:	a3 e5       	ldi	r26, 0x53	; 83
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e3 e5       	ldi	r30, 0x53	; 83
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	8e 7f       	andi	r24, 0xFE	; 254
    1f58:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1f5a:	a3 e5       	ldi	r26, 0x53	; 83
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e3 e5       	ldi	r30, 0x53	; 83
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	8d 7f       	andi	r24, 0xFD	; 253
    1f66:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1f68:	a3 e5       	ldi	r26, 0x53	; 83
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e3 e5       	ldi	r30, 0x53	; 83
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	8b 7f       	andi	r24, 0xFB	; 251
    1f74:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1f76:	19 82       	std	Y+1, r1	; 0x01
    1f78:	a1 c1       	rjmp	.+834    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR0 |= (1 << TCCR0_CS00);
    1f7a:	a3 e5       	ldi	r26, 0x53	; 83
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e3 e5       	ldi	r30, 0x53	; 83
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	81 60       	ori	r24, 0x01	; 1
    1f86:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1f88:	a3 e5       	ldi	r26, 0x53	; 83
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e3 e5       	ldi	r30, 0x53	; 83
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	8d 7f       	andi	r24, 0xFD	; 253
    1f94:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1f96:	a3 e5       	ldi	r26, 0x53	; 83
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e3 e5       	ldi	r30, 0x53	; 83
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8b 7f       	andi	r24, 0xFB	; 251
    1fa2:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1fa4:	19 82       	std	Y+1, r1	; 0x01
    1fa6:	8a c1       	rjmp	.+788    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1fa8:	a3 e5       	ldi	r26, 0x53	; 83
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e3 e5       	ldi	r30, 0x53	; 83
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8e 7f       	andi	r24, 0xFE	; 254
    1fb4:	8c 93       	st	X, r24
                    TCCR0 |= (1  << TCCR0_CS01);
    1fb6:	a3 e5       	ldi	r26, 0x53	; 83
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e3 e5       	ldi	r30, 0x53	; 83
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	82 60       	ori	r24, 0x02	; 2
    1fc2:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS02);
    1fc4:	a3 e5       	ldi	r26, 0x53	; 83
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e3 e5       	ldi	r30, 0x53	; 83
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	8b 7f       	andi	r24, 0xFB	; 251
    1fd0:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1fd2:	19 82       	std	Y+1, r1	; 0x01
    1fd4:	73 c1       	rjmp	.+742    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 011
                    TCCR0 |= (1 << TCCR0_CS00);
    1fd6:	a3 e5       	ldi	r26, 0x53	; 83
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e3 e5       	ldi	r30, 0x53	; 83
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	81 60       	ori	r24, 0x01	; 1
    1fe2:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1fe4:	a3 e5       	ldi	r26, 0x53	; 83
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e3 e5       	ldi	r30, 0x53	; 83
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	82 60       	ori	r24, 0x02	; 2
    1ff0:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1ff2:	a3 e5       	ldi	r26, 0x53	; 83
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e3 e5       	ldi	r30, 0x53	; 83
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8b 7f       	andi	r24, 0xFB	; 251
    1ffe:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2000:	19 82       	std	Y+1, r1	; 0x01
    2002:	5c c1       	rjmp	.+696    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 100
                    TCCR0 &= ~(1 << TCCR0_CS00);
    2004:	a3 e5       	ldi	r26, 0x53	; 83
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e3 e5       	ldi	r30, 0x53	; 83
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	8e 7f       	andi	r24, 0xFE	; 254
    2010:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS01);
    2012:	a3 e5       	ldi	r26, 0x53	; 83
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e3 e5       	ldi	r30, 0x53	; 83
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	8d 7f       	andi	r24, 0xFD	; 253
    201e:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    2020:	a3 e5       	ldi	r26, 0x53	; 83
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e3 e5       	ldi	r30, 0x53	; 83
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	84 60       	ori	r24, 0x04	; 4
    202c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    202e:	19 82       	std	Y+1, r1	; 0x01
    2030:	45 c1       	rjmp	.+650    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 101
                    TCCR0 |= (1 << TCCR0_CS00);
    2032:	a3 e5       	ldi	r26, 0x53	; 83
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e3 e5       	ldi	r30, 0x53	; 83
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	81 60       	ori	r24, 0x01	; 1
    203e:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    2040:	a3 e5       	ldi	r26, 0x53	; 83
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e3 e5       	ldi	r30, 0x53	; 83
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	8d 7f       	andi	r24, 0xFD	; 253
    204c:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    204e:	a3 e5       	ldi	r26, 0x53	; 83
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e3 e5       	ldi	r30, 0x53	; 83
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	84 60       	ori	r24, 0x04	; 4
    205a:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    205c:	19 82       	std	Y+1, r1	; 0x01
    205e:	2e c1       	rjmp	.+604    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_FALLING_EGDE:
                {
                    //Bits contain 110
                    TCCR0 &= ~(1 << TCCR0_CS00);
    2060:	a3 e5       	ldi	r26, 0x53	; 83
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e3 e5       	ldi	r30, 0x53	; 83
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	8e 7f       	andi	r24, 0xFE	; 254
    206c:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    206e:	a3 e5       	ldi	r26, 0x53	; 83
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e3 e5       	ldi	r30, 0x53	; 83
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	82 60       	ori	r24, 0x02	; 2
    207a:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    207c:	a3 e5       	ldi	r26, 0x53	; 83
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e3 e5       	ldi	r30, 0x53	; 83
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	84 60       	ori	r24, 0x04	; 4
    2088:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    208a:	19 82       	std	Y+1, r1	; 0x01
    208c:	17 c1       	rjmp	.+558    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_RISING_EGDE:
                {
                    //Bits contain 111
                    TCCR0 |= (1 << TCCR0_CS00);
    208e:	a3 e5       	ldi	r26, 0x53	; 83
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e3 e5       	ldi	r30, 0x53	; 83
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	81 60       	ori	r24, 0x01	; 1
    209a:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    209c:	a3 e5       	ldi	r26, 0x53	; 83
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e3 e5       	ldi	r30, 0x53	; 83
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	82 60       	ori	r24, 0x02	; 2
    20a8:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    20aa:	a3 e5       	ldi	r26, 0x53	; 83
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e3 e5       	ldi	r30, 0x53	; 83
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	84 60       	ori	r24, 0x04	; 4
    20b6:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    20b8:	19 82       	std	Y+1, r1	; 0x01
    20ba:	00 c1       	rjmp	.+512    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	fd c0       	rjmp	.+506    	; 0x22bc <enu_SetClockSelection+0x438>
    
        case TIMER_2:
        {
            //Choosing I/O clock each time 
            //Bit contains 0
            ASSR &= ~( 1 << ASSR_AS2);
    20c2:	a2 e4       	ldi	r26, 0x42	; 66
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e2 e4       	ldi	r30, 0x42	; 66
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	87 7f       	andi	r24, 0xF7	; 247
    20ce:	8c 93       	st	X, r24
            
            switch (Copy_u8_ClockSelection)
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	3d 83       	std	Y+5, r19	; 0x05
    20d8:	2c 83       	std	Y+4, r18	; 0x04
    20da:	8c 81       	ldd	r24, Y+4	; 0x04
    20dc:	9d 81       	ldd	r25, Y+5	; 0x05
    20de:	83 30       	cpi	r24, 0x03	; 3
    20e0:	91 05       	cpc	r25, r1
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <enu_SetClockSelection+0x262>
    20e4:	73 c0       	rjmp	.+230    	; 0x21cc <enu_SetClockSelection+0x348>
    20e6:	2c 81       	ldd	r18, Y+4	; 0x04
    20e8:	3d 81       	ldd	r19, Y+5	; 0x05
    20ea:	24 30       	cpi	r18, 0x04	; 4
    20ec:	31 05       	cpc	r19, r1
    20ee:	84 f4       	brge	.+32     	; 0x2110 <enu_SetClockSelection+0x28c>
    20f0:	8c 81       	ldd	r24, Y+4	; 0x04
    20f2:	9d 81       	ldd	r25, Y+5	; 0x05
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	91 05       	cpc	r25, r1
    20f8:	d9 f1       	breq	.+118    	; 0x2170 <enu_SetClockSelection+0x2ec>
    20fa:	2c 81       	ldd	r18, Y+4	; 0x04
    20fc:	3d 81       	ldd	r19, Y+5	; 0x05
    20fe:	22 30       	cpi	r18, 0x02	; 2
    2100:	31 05       	cpc	r19, r1
    2102:	0c f0       	brlt	.+2      	; 0x2106 <enu_SetClockSelection+0x282>
    2104:	4c c0       	rjmp	.+152    	; 0x219e <enu_SetClockSelection+0x31a>
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
    2108:	9d 81       	ldd	r25, Y+5	; 0x05
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	d1 f0       	breq	.+52     	; 0x2142 <enu_SetClockSelection+0x2be>
    210e:	d1 c0       	rjmp	.+418    	; 0x22b2 <enu_SetClockSelection+0x42e>
    2110:	2c 81       	ldd	r18, Y+4	; 0x04
    2112:	3d 81       	ldd	r19, Y+5	; 0x05
    2114:	25 30       	cpi	r18, 0x05	; 5
    2116:	31 05       	cpc	r19, r1
    2118:	09 f4       	brne	.+2      	; 0x211c <enu_SetClockSelection+0x298>
    211a:	86 c0       	rjmp	.+268    	; 0x2228 <enu_SetClockSelection+0x3a4>
    211c:	8c 81       	ldd	r24, Y+4	; 0x04
    211e:	9d 81       	ldd	r25, Y+5	; 0x05
    2120:	85 30       	cpi	r24, 0x05	; 5
    2122:	91 05       	cpc	r25, r1
    2124:	0c f4       	brge	.+2      	; 0x2128 <enu_SetClockSelection+0x2a4>
    2126:	69 c0       	rjmp	.+210    	; 0x21fa <enu_SetClockSelection+0x376>
    2128:	2c 81       	ldd	r18, Y+4	; 0x04
    212a:	3d 81       	ldd	r19, Y+5	; 0x05
    212c:	26 30       	cpi	r18, 0x06	; 6
    212e:	31 05       	cpc	r19, r1
    2130:	09 f4       	brne	.+2      	; 0x2134 <enu_SetClockSelection+0x2b0>
    2132:	91 c0       	rjmp	.+290    	; 0x2256 <enu_SetClockSelection+0x3d2>
    2134:	8c 81       	ldd	r24, Y+4	; 0x04
    2136:	9d 81       	ldd	r25, Y+5	; 0x05
    2138:	87 30       	cpi	r24, 0x07	; 7
    213a:	91 05       	cpc	r25, r1
    213c:	09 f4       	brne	.+2      	; 0x2140 <enu_SetClockSelection+0x2bc>
    213e:	a2 c0       	rjmp	.+324    	; 0x2284 <enu_SetClockSelection+0x400>
    2140:	b8 c0       	rjmp	.+368    	; 0x22b2 <enu_SetClockSelection+0x42e>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR2 &= ~ (1 << TCCR2_CS20);
    2142:	a5 e4       	ldi	r26, 0x45	; 69
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e5 e4       	ldi	r30, 0x45	; 69
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	8e 7f       	andi	r24, 0xFE	; 254
    214e:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    2150:	a5 e4       	ldi	r26, 0x45	; 69
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e5 e4       	ldi	r30, 0x45	; 69
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	8d 7f       	andi	r24, 0xFD	; 253
    215c:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    215e:	a5 e4       	ldi	r26, 0x45	; 69
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e5 e4       	ldi	r30, 0x45	; 69
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	8b 7f       	andi	r24, 0xFB	; 251
    216a:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    216c:	19 82       	std	Y+1, r1	; 0x01
    216e:	a6 c0       	rjmp	.+332    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR2 |= (1 << TCCR2_CS20);
    2170:	a5 e4       	ldi	r26, 0x45	; 69
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e5 e4       	ldi	r30, 0x45	; 69
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	81 60       	ori	r24, 0x01	; 1
    217c:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    217e:	a5 e4       	ldi	r26, 0x45	; 69
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e5 e4       	ldi	r30, 0x45	; 69
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	8d 7f       	andi	r24, 0xFD	; 253
    218a:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    218c:	a5 e4       	ldi	r26, 0x45	; 69
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e5 e4       	ldi	r30, 0x45	; 69
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	8b 7f       	andi	r24, 0xFB	; 251
    2198:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    219a:	19 82       	std	Y+1, r1	; 0x01
    219c:	8f c0       	rjmp	.+286    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR2 &= ~(1 << TCCR2_CS20);
    219e:	a5 e4       	ldi	r26, 0x45	; 69
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e5 e4       	ldi	r30, 0x45	; 69
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	8e 7f       	andi	r24, 0xFE	; 254
    21aa:	8c 93       	st	X, r24
                    TCCR2 |= (1  << TCCR2_CS21);
    21ac:	a5 e4       	ldi	r26, 0x45	; 69
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e5 e4       	ldi	r30, 0x45	; 69
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	82 60       	ori	r24, 0x02	; 2
    21b8:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS22);
    21ba:	a5 e4       	ldi	r26, 0x45	; 69
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e5 e4       	ldi	r30, 0x45	; 69
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	8b 7f       	andi	r24, 0xFB	; 251
    21c6:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    21c8:	19 82       	std	Y+1, r1	; 0x01
    21ca:	78 c0       	rjmp	.+240    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_32:
                {
                    //Bits contain 011
                    TCCR2 |= (1 << TCCR2_CS20);
    21cc:	a5 e4       	ldi	r26, 0x45	; 69
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e5 e4       	ldi	r30, 0x45	; 69
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	81 60       	ori	r24, 0x01	; 1
    21d8:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    21da:	a5 e4       	ldi	r26, 0x45	; 69
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e5 e4       	ldi	r30, 0x45	; 69
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	82 60       	ori	r24, 0x02	; 2
    21e6:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    21e8:	a5 e4       	ldi	r26, 0x45	; 69
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e5 e4       	ldi	r30, 0x45	; 69
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8b 7f       	andi	r24, 0xFB	; 251
    21f4:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    21f6:	19 82       	std	Y+1, r1	; 0x01
    21f8:	61 c0       	rjmp	.+194    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 100
                    TCCR2 &= ~(1 << TCCR2_CS20);
    21fa:	a5 e4       	ldi	r26, 0x45	; 69
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e5 e4       	ldi	r30, 0x45	; 69
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	8e 7f       	andi	r24, 0xFE	; 254
    2206:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS21);
    2208:	a5 e4       	ldi	r26, 0x45	; 69
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e5 e4       	ldi	r30, 0x45	; 69
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	8d 7f       	andi	r24, 0xFD	; 253
    2214:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    2216:	a5 e4       	ldi	r26, 0x45	; 69
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e5 e4       	ldi	r30, 0x45	; 69
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	84 60       	ori	r24, 0x04	; 4
    2222:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2224:	19 82       	std	Y+1, r1	; 0x01
    2226:	4a c0       	rjmp	.+148    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_128:
                {
                    //Bits contain 101
                    TCCR2 |= (1 << TCCR2_CS20);
    2228:	a5 e4       	ldi	r26, 0x45	; 69
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e5 e4       	ldi	r30, 0x45	; 69
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	81 60       	ori	r24, 0x01	; 1
    2234:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    2236:	a5 e4       	ldi	r26, 0x45	; 69
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e5 e4       	ldi	r30, 0x45	; 69
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	8d 7f       	andi	r24, 0xFD	; 253
    2242:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    2244:	a5 e4       	ldi	r26, 0x45	; 69
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e5 e4       	ldi	r30, 0x45	; 69
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	84 60       	ori	r24, 0x04	; 4
    2250:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2252:	19 82       	std	Y+1, r1	; 0x01
    2254:	33 c0       	rjmp	.+102    	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 110
                    TCCR2 &= ~(1 << TCCR2_CS20);
    2256:	a5 e4       	ldi	r26, 0x45	; 69
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e5 e4       	ldi	r30, 0x45	; 69
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	8e 7f       	andi	r24, 0xFE	; 254
    2262:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    2264:	a5 e4       	ldi	r26, 0x45	; 69
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e5 e4       	ldi	r30, 0x45	; 69
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	82 60       	ori	r24, 0x02	; 2
    2270:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    2272:	a5 e4       	ldi	r26, 0x45	; 69
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e5 e4       	ldi	r30, 0x45	; 69
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	84 60       	ori	r24, 0x04	; 4
    227e:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2280:	19 82       	std	Y+1, r1	; 0x01
    2282:	1c c0       	rjmp	.+56     	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 111
                    TCCR2 |= (1 << TCCR2_CS20);
    2284:	a5 e4       	ldi	r26, 0x45	; 69
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e5 e4       	ldi	r30, 0x45	; 69
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	81 60       	ori	r24, 0x01	; 1
    2290:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    2292:	a5 e4       	ldi	r26, 0x45	; 69
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e5 e4       	ldi	r30, 0x45	; 69
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	82 60       	ori	r24, 0x02	; 2
    229e:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    22a0:	a5 e4       	ldi	r26, 0x45	; 69
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e5 e4       	ldi	r30, 0x45	; 69
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	84 60       	ori	r24, 0x04	; 4
    22ac:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    22ae:	19 82       	std	Y+1, r1	; 0x01
    22b0:	05 c0       	rjmp	.+10     	; 0x22bc <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    22b2:	82 e0       	ldi	r24, 0x02	; 2
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <enu_SetClockSelection+0x438>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return Local_u8_ErrorFlag;
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22be:	29 96       	adiw	r28, 0x09	; 9
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <enu_SetInterruptMode>:

static ErrorState_t enu_SetInterruptMode(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_InterruptMode)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <enu_SetInterruptMode+0x6>
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <enu_SetInterruptMode+0x8>
    22d8:	00 d0       	rcall	.+0      	; 0x22da <enu_SetInterruptMode+0xa>
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	8a 83       	std	Y+2, r24	; 0x02
    22e0:	6b 83       	std	Y+3, r22	; 0x03
    22e2:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_TimerNumber)
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	3e 83       	std	Y+6, r19	; 0x06
    22f0:	2d 83       	std	Y+5, r18	; 0x05
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	81 30       	cpi	r24, 0x01	; 1
    22f8:	91 05       	cpc	r25, r1
    22fa:	09 f4       	brne	.+2      	; 0x22fe <enu_SetInterruptMode+0x2e>
    22fc:	7b c0       	rjmp	.+246    	; 0x23f4 <enu_SetInterruptMode+0x124>
    22fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2300:	3e 81       	ldd	r19, Y+6	; 0x06
    2302:	22 30       	cpi	r18, 0x02	; 2
    2304:	31 05       	cpc	r19, r1
    2306:	a9 f1       	breq	.+106    	; 0x2372 <enu_SetInterruptMode+0xa2>
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	09 f0       	breq	.+2      	; 0x2312 <enu_SetInterruptMode+0x42>
    2310:	6f c0       	rjmp	.+222    	; 0x23f0 <enu_SetInterruptMode+0x120>
    {
        case TIMER_0:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	88 23       	and	r24, r24
    2316:	89 f4       	brne	.+34     	; 0x233a <enu_SetInterruptMode+0x6a>
            {
                //Clearing bit 0 (TOIE0)
                TIMSK &= (0xFE);
    2318:	a9 e5       	ldi	r26, 0x59	; 89
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e9 e5       	ldi	r30, 0x59	; 89
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	8e 7f       	andi	r24, 0xFE	; 254
    2324:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE0);
    2326:	a9 e5       	ldi	r26, 0x59	; 89
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e9 e5       	ldi	r30, 0x59	; 89
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	90 81       	ld	r25, Z
    2330:	8c 81       	ldd	r24, Y+4	; 0x04
    2332:	89 2b       	or	r24, r25
    2334:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2336:	19 82       	std	Y+1, r1	; 0x01
    2338:	5d c0       	rjmp	.+186    	; 0x23f4 <enu_SetInterruptMode+0x124>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	b1 f4       	brne	.+44     	; 0x236c <enu_SetInterruptMode+0x9c>
            {
                //Clearing bit 1 (OCIE0)
                TIMSK &= (0xFD);
    2340:	a9 e5       	ldi	r26, 0x59	; 89
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e9 e5       	ldi	r30, 0x59	; 89
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	8d 7f       	andi	r24, 0xFD	; 253
    234c:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE0);
    234e:	a9 e5       	ldi	r26, 0x59	; 89
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e9 e5       	ldi	r30, 0x59	; 89
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	28 2f       	mov	r18, r24
    235a:	8c 81       	ldd	r24, Y+4	; 0x04
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	82 2b       	or	r24, r18
    2366:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2368:	19 82       	std	Y+1, r1	; 0x01
    236a:	44 c0       	rjmp	.+136    	; 0x23f4 <enu_SetInterruptMode+0x124>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	41 c0       	rjmp	.+130    	; 0x23f4 <enu_SetInterruptMode+0x124>
            break;
        }

        case TIMER_2:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	88 23       	and	r24, r24
    2376:	e9 f4       	brne	.+58     	; 0x23b2 <enu_SetInterruptMode+0xe2>
            {
                //Clearing bit 6 (TOIE2)
                TIMSK &= (0xBF);
    2378:	a9 e5       	ldi	r26, 0x59	; 89
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e9 e5       	ldi	r30, 0x59	; 89
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	8f 7b       	andi	r24, 0xBF	; 191
    2384:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE2);
    2386:	a9 e5       	ldi	r26, 0x59	; 89
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e9 e5       	ldi	r30, 0x59	; 89
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	28 2f       	mov	r18, r24
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	00 24       	eor	r0, r0
    239a:	96 95       	lsr	r25
    239c:	87 95       	ror	r24
    239e:	07 94       	ror	r0
    23a0:	96 95       	lsr	r25
    23a2:	87 95       	ror	r24
    23a4:	07 94       	ror	r0
    23a6:	98 2f       	mov	r25, r24
    23a8:	80 2d       	mov	r24, r0
    23aa:	82 2b       	or	r24, r18
    23ac:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    23ae:	19 82       	std	Y+1, r1	; 0x01
    23b0:	21 c0       	rjmp	.+66     	; 0x23f4 <enu_SetInterruptMode+0x124>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	c9 f4       	brne	.+50     	; 0x23ea <enu_SetInterruptMode+0x11a>
            {
                //Clearing bit 7 (OCIE2)
                TIMSK &= (0x7F);
    23b8:	a9 e5       	ldi	r26, 0x59	; 89
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e9 e5       	ldi	r30, 0x59	; 89
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8f 77       	andi	r24, 0x7F	; 127
    23c4:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE2);
    23c6:	a9 e5       	ldi	r26, 0x59	; 89
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e9 e5       	ldi	r30, 0x59	; 89
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	28 2f       	mov	r18, r24
    23d2:	8c 81       	ldd	r24, Y+4	; 0x04
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	96 95       	lsr	r25
    23da:	98 2f       	mov	r25, r24
    23dc:	88 27       	eor	r24, r24
    23de:	97 95       	ror	r25
    23e0:	87 95       	ror	r24
    23e2:	82 2b       	or	r24, r18
    23e4:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    23e6:	19 82       	std	Y+1, r1	; 0x01
    23e8:	05 c0       	rjmp	.+10     	; 0x23f4 <enu_SetInterruptMode+0x124>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <enu_SetInterruptMode+0x124>
                        
            break;
        }

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    23f0:	82 e0       	ldi	r24, 0x02	; 2
    23f2:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f6:	26 96       	adiw	r28, 0x06	; 6
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <enu_SetOCxBehavior>:

static ErrorState_t enu_SetOCxBehavior(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_OCxPinBehavior)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	00 d0       	rcall	.+0      	; 0x240e <enu_SetOCxBehavior+0x6>
    240e:	00 d0       	rcall	.+0      	; 0x2410 <enu_SetOCxBehavior+0x8>
    2410:	00 d0       	rcall	.+0      	; 0x2412 <enu_SetOCxBehavior+0xa>
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	8a 83       	std	Y+2, r24	; 0x02
    2418:	6b 83       	std	Y+3, r22	; 0x03
    241a:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	3e 83       	std	Y+6, r19	; 0x06
    2428:	2d 83       	std	Y+5, r18	; 0x05
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
    242c:	9e 81       	ldd	r25, Y+6	; 0x06
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	91 05       	cpc	r25, r1
    2432:	09 f4       	brne	.+2      	; 0x2436 <enu_SetOCxBehavior+0x2e>
    2434:	d3 c0       	rjmp	.+422    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
    2436:	2d 81       	ldd	r18, Y+5	; 0x05
    2438:	3e 81       	ldd	r19, Y+6	; 0x06
    243a:	22 30       	cpi	r18, 0x02	; 2
    243c:	31 05       	cpc	r19, r1
    243e:	09 f4       	brne	.+2      	; 0x2442 <enu_SetOCxBehavior+0x3a>
    2440:	68 c0       	rjmp	.+208    	; 0x2512 <enu_SetOCxBehavior+0x10a>
    2442:	8d 81       	ldd	r24, Y+5	; 0x05
    2444:	9e 81       	ldd	r25, Y+6	; 0x06
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	09 f0       	breq	.+2      	; 0x244c <enu_SetOCxBehavior+0x44>
    244a:	c6 c0       	rjmp	.+396    	; 0x25d8 <enu_SetOCxBehavior+0x1d0>
    {
        case TIMER_0:
        {   
            //Clearing bits 5 and 4
            TCCR0 &= (0xCF);
    244c:	a3 e5       	ldi	r26, 0x53	; 83
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e3 e5       	ldi	r30, 0x53	; 83
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	8f 7c       	andi	r24, 0xCF	; 207
    2458:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	88 23       	and	r24, r24
    245e:	11 f4       	brne	.+4      	; 0x2464 <enu_SetOCxBehavior+0x5c>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    2460:	19 82       	std	Y+1, r1	; 0x01
    2462:	bc c0       	rjmp	.+376    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	88 23       	and	r24, r24
    2468:	19 f0       	breq	.+6      	; 0x2470 <enu_SetOCxBehavior+0x68>
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	81 30       	cpi	r24, 0x01	; 1
    246e:	39 f5       	brne	.+78     	; 0x24be <enu_SetOCxBehavior+0xb6>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    2470:	8c 81       	ldd	r24, Y+4	; 0x04
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	49 f4       	brne	.+18     	; 0x2488 <enu_SetOCxBehavior+0x80>
                {
                    //Bits contain 01
                    TCCR0 |= (1 << TCCR0_COM00);
    2476:	a3 e5       	ldi	r26, 0x53	; 83
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e3 e5       	ldi	r30, 0x53	; 83
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	80 61       	ori	r24, 0x10	; 16
    2482:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2484:	19 82       	std	Y+1, r1	; 0x01
    2486:	aa c0       	rjmp	.+340    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	82 30       	cpi	r24, 0x02	; 2
    248c:	49 f4       	brne	.+18     	; 0x24a0 <enu_SetOCxBehavior+0x98>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    248e:	a3 e5       	ldi	r26, 0x53	; 83
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e3 e5       	ldi	r30, 0x53	; 83
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	80 62       	ori	r24, 0x20	; 32
    249a:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    249c:	19 82       	std	Y+1, r1	; 0x01
    249e:	9e c0       	rjmp	.+316    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    24a0:	8c 81       	ldd	r24, Y+4	; 0x04
    24a2:	83 30       	cpi	r24, 0x03	; 3
    24a4:	49 f4       	brne	.+18     	; 0x24b8 <enu_SetOCxBehavior+0xb0>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    24a6:	a3 e5       	ldi	r26, 0x53	; 83
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e3 e5       	ldi	r30, 0x53	; 83
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	80 63       	ori	r24, 0x30	; 48
    24b2:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    24b4:	19 82       	std	Y+1, r1	; 0x01
    24b6:	92 c0       	rjmp	.+292    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    24b8:	82 e0       	ldi	r24, 0x02	; 2
    24ba:	89 83       	std	Y+1, r24	; 0x01
    24bc:	8f c0       	rjmp	.+286    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	82 30       	cpi	r24, 0x02	; 2
    24c2:	19 f0       	breq	.+6      	; 0x24ca <enu_SetOCxBehavior+0xc2>
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	83 30       	cpi	r24, 0x03	; 3
    24c8:	09 f5       	brne	.+66     	; 0x250c <enu_SetOCxBehavior+0x104>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    24ca:	8c 81       	ldd	r24, Y+4	; 0x04
    24cc:	84 30       	cpi	r24, 0x04	; 4
    24ce:	19 f0       	breq	.+6      	; 0x24d6 <enu_SetOCxBehavior+0xce>
    24d0:	8c 81       	ldd	r24, Y+4	; 0x04
    24d2:	86 30       	cpi	r24, 0x06	; 6
    24d4:	49 f4       	brne	.+18     	; 0x24e8 <enu_SetOCxBehavior+0xe0>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    24d6:	a3 e5       	ldi	r26, 0x53	; 83
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e3 e5       	ldi	r30, 0x53	; 83
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	80 62       	ori	r24, 0x20	; 32
    24e2:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    24e4:	19 82       	std	Y+1, r1	; 0x01
    24e6:	7a c0       	rjmp	.+244    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    24e8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ea:	85 30       	cpi	r24, 0x05	; 5
    24ec:	19 f0       	breq	.+6      	; 0x24f4 <enu_SetOCxBehavior+0xec>
    24ee:	8c 81       	ldd	r24, Y+4	; 0x04
    24f0:	87 30       	cpi	r24, 0x07	; 7
    24f2:	49 f4       	brne	.+18     	; 0x2506 <enu_SetOCxBehavior+0xfe>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    24f4:	a3 e5       	ldi	r26, 0x53	; 83
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e3 e5       	ldi	r30, 0x53	; 83
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	80 63       	ori	r24, 0x30	; 48
    2500:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2502:	19 82       	std	Y+1, r1	; 0x01
    2504:	6b c0       	rjmp	.+214    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2506:	82 e0       	ldi	r24, 0x02	; 2
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	68 c0       	rjmp	.+208    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    250c:	82 e0       	ldi	r24, 0x02	; 2
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	65 c0       	rjmp	.+202    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
        
        case TIMER_2:
        {
            
            //Clearing bits 5 and 4
            TCCR2 &= (0xCF);
    2512:	a5 e4       	ldi	r26, 0x45	; 69
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e5 e4       	ldi	r30, 0x45	; 69
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	8f 7c       	andi	r24, 0xCF	; 207
    251e:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    2520:	8c 81       	ldd	r24, Y+4	; 0x04
    2522:	88 23       	and	r24, r24
    2524:	11 f4       	brne	.+4      	; 0x252a <enu_SetOCxBehavior+0x122>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    2526:	19 82       	std	Y+1, r1	; 0x01
    2528:	59 c0       	rjmp	.+178    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	88 23       	and	r24, r24
    252e:	19 f0       	breq	.+6      	; 0x2536 <enu_SetOCxBehavior+0x12e>
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	81 30       	cpi	r24, 0x01	; 1
    2534:	39 f5       	brne	.+78     	; 0x2584 <enu_SetOCxBehavior+0x17c>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	81 30       	cpi	r24, 0x01	; 1
    253a:	49 f4       	brne	.+18     	; 0x254e <enu_SetOCxBehavior+0x146>
                {
                    //Bits contain 01
                    TCCR2 |= (1 << TCCR2_COM20);
    253c:	a5 e4       	ldi	r26, 0x45	; 69
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e5 e4       	ldi	r30, 0x45	; 69
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	80 61       	ori	r24, 0x10	; 16
    2548:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    254a:	19 82       	std	Y+1, r1	; 0x01
    254c:	47 c0       	rjmp	.+142    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    254e:	8c 81       	ldd	r24, Y+4	; 0x04
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	49 f4       	brne	.+18     	; 0x2566 <enu_SetOCxBehavior+0x15e>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    2554:	a5 e4       	ldi	r26, 0x45	; 69
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	e5 e4       	ldi	r30, 0x45	; 69
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	80 62       	ori	r24, 0x20	; 32
    2560:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2562:	19 82       	std	Y+1, r1	; 0x01
    2564:	3b c0       	rjmp	.+118    	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    2566:	8c 81       	ldd	r24, Y+4	; 0x04
    2568:	83 30       	cpi	r24, 0x03	; 3
    256a:	49 f4       	brne	.+18     	; 0x257e <enu_SetOCxBehavior+0x176>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    256c:	a5 e4       	ldi	r26, 0x45	; 69
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e5 e4       	ldi	r30, 0x45	; 69
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	80 63       	ori	r24, 0x30	; 48
    2578:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    257a:	19 82       	std	Y+1, r1	; 0x01
    257c:	2f c0       	rjmp	.+94     	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    257e:	82 e0       	ldi	r24, 0x02	; 2
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	2c c0       	rjmp	.+88     	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	82 30       	cpi	r24, 0x02	; 2
    2588:	19 f0       	breq	.+6      	; 0x2590 <enu_SetOCxBehavior+0x188>
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	83 30       	cpi	r24, 0x03	; 3
    258e:	09 f5       	brne	.+66     	; 0x25d2 <enu_SetOCxBehavior+0x1ca>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    2590:	8c 81       	ldd	r24, Y+4	; 0x04
    2592:	84 30       	cpi	r24, 0x04	; 4
    2594:	19 f0       	breq	.+6      	; 0x259c <enu_SetOCxBehavior+0x194>
    2596:	8c 81       	ldd	r24, Y+4	; 0x04
    2598:	86 30       	cpi	r24, 0x06	; 6
    259a:	49 f4       	brne	.+18     	; 0x25ae <enu_SetOCxBehavior+0x1a6>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    259c:	a5 e4       	ldi	r26, 0x45	; 69
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e5 e4       	ldi	r30, 0x45	; 69
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	80 62       	ori	r24, 0x20	; 32
    25a8:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    25aa:	19 82       	std	Y+1, r1	; 0x01
    25ac:	17 c0       	rjmp	.+46     	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    25ae:	8c 81       	ldd	r24, Y+4	; 0x04
    25b0:	85 30       	cpi	r24, 0x05	; 5
    25b2:	19 f0       	breq	.+6      	; 0x25ba <enu_SetOCxBehavior+0x1b2>
    25b4:	8c 81       	ldd	r24, Y+4	; 0x04
    25b6:	87 30       	cpi	r24, 0x07	; 7
    25b8:	49 f4       	brne	.+18     	; 0x25cc <enu_SetOCxBehavior+0x1c4>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    25ba:	a5 e4       	ldi	r26, 0x45	; 69
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e5 e4       	ldi	r30, 0x45	; 69
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	80 63       	ori	r24, 0x30	; 48
    25c6:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    25c8:	19 82       	std	Y+1, r1	; 0x01
    25ca:	08 c0       	rjmp	.+16     	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    25cc:	82 e0       	ldi	r24, 0x02	; 2
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	05 c0       	rjmp	.+10     	; 0x25dc <enu_SetOCxBehavior+0x1d4>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    25d2:	82 e0       	ldi	r24, 0x02	; 2
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <enu_SetOCxBehavior+0x1d4>
            }
            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    25de:	26 96       	adiw	r28, 0x06	; 6
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
    25f8:	78 94       	sei
}
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
    2608:	f8 94       	cli

    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	00 d0       	rcall	.+0      	; 0x2616 <EXTI_enu_Initialization+0x6>
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    261e:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    2620:	19 82       	std	Y+1, r1	; 0x01
    2622:	3b c0       	rjmp	.+118    	; 0x269a <EXTI_enu_Initialization+0x8a>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	28 2f       	mov	r18, r24
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	c9 01       	movw	r24, r18
    262c:	88 0f       	add	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	82 0f       	add	r24, r18
    2632:	93 1f       	adc	r25, r19
    2634:	fc 01       	movw	r30, r24
    2636:	e1 59       	subi	r30, 0x91	; 145
    2638:	fe 4f       	sbci	r31, 0xFE	; 254
    263a:	40 81       	ld	r20, Z
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	c9 01       	movw	r24, r18
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	82 0f       	add	r24, r18
    264a:	93 1f       	adc	r25, r19
    264c:	fc 01       	movw	r30, r24
    264e:	e0 59       	subi	r30, 0x90	; 144
    2650:	fe 4f       	sbci	r31, 0xFE	; 254
    2652:	90 81       	ld	r25, Z
    2654:	84 2f       	mov	r24, r20
    2656:	69 2f       	mov	r22, r25
    2658:	0e 94 ca 14 	call	0x2994	; 0x2994 <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	c9 01       	movw	r24, r18
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	82 0f       	add	r24, r18
    266a:	93 1f       	adc	r25, r19
    266c:	fc 01       	movw	r30, r24
    266e:	e1 59       	subi	r30, 0x91	; 145
    2670:	fe 4f       	sbci	r31, 0xFE	; 254
    2672:	40 81       	ld	r20, Z
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	c9 01       	movw	r24, r18
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	82 0f       	add	r24, r18
    2682:	93 1f       	adc	r25, r19
    2684:	fc 01       	movw	r30, r24
    2686:	ef 58       	subi	r30, 0x8F	; 143
    2688:	fe 4f       	sbci	r31, 0xFE	; 254
    268a:	90 81       	ld	r25, Z
    268c:	84 2f       	mov	r24, r20
    268e:	69 2f       	mov	r22, r25
    2690:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <enu_SetSenseLevel>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	90 91 6e 01 	lds	r25, 0x016E
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	89 17       	cp	r24, r25
    26a2:	08 f4       	brcc	.+2      	; 0x26a6 <EXTI_enu_Initialization+0x96>
    26a4:	bf cf       	rjmp	.-130    	; 0x2624 <EXTI_enu_Initialization+0x14>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    }
    
    Local_u8_ErrorFlag = ES_OK;
    26a6:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <EXTI_enu_ISC+0x6>
    26ba:	0f 92       	push	r0
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	8a 83       	std	Y+2, r24	; 0x02
    26c2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	6b 81       	ldd	r22, Y+3	; 0x03
    26cc:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <enu_SetSenseLevel>
    26d0:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <EXTI_enu_INTMode+0x6>
    26e6:	0f 92       	push	r0
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	8a 83       	std	Y+2, r24	; 0x02
    26ee:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	6b 81       	ldd	r22, Y+3	; 0x03
    26f8:	0e 94 ca 14 	call	0x2994	; 0x2994 <enu_SetMode>
    26fc:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <EXTI_enu_GetPIF+0x6>
    2712:	00 d0       	rcall	.+0      	; 0x2714 <EXTI_enu_GetPIF+0x8>
    2714:	00 d0       	rcall	.+0      	; 0x2716 <EXTI_enu_GetPIF+0xa>
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	8a 83       	std	Y+2, r24	; 0x02
    271c:	7c 83       	std	Y+4, r23	; 0x04
    271e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	d1 f1       	breq	.+116    	; 0x27a0 <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	3e 83       	std	Y+6, r19	; 0x06
    2734:	2d 83       	std	Y+5, r18	; 0x05
    2736:	8d 81       	ldd	r24, Y+5	; 0x05
    2738:	9e 81       	ldd	r25, Y+6	; 0x06
    273a:	81 30       	cpi	r24, 0x01	; 1
    273c:	91 05       	cpc	r25, r1
    273e:	b1 f0       	breq	.+44     	; 0x276c <EXTI_enu_GetPIF+0x60>
    2740:	2d 81       	ldd	r18, Y+5	; 0x05
    2742:	3e 81       	ldd	r19, Y+6	; 0x06
    2744:	22 30       	cpi	r18, 0x02	; 2
    2746:	31 05       	cpc	r19, r1
    2748:	e1 f0       	breq	.+56     	; 0x2782 <EXTI_enu_GetPIF+0x76>
    274a:	8d 81       	ldd	r24, Y+5	; 0x05
    274c:	9e 81       	ldd	r25, Y+6	; 0x06
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	21 f5       	brne	.+72     	; 0x279a <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
    2752:	ea e5       	ldi	r30, 0x5A	; 90
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	82 95       	swap	r24
    275a:	86 95       	lsr	r24
    275c:	86 95       	lsr	r24
    275e:	83 70       	andi	r24, 0x03	; 3
    2760:	81 70       	andi	r24, 0x01	; 1
    2762:	eb 81       	ldd	r30, Y+3	; 0x03
    2764:	fc 81       	ldd	r31, Y+4	; 0x04
    2766:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    2768:	19 82       	std	Y+1, r1	; 0x01
    276a:	1c c0       	rjmp	.+56     	; 0x27a4 <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
    276c:	ea e5       	ldi	r30, 0x5A	; 90
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	88 1f       	adc	r24, r24
    2774:	88 27       	eor	r24, r24
    2776:	88 1f       	adc	r24, r24
    2778:	eb 81       	ldd	r30, Y+3	; 0x03
    277a:	fc 81       	ldd	r31, Y+4	; 0x04
    277c:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    277e:	19 82       	std	Y+1, r1	; 0x01
    2780:	11 c0       	rjmp	.+34     	; 0x27a4 <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
    2782:	ea e5       	ldi	r30, 0x5A	; 90
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	82 95       	swap	r24
    278a:	86 95       	lsr	r24
    278c:	87 70       	andi	r24, 0x07	; 7
    278e:	81 70       	andi	r24, 0x01	; 1
    2790:	eb 81       	ldd	r30, Y+3	; 0x03
    2792:	fc 81       	ldd	r31, Y+4	; 0x04
    2794:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    2796:	19 82       	std	Y+1, r1	; 0x01
    2798:	05 c0       	rjmp	.+10     	; 0x27a4 <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    279a:	82 e0       	ldi	r24, 0x02	; 2
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    27a0:	83 e0       	ldi	r24, 0x03	; 3
    27a2:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a6:	26 96       	adiw	r28, 0x06	; 6
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <EXTI_enu_ClearINTFx>:

extern ErrorState_t EXTI_enu_ClearINTFx (u8 Copy_u8_INTNumber)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	00 d0       	rcall	.+0      	; 0x27be <EXTI_enu_ClearINTFx+0x6>
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, EXTI_HIGH);
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	61 e0       	ldi	r22, 0x01	; 1
    27cc:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <enu_SetFlagValue>
    27d0:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void), void* Copy_pvid_Parameters)
{
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <EXTI_enu_SetCallBack+0x6>
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <EXTI_enu_SetCallBack+0x8>
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <EXTI_enu_SetCallBack+0xa>
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	8a 83       	std	Y+2, r24	; 0x02
    27ee:	7c 83       	std	Y+4, r23	; 0x04
    27f0:	6b 83       	std	Y+3, r22	; 0x03
    27f2:	5e 83       	std	Y+6, r21	; 0x06
    27f4:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	d1 f0       	breq	.+52     	; 0x2836 <EXTI_enu_SetCallBack+0x58>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	88 2f       	mov	r24, r24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	2b 81       	ldd	r18, Y+3	; 0x03
    280a:	3c 81       	ldd	r19, Y+4	; 0x04
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	fc 01       	movw	r30, r24
    2812:	e8 53       	subi	r30, 0x38	; 56
    2814:	fe 4f       	sbci	r31, 0xFE	; 254
    2816:	31 83       	std	Z+1, r19	; 0x01
    2818:	20 83       	st	Z, r18

        apvid_ISRParameters[Copy_u8_INTNumber] = Copy_pvid_Parameters;
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	fc 01       	movw	r30, r24
    2826:	e2 53       	subi	r30, 0x32	; 50
    2828:	fe 4f       	sbci	r31, 0xFE	; 254
    282a:	8d 81       	ldd	r24, Y+5	; 0x05
    282c:	9e 81       	ldd	r25, Y+6	; 0x06
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    2832:	19 82       	std	Y+1, r1	; 0x01
    2834:	02 c0       	rjmp	.+4      	; 0x283a <EXTI_enu_SetCallBack+0x5c>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    283a:	89 81       	ldd	r24, Y+1	; 0x01
}
    283c:	26 96       	adiw	r28, 0x06	; 6
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
    284e:	1f 92       	push	r1
    2850:	0f 92       	push	r0
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	0f 92       	push	r0
    2856:	11 24       	eor	r1, r1
    2858:	2f 93       	push	r18
    285a:	3f 93       	push	r19
    285c:	4f 93       	push	r20
    285e:	5f 93       	push	r21
    2860:	6f 93       	push	r22
    2862:	7f 93       	push	r23
    2864:	8f 93       	push	r24
    2866:	9f 93       	push	r25
    2868:	af 93       	push	r26
    286a:	bf 93       	push	r27
    286c:	ef 93       	push	r30
    286e:	ff 93       	push	r31
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
    2878:	80 91 c8 01 	lds	r24, 0x01C8
    287c:	90 91 c9 01 	lds	r25, 0x01C9
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	49 f0       	breq	.+18     	; 0x2896 <__vector_1+0x48>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
    2884:	e0 91 c8 01 	lds	r30, 0x01C8
    2888:	f0 91 c9 01 	lds	r31, 0x01C9
    288c:	80 91 ce 01 	lds	r24, 0x01CE
    2890:	90 91 cf 01 	lds	r25, 0x01CF
    2894:	09 95       	icall
    }
}
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	ff 91       	pop	r31
    289c:	ef 91       	pop	r30
    289e:	bf 91       	pop	r27
    28a0:	af 91       	pop	r26
    28a2:	9f 91       	pop	r25
    28a4:	8f 91       	pop	r24
    28a6:	7f 91       	pop	r23
    28a8:	6f 91       	pop	r22
    28aa:	5f 91       	pop	r21
    28ac:	4f 91       	pop	r20
    28ae:	3f 91       	pop	r19
    28b0:	2f 91       	pop	r18
    28b2:	0f 90       	pop	r0
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	0f 90       	pop	r0
    28b8:	1f 90       	pop	r1
    28ba:	18 95       	reti

000028bc <__vector_2>:
//INT1
void __vector_2 (void)
{
    28bc:	1f 92       	push	r1
    28be:	0f 92       	push	r0
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	0f 92       	push	r0
    28c4:	11 24       	eor	r1, r1
    28c6:	2f 93       	push	r18
    28c8:	3f 93       	push	r19
    28ca:	4f 93       	push	r20
    28cc:	5f 93       	push	r21
    28ce:	6f 93       	push	r22
    28d0:	7f 93       	push	r23
    28d2:	8f 93       	push	r24
    28d4:	9f 93       	push	r25
    28d6:	af 93       	push	r26
    28d8:	bf 93       	push	r27
    28da:	ef 93       	push	r30
    28dc:	ff 93       	push	r31
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
    28e6:	80 91 ca 01 	lds	r24, 0x01CA
    28ea:	90 91 cb 01 	lds	r25, 0x01CB
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	49 f0       	breq	.+18     	; 0x2904 <__vector_2+0x48>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
    28f2:	e0 91 ca 01 	lds	r30, 0x01CA
    28f6:	f0 91 cb 01 	lds	r31, 0x01CB
    28fa:	80 91 d0 01 	lds	r24, 0x01D0
    28fe:	90 91 d1 01 	lds	r25, 0x01D1
    2902:	09 95       	icall
    }
}
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	ff 91       	pop	r31
    290a:	ef 91       	pop	r30
    290c:	bf 91       	pop	r27
    290e:	af 91       	pop	r26
    2910:	9f 91       	pop	r25
    2912:	8f 91       	pop	r24
    2914:	7f 91       	pop	r23
    2916:	6f 91       	pop	r22
    2918:	5f 91       	pop	r21
    291a:	4f 91       	pop	r20
    291c:	3f 91       	pop	r19
    291e:	2f 91       	pop	r18
    2920:	0f 90       	pop	r0
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	0f 90       	pop	r0
    2926:	1f 90       	pop	r1
    2928:	18 95       	reti

0000292a <__vector_3>:
//INT2
void __vector_3 (void)
{
    292a:	1f 92       	push	r1
    292c:	0f 92       	push	r0
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	0f 92       	push	r0
    2932:	11 24       	eor	r1, r1
    2934:	2f 93       	push	r18
    2936:	3f 93       	push	r19
    2938:	4f 93       	push	r20
    293a:	5f 93       	push	r21
    293c:	6f 93       	push	r22
    293e:	7f 93       	push	r23
    2940:	8f 93       	push	r24
    2942:	9f 93       	push	r25
    2944:	af 93       	push	r26
    2946:	bf 93       	push	r27
    2948:	ef 93       	push	r30
    294a:	ff 93       	push	r31
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
    2954:	80 91 cc 01 	lds	r24, 0x01CC
    2958:	90 91 cd 01 	lds	r25, 0x01CD
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	39 f0       	breq	.+14     	; 0x296e <__vector_3+0x44>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
    2960:	e0 91 cc 01 	lds	r30, 0x01CC
    2964:	f0 91 cd 01 	lds	r31, 0x01CD
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	09 95       	icall
    }
    
}
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	ff 91       	pop	r31
    2974:	ef 91       	pop	r30
    2976:	bf 91       	pop	r27
    2978:	af 91       	pop	r26
    297a:	9f 91       	pop	r25
    297c:	8f 91       	pop	r24
    297e:	7f 91       	pop	r23
    2980:	6f 91       	pop	r22
    2982:	5f 91       	pop	r21
    2984:	4f 91       	pop	r20
    2986:	3f 91       	pop	r19
    2988:	2f 91       	pop	r18
    298a:	0f 90       	pop	r0
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	0f 90       	pop	r0
    2990:	1f 90       	pop	r1
    2992:	18 95       	reti

00002994 <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	00 d0       	rcall	.+0      	; 0x299a <enu_SetMode+0x6>
    299a:	00 d0       	rcall	.+0      	; 0x299c <enu_SetMode+0x8>
    299c:	0f 92       	push	r0
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	8a 83       	std	Y+2, r24	; 0x02
    29a4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	28 2f       	mov	r18, r24
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	3d 83       	std	Y+5, r19	; 0x05
    29b2:	2c 83       	std	Y+4, r18	; 0x04
    29b4:	8c 81       	ldd	r24, Y+4	; 0x04
    29b6:	9d 81       	ldd	r25, Y+5	; 0x05
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	91 05       	cpc	r25, r1
    29bc:	29 f1       	breq	.+74     	; 0x2a08 <enu_SetMode+0x74>
    29be:	2c 81       	ldd	r18, Y+4	; 0x04
    29c0:	3d 81       	ldd	r19, Y+5	; 0x05
    29c2:	22 30       	cpi	r18, 0x02	; 2
    29c4:	31 05       	cpc	r19, r1
    29c6:	d9 f1       	breq	.+118    	; 0x2a3e <enu_SetMode+0xaa>
    29c8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ca:	9d 81       	ldd	r25, Y+5	; 0x05
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <enu_SetMode+0x3e>
    29d0:	51 c0       	rjmp	.+162    	; 0x2a74 <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	81 30       	cpi	r24, 0x01	; 1
    29d6:	49 f4       	brne	.+18     	; 0x29ea <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
    29d8:	ab e5       	ldi	r26, 0x5B	; 91
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	eb e5       	ldi	r30, 0x5B	; 91
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	80 64       	ori	r24, 0x40	; 64
    29e4:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    29e6:	19 82       	std	Y+1, r1	; 0x01
    29e8:	47 c0       	rjmp	.+142    	; 0x2a78 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	88 23       	and	r24, r24
    29ee:	49 f4       	brne	.+18     	; 0x2a02 <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
    29f0:	ab e5       	ldi	r26, 0x5B	; 91
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	eb e5       	ldi	r30, 0x5B	; 91
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	8f 7b       	andi	r24, 0xBF	; 191
    29fc:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    29fe:	19 82       	std	Y+1, r1	; 0x01
    2a00:	3b c0       	rjmp	.+118    	; 0x2a78 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	89 83       	std	Y+1, r24	; 0x01
    2a06:	38 c0       	rjmp	.+112    	; 0x2a78 <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	81 30       	cpi	r24, 0x01	; 1
    2a0c:	49 f4       	brne	.+18     	; 0x2a20 <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
    2a0e:	ab e5       	ldi	r26, 0x5B	; 91
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	eb e5       	ldi	r30, 0x5B	; 91
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	80 68       	ori	r24, 0x80	; 128
    2a1a:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2a1c:	19 82       	std	Y+1, r1	; 0x01
    2a1e:	2c c0       	rjmp	.+88     	; 0x2a78 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	88 23       	and	r24, r24
    2a24:	49 f4       	brne	.+18     	; 0x2a38 <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
    2a26:	ab e5       	ldi	r26, 0x5B	; 91
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	eb e5       	ldi	r30, 0x5B	; 91
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	8f 77       	andi	r24, 0x7F	; 127
    2a32:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2a34:	19 82       	std	Y+1, r1	; 0x01
    2a36:	20 c0       	rjmp	.+64     	; 0x2a78 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	1d c0       	rjmp	.+58     	; 0x2a78 <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	49 f4       	brne	.+18     	; 0x2a56 <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
    2a44:	ab e5       	ldi	r26, 0x5B	; 91
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	eb e5       	ldi	r30, 0x5B	; 91
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	80 62       	ori	r24, 0x20	; 32
    2a50:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    2a52:	19 82       	std	Y+1, r1	; 0x01
    2a54:	11 c0       	rjmp	.+34     	; 0x2a78 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    2a56:	8b 81       	ldd	r24, Y+3	; 0x03
    2a58:	88 23       	and	r24, r24
    2a5a:	49 f4       	brne	.+18     	; 0x2a6e <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
    2a5c:	ab e5       	ldi	r26, 0x5B	; 91
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	eb e5       	ldi	r30, 0x5B	; 91
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	8f 7d       	andi	r24, 0xDF	; 223
    2a68:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2a6a:	19 82       	std	Y+1, r1	; 0x01
    2a6c:	05 c0       	rjmp	.+10     	; 0x2a78 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2a6e:	82 e0       	ldi	r24, 0x02	; 2
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <enu_SetSenseLevel+0x6>
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <enu_SetSenseLevel+0x8>
    2a92:	0f 92       	push	r0
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
    2a98:	8a 83       	std	Y+2, r24	; 0x02
    2a9a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	3d 83       	std	Y+5, r19	; 0x05
    2aa8:	2c 83       	std	Y+4, r18	; 0x04
    2aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    2aac:	9d 81       	ldd	r25, Y+5	; 0x05
    2aae:	81 30       	cpi	r24, 0x01	; 1
    2ab0:	91 05       	cpc	r25, r1
    2ab2:	e9 f1       	breq	.+122    	; 0x2b2e <enu_SetSenseLevel+0xa4>
    2ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ab8:	22 30       	cpi	r18, 0x02	; 2
    2aba:	31 05       	cpc	r19, r1
    2abc:	09 f4       	brne	.+2      	; 0x2ac0 <enu_SetSenseLevel+0x36>
    2abe:	69 c0       	rjmp	.+210    	; 0x2b92 <enu_SetSenseLevel+0x108>
    2ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <enu_SetSenseLevel+0x40>
    2ac8:	7c c0       	rjmp	.+248    	; 0x2bc2 <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
    2aca:	a5 e5       	ldi	r26, 0x55	; 85
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	e5 e5       	ldi	r30, 0x55	; 85
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	8c 7f       	andi	r24, 0xFC	; 252
    2ad6:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	88 23       	and	r24, r24
    2adc:	11 f4       	brne	.+4      	; 0x2ae2 <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    2ade:	19 82       	std	Y+1, r1	; 0x01
    2ae0:	72 c0       	rjmp	.+228    	; 0x2bc6 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	81 30       	cpi	r24, 0x01	; 1
    2ae6:	49 f4       	brne	.+18     	; 0x2afa <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
    2ae8:	a5 e5       	ldi	r26, 0x55	; 85
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e5 e5       	ldi	r30, 0x55	; 85
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	81 60       	ori	r24, 0x01	; 1
    2af4:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2af6:	19 82       	std	Y+1, r1	; 0x01
    2af8:	66 c0       	rjmp	.+204    	; 0x2bc6 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	82 30       	cpi	r24, 0x02	; 2
    2afe:	41 f4       	brne	.+16     	; 0x2b10 <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
    2b00:	a5 e5       	ldi	r26, 0x55	; 85
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	e5 e5       	ldi	r30, 0x55	; 85
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	82 60       	ori	r24, 0x02	; 2
    2b0c:	8c 93       	st	X, r24
    2b0e:	5b c0       	rjmp	.+182    	; 0x2bc6 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	83 30       	cpi	r24, 0x03	; 3
    2b14:	49 f4       	brne	.+18     	; 0x2b28 <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
    2b16:	a5 e5       	ldi	r26, 0x55	; 85
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e5 e5       	ldi	r30, 0x55	; 85
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	83 60       	ori	r24, 0x03	; 3
    2b22:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2b24:	19 82       	std	Y+1, r1	; 0x01
    2b26:	4f c0       	rjmp	.+158    	; 0x2bc6 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2b28:	82 e0       	ldi	r24, 0x02	; 2
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    2b2c:	4c c0       	rjmp	.+152    	; 0x2bc6 <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
    2b2e:	a5 e5       	ldi	r26, 0x55	; 85
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	e5 e5       	ldi	r30, 0x55	; 85
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	83 7f       	andi	r24, 0xF3	; 243
    2b3a:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	88 23       	and	r24, r24
    2b40:	11 f4       	brne	.+4      	; 0x2b46 <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    2b42:	19 82       	std	Y+1, r1	; 0x01
    2b44:	40 c0       	rjmp	.+128    	; 0x2bc6 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    2b46:	8b 81       	ldd	r24, Y+3	; 0x03
    2b48:	81 30       	cpi	r24, 0x01	; 1
    2b4a:	49 f4       	brne	.+18     	; 0x2b5e <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
    2b4c:	a5 e5       	ldi	r26, 0x55	; 85
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e5 e5       	ldi	r30, 0x55	; 85
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	84 60       	ori	r24, 0x04	; 4
    2b58:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2b5a:	19 82       	std	Y+1, r1	; 0x01
    2b5c:	34 c0       	rjmp	.+104    	; 0x2bc6 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	82 30       	cpi	r24, 0x02	; 2
    2b62:	41 f4       	brne	.+16     	; 0x2b74 <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
    2b64:	a5 e5       	ldi	r26, 0x55	; 85
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e5 e5       	ldi	r30, 0x55	; 85
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	88 60       	ori	r24, 0x08	; 8
    2b70:	8c 93       	st	X, r24
    2b72:	29 c0       	rjmp	.+82     	; 0x2bc6 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	83 30       	cpi	r24, 0x03	; 3
    2b78:	49 f4       	brne	.+18     	; 0x2b8c <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
    2b7a:	a5 e5       	ldi	r26, 0x55	; 85
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e5 e5       	ldi	r30, 0x55	; 85
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	8c 60       	ori	r24, 0x0C	; 12
    2b86:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2b88:	19 82       	std	Y+1, r1	; 0x01
    2b8a:	1d c0       	rjmp	.+58     	; 0x2bc6 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    2b90:	1a c0       	rjmp	.+52     	; 0x2bc6 <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	82 30       	cpi	r24, 0x02	; 2
    2b96:	49 f4       	brne	.+18     	; 0x2baa <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
    2b98:	a4 e5       	ldi	r26, 0x54	; 84
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e4 e5       	ldi	r30, 0x54	; 84
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	8f 7b       	andi	r24, 0xBF	; 191
    2ba4:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2ba6:	19 82       	std	Y+1, r1	; 0x01
    2ba8:	0e c0       	rjmp	.+28     	; 0x2bc6 <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	83 30       	cpi	r24, 0x03	; 3
    2bae:	59 f4       	brne	.+22     	; 0x2bc6 <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
    2bb0:	a4 e5       	ldi	r26, 0x54	; 84
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e4 e5       	ldi	r30, 0x54	; 84
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	80 64       	ori	r24, 0x40	; 64
    2bbc:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2bbe:	19 82       	std	Y+1, r1	; 0x01
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2bc2:	82 e0       	ldi	r24, 0x02	; 2
    2bc4:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	cf 91       	pop	r28
    2bd4:	df 91       	pop	r29
    2bd6:	08 95       	ret

00002bd8 <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    2bd8:	df 93       	push	r29
    2bda:	cf 93       	push	r28
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <enu_SetFlagValue+0x6>
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <enu_SetFlagValue+0x8>
    2be0:	0f 92       	push	r0
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
    2be6:	8a 83       	std	Y+2, r24	; 0x02
    2be8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	28 2f       	mov	r18, r24
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	3d 83       	std	Y+5, r19	; 0x05
    2bf6:	2c 83       	std	Y+4, r18	; 0x04
    2bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfa:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfc:	81 30       	cpi	r24, 0x01	; 1
    2bfe:	91 05       	cpc	r25, r1
    2c00:	29 f1       	breq	.+74     	; 0x2c4c <enu_SetFlagValue+0x74>
    2c02:	2c 81       	ldd	r18, Y+4	; 0x04
    2c04:	3d 81       	ldd	r19, Y+5	; 0x05
    2c06:	22 30       	cpi	r18, 0x02	; 2
    2c08:	31 05       	cpc	r19, r1
    2c0a:	d9 f1       	breq	.+118    	; 0x2c82 <enu_SetFlagValue+0xaa>
    2c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	09 f0       	breq	.+2      	; 0x2c16 <enu_SetFlagValue+0x3e>
    2c14:	51 c0       	rjmp	.+162    	; 0x2cb8 <enu_SetFlagValue+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	81 30       	cpi	r24, 0x01	; 1
    2c1a:	49 f4       	brne	.+18     	; 0x2c2e <enu_SetFlagValue+0x56>
            {
                GIFR |= ( 1 << GIFR_INTF0);
    2c1c:	aa e5       	ldi	r26, 0x5A	; 90
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	ea e5       	ldi	r30, 0x5A	; 90
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	80 64       	ori	r24, 0x40	; 64
    2c28:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    2c2a:	19 82       	std	Y+1, r1	; 0x01
    2c2c:	47 c0       	rjmp	.+142    	; 0x2cbc <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	88 23       	and	r24, r24
    2c32:	49 f4       	brne	.+18     	; 0x2c46 <enu_SetFlagValue+0x6e>
            {
                GIFR &= ~( 1 << GIFR_INTF0);
    2c34:	aa e5       	ldi	r26, 0x5A	; 90
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	ea e5       	ldi	r30, 0x5A	; 90
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	8f 7b       	andi	r24, 0xBF	; 191
    2c40:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2c42:	19 82       	std	Y+1, r1	; 0x01
    2c44:	3b c0       	rjmp	.+118    	; 0x2cbc <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2c46:	82 e0       	ldi	r24, 0x02	; 2
    2c48:	89 83       	std	Y+1, r24	; 0x01
    2c4a:	38 c0       	rjmp	.+112    	; 0x2cbc <enu_SetFlagValue+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    2c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4e:	81 30       	cpi	r24, 0x01	; 1
    2c50:	49 f4       	brne	.+18     	; 0x2c64 <enu_SetFlagValue+0x8c>
            {
                GIFR |= ( 1 << GIFR_INTF1);
    2c52:	aa e5       	ldi	r26, 0x5A	; 90
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	ea e5       	ldi	r30, 0x5A	; 90
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	80 68       	ori	r24, 0x80	; 128
    2c5e:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2c60:	19 82       	std	Y+1, r1	; 0x01
    2c62:	2c c0       	rjmp	.+88     	; 0x2cbc <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	88 23       	and	r24, r24
    2c68:	49 f4       	brne	.+18     	; 0x2c7c <enu_SetFlagValue+0xa4>
            {
                GIFR &= ~( 1 << GIFR_INTF1);
    2c6a:	aa e5       	ldi	r26, 0x5A	; 90
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	ea e5       	ldi	r30, 0x5A	; 90
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	8f 77       	andi	r24, 0x7F	; 127
    2c76:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2c78:	19 82       	std	Y+1, r1	; 0x01
    2c7a:	20 c0       	rjmp	.+64     	; 0x2cbc <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2c7c:	82 e0       	ldi	r24, 0x02	; 2
    2c7e:	89 83       	std	Y+1, r24	; 0x01
    2c80:	1d c0       	rjmp	.+58     	; 0x2cbc <enu_SetFlagValue+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	81 30       	cpi	r24, 0x01	; 1
    2c86:	49 f4       	brne	.+18     	; 0x2c9a <enu_SetFlagValue+0xc2>
            {
                GIFR |= ( 1 << GIFR_INTF2);
    2c88:	aa e5       	ldi	r26, 0x5A	; 90
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	ea e5       	ldi	r30, 0x5A	; 90
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	80 62       	ori	r24, 0x20	; 32
    2c94:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    2c96:	19 82       	std	Y+1, r1	; 0x01
    2c98:	11 c0       	rjmp	.+34     	; 0x2cbc <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	88 23       	and	r24, r24
    2c9e:	49 f4       	brne	.+18     	; 0x2cb2 <enu_SetFlagValue+0xda>
            {
                GIFR &= ~( 1 << GIFR_INTF2);
    2ca0:	aa e5       	ldi	r26, 0x5A	; 90
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	ea e5       	ldi	r30, 0x5A	; 90
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	8f 7d       	andi	r24, 0xDF	; 223
    2cac:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2cae:	19 82       	std	Y+1, r1	; 0x01
    2cb0:	05 c0       	rjmp	.+10     	; 0x2cbc <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2cb2:	82 e0       	ldi	r24, 0x02	; 2
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	02 c0       	rjmp	.+4      	; 0x2cbc <enu_SetFlagValue+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2cb8:	82 e0       	ldi	r24, 0x02	; 2
    2cba:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	cf 91       	pop	r28
    2cca:	df 91       	pop	r29
    2ccc:	08 95       	ret

00002cce <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	0f 92       	push	r0
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    2cdc:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ce0:	0f 90       	pop	r0
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <DIO_enu_SetPinDiretion+0x6>
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <DIO_enu_SetPinDiretion+0x8>
    2cf0:	00 d0       	rcall	.+0      	; 0x2cf2 <DIO_enu_SetPinDiretion+0xa>
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	8a 83       	std	Y+2, r24	; 0x02
    2cf8:	6b 83       	std	Y+3, r22	; 0x03
    2cfa:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	84 30       	cpi	r24, 0x04	; 4
    2d04:	08 f0       	brcs	.+2      	; 0x2d08 <DIO_enu_SetPinDiretion+0x20>
    2d06:	d0 c0       	rjmp	.+416    	; 0x2ea8 <DIO_enu_SetPinDiretion+0x1c0>
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	88 30       	cpi	r24, 0x08	; 8
    2d0c:	08 f0       	brcs	.+2      	; 0x2d10 <DIO_enu_SetPinDiretion+0x28>
    2d0e:	cc c0       	rjmp	.+408    	; 0x2ea8 <DIO_enu_SetPinDiretion+0x1c0>
    2d10:	8c 81       	ldd	r24, Y+4	; 0x04
    2d12:	82 30       	cpi	r24, 0x02	; 2
    2d14:	08 f0       	brcs	.+2      	; 0x2d18 <DIO_enu_SetPinDiretion+0x30>
    2d16:	c8 c0       	rjmp	.+400    	; 0x2ea8 <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    2d18:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1a:	28 2f       	mov	r18, r24
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	3e 83       	std	Y+6, r19	; 0x06
    2d20:	2d 83       	std	Y+5, r18	; 0x05
    2d22:	6d 81       	ldd	r22, Y+5	; 0x05
    2d24:	7e 81       	ldd	r23, Y+6	; 0x06
    2d26:	61 30       	cpi	r22, 0x01	; 1
    2d28:	71 05       	cpc	r23, r1
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <DIO_enu_SetPinDiretion+0x46>
    2d2c:	41 c0       	rjmp	.+130    	; 0x2db0 <DIO_enu_SetPinDiretion+0xc8>
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	9e 81       	ldd	r25, Y+6	; 0x06
    2d32:	82 30       	cpi	r24, 0x02	; 2
    2d34:	91 05       	cpc	r25, r1
    2d36:	34 f4       	brge	.+12     	; 0x2d44 <DIO_enu_SetPinDiretion+0x5c>
    2d38:	2d 81       	ldd	r18, Y+5	; 0x05
    2d3a:	3e 81       	ldd	r19, Y+6	; 0x06
    2d3c:	21 15       	cp	r18, r1
    2d3e:	31 05       	cpc	r19, r1
    2d40:	71 f0       	breq	.+28     	; 0x2d5e <DIO_enu_SetPinDiretion+0x76>
    2d42:	b0 c0       	rjmp	.+352    	; 0x2ea4 <DIO_enu_SetPinDiretion+0x1bc>
    2d44:	6d 81       	ldd	r22, Y+5	; 0x05
    2d46:	7e 81       	ldd	r23, Y+6	; 0x06
    2d48:	62 30       	cpi	r22, 0x02	; 2
    2d4a:	71 05       	cpc	r23, r1
    2d4c:	09 f4       	brne	.+2      	; 0x2d50 <DIO_enu_SetPinDiretion+0x68>
    2d4e:	59 c0       	rjmp	.+178    	; 0x2e02 <DIO_enu_SetPinDiretion+0x11a>
    2d50:	8d 81       	ldd	r24, Y+5	; 0x05
    2d52:	9e 81       	ldd	r25, Y+6	; 0x06
    2d54:	83 30       	cpi	r24, 0x03	; 3
    2d56:	91 05       	cpc	r25, r1
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <DIO_enu_SetPinDiretion+0x74>
    2d5a:	7c c0       	rjmp	.+248    	; 0x2e54 <DIO_enu_SetPinDiretion+0x16c>
    2d5c:	a3 c0       	rjmp	.+326    	; 0x2ea4 <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    2d5e:	aa e3       	ldi	r26, 0x3A	; 58
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	ea e3       	ldi	r30, 0x3A	; 58
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	48 2f       	mov	r20, r24
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <DIO_enu_SetPinDiretion+0x92>
    2d76:	88 0f       	add	r24, r24
    2d78:	99 1f       	adc	r25, r25
    2d7a:	2a 95       	dec	r18
    2d7c:	e2 f7       	brpl	.-8      	; 0x2d76 <DIO_enu_SetPinDiretion+0x8e>
    2d7e:	80 95       	com	r24
    2d80:	84 23       	and	r24, r20
    2d82:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    2d84:	aa e3       	ldi	r26, 0x3A	; 58
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	ea e3       	ldi	r30, 0x3A	; 58
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	48 2f       	mov	r20, r24
    2d90:	8c 81       	ldd	r24, Y+4	; 0x04
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	8b 81       	ldd	r24, Y+3	; 0x03
    2d98:	88 2f       	mov	r24, r24
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	b9 01       	movw	r22, r18
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <DIO_enu_SetPinDiretion+0xbc>
    2da0:	66 0f       	add	r22, r22
    2da2:	77 1f       	adc	r23, r23
    2da4:	8a 95       	dec	r24
    2da6:	e2 f7       	brpl	.-8      	; 0x2da0 <DIO_enu_SetPinDiretion+0xb8>
    2da8:	cb 01       	movw	r24, r22
    2daa:	84 2b       	or	r24, r20
    2dac:	8c 93       	st	X, r24
    2dae:	7a c0       	rjmp	.+244    	; 0x2ea4 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    2db0:	a7 e3       	ldi	r26, 0x37	; 55
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	e7 e3       	ldi	r30, 0x37	; 55
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	48 2f       	mov	r20, r24
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <DIO_enu_SetPinDiretion+0xe4>
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	2a 95       	dec	r18
    2dce:	e2 f7       	brpl	.-8      	; 0x2dc8 <DIO_enu_SetPinDiretion+0xe0>
    2dd0:	80 95       	com	r24
    2dd2:	84 23       	and	r24, r20
    2dd4:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    2dd6:	a7 e3       	ldi	r26, 0x37	; 55
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	e7 e3       	ldi	r30, 0x37	; 55
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	48 2f       	mov	r20, r24
    2de2:	8c 81       	ldd	r24, Y+4	; 0x04
    2de4:	28 2f       	mov	r18, r24
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	88 2f       	mov	r24, r24
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	b9 01       	movw	r22, r18
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <DIO_enu_SetPinDiretion+0x10e>
    2df2:	66 0f       	add	r22, r22
    2df4:	77 1f       	adc	r23, r23
    2df6:	8a 95       	dec	r24
    2df8:	e2 f7       	brpl	.-8      	; 0x2df2 <DIO_enu_SetPinDiretion+0x10a>
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	84 2b       	or	r24, r20
    2dfe:	8c 93       	st	X, r24
    2e00:	51 c0       	rjmp	.+162    	; 0x2ea4 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    2e02:	a4 e3       	ldi	r26, 0x34	; 52
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e4 e3       	ldi	r30, 0x34	; 52
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	48 2f       	mov	r20, r24
    2e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <DIO_enu_SetPinDiretion+0x136>
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	2a 95       	dec	r18
    2e20:	e2 f7       	brpl	.-8      	; 0x2e1a <DIO_enu_SetPinDiretion+0x132>
    2e22:	80 95       	com	r24
    2e24:	84 23       	and	r24, r20
    2e26:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    2e28:	a4 e3       	ldi	r26, 0x34	; 52
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	e4 e3       	ldi	r30, 0x34	; 52
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	80 81       	ld	r24, Z
    2e32:	48 2f       	mov	r20, r24
    2e34:	8c 81       	ldd	r24, Y+4	; 0x04
    2e36:	28 2f       	mov	r18, r24
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	88 2f       	mov	r24, r24
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	b9 01       	movw	r22, r18
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <DIO_enu_SetPinDiretion+0x160>
    2e44:	66 0f       	add	r22, r22
    2e46:	77 1f       	adc	r23, r23
    2e48:	8a 95       	dec	r24
    2e4a:	e2 f7       	brpl	.-8      	; 0x2e44 <DIO_enu_SetPinDiretion+0x15c>
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	84 2b       	or	r24, r20
    2e50:	8c 93       	st	X, r24
    2e52:	28 c0       	rjmp	.+80     	; 0x2ea4 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    2e54:	a1 e3       	ldi	r26, 0x31	; 49
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e1 e3       	ldi	r30, 0x31	; 49
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	48 2f       	mov	r20, r24
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	28 2f       	mov	r18, r24
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	02 c0       	rjmp	.+4      	; 0x2e70 <DIO_enu_SetPinDiretion+0x188>
    2e6c:	88 0f       	add	r24, r24
    2e6e:	99 1f       	adc	r25, r25
    2e70:	2a 95       	dec	r18
    2e72:	e2 f7       	brpl	.-8      	; 0x2e6c <DIO_enu_SetPinDiretion+0x184>
    2e74:	80 95       	com	r24
    2e76:	84 23       	and	r24, r20
    2e78:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    2e7a:	a1 e3       	ldi	r26, 0x31	; 49
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	e1 e3       	ldi	r30, 0x31	; 49
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	48 2f       	mov	r20, r24
    2e86:	8c 81       	ldd	r24, Y+4	; 0x04
    2e88:	28 2f       	mov	r18, r24
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	b9 01       	movw	r22, r18
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <DIO_enu_SetPinDiretion+0x1b2>
    2e96:	66 0f       	add	r22, r22
    2e98:	77 1f       	adc	r23, r23
    2e9a:	8a 95       	dec	r24
    2e9c:	e2 f7       	brpl	.-8      	; 0x2e96 <DIO_enu_SetPinDiretion+0x1ae>
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	84 2b       	or	r24, r20
    2ea2:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2ea4:	19 82       	std	Y+1, r1	; 0x01
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    2ea8:	82 e0       	ldi	r24, 0x02	; 2
    2eaa:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eae:	26 96       	adiw	r28, 0x06	; 6
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <DIO_enu_SetPinState+0x6>
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <DIO_enu_SetPinState+0x8>
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <DIO_enu_SetPinState+0xa>
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	8a 83       	std	Y+2, r24	; 0x02
    2ed0:	6b 83       	std	Y+3, r22	; 0x03
    2ed2:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    2ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eda:	84 30       	cpi	r24, 0x04	; 4
    2edc:	08 f0       	brcs	.+2      	; 0x2ee0 <DIO_enu_SetPinState+0x20>
    2ede:	d0 c0       	rjmp	.+416    	; 0x3080 <DIO_enu_SetPinState+0x1c0>
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	88 30       	cpi	r24, 0x08	; 8
    2ee4:	08 f0       	brcs	.+2      	; 0x2ee8 <DIO_enu_SetPinState+0x28>
    2ee6:	cc c0       	rjmp	.+408    	; 0x3080 <DIO_enu_SetPinState+0x1c0>
    2ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eea:	82 30       	cpi	r24, 0x02	; 2
    2eec:	08 f0       	brcs	.+2      	; 0x2ef0 <DIO_enu_SetPinState+0x30>
    2eee:	c8 c0       	rjmp	.+400    	; 0x3080 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    2ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	3e 83       	std	Y+6, r19	; 0x06
    2ef8:	2d 83       	std	Y+5, r18	; 0x05
    2efa:	6d 81       	ldd	r22, Y+5	; 0x05
    2efc:	7e 81       	ldd	r23, Y+6	; 0x06
    2efe:	61 30       	cpi	r22, 0x01	; 1
    2f00:	71 05       	cpc	r23, r1
    2f02:	09 f4       	brne	.+2      	; 0x2f06 <DIO_enu_SetPinState+0x46>
    2f04:	41 c0       	rjmp	.+130    	; 0x2f88 <DIO_enu_SetPinState+0xc8>
    2f06:	8d 81       	ldd	r24, Y+5	; 0x05
    2f08:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0a:	82 30       	cpi	r24, 0x02	; 2
    2f0c:	91 05       	cpc	r25, r1
    2f0e:	34 f4       	brge	.+12     	; 0x2f1c <DIO_enu_SetPinState+0x5c>
    2f10:	2d 81       	ldd	r18, Y+5	; 0x05
    2f12:	3e 81       	ldd	r19, Y+6	; 0x06
    2f14:	21 15       	cp	r18, r1
    2f16:	31 05       	cpc	r19, r1
    2f18:	71 f0       	breq	.+28     	; 0x2f36 <DIO_enu_SetPinState+0x76>
    2f1a:	b0 c0       	rjmp	.+352    	; 0x307c <DIO_enu_SetPinState+0x1bc>
    2f1c:	6d 81       	ldd	r22, Y+5	; 0x05
    2f1e:	7e 81       	ldd	r23, Y+6	; 0x06
    2f20:	62 30       	cpi	r22, 0x02	; 2
    2f22:	71 05       	cpc	r23, r1
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <DIO_enu_SetPinState+0x68>
    2f26:	59 c0       	rjmp	.+178    	; 0x2fda <DIO_enu_SetPinState+0x11a>
    2f28:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2c:	83 30       	cpi	r24, 0x03	; 3
    2f2e:	91 05       	cpc	r25, r1
    2f30:	09 f4       	brne	.+2      	; 0x2f34 <DIO_enu_SetPinState+0x74>
    2f32:	7c c0       	rjmp	.+248    	; 0x302c <DIO_enu_SetPinState+0x16c>
    2f34:	a3 c0       	rjmp	.+326    	; 0x307c <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    2f36:	ab e3       	ldi	r26, 0x3B	; 59
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	eb e3       	ldi	r30, 0x3B	; 59
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	80 81       	ld	r24, Z
    2f40:	48 2f       	mov	r20, r24
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <DIO_enu_SetPinState+0x92>
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	2a 95       	dec	r18
    2f54:	e2 f7       	brpl	.-8      	; 0x2f4e <DIO_enu_SetPinState+0x8e>
    2f56:	80 95       	com	r24
    2f58:	84 23       	and	r24, r20
    2f5a:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2f5c:	ab e3       	ldi	r26, 0x3B	; 59
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	eb e3       	ldi	r30, 0x3B	; 59
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	48 2f       	mov	r20, r24
    2f68:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6a:	28 2f       	mov	r18, r24
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	88 2f       	mov	r24, r24
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	b9 01       	movw	r22, r18
    2f76:	02 c0       	rjmp	.+4      	; 0x2f7c <DIO_enu_SetPinState+0xbc>
    2f78:	66 0f       	add	r22, r22
    2f7a:	77 1f       	adc	r23, r23
    2f7c:	8a 95       	dec	r24
    2f7e:	e2 f7       	brpl	.-8      	; 0x2f78 <DIO_enu_SetPinState+0xb8>
    2f80:	cb 01       	movw	r24, r22
    2f82:	84 2b       	or	r24, r20
    2f84:	8c 93       	st	X, r24
    2f86:	7a c0       	rjmp	.+244    	; 0x307c <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    2f88:	a8 e3       	ldi	r26, 0x38	; 56
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e8 e3       	ldi	r30, 0x38	; 56
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	48 2f       	mov	r20, r24
    2f94:	8b 81       	ldd	r24, Y+3	; 0x03
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	02 c0       	rjmp	.+4      	; 0x2fa4 <DIO_enu_SetPinState+0xe4>
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	2a 95       	dec	r18
    2fa6:	e2 f7       	brpl	.-8      	; 0x2fa0 <DIO_enu_SetPinState+0xe0>
    2fa8:	80 95       	com	r24
    2faa:	84 23       	and	r24, r20
    2fac:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2fae:	a8 e3       	ldi	r26, 0x38	; 56
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	e8 e3       	ldi	r30, 0x38	; 56
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	48 2f       	mov	r20, r24
    2fba:	8c 81       	ldd	r24, Y+4	; 0x04
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	88 2f       	mov	r24, r24
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	b9 01       	movw	r22, r18
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <DIO_enu_SetPinState+0x10e>
    2fca:	66 0f       	add	r22, r22
    2fcc:	77 1f       	adc	r23, r23
    2fce:	8a 95       	dec	r24
    2fd0:	e2 f7       	brpl	.-8      	; 0x2fca <DIO_enu_SetPinState+0x10a>
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	84 2b       	or	r24, r20
    2fd6:	8c 93       	st	X, r24
    2fd8:	51 c0       	rjmp	.+162    	; 0x307c <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    2fda:	a5 e3       	ldi	r26, 0x35	; 53
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	e5 e3       	ldi	r30, 0x35	; 53
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	48 2f       	mov	r20, r24
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	28 2f       	mov	r18, r24
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <DIO_enu_SetPinState+0x136>
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	2a 95       	dec	r18
    2ff8:	e2 f7       	brpl	.-8      	; 0x2ff2 <DIO_enu_SetPinState+0x132>
    2ffa:	80 95       	com	r24
    2ffc:	84 23       	and	r24, r20
    2ffe:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    3000:	a5 e3       	ldi	r26, 0x35	; 53
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	e5 e3       	ldi	r30, 0x35	; 53
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	80 81       	ld	r24, Z
    300a:	48 2f       	mov	r20, r24
    300c:	8c 81       	ldd	r24, Y+4	; 0x04
    300e:	28 2f       	mov	r18, r24
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	8b 81       	ldd	r24, Y+3	; 0x03
    3014:	88 2f       	mov	r24, r24
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	b9 01       	movw	r22, r18
    301a:	02 c0       	rjmp	.+4      	; 0x3020 <DIO_enu_SetPinState+0x160>
    301c:	66 0f       	add	r22, r22
    301e:	77 1f       	adc	r23, r23
    3020:	8a 95       	dec	r24
    3022:	e2 f7       	brpl	.-8      	; 0x301c <DIO_enu_SetPinState+0x15c>
    3024:	cb 01       	movw	r24, r22
    3026:	84 2b       	or	r24, r20
    3028:	8c 93       	st	X, r24
    302a:	28 c0       	rjmp	.+80     	; 0x307c <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    302c:	a2 e3       	ldi	r26, 0x32	; 50
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	e2 e3       	ldi	r30, 0x32	; 50
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	48 2f       	mov	r20, r24
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	28 2f       	mov	r18, r24
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	02 c0       	rjmp	.+4      	; 0x3048 <DIO_enu_SetPinState+0x188>
    3044:	88 0f       	add	r24, r24
    3046:	99 1f       	adc	r25, r25
    3048:	2a 95       	dec	r18
    304a:	e2 f7       	brpl	.-8      	; 0x3044 <DIO_enu_SetPinState+0x184>
    304c:	80 95       	com	r24
    304e:	84 23       	and	r24, r20
    3050:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    3052:	a2 e3       	ldi	r26, 0x32	; 50
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	e2 e3       	ldi	r30, 0x32	; 50
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	80 81       	ld	r24, Z
    305c:	48 2f       	mov	r20, r24
    305e:	8c 81       	ldd	r24, Y+4	; 0x04
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	88 2f       	mov	r24, r24
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	b9 01       	movw	r22, r18
    306c:	02 c0       	rjmp	.+4      	; 0x3072 <DIO_enu_SetPinState+0x1b2>
    306e:	66 0f       	add	r22, r22
    3070:	77 1f       	adc	r23, r23
    3072:	8a 95       	dec	r24
    3074:	e2 f7       	brpl	.-8      	; 0x306e <DIO_enu_SetPinState+0x1ae>
    3076:	cb 01       	movw	r24, r22
    3078:	84 2b       	or	r24, r20
    307a:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    307c:	19 82       	std	Y+1, r1	; 0x01
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3080:	82 e0       	ldi	r24, 0x02	; 2
    3082:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3084:	89 81       	ldd	r24, Y+1	; 0x01
}
    3086:	26 96       	adiw	r28, 0x06	; 6
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	0f be       	out	0x3f, r0	; 63
    3090:	cd bf       	out	0x3d, r28	; 61
    3092:	cf 91       	pop	r28
    3094:	df 91       	pop	r29
    3096:	08 95       	ret

00003098 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	00 d0       	rcall	.+0      	; 0x309e <DIO_enu_SetPinValue+0x6>
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <DIO_enu_SetPinValue+0x8>
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <DIO_enu_SetPinValue+0xa>
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	8a 83       	std	Y+2, r24	; 0x02
    30a8:	6b 83       	std	Y+3, r22	; 0x03
    30aa:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	84 30       	cpi	r24, 0x04	; 4
    30b4:	08 f0       	brcs	.+2      	; 0x30b8 <DIO_enu_SetPinValue+0x20>
    30b6:	db c0       	rjmp	.+438    	; 0x326e <DIO_enu_SetPinValue+0x1d6>
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	88 30       	cpi	r24, 0x08	; 8
    30bc:	08 f0       	brcs	.+2      	; 0x30c0 <DIO_enu_SetPinValue+0x28>
    30be:	d7 c0       	rjmp	.+430    	; 0x326e <DIO_enu_SetPinValue+0x1d6>
    30c0:	8c 81       	ldd	r24, Y+4	; 0x04
    30c2:	82 30       	cpi	r24, 0x02	; 2
    30c4:	08 f0       	brcs	.+2      	; 0x30c8 <DIO_enu_SetPinValue+0x30>
    30c6:	d3 c0       	rjmp	.+422    	; 0x326e <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	3e 83       	std	Y+6, r19	; 0x06
    30d0:	2d 83       	std	Y+5, r18	; 0x05
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	9e 81       	ldd	r25, Y+6	; 0x06
    30d6:	81 30       	cpi	r24, 0x01	; 1
    30d8:	91 05       	cpc	r25, r1
    30da:	09 f4       	brne	.+2      	; 0x30de <DIO_enu_SetPinValue+0x46>
    30dc:	43 c0       	rjmp	.+134    	; 0x3164 <DIO_enu_SetPinValue+0xcc>
    30de:	2d 81       	ldd	r18, Y+5	; 0x05
    30e0:	3e 81       	ldd	r19, Y+6	; 0x06
    30e2:	22 30       	cpi	r18, 0x02	; 2
    30e4:	31 05       	cpc	r19, r1
    30e6:	2c f4       	brge	.+10     	; 0x30f2 <DIO_enu_SetPinValue+0x5a>
    30e8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ea:	9e 81       	ldd	r25, Y+6	; 0x06
    30ec:	00 97       	sbiw	r24, 0x00	; 0
    30ee:	71 f0       	breq	.+28     	; 0x310c <DIO_enu_SetPinValue+0x74>
    30f0:	bc c0       	rjmp	.+376    	; 0x326a <DIO_enu_SetPinValue+0x1d2>
    30f2:	2d 81       	ldd	r18, Y+5	; 0x05
    30f4:	3e 81       	ldd	r19, Y+6	; 0x06
    30f6:	22 30       	cpi	r18, 0x02	; 2
    30f8:	31 05       	cpc	r19, r1
    30fa:	09 f4       	brne	.+2      	; 0x30fe <DIO_enu_SetPinValue+0x66>
    30fc:	5f c0       	rjmp	.+190    	; 0x31bc <DIO_enu_SetPinValue+0x124>
    30fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3100:	9e 81       	ldd	r25, Y+6	; 0x06
    3102:	83 30       	cpi	r24, 0x03	; 3
    3104:	91 05       	cpc	r25, r1
    3106:	09 f4       	brne	.+2      	; 0x310a <DIO_enu_SetPinValue+0x72>
    3108:	85 c0       	rjmp	.+266    	; 0x3214 <DIO_enu_SetPinValue+0x17c>
    310a:	af c0       	rjmp	.+350    	; 0x326a <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    310c:	8c 81       	ldd	r24, Y+4	; 0x04
    310e:	81 30       	cpi	r24, 0x01	; 1
    3110:	a1 f4       	brne	.+40     	; 0x313a <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    3112:	ab e3       	ldi	r26, 0x3B	; 59
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	eb e3       	ldi	r30, 0x3B	; 59
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	48 2f       	mov	r20, r24
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	28 2f       	mov	r18, r24
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	02 2e       	mov	r0, r18
    312a:	02 c0       	rjmp	.+4      	; 0x3130 <DIO_enu_SetPinValue+0x98>
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	0a 94       	dec	r0
    3132:	e2 f7       	brpl	.-8      	; 0x312c <DIO_enu_SetPinValue+0x94>
    3134:	84 2b       	or	r24, r20
    3136:	8c 93       	st	X, r24
    3138:	98 c0       	rjmp	.+304    	; 0x326a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    313a:	ab e3       	ldi	r26, 0x3B	; 59
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	eb e3       	ldi	r30, 0x3B	; 59
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	48 2f       	mov	r20, r24
    3146:	8b 81       	ldd	r24, Y+3	; 0x03
    3148:	28 2f       	mov	r18, r24
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	02 2e       	mov	r0, r18
    3152:	02 c0       	rjmp	.+4      	; 0x3158 <DIO_enu_SetPinValue+0xc0>
    3154:	88 0f       	add	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	0a 94       	dec	r0
    315a:	e2 f7       	brpl	.-8      	; 0x3154 <DIO_enu_SetPinValue+0xbc>
    315c:	80 95       	com	r24
    315e:	84 23       	and	r24, r20
    3160:	8c 93       	st	X, r24
    3162:	83 c0       	rjmp	.+262    	; 0x326a <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    3164:	8c 81       	ldd	r24, Y+4	; 0x04
    3166:	81 30       	cpi	r24, 0x01	; 1
    3168:	a1 f4       	brne	.+40     	; 0x3192 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    316a:	a8 e3       	ldi	r26, 0x38	; 56
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	e8 e3       	ldi	r30, 0x38	; 56
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	48 2f       	mov	r20, r24
    3176:	8b 81       	ldd	r24, Y+3	; 0x03
    3178:	28 2f       	mov	r18, r24
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	02 2e       	mov	r0, r18
    3182:	02 c0       	rjmp	.+4      	; 0x3188 <DIO_enu_SetPinValue+0xf0>
    3184:	88 0f       	add	r24, r24
    3186:	99 1f       	adc	r25, r25
    3188:	0a 94       	dec	r0
    318a:	e2 f7       	brpl	.-8      	; 0x3184 <DIO_enu_SetPinValue+0xec>
    318c:	84 2b       	or	r24, r20
    318e:	8c 93       	st	X, r24
    3190:	6c c0       	rjmp	.+216    	; 0x326a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    3192:	a8 e3       	ldi	r26, 0x38	; 56
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	e8 e3       	ldi	r30, 0x38	; 56
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	48 2f       	mov	r20, r24
    319e:	8b 81       	ldd	r24, Y+3	; 0x03
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	02 2e       	mov	r0, r18
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <DIO_enu_SetPinValue+0x118>
    31ac:	88 0f       	add	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	0a 94       	dec	r0
    31b2:	e2 f7       	brpl	.-8      	; 0x31ac <DIO_enu_SetPinValue+0x114>
    31b4:	80 95       	com	r24
    31b6:	84 23       	and	r24, r20
    31b8:	8c 93       	st	X, r24
    31ba:	57 c0       	rjmp	.+174    	; 0x326a <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    31bc:	8c 81       	ldd	r24, Y+4	; 0x04
    31be:	81 30       	cpi	r24, 0x01	; 1
    31c0:	a1 f4       	brne	.+40     	; 0x31ea <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    31c2:	a5 e3       	ldi	r26, 0x35	; 53
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e5 e3       	ldi	r30, 0x35	; 53
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	48 2f       	mov	r20, r24
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	28 2f       	mov	r18, r24
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	02 2e       	mov	r0, r18
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <DIO_enu_SetPinValue+0x148>
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	0a 94       	dec	r0
    31e2:	e2 f7       	brpl	.-8      	; 0x31dc <DIO_enu_SetPinValue+0x144>
    31e4:	84 2b       	or	r24, r20
    31e6:	8c 93       	st	X, r24
    31e8:	40 c0       	rjmp	.+128    	; 0x326a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    31ea:	a5 e3       	ldi	r26, 0x35	; 53
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	e5 e3       	ldi	r30, 0x35	; 53
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	48 2f       	mov	r20, r24
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	02 2e       	mov	r0, r18
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <DIO_enu_SetPinValue+0x170>
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	0a 94       	dec	r0
    320a:	e2 f7       	brpl	.-8      	; 0x3204 <DIO_enu_SetPinValue+0x16c>
    320c:	80 95       	com	r24
    320e:	84 23       	and	r24, r20
    3210:	8c 93       	st	X, r24
    3212:	2b c0       	rjmp	.+86     	; 0x326a <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    3214:	8c 81       	ldd	r24, Y+4	; 0x04
    3216:	81 30       	cpi	r24, 0x01	; 1
    3218:	a1 f4       	brne	.+40     	; 0x3242 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    321a:	a2 e3       	ldi	r26, 0x32	; 50
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	e2 e3       	ldi	r30, 0x32	; 50
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	48 2f       	mov	r20, r24
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	02 2e       	mov	r0, r18
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <DIO_enu_SetPinValue+0x1a0>
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	0a 94       	dec	r0
    323a:	e2 f7       	brpl	.-8      	; 0x3234 <DIO_enu_SetPinValue+0x19c>
    323c:	84 2b       	or	r24, r20
    323e:	8c 93       	st	X, r24
    3240:	14 c0       	rjmp	.+40     	; 0x326a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    3242:	a2 e3       	ldi	r26, 0x32	; 50
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	e2 e3       	ldi	r30, 0x32	; 50
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	80 81       	ld	r24, Z
    324c:	48 2f       	mov	r20, r24
    324e:	8b 81       	ldd	r24, Y+3	; 0x03
    3250:	28 2f       	mov	r18, r24
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	02 2e       	mov	r0, r18
    325a:	02 c0       	rjmp	.+4      	; 0x3260 <DIO_enu_SetPinValue+0x1c8>
    325c:	88 0f       	add	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	0a 94       	dec	r0
    3262:	e2 f7       	brpl	.-8      	; 0x325c <DIO_enu_SetPinValue+0x1c4>
    3264:	80 95       	com	r24
    3266:	84 23       	and	r24, r20
    3268:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    326a:	19 82       	std	Y+1, r1	; 0x01
    326c:	02 c0       	rjmp	.+4      	; 0x3272 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    326e:	82 e0       	ldi	r24, 0x02	; 2
    3270:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3272:	89 81       	ldd	r24, Y+1	; 0x01
}
    3274:	26 96       	adiw	r28, 0x06	; 6
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	cd bf       	out	0x3d, r28	; 61
    3280:	cf 91       	pop	r28
    3282:	df 91       	pop	r29
    3284:	08 95       	ret

00003286 <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    3286:	df 93       	push	r29
    3288:	cf 93       	push	r28
    328a:	00 d0       	rcall	.+0      	; 0x328c <DIO_enu_TogglePinValue+0x6>
    328c:	00 d0       	rcall	.+0      	; 0x328e <DIO_enu_TogglePinValue+0x8>
    328e:	0f 92       	push	r0
    3290:	cd b7       	in	r28, 0x3d	; 61
    3292:	de b7       	in	r29, 0x3e	; 62
    3294:	8a 83       	std	Y+2, r24	; 0x02
    3296:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    329c:	8a 81       	ldd	r24, Y+2	; 0x02
    329e:	84 30       	cpi	r24, 0x04	; 4
    32a0:	08 f0       	brcs	.+2      	; 0x32a4 <DIO_enu_TogglePinValue+0x1e>
    32a2:	73 c0       	rjmp	.+230    	; 0x338a <DIO_enu_TogglePinValue+0x104>
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
    32a6:	88 30       	cpi	r24, 0x08	; 8
    32a8:	08 f0       	brcs	.+2      	; 0x32ac <DIO_enu_TogglePinValue+0x26>
    32aa:	6f c0       	rjmp	.+222    	; 0x338a <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	28 2f       	mov	r18, r24
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	3d 83       	std	Y+5, r19	; 0x05
    32b4:	2c 83       	std	Y+4, r18	; 0x04
    32b6:	8c 81       	ldd	r24, Y+4	; 0x04
    32b8:	9d 81       	ldd	r25, Y+5	; 0x05
    32ba:	81 30       	cpi	r24, 0x01	; 1
    32bc:	91 05       	cpc	r25, r1
    32be:	49 f1       	breq	.+82     	; 0x3312 <DIO_enu_TogglePinValue+0x8c>
    32c0:	2c 81       	ldd	r18, Y+4	; 0x04
    32c2:	3d 81       	ldd	r19, Y+5	; 0x05
    32c4:	22 30       	cpi	r18, 0x02	; 2
    32c6:	31 05       	cpc	r19, r1
    32c8:	2c f4       	brge	.+10     	; 0x32d4 <DIO_enu_TogglePinValue+0x4e>
    32ca:	8c 81       	ldd	r24, Y+4	; 0x04
    32cc:	9d 81       	ldd	r25, Y+5	; 0x05
    32ce:	00 97       	sbiw	r24, 0x00	; 0
    32d0:	61 f0       	breq	.+24     	; 0x32ea <DIO_enu_TogglePinValue+0x64>
    32d2:	5a c0       	rjmp	.+180    	; 0x3388 <DIO_enu_TogglePinValue+0x102>
    32d4:	2c 81       	ldd	r18, Y+4	; 0x04
    32d6:	3d 81       	ldd	r19, Y+5	; 0x05
    32d8:	22 30       	cpi	r18, 0x02	; 2
    32da:	31 05       	cpc	r19, r1
    32dc:	71 f1       	breq	.+92     	; 0x333a <DIO_enu_TogglePinValue+0xb4>
    32de:	8c 81       	ldd	r24, Y+4	; 0x04
    32e0:	9d 81       	ldd	r25, Y+5	; 0x05
    32e2:	83 30       	cpi	r24, 0x03	; 3
    32e4:	91 05       	cpc	r25, r1
    32e6:	e9 f1       	breq	.+122    	; 0x3362 <DIO_enu_TogglePinValue+0xdc>
    32e8:	4f c0       	rjmp	.+158    	; 0x3388 <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    32ea:	ab e3       	ldi	r26, 0x3B	; 59
    32ec:	b0 e0       	ldi	r27, 0x00	; 0
    32ee:	eb e3       	ldi	r30, 0x3B	; 59
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	48 2f       	mov	r20, r24
    32f6:	8b 81       	ldd	r24, Y+3	; 0x03
    32f8:	28 2f       	mov	r18, r24
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	02 2e       	mov	r0, r18
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <DIO_enu_TogglePinValue+0x82>
    3304:	88 0f       	add	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	0a 94       	dec	r0
    330a:	e2 f7       	brpl	.-8      	; 0x3304 <DIO_enu_TogglePinValue+0x7e>
    330c:	84 27       	eor	r24, r20
    330e:	8c 93       	st	X, r24
    3310:	3b c0       	rjmp	.+118    	; 0x3388 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    3312:	a8 e3       	ldi	r26, 0x38	; 56
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	e8 e3       	ldi	r30, 0x38	; 56
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	80 81       	ld	r24, Z
    331c:	48 2f       	mov	r20, r24
    331e:	8b 81       	ldd	r24, Y+3	; 0x03
    3320:	28 2f       	mov	r18, r24
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	02 2e       	mov	r0, r18
    332a:	02 c0       	rjmp	.+4      	; 0x3330 <DIO_enu_TogglePinValue+0xaa>
    332c:	88 0f       	add	r24, r24
    332e:	99 1f       	adc	r25, r25
    3330:	0a 94       	dec	r0
    3332:	e2 f7       	brpl	.-8      	; 0x332c <DIO_enu_TogglePinValue+0xa6>
    3334:	84 27       	eor	r24, r20
    3336:	8c 93       	st	X, r24
    3338:	27 c0       	rjmp	.+78     	; 0x3388 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    333a:	a5 e3       	ldi	r26, 0x35	; 53
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e5 e3       	ldi	r30, 0x35	; 53
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	48 2f       	mov	r20, r24
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	28 2f       	mov	r18, r24
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	02 2e       	mov	r0, r18
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <DIO_enu_TogglePinValue+0xd2>
    3354:	88 0f       	add	r24, r24
    3356:	99 1f       	adc	r25, r25
    3358:	0a 94       	dec	r0
    335a:	e2 f7       	brpl	.-8      	; 0x3354 <DIO_enu_TogglePinValue+0xce>
    335c:	84 27       	eor	r24, r20
    335e:	8c 93       	st	X, r24
    3360:	13 c0       	rjmp	.+38     	; 0x3388 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    3362:	a2 e3       	ldi	r26, 0x32	; 50
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e2 e3       	ldi	r30, 0x32	; 50
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	48 2f       	mov	r20, r24
    336e:	8b 81       	ldd	r24, Y+3	; 0x03
    3370:	28 2f       	mov	r18, r24
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	02 2e       	mov	r0, r18
    337a:	02 c0       	rjmp	.+4      	; 0x3380 <DIO_enu_TogglePinValue+0xfa>
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	0a 94       	dec	r0
    3382:	e2 f7       	brpl	.-8      	; 0x337c <DIO_enu_TogglePinValue+0xf6>
    3384:	84 27       	eor	r24, r20
    3386:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    3388:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    338a:	89 81       	ldd	r24, Y+1	; 0x01
}
    338c:	0f 90       	pop	r0
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	cf 91       	pop	r28
    3398:	df 91       	pop	r29
    339a:	08 95       	ret

0000339c <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    339c:	df 93       	push	r29
    339e:	cf 93       	push	r28
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	27 97       	sbiw	r28, 0x07	; 7
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	8a 83       	std	Y+2, r24	; 0x02
    33b2:	6b 83       	std	Y+3, r22	; 0x03
    33b4:	5d 83       	std	Y+5, r21	; 0x05
    33b6:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    33bc:	8c 81       	ldd	r24, Y+4	; 0x04
    33be:	9d 81       	ldd	r25, Y+5	; 0x05
    33c0:	00 97       	sbiw	r24, 0x00	; 0
    33c2:	09 f4       	brne	.+2      	; 0x33c6 <DIO_enu_GetPinValue+0x2a>
    33c4:	7d c0       	rjmp	.+250    	; 0x34c0 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    33c6:	8a 81       	ldd	r24, Y+2	; 0x02
    33c8:	84 30       	cpi	r24, 0x04	; 4
    33ca:	08 f0       	brcs	.+2      	; 0x33ce <DIO_enu_GetPinValue+0x32>
    33cc:	76 c0       	rjmp	.+236    	; 0x34ba <DIO_enu_GetPinValue+0x11e>
    33ce:	8b 81       	ldd	r24, Y+3	; 0x03
    33d0:	88 30       	cpi	r24, 0x08	; 8
    33d2:	08 f0       	brcs	.+2      	; 0x33d6 <DIO_enu_GetPinValue+0x3a>
    33d4:	72 c0       	rjmp	.+228    	; 0x34ba <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    33d6:	8a 81       	ldd	r24, Y+2	; 0x02
    33d8:	28 2f       	mov	r18, r24
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	3f 83       	std	Y+7, r19	; 0x07
    33de:	2e 83       	std	Y+6, r18	; 0x06
    33e0:	4e 81       	ldd	r20, Y+6	; 0x06
    33e2:	5f 81       	ldd	r21, Y+7	; 0x07
    33e4:	41 30       	cpi	r20, 0x01	; 1
    33e6:	51 05       	cpc	r21, r1
    33e8:	59 f1       	breq	.+86     	; 0x3440 <DIO_enu_GetPinValue+0xa4>
    33ea:	8e 81       	ldd	r24, Y+6	; 0x06
    33ec:	9f 81       	ldd	r25, Y+7	; 0x07
    33ee:	82 30       	cpi	r24, 0x02	; 2
    33f0:	91 05       	cpc	r25, r1
    33f2:	34 f4       	brge	.+12     	; 0x3400 <DIO_enu_GetPinValue+0x64>
    33f4:	2e 81       	ldd	r18, Y+6	; 0x06
    33f6:	3f 81       	ldd	r19, Y+7	; 0x07
    33f8:	21 15       	cp	r18, r1
    33fa:	31 05       	cpc	r19, r1
    33fc:	69 f0       	breq	.+26     	; 0x3418 <DIO_enu_GetPinValue+0x7c>
    33fe:	5b c0       	rjmp	.+182    	; 0x34b6 <DIO_enu_GetPinValue+0x11a>
    3400:	4e 81       	ldd	r20, Y+6	; 0x06
    3402:	5f 81       	ldd	r21, Y+7	; 0x07
    3404:	42 30       	cpi	r20, 0x02	; 2
    3406:	51 05       	cpc	r21, r1
    3408:	79 f1       	breq	.+94     	; 0x3468 <DIO_enu_GetPinValue+0xcc>
    340a:	8e 81       	ldd	r24, Y+6	; 0x06
    340c:	9f 81       	ldd	r25, Y+7	; 0x07
    340e:	83 30       	cpi	r24, 0x03	; 3
    3410:	91 05       	cpc	r25, r1
    3412:	09 f4       	brne	.+2      	; 0x3416 <DIO_enu_GetPinValue+0x7a>
    3414:	3d c0       	rjmp	.+122    	; 0x3490 <DIO_enu_GetPinValue+0xf4>
    3416:	4f c0       	rjmp	.+158    	; 0x34b6 <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    3418:	e9 e3       	ldi	r30, 0x39	; 57
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	28 2f       	mov	r18, r24
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	88 2f       	mov	r24, r24
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	a9 01       	movw	r20, r18
    342a:	02 c0       	rjmp	.+4      	; 0x3430 <DIO_enu_GetPinValue+0x94>
    342c:	55 95       	asr	r21
    342e:	47 95       	ror	r20
    3430:	8a 95       	dec	r24
    3432:	e2 f7       	brpl	.-8      	; 0x342c <DIO_enu_GetPinValue+0x90>
    3434:	ca 01       	movw	r24, r20
    3436:	81 70       	andi	r24, 0x01	; 1
    3438:	ec 81       	ldd	r30, Y+4	; 0x04
    343a:	fd 81       	ldd	r31, Y+5	; 0x05
    343c:	80 83       	st	Z, r24
    343e:	3b c0       	rjmp	.+118    	; 0x34b6 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    3440:	e6 e3       	ldi	r30, 0x36	; 54
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	80 81       	ld	r24, Z
    3446:	28 2f       	mov	r18, r24
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	8b 81       	ldd	r24, Y+3	; 0x03
    344c:	88 2f       	mov	r24, r24
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	a9 01       	movw	r20, r18
    3452:	02 c0       	rjmp	.+4      	; 0x3458 <DIO_enu_GetPinValue+0xbc>
    3454:	55 95       	asr	r21
    3456:	47 95       	ror	r20
    3458:	8a 95       	dec	r24
    345a:	e2 f7       	brpl	.-8      	; 0x3454 <DIO_enu_GetPinValue+0xb8>
    345c:	ca 01       	movw	r24, r20
    345e:	81 70       	andi	r24, 0x01	; 1
    3460:	ec 81       	ldd	r30, Y+4	; 0x04
    3462:	fd 81       	ldd	r31, Y+5	; 0x05
    3464:	80 83       	st	Z, r24
    3466:	27 c0       	rjmp	.+78     	; 0x34b6 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    3468:	e3 e3       	ldi	r30, 0x33	; 51
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	80 81       	ld	r24, Z
    346e:	28 2f       	mov	r18, r24
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	88 2f       	mov	r24, r24
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	a9 01       	movw	r20, r18
    347a:	02 c0       	rjmp	.+4      	; 0x3480 <DIO_enu_GetPinValue+0xe4>
    347c:	55 95       	asr	r21
    347e:	47 95       	ror	r20
    3480:	8a 95       	dec	r24
    3482:	e2 f7       	brpl	.-8      	; 0x347c <DIO_enu_GetPinValue+0xe0>
    3484:	ca 01       	movw	r24, r20
    3486:	81 70       	andi	r24, 0x01	; 1
    3488:	ec 81       	ldd	r30, Y+4	; 0x04
    348a:	fd 81       	ldd	r31, Y+5	; 0x05
    348c:	80 83       	st	Z, r24
    348e:	13 c0       	rjmp	.+38     	; 0x34b6 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    3490:	e0 e3       	ldi	r30, 0x30	; 48
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	28 2f       	mov	r18, r24
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	8b 81       	ldd	r24, Y+3	; 0x03
    349c:	88 2f       	mov	r24, r24
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	a9 01       	movw	r20, r18
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <DIO_enu_GetPinValue+0x10c>
    34a4:	55 95       	asr	r21
    34a6:	47 95       	ror	r20
    34a8:	8a 95       	dec	r24
    34aa:	e2 f7       	brpl	.-8      	; 0x34a4 <DIO_enu_GetPinValue+0x108>
    34ac:	ca 01       	movw	r24, r20
    34ae:	81 70       	andi	r24, 0x01	; 1
    34b0:	ec 81       	ldd	r30, Y+4	; 0x04
    34b2:	fd 81       	ldd	r31, Y+5	; 0x05
    34b4:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    34b6:	19 82       	std	Y+1, r1	; 0x01
    34b8:	05 c0       	rjmp	.+10     	; 0x34c4 <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    34ba:	82 e0       	ldi	r24, 0x02	; 2
    34bc:	89 83       	std	Y+1, r24	; 0x01
    34be:	02 c0       	rjmp	.+4      	; 0x34c4 <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    34c0:	83 e0       	ldi	r24, 0x03	; 3
    34c2:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    34c6:	27 96       	adiw	r28, 0x07	; 7
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	cd bf       	out	0x3d, r28	; 61
    34d2:	cf 91       	pop	r28
    34d4:	df 91       	pop	r29
    34d6:	08 95       	ret

000034d8 <ADC_enu_Initialization>:
static void* pvid_ISRParameters = NULL;

//APIs implementation

extern ErrorState_t ADC_enu_Initialization(void)
{
    34d8:	df 93       	push	r29
    34da:	cf 93       	push	r28
    34dc:	0f 92       	push	r0
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	89 83       	std	Y+1, r24	; 0x01

    //Bits contain 00
    ADMUX &= ~(3 << ADMUX_REFS0 );
    34e6:	a7 e2       	ldi	r26, 0x27	; 39
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	e7 e2       	ldi	r30, 0x27	; 39
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	80 81       	ld	r24, Z
    34f0:	8f 73       	andi	r24, 0x3F	; 63
    34f2:	8c 93       	st	X, r24
        //bITS ALREADY CONTAIN 00  
    
    #elif ADC_V_REFERENCE_SOURCE == ADC_AVCC
       
        //Bits contain 01
        ADMUX |= (1 < ADMUX_REFS0);
    34f4:	a7 e2       	ldi	r26, 0x27	; 39
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	e7 e2       	ldi	r30, 0x27	; 39
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	80 81       	ld	r24, Z
    34fe:	81 60       	ori	r24, 0x01	; 1
    3500:	8c 93       	st	X, r24


    //Handling Data adjustment direction
    #if  ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED
        //Setting ADLAR bit
        ADMUX |= ( 1 << ADMUX_ADLAR);
    3502:	a7 e2       	ldi	r26, 0x27	; 39
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	e7 e2       	ldi	r30, 0x27	; 39
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 81       	ld	r24, Z
    350c:	80 62       	ori	r24, 0x20	; 32
    350e:	8c 93       	st	X, r24
        ADCSRA &= ~( 1 << ADCSRA_ADATE);

    #elif  ADC_TRIGGER_SOURCE >= ADC_FREE_RUNNING &&  ADC_TRIGGER_SOURCE <= ADC_TIMER1_CAPTURE_EVENT

        //Clearing ADTS bits
        SFIOR &= (0X1F);
    3510:	a0 e5       	ldi	r26, 0x50	; 80
    3512:	b0 e0       	ldi	r27, 0x00	; 0
    3514:	e0 e5       	ldi	r30, 0x50	; 80
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	80 81       	ld	r24, Z
    351a:	8f 71       	andi	r24, 0x1F	; 31
    351c:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (ADC_TRIGGER_SOURCE << SFIOR_ADTS0); 
    351e:	a0 e5       	ldi	r26, 0x50	; 80
    3520:	b0 e0       	ldi	r27, 0x00	; 0
    3522:	e0 e5       	ldi	r30, 0x50	; 80
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	80 81       	ld	r24, Z
    3528:	8c 93       	st	X, r24
        
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    352a:	a6 e2       	ldi	r26, 0x26	; 38
    352c:	b0 e0       	ldi	r27, 0x00	; 0
    352e:	e6 e2       	ldi	r30, 0x26	; 38
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	80 81       	ld	r24, Z
    3534:	80 62       	ori	r24, 0x20	; 32
    3536:	8c 93       	st	X, r24
    #endif


    //Handling Interrupt Event Status (PIE)
    #if ADC_INT_EVENT_STATUS == ADC_INT_ENABLE
        ADCSRA |= ( 1 << ADCSRA_ADIE); //Bit contains 1 
    3538:	a6 e2       	ldi	r26, 0x26	; 38
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	e6 e2       	ldi	r30, 0x26	; 38
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	80 81       	ld	r24, Z
    3542:	88 60       	ori	r24, 0x08	; 8
    3544:	8c 93       	st	X, r24
    #endif


    //Handling ADC clock speed
    //Clearing PS bits
    ADCSRA &= (0xF8);
    3546:	a6 e2       	ldi	r26, 0x26	; 38
    3548:	b0 e0       	ldi	r27, 0x00	; 0
    354a:	e6 e2       	ldi	r30, 0x26	; 38
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	88 7f       	andi	r24, 0xF8	; 248
    3552:	8c 93       	st	X, r24
    #if ADC_PS_FACTOR >= ADC_PS_2 && ADC_PS_FACTOR <= ADC_PS_128 
        
        ADCSRA |= (ADC_PS_FACTOR << ADCSRA_ADPS0);
    3554:	a6 e2       	ldi	r26, 0x26	; 38
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	e6 e2       	ldi	r30, 0x26	; 38
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
    355e:	86 60       	ori	r24, 0x06	; 6
    3560:	8c 93       	st	X, r24

    #endif


    //Handling input channels
    ADMUX &= (0xE0); //Clearing bits
    3562:	a7 e2       	ldi	r26, 0x27	; 39
    3564:	b0 e0       	ldi	r27, 0x00	; 0
    3566:	e7 e2       	ldi	r30, 0x27	; 39
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	80 81       	ld	r24, Z
    356c:	80 7e       	andi	r24, 0xE0	; 224
    356e:	8c 93       	st	X, r24
    #if ADC_INPUT_CHANNEL >= ADC_ADC0 && ADC_INPUT_CHANNEL <= ADC_V_GND
        //Channel Selection
        ADMUX |= (ADC_INPUT_CHANNEL << ADMUX_MUX0);
    3570:	a7 e2       	ldi	r26, 0x27	; 39
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e7 e2       	ldi	r30, 0x27	; 39
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	8c 93       	st	X, r24

    #endif


    // /Powering ADC
    ADCSRA |= (1 << ADCSRA_ADEN );
    357c:	a6 e2       	ldi	r26, 0x26	; 38
    357e:	b0 e0       	ldi	r27, 0x00	; 0
    3580:	e6 e2       	ldi	r30, 0x26	; 38
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	80 81       	ld	r24, Z
    3586:	80 68       	ori	r24, 0x80	; 128
    3588:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    358a:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag; 
    358c:	89 81       	ldd	r24, Y+1	; 0x01
}
    358e:	0f 90       	pop	r0
    3590:	cf 91       	pop	r28
    3592:	df 91       	pop	r29
    3594:	08 95       	ret

00003596 <ADC_enu_ReadPolling>:

extern ErrorState_t ADC_enu_ReadPolling(u8 Copy_u8_Channel, u16* Copy_pu16_Result)
{
    3596:	df 93       	push	r29
    3598:	cf 93       	push	r28
    359a:	00 d0       	rcall	.+0      	; 0x359c <ADC_enu_ReadPolling+0x6>
    359c:	00 d0       	rcall	.+0      	; 0x359e <ADC_enu_ReadPolling+0x8>
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	8a 83       	std	Y+2, r24	; 0x02
    35a4:	7c 83       	std	Y+4, r23	; 0x04
    35a6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8_Channel >= ADC_ADC0) && (Copy_u8_Channel <= ADC_V_GND))
    35ac:	8a 81       	ldd	r24, Y+2	; 0x02
    35ae:	80 32       	cpi	r24, 0x20	; 32
    35b0:	08 f0       	brcs	.+2      	; 0x35b4 <ADC_enu_ReadPolling+0x1e>
    35b2:	50 c0       	rjmp	.+160    	; 0x3654 <ADC_enu_ReadPolling+0xbe>
    {
        //Clearing PIF, Assuming that the ADC is in Polling mode.
        ADCSRA |= (1 << ADCSRA_ADIF);
    35b4:	a6 e2       	ldi	r26, 0x26	; 38
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	e6 e2       	ldi	r30, 0x26	; 38
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	80 81       	ld	r24, Z
    35be:	80 61       	ori	r24, 0x10	; 16
    35c0:	8c 93       	st	X, r24
        
        //Clearing MUX it
        ADMUX &= (0xE0);
    35c2:	a7 e2       	ldi	r26, 0x27	; 39
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	e7 e2       	ldi	r30, 0x27	; 39
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	80 7e       	andi	r24, 0xE0	; 224
    35ce:	8c 93       	st	X, r24

        //Choosing channel
        ADMUX |= (Copy_u8_Channel << ADMUX_MUX0);
    35d0:	a7 e2       	ldi	r26, 0x27	; 39
    35d2:	b0 e0       	ldi	r27, 0x00	; 0
    35d4:	e7 e2       	ldi	r30, 0x27	; 39
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	90 81       	ld	r25, Z
    35da:	8a 81       	ldd	r24, Y+2	; 0x02
    35dc:	89 2b       	or	r24, r25
    35de:	8c 93       	st	X, r24
       
        //Setting ADSC to start a conversion
        ADCSRA |= (1 << ADCSRA_ADSC);
    35e0:	a6 e2       	ldi	r26, 0x26	; 38
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	e6 e2       	ldi	r30, 0x26	; 38
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	80 64       	ori	r24, 0x40	; 64
    35ec:	8c 93       	st	X, r24

        //Waiting for ADC to raise ADIF
        while (((ADCSRA >> ADCSRA_ADIF) & 1) == False);
    35ee:	e6 e2       	ldi	r30, 0x26	; 38
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	82 95       	swap	r24
    35f6:	8f 70       	andi	r24, 0x0F	; 15
    35f8:	88 2f       	mov	r24, r24
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	81 70       	andi	r24, 0x01	; 1
    35fe:	90 70       	andi	r25, 0x00	; 0
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	a9 f3       	breq	.-22     	; 0x35ee <ADC_enu_ReadPolling+0x58>

        
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    3604:	e4 e2       	ldi	r30, 0x24	; 36
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	82 95       	swap	r24
    360c:	86 95       	lsr	r24
    360e:	86 95       	lsr	r24
    3610:	83 70       	andi	r24, 0x03	; 3
    3612:	88 2f       	mov	r24, r24
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	eb 81       	ldd	r30, Y+3	; 0x03
    3618:	fc 81       	ldd	r31, Y+4	; 0x04
    361a:	91 83       	std	Z+1, r25	; 0x01
    361c:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    361e:	eb 81       	ldd	r30, Y+3	; 0x03
    3620:	fc 81       	ldd	r31, Y+4	; 0x04
    3622:	20 81       	ld	r18, Z
    3624:	31 81       	ldd	r19, Z+1	; 0x01
    3626:	e5 e2       	ldi	r30, 0x25	; 37
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	80 81       	ld	r24, Z
    362c:	88 2f       	mov	r24, r24
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	88 0f       	add	r24, r24
    3632:	99 1f       	adc	r25, r25
    3634:	88 0f       	add	r24, r24
    3636:	99 1f       	adc	r25, r25
    3638:	82 2b       	or	r24, r18
    363a:	93 2b       	or	r25, r19
    363c:	eb 81       	ldd	r30, Y+3	; 0x03
    363e:	fc 81       	ldd	r31, Y+4	; 0x04
    3640:	91 83       	std	Z+1, r25	; 0x01
    3642:	80 83       	st	Z, r24
            *Copy_pu16_Result |= (u16)ADCH << 8;

        #endif
   
        //Clearing PIF
        ADCSRA |= (1 << ADCSRA_ADIF);
    3644:	a6 e2       	ldi	r26, 0x26	; 38
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	e6 e2       	ldi	r30, 0x26	; 38
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	80 81       	ld	r24, Z
    364e:	80 61       	ori	r24, 0x10	; 16
    3650:	8c 93       	st	X, r24
    3652:	02 c0       	rjmp	.+4      	; 0x3658 <ADC_enu_ReadPolling+0xc2>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3654:	82 e0       	ldi	r24, 0x02	; 2
    3656:	89 83       	std	Y+1, r24	; 0x01
    }


    Local_u8_ErrorFlag = ES_OK;
    3658:	19 82       	std	Y+1, r1	; 0x01
    

    


    return Local_u8_ErrorFlag;
    365a:	89 81       	ldd	r24, Y+1	; 0x01
}
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	0f 90       	pop	r0
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <ADC_enu_StartConversion>:

extern ErrorState_t ADC_enu_StartConversion(void)
{
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	0f 92       	push	r0
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 <<ADCSRA_ADSC);
    3678:	a6 e2       	ldi	r26, 0x26	; 38
    367a:	b0 e0       	ldi	r27, 0x00	; 0
    367c:	e6 e2       	ldi	r30, 0x26	; 38
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	80 81       	ld	r24, Z
    3682:	80 64       	ori	r24, 0x40	; 64
    3684:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3686:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3688:	89 81       	ldd	r24, Y+1	; 0x01
}
    368a:	0f 90       	pop	r0
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	08 95       	ret

00003692 <ADC_enu_SetTriggerringSource>:

extern ErrorState_t ADC_enu_SetTriggerringSource(u8 Copy_u8_TriggeringSource)
{
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	00 d0       	rcall	.+0      	; 0x3698 <ADC_enu_SetTriggerringSource+0x6>
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_u8_TriggeringSource == ADC_SINGLE_CONVERSION)
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	88 30       	cpi	r24, 0x08	; 8
    36a6:	49 f4       	brne	.+18     	; 0x36ba <ADC_enu_SetTriggerringSource+0x28>
    {
        //Clearing ADATE bit
        ADCSRA &= ~(1 << ADCSRA_ADATE);
    36a8:	a6 e2       	ldi	r26, 0x26	; 38
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	e6 e2       	ldi	r30, 0x26	; 38
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	80 81       	ld	r24, Z
    36b2:	8f 7d       	andi	r24, 0xDF	; 223
    36b4:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    36b6:	19 82       	std	Y+1, r1	; 0x01
    36b8:	28 c0       	rjmp	.+80     	; 0x370a <ADC_enu_SetTriggerringSource+0x78>
    }
    else if((Copy_u8_TriggeringSource >= ADC_FREE_RUNNING) && (Copy_u8_TriggeringSource <= ADC_TIMER1_CAPTURE_EVENT))
    36ba:	8a 81       	ldd	r24, Y+2	; 0x02
    36bc:	88 30       	cpi	r24, 0x08	; 8
    36be:	18 f5       	brcc	.+70     	; 0x3706 <ADC_enu_SetTriggerringSource+0x74>
    {
        //Clearing ADTS bits
        SFIOR &= ~ (1 << SFIOR_ADTS0);
    36c0:	a0 e5       	ldi	r26, 0x50	; 80
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	e0 e5       	ldi	r30, 0x50	; 80
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	80 81       	ld	r24, Z
    36ca:	8f 7d       	andi	r24, 0xDF	; 223
    36cc:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (Copy_u8_TriggeringSource << SFIOR_ADTS0);
    36ce:	a0 e5       	ldi	r26, 0x50	; 80
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	e0 e5       	ldi	r30, 0x50	; 80
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	28 2f       	mov	r18, r24
    36da:	8a 81       	ldd	r24, Y+2	; 0x02
    36dc:	88 2f       	mov	r24, r24
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	88 0f       	add	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	82 95       	swap	r24
    36e6:	92 95       	swap	r25
    36e8:	90 7f       	andi	r25, 0xF0	; 240
    36ea:	98 27       	eor	r25, r24
    36ec:	80 7f       	andi	r24, 0xF0	; 240
    36ee:	98 27       	eor	r25, r24
    36f0:	82 2b       	or	r24, r18
    36f2:	8c 93       	st	X, r24

        //Setting ADATE bit
        ADCSRA |= (1 << ADCSRA_ADATE);
    36f4:	a6 e2       	ldi	r26, 0x26	; 38
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	e6 e2       	ldi	r30, 0x26	; 38
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	80 62       	ori	r24, 0x20	; 32
    3700:	8c 93       	st	X, r24

        Local_u8_ErrorFlag =ES_OK;
    3702:	19 82       	std	Y+1, r1	; 0x01
    3704:	02 c0       	rjmp	.+4      	; 0x370a <ADC_enu_SetTriggerringSource+0x78>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3706:	82 e0       	ldi	r24, 0x02	; 2
    3708:	89 83       	std	Y+1, r24	; 0x01
    }
        
        

    return Local_u8_ErrorFlag;
    370a:	89 81       	ldd	r24, Y+1	; 0x01
}
    370c:	0f 90       	pop	r0
    370e:	0f 90       	pop	r0
    3710:	cf 91       	pop	r28
    3712:	df 91       	pop	r29
    3714:	08 95       	ret

00003716 <ADC_enu_ChangePrescalerFactor>:

extern ErrorState_t ADC_enu_ChangePrescalerFactor(u8 Copy_u8_DivisonFactor)
{
    3716:	df 93       	push	r29
    3718:	cf 93       	push	r28
    371a:	00 d0       	rcall	.+0      	; 0x371c <ADC_enu_ChangePrescalerFactor+0x6>
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_DivisonFactor >= ADC_PS_2) && (Copy_u8_DivisonFactor <= ADC_PS_128))
    3726:	8a 81       	ldd	r24, Y+2	; 0x02
    3728:	88 23       	and	r24, r24
    372a:	a1 f0       	breq	.+40     	; 0x3754 <ADC_enu_ChangePrescalerFactor+0x3e>
    372c:	8a 81       	ldd	r24, Y+2	; 0x02
    372e:	88 30       	cpi	r24, 0x08	; 8
    3730:	88 f4       	brcc	.+34     	; 0x3754 <ADC_enu_ChangePrescalerFactor+0x3e>
    {
        //Clearins PS bits
        ADCSRA &= ~ (7 << ADCSRA_ADPS0);
    3732:	a6 e2       	ldi	r26, 0x26	; 38
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	e6 e2       	ldi	r30, 0x26	; 38
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	80 81       	ld	r24, Z
    373c:	88 7f       	andi	r24, 0xF8	; 248
    373e:	8c 93       	st	X, r24

        //Choosing divisuon factor
        ADCSRA |=  (Copy_u8_DivisonFactor << ADCSRA_ADPS0);
    3740:	a6 e2       	ldi	r26, 0x26	; 38
    3742:	b0 e0       	ldi	r27, 0x00	; 0
    3744:	e6 e2       	ldi	r30, 0x26	; 38
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	90 81       	ld	r25, Z
    374a:	8a 81       	ldd	r24, Y+2	; 0x02
    374c:	89 2b       	or	r24, r25
    374e:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    3750:	19 82       	std	Y+1, r1	; 0x01
    3752:	02 c0       	rjmp	.+4      	; 0x3758 <ADC_enu_ChangePrescalerFactor+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3754:	82 e0       	ldi	r24, 0x02	; 2
    3756:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    3758:	89 81       	ldd	r24, Y+1	; 0x01
}
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	08 95       	ret

00003764 <ADC_enu_ReadADCH>:

extern ErrorState_t ADC_enu_ReadADCH(u16* Copy_pu16_Result)
{
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	00 d0       	rcall	.+0      	; 0x376a <ADC_enu_ReadADCH+0x6>
    376a:	0f 92       	push	r0
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	9b 83       	std	Y+3, r25	; 0x03
    3772:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	89 83       	std	Y+1, r24	; 0x01


    if(Copy_pu16_Result)
    3778:	8a 81       	ldd	r24, Y+2	; 0x02
    377a:	9b 81       	ldd	r25, Y+3	; 0x03
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	79 f0       	breq	.+30     	; 0x379e <ADC_enu_ReadADCH+0x3a>
            
            *Copy_pu16_Result = (u16)ADCH << 8;
        
        #else ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED

                *Copy_pu16_Result = (u16)ADCH << 2;
    3780:	e5 e2       	ldi	r30, 0x25	; 37
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	80 81       	ld	r24, Z
    3786:	88 2f       	mov	r24, r24
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	88 0f       	add	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	ea 81       	ldd	r30, Y+2	; 0x02
    3794:	fb 81       	ldd	r31, Y+3	; 0x03
    3796:	91 83       	std	Z+1, r25	; 0x01
    3798:	80 83       	st	Z, r24

        #endif

        Local_u8_ErrorFlag = ES_OK;
    379a:	19 82       	std	Y+1, r1	; 0x01
    379c:	02 c0       	rjmp	.+4      	; 0x37a2 <ADC_enu_ReadADCH+0x3e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    379e:	83 e0       	ldi	r24, 0x03	; 3
    37a0:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	0f 90       	pop	r0
    37aa:	cf 91       	pop	r28
    37ac:	df 91       	pop	r29
    37ae:	08 95       	ret

000037b0 <ADC_enu_ReadADCL>:

extern ErrorState_t ADC_enu_ReadADCL(u16* Copy_pu16_Result)
{
    37b0:	df 93       	push	r29
    37b2:	cf 93       	push	r28
    37b4:	00 d0       	rcall	.+0      	; 0x37b6 <ADC_enu_ReadADCL+0x6>
    37b6:	0f 92       	push	r0
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
    37bc:	9b 83       	std	Y+3, r25	; 0x03
    37be:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	9b 81       	ldd	r25, Y+3	; 0x03
    37c8:	00 97       	sbiw	r24, 0x00	; 0
    37ca:	11 f0       	breq	.+4      	; 0x37d0 <ADC_enu_ReadADCL+0x20>

            

        #endif

        Local_u8_ErrorFlag = ES_OK;
    37cc:	19 82       	std	Y+1, r1	; 0x01
    37ce:	02 c0       	rjmp	.+4      	; 0x37d4 <ADC_enu_ReadADCL+0x24>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    37d0:	83 e0       	ldi	r24, 0x03	; 3
    37d2:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	cf 91       	pop	r28
    37de:	df 91       	pop	r29
    37e0:	08 95       	ret

000037e2 <ADC_enu_ReadData>:

extern ErrorState_t ADC_enu_ReadData(u16* Copy_pu16_Result)
{
    37e2:	df 93       	push	r29
    37e4:	cf 93       	push	r28
    37e6:	00 d0       	rcall	.+0      	; 0x37e8 <ADC_enu_ReadData+0x6>
    37e8:	0f 92       	push	r0
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
    37ee:	9b 83       	std	Y+3, r25	; 0x03
    37f0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	9b 81       	ldd	r25, Y+3	; 0x03
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	11 f1       	breq	.+68     	; 0x3842 <ADC_enu_ReadData+0x60>
    {
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    37fe:	e4 e2       	ldi	r30, 0x24	; 36
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	82 95       	swap	r24
    3806:	86 95       	lsr	r24
    3808:	86 95       	lsr	r24
    380a:	83 70       	andi	r24, 0x03	; 3
    380c:	88 2f       	mov	r24, r24
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	ea 81       	ldd	r30, Y+2	; 0x02
    3812:	fb 81       	ldd	r31, Y+3	; 0x03
    3814:	91 83       	std	Z+1, r25	; 0x01
    3816:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    3818:	ea 81       	ldd	r30, Y+2	; 0x02
    381a:	fb 81       	ldd	r31, Y+3	; 0x03
    381c:	20 81       	ld	r18, Z
    381e:	31 81       	ldd	r19, Z+1	; 0x01
    3820:	e5 e2       	ldi	r30, 0x25	; 37
    3822:	f0 e0       	ldi	r31, 0x00	; 0
    3824:	80 81       	ld	r24, Z
    3826:	88 2f       	mov	r24, r24
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	88 0f       	add	r24, r24
    382c:	99 1f       	adc	r25, r25
    382e:	88 0f       	add	r24, r24
    3830:	99 1f       	adc	r25, r25
    3832:	82 2b       	or	r24, r18
    3834:	93 2b       	or	r25, r19
    3836:	ea 81       	ldd	r30, Y+2	; 0x02
    3838:	fb 81       	ldd	r31, Y+3	; 0x03
    383a:	91 83       	std	Z+1, r25	; 0x01
    383c:	80 83       	st	Z, r24

        #endif

        

        Local_u8_ErrorFlag = ES_OK;
    383e:	19 82       	std	Y+1, r1	; 0x01
    3840:	02 c0       	rjmp	.+4      	; 0x3846 <ADC_enu_ReadData+0x64>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3842:	83 e0       	ldi	r24, 0x03	; 3
    3844:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    3846:	89 81       	ldd	r24, Y+1	; 0x01
}
    3848:	0f 90       	pop	r0
    384a:	0f 90       	pop	r0
    384c:	0f 90       	pop	r0
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	08 95       	ret

00003854 <ADC_enu_EnableINT>:

extern ErrorState_t ADC_enu_EnableINT(void)
{
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	0f 92       	push	r0
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
    
    u8 Local_u8_ErrorFlag = ES_NOK;
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADIE);
    3862:	a6 e2       	ldi	r26, 0x26	; 38
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	e6 e2       	ldi	r30, 0x26	; 38
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	80 81       	ld	r24, Z
    386c:	88 60       	ori	r24, 0x08	; 8
    386e:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3870:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    3872:	89 81       	ldd	r24, Y+1	; 0x01
}
    3874:	0f 90       	pop	r0
    3876:	cf 91       	pop	r28
    3878:	df 91       	pop	r29
    387a:	08 95       	ret

0000387c <ADC_enu_DisableINT>:

extern ErrorState_t ADC_enu_DisableINT(void)
{
    387c:	df 93       	push	r29
    387e:	cf 93       	push	r28
    3880:	0f 92       	push	r0
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADIE);
    388a:	a6 e2       	ldi	r26, 0x26	; 38
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	e6 e2       	ldi	r30, 0x26	; 38
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	80 81       	ld	r24, Z
    3894:	87 7f       	andi	r24, 0xF7	; 247
    3896:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3898:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    389a:	89 81       	ldd	r24, Y+1	; 0x01
}
    389c:	0f 90       	pop	r0
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	08 95       	ret

000038a4 <ADC_enu_EnableADC>:

extern ErrorState_t ADC_enu_EnableADC(void)
{
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	0f 92       	push	r0
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADEN);
    38b2:	a6 e2       	ldi	r26, 0x26	; 38
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	e6 e2       	ldi	r30, 0x26	; 38
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 81       	ld	r24, Z
    38bc:	80 68       	ori	r24, 0x80	; 128
    38be:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    38c0:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    38c2:	89 81       	ldd	r24, Y+1	; 0x01

}
    38c4:	0f 90       	pop	r0
    38c6:	cf 91       	pop	r28
    38c8:	df 91       	pop	r29
    38ca:	08 95       	ret

000038cc <ADC_enu_DisableADC>:

extern ErrorState_t ADC_enu_DisableADC(void)
{
    38cc:	df 93       	push	r29
    38ce:	cf 93       	push	r28
    38d0:	0f 92       	push	r0
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADEN);
    38da:	a6 e2       	ldi	r26, 0x26	; 38
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	e6 e2       	ldi	r30, 0x26	; 38
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 81       	ld	r24, Z
    38e4:	8f 77       	andi	r24, 0x7F	; 127
    38e6:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    38e8:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    38ea:	89 81       	ldd	r24, Y+1	; 0x01

}
    38ec:	0f 90       	pop	r0
    38ee:	cf 91       	pop	r28
    38f0:	df 91       	pop	r29
    38f2:	08 95       	ret

000038f4 <ADC_enu_SetCallBack>:

extern ErrorState_t ADC_enu_SetCallBack(void (*Copy_pfun_AppFunction)(void), void* Copy_u8_Parameters)
{
    38f4:	df 93       	push	r29
    38f6:	cf 93       	push	r28
    38f8:	00 d0       	rcall	.+0      	; 0x38fa <ADC_enu_SetCallBack+0x6>
    38fa:	00 d0       	rcall	.+0      	; 0x38fc <ADC_enu_SetCallBack+0x8>
    38fc:	0f 92       	push	r0
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    3902:	9b 83       	std	Y+3, r25	; 0x03
    3904:	8a 83       	std	Y+2, r24	; 0x02
    3906:	7d 83       	std	Y+5, r23	; 0x05
    3908:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    390e:	8a 81       	ldd	r24, Y+2	; 0x02
    3910:	9b 81       	ldd	r25, Y+3	; 0x03
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	69 f0       	breq	.+26     	; 0x3930 <ADC_enu_SetCallBack+0x3c>
    {
        pfun_ISRPointer = Copy_pfun_AppFunction;
    3916:	8a 81       	ldd	r24, Y+2	; 0x02
    3918:	9b 81       	ldd	r25, Y+3	; 0x03
    391a:	90 93 d5 01 	sts	0x01D5, r25
    391e:	80 93 d4 01 	sts	0x01D4, r24

        pvid_ISRParameters = Copy_u8_Parameters;
    3922:	8c 81       	ldd	r24, Y+4	; 0x04
    3924:	9d 81       	ldd	r25, Y+5	; 0x05
    3926:	90 93 d7 01 	sts	0x01D7, r25
    392a:	80 93 d6 01 	sts	0x01D6, r24
        
        Local_u8_ErrorFlag = ES_OK;
    392e:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_ErrorFlag;
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <__vector_16>:

//ISR functions

void __vector_16 (void)__attribute__((signal));
void __vector_16 (void)
{
    3942:	1f 92       	push	r1
    3944:	0f 92       	push	r0
    3946:	0f b6       	in	r0, 0x3f	; 63
    3948:	0f 92       	push	r0
    394a:	11 24       	eor	r1, r1
    394c:	2f 93       	push	r18
    394e:	3f 93       	push	r19
    3950:	4f 93       	push	r20
    3952:	5f 93       	push	r21
    3954:	6f 93       	push	r22
    3956:	7f 93       	push	r23
    3958:	8f 93       	push	r24
    395a:	9f 93       	push	r25
    395c:	af 93       	push	r26
    395e:	bf 93       	push	r27
    3960:	ef 93       	push	r30
    3962:	ff 93       	push	r31
    3964:	df 93       	push	r29
    3966:	cf 93       	push	r28
    3968:	cd b7       	in	r28, 0x3d	; 61
    396a:	de b7       	in	r29, 0x3e	; 62
    if (pfun_ISRPointer != NULL)
    396c:	80 91 d4 01 	lds	r24, 0x01D4
    3970:	90 91 d5 01 	lds	r25, 0x01D5
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	49 f0       	breq	.+18     	; 0x398a <__vector_16+0x48>
    {
        pfun_ISRPointer (pvid_ISRParameters);
    3978:	e0 91 d4 01 	lds	r30, 0x01D4
    397c:	f0 91 d5 01 	lds	r31, 0x01D5
    3980:	80 91 d6 01 	lds	r24, 0x01D6
    3984:	90 91 d7 01 	lds	r25, 0x01D7
    3988:	09 95       	icall
    }
    398a:	cf 91       	pop	r28
    398c:	df 91       	pop	r29
    398e:	ff 91       	pop	r31
    3990:	ef 91       	pop	r30
    3992:	bf 91       	pop	r27
    3994:	af 91       	pop	r26
    3996:	9f 91       	pop	r25
    3998:	8f 91       	pop	r24
    399a:	7f 91       	pop	r23
    399c:	6f 91       	pop	r22
    399e:	5f 91       	pop	r21
    39a0:	4f 91       	pop	r20
    39a2:	3f 91       	pop	r19
    39a4:	2f 91       	pop	r18
    39a6:	0f 90       	pop	r0
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	0f 90       	pop	r0
    39ac:	1f 90       	pop	r1
    39ae:	18 95       	reti

000039b0 <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <SW_enu_Initialization+0x6>
    39b6:	00 d0       	rcall	.+0      	; 0x39b8 <SW_enu_Initialization+0x8>
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
    39bc:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};
    39be:	1b 82       	std	Y+3, r1	; 0x03
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	8c 83       	std	Y+4, r24	; 0x04

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    39c4:	19 82       	std	Y+1, r1	; 0x01
    39c6:	53 c0       	rjmp	.+166    	; 0x3a6e <SW_enu_Initialization+0xbe>
    {
        
       Local_au8_ErrorStates[0] = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    39c8:	89 81       	ldd	r24, Y+1	; 0x01
    39ca:	28 2f       	mov	r18, r24
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	c9 01       	movw	r24, r18
    39d0:	88 0f       	add	r24, r24
    39d2:	99 1f       	adc	r25, r25
    39d4:	82 0f       	add	r24, r18
    39d6:	93 1f       	adc	r25, r19
    39d8:	fc 01       	movw	r30, r24
    39da:	ed 58       	subi	r30, 0x8D	; 141
    39dc:	fe 4f       	sbci	r31, 0xFE	; 254
    39de:	40 81       	ld	r20, Z
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	28 2f       	mov	r18, r24
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	c9 01       	movw	r24, r18
    39e8:	88 0f       	add	r24, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	82 0f       	add	r24, r18
    39ee:	93 1f       	adc	r25, r19
    39f0:	fc 01       	movw	r30, r24
    39f2:	ec 58       	subi	r30, 0x8C	; 140
    39f4:	fe 4f       	sbci	r31, 0xFE	; 254
    39f6:	90 81       	ld	r25, Z
    39f8:	84 2f       	mov	r24, r20
    39fa:	69 2f       	mov	r22, r25
    39fc:	40 e0       	ldi	r20, 0x00	; 0
    39fe:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
    3a02:	8b 83       	std	Y+3, r24	; 0x03

       Local_au8_ErrorStates[1] = DIO_enu_SetPinState(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	28 2f       	mov	r18, r24
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	c9 01       	movw	r24, r18
    3a0c:	88 0f       	add	r24, r24
    3a0e:	99 1f       	adc	r25, r25
    3a10:	82 0f       	add	r24, r18
    3a12:	93 1f       	adc	r25, r19
    3a14:	fc 01       	movw	r30, r24
    3a16:	ed 58       	subi	r30, 0x8D	; 141
    3a18:	fe 4f       	sbci	r31, 0xFE	; 254
    3a1a:	50 81       	ld	r21, Z
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	28 2f       	mov	r18, r24
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	c9 01       	movw	r24, r18
    3a24:	88 0f       	add	r24, r24
    3a26:	99 1f       	adc	r25, r25
    3a28:	82 0f       	add	r24, r18
    3a2a:	93 1f       	adc	r25, r19
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	ec 58       	subi	r30, 0x8C	; 140
    3a30:	fe 4f       	sbci	r31, 0xFE	; 254
    3a32:	40 81       	ld	r20, Z
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	28 2f       	mov	r18, r24
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	c9 01       	movw	r24, r18
    3a3c:	88 0f       	add	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	82 0f       	add	r24, r18
    3a42:	93 1f       	adc	r25, r19
    3a44:	fc 01       	movw	r30, r24
    3a46:	eb 58       	subi	r30, 0x8B	; 139
    3a48:	fe 4f       	sbci	r31, 0xFE	; 254
    3a4a:	90 81       	ld	r25, Z
    3a4c:	85 2f       	mov	r24, r21
    3a4e:	64 2f       	mov	r22, r20
    3a50:	49 2f       	mov	r20, r25
    3a52:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DIO_enu_SetPinState>
    3a56:	8c 83       	std	Y+4, r24	; 0x04
   
        if((Local_au8_ErrorStates[0] == ES_NOK ) || (Local_au8_ErrorStates[1] == ES_NOK) )
    3a58:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5a:	81 30       	cpi	r24, 0x01	; 1
    3a5c:	19 f0       	breq	.+6      	; 0x3a64 <SW_enu_Initialization+0xb4>
    3a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a60:	81 30       	cpi	r24, 0x01	; 1
    3a62:	11 f4       	brne	.+4      	; 0x3a68 <SW_enu_Initialization+0xb8>
        {
            Local_u8_ErrorFlag = ES_NOK;
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	8a 83       	std	Y+2, r24	; 0x02
{
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	8f 5f       	subi	r24, 0xFF	; 255
    3a6c:	89 83       	std	Y+1, r24	; 0x01
    3a6e:	90 91 72 01 	lds	r25, 0x0172
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	89 17       	cp	r24, r25
    3a76:	08 f4       	brcc	.+2      	; 0x3a7a <SW_enu_Initialization+0xca>
    3a78:	a7 cf       	rjmp	.-178    	; 0x39c8 <SW_enu_Initialization+0x18>
        }

    }


    return Local_u8_ErrorFlag;
    3a7a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3a7c:	0f 90       	pop	r0
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	cf 91       	pop	r28
    3a86:	df 91       	pop	r29
    3a88:	08 95       	ret

00003a8a <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    3a8a:	df 93       	push	r29
    3a8c:	cf 93       	push	r28
    3a8e:	00 d0       	rcall	.+0      	; 0x3a90 <SW_enu_GetSwValue+0x6>
    3a90:	00 d0       	rcall	.+0      	; 0x3a92 <SW_enu_GetSwValue+0x8>
    3a92:	cd b7       	in	r28, 0x3d	; 61
    3a94:	de b7       	in	r29, 0x3e	; 62
    3a96:	8a 83       	std	Y+2, r24	; 0x02
    3a98:	7c 83       	std	Y+4, r23	; 0x04
    3a9a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    3aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	49 f1       	breq	.+82     	; 0x3afa <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    3aa8:	90 91 72 01 	lds	r25, 0x0172
    3aac:	8a 81       	ldd	r24, Y+2	; 0x02
    3aae:	98 17       	cp	r25, r24
    3ab0:	08 f1       	brcs	.+66     	; 0x3af4 <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    3ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab4:	28 2f       	mov	r18, r24
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	c9 01       	movw	r24, r18
    3aba:	88 0f       	add	r24, r24
    3abc:	99 1f       	adc	r25, r25
    3abe:	82 0f       	add	r24, r18
    3ac0:	93 1f       	adc	r25, r19
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	ed 58       	subi	r30, 0x8D	; 141
    3ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac8:	40 81       	ld	r20, Z
    3aca:	8a 81       	ldd	r24, Y+2	; 0x02
    3acc:	28 2f       	mov	r18, r24
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	c9 01       	movw	r24, r18
    3ad2:	88 0f       	add	r24, r24
    3ad4:	99 1f       	adc	r25, r25
    3ad6:	82 0f       	add	r24, r18
    3ad8:	93 1f       	adc	r25, r19
    3ada:	fc 01       	movw	r30, r24
    3adc:	ec 58       	subi	r30, 0x8C	; 140
    3ade:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae0:	90 81       	ld	r25, Z
    3ae2:	2b 81       	ldd	r18, Y+3	; 0x03
    3ae4:	3c 81       	ldd	r19, Y+4	; 0x04
    3ae6:	84 2f       	mov	r24, r20
    3ae8:	69 2f       	mov	r22, r25
    3aea:	a9 01       	movw	r20, r18
    3aec:	0e 94 ce 19 	call	0x339c	; 0x339c <DIO_enu_GetPinValue>
    3af0:	89 83       	std	Y+1, r24	; 0x01
    3af2:	05 c0       	rjmp	.+10     	; 0x3afe <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3af4:	82 e0       	ldi	r24, 0x02	; 2
    3af6:	89 83       	std	Y+1, r24	; 0x01
    3af8:	02 c0       	rjmp	.+4      	; 0x3afe <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3afa:	83 e0       	ldi	r24, 0x03	; 3
    3afc:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3afe:	89 81       	ldd	r24, Y+1	; 0x01

}
    3b00:	0f 90       	pop	r0
    3b02:	0f 90       	pop	r0
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	cf 91       	pop	r28
    3b0a:	df 91       	pop	r29
    3b0c:	08 95       	ret

00003b0e <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    3b0e:	df 93       	push	r29
    3b10:	cf 93       	push	r28
    3b12:	00 d0       	rcall	.+0      	; 0x3b14 <Relay_enu_Initialization+0x6>
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3b1c:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3b1e:	19 82       	std	Y+1, r1	; 0x01
    3b20:	31 c0       	rjmp	.+98     	; 0x3b84 <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	88 2f       	mov	r24, r24
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	88 0f       	add	r24, r24
    3b2a:	99 1f       	adc	r25, r25
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	e9 58       	subi	r30, 0x89	; 137
    3b30:	fe 4f       	sbci	r31, 0xFE	; 254
    3b32:	20 81       	ld	r18, Z
    3b34:	89 81       	ldd	r24, Y+1	; 0x01
    3b36:	88 2f       	mov	r24, r24
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	88 0f       	add	r24, r24
    3b3c:	99 1f       	adc	r25, r25
    3b3e:	fc 01       	movw	r30, r24
    3b40:	e8 58       	subi	r30, 0x88	; 136
    3b42:	fe 4f       	sbci	r31, 0xFE	; 254
    3b44:	90 81       	ld	r25, Z
    3b46:	82 2f       	mov	r24, r18
    3b48:	69 2f       	mov	r22, r25
    3b4a:	41 e0       	ldi	r20, 0x01	; 1
    3b4c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	88 2f       	mov	r24, r24
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	88 0f       	add	r24, r24
    3b58:	99 1f       	adc	r25, r25
    3b5a:	fc 01       	movw	r30, r24
    3b5c:	e9 58       	subi	r30, 0x89	; 137
    3b5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b60:	20 81       	ld	r18, Z
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
    3b64:	88 2f       	mov	r24, r24
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	88 0f       	add	r24, r24
    3b6a:	99 1f       	adc	r25, r25
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	e8 58       	subi	r30, 0x88	; 136
    3b70:	fe 4f       	sbci	r31, 0xFE	; 254
    3b72:	90 81       	ld	r25, Z
    3b74:	82 2f       	mov	r24, r18
    3b76:	69 2f       	mov	r22, r25
    3b78:	40 e0       	ldi	r20, 0x00	; 0
    3b7a:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	8f 5f       	subi	r24, 0xFF	; 255
    3b82:	89 83       	std	Y+1, r24	; 0x01
    3b84:	90 91 76 01 	lds	r25, 0x0176
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	89 17       	cp	r24, r25
    3b8c:	50 f2       	brcs	.-108    	; 0x3b22 <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    3b8e:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    3b90:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	cf 91       	pop	r28
    3b98:	df 91       	pop	r29
    3b9a:	08 95       	ret

00003b9c <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    3b9c:	df 93       	push	r29
    3b9e:	cf 93       	push	r28
    3ba0:	00 d0       	rcall	.+0      	; 0x3ba2 <Relay_enu_TuronOnRelay+0x6>
    3ba2:	cd b7       	in	r28, 0x3d	; 61
    3ba4:	de b7       	in	r29, 0x3e	; 62
    3ba6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    3bac:	90 91 76 01 	lds	r25, 0x0176
    3bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb2:	89 17       	cp	r24, r25
    3bb4:	c8 f4       	brcc	.+50     	; 0x3be8 <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    3bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb8:	88 2f       	mov	r24, r24
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	88 0f       	add	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	fc 01       	movw	r30, r24
    3bc2:	e9 58       	subi	r30, 0x89	; 137
    3bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bc6:	20 81       	ld	r18, Z
    3bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bca:	88 2f       	mov	r24, r24
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	88 0f       	add	r24, r24
    3bd0:	99 1f       	adc	r25, r25
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	e8 58       	subi	r30, 0x88	; 136
    3bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd8:	90 81       	ld	r25, Z
    3bda:	82 2f       	mov	r24, r18
    3bdc:	69 2f       	mov	r22, r25
    3bde:	41 e0       	ldi	r20, 0x01	; 1
    3be0:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    3be4:	89 83       	std	Y+1, r24	; 0x01
    3be6:	02 c0       	rjmp	.+4      	; 0x3bec <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3be8:	82 e0       	ldi	r24, 0x02	; 2
    3bea:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	cf 91       	pop	r28
    3bf4:	df 91       	pop	r29
    3bf6:	08 95       	ret

00003bf8 <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    3bf8:	df 93       	push	r29
    3bfa:	cf 93       	push	r28
    3bfc:	00 d0       	rcall	.+0      	; 0x3bfe <Relay_enu_TuronOffRelay+0x6>
    3bfe:	cd b7       	in	r28, 0x3d	; 61
    3c00:	de b7       	in	r29, 0x3e	; 62
    3c02:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    3c08:	90 91 76 01 	lds	r25, 0x0176
    3c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0e:	89 17       	cp	r24, r25
    3c10:	c8 f4       	brcc	.+50     	; 0x3c44 <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    3c12:	8a 81       	ldd	r24, Y+2	; 0x02
    3c14:	88 2f       	mov	r24, r24
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	88 0f       	add	r24, r24
    3c1a:	99 1f       	adc	r25, r25
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	e9 58       	subi	r30, 0x89	; 137
    3c20:	fe 4f       	sbci	r31, 0xFE	; 254
    3c22:	20 81       	ld	r18, Z
    3c24:	8a 81       	ldd	r24, Y+2	; 0x02
    3c26:	88 2f       	mov	r24, r24
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	88 0f       	add	r24, r24
    3c2c:	99 1f       	adc	r25, r25
    3c2e:	fc 01       	movw	r30, r24
    3c30:	e8 58       	subi	r30, 0x88	; 136
    3c32:	fe 4f       	sbci	r31, 0xFE	; 254
    3c34:	90 81       	ld	r25, Z
    3c36:	82 2f       	mov	r24, r18
    3c38:	69 2f       	mov	r22, r25
    3c3a:	40 e0       	ldi	r20, 0x00	; 0
    3c3c:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    3c40:	89 83       	std	Y+1, r24	; 0x01
    3c42:	02 c0       	rjmp	.+4      	; 0x3c48 <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3c44:	82 e0       	ldi	r24, 0x02	; 2
    3c46:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	cf 91       	pop	r28
    3c50:	df 91       	pop	r29
    3c52:	08 95       	ret

00003c54 <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    3c54:	df 93       	push	r29
    3c56:	cf 93       	push	r28
    3c58:	00 d0       	rcall	.+0      	; 0x3c5a <Relay_enu_TurnOnAllRelays+0x6>
    3c5a:	cd b7       	in	r28, 0x3d	; 61
    3c5c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3c62:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3c64:	19 82       	std	Y+1, r1	; 0x01
    3c66:	1a c0       	rjmp	.+52     	; 0x3c9c <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	88 2f       	mov	r24, r24
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	88 0f       	add	r24, r24
    3c70:	99 1f       	adc	r25, r25
    3c72:	fc 01       	movw	r30, r24
    3c74:	e9 58       	subi	r30, 0x89	; 137
    3c76:	fe 4f       	sbci	r31, 0xFE	; 254
    3c78:	20 81       	ld	r18, Z
    3c7a:	89 81       	ldd	r24, Y+1	; 0x01
    3c7c:	88 2f       	mov	r24, r24
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	88 0f       	add	r24, r24
    3c82:	99 1f       	adc	r25, r25
    3c84:	fc 01       	movw	r30, r24
    3c86:	e8 58       	subi	r30, 0x88	; 136
    3c88:	fe 4f       	sbci	r31, 0xFE	; 254
    3c8a:	90 81       	ld	r25, Z
    3c8c:	82 2f       	mov	r24, r18
    3c8e:	69 2f       	mov	r22, r25
    3c90:	41 e0       	ldi	r20, 0x01	; 1
    3c92:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	8f 5f       	subi	r24, 0xFF	; 255
    3c9a:	89 83       	std	Y+1, r24	; 0x01
    3c9c:	90 91 76 01 	lds	r25, 0x0176
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	89 17       	cp	r24, r25
    3ca4:	08 f3       	brcs	.-62     	; 0x3c68 <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3ca6:	82 e0       	ldi	r24, 0x02	; 2
    3ca8:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    3caa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	cf 91       	pop	r28
    3cb2:	df 91       	pop	r29
    3cb4:	08 95       	ret

00003cb6 <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    3cb6:	df 93       	push	r29
    3cb8:	cf 93       	push	r28
    3cba:	00 d0       	rcall	.+0      	; 0x3cbc <Relay_enu_TurnOffAllRelays+0x6>
    3cbc:	cd b7       	in	r28, 0x3d	; 61
    3cbe:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3cc4:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3cc6:	19 82       	std	Y+1, r1	; 0x01
    3cc8:	1a c0       	rjmp	.+52     	; 0x3cfe <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	88 2f       	mov	r24, r24
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	88 0f       	add	r24, r24
    3cd2:	99 1f       	adc	r25, r25
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	e9 58       	subi	r30, 0x89	; 137
    3cd8:	fe 4f       	sbci	r31, 0xFE	; 254
    3cda:	20 81       	ld	r18, Z
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	88 2f       	mov	r24, r24
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	88 0f       	add	r24, r24
    3ce4:	99 1f       	adc	r25, r25
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	e8 58       	subi	r30, 0x88	; 136
    3cea:	fe 4f       	sbci	r31, 0xFE	; 254
    3cec:	90 81       	ld	r25, Z
    3cee:	82 2f       	mov	r24, r18
    3cf0:	69 2f       	mov	r22, r25
    3cf2:	40 e0       	ldi	r20, 0x00	; 0
    3cf4:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	8f 5f       	subi	r24, 0xFF	; 255
    3cfc:	89 83       	std	Y+1, r24	; 0x01
    3cfe:	90 91 76 01 	lds	r25, 0x0176
    3d02:	89 81       	ldd	r24, Y+1	; 0x01
    3d04:	89 17       	cp	r24, r25
    3d06:	08 f3       	brcs	.-62     	; 0x3cca <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    3d08:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3d0a:	0f 90       	pop	r0
    3d0c:	0f 90       	pop	r0
    3d0e:	cf 91       	pop	r28
    3d10:	df 91       	pop	r29
    3d12:	08 95       	ret

00003d14 <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    3d14:	df 93       	push	r29
    3d16:	cf 93       	push	r28
    3d18:	00 d0       	rcall	.+0      	; 0x3d1a <LED_enu_Initialization+0x6>
    3d1a:	cd b7       	in	r28, 0x3d	; 61
    3d1c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    3d22:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    3d24:	19 82       	std	Y+1, r1	; 0x01
    3d26:	31 c0       	rjmp	.+98     	; 0x3d8a <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	88 2f       	mov	r24, r24
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	88 0f       	add	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	fc 01       	movw	r30, r24
    3d34:	e6 58       	subi	r30, 0x86	; 134
    3d36:	fe 4f       	sbci	r31, 0xFE	; 254
    3d38:	20 81       	ld	r18, Z
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	88 2f       	mov	r24, r24
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	88 0f       	add	r24, r24
    3d42:	99 1f       	adc	r25, r25
    3d44:	fc 01       	movw	r30, r24
    3d46:	e5 58       	subi	r30, 0x85	; 133
    3d48:	fe 4f       	sbci	r31, 0xFE	; 254
    3d4a:	90 81       	ld	r25, Z
    3d4c:	82 2f       	mov	r24, r18
    3d4e:	69 2f       	mov	r22, r25
    3d50:	41 e0       	ldi	r20, 0x01	; 1
    3d52:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
    3d58:	88 2f       	mov	r24, r24
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	88 0f       	add	r24, r24
    3d5e:	99 1f       	adc	r25, r25
    3d60:	fc 01       	movw	r30, r24
    3d62:	e6 58       	subi	r30, 0x86	; 134
    3d64:	fe 4f       	sbci	r31, 0xFE	; 254
    3d66:	20 81       	ld	r18, Z
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	88 2f       	mov	r24, r24
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	88 0f       	add	r24, r24
    3d70:	99 1f       	adc	r25, r25
    3d72:	fc 01       	movw	r30, r24
    3d74:	e5 58       	subi	r30, 0x85	; 133
    3d76:	fe 4f       	sbci	r31, 0xFE	; 254
    3d78:	90 81       	ld	r25, Z
    3d7a:	82 2f       	mov	r24, r18
    3d7c:	69 2f       	mov	r22, r25
    3d7e:	40 e0       	ldi	r20, 0x00	; 0
    3d80:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	8f 5f       	subi	r24, 0xFF	; 255
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	90 91 79 01 	lds	r25, 0x0179
    3d8e:	89 81       	ldd	r24, Y+1	; 0x01
    3d90:	89 17       	cp	r24, r25
    3d92:	50 f2       	brcs	.-108    	; 0x3d28 <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    3d94:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    3d96:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	00 d0       	rcall	.+0      	; 0x3da8 <LED_enu_TurnOnLED+0x6>
    3da8:	cd b7       	in	r28, 0x3d	; 61
    3daa:	de b7       	in	r29, 0x3e	; 62
    3dac:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    3db2:	90 91 79 01 	lds	r25, 0x0179
    3db6:	8a 81       	ldd	r24, Y+2	; 0x02
    3db8:	89 17       	cp	r24, r25
    3dba:	c8 f4       	brcc	.+50     	; 0x3dee <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    3dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbe:	88 2f       	mov	r24, r24
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	88 0f       	add	r24, r24
    3dc4:	99 1f       	adc	r25, r25
    3dc6:	fc 01       	movw	r30, r24
    3dc8:	e6 58       	subi	r30, 0x86	; 134
    3dca:	fe 4f       	sbci	r31, 0xFE	; 254
    3dcc:	20 81       	ld	r18, Z
    3dce:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd0:	88 2f       	mov	r24, r24
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	88 0f       	add	r24, r24
    3dd6:	99 1f       	adc	r25, r25
    3dd8:	fc 01       	movw	r30, r24
    3dda:	e5 58       	subi	r30, 0x85	; 133
    3ddc:	fe 4f       	sbci	r31, 0xFE	; 254
    3dde:	90 81       	ld	r25, Z
    3de0:	82 2f       	mov	r24, r18
    3de2:	69 2f       	mov	r22, r25
    3de4:	41 e0       	ldi	r20, 0x01	; 1
    3de6:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    3dea:	89 83       	std	Y+1, r24	; 0x01
    3dec:	02 c0       	rjmp	.+4      	; 0x3df2 <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3dee:	82 e0       	ldi	r24, 0x02	; 2
    3df0:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3df4:	0f 90       	pop	r0
    3df6:	0f 90       	pop	r0
    3df8:	cf 91       	pop	r28
    3dfa:	df 91       	pop	r29
    3dfc:	08 95       	ret

00003dfe <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    3dfe:	df 93       	push	r29
    3e00:	cf 93       	push	r28
    3e02:	00 d0       	rcall	.+0      	; 0x3e04 <LED_enu_TurnOffLED+0x6>
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    3e0e:	90 91 79 01 	lds	r25, 0x0179
    3e12:	8a 81       	ldd	r24, Y+2	; 0x02
    3e14:	98 17       	cp	r25, r24
    3e16:	c8 f0       	brcs	.+50     	; 0x3e4a <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    3e18:	8a 81       	ldd	r24, Y+2	; 0x02
    3e1a:	88 2f       	mov	r24, r24
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	88 0f       	add	r24, r24
    3e20:	99 1f       	adc	r25, r25
    3e22:	fc 01       	movw	r30, r24
    3e24:	e6 58       	subi	r30, 0x86	; 134
    3e26:	fe 4f       	sbci	r31, 0xFE	; 254
    3e28:	20 81       	ld	r18, Z
    3e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2c:	88 2f       	mov	r24, r24
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	88 0f       	add	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	fc 01       	movw	r30, r24
    3e36:	e5 58       	subi	r30, 0x85	; 133
    3e38:	fe 4f       	sbci	r31, 0xFE	; 254
    3e3a:	90 81       	ld	r25, Z
    3e3c:	82 2f       	mov	r24, r18
    3e3e:	69 2f       	mov	r22, r25
    3e40:	40 e0       	ldi	r20, 0x00	; 0
    3e42:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    3e46:	89 83       	std	Y+1, r24	; 0x01
    3e48:	02 c0       	rjmp	.+4      	; 0x3e4e <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3e4a:	82 e0       	ldi	r24, 0x02	; 2
    3e4c:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3e4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e50:	0f 90       	pop	r0
    3e52:	0f 90       	pop	r0
    3e54:	cf 91       	pop	r28
    3e56:	df 91       	pop	r29
    3e58:	08 95       	ret

00003e5a <LED_enu_TurnOnCombination>:

extern ErrorState_t LED_enu_TurnOnCombination(u8 Copy_u8_Combination)
{
    3e5a:	df 93       	push	r29
    3e5c:	cf 93       	push	r28
    3e5e:	00 d0       	rcall	.+0      	; 0x3e60 <LED_enu_TurnOnCombination+0x6>
    3e60:	00 d0       	rcall	.+0      	; 0x3e62 <LED_enu_TurnOnCombination+0x8>
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
    3e66:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_OK;
    3e68:	1b 82       	std	Y+3, r1	; 0x03
    
    u8 Local_u8_TempErrorFlag = ES_OK;
    3e6a:	1a 82       	std	Y+2, r1	; 0x02


    if(Copy_u8_Combination <= 7 )
    3e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e6e:	88 30       	cpi	r24, 0x08	; 8
    3e70:	d8 f5       	brcc	.+118    	; 0x3ee8 <LED_enu_TurnOnCombination+0x8e>
    {
        s8 Local_s8_Counter = 0;
    3e72:	19 82       	std	Y+1, r1	; 0x01

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    3e74:	8c 81       	ldd	r24, Y+4	; 0x04
    3e76:	81 50       	subi	r24, 0x01	; 1
    3e78:	89 83       	std	Y+1, r24	; 0x01
    3e7a:	32 c0       	rjmp	.+100    	; 0x3ee0 <LED_enu_TurnOnCombination+0x86>
        {
           Local_u8_TempErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Local_s8_Counter].LED_Group, LED_astr_LEDsList[Local_s8_Counter].LED_Pin, (Copy_u8_Combination >> Local_s8_Counter) & 1 );
    3e7c:	89 81       	ldd	r24, Y+1	; 0x01
    3e7e:	99 27       	eor	r25, r25
    3e80:	87 fd       	sbrc	r24, 7
    3e82:	90 95       	com	r25
    3e84:	88 0f       	add	r24, r24
    3e86:	99 1f       	adc	r25, r25
    3e88:	fc 01       	movw	r30, r24
    3e8a:	e6 58       	subi	r30, 0x86	; 134
    3e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e8e:	50 81       	ld	r21, Z
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	99 27       	eor	r25, r25
    3e94:	87 fd       	sbrc	r24, 7
    3e96:	90 95       	com	r25
    3e98:	88 0f       	add	r24, r24
    3e9a:	99 1f       	adc	r25, r25
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	e5 58       	subi	r30, 0x85	; 133
    3ea0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea2:	40 81       	ld	r20, Z
    3ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ea6:	28 2f       	mov	r18, r24
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	99 27       	eor	r25, r25
    3eae:	87 fd       	sbrc	r24, 7
    3eb0:	90 95       	com	r25
    3eb2:	b9 01       	movw	r22, r18
    3eb4:	02 c0       	rjmp	.+4      	; 0x3eba <LED_enu_TurnOnCombination+0x60>
    3eb6:	75 95       	asr	r23
    3eb8:	67 95       	ror	r22
    3eba:	8a 95       	dec	r24
    3ebc:	e2 f7       	brpl	.-8      	; 0x3eb6 <LED_enu_TurnOnCombination+0x5c>
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	98 2f       	mov	r25, r24
    3ec2:	91 70       	andi	r25, 0x01	; 1
    3ec4:	85 2f       	mov	r24, r21
    3ec6:	64 2f       	mov	r22, r20
    3ec8:	49 2f       	mov	r20, r25
    3eca:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    3ece:	8a 83       	std	Y+2, r24	; 0x02

            if(Local_u8_TempErrorFlag == ES_NOK)
    3ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed2:	81 30       	cpi	r24, 0x01	; 1
    3ed4:	11 f4       	brne	.+4      	; 0x3eda <LED_enu_TurnOnCombination+0x80>
            {
                Local_u8_ErrorFlag = ES_NOK;
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	8b 83       	std	Y+3, r24	; 0x03

    if(Copy_u8_Combination <= 7 )
    {
        s8 Local_s8_Counter = 0;

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    3eda:	89 81       	ldd	r24, Y+1	; 0x01
    3edc:	81 50       	subi	r24, 0x01	; 1
    3ede:	89 83       	std	Y+1, r24	; 0x01
    3ee0:	89 81       	ldd	r24, Y+1	; 0x01
    3ee2:	88 23       	and	r24, r24
    3ee4:	5c f6       	brge	.-106    	; 0x3e7c <LED_enu_TurnOnCombination+0x22>
    3ee6:	02 c0       	rjmp	.+4      	; 0x3eec <LED_enu_TurnOnCombination+0x92>
        }
        
    } 
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3ee8:	82 e0       	ldi	r24, 0x02	; 2
    3eea:	8b 83       	std	Y+3, r24	; 0x03
    }

    return Local_u8_ErrorFlag;
    3eec:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3eee:	0f 90       	pop	r0
    3ef0:	0f 90       	pop	r0
    3ef2:	0f 90       	pop	r0
    3ef4:	0f 90       	pop	r0
    3ef6:	cf 91       	pop	r28
    3ef8:	df 91       	pop	r29
    3efa:	08 95       	ret

00003efc <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    3efc:	df 93       	push	r29
    3efe:	cf 93       	push	r28
    3f00:	00 d0       	rcall	.+0      	; 0x3f02 <LED_enu_TurnOnAllLEDs+0x6>
    3f02:	cd b7       	in	r28, 0x3d	; 61
    3f04:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3f0a:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3f0c:	19 82       	std	Y+1, r1	; 0x01
    3f0e:	1a c0       	rjmp	.+52     	; 0x3f44 <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    3f10:	89 81       	ldd	r24, Y+1	; 0x01
    3f12:	88 2f       	mov	r24, r24
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	88 0f       	add	r24, r24
    3f18:	99 1f       	adc	r25, r25
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	e6 58       	subi	r30, 0x86	; 134
    3f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f20:	20 81       	ld	r18, Z
    3f22:	89 81       	ldd	r24, Y+1	; 0x01
    3f24:	88 2f       	mov	r24, r24
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	88 0f       	add	r24, r24
    3f2a:	99 1f       	adc	r25, r25
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	e5 58       	subi	r30, 0x85	; 133
    3f30:	fe 4f       	sbci	r31, 0xFE	; 254
    3f32:	90 81       	ld	r25, Z
    3f34:	82 2f       	mov	r24, r18
    3f36:	69 2f       	mov	r22, r25
    3f38:	41 e0       	ldi	r20, 0x01	; 1
    3f3a:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3f3e:	89 81       	ldd	r24, Y+1	; 0x01
    3f40:	8f 5f       	subi	r24, 0xFF	; 255
    3f42:	89 83       	std	Y+1, r24	; 0x01
    3f44:	90 91 79 01 	lds	r25, 0x0179
    3f48:	89 81       	ldd	r24, Y+1	; 0x01
    3f4a:	89 17       	cp	r24, r25
    3f4c:	08 f3       	brcs	.-62     	; 0x3f10 <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    3f4e:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    3f50:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	cf 91       	pop	r28
    3f58:	df 91       	pop	r29
    3f5a:	08 95       	ret

00003f5c <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    3f5c:	df 93       	push	r29
    3f5e:	cf 93       	push	r28
    3f60:	00 d0       	rcall	.+0      	; 0x3f62 <LED_enu_TurnOffAllLEDs+0x6>
    3f62:	cd b7       	in	r28, 0x3d	; 61
    3f64:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3f6a:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3f6c:	19 82       	std	Y+1, r1	; 0x01
    3f6e:	1a c0       	rjmp	.+52     	; 0x3fa4 <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    3f70:	89 81       	ldd	r24, Y+1	; 0x01
    3f72:	88 2f       	mov	r24, r24
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	88 0f       	add	r24, r24
    3f78:	99 1f       	adc	r25, r25
    3f7a:	fc 01       	movw	r30, r24
    3f7c:	e6 58       	subi	r30, 0x86	; 134
    3f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f80:	20 81       	ld	r18, Z
    3f82:	89 81       	ldd	r24, Y+1	; 0x01
    3f84:	88 2f       	mov	r24, r24
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	88 0f       	add	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	e5 58       	subi	r30, 0x85	; 133
    3f90:	fe 4f       	sbci	r31, 0xFE	; 254
    3f92:	90 81       	ld	r25, Z
    3f94:	82 2f       	mov	r24, r18
    3f96:	69 2f       	mov	r22, r25
    3f98:	40 e0       	ldi	r20, 0x00	; 0
    3f9a:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3f9e:	89 81       	ldd	r24, Y+1	; 0x01
    3fa0:	8f 5f       	subi	r24, 0xFF	; 255
    3fa2:	89 83       	std	Y+1, r24	; 0x01
    3fa4:	90 91 79 01 	lds	r25, 0x0179
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	89 17       	cp	r24, r25
    3fac:	08 f3       	brcs	.-62     	; 0x3f70 <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    3fae:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    3fb0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3fb2:	0f 90       	pop	r0
    3fb4:	0f 90       	pop	r0
    3fb6:	cf 91       	pop	r28
    3fb8:	df 91       	pop	r29
    3fba:	08 95       	ret

00003fbc <LED_enu_GetLEDCount>:

extern ErrorState_t LED_enu_GetLEDCount(u8* Copy_u8_Count)
{
    3fbc:	df 93       	push	r29
    3fbe:	cf 93       	push	r28
    3fc0:	00 d0       	rcall	.+0      	; 0x3fc2 <LED_enu_GetLEDCount+0x6>
    3fc2:	0f 92       	push	r0
    3fc4:	cd b7       	in	r28, 0x3d	; 61
    3fc6:	de b7       	in	r29, 0x3e	; 62
    3fc8:	9b 83       	std	Y+3, r25	; 0x03
    3fca:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Count)
    3fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fd4:	00 97       	sbiw	r24, 0x00	; 0
    3fd6:	39 f0       	breq	.+14     	; 0x3fe6 <LED_enu_GetLEDCount+0x2a>
    {
        *Copy_u8_Count = LED_u8_LEDsCount;
    3fd8:	80 91 79 01 	lds	r24, 0x0179
    3fdc:	ea 81       	ldd	r30, Y+2	; 0x02
    3fde:	fb 81       	ldd	r31, Y+3	; 0x03
    3fe0:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    3fe2:	19 82       	std	Y+1, r1	; 0x01
    3fe4:	02 c0       	rjmp	.+4      	; 0x3fea <LED_enu_GetLEDCount+0x2e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3fe6:	83 e0       	ldi	r24, 0x03	; 3
    3fe8:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	0f 90       	pop	r0
    3fee:	0f 90       	pop	r0
    3ff0:	0f 90       	pop	r0
    3ff2:	cf 91       	pop	r28
    3ff4:	df 91       	pop	r29
    3ff6:	08 95       	ret

00003ff8 <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    3ff8:	df 93       	push	r29
    3ffa:	cf 93       	push	r28
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	6d 97       	sbiw	r28, 0x1d	; 29
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	f8 94       	cli
    4006:	de bf       	out	0x3e, r29	; 62
    4008:	0f be       	out	0x3f, r0	; 63
    400a:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    400c:	81 e0       	ldi	r24, 0x01	; 1
    400e:	8d 8f       	std	Y+29, r24	; 0x1d
    4010:	80 e0       	ldi	r24, 0x00	; 0
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	ac e0       	ldi	r26, 0x0C	; 12
    4016:	b2 e4       	ldi	r27, 0x42	; 66
    4018:	89 8f       	std	Y+25, r24	; 0x19
    401a:	9a 8f       	std	Y+26, r25	; 0x1a
    401c:	ab 8f       	std	Y+27, r26	; 0x1b
    401e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4020:	69 8d       	ldd	r22, Y+25	; 0x19
    4022:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4024:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4026:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	4a e7       	ldi	r20, 0x7A	; 122
    402e:	55 e4       	ldi	r21, 0x45	; 69
    4030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	8d 8b       	std	Y+21, r24	; 0x15
    403a:	9e 8b       	std	Y+22, r25	; 0x16
    403c:	af 8b       	std	Y+23, r26	; 0x17
    403e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4040:	6d 89       	ldd	r22, Y+21	; 0x15
    4042:	7e 89       	ldd	r23, Y+22	; 0x16
    4044:	8f 89       	ldd	r24, Y+23	; 0x17
    4046:	98 8d       	ldd	r25, Y+24	; 0x18
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	40 e8       	ldi	r20, 0x80	; 128
    404e:	5f e3       	ldi	r21, 0x3F	; 63
    4050:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4054:	88 23       	and	r24, r24
    4056:	2c f4       	brge	.+10     	; 0x4062 <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	9c 8b       	std	Y+20, r25	; 0x14
    405e:	8b 8b       	std	Y+19, r24	; 0x13
    4060:	3f c0       	rjmp	.+126    	; 0x40e0 <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    4062:	6d 89       	ldd	r22, Y+21	; 0x15
    4064:	7e 89       	ldd	r23, Y+22	; 0x16
    4066:	8f 89       	ldd	r24, Y+23	; 0x17
    4068:	98 8d       	ldd	r25, Y+24	; 0x18
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	3f ef       	ldi	r19, 0xFF	; 255
    406e:	4f e7       	ldi	r20, 0x7F	; 127
    4070:	57 e4       	ldi	r21, 0x47	; 71
    4072:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4076:	18 16       	cp	r1, r24
    4078:	4c f5       	brge	.+82     	; 0x40cc <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    407a:	69 8d       	ldd	r22, Y+25	; 0x19
    407c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    407e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4080:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	40 e2       	ldi	r20, 0x20	; 32
    4088:	51 e4       	ldi	r21, 0x41	; 65
    408a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408e:	dc 01       	movw	r26, r24
    4090:	cb 01       	movw	r24, r22
    4092:	bc 01       	movw	r22, r24
    4094:	cd 01       	movw	r24, r26
    4096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    409a:	dc 01       	movw	r26, r24
    409c:	cb 01       	movw	r24, r22
    409e:	9c 8b       	std	Y+20, r25	; 0x14
    40a0:	8b 8b       	std	Y+19, r24	; 0x13
    40a2:	0f c0       	rjmp	.+30     	; 0x40c2 <LCD_enu_Initialization+0xca>
    40a4:	80 e9       	ldi	r24, 0x90	; 144
    40a6:	91 e0       	ldi	r25, 0x01	; 1
    40a8:	9a 8b       	std	Y+18, r25	; 0x12
    40aa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    40ac:	89 89       	ldd	r24, Y+17	; 0x11
    40ae:	9a 89       	ldd	r25, Y+18	; 0x12
    40b0:	01 97       	sbiw	r24, 0x01	; 1
    40b2:	f1 f7       	brne	.-4      	; 0x40b0 <LCD_enu_Initialization+0xb8>
    40b4:	9a 8b       	std	Y+18, r25	; 0x12
    40b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b8:	8b 89       	ldd	r24, Y+19	; 0x13
    40ba:	9c 89       	ldd	r25, Y+20	; 0x14
    40bc:	01 97       	sbiw	r24, 0x01	; 1
    40be:	9c 8b       	std	Y+20, r25	; 0x14
    40c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c2:	8b 89       	ldd	r24, Y+19	; 0x13
    40c4:	9c 89       	ldd	r25, Y+20	; 0x14
    40c6:	00 97       	sbiw	r24, 0x00	; 0
    40c8:	69 f7       	brne	.-38     	; 0x40a4 <LCD_enu_Initialization+0xac>
    40ca:	14 c0       	rjmp	.+40     	; 0x40f4 <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40cc:	6d 89       	ldd	r22, Y+21	; 0x15
    40ce:	7e 89       	ldd	r23, Y+22	; 0x16
    40d0:	8f 89       	ldd	r24, Y+23	; 0x17
    40d2:	98 8d       	ldd	r25, Y+24	; 0x18
    40d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d8:	dc 01       	movw	r26, r24
    40da:	cb 01       	movw	r24, r22
    40dc:	9c 8b       	std	Y+20, r25	; 0x14
    40de:	8b 8b       	std	Y+19, r24	; 0x13
    40e0:	8b 89       	ldd	r24, Y+19	; 0x13
    40e2:	9c 89       	ldd	r25, Y+20	; 0x14
    40e4:	98 8b       	std	Y+16, r25	; 0x10
    40e6:	8f 87       	std	Y+15, r24	; 0x0f
    40e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40ea:	98 89       	ldd	r25, Y+16	; 0x10
    40ec:	01 97       	sbiw	r24, 0x01	; 1
    40ee:	f1 f7       	brne	.-4      	; 0x40ec <LCD_enu_Initialization+0xf4>
    40f0:	98 8b       	std	Y+16, r25	; 0x10
    40f2:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	61 e0       	ldi	r22, 0x01	; 1
    40f8:	41 e0       	ldi	r20, 0x01	; 1
    40fa:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	62 e0       	ldi	r22, 0x02	; 2
    4102:	41 e0       	ldi	r20, 0x01	; 1
    4104:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	63 e0       	ldi	r22, 0x03	; 3
    410c:	41 e0       	ldi	r20, 0x01	; 1
    410e:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	67 e0       	ldi	r22, 0x07	; 7
    4116:	41 e0       	ldi	r20, 0x01	; 1
    4118:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    411c:	80 e0       	ldi	r24, 0x00	; 0
    411e:	66 e0       	ldi	r22, 0x06	; 6
    4120:	41 e0       	ldi	r20, 0x01	; 1
    4122:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	65 e0       	ldi	r22, 0x05	; 5
    412a:	41 e0       	ldi	r20, 0x01	; 1
    412c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	64 e0       	ldi	r22, 0x04	; 4
    4134:	41 e0       	ldi	r20, 0x01	; 1
    4136:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	61 e0       	ldi	r22, 0x01	; 1
    413e:	40 e0       	ldi	r20, 0x00	; 0
    4140:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    4144:	80 e0       	ldi	r24, 0x00	; 0
    4146:	67 e0       	ldi	r22, 0x07	; 7
    4148:	40 e0       	ldi	r20, 0x00	; 0
    414a:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	66 e0       	ldi	r22, 0x06	; 6
    4152:	40 e0       	ldi	r20, 0x00	; 0
    4154:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	65 e0       	ldi	r22, 0x05	; 5
    415c:	41 e0       	ldi	r20, 0x01	; 1
    415e:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	64 e0       	ldi	r22, 0x04	; 4
    4166:	40 e0       	ldi	r20, 0x00	; 0
    4168:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	63 e0       	ldi	r22, 0x03	; 3
    4170:	41 e0       	ldi	r20, 0x01	; 1
    4172:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	a0 e8       	ldi	r26, 0x80	; 128
    417c:	bf e3       	ldi	r27, 0x3F	; 63
    417e:	8b 87       	std	Y+11, r24	; 0x0b
    4180:	9c 87       	std	Y+12, r25	; 0x0c
    4182:	ad 87       	std	Y+13, r26	; 0x0d
    4184:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4186:	6b 85       	ldd	r22, Y+11	; 0x0b
    4188:	7c 85       	ldd	r23, Y+12	; 0x0c
    418a:	8d 85       	ldd	r24, Y+13	; 0x0d
    418c:	9e 85       	ldd	r25, Y+14	; 0x0e
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	4a e7       	ldi	r20, 0x7A	; 122
    4194:	55 e4       	ldi	r21, 0x45	; 69
    4196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	8f 83       	std	Y+7, r24	; 0x07
    41a0:	98 87       	std	Y+8, r25	; 0x08
    41a2:	a9 87       	std	Y+9, r26	; 0x09
    41a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41a6:	6f 81       	ldd	r22, Y+7	; 0x07
    41a8:	78 85       	ldd	r23, Y+8	; 0x08
    41aa:	89 85       	ldd	r24, Y+9	; 0x09
    41ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	40 e8       	ldi	r20, 0x80	; 128
    41b4:	5f e3       	ldi	r21, 0x3F	; 63
    41b6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    41ba:	88 23       	and	r24, r24
    41bc:	2c f4       	brge	.+10     	; 0x41c8 <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	9e 83       	std	Y+6, r25	; 0x06
    41c4:	8d 83       	std	Y+5, r24	; 0x05
    41c6:	3f c0       	rjmp	.+126    	; 0x4246 <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    41c8:	6f 81       	ldd	r22, Y+7	; 0x07
    41ca:	78 85       	ldd	r23, Y+8	; 0x08
    41cc:	89 85       	ldd	r24, Y+9	; 0x09
    41ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	3f ef       	ldi	r19, 0xFF	; 255
    41d4:	4f e7       	ldi	r20, 0x7F	; 127
    41d6:	57 e4       	ldi	r21, 0x47	; 71
    41d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    41dc:	18 16       	cp	r1, r24
    41de:	4c f5       	brge	.+82     	; 0x4232 <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    41e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    41e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	40 e2       	ldi	r20, 0x20	; 32
    41ee:	51 e4       	ldi	r21, 0x41	; 65
    41f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f4:	dc 01       	movw	r26, r24
    41f6:	cb 01       	movw	r24, r22
    41f8:	bc 01       	movw	r22, r24
    41fa:	cd 01       	movw	r24, r26
    41fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4200:	dc 01       	movw	r26, r24
    4202:	cb 01       	movw	r24, r22
    4204:	9e 83       	std	Y+6, r25	; 0x06
    4206:	8d 83       	std	Y+5, r24	; 0x05
    4208:	0f c0       	rjmp	.+30     	; 0x4228 <LCD_enu_Initialization+0x230>
    420a:	80 e9       	ldi	r24, 0x90	; 144
    420c:	91 e0       	ldi	r25, 0x01	; 1
    420e:	9c 83       	std	Y+4, r25	; 0x04
    4210:	8b 83       	std	Y+3, r24	; 0x03
    4212:	8b 81       	ldd	r24, Y+3	; 0x03
    4214:	9c 81       	ldd	r25, Y+4	; 0x04
    4216:	01 97       	sbiw	r24, 0x01	; 1
    4218:	f1 f7       	brne	.-4      	; 0x4216 <LCD_enu_Initialization+0x21e>
    421a:	9c 83       	std	Y+4, r25	; 0x04
    421c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    421e:	8d 81       	ldd	r24, Y+5	; 0x05
    4220:	9e 81       	ldd	r25, Y+6	; 0x06
    4222:	01 97       	sbiw	r24, 0x01	; 1
    4224:	9e 83       	std	Y+6, r25	; 0x06
    4226:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4228:	8d 81       	ldd	r24, Y+5	; 0x05
    422a:	9e 81       	ldd	r25, Y+6	; 0x06
    422c:	00 97       	sbiw	r24, 0x00	; 0
    422e:	69 f7       	brne	.-38     	; 0x420a <LCD_enu_Initialization+0x212>
    4230:	14 c0       	rjmp	.+40     	; 0x425a <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4232:	6f 81       	ldd	r22, Y+7	; 0x07
    4234:	78 85       	ldd	r23, Y+8	; 0x08
    4236:	89 85       	ldd	r24, Y+9	; 0x09
    4238:	9a 85       	ldd	r25, Y+10	; 0x0a
    423a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    423e:	dc 01       	movw	r26, r24
    4240:	cb 01       	movw	r24, r22
    4242:	9e 83       	std	Y+6, r25	; 0x06
    4244:	8d 83       	std	Y+5, r24	; 0x05
    4246:	8d 81       	ldd	r24, Y+5	; 0x05
    4248:	9e 81       	ldd	r25, Y+6	; 0x06
    424a:	9a 83       	std	Y+2, r25	; 0x02
    424c:	89 83       	std	Y+1, r24	; 0x01
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	9a 81       	ldd	r25, Y+2	; 0x02
    4252:	01 97       	sbiw	r24, 0x01	; 1
    4254:	f1 f7       	brne	.-4      	; 0x4252 <LCD_enu_Initialization+0x25a>
    4256:	9a 83       	std	Y+2, r25	; 0x02
    4258:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    425a:	81 e0       	ldi	r24, 0x01	; 1
    425c:	63 e0       	ldi	r22, 0x03	; 3
    425e:	40 e0       	ldi	r20, 0x00	; 0
    4260:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4264:	81 e0       	ldi	r24, 0x01	; 1
    4266:	61 e0       	ldi	r22, 0x01	; 1
    4268:	40 e0       	ldi	r20, 0x00	; 0
    426a:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    426e:	88 e2       	ldi	r24, 0x28	; 40
    4270:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	61 e0       	ldi	r22, 0x01	; 1
    4278:	40 e0       	ldi	r20, 0x00	; 0
    427a:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0F);
    427e:	8f e0       	ldi	r24, 0x0F	; 15
    4280:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	61 e0       	ldi	r22, 0x01	; 1
    4288:	40 e0       	ldi	r20, 0x00	; 0
    428a:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	61 e0       	ldi	r22, 0x01	; 1
    4298:	40 e0       	ldi	r20, 0x00	; 0
    429a:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    429e:	86 e0       	ldi	r24, 0x06	; 6
    42a0:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    42a4:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    42a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    42a8:	6d 96       	adiw	r28, 0x1d	; 29
    42aa:	0f b6       	in	r0, 0x3f	; 63
    42ac:	f8 94       	cli
    42ae:	de bf       	out	0x3e, r29	; 62
    42b0:	0f be       	out	0x3f, r0	; 63
    42b2:	cd bf       	out	0x3d, r28	; 61
    42b4:	cf 91       	pop	r28
    42b6:	df 91       	pop	r29
    42b8:	08 95       	ret

000042ba <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    42ba:	df 93       	push	r29
    42bc:	cf 93       	push	r28
    42be:	00 d0       	rcall	.+0      	; 0x42c0 <LCD_enu_SendCommand+0x6>
    42c0:	cd b7       	in	r28, 0x3d	; 61
    42c2:	de b7       	in	r29, 0x3e	; 62
    42c4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    42c6:	81 e0       	ldi	r24, 0x01	; 1
    42c8:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	61 e0       	ldi	r22, 0x01	; 1
    42ce:	40 e0       	ldi	r20, 0x00	; 0
    42d0:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    42d4:	8a 81       	ldd	r24, Y+2	; 0x02
    42d6:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    42da:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    42dc:	89 81       	ldd	r24, Y+1	; 0x01

}
    42de:	0f 90       	pop	r0
    42e0:	0f 90       	pop	r0
    42e2:	cf 91       	pop	r28
    42e4:	df 91       	pop	r29
    42e6:	08 95       	ret

000042e8 <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    42e8:	df 93       	push	r29
    42ea:	cf 93       	push	r28
    42ec:	00 d0       	rcall	.+0      	; 0x42ee <LCD_enu_SendData+0x6>
    42ee:	cd b7       	in	r28, 0x3d	; 61
    42f0:	de b7       	in	r29, 0x3e	; 62
    42f2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	61 e0       	ldi	r22, 0x01	; 1
    42fc:	41 e0       	ldi	r20, 0x01	; 1
    42fe:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    4302:	8a 81       	ldd	r24, Y+2	; 0x02
    4304:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    4308:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    430a:	89 81       	ldd	r24, Y+1	; 0x01

}
    430c:	0f 90       	pop	r0
    430e:	0f 90       	pop	r0
    4310:	cf 91       	pop	r28
    4312:	df 91       	pop	r29
    4314:	08 95       	ret

00004316 <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    4316:	df 93       	push	r29
    4318:	cf 93       	push	r28
    431a:	00 d0       	rcall	.+0      	; 0x431c <LCD_enu_GoToPosition+0x6>
    431c:	00 d0       	rcall	.+0      	; 0x431e <LCD_enu_GoToPosition+0x8>
    431e:	cd b7       	in	r28, 0x3d	; 61
    4320:	de b7       	in	r29, 0x3e	; 62
    4322:	8a 83       	std	Y+2, r24	; 0x02
    4324:	6b 83       	std	Y+3, r22	; 0x03
    4326:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    432c:	8b 81       	ldd	r24, Y+3	; 0x03
    432e:	81 31       	cpi	r24, 0x11	; 17
    4330:	88 f5       	brcc	.+98     	; 0x4394 <LCD_enu_GoToPosition+0x7e>
    4332:	8b 81       	ldd	r24, Y+3	; 0x03
    4334:	88 23       	and	r24, r24
    4336:	71 f1       	breq	.+92     	; 0x4394 <LCD_enu_GoToPosition+0x7e>
    4338:	8a 81       	ldd	r24, Y+2	; 0x02
    433a:	83 30       	cpi	r24, 0x03	; 3
    433c:	58 f5       	brcc	.+86     	; 0x4394 <LCD_enu_GoToPosition+0x7e>
    433e:	8a 81       	ldd	r24, Y+2	; 0x02
    4340:	88 23       	and	r24, r24
    4342:	41 f1       	breq	.+80     	; 0x4394 <LCD_enu_GoToPosition+0x7e>
    4344:	8c 81       	ldd	r24, Y+4	; 0x04
    4346:	85 30       	cpi	r24, 0x05	; 5
    4348:	28 f5       	brcc	.+74     	; 0x4394 <LCD_enu_GoToPosition+0x7e>
    434a:	8c 81       	ldd	r24, Y+4	; 0x04
    434c:	88 23       	and	r24, r24
    434e:	11 f1       	breq	.+68     	; 0x4394 <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	61 e0       	ldi	r22, 0x01	; 1
    4354:	40 e0       	ldi	r20, 0x00	; 0
    4356:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    435a:	8c 81       	ldd	r24, Y+4	; 0x04
    435c:	88 2f       	mov	r24, r24
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	9c 01       	movw	r18, r24
    4362:	21 50       	subi	r18, 0x01	; 1
    4364:	30 40       	sbci	r19, 0x00	; 0
    4366:	8a 81       	ldd	r24, Y+2	; 0x02
    4368:	88 2f       	mov	r24, r24
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	01 97       	sbiw	r24, 0x01	; 1
    436e:	88 0f       	add	r24, r24
    4370:	99 1f       	adc	r25, r25
    4372:	88 0f       	add	r24, r24
    4374:	99 1f       	adc	r25, r25
    4376:	82 0f       	add	r24, r18
    4378:	93 1f       	adc	r25, r19
    437a:	82 95       	swap	r24
    437c:	92 95       	swap	r25
    437e:	90 7f       	andi	r25, 0xF0	; 240
    4380:	98 27       	eor	r25, r24
    4382:	80 7f       	andi	r24, 0xF0	; 240
    4384:	98 27       	eor	r25, r24
    4386:	98 2f       	mov	r25, r24
    4388:	8b 81       	ldd	r24, Y+3	; 0x03
    438a:	89 0f       	add	r24, r25
    438c:	81 58       	subi	r24, 0x81	; 129
    438e:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
    4392:	02 c0       	rjmp	.+4      	; 0x4398 <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4394:	82 e0       	ldi	r24, 0x02	; 2
    4396:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    4398:	89 81       	ldd	r24, Y+1	; 0x01
}
    439a:	0f 90       	pop	r0
    439c:	0f 90       	pop	r0
    439e:	0f 90       	pop	r0
    43a0:	0f 90       	pop	r0
    43a2:	cf 91       	pop	r28
    43a4:	df 91       	pop	r29
    43a6:	08 95       	ret

000043a8 <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    43a8:	df 93       	push	r29
    43aa:	cf 93       	push	r28
    43ac:	00 d0       	rcall	.+0      	; 0x43ae <LCD_enu_SendString+0x6>
    43ae:	0f 92       	push	r0
    43b0:	cd b7       	in	r28, 0x3d	; 61
    43b2:	de b7       	in	r29, 0x3e	; 62
    43b4:	9b 83       	std	Y+3, r25	; 0x03
    43b6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    43bc:	8a 81       	ldd	r24, Y+2	; 0x02
    43be:	9b 81       	ldd	r25, Y+3	; 0x03
    43c0:	00 97       	sbiw	r24, 0x00	; 0
    43c2:	c1 f0       	breq	.+48     	; 0x43f4 <LCD_enu_SendString+0x4c>
    43c4:	10 c0       	rjmp	.+32     	; 0x43e6 <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	61 e0       	ldi	r22, 0x01	; 1
    43ca:	41 e0       	ldi	r20, 0x01	; 1
    43cc:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    43d0:	ea 81       	ldd	r30, Y+2	; 0x02
    43d2:	fb 81       	ldd	r31, Y+3	; 0x03
    43d4:	20 81       	ld	r18, Z
    43d6:	8a 81       	ldd	r24, Y+2	; 0x02
    43d8:	9b 81       	ldd	r25, Y+3	; 0x03
    43da:	01 96       	adiw	r24, 0x01	; 1
    43dc:	9b 83       	std	Y+3, r25	; 0x03
    43de:	8a 83       	std	Y+2, r24	; 0x02
    43e0:	82 2f       	mov	r24, r18
    43e2:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    43e6:	ea 81       	ldd	r30, Y+2	; 0x02
    43e8:	fb 81       	ldd	r31, Y+3	; 0x03
    43ea:	80 81       	ld	r24, Z
    43ec:	88 23       	and	r24, r24
    43ee:	59 f7       	brne	.-42     	; 0x43c6 <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    43f0:	19 82       	std	Y+1, r1	; 0x01
    43f2:	02 c0       	rjmp	.+4      	; 0x43f8 <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    43f4:	83 e0       	ldi	r24, 0x03	; 3
    43f6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    43fa:	0f 90       	pop	r0
    43fc:	0f 90       	pop	r0
    43fe:	0f 90       	pop	r0
    4400:	cf 91       	pop	r28
    4402:	df 91       	pop	r29
    4404:	08 95       	ret

00004406 <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    4406:	df 93       	push	r29
    4408:	cf 93       	push	r28
    440a:	00 d0       	rcall	.+0      	; 0x440c <LCD_enu_ClearPage+0x6>
    440c:	0f 92       	push	r0
    440e:	cd b7       	in	r28, 0x3d	; 61
    4410:	de b7       	in	r29, 0x3e	; 62
    4412:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    4418:	8b 81       	ldd	r24, Y+3	; 0x03
    441a:	88 23       	and	r24, r24
    441c:	09 f4       	brne	.+2      	; 0x4420 <LCD_enu_ClearPage+0x1a>
    441e:	49 c0       	rjmp	.+146    	; 0x44b2 <LCD_enu_ClearPage+0xac>
    4420:	8b 81       	ldd	r24, Y+3	; 0x03
    4422:	85 30       	cpi	r24, 0x05	; 5
    4424:	08 f0       	brcs	.+2      	; 0x4428 <LCD_enu_ClearPage+0x22>
    4426:	45 c0       	rjmp	.+138    	; 0x44b2 <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    4428:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	61 e0       	ldi	r22, 0x01	; 1
    442e:	40 e0       	ldi	r20, 0x00	; 0
    4430:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    4434:	8b 81       	ldd	r24, Y+3	; 0x03
    4436:	88 2f       	mov	r24, r24
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	07 96       	adiw	r24, 0x07	; 7
    443c:	82 95       	swap	r24
    443e:	92 95       	swap	r25
    4440:	90 7f       	andi	r25, 0xF0	; 240
    4442:	98 27       	eor	r25, r24
    4444:	80 7f       	andi	r24, 0xF0	; 240
    4446:	98 27       	eor	r25, r24
    4448:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	61 e0       	ldi	r22, 0x01	; 1
    4450:	41 e0       	ldi	r20, 0x01	; 1
    4452:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    4456:	19 82       	std	Y+1, r1	; 0x01
    4458:	06 c0       	rjmp	.+12     	; 0x4466 <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    445a:	80 e2       	ldi	r24, 0x20	; 32
    445c:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    4460:	89 81       	ldd	r24, Y+1	; 0x01
    4462:	8f 5f       	subi	r24, 0xFF	; 255
    4464:	89 83       	std	Y+1, r24	; 0x01
    4466:	89 81       	ldd	r24, Y+1	; 0x01
    4468:	80 31       	cpi	r24, 0x10	; 16
    446a:	b8 f3       	brcs	.-18     	; 0x445a <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	61 e0       	ldi	r22, 0x01	; 1
    4470:	40 e0       	ldi	r20, 0x00	; 0
    4472:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    4476:	8b 81       	ldd	r24, Y+3	; 0x03
    4478:	88 2f       	mov	r24, r24
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	0b 96       	adiw	r24, 0x0b	; 11
    447e:	82 95       	swap	r24
    4480:	92 95       	swap	r25
    4482:	90 7f       	andi	r25, 0xF0	; 240
    4484:	98 27       	eor	r25, r24
    4486:	80 7f       	andi	r24, 0xF0	; 240
    4488:	98 27       	eor	r25, r24
    448a:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	61 e0       	ldi	r22, 0x01	; 1
    4492:	41 e0       	ldi	r20, 0x01	; 1
    4494:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    4498:	19 82       	std	Y+1, r1	; 0x01
    449a:	06 c0       	rjmp	.+12     	; 0x44a8 <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    449c:	80 e2       	ldi	r24, 0x20	; 32
    449e:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    44a2:	89 81       	ldd	r24, Y+1	; 0x01
    44a4:	8f 5f       	subi	r24, 0xFF	; 255
    44a6:	89 83       	std	Y+1, r24	; 0x01
    44a8:	89 81       	ldd	r24, Y+1	; 0x01
    44aa:	80 31       	cpi	r24, 0x10	; 16
    44ac:	b8 f3       	brcs	.-18     	; 0x449c <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    44ae:	1a 82       	std	Y+2, r1	; 0x02
    44b0:	02 c0       	rjmp	.+4      	; 0x44b6 <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    44b2:	82 e0       	ldi	r24, 0x02	; 2
    44b4:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    44b6:	8a 81       	ldd	r24, Y+2	; 0x02

}
    44b8:	0f 90       	pop	r0
    44ba:	0f 90       	pop	r0
    44bc:	0f 90       	pop	r0
    44be:	cf 91       	pop	r28
    44c0:	df 91       	pop	r29
    44c2:	08 95       	ret

000044c4 <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    44c4:	cf 92       	push	r12
    44c6:	ef 92       	push	r14
    44c8:	0f 93       	push	r16
    44ca:	df 93       	push	r29
    44cc:	cf 93       	push	r28
    44ce:	cd b7       	in	r28, 0x3d	; 61
    44d0:	de b7       	in	r29, 0x3e	; 62
    44d2:	2e 97       	sbiw	r28, 0x0e	; 14
    44d4:	0f b6       	in	r0, 0x3f	; 63
    44d6:	f8 94       	cli
    44d8:	de bf       	out	0x3e, r29	; 62
    44da:	0f be       	out	0x3f, r0	; 63
    44dc:	cd bf       	out	0x3d, r28	; 61
    44de:	9e 83       	std	Y+6, r25	; 0x06
    44e0:	8d 83       	std	Y+5, r24	; 0x05
    44e2:	6f 83       	std	Y+7, r22	; 0x07
    44e4:	48 87       	std	Y+8, r20	; 0x08
    44e6:	29 87       	std	Y+9, r18	; 0x09
    44e8:	0a 87       	std	Y+10, r16	; 0x0a
    44ea:	eb 86       	std	Y+11, r14	; 0x0b
    44ec:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    44f2:	8d 81       	ldd	r24, Y+5	; 0x05
    44f4:	9e 81       	ldd	r25, Y+6	; 0x06
    44f6:	00 97       	sbiw	r24, 0x00	; 0
    44f8:	09 f4       	brne	.+2      	; 0x44fc <LCD_enu_DrawSpecialCharacter+0x38>
    44fa:	b3 c0       	rjmp	.+358    	; 0x4662 <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    44fc:	1b 82       	std	Y+3, r1	; 0x03
    44fe:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    4500:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    4502:	8f 81       	ldd	r24, Y+7	; 0x07
    4504:	88 23       	and	r24, r24
    4506:	09 f4       	brne	.+2      	; 0x450a <LCD_enu_DrawSpecialCharacter+0x46>
    4508:	a9 c0       	rjmp	.+338    	; 0x465c <LCD_enu_DrawSpecialCharacter+0x198>
    450a:	8f 81       	ldd	r24, Y+7	; 0x07
    450c:	89 30       	cpi	r24, 0x09	; 9
    450e:	08 f0       	brcs	.+2      	; 0x4512 <LCD_enu_DrawSpecialCharacter+0x4e>
    4510:	a5 c0       	rjmp	.+330    	; 0x465c <LCD_enu_DrawSpecialCharacter+0x198>
    4512:	88 85       	ldd	r24, Y+8	; 0x08
    4514:	88 30       	cpi	r24, 0x08	; 8
    4516:	08 f0       	brcs	.+2      	; 0x451a <LCD_enu_DrawSpecialCharacter+0x56>
    4518:	a1 c0       	rjmp	.+322    	; 0x465c <LCD_enu_DrawSpecialCharacter+0x198>
    451a:	88 85       	ldd	r24, Y+8	; 0x08
    451c:	28 2f       	mov	r18, r24
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	88 e0       	ldi	r24, 0x08	; 8
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	ac 01       	movw	r20, r24
    4526:	42 1b       	sub	r20, r18
    4528:	53 0b       	sbc	r21, r19
    452a:	9a 01       	movw	r18, r20
    452c:	8f 81       	ldd	r24, Y+7	; 0x07
    452e:	88 2f       	mov	r24, r24
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	28 17       	cp	r18, r24
    4534:	39 07       	cpc	r19, r25
    4536:	0c f4       	brge	.+2      	; 0x453a <LCD_enu_DrawSpecialCharacter+0x76>
    4538:	91 c0       	rjmp	.+290    	; 0x465c <LCD_enu_DrawSpecialCharacter+0x198>
    453a:	89 85       	ldd	r24, Y+9	; 0x09
    453c:	88 23       	and	r24, r24
    453e:	09 f4       	brne	.+2      	; 0x4542 <LCD_enu_DrawSpecialCharacter+0x7e>
    4540:	8d c0       	rjmp	.+282    	; 0x465c <LCD_enu_DrawSpecialCharacter+0x198>
    4542:	89 85       	ldd	r24, Y+9	; 0x09
    4544:	83 30       	cpi	r24, 0x03	; 3
    4546:	08 f0       	brcs	.+2      	; 0x454a <LCD_enu_DrawSpecialCharacter+0x86>
    4548:	89 c0       	rjmp	.+274    	; 0x465c <LCD_enu_DrawSpecialCharacter+0x198>
    454a:	8a 85       	ldd	r24, Y+10	; 0x0a
    454c:	88 23       	and	r24, r24
    454e:	09 f4       	brne	.+2      	; 0x4552 <LCD_enu_DrawSpecialCharacter+0x8e>
    4550:	85 c0       	rjmp	.+266    	; 0x465c <LCD_enu_DrawSpecialCharacter+0x198>
    4552:	8a 85       	ldd	r24, Y+10	; 0x0a
    4554:	81 31       	cpi	r24, 0x11	; 17
    4556:	08 f0       	brcs	.+2      	; 0x455a <LCD_enu_DrawSpecialCharacter+0x96>
    4558:	81 c0       	rjmp	.+258    	; 0x465c <LCD_enu_DrawSpecialCharacter+0x198>
    455a:	8c 85       	ldd	r24, Y+12	; 0x0c
    455c:	82 30       	cpi	r24, 0x02	; 2
    455e:	08 f0       	brcs	.+2      	; 0x4562 <LCD_enu_DrawSpecialCharacter+0x9e>
    4560:	7d c0       	rjmp	.+250    	; 0x465c <LCD_enu_DrawSpecialCharacter+0x198>
    4562:	8b 85       	ldd	r24, Y+11	; 0x0b
    4564:	85 30       	cpi	r24, 0x05	; 5
    4566:	08 f0       	brcs	.+2      	; 0x456a <LCD_enu_DrawSpecialCharacter+0xa6>
    4568:	79 c0       	rjmp	.+242    	; 0x465c <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    456a:	19 82       	std	Y+1, r1	; 0x01
    456c:	19 c0       	rjmp	.+50     	; 0x45a0 <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    456e:	89 81       	ldd	r24, Y+1	; 0x01
    4570:	28 2f       	mov	r18, r24
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	8d 81       	ldd	r24, Y+5	; 0x05
    4576:	9e 81       	ldd	r25, Y+6	; 0x06
    4578:	82 0f       	add	r24, r18
    457a:	93 1f       	adc	r25, r19
    457c:	9b 83       	std	Y+3, r25	; 0x03
    457e:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    4580:	89 81       	ldd	r24, Y+1	; 0x01
    4582:	98 2f       	mov	r25, r24
    4584:	96 95       	lsr	r25
    4586:	96 95       	lsr	r25
    4588:	96 95       	lsr	r25
    458a:	88 85       	ldd	r24, Y+8	; 0x08
    458c:	29 2f       	mov	r18, r25
    458e:	28 0f       	add	r18, r24
    4590:	8a 81       	ldd	r24, Y+2	; 0x02
    4592:	9b 81       	ldd	r25, Y+3	; 0x03
    4594:	62 2f       	mov	r22, r18
    4596:	0e 94 6e 27 	call	0x4edc	; 0x4edc <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    459a:	89 81       	ldd	r24, Y+1	; 0x01
    459c:	88 5f       	subi	r24, 0xF8	; 248
    459e:	89 83       	std	Y+1, r24	; 0x01
    45a0:	89 81       	ldd	r24, Y+1	; 0x01
    45a2:	28 2f       	mov	r18, r24
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	8f 81       	ldd	r24, Y+7	; 0x07
    45a8:	88 2f       	mov	r24, r24
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	88 0f       	add	r24, r24
    45ae:	99 1f       	adc	r25, r25
    45b0:	88 0f       	add	r24, r24
    45b2:	99 1f       	adc	r25, r25
    45b4:	88 0f       	add	r24, r24
    45b6:	99 1f       	adc	r25, r25
    45b8:	28 17       	cp	r18, r24
    45ba:	39 07       	cpc	r19, r25
    45bc:	c4 f2       	brlt	.-80     	; 0x456e <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	61 e0       	ldi	r22, 0x01	; 1
    45c2:	40 e0       	ldi	r20, 0x00	; 0
    45c4:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    45c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    45ca:	28 2f       	mov	r18, r24
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	3e 87       	std	Y+14, r19	; 0x0e
    45d0:	2d 87       	std	Y+13, r18	; 0x0d
    45d2:	4d 85       	ldd	r20, Y+13	; 0x0d
    45d4:	5e 85       	ldd	r21, Y+14	; 0x0e
    45d6:	41 15       	cp	r20, r1
    45d8:	51 05       	cpc	r21, r1
    45da:	49 f0       	breq	.+18     	; 0x45ee <LCD_enu_DrawSpecialCharacter+0x12a>
    45dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    45de:	9e 85       	ldd	r25, Y+14	; 0x0e
    45e0:	81 30       	cpi	r24, 0x01	; 1
    45e2:	91 05       	cpc	r25, r1
    45e4:	39 f4       	brne	.+14     	; 0x45f4 <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    45e6:	86 e0       	ldi	r24, 0x06	; 6
    45e8:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
    45ec:	03 c0       	rjmp	.+6      	; 0x45f4 <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    45ee:	84 e0       	ldi	r24, 0x04	; 4
    45f0:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	61 e0       	ldi	r22, 0x01	; 1
    45f8:	40 e0       	ldi	r20, 0x00	; 0
    45fa:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    45fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4600:	88 2f       	mov	r24, r24
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	9c 01       	movw	r18, r24
    4606:	21 50       	subi	r18, 0x01	; 1
    4608:	30 40       	sbci	r19, 0x00	; 0
    460a:	89 85       	ldd	r24, Y+9	; 0x09
    460c:	88 2f       	mov	r24, r24
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	01 97       	sbiw	r24, 0x01	; 1
    4612:	88 0f       	add	r24, r24
    4614:	99 1f       	adc	r25, r25
    4616:	88 0f       	add	r24, r24
    4618:	99 1f       	adc	r25, r25
    461a:	82 0f       	add	r24, r18
    461c:	93 1f       	adc	r25, r19
    461e:	82 95       	swap	r24
    4620:	92 95       	swap	r25
    4622:	90 7f       	andi	r25, 0xF0	; 240
    4624:	98 27       	eor	r25, r24
    4626:	80 7f       	andi	r24, 0xF0	; 240
    4628:	98 27       	eor	r25, r24
    462a:	98 2f       	mov	r25, r24
    462c:	8a 85       	ldd	r24, Y+10	; 0x0a
    462e:	89 0f       	add	r24, r25
    4630:	81 58       	subi	r24, 0x81	; 129
    4632:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    4636:	81 e0       	ldi	r24, 0x01	; 1
    4638:	61 e0       	ldi	r22, 0x01	; 1
    463a:	41 e0       	ldi	r20, 0x01	; 1
    463c:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    4640:	19 82       	std	Y+1, r1	; 0x01
    4642:	06 c0       	rjmp	.+12     	; 0x4650 <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    4644:	89 81       	ldd	r24, Y+1	; 0x01
    4646:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    464a:	89 81       	ldd	r24, Y+1	; 0x01
    464c:	8f 5f       	subi	r24, 0xFF	; 255
    464e:	89 83       	std	Y+1, r24	; 0x01
    4650:	99 81       	ldd	r25, Y+1	; 0x01
    4652:	8f 81       	ldd	r24, Y+7	; 0x07
    4654:	98 17       	cp	r25, r24
    4656:	b0 f3       	brcs	.-20     	; 0x4644 <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    4658:	1c 82       	std	Y+4, r1	; 0x04
    465a:	05 c0       	rjmp	.+10     	; 0x4666 <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    465c:	82 e0       	ldi	r24, 0x02	; 2
    465e:	8c 83       	std	Y+4, r24	; 0x04
    4660:	02 c0       	rjmp	.+4      	; 0x4666 <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    4662:	83 e0       	ldi	r24, 0x03	; 3
    4664:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    4666:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4668:	2e 96       	adiw	r28, 0x0e	; 14
    466a:	0f b6       	in	r0, 0x3f	; 63
    466c:	f8 94       	cli
    466e:	de bf       	out	0x3e, r29	; 62
    4670:	0f be       	out	0x3f, r0	; 63
    4672:	cd bf       	out	0x3d, r28	; 61
    4674:	cf 91       	pop	r28
    4676:	df 91       	pop	r29
    4678:	0f 91       	pop	r16
    467a:	ef 90       	pop	r14
    467c:	cf 90       	pop	r12
    467e:	08 95       	ret

00004680 <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    4680:	0f 93       	push	r16
    4682:	df 93       	push	r29
    4684:	cf 93       	push	r28
    4686:	cd b7       	in	r28, 0x3d	; 61
    4688:	de b7       	in	r29, 0x3e	; 62
    468a:	2e 97       	sbiw	r28, 0x0e	; 14
    468c:	0f b6       	in	r0, 0x3f	; 63
    468e:	f8 94       	cli
    4690:	de bf       	out	0x3e, r29	; 62
    4692:	0f be       	out	0x3f, r0	; 63
    4694:	cd bf       	out	0x3d, r28	; 61
    4696:	68 87       	std	Y+8, r22	; 0x08
    4698:	79 87       	std	Y+9, r23	; 0x09
    469a:	8a 87       	std	Y+10, r24	; 0x0a
    469c:	9b 87       	std	Y+11, r25	; 0x0b
    469e:	4c 87       	std	Y+12, r20	; 0x0c
    46a0:	2d 87       	std	Y+13, r18	; 0x0d
    46a2:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    46a8:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    46aa:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    46ac:	88 85       	ldd	r24, Y+8	; 0x08
    46ae:	99 85       	ldd	r25, Y+9	; 0x09
    46b0:	aa 85       	ldd	r26, Y+10	; 0x0a
    46b2:	bb 85       	ldd	r27, Y+11	; 0x0b
    46b4:	bb 23       	and	r27, r27
    46b6:	8c f4       	brge	.+34     	; 0x46da <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    46bc:	88 85       	ldd	r24, Y+8	; 0x08
    46be:	99 85       	ldd	r25, Y+9	; 0x09
    46c0:	aa 85       	ldd	r26, Y+10	; 0x0a
    46c2:	bb 85       	ldd	r27, Y+11	; 0x0b
    46c4:	b0 95       	com	r27
    46c6:	a0 95       	com	r26
    46c8:	90 95       	com	r25
    46ca:	81 95       	neg	r24
    46cc:	9f 4f       	sbci	r25, 0xFF	; 255
    46ce:	af 4f       	sbci	r26, 0xFF	; 255
    46d0:	bf 4f       	sbci	r27, 0xFF	; 255
    46d2:	88 87       	std	Y+8, r24	; 0x08
    46d4:	99 87       	std	Y+9, r25	; 0x09
    46d6:	aa 87       	std	Y+10, r26	; 0x0a
    46d8:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    46da:	88 85       	ldd	r24, Y+8	; 0x08
    46dc:	99 85       	ldd	r25, Y+9	; 0x09
    46de:	aa 85       	ldd	r26, Y+10	; 0x0a
    46e0:	bb 85       	ldd	r27, Y+11	; 0x0b
    46e2:	8c 83       	std	Y+4, r24	; 0x04
    46e4:	9d 83       	std	Y+5, r25	; 0x05
    46e6:	ae 83       	std	Y+6, r26	; 0x06
    46e8:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    46ea:	8a 81       	ldd	r24, Y+2	; 0x02
    46ec:	8f 5f       	subi	r24, 0xFF	; 255
    46ee:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    46f0:	8c 81       	ldd	r24, Y+4	; 0x04
    46f2:	9d 81       	ldd	r25, Y+5	; 0x05
    46f4:	ae 81       	ldd	r26, Y+6	; 0x06
    46f6:	bf 81       	ldd	r27, Y+7	; 0x07
    46f8:	2a e0       	ldi	r18, 0x0A	; 10
    46fa:	30 e0       	ldi	r19, 0x00	; 0
    46fc:	40 e0       	ldi	r20, 0x00	; 0
    46fe:	50 e0       	ldi	r21, 0x00	; 0
    4700:	bc 01       	movw	r22, r24
    4702:	cd 01       	movw	r24, r26
    4704:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <__divmodsi4>
    4708:	da 01       	movw	r26, r20
    470a:	c9 01       	movw	r24, r18
    470c:	8c 83       	std	Y+4, r24	; 0x04
    470e:	9d 83       	std	Y+5, r25	; 0x05
    4710:	ae 83       	std	Y+6, r26	; 0x06
    4712:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    4714:	8c 81       	ldd	r24, Y+4	; 0x04
    4716:	9d 81       	ldd	r25, Y+5	; 0x05
    4718:	ae 81       	ldd	r26, Y+6	; 0x06
    471a:	bf 81       	ldd	r27, Y+7	; 0x07
    471c:	00 97       	sbiw	r24, 0x00	; 0
    471e:	a1 05       	cpc	r26, r1
    4720:	b1 05       	cpc	r27, r1
    4722:	19 f7       	brne	.-58     	; 0x46ea <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    4724:	8c 85       	ldd	r24, Y+12	; 0x0c
    4726:	88 23       	and	r24, r24
    4728:	09 f4       	brne	.+2      	; 0x472c <LCD_enu_WriteIntegerNum+0xac>
    472a:	87 c0       	rjmp	.+270    	; 0x483a <LCD_enu_WriteIntegerNum+0x1ba>
    472c:	8c 85       	ldd	r24, Y+12	; 0x0c
    472e:	83 30       	cpi	r24, 0x03	; 3
    4730:	08 f0       	brcs	.+2      	; 0x4734 <LCD_enu_WriteIntegerNum+0xb4>
    4732:	83 c0       	rjmp	.+262    	; 0x483a <LCD_enu_WriteIntegerNum+0x1ba>
    4734:	8d 85       	ldd	r24, Y+13	; 0x0d
    4736:	88 23       	and	r24, r24
    4738:	09 f4       	brne	.+2      	; 0x473c <LCD_enu_WriteIntegerNum+0xbc>
    473a:	7f c0       	rjmp	.+254    	; 0x483a <LCD_enu_WriteIntegerNum+0x1ba>
    473c:	8d 85       	ldd	r24, Y+13	; 0x0d
    473e:	81 31       	cpi	r24, 0x11	; 17
    4740:	08 f0       	brcs	.+2      	; 0x4744 <LCD_enu_WriteIntegerNum+0xc4>
    4742:	7b c0       	rjmp	.+246    	; 0x483a <LCD_enu_WriteIntegerNum+0x1ba>
    4744:	8e 85       	ldd	r24, Y+14	; 0x0e
    4746:	85 30       	cpi	r24, 0x05	; 5
    4748:	08 f0       	brcs	.+2      	; 0x474c <LCD_enu_WriteIntegerNum+0xcc>
    474a:	77 c0       	rjmp	.+238    	; 0x483a <LCD_enu_WriteIntegerNum+0x1ba>
    474c:	8a 81       	ldd	r24, Y+2	; 0x02
    474e:	81 31       	cpi	r24, 0x11	; 17
    4750:	08 f0       	brcs	.+2      	; 0x4754 <LCD_enu_WriteIntegerNum+0xd4>
    4752:	73 c0       	rjmp	.+230    	; 0x483a <LCD_enu_WriteIntegerNum+0x1ba>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    4754:	88 85       	ldd	r24, Y+8	; 0x08
    4756:	99 85       	ldd	r25, Y+9	; 0x09
    4758:	aa 85       	ldd	r26, Y+10	; 0x0a
    475a:	bb 85       	ldd	r27, Y+11	; 0x0b
    475c:	8c 83       	std	Y+4, r24	; 0x04
    475e:	9d 83       	std	Y+5, r25	; 0x05
    4760:	ae 83       	std	Y+6, r26	; 0x06
    4762:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    4764:	ce 01       	movw	r24, r28
    4766:	04 96       	adiw	r24, 0x04	; 4
    4768:	0e 94 2f 28 	call	0x505e	; 0x505e <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    476c:	81 e0       	ldi	r24, 0x01	; 1
    476e:	61 e0       	ldi	r22, 0x01	; 1
    4770:	40 e0       	ldi	r20, 0x00	; 0
    4772:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        //Placing Cursor
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    4776:	8e 85       	ldd	r24, Y+14	; 0x0e
    4778:	88 2f       	mov	r24, r24
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	9c 01       	movw	r18, r24
    477e:	21 50       	subi	r18, 0x01	; 1
    4780:	30 40       	sbci	r19, 0x00	; 0
    4782:	8c 85       	ldd	r24, Y+12	; 0x0c
    4784:	88 2f       	mov	r24, r24
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	01 97       	sbiw	r24, 0x01	; 1
    478a:	88 0f       	add	r24, r24
    478c:	99 1f       	adc	r25, r25
    478e:	88 0f       	add	r24, r24
    4790:	99 1f       	adc	r25, r25
    4792:	82 0f       	add	r24, r18
    4794:	93 1f       	adc	r25, r19
    4796:	82 95       	swap	r24
    4798:	92 95       	swap	r25
    479a:	90 7f       	andi	r25, 0xF0	; 240
    479c:	98 27       	eor	r25, r24
    479e:	80 7f       	andi	r24, 0xF0	; 240
    47a0:	98 27       	eor	r25, r24
    47a2:	98 2f       	mov	r25, r24
    47a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47a6:	89 0f       	add	r24, r25
    47a8:	81 58       	subi	r24, 0x81	; 129
    47aa:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	61 e0       	ldi	r22, 0x01	; 1
    47b2:	41 e0       	ldi	r20, 0x01	; 1
    47b4:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    47b8:	89 81       	ldd	r24, Y+1	; 0x01
    47ba:	88 23       	and	r24, r24
    47bc:	51 f1       	breq	.+84     	; 0x4812 <LCD_enu_WriteIntegerNum+0x192>
        {
            enu_PassByteAndLatch('-');
    47be:	8d e2       	ldi	r24, 0x2D	; 45
    47c0:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
    47c4:	26 c0       	rjmp	.+76     	; 0x4812 <LCD_enu_WriteIntegerNum+0x192>
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    47c6:	8c 81       	ldd	r24, Y+4	; 0x04
    47c8:	9d 81       	ldd	r25, Y+5	; 0x05
    47ca:	ae 81       	ldd	r26, Y+6	; 0x06
    47cc:	bf 81       	ldd	r27, Y+7	; 0x07
    47ce:	2a e0       	ldi	r18, 0x0A	; 10
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	40 e0       	ldi	r20, 0x00	; 0
    47d4:	50 e0       	ldi	r21, 0x00	; 0
    47d6:	bc 01       	movw	r22, r24
    47d8:	cd 01       	movw	r24, r26
    47da:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <__divmodsi4>
    47de:	dc 01       	movw	r26, r24
    47e0:	cb 01       	movw	r24, r22
    47e2:	80 5d       	subi	r24, 0xD0	; 208
    47e4:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    47e8:	8c 81       	ldd	r24, Y+4	; 0x04
    47ea:	9d 81       	ldd	r25, Y+5	; 0x05
    47ec:	ae 81       	ldd	r26, Y+6	; 0x06
    47ee:	bf 81       	ldd	r27, Y+7	; 0x07
    47f0:	2a e0       	ldi	r18, 0x0A	; 10
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	40 e0       	ldi	r20, 0x00	; 0
    47f6:	50 e0       	ldi	r21, 0x00	; 0
    47f8:	bc 01       	movw	r22, r24
    47fa:	cd 01       	movw	r24, r26
    47fc:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <__divmodsi4>
    4800:	da 01       	movw	r26, r20
    4802:	c9 01       	movw	r24, r18
    4804:	8c 83       	std	Y+4, r24	; 0x04
    4806:	9d 83       	std	Y+5, r25	; 0x05
    4808:	ae 83       	std	Y+6, r26	; 0x06
    480a:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    480c:	8a 81       	ldd	r24, Y+2	; 0x02
    480e:	81 50       	subi	r24, 0x01	; 1
    4810:	8a 83       	std	Y+2, r24	; 0x02
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
    4812:	8c 81       	ldd	r24, Y+4	; 0x04
    4814:	9d 81       	ldd	r25, Y+5	; 0x05
    4816:	ae 81       	ldd	r26, Y+6	; 0x06
    4818:	bf 81       	ldd	r27, Y+7	; 0x07
    481a:	00 97       	sbiw	r24, 0x00	; 0
    481c:	a1 05       	cpc	r26, r1
    481e:	b1 05       	cpc	r27, r1
    4820:	91 f6       	brne	.-92     	; 0x47c6 <LCD_enu_WriteIntegerNum+0x146>
    4822:	06 c0       	rjmp	.+12     	; 0x4830 <LCD_enu_WriteIntegerNum+0x1b0>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    4824:	80 e3       	ldi	r24, 0x30	; 48
    4826:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    482a:	8a 81       	ldd	r24, Y+2	; 0x02
    482c:	81 50       	subi	r24, 0x01	; 1
    482e:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    4830:	8a 81       	ldd	r24, Y+2	; 0x02
    4832:	88 23       	and	r24, r24
    4834:	b9 f7       	brne	.-18     	; 0x4824 <LCD_enu_WriteIntegerNum+0x1a4>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    4836:	1b 82       	std	Y+3, r1	; 0x03
    4838:	02 c0       	rjmp	.+4      	; 0x483e <LCD_enu_WriteIntegerNum+0x1be>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    483a:	82 e0       	ldi	r24, 0x02	; 2
    483c:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    483e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4840:	2e 96       	adiw	r28, 0x0e	; 14
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	f8 94       	cli
    4846:	de bf       	out	0x3e, r29	; 62
    4848:	0f be       	out	0x3f, r0	; 63
    484a:	cd bf       	out	0x3d, r28	; 61
    484c:	cf 91       	pop	r28
    484e:	df 91       	pop	r29
    4850:	0f 91       	pop	r16
    4852:	08 95       	ret

00004854 <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    4854:	0f 93       	push	r16
    4856:	df 93       	push	r29
    4858:	cf 93       	push	r28
    485a:	cd b7       	in	r28, 0x3d	; 61
    485c:	de b7       	in	r29, 0x3e	; 62
    485e:	67 97       	sbiw	r28, 0x17	; 23
    4860:	0f b6       	in	r0, 0x3f	; 63
    4862:	f8 94       	cli
    4864:	de bf       	out	0x3e, r29	; 62
    4866:	0f be       	out	0x3f, r0	; 63
    4868:	cd bf       	out	0x3d, r28	; 61
    486a:	69 8b       	std	Y+17, r22	; 0x11
    486c:	7a 8b       	std	Y+18, r23	; 0x12
    486e:	8b 8b       	std	Y+19, r24	; 0x13
    4870:	9c 8b       	std	Y+20, r25	; 0x14
    4872:	4d 8b       	std	Y+21, r20	; 0x15
    4874:	2e 8b       	std	Y+22, r18	; 0x16
    4876:	0f 8b       	std	Y+23, r16	; 0x17
    u8 Local_u8_ErrorFlag = ES_NOK;
    4878:	81 e0       	ldi	r24, 0x01	; 1
    487a:	8c 83       	std	Y+4, r24	; 0x04
    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    u32 Local_u32_TempDecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    487c:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = LCD_FLOAT_PRECISION;
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	8a 83       	std	Y+2, r24	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    4882:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    4884:	69 89       	ldd	r22, Y+17	; 0x11
    4886:	7a 89       	ldd	r23, Y+18	; 0x12
    4888:	8b 89       	ldd	r24, Y+19	; 0x13
    488a:	9c 89       	ldd	r25, Y+20	; 0x14
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	40 e0       	ldi	r20, 0x00	; 0
    4892:	50 e0       	ldi	r21, 0x00	; 0
    4894:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4898:	88 23       	and	r24, r24
    489a:	5c f4       	brge	.+22     	; 0x48b2 <LCD_enu_WriteFloatNum+0x5e>
    {
        local_u8_NegativeFlag = True;
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    48a0:	89 89       	ldd	r24, Y+17	; 0x11
    48a2:	9a 89       	ldd	r25, Y+18	; 0x12
    48a4:	ab 89       	ldd	r26, Y+19	; 0x13
    48a6:	bc 89       	ldd	r27, Y+20	; 0x14
    48a8:	b0 58       	subi	r27, 0x80	; 128
    48aa:	89 8b       	std	Y+17, r24	; 0x11
    48ac:	9a 8b       	std	Y+18, r25	; 0x12
    48ae:	ab 8b       	std	Y+19, r26	; 0x13
    48b0:	bc 8b       	std	Y+20, r27	; 0x14
    }

    

    Local_u32_WholeDigits = Copy_f32_Num;
    48b2:	69 89       	ldd	r22, Y+17	; 0x11
    48b4:	7a 89       	ldd	r23, Y+18	; 0x12
    48b6:	8b 89       	ldd	r24, Y+19	; 0x13
    48b8:	9c 89       	ldd	r25, Y+20	; 0x14
    48ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48be:	dc 01       	movw	r26, r24
    48c0:	cb 01       	movw	r24, r22
    48c2:	8d 83       	std	Y+5, r24	; 0x05
    48c4:	9e 83       	std	Y+6, r25	; 0x06
    48c6:	af 83       	std	Y+7, r26	; 0x07
    48c8:	b8 87       	std	Y+8, r27	; 0x08

    Local_f32_DecimalDigits = Copy_f32_Num - Local_u32_WholeDigits;
    48ca:	8d 81       	ldd	r24, Y+5	; 0x05
    48cc:	9e 81       	ldd	r25, Y+6	; 0x06
    48ce:	af 81       	ldd	r26, Y+7	; 0x07
    48d0:	b8 85       	ldd	r27, Y+8	; 0x08
    48d2:	bc 01       	movw	r22, r24
    48d4:	cd 01       	movw	r24, r26
    48d6:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    48da:	9b 01       	movw	r18, r22
    48dc:	ac 01       	movw	r20, r24
    48de:	69 89       	ldd	r22, Y+17	; 0x11
    48e0:	7a 89       	ldd	r23, Y+18	; 0x12
    48e2:	8b 89       	ldd	r24, Y+19	; 0x13
    48e4:	9c 89       	ldd	r25, Y+20	; 0x14
    48e6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	89 87       	std	Y+9, r24	; 0x09
    48f0:	9a 87       	std	Y+10, r25	; 0x0a
    48f2:	ab 87       	std	Y+11, r26	; 0x0b
    48f4:	bc 87       	std	Y+12, r27	; 0x0c


    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    48f6:	8b 81       	ldd	r24, Y+3	; 0x03
    48f8:	8f 5f       	subi	r24, 0xFF	; 255
    48fa:	8b 83       	std	Y+3, r24	; 0x03

        Local_u32_WholeDigits  /= 10;
    48fc:	8d 81       	ldd	r24, Y+5	; 0x05
    48fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4900:	af 81       	ldd	r26, Y+7	; 0x07
    4902:	b8 85       	ldd	r27, Y+8	; 0x08
    4904:	2a e0       	ldi	r18, 0x0A	; 10
    4906:	30 e0       	ldi	r19, 0x00	; 0
    4908:	40 e0       	ldi	r20, 0x00	; 0
    490a:	50 e0       	ldi	r21, 0x00	; 0
    490c:	bc 01       	movw	r22, r24
    490e:	cd 01       	movw	r24, r26
    4910:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__udivmodsi4>
    4914:	da 01       	movw	r26, r20
    4916:	c9 01       	movw	r24, r18
    4918:	8d 83       	std	Y+5, r24	; 0x05
    491a:	9e 83       	std	Y+6, r25	; 0x06
    491c:	af 83       	std	Y+7, r26	; 0x07
    491e:	b8 87       	std	Y+8, r27	; 0x08

    }while(Local_u32_WholeDigits);
    4920:	8d 81       	ldd	r24, Y+5	; 0x05
    4922:	9e 81       	ldd	r25, Y+6	; 0x06
    4924:	af 81       	ldd	r26, Y+7	; 0x07
    4926:	b8 85       	ldd	r27, Y+8	; 0x08
    4928:	00 97       	sbiw	r24, 0x00	; 0
    492a:	a1 05       	cpc	r26, r1
    492c:	b1 05       	cpc	r27, r1
    492e:	19 f7       	brne	.-58     	; 0x48f6 <LCD_enu_WriteFloatNum+0xa2>

    //Converting Decimals into Whole numbers ex: 0.451 -> 451
    enu_ConvertFloatToInteger(&Local_f32_DecimalDigits, LCD_FLOAT_PRECISION);
    4930:	ce 01       	movw	r24, r28
    4932:	09 96       	adiw	r24, 0x09	; 9
    4934:	61 e0       	ldi	r22, 0x01	; 1
    4936:	0e 94 ad 28 	call	0x515a	; 0x515a <enu_ConvertFloatToInteger>


    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DecimalDigitCount <= LCD_MAX_INTEGER_LENGTH))
    493a:	8d 89       	ldd	r24, Y+21	; 0x15
    493c:	88 23       	and	r24, r24
    493e:	09 f4       	brne	.+2      	; 0x4942 <LCD_enu_WriteFloatNum+0xee>
    4940:	e3 c0       	rjmp	.+454    	; 0x4b08 <LCD_enu_WriteFloatNum+0x2b4>
    4942:	8d 89       	ldd	r24, Y+21	; 0x15
    4944:	83 30       	cpi	r24, 0x03	; 3
    4946:	08 f0       	brcs	.+2      	; 0x494a <LCD_enu_WriteFloatNum+0xf6>
    4948:	df c0       	rjmp	.+446    	; 0x4b08 <LCD_enu_WriteFloatNum+0x2b4>
    494a:	8e 89       	ldd	r24, Y+22	; 0x16
    494c:	88 23       	and	r24, r24
    494e:	09 f4       	brne	.+2      	; 0x4952 <LCD_enu_WriteFloatNum+0xfe>
    4950:	db c0       	rjmp	.+438    	; 0x4b08 <LCD_enu_WriteFloatNum+0x2b4>
    4952:	8e 89       	ldd	r24, Y+22	; 0x16
    4954:	81 31       	cpi	r24, 0x11	; 17
    4956:	08 f0       	brcs	.+2      	; 0x495a <LCD_enu_WriteFloatNum+0x106>
    4958:	d7 c0       	rjmp	.+430    	; 0x4b08 <LCD_enu_WriteFloatNum+0x2b4>
    495a:	8f 89       	ldd	r24, Y+23	; 0x17
    495c:	85 30       	cpi	r24, 0x05	; 5
    495e:	08 f0       	brcs	.+2      	; 0x4962 <LCD_enu_WriteFloatNum+0x10e>
    4960:	d3 c0       	rjmp	.+422    	; 0x4b08 <LCD_enu_WriteFloatNum+0x2b4>
    4962:	8a 81       	ldd	r24, Y+2	; 0x02
    4964:	81 31       	cpi	r24, 0x11	; 17
    4966:	08 f0       	brcs	.+2      	; 0x496a <LCD_enu_WriteFloatNum+0x116>
    4968:	cf c0       	rjmp	.+414    	; 0x4b08 <LCD_enu_WriteFloatNum+0x2b4>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    496a:	81 e0       	ldi	r24, 0x01	; 1
    496c:	61 e0       	ldi	r22, 0x01	; 1
    496e:	40 e0       	ldi	r20, 0x00	; 0
    4970:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    4974:	8f 89       	ldd	r24, Y+23	; 0x17
    4976:	88 2f       	mov	r24, r24
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	9c 01       	movw	r18, r24
    497c:	21 50       	subi	r18, 0x01	; 1
    497e:	30 40       	sbci	r19, 0x00	; 0
    4980:	8d 89       	ldd	r24, Y+21	; 0x15
    4982:	88 2f       	mov	r24, r24
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	01 97       	sbiw	r24, 0x01	; 1
    4988:	88 0f       	add	r24, r24
    498a:	99 1f       	adc	r25, r25
    498c:	88 0f       	add	r24, r24
    498e:	99 1f       	adc	r25, r25
    4990:	82 0f       	add	r24, r18
    4992:	93 1f       	adc	r25, r19
    4994:	82 95       	swap	r24
    4996:	92 95       	swap	r25
    4998:	90 7f       	andi	r25, 0xF0	; 240
    499a:	98 27       	eor	r25, r24
    499c:	80 7f       	andi	r24, 0xF0	; 240
    499e:	98 27       	eor	r25, r24
    49a0:	98 2f       	mov	r25, r24
    49a2:	8e 89       	ldd	r24, Y+22	; 0x16
    49a4:	89 0f       	add	r24, r25
    49a6:	81 58       	subi	r24, 0x81	; 129
    49a8:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
        
        
        //Choosing DR to pass numbers 
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	61 e0       	ldi	r22, 0x01	; 1
    49b0:	41 e0       	ldi	r20, 0x01	; 1
    49b2:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>

        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    49b6:	89 81       	ldd	r24, Y+1	; 0x01
    49b8:	88 23       	and	r24, r24
    49ba:	19 f0       	breq	.+6      	; 0x49c2 <LCD_enu_WriteFloatNum+0x16e>
        {
            enu_PassByteAndLatch('-');
    49bc:	8d e2       	ldi	r24, 0x2D	; 45
    49be:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
        }


        //A] Printing whole digits 

        Local_u32_WholeDigits = Copy_f32_Num;
    49c2:	69 89       	ldd	r22, Y+17	; 0x11
    49c4:	7a 89       	ldd	r23, Y+18	; 0x12
    49c6:	8b 89       	ldd	r24, Y+19	; 0x13
    49c8:	9c 89       	ldd	r25, Y+20	; 0x14
    49ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ce:	dc 01       	movw	r26, r24
    49d0:	cb 01       	movw	r24, r22
    49d2:	8d 83       	std	Y+5, r24	; 0x05
    49d4:	9e 83       	std	Y+6, r25	; 0x06
    49d6:	af 83       	std	Y+7, r26	; 0x07
    49d8:	b8 87       	std	Y+8, r27	; 0x08
        enu_ReverseInteger(&Local_u32_WholeDigits);
    49da:	ce 01       	movw	r24, r28
    49dc:	05 96       	adiw	r24, 0x05	; 5
    49de:	0e 94 2f 28 	call	0x505e	; 0x505e <enu_ReverseInteger>
    49e2:	26 c0       	rjmp	.+76     	; 0x4a30 <LCD_enu_WriteFloatNum+0x1dc>

        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    49e4:	8d 81       	ldd	r24, Y+5	; 0x05
    49e6:	9e 81       	ldd	r25, Y+6	; 0x06
    49e8:	af 81       	ldd	r26, Y+7	; 0x07
    49ea:	b8 85       	ldd	r27, Y+8	; 0x08
    49ec:	2a e0       	ldi	r18, 0x0A	; 10
    49ee:	30 e0       	ldi	r19, 0x00	; 0
    49f0:	40 e0       	ldi	r20, 0x00	; 0
    49f2:	50 e0       	ldi	r21, 0x00	; 0
    49f4:	bc 01       	movw	r22, r24
    49f6:	cd 01       	movw	r24, r26
    49f8:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__udivmodsi4>
    49fc:	dc 01       	movw	r26, r24
    49fe:	cb 01       	movw	r24, r22
    4a00:	80 5d       	subi	r24, 0xD0	; 208
    4a02:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
           
            Local_u32_WholeDigits /= 10;
    4a06:	8d 81       	ldd	r24, Y+5	; 0x05
    4a08:	9e 81       	ldd	r25, Y+6	; 0x06
    4a0a:	af 81       	ldd	r26, Y+7	; 0x07
    4a0c:	b8 85       	ldd	r27, Y+8	; 0x08
    4a0e:	2a e0       	ldi	r18, 0x0A	; 10
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	40 e0       	ldi	r20, 0x00	; 0
    4a14:	50 e0       	ldi	r21, 0x00	; 0
    4a16:	bc 01       	movw	r22, r24
    4a18:	cd 01       	movw	r24, r26
    4a1a:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__udivmodsi4>
    4a1e:	da 01       	movw	r26, r20
    4a20:	c9 01       	movw	r24, r18
    4a22:	8d 83       	std	Y+5, r24	; 0x05
    4a24:	9e 83       	std	Y+6, r25	; 0x06
    4a26:	af 83       	std	Y+7, r26	; 0x07
    4a28:	b8 87       	std	Y+8, r27	; 0x08
           
            Local_u8_WholeDigitCount--;
    4a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a2c:	81 50       	subi	r24, 0x01	; 1
    4a2e:	8b 83       	std	Y+3, r24	; 0x03

        Local_u32_WholeDigits = Copy_f32_Num;
        enu_ReverseInteger(&Local_u32_WholeDigits);

        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    4a30:	8d 81       	ldd	r24, Y+5	; 0x05
    4a32:	9e 81       	ldd	r25, Y+6	; 0x06
    4a34:	af 81       	ldd	r26, Y+7	; 0x07
    4a36:	b8 85       	ldd	r27, Y+8	; 0x08
    4a38:	00 97       	sbiw	r24, 0x00	; 0
    4a3a:	a1 05       	cpc	r26, r1
    4a3c:	b1 05       	cpc	r27, r1
    4a3e:	91 f6       	brne	.-92     	; 0x49e4 <LCD_enu_WriteFloatNum+0x190>
    4a40:	06 c0       	rjmp	.+12     	; 0x4a4e <LCD_enu_WriteFloatNum+0x1fa>
        }

        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    4a42:	80 e3       	ldi	r24, 0x30	; 48
    4a44:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
           
            Local_u8_WholeDigitCount--;
    4a48:	8b 81       	ldd	r24, Y+3	; 0x03
    4a4a:	81 50       	subi	r24, 0x01	; 1
    4a4c:	8b 83       	std	Y+3, r24	; 0x03
           
            Local_u8_WholeDigitCount--;
        }

        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    4a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a50:	88 23       	and	r24, r24
    4a52:	b9 f7       	brne	.-18     	; 0x4a42 <LCD_enu_WriteFloatNum+0x1ee>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    4a54:	89 85       	ldd	r24, Y+9	; 0x09
    4a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a58:	ab 85       	ldd	r26, Y+11	; 0x0b
    4a5a:	bc 85       	ldd	r27, Y+12	; 0x0c
    4a5c:	bc 01       	movw	r22, r24
    4a5e:	cd 01       	movw	r24, r26
    4a60:	20 e0       	ldi	r18, 0x00	; 0
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	40 e0       	ldi	r20, 0x00	; 0
    4a66:	50 e0       	ldi	r21, 0x00	; 0
    4a68:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    4a6c:	88 23       	and	r24, r24
    4a6e:	09 f4       	brne	.+2      	; 0x4a72 <LCD_enu_WriteFloatNum+0x21e>
    4a70:	49 c0       	rjmp	.+146    	; 0x4b04 <LCD_enu_WriteFloatNum+0x2b0>
        {
            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    4a72:	8e e2       	ldi	r24, 0x2E	; 46
    4a74:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>

            //Saving the float digits in an u32 variable to pass to other functions easily (step for Safety reasons not neaded)
            Local_u32_TempDecimalDigits = Local_f32_DecimalDigits;
    4a78:	89 85       	ldd	r24, Y+9	; 0x09
    4a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a7c:	ab 85       	ldd	r26, Y+11	; 0x0b
    4a7e:	bc 85       	ldd	r27, Y+12	; 0x0c
    4a80:	bc 01       	movw	r22, r24
    4a82:	cd 01       	movw	r24, r26
    4a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	8d 87       	std	Y+13, r24	; 0x0d
    4a8e:	9e 87       	std	Y+14, r25	; 0x0e
    4a90:	af 87       	std	Y+15, r26	; 0x0f
    4a92:	b8 8b       	std	Y+16, r27	; 0x10
            
            //Reversing Number
            enu_ReverseInteger(&Local_u32_TempDecimalDigits);
    4a94:	ce 01       	movw	r24, r28
    4a96:	0d 96       	adiw	r24, 0x0d	; 13
    4a98:	0e 94 2f 28 	call	0x505e	; 0x505e <enu_ReverseInteger>
    4a9c:	26 c0       	rjmp	.+76     	; 0x4aea <LCD_enu_WriteFloatNum+0x296>

            //Printing one digit at a time
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch((Local_u32_TempDecimalDigits % 10) + 48);
    4a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aa2:	af 85       	ldd	r26, Y+15	; 0x0f
    4aa4:	b8 89       	ldd	r27, Y+16	; 0x10
    4aa6:	2a e0       	ldi	r18, 0x0A	; 10
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	40 e0       	ldi	r20, 0x00	; 0
    4aac:	50 e0       	ldi	r21, 0x00	; 0
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__udivmodsi4>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	80 5d       	subi	r24, 0xD0	; 208
    4abc:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
                
                Local_u32_TempDecimalDigits /= 10;
    4ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ac4:	af 85       	ldd	r26, Y+15	; 0x0f
    4ac6:	b8 89       	ldd	r27, Y+16	; 0x10
    4ac8:	2a e0       	ldi	r18, 0x0A	; 10
    4aca:	30 e0       	ldi	r19, 0x00	; 0
    4acc:	40 e0       	ldi	r20, 0x00	; 0
    4ace:	50 e0       	ldi	r21, 0x00	; 0
    4ad0:	bc 01       	movw	r22, r24
    4ad2:	cd 01       	movw	r24, r26
    4ad4:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__udivmodsi4>
    4ad8:	da 01       	movw	r26, r20
    4ada:	c9 01       	movw	r24, r18
    4adc:	8d 87       	std	Y+13, r24	; 0x0d
    4ade:	9e 87       	std	Y+14, r25	; 0x0e
    4ae0:	af 87       	std	Y+15, r26	; 0x0f
    4ae2:	b8 8b       	std	Y+16, r27	; 0x10
                
                Local_u8_DecimalDigitCount--;
    4ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae6:	81 50       	subi	r24, 0x01	; 1
    4ae8:	8a 83       	std	Y+2, r24	; 0x02
            
            //Reversing Number
            enu_ReverseInteger(&Local_u32_TempDecimalDigits);

            //Printing one digit at a time
            while(Local_u8_DecimalDigitCount)
    4aea:	8a 81       	ldd	r24, Y+2	; 0x02
    4aec:	88 23       	and	r24, r24
    4aee:	b9 f6       	brne	.-82     	; 0x4a9e <LCD_enu_WriteFloatNum+0x24a>
    4af0:	06 c0       	rjmp	.+12     	; 0x4afe <LCD_enu_WriteFloatNum+0x2aa>
            }

            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    4af2:	80 e3       	ldi	r24, 0x30	; 48
    4af4:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    4af8:	8a 81       	ldd	r24, Y+2	; 0x02
    4afa:	81 50       	subi	r24, 0x01	; 1
    4afc:	8a 83       	std	Y+2, r24	; 0x02
                
                Local_u8_DecimalDigitCount--;
            }

            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    4afe:	8a 81       	ldd	r24, Y+2	; 0x02
    4b00:	88 23       	and	r24, r24
    4b02:	b9 f7       	brne	.-18     	; 0x4af2 <LCD_enu_WriteFloatNum+0x29e>
                Local_u8_DecimalDigitCount--;
            }
            
        }

        Local_u8_ErrorFlag = ES_OK;
    4b04:	1c 82       	std	Y+4, r1	; 0x04
    4b06:	02 c0       	rjmp	.+4      	; 0x4b0c <LCD_enu_WriteFloatNum+0x2b8>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4b08:	82 e0       	ldi	r24, 0x02	; 2
    4b0a:	8c 83       	std	Y+4, r24	; 0x04
    }

    return Local_u8_ErrorFlag;
    4b0c:	8c 81       	ldd	r24, Y+4	; 0x04

}
    4b0e:	67 96       	adiw	r28, 0x17	; 23
    4b10:	0f b6       	in	r0, 0x3f	; 63
    4b12:	f8 94       	cli
    4b14:	de bf       	out	0x3e, r29	; 62
    4b16:	0f be       	out	0x3f, r0	; 63
    4b18:	cd bf       	out	0x3d, r28	; 61
    4b1a:	cf 91       	pop	r28
    4b1c:	df 91       	pop	r29
    4b1e:	0f 91       	pop	r16
    4b20:	08 95       	ret

00004b22 <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    4b22:	df 93       	push	r29
    4b24:	cf 93       	push	r28
    4b26:	cd b7       	in	r28, 0x3d	; 61
    4b28:	de b7       	in	r29, 0x3e	; 62
    4b2a:	ac 97       	sbiw	r28, 0x2c	; 44
    4b2c:	0f b6       	in	r0, 0x3f	; 63
    4b2e:	f8 94       	cli
    4b30:	de bf       	out	0x3e, r29	; 62
    4b32:	0f be       	out	0x3f, r0	; 63
    4b34:	cd bf       	out	0x3d, r28	; 61
    4b36:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    4b3c:	81 e0       	ldi	r24, 0x01	; 1
    4b3e:	62 e0       	ldi	r22, 0x02	; 2
    4b40:	40 e0       	ldi	r20, 0x00	; 0
    4b42:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    4b46:	81 e0       	ldi	r24, 0x01	; 1
    4b48:	63 e0       	ldi	r22, 0x03	; 3
    4b4a:	40 e0       	ldi	r20, 0x00	; 0
    4b4c:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    4b50:	8c a5       	ldd	r24, Y+44	; 0x2c
    4b52:	98 2f       	mov	r25, r24
    4b54:	99 1f       	adc	r25, r25
    4b56:	99 27       	eor	r25, r25
    4b58:	99 1f       	adc	r25, r25
    4b5a:	80 e0       	ldi	r24, 0x00	; 0
    4b5c:	67 e0       	ldi	r22, 0x07	; 7
    4b5e:	49 2f       	mov	r20, r25
    4b60:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    4b64:	8c a5       	ldd	r24, Y+44	; 0x2c
    4b66:	82 95       	swap	r24
    4b68:	86 95       	lsr	r24
    4b6a:	86 95       	lsr	r24
    4b6c:	83 70       	andi	r24, 0x03	; 3
    4b6e:	98 2f       	mov	r25, r24
    4b70:	91 70       	andi	r25, 0x01	; 1
    4b72:	80 e0       	ldi	r24, 0x00	; 0
    4b74:	66 e0       	ldi	r22, 0x06	; 6
    4b76:	49 2f       	mov	r20, r25
    4b78:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    4b7c:	8c a5       	ldd	r24, Y+44	; 0x2c
    4b7e:	82 95       	swap	r24
    4b80:	86 95       	lsr	r24
    4b82:	87 70       	andi	r24, 0x07	; 7
    4b84:	98 2f       	mov	r25, r24
    4b86:	91 70       	andi	r25, 0x01	; 1
    4b88:	80 e0       	ldi	r24, 0x00	; 0
    4b8a:	65 e0       	ldi	r22, 0x05	; 5
    4b8c:	49 2f       	mov	r20, r25
    4b8e:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    4b92:	8c a5       	ldd	r24, Y+44	; 0x2c
    4b94:	82 95       	swap	r24
    4b96:	8f 70       	andi	r24, 0x0F	; 15
    4b98:	98 2f       	mov	r25, r24
    4b9a:	91 70       	andi	r25, 0x01	; 1
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	64 e0       	ldi	r22, 0x04	; 4
    4ba0:	49 2f       	mov	r20, r25
    4ba2:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	63 e0       	ldi	r22, 0x03	; 3
    4baa:	41 e0       	ldi	r20, 0x01	; 1
    4bac:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    4bb0:	80 e0       	ldi	r24, 0x00	; 0
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	a0 e8       	ldi	r26, 0x80	; 128
    4bb6:	bf e3       	ldi	r27, 0x3F	; 63
    4bb8:	8f a3       	std	Y+39, r24	; 0x27
    4bba:	98 a7       	std	Y+40, r25	; 0x28
    4bbc:	a9 a7       	std	Y+41, r26	; 0x29
    4bbe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bc0:	6f a1       	ldd	r22, Y+39	; 0x27
    4bc2:	78 a5       	ldd	r23, Y+40	; 0x28
    4bc4:	89 a5       	ldd	r24, Y+41	; 0x29
    4bc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bc8:	20 e0       	ldi	r18, 0x00	; 0
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	4a e7       	ldi	r20, 0x7A	; 122
    4bce:	55 e4       	ldi	r21, 0x45	; 69
    4bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bd4:	dc 01       	movw	r26, r24
    4bd6:	cb 01       	movw	r24, r22
    4bd8:	8b a3       	std	Y+35, r24	; 0x23
    4bda:	9c a3       	std	Y+36, r25	; 0x24
    4bdc:	ad a3       	std	Y+37, r26	; 0x25
    4bde:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4be0:	6b a1       	ldd	r22, Y+35	; 0x23
    4be2:	7c a1       	ldd	r23, Y+36	; 0x24
    4be4:	8d a1       	ldd	r24, Y+37	; 0x25
    4be6:	9e a1       	ldd	r25, Y+38	; 0x26
    4be8:	20 e0       	ldi	r18, 0x00	; 0
    4bea:	30 e0       	ldi	r19, 0x00	; 0
    4bec:	40 e8       	ldi	r20, 0x80	; 128
    4bee:	5f e3       	ldi	r21, 0x3F	; 63
    4bf0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4bf4:	88 23       	and	r24, r24
    4bf6:	2c f4       	brge	.+10     	; 0x4c02 <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    4bf8:	81 e0       	ldi	r24, 0x01	; 1
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	9a a3       	std	Y+34, r25	; 0x22
    4bfe:	89 a3       	std	Y+33, r24	; 0x21
    4c00:	3f c0       	rjmp	.+126    	; 0x4c80 <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    4c02:	6b a1       	ldd	r22, Y+35	; 0x23
    4c04:	7c a1       	ldd	r23, Y+36	; 0x24
    4c06:	8d a1       	ldd	r24, Y+37	; 0x25
    4c08:	9e a1       	ldd	r25, Y+38	; 0x26
    4c0a:	20 e0       	ldi	r18, 0x00	; 0
    4c0c:	3f ef       	ldi	r19, 0xFF	; 255
    4c0e:	4f e7       	ldi	r20, 0x7F	; 127
    4c10:	57 e4       	ldi	r21, 0x47	; 71
    4c12:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4c16:	18 16       	cp	r1, r24
    4c18:	4c f5       	brge	.+82     	; 0x4c6c <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c1a:	6f a1       	ldd	r22, Y+39	; 0x27
    4c1c:	78 a5       	ldd	r23, Y+40	; 0x28
    4c1e:	89 a5       	ldd	r24, Y+41	; 0x29
    4c20:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c22:	20 e0       	ldi	r18, 0x00	; 0
    4c24:	30 e0       	ldi	r19, 0x00	; 0
    4c26:	40 e2       	ldi	r20, 0x20	; 32
    4c28:	51 e4       	ldi	r21, 0x41	; 65
    4c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c2e:	dc 01       	movw	r26, r24
    4c30:	cb 01       	movw	r24, r22
    4c32:	bc 01       	movw	r22, r24
    4c34:	cd 01       	movw	r24, r26
    4c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c3a:	dc 01       	movw	r26, r24
    4c3c:	cb 01       	movw	r24, r22
    4c3e:	9a a3       	std	Y+34, r25	; 0x22
    4c40:	89 a3       	std	Y+33, r24	; 0x21
    4c42:	0f c0       	rjmp	.+30     	; 0x4c62 <enu_PassByteAndLatch+0x140>
    4c44:	80 e9       	ldi	r24, 0x90	; 144
    4c46:	91 e0       	ldi	r25, 0x01	; 1
    4c48:	98 a3       	std	Y+32, r25	; 0x20
    4c4a:	8f 8f       	std	Y+31, r24	; 0x1f
    4c4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c4e:	98 a1       	ldd	r25, Y+32	; 0x20
    4c50:	01 97       	sbiw	r24, 0x01	; 1
    4c52:	f1 f7       	brne	.-4      	; 0x4c50 <enu_PassByteAndLatch+0x12e>
    4c54:	98 a3       	std	Y+32, r25	; 0x20
    4c56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c58:	89 a1       	ldd	r24, Y+33	; 0x21
    4c5a:	9a a1       	ldd	r25, Y+34	; 0x22
    4c5c:	01 97       	sbiw	r24, 0x01	; 1
    4c5e:	9a a3       	std	Y+34, r25	; 0x22
    4c60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c62:	89 a1       	ldd	r24, Y+33	; 0x21
    4c64:	9a a1       	ldd	r25, Y+34	; 0x22
    4c66:	00 97       	sbiw	r24, 0x00	; 0
    4c68:	69 f7       	brne	.-38     	; 0x4c44 <enu_PassByteAndLatch+0x122>
    4c6a:	14 c0       	rjmp	.+40     	; 0x4c94 <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c6c:	6b a1       	ldd	r22, Y+35	; 0x23
    4c6e:	7c a1       	ldd	r23, Y+36	; 0x24
    4c70:	8d a1       	ldd	r24, Y+37	; 0x25
    4c72:	9e a1       	ldd	r25, Y+38	; 0x26
    4c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c78:	dc 01       	movw	r26, r24
    4c7a:	cb 01       	movw	r24, r22
    4c7c:	9a a3       	std	Y+34, r25	; 0x22
    4c7e:	89 a3       	std	Y+33, r24	; 0x21
    4c80:	89 a1       	ldd	r24, Y+33	; 0x21
    4c82:	9a a1       	ldd	r25, Y+34	; 0x22
    4c84:	9e 8f       	std	Y+30, r25	; 0x1e
    4c86:	8d 8f       	std	Y+29, r24	; 0x1d
    4c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c8c:	01 97       	sbiw	r24, 0x01	; 1
    4c8e:	f1 f7       	brne	.-4      	; 0x4c8c <enu_PassByteAndLatch+0x16a>
    4c90:	9e 8f       	std	Y+30, r25	; 0x1e
    4c92:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	63 e0       	ldi	r22, 0x03	; 3
    4c98:	40 e0       	ldi	r20, 0x00	; 0
    4c9a:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    4c9e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4ca0:	86 95       	lsr	r24
    4ca2:	86 95       	lsr	r24
    4ca4:	86 95       	lsr	r24
    4ca6:	98 2f       	mov	r25, r24
    4ca8:	91 70       	andi	r25, 0x01	; 1
    4caa:	80 e0       	ldi	r24, 0x00	; 0
    4cac:	67 e0       	ldi	r22, 0x07	; 7
    4cae:	49 2f       	mov	r20, r25
    4cb0:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    4cb4:	8c a5       	ldd	r24, Y+44	; 0x2c
    4cb6:	86 95       	lsr	r24
    4cb8:	86 95       	lsr	r24
    4cba:	98 2f       	mov	r25, r24
    4cbc:	91 70       	andi	r25, 0x01	; 1
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	66 e0       	ldi	r22, 0x06	; 6
    4cc2:	49 2f       	mov	r20, r25
    4cc4:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    4cc8:	8c a5       	ldd	r24, Y+44	; 0x2c
    4cca:	86 95       	lsr	r24
    4ccc:	98 2f       	mov	r25, r24
    4cce:	91 70       	andi	r25, 0x01	; 1
    4cd0:	80 e0       	ldi	r24, 0x00	; 0
    4cd2:	65 e0       	ldi	r22, 0x05	; 5
    4cd4:	49 2f       	mov	r20, r25
    4cd6:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    4cda:	8c a5       	ldd	r24, Y+44	; 0x2c
    4cdc:	98 2f       	mov	r25, r24
    4cde:	91 70       	andi	r25, 0x01	; 1
    4ce0:	80 e0       	ldi	r24, 0x00	; 0
    4ce2:	64 e0       	ldi	r22, 0x04	; 4
    4ce4:	49 2f       	mov	r20, r25
    4ce6:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    4cea:	81 e0       	ldi	r24, 0x01	; 1
    4cec:	63 e0       	ldi	r22, 0x03	; 3
    4cee:	41 e0       	ldi	r20, 0x01	; 1
    4cf0:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    4cf4:	80 e0       	ldi	r24, 0x00	; 0
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	a0 e8       	ldi	r26, 0x80	; 128
    4cfa:	bf e3       	ldi	r27, 0x3F	; 63
    4cfc:	89 8f       	std	Y+25, r24	; 0x19
    4cfe:	9a 8f       	std	Y+26, r25	; 0x1a
    4d00:	ab 8f       	std	Y+27, r26	; 0x1b
    4d02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d04:	69 8d       	ldd	r22, Y+25	; 0x19
    4d06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d0c:	20 e0       	ldi	r18, 0x00	; 0
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	4a e7       	ldi	r20, 0x7A	; 122
    4d12:	55 e4       	ldi	r21, 0x45	; 69
    4d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d18:	dc 01       	movw	r26, r24
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	8d 8b       	std	Y+21, r24	; 0x15
    4d1e:	9e 8b       	std	Y+22, r25	; 0x16
    4d20:	af 8b       	std	Y+23, r26	; 0x17
    4d22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d24:	6d 89       	ldd	r22, Y+21	; 0x15
    4d26:	7e 89       	ldd	r23, Y+22	; 0x16
    4d28:	8f 89       	ldd	r24, Y+23	; 0x17
    4d2a:	98 8d       	ldd	r25, Y+24	; 0x18
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	40 e8       	ldi	r20, 0x80	; 128
    4d32:	5f e3       	ldi	r21, 0x3F	; 63
    4d34:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4d38:	88 23       	and	r24, r24
    4d3a:	2c f4       	brge	.+10     	; 0x4d46 <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    4d3c:	81 e0       	ldi	r24, 0x01	; 1
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	9c 8b       	std	Y+20, r25	; 0x14
    4d42:	8b 8b       	std	Y+19, r24	; 0x13
    4d44:	3f c0       	rjmp	.+126    	; 0x4dc4 <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    4d46:	6d 89       	ldd	r22, Y+21	; 0x15
    4d48:	7e 89       	ldd	r23, Y+22	; 0x16
    4d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d4e:	20 e0       	ldi	r18, 0x00	; 0
    4d50:	3f ef       	ldi	r19, 0xFF	; 255
    4d52:	4f e7       	ldi	r20, 0x7F	; 127
    4d54:	57 e4       	ldi	r21, 0x47	; 71
    4d56:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4d5a:	18 16       	cp	r1, r24
    4d5c:	4c f5       	brge	.+82     	; 0x4db0 <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d5e:	69 8d       	ldd	r22, Y+25	; 0x19
    4d60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	40 e2       	ldi	r20, 0x20	; 32
    4d6c:	51 e4       	ldi	r21, 0x41	; 65
    4d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
    4d76:	bc 01       	movw	r22, r24
    4d78:	cd 01       	movw	r24, r26
    4d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d7e:	dc 01       	movw	r26, r24
    4d80:	cb 01       	movw	r24, r22
    4d82:	9c 8b       	std	Y+20, r25	; 0x14
    4d84:	8b 8b       	std	Y+19, r24	; 0x13
    4d86:	0f c0       	rjmp	.+30     	; 0x4da6 <enu_PassByteAndLatch+0x284>
    4d88:	80 e9       	ldi	r24, 0x90	; 144
    4d8a:	91 e0       	ldi	r25, 0x01	; 1
    4d8c:	9a 8b       	std	Y+18, r25	; 0x12
    4d8e:	89 8b       	std	Y+17, r24	; 0x11
    4d90:	89 89       	ldd	r24, Y+17	; 0x11
    4d92:	9a 89       	ldd	r25, Y+18	; 0x12
    4d94:	01 97       	sbiw	r24, 0x01	; 1
    4d96:	f1 f7       	brne	.-4      	; 0x4d94 <enu_PassByteAndLatch+0x272>
    4d98:	9a 8b       	std	Y+18, r25	; 0x12
    4d9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    4d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    4da0:	01 97       	sbiw	r24, 0x01	; 1
    4da2:	9c 8b       	std	Y+20, r25	; 0x14
    4da4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4da6:	8b 89       	ldd	r24, Y+19	; 0x13
    4da8:	9c 89       	ldd	r25, Y+20	; 0x14
    4daa:	00 97       	sbiw	r24, 0x00	; 0
    4dac:	69 f7       	brne	.-38     	; 0x4d88 <enu_PassByteAndLatch+0x266>
    4dae:	14 c0       	rjmp	.+40     	; 0x4dd8 <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4db0:	6d 89       	ldd	r22, Y+21	; 0x15
    4db2:	7e 89       	ldd	r23, Y+22	; 0x16
    4db4:	8f 89       	ldd	r24, Y+23	; 0x17
    4db6:	98 8d       	ldd	r25, Y+24	; 0x18
    4db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	cb 01       	movw	r24, r22
    4dc0:	9c 8b       	std	Y+20, r25	; 0x14
    4dc2:	8b 8b       	std	Y+19, r24	; 0x13
    4dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    4dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    4dc8:	98 8b       	std	Y+16, r25	; 0x10
    4dca:	8f 87       	std	Y+15, r24	; 0x0f
    4dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dce:	98 89       	ldd	r25, Y+16	; 0x10
    4dd0:	01 97       	sbiw	r24, 0x01	; 1
    4dd2:	f1 f7       	brne	.-4      	; 0x4dd0 <enu_PassByteAndLatch+0x2ae>
    4dd4:	98 8b       	std	Y+16, r25	; 0x10
    4dd6:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    4dd8:	81 e0       	ldi	r24, 0x01	; 1
    4dda:	63 e0       	ldi	r22, 0x03	; 3
    4ddc:	40 e0       	ldi	r20, 0x00	; 0
    4dde:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    4de2:	80 e0       	ldi	r24, 0x00	; 0
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	a0 e0       	ldi	r26, 0x00	; 0
    4de8:	b0 e4       	ldi	r27, 0x40	; 64
    4dea:	8b 87       	std	Y+11, r24	; 0x0b
    4dec:	9c 87       	std	Y+12, r25	; 0x0c
    4dee:	ad 87       	std	Y+13, r26	; 0x0d
    4df0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4df2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4df4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4df6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4df8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dfa:	20 e0       	ldi	r18, 0x00	; 0
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	4a e7       	ldi	r20, 0x7A	; 122
    4e00:	55 e4       	ldi	r21, 0x45	; 69
    4e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e06:	dc 01       	movw	r26, r24
    4e08:	cb 01       	movw	r24, r22
    4e0a:	8f 83       	std	Y+7, r24	; 0x07
    4e0c:	98 87       	std	Y+8, r25	; 0x08
    4e0e:	a9 87       	std	Y+9, r26	; 0x09
    4e10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e12:	6f 81       	ldd	r22, Y+7	; 0x07
    4e14:	78 85       	ldd	r23, Y+8	; 0x08
    4e16:	89 85       	ldd	r24, Y+9	; 0x09
    4e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e1a:	20 e0       	ldi	r18, 0x00	; 0
    4e1c:	30 e0       	ldi	r19, 0x00	; 0
    4e1e:	40 e8       	ldi	r20, 0x80	; 128
    4e20:	5f e3       	ldi	r21, 0x3F	; 63
    4e22:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4e26:	88 23       	and	r24, r24
    4e28:	2c f4       	brge	.+10     	; 0x4e34 <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    4e2a:	81 e0       	ldi	r24, 0x01	; 1
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	9e 83       	std	Y+6, r25	; 0x06
    4e30:	8d 83       	std	Y+5, r24	; 0x05
    4e32:	3f c0       	rjmp	.+126    	; 0x4eb2 <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    4e34:	6f 81       	ldd	r22, Y+7	; 0x07
    4e36:	78 85       	ldd	r23, Y+8	; 0x08
    4e38:	89 85       	ldd	r24, Y+9	; 0x09
    4e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e3c:	20 e0       	ldi	r18, 0x00	; 0
    4e3e:	3f ef       	ldi	r19, 0xFF	; 255
    4e40:	4f e7       	ldi	r20, 0x7F	; 127
    4e42:	57 e4       	ldi	r21, 0x47	; 71
    4e44:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4e48:	18 16       	cp	r1, r24
    4e4a:	4c f5       	brge	.+82     	; 0x4e9e <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e54:	20 e0       	ldi	r18, 0x00	; 0
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	40 e2       	ldi	r20, 0x20	; 32
    4e5a:	51 e4       	ldi	r21, 0x41	; 65
    4e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e60:	dc 01       	movw	r26, r24
    4e62:	cb 01       	movw	r24, r22
    4e64:	bc 01       	movw	r22, r24
    4e66:	cd 01       	movw	r24, r26
    4e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e6c:	dc 01       	movw	r26, r24
    4e6e:	cb 01       	movw	r24, r22
    4e70:	9e 83       	std	Y+6, r25	; 0x06
    4e72:	8d 83       	std	Y+5, r24	; 0x05
    4e74:	0f c0       	rjmp	.+30     	; 0x4e94 <enu_PassByteAndLatch+0x372>
    4e76:	80 e9       	ldi	r24, 0x90	; 144
    4e78:	91 e0       	ldi	r25, 0x01	; 1
    4e7a:	9c 83       	std	Y+4, r25	; 0x04
    4e7c:	8b 83       	std	Y+3, r24	; 0x03
    4e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e80:	9c 81       	ldd	r25, Y+4	; 0x04
    4e82:	01 97       	sbiw	r24, 0x01	; 1
    4e84:	f1 f7       	brne	.-4      	; 0x4e82 <enu_PassByteAndLatch+0x360>
    4e86:	9c 83       	std	Y+4, r25	; 0x04
    4e88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e8e:	01 97       	sbiw	r24, 0x01	; 1
    4e90:	9e 83       	std	Y+6, r25	; 0x06
    4e92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e94:	8d 81       	ldd	r24, Y+5	; 0x05
    4e96:	9e 81       	ldd	r25, Y+6	; 0x06
    4e98:	00 97       	sbiw	r24, 0x00	; 0
    4e9a:	69 f7       	brne	.-38     	; 0x4e76 <enu_PassByteAndLatch+0x354>
    4e9c:	14 c0       	rjmp	.+40     	; 0x4ec6 <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    4ea0:	78 85       	ldd	r23, Y+8	; 0x08
    4ea2:	89 85       	ldd	r24, Y+9	; 0x09
    4ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eaa:	dc 01       	movw	r26, r24
    4eac:	cb 01       	movw	r24, r22
    4eae:	9e 83       	std	Y+6, r25	; 0x06
    4eb0:	8d 83       	std	Y+5, r24	; 0x05
    4eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb6:	9a 83       	std	Y+2, r25	; 0x02
    4eb8:	89 83       	std	Y+1, r24	; 0x01
    4eba:	89 81       	ldd	r24, Y+1	; 0x01
    4ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ebe:	01 97       	sbiw	r24, 0x01	; 1
    4ec0:	f1 f7       	brne	.-4      	; 0x4ebe <enu_PassByteAndLatch+0x39c>
    4ec2:	9a 83       	std	Y+2, r25	; 0x02
    4ec4:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    4ec6:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    4ec8:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    4eca:	ac 96       	adiw	r28, 0x2c	; 44
    4ecc:	0f b6       	in	r0, 0x3f	; 63
    4ece:	f8 94       	cli
    4ed0:	de bf       	out	0x3e, r29	; 62
    4ed2:	0f be       	out	0x3f, r0	; 63
    4ed4:	cd bf       	out	0x3d, r28	; 61
    4ed6:	cf 91       	pop	r28
    4ed8:	df 91       	pop	r29
    4eda:	08 95       	ret

00004edc <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    4edc:	df 93       	push	r29
    4ede:	cf 93       	push	r28
    4ee0:	cd b7       	in	r28, 0x3d	; 61
    4ee2:	de b7       	in	r29, 0x3e	; 62
    4ee4:	27 97       	sbiw	r28, 0x07	; 7
    4ee6:	0f b6       	in	r0, 0x3f	; 63
    4ee8:	f8 94       	cli
    4eea:	de bf       	out	0x3e, r29	; 62
    4eec:	0f be       	out	0x3f, r0	; 63
    4eee:	cd bf       	out	0x3d, r28	; 61
    4ef0:	9c 83       	std	Y+4, r25	; 0x04
    4ef2:	8b 83       	std	Y+3, r24	; 0x03
    4ef4:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    4ef6:	81 e0       	ldi	r24, 0x01	; 1
    4ef8:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    4efa:	8b 81       	ldd	r24, Y+3	; 0x03
    4efc:	9c 81       	ldd	r25, Y+4	; 0x04
    4efe:	00 97       	sbiw	r24, 0x00	; 0
    4f00:	09 f4       	brne	.+2      	; 0x4f04 <enu_AddCustomCharacter+0x28>
    4f02:	79 c0       	rjmp	.+242    	; 0x4ff6 <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    4f04:	8d 81       	ldd	r24, Y+5	; 0x05
    4f06:	88 30       	cpi	r24, 0x08	; 8
    4f08:	08 f0       	brcs	.+2      	; 0x4f0c <enu_AddCustomCharacter+0x30>
    4f0a:	72 c0       	rjmp	.+228    	; 0x4ff0 <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    4f0c:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4f0e:	81 e0       	ldi	r24, 0x01	; 1
    4f10:	61 e0       	ldi	r22, 0x01	; 1
    4f12:	40 e0       	ldi	r20, 0x00	; 0
    4f14:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    4f18:	8d 81       	ldd	r24, Y+5	; 0x05
    4f1a:	28 2f       	mov	r18, r24
    4f1c:	30 e0       	ldi	r19, 0x00	; 0
    4f1e:	3f 83       	std	Y+7, r19	; 0x07
    4f20:	2e 83       	std	Y+6, r18	; 0x06
    4f22:	8e 81       	ldd	r24, Y+6	; 0x06
    4f24:	9f 81       	ldd	r25, Y+7	; 0x07
    4f26:	83 30       	cpi	r24, 0x03	; 3
    4f28:	91 05       	cpc	r25, r1
    4f2a:	a9 f1       	breq	.+106    	; 0x4f96 <enu_AddCustomCharacter+0xba>
    4f2c:	2e 81       	ldd	r18, Y+6	; 0x06
    4f2e:	3f 81       	ldd	r19, Y+7	; 0x07
    4f30:	24 30       	cpi	r18, 0x04	; 4
    4f32:	31 05       	cpc	r19, r1
    4f34:	7c f4       	brge	.+30     	; 0x4f54 <enu_AddCustomCharacter+0x78>
    4f36:	8e 81       	ldd	r24, Y+6	; 0x06
    4f38:	9f 81       	ldd	r25, Y+7	; 0x07
    4f3a:	81 30       	cpi	r24, 0x01	; 1
    4f3c:	91 05       	cpc	r25, r1
    4f3e:	19 f1       	breq	.+70     	; 0x4f86 <enu_AddCustomCharacter+0xaa>
    4f40:	2e 81       	ldd	r18, Y+6	; 0x06
    4f42:	3f 81       	ldd	r19, Y+7	; 0x07
    4f44:	22 30       	cpi	r18, 0x02	; 2
    4f46:	31 05       	cpc	r19, r1
    4f48:	14 f5       	brge	.+68     	; 0x4f8e <enu_AddCustomCharacter+0xb2>
    4f4a:	8e 81       	ldd	r24, Y+6	; 0x06
    4f4c:	9f 81       	ldd	r25, Y+7	; 0x07
    4f4e:	00 97       	sbiw	r24, 0x00	; 0
    4f50:	b1 f0       	breq	.+44     	; 0x4f7e <enu_AddCustomCharacter+0xa2>
    4f52:	34 c0       	rjmp	.+104    	; 0x4fbc <enu_AddCustomCharacter+0xe0>
    4f54:	2e 81       	ldd	r18, Y+6	; 0x06
    4f56:	3f 81       	ldd	r19, Y+7	; 0x07
    4f58:	25 30       	cpi	r18, 0x05	; 5
    4f5a:	31 05       	cpc	r19, r1
    4f5c:	21 f1       	breq	.+72     	; 0x4fa6 <enu_AddCustomCharacter+0xca>
    4f5e:	8e 81       	ldd	r24, Y+6	; 0x06
    4f60:	9f 81       	ldd	r25, Y+7	; 0x07
    4f62:	85 30       	cpi	r24, 0x05	; 5
    4f64:	91 05       	cpc	r25, r1
    4f66:	dc f0       	brlt	.+54     	; 0x4f9e <enu_AddCustomCharacter+0xc2>
    4f68:	2e 81       	ldd	r18, Y+6	; 0x06
    4f6a:	3f 81       	ldd	r19, Y+7	; 0x07
    4f6c:	26 30       	cpi	r18, 0x06	; 6
    4f6e:	31 05       	cpc	r19, r1
    4f70:	f1 f0       	breq	.+60     	; 0x4fae <enu_AddCustomCharacter+0xd2>
    4f72:	8e 81       	ldd	r24, Y+6	; 0x06
    4f74:	9f 81       	ldd	r25, Y+7	; 0x07
    4f76:	87 30       	cpi	r24, 0x07	; 7
    4f78:	91 05       	cpc	r25, r1
    4f7a:	e9 f0       	breq	.+58     	; 0x4fb6 <enu_AddCustomCharacter+0xda>
    4f7c:	1f c0       	rjmp	.+62     	; 0x4fbc <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    4f7e:	80 e4       	ldi	r24, 0x40	; 64
    4f80:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
    4f84:	1b c0       	rjmp	.+54     	; 0x4fbc <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    4f86:	88 e4       	ldi	r24, 0x48	; 72
    4f88:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
    4f8c:	17 c0       	rjmp	.+46     	; 0x4fbc <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    4f8e:	80 e5       	ldi	r24, 0x50	; 80
    4f90:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
    4f94:	13 c0       	rjmp	.+38     	; 0x4fbc <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    4f96:	88 e5       	ldi	r24, 0x58	; 88
    4f98:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
    4f9c:	0f c0       	rjmp	.+30     	; 0x4fbc <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    4f9e:	80 e6       	ldi	r24, 0x60	; 96
    4fa0:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
    4fa4:	0b c0       	rjmp	.+22     	; 0x4fbc <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    4fa6:	88 e6       	ldi	r24, 0x68	; 104
    4fa8:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
    4fac:	07 c0       	rjmp	.+14     	; 0x4fbc <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    4fae:	80 e7       	ldi	r24, 0x70	; 112
    4fb0:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
    4fb4:	03 c0       	rjmp	.+6      	; 0x4fbc <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    4fb6:	88 e7       	ldi	r24, 0x78	; 120
    4fb8:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    4fbc:	81 e0       	ldi	r24, 0x01	; 1
    4fbe:	61 e0       	ldi	r22, 0x01	; 1
    4fc0:	41 e0       	ldi	r20, 0x01	; 1
    4fc2:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    4fc6:	19 82       	std	Y+1, r1	; 0x01
    4fc8:	0e c0       	rjmp	.+28     	; 0x4fe6 <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    4fca:	89 81       	ldd	r24, Y+1	; 0x01
    4fcc:	28 2f       	mov	r18, r24
    4fce:	30 e0       	ldi	r19, 0x00	; 0
    4fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    4fd4:	fc 01       	movw	r30, r24
    4fd6:	e2 0f       	add	r30, r18
    4fd8:	f3 1f       	adc	r31, r19
    4fda:	80 81       	ld	r24, Z
    4fdc:	0e 94 91 25 	call	0x4b22	; 0x4b22 <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    4fe0:	89 81       	ldd	r24, Y+1	; 0x01
    4fe2:	8f 5f       	subi	r24, 0xFF	; 255
    4fe4:	89 83       	std	Y+1, r24	; 0x01
    4fe6:	89 81       	ldd	r24, Y+1	; 0x01
    4fe8:	88 30       	cpi	r24, 0x08	; 8
    4fea:	78 f3       	brcs	.-34     	; 0x4fca <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    4fec:	1a 82       	std	Y+2, r1	; 0x02
    4fee:	05 c0       	rjmp	.+10     	; 0x4ffa <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4ff0:	82 e0       	ldi	r24, 0x02	; 2
    4ff2:	8a 83       	std	Y+2, r24	; 0x02
    4ff4:	02 c0       	rjmp	.+4      	; 0x4ffa <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4ff6:	83 e0       	ldi	r24, 0x03	; 3
    4ff8:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    4ffa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4ffc:	27 96       	adiw	r28, 0x07	; 7
    4ffe:	0f b6       	in	r0, 0x3f	; 63
    5000:	f8 94       	cli
    5002:	de bf       	out	0x3e, r29	; 62
    5004:	0f be       	out	0x3f, r0	; 63
    5006:	cd bf       	out	0x3d, r28	; 61
    5008:	cf 91       	pop	r28
    500a:	df 91       	pop	r29
    500c:	08 95       	ret

0000500e <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    500e:	df 93       	push	r29
    5010:	cf 93       	push	r28
    5012:	00 d0       	rcall	.+0      	; 0x5014 <enu_ConvertDigitToASCII+0x6>
    5014:	0f 92       	push	r0
    5016:	cd b7       	in	r28, 0x3d	; 61
    5018:	de b7       	in	r29, 0x3e	; 62
    501a:	9b 83       	std	Y+3, r25	; 0x03
    501c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    501e:	81 e0       	ldi	r24, 0x01	; 1
    5020:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    5022:	8a 81       	ldd	r24, Y+2	; 0x02
    5024:	9b 81       	ldd	r25, Y+3	; 0x03
    5026:	00 97       	sbiw	r24, 0x00	; 0
    5028:	89 f0       	breq	.+34     	; 0x504c <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    502a:	ea 81       	ldd	r30, Y+2	; 0x02
    502c:	fb 81       	ldd	r31, Y+3	; 0x03
    502e:	80 81       	ld	r24, Z
    5030:	8a 30       	cpi	r24, 0x0A	; 10
    5032:	48 f4       	brcc	.+18     	; 0x5046 <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    5034:	ea 81       	ldd	r30, Y+2	; 0x02
    5036:	fb 81       	ldd	r31, Y+3	; 0x03
    5038:	80 81       	ld	r24, Z
    503a:	80 5d       	subi	r24, 0xD0	; 208
    503c:	ea 81       	ldd	r30, Y+2	; 0x02
    503e:	fb 81       	ldd	r31, Y+3	; 0x03
    5040:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    5042:	19 82       	std	Y+1, r1	; 0x01
    5044:	05 c0       	rjmp	.+10     	; 0x5050 <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    5046:	82 e0       	ldi	r24, 0x02	; 2
    5048:	89 83       	std	Y+1, r24	; 0x01
    504a:	02 c0       	rjmp	.+4      	; 0x5050 <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    504c:	83 e0       	ldi	r24, 0x03	; 3
    504e:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    5050:	89 81       	ldd	r24, Y+1	; 0x01
}
    5052:	0f 90       	pop	r0
    5054:	0f 90       	pop	r0
    5056:	0f 90       	pop	r0
    5058:	cf 91       	pop	r28
    505a:	df 91       	pop	r29
    505c:	08 95       	ret

0000505e <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    505e:	ef 92       	push	r14
    5060:	ff 92       	push	r15
    5062:	0f 93       	push	r16
    5064:	1f 93       	push	r17
    5066:	df 93       	push	r29
    5068:	cf 93       	push	r28
    506a:	cd b7       	in	r28, 0x3d	; 61
    506c:	de b7       	in	r29, 0x3e	; 62
    506e:	27 97       	sbiw	r28, 0x07	; 7
    5070:	0f b6       	in	r0, 0x3f	; 63
    5072:	f8 94       	cli
    5074:	de bf       	out	0x3e, r29	; 62
    5076:	0f be       	out	0x3f, r0	; 63
    5078:	cd bf       	out	0x3d, r28	; 61
    507a:	9f 83       	std	Y+7, r25	; 0x07
    507c:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    507e:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    5080:	8e 81       	ldd	r24, Y+6	; 0x06
    5082:	9f 81       	ldd	r25, Y+7	; 0x07
    5084:	00 97       	sbiw	r24, 0x00	; 0
    5086:	09 f4       	brne	.+2      	; 0x508a <enu_ReverseInteger+0x2c>
    5088:	58 c0       	rjmp	.+176    	; 0x513a <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    508a:	19 82       	std	Y+1, r1	; 0x01
    508c:	1a 82       	std	Y+2, r1	; 0x02
    508e:	1b 82       	std	Y+3, r1	; 0x03
    5090:	1c 82       	std	Y+4, r1	; 0x04
    5092:	3c c0       	rjmp	.+120    	; 0x510c <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    5094:	89 81       	ldd	r24, Y+1	; 0x01
    5096:	9a 81       	ldd	r25, Y+2	; 0x02
    5098:	ab 81       	ldd	r26, Y+3	; 0x03
    509a:	bc 81       	ldd	r27, Y+4	; 0x04
    509c:	2a e0       	ldi	r18, 0x0A	; 10
    509e:	30 e0       	ldi	r19, 0x00	; 0
    50a0:	40 e0       	ldi	r20, 0x00	; 0
    50a2:	50 e0       	ldi	r21, 0x00	; 0
    50a4:	bc 01       	movw	r22, r24
    50a6:	cd 01       	movw	r24, r26
    50a8:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__mulsi3>
    50ac:	7b 01       	movw	r14, r22
    50ae:	8c 01       	movw	r16, r24
    50b0:	ee 81       	ldd	r30, Y+6	; 0x06
    50b2:	ff 81       	ldd	r31, Y+7	; 0x07
    50b4:	80 81       	ld	r24, Z
    50b6:	91 81       	ldd	r25, Z+1	; 0x01
    50b8:	a2 81       	ldd	r26, Z+2	; 0x02
    50ba:	b3 81       	ldd	r27, Z+3	; 0x03
    50bc:	2a e0       	ldi	r18, 0x0A	; 10
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	40 e0       	ldi	r20, 0x00	; 0
    50c2:	50 e0       	ldi	r21, 0x00	; 0
    50c4:	bc 01       	movw	r22, r24
    50c6:	cd 01       	movw	r24, r26
    50c8:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__udivmodsi4>
    50cc:	dc 01       	movw	r26, r24
    50ce:	cb 01       	movw	r24, r22
    50d0:	8e 0d       	add	r24, r14
    50d2:	9f 1d       	adc	r25, r15
    50d4:	a0 1f       	adc	r26, r16
    50d6:	b1 1f       	adc	r27, r17
    50d8:	89 83       	std	Y+1, r24	; 0x01
    50da:	9a 83       	std	Y+2, r25	; 0x02
    50dc:	ab 83       	std	Y+3, r26	; 0x03
    50de:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    50e0:	ee 81       	ldd	r30, Y+6	; 0x06
    50e2:	ff 81       	ldd	r31, Y+7	; 0x07
    50e4:	80 81       	ld	r24, Z
    50e6:	91 81       	ldd	r25, Z+1	; 0x01
    50e8:	a2 81       	ldd	r26, Z+2	; 0x02
    50ea:	b3 81       	ldd	r27, Z+3	; 0x03
    50ec:	2a e0       	ldi	r18, 0x0A	; 10
    50ee:	30 e0       	ldi	r19, 0x00	; 0
    50f0:	40 e0       	ldi	r20, 0x00	; 0
    50f2:	50 e0       	ldi	r21, 0x00	; 0
    50f4:	bc 01       	movw	r22, r24
    50f6:	cd 01       	movw	r24, r26
    50f8:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__udivmodsi4>
    50fc:	da 01       	movw	r26, r20
    50fe:	c9 01       	movw	r24, r18
    5100:	ee 81       	ldd	r30, Y+6	; 0x06
    5102:	ff 81       	ldd	r31, Y+7	; 0x07
    5104:	80 83       	st	Z, r24
    5106:	91 83       	std	Z+1, r25	; 0x01
    5108:	a2 83       	std	Z+2, r26	; 0x02
    510a:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    510c:	ee 81       	ldd	r30, Y+6	; 0x06
    510e:	ff 81       	ldd	r31, Y+7	; 0x07
    5110:	80 81       	ld	r24, Z
    5112:	91 81       	ldd	r25, Z+1	; 0x01
    5114:	a2 81       	ldd	r26, Z+2	; 0x02
    5116:	b3 81       	ldd	r27, Z+3	; 0x03
    5118:	00 97       	sbiw	r24, 0x00	; 0
    511a:	a1 05       	cpc	r26, r1
    511c:	b1 05       	cpc	r27, r1
    511e:	09 f0       	breq	.+2      	; 0x5122 <enu_ReverseInteger+0xc4>
    5120:	b9 cf       	rjmp	.-142    	; 0x5094 <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    5122:	ee 81       	ldd	r30, Y+6	; 0x06
    5124:	ff 81       	ldd	r31, Y+7	; 0x07
    5126:	89 81       	ldd	r24, Y+1	; 0x01
    5128:	9a 81       	ldd	r25, Y+2	; 0x02
    512a:	ab 81       	ldd	r26, Y+3	; 0x03
    512c:	bc 81       	ldd	r27, Y+4	; 0x04
    512e:	80 83       	st	Z, r24
    5130:	91 83       	std	Z+1, r25	; 0x01
    5132:	a2 83       	std	Z+2, r26	; 0x02
    5134:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    5136:	1d 82       	std	Y+5, r1	; 0x05
    5138:	02 c0       	rjmp	.+4      	; 0x513e <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    513a:	83 e0       	ldi	r24, 0x03	; 3
    513c:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    513e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5140:	27 96       	adiw	r28, 0x07	; 7
    5142:	0f b6       	in	r0, 0x3f	; 63
    5144:	f8 94       	cli
    5146:	de bf       	out	0x3e, r29	; 62
    5148:	0f be       	out	0x3f, r0	; 63
    514a:	cd bf       	out	0x3d, r28	; 61
    514c:	cf 91       	pop	r28
    514e:	df 91       	pop	r29
    5150:	1f 91       	pop	r17
    5152:	0f 91       	pop	r16
    5154:	ff 90       	pop	r15
    5156:	ef 90       	pop	r14
    5158:	08 95       	ret

0000515a <enu_ConvertFloatToInteger>:

static ErrorState_t enu_ConvertFloatToInteger(f32* Copy_f32_DecimalDigits, u8 Copy_u8_FloatPrecision)
{
    515a:	ef 92       	push	r14
    515c:	ff 92       	push	r15
    515e:	0f 93       	push	r16
    5160:	1f 93       	push	r17
    5162:	df 93       	push	r29
    5164:	cf 93       	push	r28
    5166:	cd b7       	in	r28, 0x3d	; 61
    5168:	de b7       	in	r29, 0x3e	; 62
    516a:	2c 97       	sbiw	r28, 0x0c	; 12
    516c:	0f b6       	in	r0, 0x3f	; 63
    516e:	f8 94       	cli
    5170:	de bf       	out	0x3e, r29	; 62
    5172:	0f be       	out	0x3f, r0	; 63
    5174:	cd bf       	out	0x3d, r28	; 61
    5176:	9b 87       	std	Y+11, r25	; 0x0b
    5178:	8a 87       	std	Y+10, r24	; 0x0a
    517a:	6c 87       	std	Y+12, r22	; 0x0c
    u8 Local_u8_ErrorFlag = ES_OK;
    517c:	19 86       	std	Y+9, r1	; 0x09
    u32 Local_u32_CheckVariable = 0;
    517e:	1d 82       	std	Y+5, r1	; 0x05
    5180:	1e 82       	std	Y+6, r1	; 0x06
    5182:	1f 82       	std	Y+7, r1	; 0x07
    5184:	18 86       	std	Y+8, r1	; 0x08
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    5186:	8a 85       	ldd	r24, Y+10	; 0x0a
    5188:	9b 85       	ldd	r25, Y+11	; 0x0b
    518a:	00 97       	sbiw	r24, 0x00	; 0
    518c:	09 f4       	brne	.+2      	; 0x5190 <enu_ConvertFloatToInteger+0x36>
    518e:	90 c0       	rjmp	.+288    	; 0x52b0 <enu_ConvertFloatToInteger+0x156>
    5190:	29 c0       	rjmp	.+82     	; 0x51e4 <enu_ConvertFloatToInteger+0x8a>
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
        {
            *Copy_f32_DecimalDigits *= 10;
    5192:	ea 85       	ldd	r30, Y+10	; 0x0a
    5194:	fb 85       	ldd	r31, Y+11	; 0x0b
    5196:	80 81       	ld	r24, Z
    5198:	91 81       	ldd	r25, Z+1	; 0x01
    519a:	a2 81       	ldd	r26, Z+2	; 0x02
    519c:	b3 81       	ldd	r27, Z+3	; 0x03
    519e:	bc 01       	movw	r22, r24
    51a0:	cd 01       	movw	r24, r26
    51a2:	20 e0       	ldi	r18, 0x00	; 0
    51a4:	30 e0       	ldi	r19, 0x00	; 0
    51a6:	40 e2       	ldi	r20, 0x20	; 32
    51a8:	51 e4       	ldi	r21, 0x41	; 65
    51aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ae:	dc 01       	movw	r26, r24
    51b0:	cb 01       	movw	r24, r22
    51b2:	ea 85       	ldd	r30, Y+10	; 0x0a
    51b4:	fb 85       	ldd	r31, Y+11	; 0x0b
    51b6:	80 83       	st	Z, r24
    51b8:	91 83       	std	Z+1, r25	; 0x01
    51ba:	a2 83       	std	Z+2, r26	; 0x02
    51bc:	b3 83       	std	Z+3, r27	; 0x03

            
            Local_u32_CheckVariable = (u32)(*Copy_f32_DecimalDigits);
    51be:	ea 85       	ldd	r30, Y+10	; 0x0a
    51c0:	fb 85       	ldd	r31, Y+11	; 0x0b
    51c2:	80 81       	ld	r24, Z
    51c4:	91 81       	ldd	r25, Z+1	; 0x01
    51c6:	a2 81       	ldd	r26, Z+2	; 0x02
    51c8:	b3 81       	ldd	r27, Z+3	; 0x03
    51ca:	bc 01       	movw	r22, r24
    51cc:	cd 01       	movw	r24, r26
    51ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51d2:	dc 01       	movw	r26, r24
    51d4:	cb 01       	movw	r24, r22
    51d6:	8d 83       	std	Y+5, r24	; 0x05
    51d8:	9e 83       	std	Y+6, r25	; 0x06
    51da:	af 83       	std	Y+7, r26	; 0x07
    51dc:	b8 87       	std	Y+8, r27	; 0x08

            Copy_u8_FloatPrecision--;
    51de:	8c 85       	ldd	r24, Y+12	; 0x0c
    51e0:	81 50       	subi	r24, 0x01	; 1
    51e2:	8c 87       	std	Y+12, r24	; 0x0c
    u32 Local_u32_CheckVariable = 0;
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
    51e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    51e6:	fb 85       	ldd	r31, Y+11	; 0x0b
    51e8:	e0 80       	ld	r14, Z
    51ea:	f1 80       	ldd	r15, Z+1	; 0x01
    51ec:	02 81       	ldd	r16, Z+2	; 0x02
    51ee:	13 81       	ldd	r17, Z+3	; 0x03
    51f0:	6d 81       	ldd	r22, Y+5	; 0x05
    51f2:	7e 81       	ldd	r23, Y+6	; 0x06
    51f4:	8f 81       	ldd	r24, Y+7	; 0x07
    51f6:	98 85       	ldd	r25, Y+8	; 0x08
    51f8:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    51fc:	9b 01       	movw	r18, r22
    51fe:	ac 01       	movw	r20, r24
    5200:	c8 01       	movw	r24, r16
    5202:	b7 01       	movw	r22, r14
    5204:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5208:	dc 01       	movw	r26, r24
    520a:	cb 01       	movw	r24, r22
    520c:	bc 01       	movw	r22, r24
    520e:	cd 01       	movw	r24, r26
    5210:	20 e0       	ldi	r18, 0x00	; 0
    5212:	30 e0       	ldi	r19, 0x00	; 0
    5214:	40 e0       	ldi	r20, 0x00	; 0
    5216:	50 e0       	ldi	r21, 0x00	; 0
    5218:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    521c:	88 23       	and	r24, r24
    521e:	09 f0       	breq	.+2      	; 0x5222 <enu_ConvertFloatToInteger+0xc8>
    5220:	b8 cf       	rjmp	.-144    	; 0x5192 <enu_ConvertFloatToInteger+0x38>
    5222:	8c 85       	ldd	r24, Y+12	; 0x0c
    5224:	88 23       	and	r24, r24
    5226:	09 f4       	brne	.+2      	; 0x522a <enu_ConvertFloatToInteger+0xd0>
    5228:	b4 cf       	rjmp	.-152    	; 0x5192 <enu_ConvertFloatToInteger+0x38>
            Copy_u8_FloatPrecision--;

        }


        Local_f32_TempDecimalDigits = *Copy_f32_DecimalDigits - Local_u32_CheckVariable;
    522a:	ea 85       	ldd	r30, Y+10	; 0x0a
    522c:	fb 85       	ldd	r31, Y+11	; 0x0b
    522e:	e0 80       	ld	r14, Z
    5230:	f1 80       	ldd	r15, Z+1	; 0x01
    5232:	02 81       	ldd	r16, Z+2	; 0x02
    5234:	13 81       	ldd	r17, Z+3	; 0x03
    5236:	6d 81       	ldd	r22, Y+5	; 0x05
    5238:	7e 81       	ldd	r23, Y+6	; 0x06
    523a:	8f 81       	ldd	r24, Y+7	; 0x07
    523c:	98 85       	ldd	r25, Y+8	; 0x08
    523e:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    5242:	9b 01       	movw	r18, r22
    5244:	ac 01       	movw	r20, r24
    5246:	c8 01       	movw	r24, r16
    5248:	b7 01       	movw	r22, r14
    524a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    524e:	dc 01       	movw	r26, r24
    5250:	cb 01       	movw	r24, r22
    5252:	89 83       	std	Y+1, r24	; 0x01
    5254:	9a 83       	std	Y+2, r25	; 0x02
    5256:	ab 83       	std	Y+3, r26	; 0x03
    5258:	bc 83       	std	Y+4, r27	; 0x04
        Local_f32_TempDecimalDigits *= 10;
    525a:	69 81       	ldd	r22, Y+1	; 0x01
    525c:	7a 81       	ldd	r23, Y+2	; 0x02
    525e:	8b 81       	ldd	r24, Y+3	; 0x03
    5260:	9c 81       	ldd	r25, Y+4	; 0x04
    5262:	20 e0       	ldi	r18, 0x00	; 0
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	40 e2       	ldi	r20, 0x20	; 32
    5268:	51 e4       	ldi	r21, 0x41	; 65
    526a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    526e:	dc 01       	movw	r26, r24
    5270:	cb 01       	movw	r24, r22
    5272:	89 83       	std	Y+1, r24	; 0x01
    5274:	9a 83       	std	Y+2, r25	; 0x02
    5276:	ab 83       	std	Y+3, r26	; 0x03
    5278:	bc 83       	std	Y+4, r27	; 0x04

        // First decimal digit is acquired
        Local_u32_CheckVariable = Local_f32_TempDecimalDigits;
    527a:	69 81       	ldd	r22, Y+1	; 0x01
    527c:	7a 81       	ldd	r23, Y+2	; 0x02
    527e:	8b 81       	ldd	r24, Y+3	; 0x03
    5280:	9c 81       	ldd	r25, Y+4	; 0x04
    5282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5286:	dc 01       	movw	r26, r24
    5288:	cb 01       	movw	r24, r22
    528a:	8d 83       	std	Y+5, r24	; 0x05
    528c:	9e 83       	std	Y+6, r25	; 0x06
    528e:	af 83       	std	Y+7, r26	; 0x07
    5290:	b8 87       	std	Y+8, r27	; 0x08

        //Rounding number
        if(Local_u32_CheckVariable >= 5)
    5292:	8d 81       	ldd	r24, Y+5	; 0x05
    5294:	9e 81       	ldd	r25, Y+6	; 0x06
    5296:	af 81       	ldd	r26, Y+7	; 0x07
    5298:	b8 85       	ldd	r27, Y+8	; 0x08
    529a:	85 30       	cpi	r24, 0x05	; 5
    529c:	91 05       	cpc	r25, r1
    529e:	a1 05       	cpc	r26, r1
    52a0:	b1 05       	cpc	r27, r1
    52a2:	40 f0       	brcs	.+16     	; 0x52b4 <enu_ConvertFloatToInteger+0x15a>
        {
            *Copy_f32_DecimalDigits++;
    52a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    52a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    52a8:	04 96       	adiw	r24, 0x04	; 4
    52aa:	9b 87       	std	Y+11, r25	; 0x0b
    52ac:	8a 87       	std	Y+10, r24	; 0x0a
    52ae:	02 c0       	rjmp	.+4      	; 0x52b4 <enu_ConvertFloatToInteger+0x15a>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    52b0:	83 e0       	ldi	r24, 0x03	; 3
    52b2:	89 87       	std	Y+9, r24	; 0x09
    }

    return Local_u8_ErrorFlag;
    52b4:	89 85       	ldd	r24, Y+9	; 0x09
}
    52b6:	2c 96       	adiw	r28, 0x0c	; 12
    52b8:	0f b6       	in	r0, 0x3f	; 63
    52ba:	f8 94       	cli
    52bc:	de bf       	out	0x3e, r29	; 62
    52be:	0f be       	out	0x3f, r0	; 63
    52c0:	cd bf       	out	0x3d, r28	; 61
    52c2:	cf 91       	pop	r28
    52c4:	df 91       	pop	r29
    52c6:	1f 91       	pop	r17
    52c8:	0f 91       	pop	r16
    52ca:	ff 90       	pop	r15
    52cc:	ef 90       	pop	r14
    52ce:	08 95       	ret

000052d0 <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    52d0:	df 93       	push	r29
    52d2:	cf 93       	push	r28
    52d4:	00 d0       	rcall	.+0      	; 0x52d6 <Keypad_enu_Initialization+0x6>
    52d6:	cd b7       	in	r28, 0x3d	; 61
    52d8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    52da:	81 e0       	ldi	r24, 0x01	; 1
    52dc:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    52de:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    52e0:	19 82       	std	Y+1, r1	; 0x01
    52e2:	31 c0       	rjmp	.+98     	; 0x5346 <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    52e4:	89 81       	ldd	r24, Y+1	; 0x01
    52e6:	88 2f       	mov	r24, r24
    52e8:	90 e0       	ldi	r25, 0x00	; 0
    52ea:	88 0f       	add	r24, r24
    52ec:	99 1f       	adc	r25, r25
    52ee:	fc 01       	movw	r30, r24
    52f0:	e0 58       	subi	r30, 0x80	; 128
    52f2:	fe 4f       	sbci	r31, 0xFE	; 254
    52f4:	20 81       	ld	r18, Z
    52f6:	89 81       	ldd	r24, Y+1	; 0x01
    52f8:	88 2f       	mov	r24, r24
    52fa:	90 e0       	ldi	r25, 0x00	; 0
    52fc:	88 0f       	add	r24, r24
    52fe:	99 1f       	adc	r25, r25
    5300:	fc 01       	movw	r30, r24
    5302:	ef 57       	subi	r30, 0x7F	; 127
    5304:	fe 4f       	sbci	r31, 0xFE	; 254
    5306:	90 81       	ld	r25, Z
    5308:	82 2f       	mov	r24, r18
    530a:	69 2f       	mov	r22, r25
    530c:	40 e0       	ldi	r20, 0x00	; 0
    530e:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    5312:	89 81       	ldd	r24, Y+1	; 0x01
    5314:	88 2f       	mov	r24, r24
    5316:	90 e0       	ldi	r25, 0x00	; 0
    5318:	88 0f       	add	r24, r24
    531a:	99 1f       	adc	r25, r25
    531c:	fc 01       	movw	r30, r24
    531e:	e0 58       	subi	r30, 0x80	; 128
    5320:	fe 4f       	sbci	r31, 0xFE	; 254
    5322:	20 81       	ld	r18, Z
    5324:	89 81       	ldd	r24, Y+1	; 0x01
    5326:	88 2f       	mov	r24, r24
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	88 0f       	add	r24, r24
    532c:	99 1f       	adc	r25, r25
    532e:	fc 01       	movw	r30, r24
    5330:	ef 57       	subi	r30, 0x7F	; 127
    5332:	fe 4f       	sbci	r31, 0xFE	; 254
    5334:	90 81       	ld	r25, Z
    5336:	82 2f       	mov	r24, r18
    5338:	69 2f       	mov	r22, r25
    533a:	41 e0       	ldi	r20, 0x01	; 1
    533c:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    5340:	89 81       	ldd	r24, Y+1	; 0x01
    5342:	8f 5f       	subi	r24, 0xFF	; 255
    5344:	89 83       	std	Y+1, r24	; 0x01
    5346:	89 81       	ldd	r24, Y+1	; 0x01
    5348:	84 30       	cpi	r24, 0x04	; 4
    534a:	60 f2       	brcs	.-104    	; 0x52e4 <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    534c:	19 82       	std	Y+1, r1	; 0x01
    534e:	31 c0       	rjmp	.+98     	; 0x53b2 <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    5350:	89 81       	ldd	r24, Y+1	; 0x01
    5352:	88 2f       	mov	r24, r24
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	88 0f       	add	r24, r24
    5358:	99 1f       	adc	r25, r25
    535a:	fc 01       	movw	r30, r24
    535c:	e8 57       	subi	r30, 0x78	; 120
    535e:	fe 4f       	sbci	r31, 0xFE	; 254
    5360:	20 81       	ld	r18, Z
    5362:	89 81       	ldd	r24, Y+1	; 0x01
    5364:	88 2f       	mov	r24, r24
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	88 0f       	add	r24, r24
    536a:	99 1f       	adc	r25, r25
    536c:	fc 01       	movw	r30, r24
    536e:	e7 57       	subi	r30, 0x77	; 119
    5370:	fe 4f       	sbci	r31, 0xFE	; 254
    5372:	90 81       	ld	r25, Z
    5374:	82 2f       	mov	r24, r18
    5376:	69 2f       	mov	r22, r25
    5378:	41 e0       	ldi	r20, 0x01	; 1
    537a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    537e:	89 81       	ldd	r24, Y+1	; 0x01
    5380:	88 2f       	mov	r24, r24
    5382:	90 e0       	ldi	r25, 0x00	; 0
    5384:	88 0f       	add	r24, r24
    5386:	99 1f       	adc	r25, r25
    5388:	fc 01       	movw	r30, r24
    538a:	e8 57       	subi	r30, 0x78	; 120
    538c:	fe 4f       	sbci	r31, 0xFE	; 254
    538e:	20 81       	ld	r18, Z
    5390:	89 81       	ldd	r24, Y+1	; 0x01
    5392:	88 2f       	mov	r24, r24
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	88 0f       	add	r24, r24
    5398:	99 1f       	adc	r25, r25
    539a:	fc 01       	movw	r30, r24
    539c:	e7 57       	subi	r30, 0x77	; 119
    539e:	fe 4f       	sbci	r31, 0xFE	; 254
    53a0:	90 81       	ld	r25, Z
    53a2:	82 2f       	mov	r24, r18
    53a4:	69 2f       	mov	r22, r25
    53a6:	40 e0       	ldi	r20, 0x00	; 0
    53a8:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    53ac:	89 81       	ldd	r24, Y+1	; 0x01
    53ae:	8f 5f       	subi	r24, 0xFF	; 255
    53b0:	89 83       	std	Y+1, r24	; 0x01
    53b2:	89 81       	ldd	r24, Y+1	; 0x01
    53b4:	84 30       	cpi	r24, 0x04	; 4
    53b6:	60 f2       	brcs	.-104    	; 0x5350 <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    53b8:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    53ba:	8a 81       	ldd	r24, Y+2	; 0x02

}
    53bc:	0f 90       	pop	r0
    53be:	0f 90       	pop	r0
    53c0:	cf 91       	pop	r28
    53c2:	df 91       	pop	r29
    53c4:	08 95       	ret

000053c6 <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    53c6:	df 93       	push	r29
    53c8:	cf 93       	push	r28
    53ca:	cd b7       	in	r28, 0x3d	; 61
    53cc:	de b7       	in	r29, 0x3e	; 62
    53ce:	aa 97       	sbiw	r28, 0x2a	; 42
    53d0:	0f b6       	in	r0, 0x3f	; 63
    53d2:	f8 94       	cli
    53d4:	de bf       	out	0x3e, r29	; 62
    53d6:	0f be       	out	0x3f, r0	; 63
    53d8:	cd bf       	out	0x3d, r28	; 61
    53da:	9d a3       	std	Y+37, r25	; 0x25
    53dc:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    53de:	81 e0       	ldi	r24, 0x01	; 1
    53e0:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    53e2:	8c a1       	ldd	r24, Y+36	; 0x24
    53e4:	9d a1       	ldd	r25, Y+37	; 0x25
    53e6:	00 97       	sbiw	r24, 0x00	; 0
    53e8:	09 f4       	brne	.+2      	; 0x53ec <Keypad_enu_GetButtonPressedValue+0x26>
    53ea:	68 c1       	rjmp	.+720    	; 0x56bc <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    53ec:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    53ee:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    53f0:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    53f2:	ec a1       	ldd	r30, Y+36	; 0x24
    53f4:	fd a1       	ldd	r31, Y+37	; 0x25
    53f6:	8f ef       	ldi	r24, 0xFF	; 255
    53f8:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    53fa:	19 8a       	std	Y+17, r1	; 0x11
    53fc:	5a c1       	rjmp	.+692    	; 0x56b2 <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    53fe:	89 89       	ldd	r24, Y+17	; 0x11
    5400:	88 2f       	mov	r24, r24
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	88 0f       	add	r24, r24
    5406:	99 1f       	adc	r25, r25
    5408:	fc 01       	movw	r30, r24
    540a:	e0 58       	subi	r30, 0x80	; 128
    540c:	fe 4f       	sbci	r31, 0xFE	; 254
    540e:	40 81       	ld	r20, Z
    5410:	89 89       	ldd	r24, Y+17	; 0x11
    5412:	88 2f       	mov	r24, r24
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	88 0f       	add	r24, r24
    5418:	99 1f       	adc	r25, r25
    541a:	fc 01       	movw	r30, r24
    541c:	ef 57       	subi	r30, 0x7F	; 127
    541e:	fe 4f       	sbci	r31, 0xFE	; 254
    5420:	90 81       	ld	r25, Z
    5422:	9e 01       	movw	r18, r28
    5424:	2d 5e       	subi	r18, 0xED	; 237
    5426:	3f 4f       	sbci	r19, 0xFF	; 255
    5428:	84 2f       	mov	r24, r20
    542a:	69 2f       	mov	r22, r25
    542c:	a9 01       	movw	r20, r18
    542e:	0e 94 ce 19 	call	0x339c	; 0x339c <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    5432:	8b 89       	ldd	r24, Y+19	; 0x13
    5434:	88 23       	and	r24, r24
    5436:	09 f0       	breq	.+2      	; 0x543a <Keypad_enu_GetButtonPressedValue+0x74>
    5438:	36 c1       	rjmp	.+620    	; 0x56a6 <Keypad_enu_GetButtonPressedValue+0x2e0>
    543a:	80 e0       	ldi	r24, 0x00	; 0
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	a0 e4       	ldi	r26, 0x40	; 64
    5440:	b0 e4       	ldi	r27, 0x40	; 64
    5442:	8b 87       	std	Y+11, r24	; 0x0b
    5444:	9c 87       	std	Y+12, r25	; 0x0c
    5446:	ad 87       	std	Y+13, r26	; 0x0d
    5448:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    544a:	6b 85       	ldd	r22, Y+11	; 0x0b
    544c:	7c 85       	ldd	r23, Y+12	; 0x0c
    544e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5450:	9e 85       	ldd	r25, Y+14	; 0x0e
    5452:	20 e0       	ldi	r18, 0x00	; 0
    5454:	30 e0       	ldi	r19, 0x00	; 0
    5456:	4a e7       	ldi	r20, 0x7A	; 122
    5458:	55 e4       	ldi	r21, 0x45	; 69
    545a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    545e:	dc 01       	movw	r26, r24
    5460:	cb 01       	movw	r24, r22
    5462:	8f 83       	std	Y+7, r24	; 0x07
    5464:	98 87       	std	Y+8, r25	; 0x08
    5466:	a9 87       	std	Y+9, r26	; 0x09
    5468:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    546a:	6f 81       	ldd	r22, Y+7	; 0x07
    546c:	78 85       	ldd	r23, Y+8	; 0x08
    546e:	89 85       	ldd	r24, Y+9	; 0x09
    5470:	9a 85       	ldd	r25, Y+10	; 0x0a
    5472:	20 e0       	ldi	r18, 0x00	; 0
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	40 e8       	ldi	r20, 0x80	; 128
    5478:	5f e3       	ldi	r21, 0x3F	; 63
    547a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    547e:	88 23       	and	r24, r24
    5480:	2c f4       	brge	.+10     	; 0x548c <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    5482:	81 e0       	ldi	r24, 0x01	; 1
    5484:	90 e0       	ldi	r25, 0x00	; 0
    5486:	9e 83       	std	Y+6, r25	; 0x06
    5488:	8d 83       	std	Y+5, r24	; 0x05
    548a:	3f c0       	rjmp	.+126    	; 0x550a <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    548c:	6f 81       	ldd	r22, Y+7	; 0x07
    548e:	78 85       	ldd	r23, Y+8	; 0x08
    5490:	89 85       	ldd	r24, Y+9	; 0x09
    5492:	9a 85       	ldd	r25, Y+10	; 0x0a
    5494:	20 e0       	ldi	r18, 0x00	; 0
    5496:	3f ef       	ldi	r19, 0xFF	; 255
    5498:	4f e7       	ldi	r20, 0x7F	; 127
    549a:	57 e4       	ldi	r21, 0x47	; 71
    549c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    54a0:	18 16       	cp	r1, r24
    54a2:	4c f5       	brge	.+82     	; 0x54f6 <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    54a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    54a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    54aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    54ac:	20 e0       	ldi	r18, 0x00	; 0
    54ae:	30 e0       	ldi	r19, 0x00	; 0
    54b0:	40 e2       	ldi	r20, 0x20	; 32
    54b2:	51 e4       	ldi	r21, 0x41	; 65
    54b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54b8:	dc 01       	movw	r26, r24
    54ba:	cb 01       	movw	r24, r22
    54bc:	bc 01       	movw	r22, r24
    54be:	cd 01       	movw	r24, r26
    54c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54c4:	dc 01       	movw	r26, r24
    54c6:	cb 01       	movw	r24, r22
    54c8:	9e 83       	std	Y+6, r25	; 0x06
    54ca:	8d 83       	std	Y+5, r24	; 0x05
    54cc:	0f c0       	rjmp	.+30     	; 0x54ec <Keypad_enu_GetButtonPressedValue+0x126>
    54ce:	80 e9       	ldi	r24, 0x90	; 144
    54d0:	91 e0       	ldi	r25, 0x01	; 1
    54d2:	9c 83       	std	Y+4, r25	; 0x04
    54d4:	8b 83       	std	Y+3, r24	; 0x03
    54d6:	8b 81       	ldd	r24, Y+3	; 0x03
    54d8:	9c 81       	ldd	r25, Y+4	; 0x04
    54da:	01 97       	sbiw	r24, 0x01	; 1
    54dc:	f1 f7       	brne	.-4      	; 0x54da <Keypad_enu_GetButtonPressedValue+0x114>
    54de:	9c 83       	std	Y+4, r25	; 0x04
    54e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54e2:	8d 81       	ldd	r24, Y+5	; 0x05
    54e4:	9e 81       	ldd	r25, Y+6	; 0x06
    54e6:	01 97       	sbiw	r24, 0x01	; 1
    54e8:	9e 83       	std	Y+6, r25	; 0x06
    54ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54ec:	8d 81       	ldd	r24, Y+5	; 0x05
    54ee:	9e 81       	ldd	r25, Y+6	; 0x06
    54f0:	00 97       	sbiw	r24, 0x00	; 0
    54f2:	69 f7       	brne	.-38     	; 0x54ce <Keypad_enu_GetButtonPressedValue+0x108>
    54f4:	14 c0       	rjmp	.+40     	; 0x551e <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54f6:	6f 81       	ldd	r22, Y+7	; 0x07
    54f8:	78 85       	ldd	r23, Y+8	; 0x08
    54fa:	89 85       	ldd	r24, Y+9	; 0x09
    54fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    54fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5502:	dc 01       	movw	r26, r24
    5504:	cb 01       	movw	r24, r22
    5506:	9e 83       	std	Y+6, r25	; 0x06
    5508:	8d 83       	std	Y+5, r24	; 0x05
    550a:	8d 81       	ldd	r24, Y+5	; 0x05
    550c:	9e 81       	ldd	r25, Y+6	; 0x06
    550e:	9a 83       	std	Y+2, r25	; 0x02
    5510:	89 83       	std	Y+1, r24	; 0x01
    5512:	89 81       	ldd	r24, Y+1	; 0x01
    5514:	9a 81       	ldd	r25, Y+2	; 0x02
    5516:	01 97       	sbiw	r24, 0x01	; 1
    5518:	f1 f7       	brne	.-4      	; 0x5516 <Keypad_enu_GetButtonPressedValue+0x150>
    551a:	9a 83       	std	Y+2, r25	; 0x02
    551c:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    551e:	89 89       	ldd	r24, Y+17	; 0x11
    5520:	88 2f       	mov	r24, r24
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	88 0f       	add	r24, r24
    5526:	99 1f       	adc	r25, r25
    5528:	fc 01       	movw	r30, r24
    552a:	e0 58       	subi	r30, 0x80	; 128
    552c:	fe 4f       	sbci	r31, 0xFE	; 254
    552e:	40 81       	ld	r20, Z
    5530:	89 89       	ldd	r24, Y+17	; 0x11
    5532:	88 2f       	mov	r24, r24
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	88 0f       	add	r24, r24
    5538:	99 1f       	adc	r25, r25
    553a:	fc 01       	movw	r30, r24
    553c:	ef 57       	subi	r30, 0x7F	; 127
    553e:	fe 4f       	sbci	r31, 0xFE	; 254
    5540:	90 81       	ld	r25, Z
    5542:	9e 01       	movw	r18, r28
    5544:	2d 5e       	subi	r18, 0xED	; 237
    5546:	3f 4f       	sbci	r19, 0xFF	; 255
    5548:	84 2f       	mov	r24, r20
    554a:	69 2f       	mov	r22, r25
    554c:	a9 01       	movw	r20, r18
    554e:	0e 94 ce 19 	call	0x339c	; 0x339c <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    5552:	8b 89       	ldd	r24, Y+19	; 0x13
    5554:	88 23       	and	r24, r24
    5556:	09 f0       	breq	.+2      	; 0x555a <Keypad_enu_GetButtonPressedValue+0x194>
    5558:	a6 c0       	rjmp	.+332    	; 0x56a6 <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    555a:	18 8a       	std	Y+16, r1	; 0x10
    555c:	a0 c0       	rjmp	.+320    	; 0x569e <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    555e:	88 89       	ldd	r24, Y+16	; 0x10
    5560:	88 2f       	mov	r24, r24
    5562:	90 e0       	ldi	r25, 0x00	; 0
    5564:	88 0f       	add	r24, r24
    5566:	99 1f       	adc	r25, r25
    5568:	fc 01       	movw	r30, r24
    556a:	e8 57       	subi	r30, 0x78	; 120
    556c:	fe 4f       	sbci	r31, 0xFE	; 254
    556e:	20 81       	ld	r18, Z
    5570:	88 89       	ldd	r24, Y+16	; 0x10
    5572:	88 2f       	mov	r24, r24
    5574:	90 e0       	ldi	r25, 0x00	; 0
    5576:	88 0f       	add	r24, r24
    5578:	99 1f       	adc	r25, r25
    557a:	fc 01       	movw	r30, r24
    557c:	e7 57       	subi	r30, 0x77	; 119
    557e:	fe 4f       	sbci	r31, 0xFE	; 254
    5580:	90 81       	ld	r25, Z
    5582:	82 2f       	mov	r24, r18
    5584:	69 2f       	mov	r22, r25
    5586:	41 e0       	ldi	r20, 0x01	; 1
    5588:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    558c:	89 89       	ldd	r24, Y+17	; 0x11
    558e:	88 2f       	mov	r24, r24
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	88 0f       	add	r24, r24
    5594:	99 1f       	adc	r25, r25
    5596:	fc 01       	movw	r30, r24
    5598:	e0 58       	subi	r30, 0x80	; 128
    559a:	fe 4f       	sbci	r31, 0xFE	; 254
    559c:	40 81       	ld	r20, Z
    559e:	89 89       	ldd	r24, Y+17	; 0x11
    55a0:	88 2f       	mov	r24, r24
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	88 0f       	add	r24, r24
    55a6:	99 1f       	adc	r25, r25
    55a8:	fc 01       	movw	r30, r24
    55aa:	ef 57       	subi	r30, 0x7F	; 127
    55ac:	fe 4f       	sbci	r31, 0xFE	; 254
    55ae:	90 81       	ld	r25, Z
    55b0:	9e 01       	movw	r18, r28
    55b2:	2d 5e       	subi	r18, 0xED	; 237
    55b4:	3f 4f       	sbci	r19, 0xFF	; 255
    55b6:	84 2f       	mov	r24, r20
    55b8:	69 2f       	mov	r22, r25
    55ba:	a9 01       	movw	r20, r18
    55bc:	0e 94 ce 19 	call	0x339c	; 0x339c <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    55c0:	8b 89       	ldd	r24, Y+19	; 0x13
    55c2:	81 30       	cpi	r24, 0x01	; 1
    55c4:	09 f0       	breq	.+2      	; 0x55c8 <Keypad_enu_GetButtonPressedValue+0x202>
    55c6:	51 c0       	rjmp	.+162    	; 0x566a <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    55c8:	ce 01       	movw	r24, r28
    55ca:	44 96       	adiw	r24, 0x14	; 20
    55cc:	9f a3       	std	Y+39, r25	; 0x27
    55ce:	8e a3       	std	Y+38, r24	; 0x26
    55d0:	e3 e9       	ldi	r30, 0x93	; 147
    55d2:	f1 e0       	ldi	r31, 0x01	; 1
    55d4:	f9 a7       	std	Y+41, r31	; 0x29
    55d6:	e8 a7       	std	Y+40, r30	; 0x28
    55d8:	f0 e1       	ldi	r31, 0x10	; 16
    55da:	fa a7       	std	Y+42, r31	; 0x2a
    55dc:	e8 a5       	ldd	r30, Y+40	; 0x28
    55de:	f9 a5       	ldd	r31, Y+41	; 0x29
    55e0:	00 80       	ld	r0, Z
    55e2:	88 a5       	ldd	r24, Y+40	; 0x28
    55e4:	99 a5       	ldd	r25, Y+41	; 0x29
    55e6:	01 96       	adiw	r24, 0x01	; 1
    55e8:	99 a7       	std	Y+41, r25	; 0x29
    55ea:	88 a7       	std	Y+40, r24	; 0x28
    55ec:	ee a1       	ldd	r30, Y+38	; 0x26
    55ee:	ff a1       	ldd	r31, Y+39	; 0x27
    55f0:	00 82       	st	Z, r0
    55f2:	8e a1       	ldd	r24, Y+38	; 0x26
    55f4:	9f a1       	ldd	r25, Y+39	; 0x27
    55f6:	01 96       	adiw	r24, 0x01	; 1
    55f8:	9f a3       	std	Y+39, r25	; 0x27
    55fa:	8e a3       	std	Y+38, r24	; 0x26
    55fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    55fe:	91 50       	subi	r25, 0x01	; 1
    5600:	9a a7       	std	Y+42, r25	; 0x2a
    5602:	ea a5       	ldd	r30, Y+42	; 0x2a
    5604:	ee 23       	and	r30, r30
    5606:	51 f7       	brne	.-44     	; 0x55dc <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    5608:	89 89       	ldd	r24, Y+17	; 0x11
    560a:	28 2f       	mov	r18, r24
    560c:	30 e0       	ldi	r19, 0x00	; 0
    560e:	88 89       	ldd	r24, Y+16	; 0x10
    5610:	48 2f       	mov	r20, r24
    5612:	50 e0       	ldi	r21, 0x00	; 0
    5614:	22 0f       	add	r18, r18
    5616:	33 1f       	adc	r19, r19
    5618:	22 0f       	add	r18, r18
    561a:	33 1f       	adc	r19, r19
    561c:	ce 01       	movw	r24, r28
    561e:	01 96       	adiw	r24, 0x01	; 1
    5620:	82 0f       	add	r24, r18
    5622:	93 1f       	adc	r25, r19
    5624:	84 0f       	add	r24, r20
    5626:	95 1f       	adc	r25, r21
    5628:	fc 01       	movw	r30, r24
    562a:	73 96       	adiw	r30, 0x13	; 19
    562c:	80 81       	ld	r24, Z
    562e:	ec a1       	ldd	r30, Y+36	; 0x24
    5630:	fd a1       	ldd	r31, Y+37	; 0x25
    5632:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    5634:	81 e0       	ldi	r24, 0x01	; 1
    5636:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    5638:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    563a:	88 89       	ldd	r24, Y+16	; 0x10
    563c:	88 2f       	mov	r24, r24
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	88 0f       	add	r24, r24
    5642:	99 1f       	adc	r25, r25
    5644:	fc 01       	movw	r30, r24
    5646:	e8 57       	subi	r30, 0x78	; 120
    5648:	fe 4f       	sbci	r31, 0xFE	; 254
    564a:	20 81       	ld	r18, Z
    564c:	88 89       	ldd	r24, Y+16	; 0x10
    564e:	88 2f       	mov	r24, r24
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	88 0f       	add	r24, r24
    5654:	99 1f       	adc	r25, r25
    5656:	fc 01       	movw	r30, r24
    5658:	e7 57       	subi	r30, 0x77	; 119
    565a:	fe 4f       	sbci	r31, 0xFE	; 254
    565c:	90 81       	ld	r25, Z
    565e:	82 2f       	mov	r24, r18
    5660:	69 2f       	mov	r22, r25
    5662:	40 e0       	ldi	r20, 0x00	; 0
    5664:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    5668:	1e c0       	rjmp	.+60     	; 0x56a6 <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    566a:	88 89       	ldd	r24, Y+16	; 0x10
    566c:	88 2f       	mov	r24, r24
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	88 0f       	add	r24, r24
    5672:	99 1f       	adc	r25, r25
    5674:	fc 01       	movw	r30, r24
    5676:	e8 57       	subi	r30, 0x78	; 120
    5678:	fe 4f       	sbci	r31, 0xFE	; 254
    567a:	20 81       	ld	r18, Z
    567c:	88 89       	ldd	r24, Y+16	; 0x10
    567e:	88 2f       	mov	r24, r24
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	88 0f       	add	r24, r24
    5684:	99 1f       	adc	r25, r25
    5686:	fc 01       	movw	r30, r24
    5688:	e7 57       	subi	r30, 0x77	; 119
    568a:	fe 4f       	sbci	r31, 0xFE	; 254
    568c:	90 81       	ld	r25, Z
    568e:	82 2f       	mov	r24, r18
    5690:	69 2f       	mov	r22, r25
    5692:	40 e0       	ldi	r20, 0x00	; 0
    5694:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    5698:	88 89       	ldd	r24, Y+16	; 0x10
    569a:	8f 5f       	subi	r24, 0xFF	; 255
    569c:	88 8b       	std	Y+16, r24	; 0x10
    569e:	88 89       	ldd	r24, Y+16	; 0x10
    56a0:	84 30       	cpi	r24, 0x04	; 4
    56a2:	08 f4       	brcc	.+2      	; 0x56a6 <Keypad_enu_GetButtonPressedValue+0x2e0>
    56a4:	5c cf       	rjmp	.-328    	; 0x555e <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    56a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    56a8:	88 23       	and	r24, r24
    56aa:	51 f4       	brne	.+20     	; 0x56c0 <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    56ac:	89 89       	ldd	r24, Y+17	; 0x11
    56ae:	8f 5f       	subi	r24, 0xFF	; 255
    56b0:	89 8b       	std	Y+17, r24	; 0x11
    56b2:	89 89       	ldd	r24, Y+17	; 0x11
    56b4:	84 30       	cpi	r24, 0x04	; 4
    56b6:	08 f4       	brcc	.+2      	; 0x56ba <Keypad_enu_GetButtonPressedValue+0x2f4>
    56b8:	a2 ce       	rjmp	.-700    	; 0x53fe <Keypad_enu_GetButtonPressedValue+0x38>
    56ba:	02 c0       	rjmp	.+4      	; 0x56c0 <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    56bc:	83 e0       	ldi	r24, 0x03	; 3
    56be:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    56c0:	8a 89       	ldd	r24, Y+18	; 0x12

}
    56c2:	aa 96       	adiw	r28, 0x2a	; 42
    56c4:	0f b6       	in	r0, 0x3f	; 63
    56c6:	f8 94       	cli
    56c8:	de bf       	out	0x3e, r29	; 62
    56ca:	0f be       	out	0x3f, r0	; 63
    56cc:	cd bf       	out	0x3d, r28	; 61
    56ce:	cf 91       	pop	r28
    56d0:	df 91       	pop	r29
    56d2:	08 95       	ret

000056d4 <ICU_enu_Initialization>:
static u32 LOC_au32_NumberOfOverflowsArray[3];  //To sotre the number of overflows performed by ICU_TIMER_USED (Total, Falling Edge, Second Rising Edge)
static u16 LOC_u16_Timer_PS;


extern ErrorState_t ICU_enu_Initialization()
{
    56d4:	df 93       	push	r29
    56d6:	cf 93       	push	r28
    56d8:	0f 92       	push	r0
    56da:	cd b7       	in	r28, 0x3d	; 61
    56dc:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    56de:	81 e0       	ldi	r24, 0x01	; 1
    56e0:	89 83       	std	Y+1, r24	; 0x01

    //Initialize Timer peripheral: Timer0, Normal, PS 1024, and  Interrupt Mode
    Timer_enu_Initialization();
    56e2:	0e 94 b2 08 	call	0x1164	; 0x1164 <Timer_enu_Initialization>
    Timer_enu_DisableInterruptMode(ICU_TIMER_USED, TIMER_NORMAL); //Disabling Timer Interrupt
    56e6:	80 e0       	ldi	r24, 0x00	; 0
    56e8:	60 e0       	ldi	r22, 0x00	; 0
    56ea:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <Timer_enu_DisableInterruptMode>
    Timer_enu_SetCallBack(ICU_TIMER_USED, TIMER_NORMAL, vid_IncrementOverFlowCounter, NULL);//Setting Call Back Function
    56ee:	24 e9       	ldi	r18, 0x94	; 148
    56f0:	3d e2       	ldi	r19, 0x2D	; 45
    56f2:	80 e0       	ldi	r24, 0x00	; 0
    56f4:	60 e0       	ldi	r22, 0x00	; 0
    56f6:	a9 01       	movw	r20, r18
    56f8:	20 e0       	ldi	r18, 0x00	; 0
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	0e 94 87 0c 	call	0x190e	; 0x190e <Timer_enu_SetCallBack>
    
    //Initialize EXTI peripheral: EXTI0, INT Mode, Rising Edge
    EXTI_enu_Initialization();
    5700:	0e 94 08 13 	call	0x2610	; 0x2610 <EXTI_enu_Initialization>
    EXTI_enu_INTMode(ICU_EXTI_USED, EXTI_POLLING_MODE); //Preventing EXTI from causing an interrupt until ICU activation
    5704:	80 e0       	ldi	r24, 0x00	; 0
    5706:	60 e0       	ldi	r22, 0x00	; 0
    5708:	0e 94 70 13 	call	0x26e0	; 0x26e0 <EXTI_enu_INTMode>
    EXTI_enu_SetCallBack(ICU_EXTI_USED, vid_CapturingFunction, NULL); //Setting CapturingFunction as the EXTI ISR
    570c:	2a ed       	ldi	r18, 0xDA	; 218
    570e:	3c e2       	ldi	r19, 0x2C	; 44
    5710:	80 e0       	ldi	r24, 0x00	; 0
    5712:	b9 01       	movw	r22, r18
    5714:	40 e0       	ldi	r20, 0x00	; 0
    5716:	50 e0       	ldi	r21, 0x00	; 0
    5718:	0e 94 ef 13 	call	0x27de	; 0x27de <EXTI_enu_SetCallBack>

    //Initialize ICU module 
    LOC_u8_State = ICU_IDLE; //State machine must start as IDLE until activation 
    571c:	10 92 d8 01 	sts	0x01D8, r1


    return Local_u8_ErrorFlag;
    5720:	89 81       	ldd	r24, Y+1	; 0x01
}
    5722:	0f 90       	pop	r0
    5724:	cf 91       	pop	r28
    5726:	df 91       	pop	r29
    5728:	08 95       	ret

0000572a <ICU_enu_StartCapture>:

extern ErrorState_t ICU_enu_StartCapture()
{
    572a:	df 93       	push	r29
    572c:	cf 93       	push	r28
    572e:	0f 92       	push	r0
    5730:	cd b7       	in	r28, 0x3d	; 61
    5732:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	89 83       	std	Y+1, r24	; 0x01
    
    if(LOC_u8_State == ICU_IDLE)
    5738:	80 91 d8 01 	lds	r24, 0x01D8
    573c:	88 23       	and	r24, r24
    573e:	89 f4       	brne	.+34     	; 0x5762 <ICU_enu_StartCapture+0x38>
    {
        
        LOC_u8_State = ICU_FIRST_RISING_EDGE; //State machine will begin from the 'FIRS_RISING_EGDE' State
    5740:	81 e0       	ldi	r24, 0x01	; 1
    5742:	80 93 d8 01 	sts	0x01D8, r24
        
        Timer_enu_GetPSUsed(ICU_TIMER_USED, &LOC_u16_Timer_PS); //Acquiring Timer PS
    5746:	2d ee       	ldi	r18, 0xED	; 237
    5748:	31 e0       	ldi	r19, 0x01	; 1
    574a:	80 e0       	ldi	r24, 0x00	; 0
    574c:	b9 01       	movw	r22, r18
    574e:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <Timer_enu_GetPSUsed>

        Timer_enu_EnableInterruptMode(ICU_TIMER_USED, TIMER_NORMAL); //Enabling Timer Interrupt 
    5752:	80 e0       	ldi	r24, 0x00	; 0
    5754:	60 e0       	ldi	r22, 0x00	; 0
    5756:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <Timer_enu_EnableInterruptMode>

        EXTI_enu_INTMode(ICU_EXTI_USED, EXTI_INT_MODE); //EXTI INT mode activated
    575a:	80 e0       	ldi	r24, 0x00	; 0
    575c:	61 e0       	ldi	r22, 0x01	; 1
    575e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <EXTI_enu_INTMode>
    }

    return Local_u8_ErrorFlag;
    5762:	89 81       	ldd	r24, Y+1	; 0x01
}
    5764:	0f 90       	pop	r0
    5766:	cf 91       	pop	r28
    5768:	df 91       	pop	r29
    576a:	08 95       	ret

0000576c <ICU_enu_CalculateParameters>:

extern ErrorState_t ICU_enu_CalculateParameters(f32* Copy_pf32_SignalParametersArray)
{
    576c:	cf 92       	push	r12
    576e:	df 92       	push	r13
    5770:	ef 92       	push	r14
    5772:	ff 92       	push	r15
    5774:	0f 93       	push	r16
    5776:	1f 93       	push	r17
    5778:	df 93       	push	r29
    577a:	cf 93       	push	r28
    577c:	cd b7       	in	r28, 0x3d	; 61
    577e:	de b7       	in	r29, 0x3e	; 62
    5780:	27 97       	sbiw	r28, 0x07	; 7
    5782:	0f b6       	in	r0, 0x3f	; 63
    5784:	f8 94       	cli
    5786:	de bf       	out	0x3e, r29	; 62
    5788:	0f be       	out	0x3f, r0	; 63
    578a:	cd bf       	out	0x3d, r28	; 61
    578c:	9f 83       	std	Y+7, r25	; 0x07
    578e:	8e 83       	std	Y+6, r24	; 0x06
    u8 Local_u8_ErrorFlag = ES_NOK;
    5790:	81 e0       	ldi	r24, 0x01	; 1
    5792:	8d 83       	std	Y+5, r24	; 0x05
    f32 Local_f32_TimerFrequency = 16000000.0/LOC_u16_Timer_PS; 
    5794:	80 91 ed 01 	lds	r24, 0x01ED
    5798:	90 91 ee 01 	lds	r25, 0x01EE
    579c:	cc 01       	movw	r24, r24
    579e:	a0 e0       	ldi	r26, 0x00	; 0
    57a0:	b0 e0       	ldi	r27, 0x00	; 0
    57a2:	bc 01       	movw	r22, r24
    57a4:	cd 01       	movw	r24, r26
    57a6:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    57aa:	9b 01       	movw	r18, r22
    57ac:	ac 01       	movw	r20, r24
    57ae:	60 e0       	ldi	r22, 0x00	; 0
    57b0:	74 e2       	ldi	r23, 0x24	; 36
    57b2:	84 e7       	ldi	r24, 0x74	; 116
    57b4:	9b e4       	ldi	r25, 0x4B	; 75
    57b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    57ba:	dc 01       	movw	r26, r24
    57bc:	cb 01       	movw	r24, r22
    57be:	89 83       	std	Y+1, r24	; 0x01
    57c0:	9a 83       	std	Y+2, r25	; 0x02
    57c2:	ab 83       	std	Y+3, r26	; 0x03
    57c4:	bc 83       	std	Y+4, r27	; 0x04
    
    if(LOC_u8_State == ICU_IDLE)
    57c6:	80 91 d8 01 	lds	r24, 0x01D8
    57ca:	88 23       	and	r24, r24
    57cc:	09 f0       	breq	.+2      	; 0x57d0 <ICU_enu_CalculateParameters+0x64>
    57ce:	c7 c0       	rjmp	.+398    	; 0x595e <ICU_enu_CalculateParameters+0x1f2>
    {

        LOC_u32_PeriodCounts += 256UL*LOC_au32_NumberOfOverflowsArray[2]; //Total Number of Period Counts
    57d0:	80 91 e9 01 	lds	r24, 0x01E9
    57d4:	90 91 ea 01 	lds	r25, 0x01EA
    57d8:	a0 91 eb 01 	lds	r26, 0x01EB
    57dc:	b0 91 ec 01 	lds	r27, 0x01EC
    57e0:	22 27       	eor	r18, r18
    57e2:	38 2f       	mov	r19, r24
    57e4:	49 2f       	mov	r20, r25
    57e6:	5a 2f       	mov	r21, r26
    57e8:	80 91 d9 01 	lds	r24, 0x01D9
    57ec:	90 91 da 01 	lds	r25, 0x01DA
    57f0:	a0 91 db 01 	lds	r26, 0x01DB
    57f4:	b0 91 dc 01 	lds	r27, 0x01DC
    57f8:	82 0f       	add	r24, r18
    57fa:	93 1f       	adc	r25, r19
    57fc:	a4 1f       	adc	r26, r20
    57fe:	b5 1f       	adc	r27, r21
    5800:	80 93 d9 01 	sts	0x01D9, r24
    5804:	90 93 da 01 	sts	0x01DA, r25
    5808:	a0 93 db 01 	sts	0x01DB, r26
    580c:	b0 93 dc 01 	sts	0x01DC, r27

        LOC_u32_TonCounts += 256UL*LOC_au32_NumberOfOverflowsArray[1]; //Total Number of Duty Counts
    5810:	80 91 e5 01 	lds	r24, 0x01E5
    5814:	90 91 e6 01 	lds	r25, 0x01E6
    5818:	a0 91 e7 01 	lds	r26, 0x01E7
    581c:	b0 91 e8 01 	lds	r27, 0x01E8
    5820:	22 27       	eor	r18, r18
    5822:	38 2f       	mov	r19, r24
    5824:	49 2f       	mov	r20, r25
    5826:	5a 2f       	mov	r21, r26
    5828:	80 91 dd 01 	lds	r24, 0x01DD
    582c:	90 91 de 01 	lds	r25, 0x01DE
    5830:	a0 91 df 01 	lds	r26, 0x01DF
    5834:	b0 91 e0 01 	lds	r27, 0x01E0
    5838:	82 0f       	add	r24, r18
    583a:	93 1f       	adc	r25, r19
    583c:	a4 1f       	adc	r26, r20
    583e:	b5 1f       	adc	r27, r21
    5840:	80 93 dd 01 	sts	0x01DD, r24
    5844:	90 93 de 01 	sts	0x01DE, r25
    5848:	a0 93 df 01 	sts	0x01DF, r26
    584c:	b0 93 e0 01 	sts	0x01E0, r27

        //Calculating Frequency in Hz
        if(LOC_u32_PeriodCounts != 0)
    5850:	80 91 d9 01 	lds	r24, 0x01D9
    5854:	90 91 da 01 	lds	r25, 0x01DA
    5858:	a0 91 db 01 	lds	r26, 0x01DB
    585c:	b0 91 dc 01 	lds	r27, 0x01DC
    5860:	00 97       	sbiw	r24, 0x00	; 0
    5862:	a1 05       	cpc	r26, r1
    5864:	b1 05       	cpc	r27, r1
    5866:	e9 f0       	breq	.+58     	; 0x58a2 <ICU_enu_CalculateParameters+0x136>
        {
            Copy_pf32_SignalParametersArray[0] = (Local_f32_TimerFrequency/LOC_u32_PeriodCounts);
    5868:	80 91 d9 01 	lds	r24, 0x01D9
    586c:	90 91 da 01 	lds	r25, 0x01DA
    5870:	a0 91 db 01 	lds	r26, 0x01DB
    5874:	b0 91 dc 01 	lds	r27, 0x01DC
    5878:	bc 01       	movw	r22, r24
    587a:	cd 01       	movw	r24, r26
    587c:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    5880:	9b 01       	movw	r18, r22
    5882:	ac 01       	movw	r20, r24
    5884:	69 81       	ldd	r22, Y+1	; 0x01
    5886:	7a 81       	ldd	r23, Y+2	; 0x02
    5888:	8b 81       	ldd	r24, Y+3	; 0x03
    588a:	9c 81       	ldd	r25, Y+4	; 0x04
    588c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5890:	dc 01       	movw	r26, r24
    5892:	cb 01       	movw	r24, r22
    5894:	ee 81       	ldd	r30, Y+6	; 0x06
    5896:	ff 81       	ldd	r31, Y+7	; 0x07
    5898:	80 83       	st	Z, r24
    589a:	91 83       	std	Z+1, r25	; 0x01
    589c:	a2 83       	std	Z+2, r26	; 0x02
    589e:	b3 83       	std	Z+3, r27	; 0x03
    58a0:	0a c0       	rjmp	.+20     	; 0x58b6 <ICU_enu_CalculateParameters+0x14a>
        }
        else
        {
            Copy_pf32_SignalParametersArray[0] = 0; //No signal
    58a2:	ee 81       	ldd	r30, Y+6	; 0x06
    58a4:	ff 81       	ldd	r31, Y+7	; 0x07
    58a6:	80 e0       	ldi	r24, 0x00	; 0
    58a8:	90 e0       	ldi	r25, 0x00	; 0
    58aa:	a0 e0       	ldi	r26, 0x00	; 0
    58ac:	b0 e0       	ldi	r27, 0x00	; 0
    58ae:	80 83       	st	Z, r24
    58b0:	91 83       	std	Z+1, r25	; 0x01
    58b2:	a2 83       	std	Z+2, r26	; 0x02
    58b4:	b3 83       	std	Z+3, r27	; 0x03
        }

        if(LOC_u32_TonCounts != 0)
    58b6:	80 91 dd 01 	lds	r24, 0x01DD
    58ba:	90 91 de 01 	lds	r25, 0x01DE
    58be:	a0 91 df 01 	lds	r26, 0x01DF
    58c2:	b0 91 e0 01 	lds	r27, 0x01E0
    58c6:	00 97       	sbiw	r24, 0x00	; 0
    58c8:	a1 05       	cpc	r26, r1
    58ca:	b1 05       	cpc	r27, r1
    58cc:	e1 f1       	breq	.+120    	; 0x5946 <ICU_enu_CalculateParameters+0x1da>
        {
            //Calculating Duty Ratio in %
            Copy_pf32_SignalParametersArray[1] = ((f32)LOC_u32_TonCounts*100UL)/(LOC_u32_PeriodCounts);
    58ce:	8e 81       	ldd	r24, Y+6	; 0x06
    58d0:	9f 81       	ldd	r25, Y+7	; 0x07
    58d2:	cc 24       	eor	r12, r12
    58d4:	dd 24       	eor	r13, r13
    58d6:	68 94       	set
    58d8:	c2 f8       	bld	r12, 2
    58da:	c8 0e       	add	r12, r24
    58dc:	d9 1e       	adc	r13, r25
    58de:	80 91 dd 01 	lds	r24, 0x01DD
    58e2:	90 91 de 01 	lds	r25, 0x01DE
    58e6:	a0 91 df 01 	lds	r26, 0x01DF
    58ea:	b0 91 e0 01 	lds	r27, 0x01E0
    58ee:	bc 01       	movw	r22, r24
    58f0:	cd 01       	movw	r24, r26
    58f2:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    58f6:	dc 01       	movw	r26, r24
    58f8:	cb 01       	movw	r24, r22
    58fa:	bc 01       	movw	r22, r24
    58fc:	cd 01       	movw	r24, r26
    58fe:	20 e0       	ldi	r18, 0x00	; 0
    5900:	30 e0       	ldi	r19, 0x00	; 0
    5902:	48 ec       	ldi	r20, 0xC8	; 200
    5904:	52 e4       	ldi	r21, 0x42	; 66
    5906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    590a:	dc 01       	movw	r26, r24
    590c:	cb 01       	movw	r24, r22
    590e:	7c 01       	movw	r14, r24
    5910:	8d 01       	movw	r16, r26
    5912:	80 91 d9 01 	lds	r24, 0x01D9
    5916:	90 91 da 01 	lds	r25, 0x01DA
    591a:	a0 91 db 01 	lds	r26, 0x01DB
    591e:	b0 91 dc 01 	lds	r27, 0x01DC
    5922:	bc 01       	movw	r22, r24
    5924:	cd 01       	movw	r24, r26
    5926:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    592a:	9b 01       	movw	r18, r22
    592c:	ac 01       	movw	r20, r24
    592e:	c8 01       	movw	r24, r16
    5930:	b7 01       	movw	r22, r14
    5932:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5936:	dc 01       	movw	r26, r24
    5938:	cb 01       	movw	r24, r22
    593a:	f6 01       	movw	r30, r12
    593c:	80 83       	st	Z, r24
    593e:	91 83       	std	Z+1, r25	; 0x01
    5940:	a2 83       	std	Z+2, r26	; 0x02
    5942:	b3 83       	std	Z+3, r27	; 0x03
    5944:	0c c0       	rjmp	.+24     	; 0x595e <ICU_enu_CalculateParameters+0x1f2>
        }   
        else
        {
            Copy_pf32_SignalParametersArray[1] = 0; //No signal
    5946:	8e 81       	ldd	r24, Y+6	; 0x06
    5948:	9f 81       	ldd	r25, Y+7	; 0x07
    594a:	fc 01       	movw	r30, r24
    594c:	34 96       	adiw	r30, 0x04	; 4
    594e:	80 e0       	ldi	r24, 0x00	; 0
    5950:	90 e0       	ldi	r25, 0x00	; 0
    5952:	a0 e0       	ldi	r26, 0x00	; 0
    5954:	b0 e0       	ldi	r27, 0x00	; 0
    5956:	80 83       	st	Z, r24
    5958:	91 83       	std	Z+1, r25	; 0x01
    595a:	a2 83       	std	Z+2, r26	; 0x02
    595c:	b3 83       	std	Z+3, r27	; 0x03
        }
    
    }

    return Local_u8_ErrorFlag;
    595e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5960:	27 96       	adiw	r28, 0x07	; 7
    5962:	0f b6       	in	r0, 0x3f	; 63
    5964:	f8 94       	cli
    5966:	de bf       	out	0x3e, r29	; 62
    5968:	0f be       	out	0x3f, r0	; 63
    596a:	cd bf       	out	0x3d, r28	; 61
    596c:	cf 91       	pop	r28
    596e:	df 91       	pop	r29
    5970:	1f 91       	pop	r17
    5972:	0f 91       	pop	r16
    5974:	ff 90       	pop	r15
    5976:	ef 90       	pop	r14
    5978:	df 90       	pop	r13
    597a:	cf 90       	pop	r12
    597c:	08 95       	ret

0000597e <ICU_enu_GetState>:

extern ErrorState_t ICU_enu_GetState(u8* Copy_pu8_SystemState)
{
    597e:	df 93       	push	r29
    5980:	cf 93       	push	r28
    5982:	00 d0       	rcall	.+0      	; 0x5984 <ICU_enu_GetState+0x6>
    5984:	0f 92       	push	r0
    5986:	cd b7       	in	r28, 0x3d	; 61
    5988:	de b7       	in	r29, 0x3e	; 62
    598a:	9b 83       	std	Y+3, r25	; 0x03
    598c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag;

    if(Copy_pu8_SystemState)
    598e:	8a 81       	ldd	r24, Y+2	; 0x02
    5990:	9b 81       	ldd	r25, Y+3	; 0x03
    5992:	00 97       	sbiw	r24, 0x00	; 0
    5994:	31 f0       	breq	.+12     	; 0x59a2 <ICU_enu_GetState+0x24>
    {
        *Copy_pu8_SystemState = LOC_u8_State;
    5996:	80 91 d8 01 	lds	r24, 0x01D8
    599a:	ea 81       	ldd	r30, Y+2	; 0x02
    599c:	fb 81       	ldd	r31, Y+3	; 0x03
    599e:	80 83       	st	Z, r24
    59a0:	02 c0       	rjmp	.+4      	; 0x59a6 <ICU_enu_GetState+0x28>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    59a2:	83 e0       	ldi	r24, 0x03	; 3
    59a4:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    59a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    59a8:	0f 90       	pop	r0
    59aa:	0f 90       	pop	r0
    59ac:	0f 90       	pop	r0
    59ae:	cf 91       	pop	r28
    59b0:	df 91       	pop	r29
    59b2:	08 95       	ret

000059b4 <vid_CapturingFunction>:

void vid_CapturingFunction(void* Copy_pvid_FunctionParameters)
{
    59b4:	0f 93       	push	r16
    59b6:	df 93       	push	r29
    59b8:	cf 93       	push	r28
    59ba:	00 d0       	rcall	.+0      	; 0x59bc <vid_CapturingFunction+0x8>
    59bc:	00 d0       	rcall	.+0      	; 0x59be <vid_CapturingFunction+0xa>
    59be:	cd b7       	in	r28, 0x3d	; 61
    59c0:	de b7       	in	r29, 0x3e	; 62
    59c2:	9a 83       	std	Y+2, r25	; 0x02
    59c4:	89 83       	std	Y+1, r24	; 0x01

    switch (LOC_u8_State)
    59c6:	80 91 d8 01 	lds	r24, 0x01D8
    59ca:	28 2f       	mov	r18, r24
    59cc:	30 e0       	ldi	r19, 0x00	; 0
    59ce:	3c 83       	std	Y+4, r19	; 0x04
    59d0:	2b 83       	std	Y+3, r18	; 0x03
    59d2:	8b 81       	ldd	r24, Y+3	; 0x03
    59d4:	9c 81       	ldd	r25, Y+4	; 0x04
    59d6:	82 30       	cpi	r24, 0x02	; 2
    59d8:	91 05       	cpc	r25, r1
    59da:	09 f4       	brne	.+2      	; 0x59de <vid_CapturingFunction+0x2a>
    59dc:	5f c0       	rjmp	.+190    	; 0x5a9c <vid_CapturingFunction+0xe8>
    59de:	2b 81       	ldd	r18, Y+3	; 0x03
    59e0:	3c 81       	ldd	r19, Y+4	; 0x04
    59e2:	23 30       	cpi	r18, 0x03	; 3
    59e4:	31 05       	cpc	r19, r1
    59e6:	f1 f0       	breq	.+60     	; 0x5a24 <vid_CapturingFunction+0x70>
    59e8:	8b 81       	ldd	r24, Y+3	; 0x03
    59ea:	9c 81       	ldd	r25, Y+4	; 0x04
    59ec:	81 30       	cpi	r24, 0x01	; 1
    59ee:	91 05       	cpc	r25, r1
    59f0:	09 f0       	breq	.+2      	; 0x59f4 <vid_CapturingFunction+0x40>
    59f2:	92 c0       	rjmp	.+292    	; 0x5b18 <vid_CapturingFunction+0x164>
        
        
        case ICU_FIRST_RISING_EDGE:
        {
            
            Timer_enu_SetTCNTxValue(ICU_TIMER_USED, 0); //Resetig timer value
    59f4:	80 e0       	ldi	r24, 0x00	; 0
    59f6:	60 e0       	ldi	r22, 0x00	; 0
    59f8:	70 e0       	ldi	r23, 0x00	; 0
    59fa:	0e 94 bb 09 	call	0x1376	; 0x1376 <Timer_enu_SetTCNTxValue>

            Timer_enu_SetTovx(ICU_TIMER_USED); //Clearing Tov0 Flag
    59fe:	80 e0       	ldi	r24, 0x00	; 0
    5a00:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <Timer_enu_SetTovx>

            EXTI_enu_ISC(ICU_EXTI_USED, EXTI_FALLING_EDGE); //Setting EXTI to Falling Edge
    5a04:	80 e0       	ldi	r24, 0x00	; 0
    5a06:	62 e0       	ldi	r22, 0x02	; 2
    5a08:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <EXTI_enu_ISC>

            LOC_au32_NumberOfOverflowsArray[0] = 0; //Resetting Overflow Counter
    5a0c:	10 92 e1 01 	sts	0x01E1, r1
    5a10:	10 92 e2 01 	sts	0x01E2, r1
    5a14:	10 92 e3 01 	sts	0x01E3, r1
    5a18:	10 92 e4 01 	sts	0x01E4, r1

            LOC_u8_State = ICU_FALLING_EDGE;  //Setting state machine to Falling edge
    5a1c:	83 e0       	ldi	r24, 0x03	; 3
    5a1e:	80 93 d8 01 	sts	0x01D8, r24
    5a22:	7a c0       	rjmp	.+244    	; 0x5b18 <vid_CapturingFunction+0x164>
            break;
        }

        case ICU_FALLING_EDGE:
        {
            Timer_enu_ReadTCNTxValue(ICU_TIMER_USED, &LOC_u32_TonCounts); //Saving Tcntx value in the Ton variable
    5a24:	2d ed       	ldi	r18, 0xDD	; 221
    5a26:	31 e0       	ldi	r19, 0x01	; 1
    5a28:	80 e0       	ldi	r24, 0x00	; 0
    5a2a:	b9 01       	movw	r22, r18
    5a2c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Timer_enu_ReadTCNTxValue>

            LCD_enu_WriteIntegerNum(LOC_u32_TonCounts, LCD_ROW_1, LCD_COLUMN_1, LCD_PAGE_1);
    5a30:	80 91 dd 01 	lds	r24, 0x01DD
    5a34:	90 91 de 01 	lds	r25, 0x01DE
    5a38:	a0 91 df 01 	lds	r26, 0x01DF
    5a3c:	b0 91 e0 01 	lds	r27, 0x01E0
    5a40:	bc 01       	movw	r22, r24
    5a42:	cd 01       	movw	r24, r26
    5a44:	41 e0       	ldi	r20, 0x01	; 1
    5a46:	21 e0       	ldi	r18, 0x01	; 1
    5a48:	01 e0       	ldi	r16, 0x01	; 1
    5a4a:	0e 94 40 23 	call	0x4680	; 0x4680 <LCD_enu_WriteIntegerNum>
            LOC_au32_NumberOfOverflowsArray[1] = LOC_au32_NumberOfOverflowsArray[0];
    5a4e:	80 91 e1 01 	lds	r24, 0x01E1
    5a52:	90 91 e2 01 	lds	r25, 0x01E2
    5a56:	a0 91 e3 01 	lds	r26, 0x01E3
    5a5a:	b0 91 e4 01 	lds	r27, 0x01E4
    5a5e:	80 93 e5 01 	sts	0x01E5, r24
    5a62:	90 93 e6 01 	sts	0x01E6, r25
    5a66:	a0 93 e7 01 	sts	0x01E7, r26
    5a6a:	b0 93 e8 01 	sts	0x01E8, r27

            LCD_enu_WriteIntegerNum(LOC_au32_NumberOfOverflowsArray[1], LCD_ROW_1, LCD_COLUMN_8, LCD_PAGE_1);
    5a6e:	80 91 e5 01 	lds	r24, 0x01E5
    5a72:	90 91 e6 01 	lds	r25, 0x01E6
    5a76:	a0 91 e7 01 	lds	r26, 0x01E7
    5a7a:	b0 91 e8 01 	lds	r27, 0x01E8
    5a7e:	bc 01       	movw	r22, r24
    5a80:	cd 01       	movw	r24, r26
    5a82:	41 e0       	ldi	r20, 0x01	; 1
    5a84:	28 e0       	ldi	r18, 0x08	; 8
    5a86:	01 e0       	ldi	r16, 0x01	; 1
    5a88:	0e 94 40 23 	call	0x4680	; 0x4680 <LCD_enu_WriteIntegerNum>
            
            EXTI_enu_ISC(ICU_EXTI_USED, EXTI_RISING_EDGE); //Setting EXTI to Falling Edge
    5a8c:	80 e0       	ldi	r24, 0x00	; 0
    5a8e:	63 e0       	ldi	r22, 0x03	; 3
    5a90:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <EXTI_enu_ISC>
            
            LOC_u8_State = ICU_SECOND_RISING_EDGE; //Setting state machine to Falling edge
    5a94:	82 e0       	ldi	r24, 0x02	; 2
    5a96:	80 93 d8 01 	sts	0x01D8, r24
    5a9a:	3e c0       	rjmp	.+124    	; 0x5b18 <vid_CapturingFunction+0x164>
            break;
        }
        
        case ICU_SECOND_RISING_EDGE:
        {
            Timer_enu_ReadTCNTxValue(ICU_TIMER_USED, &LOC_u32_PeriodCounts ); //Saving Tcntx value in the Ton variable
    5a9c:	29 ed       	ldi	r18, 0xD9	; 217
    5a9e:	31 e0       	ldi	r19, 0x01	; 1
    5aa0:	80 e0       	ldi	r24, 0x00	; 0
    5aa2:	b9 01       	movw	r22, r18
    5aa4:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Timer_enu_ReadTCNTxValue>
                        
            LCD_enu_WriteIntegerNum(LOC_u32_PeriodCounts, LCD_ROW_2, LCD_COLUMN_1, LCD_PAGE_1);
    5aa8:	80 91 d9 01 	lds	r24, 0x01D9
    5aac:	90 91 da 01 	lds	r25, 0x01DA
    5ab0:	a0 91 db 01 	lds	r26, 0x01DB
    5ab4:	b0 91 dc 01 	lds	r27, 0x01DC
    5ab8:	bc 01       	movw	r22, r24
    5aba:	cd 01       	movw	r24, r26
    5abc:	42 e0       	ldi	r20, 0x02	; 2
    5abe:	21 e0       	ldi	r18, 0x01	; 1
    5ac0:	01 e0       	ldi	r16, 0x01	; 1
    5ac2:	0e 94 40 23 	call	0x4680	; 0x4680 <LCD_enu_WriteIntegerNum>

            LOC_au32_NumberOfOverflowsArray[2] = LOC_au32_NumberOfOverflowsArray[0];
    5ac6:	80 91 e1 01 	lds	r24, 0x01E1
    5aca:	90 91 e2 01 	lds	r25, 0x01E2
    5ace:	a0 91 e3 01 	lds	r26, 0x01E3
    5ad2:	b0 91 e4 01 	lds	r27, 0x01E4
    5ad6:	80 93 e9 01 	sts	0x01E9, r24
    5ada:	90 93 ea 01 	sts	0x01EA, r25
    5ade:	a0 93 eb 01 	sts	0x01EB, r26
    5ae2:	b0 93 ec 01 	sts	0x01EC, r27
            
            LCD_enu_WriteIntegerNum(LOC_au32_NumberOfOverflowsArray[2], LCD_ROW_2, LCD_COLUMN_8, LCD_PAGE_1);
    5ae6:	80 91 e9 01 	lds	r24, 0x01E9
    5aea:	90 91 ea 01 	lds	r25, 0x01EA
    5aee:	a0 91 eb 01 	lds	r26, 0x01EB
    5af2:	b0 91 ec 01 	lds	r27, 0x01EC
    5af6:	bc 01       	movw	r22, r24
    5af8:	cd 01       	movw	r24, r26
    5afa:	42 e0       	ldi	r20, 0x02	; 2
    5afc:	28 e0       	ldi	r18, 0x08	; 8
    5afe:	01 e0       	ldi	r16, 0x01	; 1
    5b00:	0e 94 40 23 	call	0x4680	; 0x4680 <LCD_enu_WriteIntegerNum>
            
            #if ICU_MODE == ICU_SNGLE_CAPTURE_MODE
            EXTI_enu_INTMode(ICU_EXTI_USED, EXTI_POLLING_MODE); //Turning off ICU intil activation
    5b04:	80 e0       	ldi	r24, 0x00	; 0
    5b06:	60 e0       	ldi	r22, 0x00	; 0
    5b08:	0e 94 70 13 	call	0x26e0	; 0x26e0 <EXTI_enu_INTMode>
            Timer_enu_DisableInterruptMode(ICU_TIMER_USED, TIMER_NORMAL);
    5b0c:	80 e0       	ldi	r24, 0x00	; 0
    5b0e:	60 e0       	ldi	r22, 0x00	; 0
    5b10:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <Timer_enu_DisableInterruptMode>
            LOC_u8_State = ICU_IDLE;
    5b14:	10 92 d8 01 	sts	0x01D8, r1
            break;
        }

    }
    
}
    5b18:	0f 90       	pop	r0
    5b1a:	0f 90       	pop	r0
    5b1c:	0f 90       	pop	r0
    5b1e:	0f 90       	pop	r0
    5b20:	cf 91       	pop	r28
    5b22:	df 91       	pop	r29
    5b24:	0f 91       	pop	r16
    5b26:	08 95       	ret

00005b28 <vid_IncrementOverFlowCounter>:

void vid_IncrementOverFlowCounter()
{
    5b28:	df 93       	push	r29
    5b2a:	cf 93       	push	r28
    5b2c:	cd b7       	in	r28, 0x3d	; 61
    5b2e:	de b7       	in	r29, 0x3e	; 62

    LOC_au32_NumberOfOverflowsArray[0]++;
    5b30:	80 91 e1 01 	lds	r24, 0x01E1
    5b34:	90 91 e2 01 	lds	r25, 0x01E2
    5b38:	a0 91 e3 01 	lds	r26, 0x01E3
    5b3c:	b0 91 e4 01 	lds	r27, 0x01E4
    5b40:	01 96       	adiw	r24, 0x01	; 1
    5b42:	a1 1d       	adc	r26, r1
    5b44:	b1 1d       	adc	r27, r1
    5b46:	80 93 e1 01 	sts	0x01E1, r24
    5b4a:	90 93 e2 01 	sts	0x01E2, r25
    5b4e:	a0 93 e3 01 	sts	0x01E3, r26
    5b52:	b0 93 e4 01 	sts	0x01E4, r27

    DIO_enu_TogglePinValue(DIO_PIN_GROUP_C, DIO_PIN_1);
    5b56:	82 e0       	ldi	r24, 0x02	; 2
    5b58:	61 e0       	ldi	r22, 0x01	; 1
    5b5a:	0e 94 43 19 	call	0x3286	; 0x3286 <DIO_enu_TogglePinValue>
    
}
    5b5e:	cf 91       	pop	r28
    5b60:	df 91       	pop	r29
    5b62:	08 95       	ret

00005b64 <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    5b64:	df 93       	push	r29
    5b66:	cf 93       	push	r28
    5b68:	0f 92       	push	r0
    5b6a:	cd b7       	in	r28, 0x3d	; 61
    5b6c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5b6e:	81 e0       	ldi	r24, 0x01	; 1
    5b70:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    5b72:	80 e0       	ldi	r24, 0x00	; 0
    5b74:	64 e0       	ldi	r22, 0x04	; 4
    5b76:	41 e0       	ldi	r20, 0x01	; 1
    5b78:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    5b7c:	80 e0       	ldi	r24, 0x00	; 0
    5b7e:	65 e0       	ldi	r22, 0x05	; 5
    5b80:	41 e0       	ldi	r20, 0x01	; 1
    5b82:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    5b86:	80 e0       	ldi	r24, 0x00	; 0
    5b88:	66 e0       	ldi	r22, 0x06	; 6
    5b8a:	41 e0       	ldi	r20, 0x01	; 1
    5b8c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    5b90:	80 e0       	ldi	r24, 0x00	; 0
    5b92:	67 e0       	ldi	r22, 0x07	; 7
    5b94:	41 e0       	ldi	r20, 0x01	; 1
    5b96:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    5b9a:	81 e0       	ldi	r24, 0x01	; 1
    5b9c:	62 e0       	ldi	r22, 0x02	; 2
    5b9e:	41 e0       	ldi	r20, 0x01	; 1
    5ba0:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    5ba4:	81 e0       	ldi	r24, 0x01	; 1
    5ba6:	61 e0       	ldi	r22, 0x01	; 1
    5ba8:	41 e0       	ldi	r20, 0x01	; 1
    5baa:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    5bae:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    5bb0:	89 81       	ldd	r24, Y+1	; 0x01

}
    5bb2:	0f 90       	pop	r0
    5bb4:	cf 91       	pop	r28
    5bb6:	df 91       	pop	r29
    5bb8:	08 95       	ret

00005bba <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    5bba:	df 93       	push	r29
    5bbc:	cf 93       	push	r28
    5bbe:	00 d0       	rcall	.+0      	; 0x5bc0 <Hexadecoder_enu_DisplayNum+0x6>
    5bc0:	cd b7       	in	r28, 0x3d	; 61
    5bc2:	de b7       	in	r29, 0x3e	; 62
    5bc4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5bc6:	81 e0       	ldi	r24, 0x01	; 1
    5bc8:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    5bca:	8a 81       	ldd	r24, Y+2	; 0x02
    5bcc:	8a 30       	cpi	r24, 0x0A	; 10
    5bce:	40 f5       	brcc	.+80     	; 0x5c20 <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    5bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    5bd2:	98 2f       	mov	r25, r24
    5bd4:	91 70       	andi	r25, 0x01	; 1
    5bd6:	80 e0       	ldi	r24, 0x00	; 0
    5bd8:	64 e0       	ldi	r22, 0x04	; 4
    5bda:	49 2f       	mov	r20, r25
    5bdc:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    5be0:	8a 81       	ldd	r24, Y+2	; 0x02
    5be2:	86 95       	lsr	r24
    5be4:	98 2f       	mov	r25, r24
    5be6:	91 70       	andi	r25, 0x01	; 1
    5be8:	80 e0       	ldi	r24, 0x00	; 0
    5bea:	65 e0       	ldi	r22, 0x05	; 5
    5bec:	49 2f       	mov	r20, r25
    5bee:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    5bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    5bf4:	86 95       	lsr	r24
    5bf6:	86 95       	lsr	r24
    5bf8:	98 2f       	mov	r25, r24
    5bfa:	91 70       	andi	r25, 0x01	; 1
    5bfc:	80 e0       	ldi	r24, 0x00	; 0
    5bfe:	66 e0       	ldi	r22, 0x06	; 6
    5c00:	49 2f       	mov	r20, r25
    5c02:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    5c06:	8a 81       	ldd	r24, Y+2	; 0x02
    5c08:	86 95       	lsr	r24
    5c0a:	86 95       	lsr	r24
    5c0c:	86 95       	lsr	r24
    5c0e:	98 2f       	mov	r25, r24
    5c10:	91 70       	andi	r25, 0x01	; 1
    5c12:	80 e0       	ldi	r24, 0x00	; 0
    5c14:	67 e0       	ldi	r22, 0x07	; 7
    5c16:	49 2f       	mov	r20, r25
    5c18:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    5c1c:	19 82       	std	Y+1, r1	; 0x01
    5c1e:	02 c0       	rjmp	.+4      	; 0x5c24 <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5c20:	82 e0       	ldi	r24, 0x02	; 2
    5c22:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    5c24:	89 81       	ldd	r24, Y+1	; 0x01
} 
    5c26:	0f 90       	pop	r0
    5c28:	0f 90       	pop	r0
    5c2a:	cf 91       	pop	r28
    5c2c:	df 91       	pop	r29
    5c2e:	08 95       	ret

00005c30 <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    5c30:	df 93       	push	r29
    5c32:	cf 93       	push	r28
    5c34:	00 d0       	rcall	.+0      	; 0x5c36 <Hexadecoder_enu_EnableSSG+0x6>
    5c36:	00 d0       	rcall	.+0      	; 0x5c38 <Hexadecoder_enu_EnableSSG+0x8>
    5c38:	cd b7       	in	r28, 0x3d	; 61
    5c3a:	de b7       	in	r29, 0x3e	; 62
    5c3c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
    5c40:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    5c42:	8a 81       	ldd	r24, Y+2	; 0x02
    5c44:	28 2f       	mov	r18, r24
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	3c 83       	std	Y+4, r19	; 0x04
    5c4a:	2b 83       	std	Y+3, r18	; 0x03
    5c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    5c50:	00 97       	sbiw	r24, 0x00	; 0
    5c52:	31 f0       	breq	.+12     	; 0x5c60 <Hexadecoder_enu_EnableSSG+0x30>
    5c54:	2b 81       	ldd	r18, Y+3	; 0x03
    5c56:	3c 81       	ldd	r19, Y+4	; 0x04
    5c58:	21 30       	cpi	r18, 0x01	; 1
    5c5a:	31 05       	cpc	r19, r1
    5c5c:	41 f0       	breq	.+16     	; 0x5c6e <Hexadecoder_enu_EnableSSG+0x3e>
    5c5e:	0e c0       	rjmp	.+28     	; 0x5c7c <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    5c60:	81 e0       	ldi	r24, 0x01	; 1
    5c62:	62 e0       	ldi	r22, 0x02	; 2
    5c64:	41 e0       	ldi	r20, 0x01	; 1
    5c66:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5c6a:	19 82       	std	Y+1, r1	; 0x01
    5c6c:	09 c0       	rjmp	.+18     	; 0x5c80 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    5c6e:	81 e0       	ldi	r24, 0x01	; 1
    5c70:	61 e0       	ldi	r22, 0x01	; 1
    5c72:	41 e0       	ldi	r20, 0x01	; 1
    5c74:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5c78:	19 82       	std	Y+1, r1	; 0x01
    5c7a:	02 c0       	rjmp	.+4      	; 0x5c80 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5c7c:	82 e0       	ldi	r24, 0x02	; 2
    5c7e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    5c80:	89 81       	ldd	r24, Y+1	; 0x01
}
    5c82:	0f 90       	pop	r0
    5c84:	0f 90       	pop	r0
    5c86:	0f 90       	pop	r0
    5c88:	0f 90       	pop	r0
    5c8a:	cf 91       	pop	r28
    5c8c:	df 91       	pop	r29
    5c8e:	08 95       	ret

00005c90 <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    5c90:	df 93       	push	r29
    5c92:	cf 93       	push	r28
    5c94:	00 d0       	rcall	.+0      	; 0x5c96 <Hexadecoder_enu_DisableSSG+0x6>
    5c96:	00 d0       	rcall	.+0      	; 0x5c98 <Hexadecoder_enu_DisableSSG+0x8>
    5c98:	cd b7       	in	r28, 0x3d	; 61
    5c9a:	de b7       	in	r29, 0x3e	; 62
    5c9c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5c9e:	81 e0       	ldi	r24, 0x01	; 1
    5ca0:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    5ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ca4:	28 2f       	mov	r18, r24
    5ca6:	30 e0       	ldi	r19, 0x00	; 0
    5ca8:	3c 83       	std	Y+4, r19	; 0x04
    5caa:	2b 83       	std	Y+3, r18	; 0x03
    5cac:	8b 81       	ldd	r24, Y+3	; 0x03
    5cae:	9c 81       	ldd	r25, Y+4	; 0x04
    5cb0:	00 97       	sbiw	r24, 0x00	; 0
    5cb2:	31 f0       	breq	.+12     	; 0x5cc0 <Hexadecoder_enu_DisableSSG+0x30>
    5cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    5cb6:	3c 81       	ldd	r19, Y+4	; 0x04
    5cb8:	21 30       	cpi	r18, 0x01	; 1
    5cba:	31 05       	cpc	r19, r1
    5cbc:	41 f0       	breq	.+16     	; 0x5cce <Hexadecoder_enu_DisableSSG+0x3e>
    5cbe:	0e c0       	rjmp	.+28     	; 0x5cdc <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    5cc0:	81 e0       	ldi	r24, 0x01	; 1
    5cc2:	62 e0       	ldi	r22, 0x02	; 2
    5cc4:	40 e0       	ldi	r20, 0x00	; 0
    5cc6:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5cca:	19 82       	std	Y+1, r1	; 0x01
    5ccc:	09 c0       	rjmp	.+18     	; 0x5ce0 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    5cce:	81 e0       	ldi	r24, 0x01	; 1
    5cd0:	61 e0       	ldi	r22, 0x01	; 1
    5cd2:	40 e0       	ldi	r20, 0x00	; 0
    5cd4:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5cd8:	19 82       	std	Y+1, r1	; 0x01
    5cda:	02 c0       	rjmp	.+4      	; 0x5ce0 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5cdc:	82 e0       	ldi	r24, 0x02	; 2
    5cde:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    5ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
    5ce2:	0f 90       	pop	r0
    5ce4:	0f 90       	pop	r0
    5ce6:	0f 90       	pop	r0
    5ce8:	0f 90       	pop	r0
    5cea:	cf 91       	pop	r28
    5cec:	df 91       	pop	r29
    5cee:	08 95       	ret

00005cf0 <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    5cf0:	df 93       	push	r29
    5cf2:	cf 93       	push	r28
    5cf4:	0f 92       	push	r0
    5cf6:	cd b7       	in	r28, 0x3d	; 61
    5cf8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5cfa:	81 e0       	ldi	r24, 0x01	; 1
    5cfc:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    5cfe:	81 e0       	ldi	r24, 0x01	; 1
    5d00:	62 e0       	ldi	r22, 0x02	; 2
    5d02:	40 e0       	ldi	r20, 0x00	; 0
    5d04:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    5d08:	81 e0       	ldi	r24, 0x01	; 1
    5d0a:	61 e0       	ldi	r22, 0x01	; 1
    5d0c:	40 e0       	ldi	r20, 0x00	; 0
    5d0e:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    5d12:	89 81       	ldd	r24, Y+1	; 0x01
}
    5d14:	0f 90       	pop	r0
    5d16:	cf 91       	pop	r28
    5d18:	df 91       	pop	r29
    5d1a:	08 95       	ret

00005d1c <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    5d1c:	df 93       	push	r29
    5d1e:	cf 93       	push	r28
    5d20:	00 d0       	rcall	.+0      	; 0x5d22 <Buzzer_enu_Initialization+0x6>
    5d22:	cd b7       	in	r28, 0x3d	; 61
    5d24:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5d26:	81 e0       	ldi	r24, 0x01	; 1
    5d28:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    5d2a:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5d2c:	19 82       	std	Y+1, r1	; 0x01
    5d2e:	31 c0       	rjmp	.+98     	; 0x5d92 <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    5d30:	89 81       	ldd	r24, Y+1	; 0x01
    5d32:	88 2f       	mov	r24, r24
    5d34:	90 e0       	ldi	r25, 0x00	; 0
    5d36:	88 0f       	add	r24, r24
    5d38:	99 1f       	adc	r25, r25
    5d3a:	fc 01       	movw	r30, r24
    5d3c:	ef 56       	subi	r30, 0x6F	; 111
    5d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    5d40:	20 81       	ld	r18, Z
    5d42:	89 81       	ldd	r24, Y+1	; 0x01
    5d44:	88 2f       	mov	r24, r24
    5d46:	90 e0       	ldi	r25, 0x00	; 0
    5d48:	88 0f       	add	r24, r24
    5d4a:	99 1f       	adc	r25, r25
    5d4c:	fc 01       	movw	r30, r24
    5d4e:	ee 56       	subi	r30, 0x6E	; 110
    5d50:	fe 4f       	sbci	r31, 0xFE	; 254
    5d52:	90 81       	ld	r25, Z
    5d54:	82 2f       	mov	r24, r18
    5d56:	69 2f       	mov	r22, r25
    5d58:	41 e0       	ldi	r20, 0x01	; 1
    5d5a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    5d5e:	89 81       	ldd	r24, Y+1	; 0x01
    5d60:	88 2f       	mov	r24, r24
    5d62:	90 e0       	ldi	r25, 0x00	; 0
    5d64:	88 0f       	add	r24, r24
    5d66:	99 1f       	adc	r25, r25
    5d68:	fc 01       	movw	r30, r24
    5d6a:	ef 56       	subi	r30, 0x6F	; 111
    5d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    5d6e:	20 81       	ld	r18, Z
    5d70:	89 81       	ldd	r24, Y+1	; 0x01
    5d72:	88 2f       	mov	r24, r24
    5d74:	90 e0       	ldi	r25, 0x00	; 0
    5d76:	88 0f       	add	r24, r24
    5d78:	99 1f       	adc	r25, r25
    5d7a:	fc 01       	movw	r30, r24
    5d7c:	ee 56       	subi	r30, 0x6E	; 110
    5d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    5d80:	90 81       	ld	r25, Z
    5d82:	82 2f       	mov	r24, r18
    5d84:	69 2f       	mov	r22, r25
    5d86:	40 e0       	ldi	r20, 0x00	; 0
    5d88:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5d8c:	89 81       	ldd	r24, Y+1	; 0x01
    5d8e:	8f 5f       	subi	r24, 0xFF	; 255
    5d90:	89 83       	std	Y+1, r24	; 0x01
    5d92:	90 91 90 01 	lds	r25, 0x0190
    5d96:	89 81       	ldd	r24, Y+1	; 0x01
    5d98:	89 17       	cp	r24, r25
    5d9a:	50 f2       	brcs	.-108    	; 0x5d30 <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    5d9c:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    5d9e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5da0:	0f 90       	pop	r0
    5da2:	0f 90       	pop	r0
    5da4:	cf 91       	pop	r28
    5da6:	df 91       	pop	r29
    5da8:	08 95       	ret

00005daa <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    5daa:	df 93       	push	r29
    5dac:	cf 93       	push	r28
    5dae:	00 d0       	rcall	.+0      	; 0x5db0 <Buzzer_enu_TuronOnBuzzer+0x6>
    5db0:	cd b7       	in	r28, 0x3d	; 61
    5db2:	de b7       	in	r29, 0x3e	; 62
    5db4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5db6:	81 e0       	ldi	r24, 0x01	; 1
    5db8:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    5dba:	90 91 90 01 	lds	r25, 0x0190
    5dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    5dc0:	89 17       	cp	r24, r25
    5dc2:	c8 f4       	brcc	.+50     	; 0x5df6 <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    5dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    5dc6:	88 2f       	mov	r24, r24
    5dc8:	90 e0       	ldi	r25, 0x00	; 0
    5dca:	88 0f       	add	r24, r24
    5dcc:	99 1f       	adc	r25, r25
    5dce:	fc 01       	movw	r30, r24
    5dd0:	ef 56       	subi	r30, 0x6F	; 111
    5dd2:	fe 4f       	sbci	r31, 0xFE	; 254
    5dd4:	20 81       	ld	r18, Z
    5dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    5dd8:	88 2f       	mov	r24, r24
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	88 0f       	add	r24, r24
    5dde:	99 1f       	adc	r25, r25
    5de0:	fc 01       	movw	r30, r24
    5de2:	ee 56       	subi	r30, 0x6E	; 110
    5de4:	fe 4f       	sbci	r31, 0xFE	; 254
    5de6:	90 81       	ld	r25, Z
    5de8:	82 2f       	mov	r24, r18
    5dea:	69 2f       	mov	r22, r25
    5dec:	41 e0       	ldi	r20, 0x01	; 1
    5dee:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    5df2:	89 83       	std	Y+1, r24	; 0x01
    5df4:	02 c0       	rjmp	.+4      	; 0x5dfa <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5df6:	82 e0       	ldi	r24, 0x02	; 2
    5df8:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    5dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    5dfc:	0f 90       	pop	r0
    5dfe:	0f 90       	pop	r0
    5e00:	cf 91       	pop	r28
    5e02:	df 91       	pop	r29
    5e04:	08 95       	ret

00005e06 <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    5e06:	df 93       	push	r29
    5e08:	cf 93       	push	r28
    5e0a:	00 d0       	rcall	.+0      	; 0x5e0c <Buzzer_enu_TuronOffBuzzer+0x6>
    5e0c:	cd b7       	in	r28, 0x3d	; 61
    5e0e:	de b7       	in	r29, 0x3e	; 62
    5e10:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5e12:	81 e0       	ldi	r24, 0x01	; 1
    5e14:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    5e16:	90 91 90 01 	lds	r25, 0x0190
    5e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1c:	89 17       	cp	r24, r25
    5e1e:	c8 f4       	brcc	.+50     	; 0x5e52 <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    5e20:	8a 81       	ldd	r24, Y+2	; 0x02
    5e22:	88 2f       	mov	r24, r24
    5e24:	90 e0       	ldi	r25, 0x00	; 0
    5e26:	88 0f       	add	r24, r24
    5e28:	99 1f       	adc	r25, r25
    5e2a:	fc 01       	movw	r30, r24
    5e2c:	ef 56       	subi	r30, 0x6F	; 111
    5e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    5e30:	20 81       	ld	r18, Z
    5e32:	8a 81       	ldd	r24, Y+2	; 0x02
    5e34:	88 2f       	mov	r24, r24
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	88 0f       	add	r24, r24
    5e3a:	99 1f       	adc	r25, r25
    5e3c:	fc 01       	movw	r30, r24
    5e3e:	ee 56       	subi	r30, 0x6E	; 110
    5e40:	fe 4f       	sbci	r31, 0xFE	; 254
    5e42:	90 81       	ld	r25, Z
    5e44:	82 2f       	mov	r24, r18
    5e46:	69 2f       	mov	r22, r25
    5e48:	40 e0       	ldi	r20, 0x00	; 0
    5e4a:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
    5e4e:	89 83       	std	Y+1, r24	; 0x01
    5e50:	02 c0       	rjmp	.+4      	; 0x5e56 <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5e52:	82 e0       	ldi	r24, 0x02	; 2
    5e54:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    5e56:	89 81       	ldd	r24, Y+1	; 0x01
}
    5e58:	0f 90       	pop	r0
    5e5a:	0f 90       	pop	r0
    5e5c:	cf 91       	pop	r28
    5e5e:	df 91       	pop	r29
    5e60:	08 95       	ret

00005e62 <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    5e62:	df 93       	push	r29
    5e64:	cf 93       	push	r28
    5e66:	00 d0       	rcall	.+0      	; 0x5e68 <Buzzer_enu_TurnOnAllBuzzers+0x6>
    5e68:	cd b7       	in	r28, 0x3d	; 61
    5e6a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
    5e6e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    5e70:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5e72:	19 82       	std	Y+1, r1	; 0x01
    5e74:	1a c0       	rjmp	.+52     	; 0x5eaa <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    5e76:	89 81       	ldd	r24, Y+1	; 0x01
    5e78:	88 2f       	mov	r24, r24
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	88 0f       	add	r24, r24
    5e7e:	99 1f       	adc	r25, r25
    5e80:	fc 01       	movw	r30, r24
    5e82:	ef 56       	subi	r30, 0x6F	; 111
    5e84:	fe 4f       	sbci	r31, 0xFE	; 254
    5e86:	20 81       	ld	r18, Z
    5e88:	89 81       	ldd	r24, Y+1	; 0x01
    5e8a:	88 2f       	mov	r24, r24
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	88 0f       	add	r24, r24
    5e90:	99 1f       	adc	r25, r25
    5e92:	fc 01       	movw	r30, r24
    5e94:	ee 56       	subi	r30, 0x6E	; 110
    5e96:	fe 4f       	sbci	r31, 0xFE	; 254
    5e98:	90 81       	ld	r25, Z
    5e9a:	82 2f       	mov	r24, r18
    5e9c:	69 2f       	mov	r22, r25
    5e9e:	41 e0       	ldi	r20, 0x01	; 1
    5ea0:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5ea4:	89 81       	ldd	r24, Y+1	; 0x01
    5ea6:	8f 5f       	subi	r24, 0xFF	; 255
    5ea8:	89 83       	std	Y+1, r24	; 0x01
    5eaa:	90 91 90 01 	lds	r25, 0x0190
    5eae:	89 81       	ldd	r24, Y+1	; 0x01
    5eb0:	89 17       	cp	r24, r25
    5eb2:	08 f3       	brcs	.-62     	; 0x5e76 <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5eb4:	82 e0       	ldi	r24, 0x02	; 2
    5eb6:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    5eb8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5eba:	0f 90       	pop	r0
    5ebc:	0f 90       	pop	r0
    5ebe:	cf 91       	pop	r28
    5ec0:	df 91       	pop	r29
    5ec2:	08 95       	ret

00005ec4 <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    5ec4:	df 93       	push	r29
    5ec6:	cf 93       	push	r28
    5ec8:	00 d0       	rcall	.+0      	; 0x5eca <Buzzer_enu_TurnOffAllBuzzers+0x6>
    5eca:	cd b7       	in	r28, 0x3d	; 61
    5ecc:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5ece:	81 e0       	ldi	r24, 0x01	; 1
    5ed0:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    5ed2:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5ed4:	19 82       	std	Y+1, r1	; 0x01
    5ed6:	1a c0       	rjmp	.+52     	; 0x5f0c <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    5ed8:	89 81       	ldd	r24, Y+1	; 0x01
    5eda:	88 2f       	mov	r24, r24
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	88 0f       	add	r24, r24
    5ee0:	99 1f       	adc	r25, r25
    5ee2:	fc 01       	movw	r30, r24
    5ee4:	ef 56       	subi	r30, 0x6F	; 111
    5ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ee8:	20 81       	ld	r18, Z
    5eea:	89 81       	ldd	r24, Y+1	; 0x01
    5eec:	88 2f       	mov	r24, r24
    5eee:	90 e0       	ldi	r25, 0x00	; 0
    5ef0:	88 0f       	add	r24, r24
    5ef2:	99 1f       	adc	r25, r25
    5ef4:	fc 01       	movw	r30, r24
    5ef6:	ee 56       	subi	r30, 0x6E	; 110
    5ef8:	fe 4f       	sbci	r31, 0xFE	; 254
    5efa:	90 81       	ld	r25, Z
    5efc:	82 2f       	mov	r24, r18
    5efe:	69 2f       	mov	r22, r25
    5f00:	40 e0       	ldi	r20, 0x00	; 0
    5f02:	0e 94 4c 18 	call	0x3098	; 0x3098 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5f06:	89 81       	ldd	r24, Y+1	; 0x01
    5f08:	8f 5f       	subi	r24, 0xFF	; 255
    5f0a:	89 83       	std	Y+1, r24	; 0x01
    5f0c:	90 91 90 01 	lds	r25, 0x0190
    5f10:	89 81       	ldd	r24, Y+1	; 0x01
    5f12:	89 17       	cp	r24, r25
    5f14:	08 f3       	brcs	.-62     	; 0x5ed8 <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    5f16:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5f18:	0f 90       	pop	r0
    5f1a:	0f 90       	pop	r0
    5f1c:	cf 91       	pop	r28
    5f1e:	df 91       	pop	r29
    5f20:	08 95       	ret

00005f22 <main>:
#include <util/delay.h>



void main()
{
    5f22:	df 93       	push	r29
    5f24:	cf 93       	push	r28
    5f26:	cd b7       	in	r28, 0x3d	; 61
    5f28:	de b7       	in	r29, 0x3e	; 62
    5f2a:	61 97       	sbiw	r28, 0x11	; 17
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	f8 94       	cli
    5f30:	de bf       	out	0x3e, r29	; 62
    5f32:	0f be       	out	0x3f, r0	; 63
    5f34:	cd bf       	out	0x3d, r28	; 61
	
	f32 Local_af32_SignalsParameters[2] = {0}; //An array to place signal parameters in [0] Period and [1] Duty
    5f36:	88 e0       	ldi	r24, 0x08	; 8
    5f38:	fe 01       	movw	r30, r28
    5f3a:	3a 96       	adiw	r30, 0x0a	; 10
    5f3c:	df 01       	movw	r26, r30
    5f3e:	98 2f       	mov	r25, r24
    5f40:	1d 92       	st	X+, r1
    5f42:	9a 95       	dec	r25
    5f44:	e9 f7       	brne	.-6      	; 0x5f40 <main+0x1e>
	f32 Local_f32_FrequencyHz;
	f32 Local_f32_DutyPercentage;
	u8 Local_u8_SystemState = 0xff;
    5f46:	8f ef       	ldi	r24, 0xFF	; 255
    5f48:	89 83       	std	Y+1, r24	; 0x01

	LCD_enu_Initialization();//Initializing LCD
    5f4a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <LCD_enu_Initialization>

	ICU_enu_Initialization();//Initialzing ICU
    5f4e:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <ICU_enu_Initialization>
	
	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_C, DIO_PIN_1, DIO_PIN_WRITE);
    5f52:	82 e0       	ldi	r24, 0x02	; 2
    5f54:	61 e0       	ldi	r22, 0x01	; 1
    5f56:	41 e0       	ldi	r20, 0x01	; 1
    5f58:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <DIO_enu_SetPinDiretion>
	// LCD_enu_SendString("Duty: ");
	// LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_15,LCD_PAGE_1);
	// LCD_enu_SendString("%");

	//Enabling GIE
	SREG_vid_EnableBitI();
    5f5c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <SREG_vid_EnableBitI>

	
	
	ICU_enu_StartCapture();
    5f60:	0e 94 95 2b 	call	0x572a	; 0x572a <ICU_enu_StartCapture>
    5f64:	ff cf       	rjmp	.-2      	; 0x5f64 <main+0x42>

00005f66 <__mulsi3>:
    5f66:	62 9f       	mul	r22, r18
    5f68:	d0 01       	movw	r26, r0
    5f6a:	73 9f       	mul	r23, r19
    5f6c:	f0 01       	movw	r30, r0
    5f6e:	82 9f       	mul	r24, r18
    5f70:	e0 0d       	add	r30, r0
    5f72:	f1 1d       	adc	r31, r1
    5f74:	64 9f       	mul	r22, r20
    5f76:	e0 0d       	add	r30, r0
    5f78:	f1 1d       	adc	r31, r1
    5f7a:	92 9f       	mul	r25, r18
    5f7c:	f0 0d       	add	r31, r0
    5f7e:	83 9f       	mul	r24, r19
    5f80:	f0 0d       	add	r31, r0
    5f82:	74 9f       	mul	r23, r20
    5f84:	f0 0d       	add	r31, r0
    5f86:	65 9f       	mul	r22, r21
    5f88:	f0 0d       	add	r31, r0
    5f8a:	99 27       	eor	r25, r25
    5f8c:	72 9f       	mul	r23, r18
    5f8e:	b0 0d       	add	r27, r0
    5f90:	e1 1d       	adc	r30, r1
    5f92:	f9 1f       	adc	r31, r25
    5f94:	63 9f       	mul	r22, r19
    5f96:	b0 0d       	add	r27, r0
    5f98:	e1 1d       	adc	r30, r1
    5f9a:	f9 1f       	adc	r31, r25
    5f9c:	bd 01       	movw	r22, r26
    5f9e:	cf 01       	movw	r24, r30
    5fa0:	11 24       	eor	r1, r1
    5fa2:	08 95       	ret

00005fa4 <__udivmodsi4>:
    5fa4:	a1 e2       	ldi	r26, 0x21	; 33
    5fa6:	1a 2e       	mov	r1, r26
    5fa8:	aa 1b       	sub	r26, r26
    5faa:	bb 1b       	sub	r27, r27
    5fac:	fd 01       	movw	r30, r26
    5fae:	0d c0       	rjmp	.+26     	; 0x5fca <__udivmodsi4_ep>

00005fb0 <__udivmodsi4_loop>:
    5fb0:	aa 1f       	adc	r26, r26
    5fb2:	bb 1f       	adc	r27, r27
    5fb4:	ee 1f       	adc	r30, r30
    5fb6:	ff 1f       	adc	r31, r31
    5fb8:	a2 17       	cp	r26, r18
    5fba:	b3 07       	cpc	r27, r19
    5fbc:	e4 07       	cpc	r30, r20
    5fbe:	f5 07       	cpc	r31, r21
    5fc0:	20 f0       	brcs	.+8      	; 0x5fca <__udivmodsi4_ep>
    5fc2:	a2 1b       	sub	r26, r18
    5fc4:	b3 0b       	sbc	r27, r19
    5fc6:	e4 0b       	sbc	r30, r20
    5fc8:	f5 0b       	sbc	r31, r21

00005fca <__udivmodsi4_ep>:
    5fca:	66 1f       	adc	r22, r22
    5fcc:	77 1f       	adc	r23, r23
    5fce:	88 1f       	adc	r24, r24
    5fd0:	99 1f       	adc	r25, r25
    5fd2:	1a 94       	dec	r1
    5fd4:	69 f7       	brne	.-38     	; 0x5fb0 <__udivmodsi4_loop>
    5fd6:	60 95       	com	r22
    5fd8:	70 95       	com	r23
    5fda:	80 95       	com	r24
    5fdc:	90 95       	com	r25
    5fde:	9b 01       	movw	r18, r22
    5fe0:	ac 01       	movw	r20, r24
    5fe2:	bd 01       	movw	r22, r26
    5fe4:	cf 01       	movw	r24, r30
    5fe6:	08 95       	ret

00005fe8 <__divmodsi4>:
    5fe8:	97 fb       	bst	r25, 7
    5fea:	09 2e       	mov	r0, r25
    5fec:	05 26       	eor	r0, r21
    5fee:	0e d0       	rcall	.+28     	; 0x600c <__divmodsi4_neg1>
    5ff0:	57 fd       	sbrc	r21, 7
    5ff2:	04 d0       	rcall	.+8      	; 0x5ffc <__divmodsi4_neg2>
    5ff4:	d7 df       	rcall	.-82     	; 0x5fa4 <__udivmodsi4>
    5ff6:	0a d0       	rcall	.+20     	; 0x600c <__divmodsi4_neg1>
    5ff8:	00 1c       	adc	r0, r0
    5ffa:	38 f4       	brcc	.+14     	; 0x600a <__divmodsi4_exit>

00005ffc <__divmodsi4_neg2>:
    5ffc:	50 95       	com	r21
    5ffe:	40 95       	com	r20
    6000:	30 95       	com	r19
    6002:	21 95       	neg	r18
    6004:	3f 4f       	sbci	r19, 0xFF	; 255
    6006:	4f 4f       	sbci	r20, 0xFF	; 255
    6008:	5f 4f       	sbci	r21, 0xFF	; 255

0000600a <__divmodsi4_exit>:
    600a:	08 95       	ret

0000600c <__divmodsi4_neg1>:
    600c:	f6 f7       	brtc	.-4      	; 0x600a <__divmodsi4_exit>
    600e:	90 95       	com	r25
    6010:	80 95       	com	r24
    6012:	70 95       	com	r23
    6014:	61 95       	neg	r22
    6016:	7f 4f       	sbci	r23, 0xFF	; 255
    6018:	8f 4f       	sbci	r24, 0xFF	; 255
    601a:	9f 4f       	sbci	r25, 0xFF	; 255
    601c:	08 95       	ret

0000601e <__prologue_saves__>:
    601e:	2f 92       	push	r2
    6020:	3f 92       	push	r3
    6022:	4f 92       	push	r4
    6024:	5f 92       	push	r5
    6026:	6f 92       	push	r6
    6028:	7f 92       	push	r7
    602a:	8f 92       	push	r8
    602c:	9f 92       	push	r9
    602e:	af 92       	push	r10
    6030:	bf 92       	push	r11
    6032:	cf 92       	push	r12
    6034:	df 92       	push	r13
    6036:	ef 92       	push	r14
    6038:	ff 92       	push	r15
    603a:	0f 93       	push	r16
    603c:	1f 93       	push	r17
    603e:	cf 93       	push	r28
    6040:	df 93       	push	r29
    6042:	cd b7       	in	r28, 0x3d	; 61
    6044:	de b7       	in	r29, 0x3e	; 62
    6046:	ca 1b       	sub	r28, r26
    6048:	db 0b       	sbc	r29, r27
    604a:	0f b6       	in	r0, 0x3f	; 63
    604c:	f8 94       	cli
    604e:	de bf       	out	0x3e, r29	; 62
    6050:	0f be       	out	0x3f, r0	; 63
    6052:	cd bf       	out	0x3d, r28	; 61
    6054:	09 94       	ijmp

00006056 <__epilogue_restores__>:
    6056:	2a 88       	ldd	r2, Y+18	; 0x12
    6058:	39 88       	ldd	r3, Y+17	; 0x11
    605a:	48 88       	ldd	r4, Y+16	; 0x10
    605c:	5f 84       	ldd	r5, Y+15	; 0x0f
    605e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6060:	7d 84       	ldd	r7, Y+13	; 0x0d
    6062:	8c 84       	ldd	r8, Y+12	; 0x0c
    6064:	9b 84       	ldd	r9, Y+11	; 0x0b
    6066:	aa 84       	ldd	r10, Y+10	; 0x0a
    6068:	b9 84       	ldd	r11, Y+9	; 0x09
    606a:	c8 84       	ldd	r12, Y+8	; 0x08
    606c:	df 80       	ldd	r13, Y+7	; 0x07
    606e:	ee 80       	ldd	r14, Y+6	; 0x06
    6070:	fd 80       	ldd	r15, Y+5	; 0x05
    6072:	0c 81       	ldd	r16, Y+4	; 0x04
    6074:	1b 81       	ldd	r17, Y+3	; 0x03
    6076:	aa 81       	ldd	r26, Y+2	; 0x02
    6078:	b9 81       	ldd	r27, Y+1	; 0x01
    607a:	ce 0f       	add	r28, r30
    607c:	d1 1d       	adc	r29, r1
    607e:	0f b6       	in	r0, 0x3f	; 63
    6080:	f8 94       	cli
    6082:	de bf       	out	0x3e, r29	; 62
    6084:	0f be       	out	0x3f, r0	; 63
    6086:	cd bf       	out	0x3d, r28	; 61
    6088:	ed 01       	movw	r28, r26
    608a:	08 95       	ret

0000608c <_exit>:
    608c:	f8 94       	cli

0000608e <__stop_program>:
    608e:	ff cf       	rjmp	.-2      	; 0x608e <__stop_program>
