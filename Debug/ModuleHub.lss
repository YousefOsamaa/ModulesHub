
ModuleHub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  00004238  000042cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008001be  008001be  0000442a  2**0
                  ALLOC
  3 .stab         00005db4  00000000  00000000  0000442c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000251a  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c6fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f1  00000000  00000000  0000c89a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228e  00000000  00000000  0000ca8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ca  00000000  00000000  0000ed19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d4  00000000  00000000  0000ffe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000110b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c9  00000000  00000000  00011278  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ea  00000000  00000000  00011541  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011e2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__vector_1>
       8:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_2>
       c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3c       	cpi	r26, 0xC8	; 200
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <main>
      8a:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

000007b2 <__fixsfsi>:
     7b2:	ac e0       	ldi	r26, 0x0C	; 12
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__prologue_saves__+0x20>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	be 01       	movw	r22, r28
     7cc:	6b 5f       	subi	r22, 0xFB	; 251
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f1       	breq	.+88     	; 0x832 <__fixsfsi+0x80>
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	50 f1       	brcs	.+84     	; 0x832 <__fixsfsi+0x80>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	21 f4       	brne	.+8      	; 0x7ea <__fixsfsi+0x38>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	88 23       	and	r24, r24
     7e6:	51 f1       	breq	.+84     	; 0x83c <__fixsfsi+0x8a>
     7e8:	2e c0       	rjmp	.+92     	; 0x846 <__fixsfsi+0x94>
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	38 85       	ldd	r19, Y+8	; 0x08
     7ee:	37 fd       	sbrc	r19, 7
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <__fixsfsi+0x80>
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	2f 31       	cpi	r18, 0x1F	; 31
     7f6:	31 05       	cpc	r19, r1
     7f8:	1c f0       	brlt	.+6      	; 0x800 <__fixsfsi+0x4e>
     7fa:	66 23       	and	r22, r22
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__fixsfsi+0x8a>
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <__fixsfsi+0x94>
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	29 85       	ldd	r18, Y+9	; 0x09
     80a:	3a 85       	ldd	r19, Y+10	; 0x0a
     80c:	4b 85       	ldd	r20, Y+11	; 0x0b
     80e:	5c 85       	ldd	r21, Y+12	; 0x0c
     810:	04 c0       	rjmp	.+8      	; 0x81a <__fixsfsi+0x68>
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	37 95       	ror	r19
     818:	27 95       	ror	r18
     81a:	8a 95       	dec	r24
     81c:	d2 f7       	brpl	.-12     	; 0x812 <__fixsfsi+0x60>
     81e:	66 23       	and	r22, r22
     820:	b1 f0       	breq	.+44     	; 0x84e <__fixsfsi+0x9c>
     822:	50 95       	com	r21
     824:	40 95       	com	r20
     826:	30 95       	com	r19
     828:	21 95       	neg	r18
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	0e c0       	rjmp	.+28     	; 0x84e <__fixsfsi+0x9c>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__fixsfsi+0x9c>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f ef       	ldi	r20, 0xFF	; 255
     842:	5f e7       	ldi	r21, 0x7F	; 127
     844:	04 c0       	rjmp	.+8      	; 0x84e <__fixsfsi+0x9c>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e8       	ldi	r21, 0x80	; 128
     84e:	b9 01       	movw	r22, r18
     850:	ca 01       	movw	r24, r20
     852:	2c 96       	adiw	r28, 0x0c	; 12
     854:	e2 e0       	ldi	r30, 0x02	; 2
     856:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__epilogue_restores__+0x20>

0000085a <__floatunsisf>:
     85a:	a8 e0       	ldi	r26, 0x08	; 8
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e3 e3       	ldi	r30, 0x33	; 51
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__prologue_saves__+0x10>
     866:	7b 01       	movw	r14, r22
     868:	8c 01       	movw	r16, r24
     86a:	61 15       	cp	r22, r1
     86c:	71 05       	cpc	r23, r1
     86e:	81 05       	cpc	r24, r1
     870:	91 05       	cpc	r25, r1
     872:	19 f4       	brne	.+6      	; 0x87a <__stack+0x1b>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	60 c0       	rjmp	.+192    	; 0x93a <__stack+0xdb>
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	c8 2e       	mov	r12, r24
     882:	d1 2c       	mov	r13, r1
     884:	dc 82       	std	Y+4, r13	; 0x04
     886:	cb 82       	std	Y+3, r12	; 0x03
     888:	ed 82       	std	Y+5, r14	; 0x05
     88a:	fe 82       	std	Y+6, r15	; 0x06
     88c:	0f 83       	std	Y+7, r16	; 0x07
     88e:	18 87       	std	Y+8, r17	; 0x08
     890:	c8 01       	movw	r24, r16
     892:	b7 01       	movw	r22, r14
     894:	0e 94 a6 04 	call	0x94c	; 0x94c <__clzsi2>
     898:	fc 01       	movw	r30, r24
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f7 ff       	sbrs	r31, 7
     89e:	3b c0       	rjmp	.+118    	; 0x916 <__stack+0xb7>
     8a0:	22 27       	eor	r18, r18
     8a2:	33 27       	eor	r19, r19
     8a4:	2e 1b       	sub	r18, r30
     8a6:	3f 0b       	sbc	r19, r31
     8a8:	57 01       	movw	r10, r14
     8aa:	68 01       	movw	r12, r16
     8ac:	02 2e       	mov	r0, r18
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	d6 94       	lsr	r13
     8b2:	c7 94       	ror	r12
     8b4:	b7 94       	ror	r11
     8b6:	a7 94       	ror	r10
     8b8:	0a 94       	dec	r0
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <__stack+0x51>
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	2a 95       	dec	r18
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__stack+0x6f>
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	a1 09       	sbc	r26, r1
     8de:	b1 09       	sbc	r27, r1
     8e0:	8e 21       	and	r24, r14
     8e2:	9f 21       	and	r25, r15
     8e4:	a0 23       	and	r26, r16
     8e6:	b1 23       	and	r27, r17
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	4a 29       	or	r20, r10
     8fa:	5b 29       	or	r21, r11
     8fc:	6c 29       	or	r22, r12
     8fe:	7d 29       	or	r23, r13
     900:	4d 83       	std	Y+5, r20	; 0x05
     902:	5e 83       	std	Y+6, r21	; 0x06
     904:	6f 83       	std	Y+7, r22	; 0x07
     906:	78 87       	std	Y+8, r23	; 0x08
     908:	8e e1       	ldi	r24, 0x1E	; 30
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	8e 1b       	sub	r24, r30
     90e:	9f 0b       	sbc	r25, r31
     910:	9c 83       	std	Y+4, r25	; 0x04
     912:	8b 83       	std	Y+3, r24	; 0x03
     914:	12 c0       	rjmp	.+36     	; 0x93a <__stack+0xdb>
     916:	30 97       	sbiw	r30, 0x00	; 0
     918:	81 f0       	breq	.+32     	; 0x93a <__stack+0xdb>
     91a:	0e 2e       	mov	r0, r30
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0xc7>
     91e:	ee 0c       	add	r14, r14
     920:	ff 1c       	adc	r15, r15
     922:	00 1f       	adc	r16, r16
     924:	11 1f       	adc	r17, r17
     926:	0a 94       	dec	r0
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0xbf>
     92a:	ed 82       	std	Y+5, r14	; 0x05
     92c:	fe 82       	std	Y+6, r15	; 0x06
     92e:	0f 83       	std	Y+7, r16	; 0x07
     930:	18 87       	std	Y+8, r17	; 0x08
     932:	ce 1a       	sub	r12, r30
     934:	df 0a       	sbc	r13, r31
     936:	dc 82       	std	Y+4, r13	; 0x04
     938:	cb 82       	std	Y+3, r12	; 0x03
     93a:	1a 82       	std	Y+2, r1	; 0x02
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     944:	28 96       	adiw	r28, 0x08	; 8
     946:	ea e0       	ldi	r30, 0x0A	; 10
     948:	0c 94 07 21 	jmp	0x420e	; 0x420e <__epilogue_restores__+0x10>

0000094c <__clzsi2>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	7b 01       	movw	r14, r22
     956:	8c 01       	movw	r16, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	e8 16       	cp	r14, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	f8 06       	cpc	r15, r24
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 07       	cpc	r16, r24
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	18 07       	cpc	r17, r24
     968:	88 f4       	brcc	.+34     	; 0x98c <__clzsi2+0x40>
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	e8 16       	cp	r14, r24
     96e:	f1 04       	cpc	r15, r1
     970:	01 05       	cpc	r16, r1
     972:	11 05       	cpc	r17, r1
     974:	31 f0       	breq	.+12     	; 0x982 <__clzsi2+0x36>
     976:	28 f0       	brcs	.+10     	; 0x982 <__clzsi2+0x36>
     978:	88 e0       	ldi	r24, 0x08	; 8
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	17 c0       	rjmp	.+46     	; 0x9b0 <__clzsi2+0x64>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <__clzsi2+0x64>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	e8 16       	cp	r14, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	f8 06       	cpc	r15, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	08 07       	cpc	r16, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	18 07       	cpc	r17, r24
     99c:	28 f0       	brcs	.+10     	; 0x9a8 <__clzsi2+0x5c>
     99e:	88 e1       	ldi	r24, 0x18	; 24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__clzsi2+0x64>
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	20 e2       	ldi	r18, 0x20	; 32
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	4a 0b       	sbc	r20, r26
     9be:	5b 0b       	sbc	r21, r27
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__clzsi2+0x7e>
     9c2:	16 95       	lsr	r17
     9c4:	07 95       	ror	r16
     9c6:	f7 94       	ror	r15
     9c8:	e7 94       	ror	r14
     9ca:	8a 95       	dec	r24
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__clzsi2+0x76>
     9ce:	f7 01       	movw	r30, r14
     9d0:	e7 58       	subi	r30, 0x87	; 135
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	80 81       	ld	r24, Z
     9d6:	28 1b       	sub	r18, r24
     9d8:	31 09       	sbc	r19, r1
     9da:	41 09       	sbc	r20, r1
     9dc:	51 09       	sbc	r21, r1
     9de:	c9 01       	movw	r24, r18
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <__pack_f>:
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	fc 01       	movw	r30, r24
     9f6:	e4 80       	ldd	r14, Z+4	; 0x04
     9f8:	f5 80       	ldd	r15, Z+5	; 0x05
     9fa:	06 81       	ldd	r16, Z+6	; 0x06
     9fc:	17 81       	ldd	r17, Z+7	; 0x07
     9fe:	d1 80       	ldd	r13, Z+1	; 0x01
     a00:	80 81       	ld	r24, Z
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	48 f4       	brcc	.+18     	; 0xa18 <__pack_f+0x2e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e1       	ldi	r26, 0x10	; 16
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 2a       	or	r14, r24
     a10:	f9 2a       	or	r15, r25
     a12:	0a 2b       	or	r16, r26
     a14:	1b 2b       	or	r17, r27
     a16:	a5 c0       	rjmp	.+330    	; 0xb62 <__pack_f+0x178>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__pack_f+0x34>
     a1c:	9f c0       	rjmp	.+318    	; 0xb5c <__pack_f+0x172>
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	21 f4       	brne	.+8      	; 0xa2a <__pack_f+0x40>
     a22:	ee 24       	eor	r14, r14
     a24:	ff 24       	eor	r15, r15
     a26:	87 01       	movw	r16, r14
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <__pack_f+0x4a>
     a2a:	e1 14       	cp	r14, r1
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__pack_f+0x50>
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	96 c0       	rjmp	.+300    	; 0xb66 <__pack_f+0x17c>
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	62 38       	cpi	r22, 0x82	; 130
     a42:	79 07       	cpc	r23, r25
     a44:	0c f0       	brlt	.+2      	; 0xa48 <__pack_f+0x5e>
     a46:	5b c0       	rjmp	.+182    	; 0xafe <__pack_f+0x114>
     a48:	22 e8       	ldi	r18, 0x82	; 130
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	26 1b       	sub	r18, r22
     a4e:	37 0b       	sbc	r19, r23
     a50:	2a 31       	cpi	r18, 0x1A	; 26
     a52:	31 05       	cpc	r19, r1
     a54:	2c f0       	brlt	.+10     	; 0xa60 <__pack_f+0x76>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	2a c0       	rjmp	.+84     	; 0xab4 <__pack_f+0xca>
     a60:	b8 01       	movw	r22, r16
     a62:	a7 01       	movw	r20, r14
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0x86>
     a68:	76 95       	lsr	r23
     a6a:	67 95       	ror	r22
     a6c:	57 95       	ror	r21
     a6e:	47 95       	ror	r20
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__pack_f+0x7e>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__pack_f+0x9c>
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	2a 95       	dec	r18
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__pack_f+0x94>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	a1 09       	sbc	r26, r1
     a8e:	b1 09       	sbc	r27, r1
     a90:	8e 21       	and	r24, r14
     a92:	9f 21       	and	r25, r15
     a94:	a0 23       	and	r26, r16
     a96:	b1 23       	and	r27, r17
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 05       	cpc	r26, r1
     a9c:	b1 05       	cpc	r27, r1
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <__pack_f+0xbe>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	9a 01       	movw	r18, r20
     aaa:	ab 01       	movw	r20, r22
     aac:	28 2b       	or	r18, r24
     aae:	39 2b       	or	r19, r25
     ab0:	4a 2b       	or	r20, r26
     ab2:	5b 2b       	or	r21, r27
     ab4:	da 01       	movw	r26, r20
     ab6:	c9 01       	movw	r24, r18
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	a0 70       	andi	r26, 0x00	; 0
     abe:	b0 70       	andi	r27, 0x00	; 0
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__pack_f+0xee>
     aca:	27 ff       	sbrs	r18, 7
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__pack_f+0xf6>
     ace:	20 5c       	subi	r18, 0xC0	; 192
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	4f 4f       	sbci	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__pack_f+0xf6>
     ad8:	21 5c       	subi	r18, 0xC1	; 193
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	3a 07       	cpc	r19, r26
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	4a 07       	cpc	r20, r26
     aee:	a0 e4       	ldi	r26, 0x40	; 64
     af0:	5a 07       	cpc	r21, r26
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <__pack_f+0x10e>
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	79 01       	movw	r14, r18
     afa:	8a 01       	movw	r16, r20
     afc:	27 c0       	rjmp	.+78     	; 0xb4c <__pack_f+0x162>
     afe:	60 38       	cpi	r22, 0x80	; 128
     b00:	71 05       	cpc	r23, r1
     b02:	64 f5       	brge	.+88     	; 0xb5c <__pack_f+0x172>
     b04:	fb 01       	movw	r30, r22
     b06:	e1 58       	subi	r30, 0x81	; 129
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	d8 01       	movw	r26, r16
     b0c:	c7 01       	movw	r24, r14
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	90 70       	andi	r25, 0x00	; 0
     b12:	a0 70       	andi	r26, 0x00	; 0
     b14:	b0 70       	andi	r27, 0x00	; 0
     b16:	80 34       	cpi	r24, 0x40	; 64
     b18:	91 05       	cpc	r25, r1
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__pack_f+0x144>
     b20:	e7 fe       	sbrs	r14, 7
     b22:	0d c0       	rjmp	.+26     	; 0xb3e <__pack_f+0x154>
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__pack_f+0x14c>
     b2e:	8f e3       	ldi	r24, 0x3F	; 63
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e8 0e       	add	r14, r24
     b38:	f9 1e       	adc	r15, r25
     b3a:	0a 1f       	adc	r16, r26
     b3c:	1b 1f       	adc	r17, r27
     b3e:	17 ff       	sbrs	r17, 7
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__pack_f+0x162>
     b42:	16 95       	lsr	r17
     b44:	07 95       	ror	r16
     b46:	f7 94       	ror	r15
     b48:	e7 94       	ror	r14
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	16 95       	lsr	r17
     b50:	07 95       	ror	r16
     b52:	f7 94       	ror	r15
     b54:	e7 94       	ror	r14
     b56:	8a 95       	dec	r24
     b58:	d1 f7       	brne	.-12     	; 0xb4e <__pack_f+0x164>
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <__pack_f+0x17c>
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	87 01       	movw	r16, r14
     b62:	ef ef       	ldi	r30, 0xFF	; 255
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	6e 2f       	mov	r22, r30
     b68:	67 95       	ror	r22
     b6a:	66 27       	eor	r22, r22
     b6c:	67 95       	ror	r22
     b6e:	90 2f       	mov	r25, r16
     b70:	9f 77       	andi	r25, 0x7F	; 127
     b72:	d7 94       	ror	r13
     b74:	dd 24       	eor	r13, r13
     b76:	d7 94       	ror	r13
     b78:	8e 2f       	mov	r24, r30
     b7a:	86 95       	lsr	r24
     b7c:	49 2f       	mov	r20, r25
     b7e:	46 2b       	or	r20, r22
     b80:	58 2f       	mov	r21, r24
     b82:	5d 29       	or	r21, r13
     b84:	b7 01       	movw	r22, r14
     b86:	ca 01       	movw	r24, r20
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <__unpack_f>:
     b94:	fc 01       	movw	r30, r24
     b96:	db 01       	movw	r26, r22
     b98:	40 81       	ld	r20, Z
     b9a:	51 81       	ldd	r21, Z+1	; 0x01
     b9c:	22 81       	ldd	r18, Z+2	; 0x02
     b9e:	62 2f       	mov	r22, r18
     ba0:	6f 77       	andi	r22, 0x7F	; 127
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	22 1f       	adc	r18, r18
     ba6:	22 27       	eor	r18, r18
     ba8:	22 1f       	adc	r18, r18
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	89 2f       	mov	r24, r25
     bae:	88 0f       	add	r24, r24
     bb0:	82 2b       	or	r24, r18
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	99 1f       	adc	r25, r25
     bb8:	99 27       	eor	r25, r25
     bba:	99 1f       	adc	r25, r25
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	11 97       	sbiw	r26, 0x01	; 1
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	a9 f5       	brne	.+106    	; 0xc32 <__unpack_f+0x9e>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <__unpack_f+0x42>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	37 c0       	rjmp	.+110    	; 0xc44 <__unpack_f+0xb0>
     bd6:	82 e8       	ldi	r24, 0x82	; 130
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	9c 93       	st	X, r25
     bde:	8e 93       	st	-X, r24
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	9a 01       	movw	r18, r20
     be4:	ab 01       	movw	r20, r22
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	6a 95       	dec	r22
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__unpack_f+0x54>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	8c 93       	st	X, r24
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__unpack_f+0x80>
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	44 1f       	adc	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 93       	st	X, r25
     c10:	8e 93       	st	-X, r24
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	20 30       	cpi	r18, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	38 07       	cpc	r19, r24
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	48 07       	cpc	r20, r24
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	58 07       	cpc	r21, r24
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__unpack_f+0x66>
     c24:	14 96       	adiw	r26, 0x04	; 4
     c26:	2d 93       	st	X+, r18
     c28:	3d 93       	st	X+, r19
     c2a:	4d 93       	st	X+, r20
     c2c:	5c 93       	st	X, r21
     c2e:	17 97       	sbiw	r26, 0x07	; 7
     c30:	08 95       	ret
     c32:	2f 3f       	cpi	r18, 0xFF	; 255
     c34:	31 05       	cpc	r19, r1
     c36:	79 f4       	brne	.+30     	; 0xc56 <__unpack_f+0xc2>
     c38:	41 15       	cp	r20, r1
     c3a:	51 05       	cpc	r21, r1
     c3c:	61 05       	cpc	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	19 f4       	brne	.+6      	; 0xc48 <__unpack_f+0xb4>
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	08 95       	ret
     c48:	64 ff       	sbrs	r22, 4
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <__unpack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	8c 93       	st	X, r24
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <__unpack_f+0xe2>
     c52:	1c 92       	st	X, r1
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <__unpack_f+0xe2>
     c56:	2f 57       	subi	r18, 0x7F	; 127
     c58:	30 40       	sbci	r19, 0x00	; 0
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	3c 93       	st	X, r19
     c5e:	2e 93       	st	-X, r18
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	8c 93       	st	X, r24
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	8a 95       	dec	r24
     c72:	d1 f7       	brne	.-12     	; 0xc68 <__unpack_f+0xd4>
     c74:	70 64       	ori	r23, 0x40	; 64
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	4d 93       	st	X+, r20
     c7a:	5d 93       	st	X+, r21
     c7c:	6d 93       	st	X+, r22
     c7e:	7c 93       	st	X, r23
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	08 95       	ret

00000c84 <__fpcmp_parts_f>:
     c84:	1f 93       	push	r17
     c86:	dc 01       	movw	r26, r24
     c88:	fb 01       	movw	r30, r22
     c8a:	9c 91       	ld	r25, X
     c8c:	92 30       	cpi	r25, 0x02	; 2
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <__fpcmp_parts_f+0xe>
     c90:	47 c0       	rjmp	.+142    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c92:	80 81       	ld	r24, Z
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__fpcmp_parts_f+0x16>
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c9a:	94 30       	cpi	r25, 0x04	; 4
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <__fpcmp_parts_f+0x2e>
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	1c 91       	ld	r17, X
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	99 f5       	brne	.+102    	; 0xd0c <__fpcmp_parts_f+0x88>
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	68 2f       	mov	r22, r24
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	61 1b       	sub	r22, r17
     cae:	71 09       	sbc	r23, r1
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <__fpcmp_parts_f+0xac>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__fpcmp_parts_f+0x3a>
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__fpcmp_parts_f+0x42>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	b9 f1       	breq	.+110    	; 0xd2c <__fpcmp_parts_f+0xa8>
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	89 f1       	breq	.+98     	; 0xd26 <__fpcmp_parts_f+0xa2>
     cc4:	2d c0       	rjmp	.+90     	; 0xd20 <__fpcmp_parts_f+0x9c>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 91       	ld	r17, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	f1 f0       	breq	.+60     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	18 17       	cp	r17, r24
     cd4:	d9 f4       	brne	.+54     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	94 f0       	brlt	.+36     	; 0xd0c <__fpcmp_parts_f+0x88>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	bc f0       	brlt	.+46     	; 0xd1c <__fpcmp_parts_f+0x98>
     cee:	14 96       	adiw	r26, 0x04	; 4
     cf0:	8d 91       	ld	r24, X+
     cf2:	9d 91       	ld	r25, X+
     cf4:	0d 90       	ld	r0, X+
     cf6:	bc 91       	ld	r27, X
     cf8:	a0 2d       	mov	r26, r0
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	46 81       	ldd	r20, Z+6	; 0x06
     d00:	57 81       	ldd	r21, Z+7	; 0x07
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	4a 07       	cpc	r20, r26
     d08:	5b 07       	cpc	r21, r27
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <__fpcmp_parts_f+0x8e>
     d0c:	11 23       	and	r17, r17
     d0e:	41 f0       	breq	.+16     	; 0xd20 <__fpcmp_parts_f+0x9c>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <__fpcmp_parts_f+0xa2>
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	a4 07       	cpc	r26, r20
     d18:	b5 07       	cpc	r27, r21
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fpcmp_parts_f+0xa8>
     d1c:	11 23       	and	r17, r17
     d1e:	19 f0       	breq	.+6      	; 0xd26 <__fpcmp_parts_f+0xa2>
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <__fpcmp_parts_f+0xac>
     d26:	6f ef       	ldi	r22, 0xFF	; 255
     d28:	7f ef       	ldi	r23, 0xFF	; 255
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <__fpcmp_parts_f+0xac>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	cb 01       	movw	r24, r22
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
     d3e:	78 94       	sei
}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
     d4e:	f8 94       	cli

     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <EXTI_enu_Initialization+0x6>
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
     d64:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
     d66:	19 82       	std	Y+1, r1	; 0x01
     d68:	3b c0       	rjmp	.+118    	; 0xde0 <EXTI_enu_Initialization+0x8a>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	c9 01       	movw	r24, r18
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	82 0f       	add	r24, r18
     d78:	93 1f       	adc	r25, r19
     d7a:	fc 01       	movw	r30, r24
     d7c:	e6 58       	subi	r30, 0x86	; 134
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	40 81       	ld	r20, Z
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	c9 01       	movw	r24, r18
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	82 0f       	add	r24, r18
     d90:	93 1f       	adc	r25, r19
     d92:	fc 01       	movw	r30, r24
     d94:	e5 58       	subi	r30, 0x85	; 133
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	90 81       	ld	r25, Z
     d9a:	84 2f       	mov	r24, r20
     d9c:	69 2f       	mov	r22, r25
     d9e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	c9 01       	movw	r24, r18
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	fc 01       	movw	r30, r24
     db4:	e6 58       	subi	r30, 0x86	; 134
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	40 81       	ld	r20, Z
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	c9 01       	movw	r24, r18
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	82 0f       	add	r24, r18
     dc8:	93 1f       	adc	r25, r19
     dca:	fc 01       	movw	r30, r24
     dcc:	e4 58       	subi	r30, 0x84	; 132
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	90 81       	ld	r25, Z
     dd2:	84 2f       	mov	r24, r20
     dd4:	69 2f       	mov	r22, r25
     dd6:	0e 94 cc 08 	call	0x1198	; 0x1198 <enu_SetSenseLevel>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	90 91 79 01 	lds	r25, 0x0179
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	89 17       	cp	r24, r25
     de8:	08 f4       	brcc	.+2      	; 0xdec <EXTI_enu_Initialization+0x96>
     dea:	bf cf       	rjmp	.-130    	; 0xd6a <EXTI_enu_Initialization+0x14>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    }
    
    Local_u8_ErrorFlag = ES_OK;
     dec:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <EXTI_enu_ISC+0x6>
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	8a 83       	std	Y+2, r24	; 0x02
     e08:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	6b 81       	ldd	r22, Y+3	; 0x03
     e12:	0e 94 cc 08 	call	0x1198	; 0x1198 <enu_SetSenseLevel>
     e16:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <EXTI_enu_INTMode+0x6>
     e2c:	0f 92       	push	r0
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	6b 81       	ldd	r22, Y+3	; 0x03
     e3e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <enu_SetMode>
     e42:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <EXTI_enu_GetPIF+0x6>
     e58:	00 d0       	rcall	.+0      	; 0xe5a <EXTI_enu_GetPIF+0x8>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <EXTI_enu_GetPIF+0xa>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	8a 83       	std	Y+2, r24	; 0x02
     e62:	7c 83       	std	Y+4, r23	; 0x04
     e64:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	d1 f1       	breq	.+116    	; 0xee6 <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	3e 83       	std	Y+6, r19	; 0x06
     e7a:	2d 83       	std	Y+5, r18	; 0x05
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	91 05       	cpc	r25, r1
     e84:	b1 f0       	breq	.+44     	; 0xeb2 <EXTI_enu_GetPIF+0x60>
     e86:	2d 81       	ldd	r18, Y+5	; 0x05
     e88:	3e 81       	ldd	r19, Y+6	; 0x06
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	31 05       	cpc	r19, r1
     e8e:	e1 f0       	breq	.+56     	; 0xec8 <EXTI_enu_GetPIF+0x76>
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
     e92:	9e 81       	ldd	r25, Y+6	; 0x06
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	21 f5       	brne	.+72     	; 0xee0 <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
     e98:	ea e5       	ldi	r30, 0x5A	; 90
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	82 95       	swap	r24
     ea0:	86 95       	lsr	r24
     ea2:	86 95       	lsr	r24
     ea4:	83 70       	andi	r24, 0x03	; 3
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	eb 81       	ldd	r30, Y+3	; 0x03
     eaa:	fc 81       	ldd	r31, Y+4	; 0x04
     eac:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     eae:	19 82       	std	Y+1, r1	; 0x01
     eb0:	1c c0       	rjmp	.+56     	; 0xeea <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
     eb2:	ea e5       	ldi	r30, 0x5A	; 90
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 1f       	adc	r24, r24
     eba:	88 27       	eor	r24, r24
     ebc:	88 1f       	adc	r24, r24
     ebe:	eb 81       	ldd	r30, Y+3	; 0x03
     ec0:	fc 81       	ldd	r31, Y+4	; 0x04
     ec2:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     ec4:	19 82       	std	Y+1, r1	; 0x01
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
     ec8:	ea e5       	ldi	r30, 0x5A	; 90
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	82 95       	swap	r24
     ed0:	86 95       	lsr	r24
     ed2:	87 70       	andi	r24, 0x07	; 7
     ed4:	81 70       	andi	r24, 0x01	; 1
     ed6:	eb 81       	ldd	r30, Y+3	; 0x03
     ed8:	fc 81       	ldd	r31, Y+4	; 0x04
     eda:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     edc:	19 82       	std	Y+1, r1	; 0x01
     ede:	05 c0       	rjmp	.+10     	; 0xeea <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
     eea:	89 81       	ldd	r24, Y+1	; 0x01
}
     eec:	26 96       	adiw	r28, 0x06	; 6
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <EXTI_enu_SeTPIF>:

extern ErrorState_t EXTI_enu_SeTPIF (u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <EXTI_enu_SeTPIF+0x6>
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	8a 83       	std	Y+2, r24	; 0x02
     f0c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, Copy_u8_Value);
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	6b 81       	ldd	r22, Y+3	; 0x03
     f16:	0e 94 73 09 	call	0x12e6	; 0x12e6 <enu_SetFlagValue>
     f1a:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void))
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <EXTI_enu_SetCallBack+0x6>
     f30:	00 d0       	rcall	.+0      	; 0xf32 <EXTI_enu_SetCallBack+0x8>
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	8a 83       	std	Y+2, r24	; 0x02
     f38:	7c 83       	std	Y+4, r23	; 0x04
     f3a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	61 f0       	breq	.+24     	; 0xf60 <EXTI_enu_SetCallBack+0x36>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	fc 01       	movw	r30, r24
     f54:	e2 54       	subi	r30, 0x42	; 66
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	9c 81       	ldd	r25, Y+4	; 0x04
     f5c:	91 83       	std	Z+1, r25	; 0x01
     f5e:	80 83       	st	Z, r24
    }

    return Local_u8_ErrorFlag;
     f60:	89 81       	ldd	r24, Y+1	; 0x01
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
     f9a:	80 91 be 01 	lds	r24, 0x01BE
     f9e:	90 91 bf 01 	lds	r25, 0x01BF
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	29 f0       	breq	.+10     	; 0xfb0 <__vector_1+0x40>
    {
        pfun_ISRPointers[EXTI_INT0] ();
     fa6:	e0 91 be 01 	lds	r30, 0x01BE
     faa:	f0 91 bf 01 	lds	r31, 0x01BF
     fae:	09 95       	icall
    }
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_2>:
//INT1
void __vector_2 (void)
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	2f 93       	push	r18
     fe2:	3f 93       	push	r19
     fe4:	4f 93       	push	r20
     fe6:	5f 93       	push	r21
     fe8:	6f 93       	push	r22
     fea:	7f 93       	push	r23
     fec:	8f 93       	push	r24
     fee:	9f 93       	push	r25
     ff0:	af 93       	push	r26
     ff2:	bf 93       	push	r27
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
    1000:	80 91 c0 01 	lds	r24, 0x01C0
    1004:	90 91 c1 01 	lds	r25, 0x01C1
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	29 f0       	breq	.+10     	; 0x1016 <__vector_2+0x40>
    {
        pfun_ISRPointers[EXTI_INT1] ();
    100c:	e0 91 c0 01 	lds	r30, 0x01C0
    1010:	f0 91 c1 01 	lds	r31, 0x01C1
    1014:	09 95       	icall
    }
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	ff 91       	pop	r31
    101c:	ef 91       	pop	r30
    101e:	bf 91       	pop	r27
    1020:	af 91       	pop	r26
    1022:	9f 91       	pop	r25
    1024:	8f 91       	pop	r24
    1026:	7f 91       	pop	r23
    1028:	6f 91       	pop	r22
    102a:	5f 91       	pop	r21
    102c:	4f 91       	pop	r20
    102e:	3f 91       	pop	r19
    1030:	2f 91       	pop	r18
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	0f 90       	pop	r0
    1038:	1f 90       	pop	r1
    103a:	18 95       	reti

0000103c <__vector_3>:
//INT2
void __vector_3 (void)
{
    103c:	1f 92       	push	r1
    103e:	0f 92       	push	r0
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	0f 92       	push	r0
    1044:	11 24       	eor	r1, r1
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
    1066:	80 91 c2 01 	lds	r24, 0x01C2
    106a:	90 91 c3 01 	lds	r25, 0x01C3
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	29 f0       	breq	.+10     	; 0x107c <__vector_3+0x40>
    {
        pfun_ISRPointers[EXTI_INT2] ();
    1072:	e0 91 c2 01 	lds	r30, 0x01C2
    1076:	f0 91 c3 01 	lds	r31, 0x01C3
    107a:	09 95       	icall
    }
    
}
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	7f 91       	pop	r23
    108e:	6f 91       	pop	r22
    1090:	5f 91       	pop	r21
    1092:	4f 91       	pop	r20
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	0f 90       	pop	r0
    109e:	1f 90       	pop	r1
    10a0:	18 95       	reti

000010a2 <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <enu_SetMode+0x6>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <enu_SetMode+0x8>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	8a 83       	std	Y+2, r24	; 0x02
    10b2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	3d 83       	std	Y+5, r19	; 0x05
    10c0:	2c 83       	std	Y+4, r18	; 0x04
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	91 05       	cpc	r25, r1
    10ca:	29 f1       	breq	.+74     	; 0x1116 <enu_SetMode+0x74>
    10cc:	2c 81       	ldd	r18, Y+4	; 0x04
    10ce:	3d 81       	ldd	r19, Y+5	; 0x05
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	d9 f1       	breq	.+118    	; 0x114c <enu_SetMode+0xaa>
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <enu_SetMode+0x3e>
    10de:	51 c0       	rjmp	.+162    	; 0x1182 <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	49 f4       	brne	.+18     	; 0x10f8 <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
    10e6:	ab e5       	ldi	r26, 0x5B	; 91
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	eb e5       	ldi	r30, 0x5B	; 91
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 64       	ori	r24, 0x40	; 64
    10f2:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    10f4:	19 82       	std	Y+1, r1	; 0x01
    10f6:	47 c0       	rjmp	.+142    	; 0x1186 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 23       	and	r24, r24
    10fc:	49 f4       	brne	.+18     	; 0x1110 <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
    10fe:	ab e5       	ldi	r26, 0x5B	; 91
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	eb e5       	ldi	r30, 0x5B	; 91
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7b       	andi	r24, 0xBF	; 191
    110a:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    110c:	19 82       	std	Y+1, r1	; 0x01
    110e:	3b c0       	rjmp	.+118    	; 0x1186 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	38 c0       	rjmp	.+112    	; 0x1186 <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	49 f4       	brne	.+18     	; 0x112e <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
    111c:	ab e5       	ldi	r26, 0x5B	; 91
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	eb e5       	ldi	r30, 0x5B	; 91
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	80 68       	ori	r24, 0x80	; 128
    1128:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    112a:	19 82       	std	Y+1, r1	; 0x01
    112c:	2c c0       	rjmp	.+88     	; 0x1186 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	88 23       	and	r24, r24
    1132:	49 f4       	brne	.+18     	; 0x1146 <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
    1134:	ab e5       	ldi	r26, 0x5B	; 91
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	eb e5       	ldi	r30, 0x5B	; 91
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8f 77       	andi	r24, 0x7F	; 127
    1140:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1142:	19 82       	std	Y+1, r1	; 0x01
    1144:	20 c0       	rjmp	.+64     	; 0x1186 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	1d c0       	rjmp	.+58     	; 0x1186 <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	49 f4       	brne	.+18     	; 0x1164 <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
    1152:	ab e5       	ldi	r26, 0x5B	; 91
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	eb e5       	ldi	r30, 0x5B	; 91
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	80 62       	ori	r24, 0x20	; 32
    115e:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1160:	19 82       	std	Y+1, r1	; 0x01
    1162:	11 c0       	rjmp	.+34     	; 0x1186 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 23       	and	r24, r24
    1168:	49 f4       	brne	.+18     	; 0x117c <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
    116a:	ab e5       	ldi	r26, 0x5B	; 91
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb e5       	ldi	r30, 0x5B	; 91
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8f 7d       	andi	r24, 0xDF	; 223
    1176:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1178:	19 82       	std	Y+1, r1	; 0x01
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    1186:	89 81       	ldd	r24, Y+1	; 0x01
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <enu_SetSenseLevel+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <enu_SetSenseLevel+0x8>
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	8a 83       	std	Y+2, r24	; 0x02
    11a8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3d 83       	std	Y+5, r19	; 0x05
    11b6:	2c 83       	std	Y+4, r18	; 0x04
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	91 05       	cpc	r25, r1
    11c0:	e9 f1       	breq	.+122    	; 0x123c <enu_SetSenseLevel+0xa4>
    11c2:	2c 81       	ldd	r18, Y+4	; 0x04
    11c4:	3d 81       	ldd	r19, Y+5	; 0x05
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <enu_SetSenseLevel+0x36>
    11cc:	69 c0       	rjmp	.+210    	; 0x12a0 <enu_SetSenseLevel+0x108>
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <enu_SetSenseLevel+0x40>
    11d6:	7c c0       	rjmp	.+248    	; 0x12d0 <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
    11d8:	a5 e5       	ldi	r26, 0x55	; 85
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e5 e5       	ldi	r30, 0x55	; 85
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8c 7f       	andi	r24, 0xFC	; 252
    11e4:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	88 23       	and	r24, r24
    11ea:	11 f4       	brne	.+4      	; 0x11f0 <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    11ec:	19 82       	std	Y+1, r1	; 0x01
    11ee:	72 c0       	rjmp	.+228    	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	49 f4       	brne	.+18     	; 0x1208 <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
    11f6:	a5 e5       	ldi	r26, 0x55	; 85
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e5       	ldi	r30, 0x55	; 85
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	81 60       	ori	r24, 0x01	; 1
    1202:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1204:	19 82       	std	Y+1, r1	; 0x01
    1206:	66 c0       	rjmp	.+204    	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	82 30       	cpi	r24, 0x02	; 2
    120c:	41 f4       	brne	.+16     	; 0x121e <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
    120e:	a5 e5       	ldi	r26, 0x55	; 85
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e5 e5       	ldi	r30, 0x55	; 85
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	82 60       	ori	r24, 0x02	; 2
    121a:	8c 93       	st	X, r24
    121c:	5b c0       	rjmp	.+182    	; 0x12d4 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	49 f4       	brne	.+18     	; 0x1236 <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
    1224:	a5 e5       	ldi	r26, 0x55	; 85
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e5 e5       	ldi	r30, 0x55	; 85
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	83 60       	ori	r24, 0x03	; 3
    1230:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1232:	19 82       	std	Y+1, r1	; 0x01
    1234:	4f c0       	rjmp	.+158    	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	4c c0       	rjmp	.+152    	; 0x12d4 <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
    123c:	a5 e5       	ldi	r26, 0x55	; 85
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e5 e5       	ldi	r30, 0x55	; 85
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	83 7f       	andi	r24, 0xF3	; 243
    1248:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 23       	and	r24, r24
    124e:	11 f4       	brne	.+4      	; 0x1254 <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    1250:	19 82       	std	Y+1, r1	; 0x01
    1252:	40 c0       	rjmp	.+128    	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	49 f4       	brne	.+18     	; 0x126c <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
    125a:	a5 e5       	ldi	r26, 0x55	; 85
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e5 e5       	ldi	r30, 0x55	; 85
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	84 60       	ori	r24, 0x04	; 4
    1266:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1268:	19 82       	std	Y+1, r1	; 0x01
    126a:	34 c0       	rjmp	.+104    	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	41 f4       	brne	.+16     	; 0x1282 <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
    1272:	a5 e5       	ldi	r26, 0x55	; 85
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e5 e5       	ldi	r30, 0x55	; 85
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	88 60       	ori	r24, 0x08	; 8
    127e:	8c 93       	st	X, r24
    1280:	29 c0       	rjmp	.+82     	; 0x12d4 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	49 f4       	brne	.+18     	; 0x129a <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
    1288:	a5 e5       	ldi	r26, 0x55	; 85
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e5 e5       	ldi	r30, 0x55	; 85
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8c 60       	ori	r24, 0x0C	; 12
    1294:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    1296:	19 82       	std	Y+1, r1	; 0x01
    1298:	1d c0       	rjmp	.+58     	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	1a c0       	rjmp	.+52     	; 0x12d4 <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	49 f4       	brne	.+18     	; 0x12b8 <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
    12a6:	a4 e5       	ldi	r26, 0x54	; 84
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e4 e5       	ldi	r30, 0x54	; 84
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 7b       	andi	r24, 0xBF	; 191
    12b2:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    12b4:	19 82       	std	Y+1, r1	; 0x01
    12b6:	0e c0       	rjmp	.+28     	; 0x12d4 <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	59 f4       	brne	.+22     	; 0x12d4 <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
    12be:	a4 e5       	ldi	r26, 0x54	; 84
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e4 e5       	ldi	r30, 0x54	; 84
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 64       	ori	r24, 0x40	; 64
    12ca:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    12cc:	19 82       	std	Y+1, r1	; 0x01
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <enu_SetFlagValue+0x6>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <enu_SetFlagValue+0x8>
    12ee:	0f 92       	push	r0
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	3d 83       	std	Y+5, r19	; 0x05
    1304:	2c 83       	std	Y+4, r18	; 0x04
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	91 05       	cpc	r25, r1
    130e:	29 f1       	breq	.+74     	; 0x135a <enu_SetFlagValue+0x74>
    1310:	2c 81       	ldd	r18, Y+4	; 0x04
    1312:	3d 81       	ldd	r19, Y+5	; 0x05
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	d9 f1       	breq	.+118    	; 0x1390 <enu_SetFlagValue+0xaa>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	09 f0       	breq	.+2      	; 0x1324 <enu_SetFlagValue+0x3e>
    1322:	51 c0       	rjmp	.+162    	; 0x13c6 <enu_SetFlagValue+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	49 f4       	brne	.+18     	; 0x133c <enu_SetFlagValue+0x56>
            {
                GIFR |= ( 1 << GIFR_INTF0);
    132a:	aa e5       	ldi	r26, 0x5A	; 90
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	ea e5       	ldi	r30, 0x5A	; 90
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	80 64       	ori	r24, 0x40	; 64
    1336:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1338:	19 82       	std	Y+1, r1	; 0x01
    133a:	47 c0       	rjmp	.+142    	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	88 23       	and	r24, r24
    1340:	49 f4       	brne	.+18     	; 0x1354 <enu_SetFlagValue+0x6e>
            {
                GIFR &= ~( 1 << GIFR_INTF0);
    1342:	aa e5       	ldi	r26, 0x5A	; 90
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	ea e5       	ldi	r30, 0x5A	; 90
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8f 7b       	andi	r24, 0xBF	; 191
    134e:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1350:	19 82       	std	Y+1, r1	; 0x01
    1352:	3b c0       	rjmp	.+118    	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	38 c0       	rjmp	.+112    	; 0x13ca <enu_SetFlagValue+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	49 f4       	brne	.+18     	; 0x1372 <enu_SetFlagValue+0x8c>
            {
                GIFR |= ( 1 << GIFR_INTF1);
    1360:	aa e5       	ldi	r26, 0x5A	; 90
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ea e5       	ldi	r30, 0x5A	; 90
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	80 68       	ori	r24, 0x80	; 128
    136c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    136e:	19 82       	std	Y+1, r1	; 0x01
    1370:	2c c0       	rjmp	.+88     	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	88 23       	and	r24, r24
    1376:	49 f4       	brne	.+18     	; 0x138a <enu_SetFlagValue+0xa4>
            {
                GIFR &= ~( 1 << GIFR_INTF1);
    1378:	aa e5       	ldi	r26, 0x5A	; 90
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ea e5       	ldi	r30, 0x5A	; 90
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8f 77       	andi	r24, 0x7F	; 127
    1384:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1386:	19 82       	std	Y+1, r1	; 0x01
    1388:	20 c0       	rjmp	.+64     	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	1d c0       	rjmp	.+58     	; 0x13ca <enu_SetFlagValue+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	49 f4       	brne	.+18     	; 0x13a8 <enu_SetFlagValue+0xc2>
            {
                GIFR |= ( 1 << GIFR_INTF2);
    1396:	aa e5       	ldi	r26, 0x5A	; 90
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ea e5       	ldi	r30, 0x5A	; 90
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 62       	ori	r24, 0x20	; 32
    13a2:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	11 c0       	rjmp	.+34     	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	88 23       	and	r24, r24
    13ac:	49 f4       	brne	.+18     	; 0x13c0 <enu_SetFlagValue+0xda>
            {
                GIFR &= ~( 1 << GIFR_INTF2);
    13ae:	aa e5       	ldi	r26, 0x5A	; 90
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	ea e5       	ldi	r30, 0x5A	; 90
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8f 7d       	andi	r24, 0xDF	; 223
    13ba:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    13bc:	19 82       	std	Y+1, r1	; 0x01
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <enu_SetFlagValue+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	0f 92       	push	r0
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    13ea:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <DIO_enu_SetPinDiretion+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <DIO_enu_SetPinDiretion+0x8>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <DIO_enu_SetPinDiretion+0xa>
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	8a 83       	std	Y+2, r24	; 0x02
    1406:	6b 83       	std	Y+3, r22	; 0x03
    1408:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	08 f0       	brcs	.+2      	; 0x1416 <DIO_enu_SetPinDiretion+0x20>
    1414:	d0 c0       	rjmp	.+416    	; 0x15b6 <DIO_enu_SetPinDiretion+0x1c0>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 30       	cpi	r24, 0x08	; 8
    141a:	08 f0       	brcs	.+2      	; 0x141e <DIO_enu_SetPinDiretion+0x28>
    141c:	cc c0       	rjmp	.+408    	; 0x15b6 <DIO_enu_SetPinDiretion+0x1c0>
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	08 f0       	brcs	.+2      	; 0x1426 <DIO_enu_SetPinDiretion+0x30>
    1424:	c8 c0       	rjmp	.+400    	; 0x15b6 <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3e 83       	std	Y+6, r19	; 0x06
    142e:	2d 83       	std	Y+5, r18	; 0x05
    1430:	6d 81       	ldd	r22, Y+5	; 0x05
    1432:	7e 81       	ldd	r23, Y+6	; 0x06
    1434:	61 30       	cpi	r22, 0x01	; 1
    1436:	71 05       	cpc	r23, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <DIO_enu_SetPinDiretion+0x46>
    143a:	41 c0       	rjmp	.+130    	; 0x14be <DIO_enu_SetPinDiretion+0xc8>
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	9e 81       	ldd	r25, Y+6	; 0x06
    1440:	82 30       	cpi	r24, 0x02	; 2
    1442:	91 05       	cpc	r25, r1
    1444:	34 f4       	brge	.+12     	; 0x1452 <DIO_enu_SetPinDiretion+0x5c>
    1446:	2d 81       	ldd	r18, Y+5	; 0x05
    1448:	3e 81       	ldd	r19, Y+6	; 0x06
    144a:	21 15       	cp	r18, r1
    144c:	31 05       	cpc	r19, r1
    144e:	71 f0       	breq	.+28     	; 0x146c <DIO_enu_SetPinDiretion+0x76>
    1450:	b0 c0       	rjmp	.+352    	; 0x15b2 <DIO_enu_SetPinDiretion+0x1bc>
    1452:	6d 81       	ldd	r22, Y+5	; 0x05
    1454:	7e 81       	ldd	r23, Y+6	; 0x06
    1456:	62 30       	cpi	r22, 0x02	; 2
    1458:	71 05       	cpc	r23, r1
    145a:	09 f4       	brne	.+2      	; 0x145e <DIO_enu_SetPinDiretion+0x68>
    145c:	59 c0       	rjmp	.+178    	; 0x1510 <DIO_enu_SetPinDiretion+0x11a>
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	91 05       	cpc	r25, r1
    1466:	09 f4       	brne	.+2      	; 0x146a <DIO_enu_SetPinDiretion+0x74>
    1468:	7c c0       	rjmp	.+248    	; 0x1562 <DIO_enu_SetPinDiretion+0x16c>
    146a:	a3 c0       	rjmp	.+326    	; 0x15b2 <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    146c:	aa e3       	ldi	r26, 0x3A	; 58
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ea e3       	ldi	r30, 0x3A	; 58
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_enu_SetPinDiretion+0x92>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	2a 95       	dec	r18
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_enu_SetPinDiretion+0x8e>
    148c:	80 95       	com	r24
    148e:	84 23       	and	r24, r20
    1490:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    1492:	aa e3       	ldi	r26, 0x3A	; 58
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ea e3       	ldi	r30, 0x3A	; 58
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	b9 01       	movw	r22, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_enu_SetPinDiretion+0xbc>
    14ae:	66 0f       	add	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	8a 95       	dec	r24
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <DIO_enu_SetPinDiretion+0xb8>
    14b6:	cb 01       	movw	r24, r22
    14b8:	84 2b       	or	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	7a c0       	rjmp	.+244    	; 0x15b2 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    14be:	a7 e3       	ldi	r26, 0x37	; 55
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e7 e3       	ldi	r30, 0x37	; 55
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <DIO_enu_SetPinDiretion+0xe4>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	2a 95       	dec	r18
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <DIO_enu_SetPinDiretion+0xe0>
    14de:	80 95       	com	r24
    14e0:	84 23       	and	r24, r20
    14e2:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    14e4:	a7 e3       	ldi	r26, 0x37	; 55
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e7 e3       	ldi	r30, 0x37	; 55
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	b9 01       	movw	r22, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_enu_SetPinDiretion+0x10e>
    1500:	66 0f       	add	r22, r22
    1502:	77 1f       	adc	r23, r23
    1504:	8a 95       	dec	r24
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_enu_SetPinDiretion+0x10a>
    1508:	cb 01       	movw	r24, r22
    150a:	84 2b       	or	r24, r20
    150c:	8c 93       	st	X, r24
    150e:	51 c0       	rjmp	.+162    	; 0x15b2 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    1510:	a4 e3       	ldi	r26, 0x34	; 52
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e4 e3       	ldi	r30, 0x34	; 52
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_enu_SetPinDiretion+0x136>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	2a 95       	dec	r18
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_enu_SetPinDiretion+0x132>
    1530:	80 95       	com	r24
    1532:	84 23       	and	r24, r20
    1534:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    1536:	a4 e3       	ldi	r26, 0x34	; 52
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e4 e3       	ldi	r30, 0x34	; 52
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	b9 01       	movw	r22, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_enu_SetPinDiretion+0x160>
    1552:	66 0f       	add	r22, r22
    1554:	77 1f       	adc	r23, r23
    1556:	8a 95       	dec	r24
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_enu_SetPinDiretion+0x15c>
    155a:	cb 01       	movw	r24, r22
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	28 c0       	rjmp	.+80     	; 0x15b2 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    1562:	a1 e3       	ldi	r26, 0x31	; 49
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e1 e3       	ldi	r30, 0x31	; 49
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <DIO_enu_SetPinDiretion+0x188>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	2a 95       	dec	r18
    1580:	e2 f7       	brpl	.-8      	; 0x157a <DIO_enu_SetPinDiretion+0x184>
    1582:	80 95       	com	r24
    1584:	84 23       	and	r24, r20
    1586:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    1588:	a1 e3       	ldi	r26, 0x31	; 49
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e1 e3       	ldi	r30, 0x31	; 49
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	b9 01       	movw	r22, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_enu_SetPinDiretion+0x1b2>
    15a4:	66 0f       	add	r22, r22
    15a6:	77 1f       	adc	r23, r23
    15a8:	8a 95       	dec	r24
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_enu_SetPinDiretion+0x1ae>
    15ac:	cb 01       	movw	r24, r22
    15ae:	84 2b       	or	r24, r20
    15b0:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    15b2:	19 82       	std	Y+1, r1	; 0x01
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    15bc:	26 96       	adiw	r28, 0x06	; 6
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <DIO_enu_SetPinState+0x6>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <DIO_enu_SetPinState+0x8>
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <DIO_enu_SetPinState+0xa>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	8a 83       	std	Y+2, r24	; 0x02
    15de:	6b 83       	std	Y+3, r22	; 0x03
    15e0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	84 30       	cpi	r24, 0x04	; 4
    15ea:	08 f0       	brcs	.+2      	; 0x15ee <DIO_enu_SetPinState+0x20>
    15ec:	d0 c0       	rjmp	.+416    	; 0x178e <DIO_enu_SetPinState+0x1c0>
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	88 30       	cpi	r24, 0x08	; 8
    15f2:	08 f0       	brcs	.+2      	; 0x15f6 <DIO_enu_SetPinState+0x28>
    15f4:	cc c0       	rjmp	.+408    	; 0x178e <DIO_enu_SetPinState+0x1c0>
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	82 30       	cpi	r24, 0x02	; 2
    15fa:	08 f0       	brcs	.+2      	; 0x15fe <DIO_enu_SetPinState+0x30>
    15fc:	c8 c0       	rjmp	.+400    	; 0x178e <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3e 83       	std	Y+6, r19	; 0x06
    1606:	2d 83       	std	Y+5, r18	; 0x05
    1608:	6d 81       	ldd	r22, Y+5	; 0x05
    160a:	7e 81       	ldd	r23, Y+6	; 0x06
    160c:	61 30       	cpi	r22, 0x01	; 1
    160e:	71 05       	cpc	r23, r1
    1610:	09 f4       	brne	.+2      	; 0x1614 <DIO_enu_SetPinState+0x46>
    1612:	41 c0       	rjmp	.+130    	; 0x1696 <DIO_enu_SetPinState+0xc8>
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	91 05       	cpc	r25, r1
    161c:	34 f4       	brge	.+12     	; 0x162a <DIO_enu_SetPinState+0x5c>
    161e:	2d 81       	ldd	r18, Y+5	; 0x05
    1620:	3e 81       	ldd	r19, Y+6	; 0x06
    1622:	21 15       	cp	r18, r1
    1624:	31 05       	cpc	r19, r1
    1626:	71 f0       	breq	.+28     	; 0x1644 <DIO_enu_SetPinState+0x76>
    1628:	b0 c0       	rjmp	.+352    	; 0x178a <DIO_enu_SetPinState+0x1bc>
    162a:	6d 81       	ldd	r22, Y+5	; 0x05
    162c:	7e 81       	ldd	r23, Y+6	; 0x06
    162e:	62 30       	cpi	r22, 0x02	; 2
    1630:	71 05       	cpc	r23, r1
    1632:	09 f4       	brne	.+2      	; 0x1636 <DIO_enu_SetPinState+0x68>
    1634:	59 c0       	rjmp	.+178    	; 0x16e8 <DIO_enu_SetPinState+0x11a>
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	91 05       	cpc	r25, r1
    163e:	09 f4       	brne	.+2      	; 0x1642 <DIO_enu_SetPinState+0x74>
    1640:	7c c0       	rjmp	.+248    	; 0x173a <DIO_enu_SetPinState+0x16c>
    1642:	a3 c0       	rjmp	.+326    	; 0x178a <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    1644:	ab e3       	ldi	r26, 0x3B	; 59
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	eb e3       	ldi	r30, 0x3B	; 59
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <DIO_enu_SetPinState+0x92>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	2a 95       	dec	r18
    1662:	e2 f7       	brpl	.-8      	; 0x165c <DIO_enu_SetPinState+0x8e>
    1664:	80 95       	com	r24
    1666:	84 23       	and	r24, r20
    1668:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    166a:	ab e3       	ldi	r26, 0x3B	; 59
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e3       	ldi	r30, 0x3B	; 59
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	88 2f       	mov	r24, r24
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	b9 01       	movw	r22, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_enu_SetPinState+0xbc>
    1686:	66 0f       	add	r22, r22
    1688:	77 1f       	adc	r23, r23
    168a:	8a 95       	dec	r24
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_enu_SetPinState+0xb8>
    168e:	cb 01       	movw	r24, r22
    1690:	84 2b       	or	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	7a c0       	rjmp	.+244    	; 0x178a <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    1696:	a8 e3       	ldi	r26, 0x38	; 56
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e8 e3       	ldi	r30, 0x38	; 56
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_enu_SetPinState+0xe4>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	2a 95       	dec	r18
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_enu_SetPinState+0xe0>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    16bc:	a8 e3       	ldi	r26, 0x38	; 56
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e8 e3       	ldi	r30, 0x38	; 56
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	88 2f       	mov	r24, r24
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	b9 01       	movw	r22, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_enu_SetPinState+0x10e>
    16d8:	66 0f       	add	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	8a 95       	dec	r24
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_enu_SetPinState+0x10a>
    16e0:	cb 01       	movw	r24, r22
    16e2:	84 2b       	or	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	51 c0       	rjmp	.+162    	; 0x178a <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    16e8:	a5 e3       	ldi	r26, 0x35	; 53
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e5 e3       	ldi	r30, 0x35	; 53
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_enu_SetPinState+0x136>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	2a 95       	dec	r18
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_enu_SetPinState+0x132>
    1708:	80 95       	com	r24
    170a:	84 23       	and	r24, r20
    170c:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    170e:	a5 e3       	ldi	r26, 0x35	; 53
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e5 e3       	ldi	r30, 0x35	; 53
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	b9 01       	movw	r22, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <DIO_enu_SetPinState+0x160>
    172a:	66 0f       	add	r22, r22
    172c:	77 1f       	adc	r23, r23
    172e:	8a 95       	dec	r24
    1730:	e2 f7       	brpl	.-8      	; 0x172a <DIO_enu_SetPinState+0x15c>
    1732:	cb 01       	movw	r24, r22
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	28 c0       	rjmp	.+80     	; 0x178a <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    173a:	a2 e3       	ldi	r26, 0x32	; 50
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e2 e3       	ldi	r30, 0x32	; 50
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <DIO_enu_SetPinState+0x188>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	2a 95       	dec	r18
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <DIO_enu_SetPinState+0x184>
    175a:	80 95       	com	r24
    175c:	84 23       	and	r24, r20
    175e:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1760:	a2 e3       	ldi	r26, 0x32	; 50
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e2 e3       	ldi	r30, 0x32	; 50
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	b9 01       	movw	r22, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_enu_SetPinState+0x1b2>
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	8a 95       	dec	r24
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_enu_SetPinState+0x1ae>
    1784:	cb 01       	movw	r24, r22
    1786:	84 2b       	or	r24, r20
    1788:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    178a:	19 82       	std	Y+1, r1	; 0x01
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1792:	89 81       	ldd	r24, Y+1	; 0x01
}
    1794:	26 96       	adiw	r28, 0x06	; 6
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <DIO_enu_SetPinValue+0x6>
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <DIO_enu_SetPinValue+0x8>
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <DIO_enu_SetPinValue+0xa>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	8a 83       	std	Y+2, r24	; 0x02
    17b6:	6b 83       	std	Y+3, r22	; 0x03
    17b8:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <DIO_enu_SetPinValue+0x20>
    17c4:	db c0       	rjmp	.+438    	; 0x197c <DIO_enu_SetPinValue+0x1d6>
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 30       	cpi	r24, 0x08	; 8
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <DIO_enu_SetPinValue+0x28>
    17cc:	d7 c0       	rjmp	.+430    	; 0x197c <DIO_enu_SetPinValue+0x1d6>
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	82 30       	cpi	r24, 0x02	; 2
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <DIO_enu_SetPinValue+0x30>
    17d4:	d3 c0       	rjmp	.+422    	; 0x197c <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	3e 83       	std	Y+6, r19	; 0x06
    17de:	2d 83       	std	Y+5, r18	; 0x05
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	91 05       	cpc	r25, r1
    17e8:	09 f4       	brne	.+2      	; 0x17ec <DIO_enu_SetPinValue+0x46>
    17ea:	43 c0       	rjmp	.+134    	; 0x1872 <DIO_enu_SetPinValue+0xcc>
    17ec:	2d 81       	ldd	r18, Y+5	; 0x05
    17ee:	3e 81       	ldd	r19, Y+6	; 0x06
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	2c f4       	brge	.+10     	; 0x1800 <DIO_enu_SetPinValue+0x5a>
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	71 f0       	breq	.+28     	; 0x181a <DIO_enu_SetPinValue+0x74>
    17fe:	bc c0       	rjmp	.+376    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
    1800:	2d 81       	ldd	r18, Y+5	; 0x05
    1802:	3e 81       	ldd	r19, Y+6	; 0x06
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	09 f4       	brne	.+2      	; 0x180c <DIO_enu_SetPinValue+0x66>
    180a:	5f c0       	rjmp	.+190    	; 0x18ca <DIO_enu_SetPinValue+0x124>
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	83 30       	cpi	r24, 0x03	; 3
    1812:	91 05       	cpc	r25, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <DIO_enu_SetPinValue+0x72>
    1816:	85 c0       	rjmp	.+266    	; 0x1922 <DIO_enu_SetPinValue+0x17c>
    1818:	af c0       	rjmp	.+350    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	a1 f4       	brne	.+40     	; 0x1848 <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    1820:	ab e3       	ldi	r26, 0x3B	; 59
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	eb e3       	ldi	r30, 0x3B	; 59
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <DIO_enu_SetPinValue+0x98>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <DIO_enu_SetPinValue+0x94>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	98 c0       	rjmp	.+304    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    1848:	ab e3       	ldi	r26, 0x3B	; 59
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	eb e3       	ldi	r30, 0x3B	; 59
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_enu_SetPinValue+0xc0>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_enu_SetPinValue+0xbc>
    186a:	80 95       	com	r24
    186c:	84 23       	and	r24, r20
    186e:	8c 93       	st	X, r24
    1870:	83 c0       	rjmp	.+262    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	a1 f4       	brne	.+40     	; 0x18a0 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    1878:	a8 e3       	ldi	r26, 0x38	; 56
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e8 e3       	ldi	r30, 0x38	; 56
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_enu_SetPinValue+0xf0>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_enu_SetPinValue+0xec>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	6c c0       	rjmp	.+216    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    18a0:	a8 e3       	ldi	r26, 0x38	; 56
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e8 e3       	ldi	r30, 0x38	; 56
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_enu_SetPinValue+0x118>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_enu_SetPinValue+0x114>
    18c2:	80 95       	com	r24
    18c4:	84 23       	and	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	57 c0       	rjmp	.+174    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	a1 f4       	brne	.+40     	; 0x18f8 <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    18d0:	a5 e3       	ldi	r26, 0x35	; 53
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e5 e3       	ldi	r30, 0x35	; 53
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_enu_SetPinValue+0x148>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <DIO_enu_SetPinValue+0x144>
    18f2:	84 2b       	or	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	40 c0       	rjmp	.+128    	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    18f8:	a5 e3       	ldi	r26, 0x35	; 53
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e5 e3       	ldi	r30, 0x35	; 53
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_enu_SetPinValue+0x170>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_enu_SetPinValue+0x16c>
    191a:	80 95       	com	r24
    191c:	84 23       	and	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	2b c0       	rjmp	.+86     	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	a1 f4       	brne	.+40     	; 0x1950 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    1928:	a2 e3       	ldi	r26, 0x32	; 50
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e2 e3       	ldi	r30, 0x32	; 50
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_enu_SetPinValue+0x1a0>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_enu_SetPinValue+0x19c>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    1950:	a2 e3       	ldi	r26, 0x32	; 50
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e2 e3       	ldi	r30, 0x32	; 50
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <DIO_enu_SetPinValue+0x1c8>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <DIO_enu_SetPinValue+0x1c4>
    1972:	80 95       	com	r24
    1974:	84 23       	and	r24, r20
    1976:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1978:	19 82       	std	Y+1, r1	; 0x01
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
}
    1982:	26 96       	adiw	r28, 0x06	; 6
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	00 d0       	rcall	.+0      	; 0x199a <DIO_enu_TogglePinValue+0x6>
    199a:	00 d0       	rcall	.+0      	; 0x199c <DIO_enu_TogglePinValue+0x8>
    199c:	0f 92       	push	r0
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	8a 83       	std	Y+2, r24	; 0x02
    19a4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	84 30       	cpi	r24, 0x04	; 4
    19ae:	08 f0       	brcs	.+2      	; 0x19b2 <DIO_enu_TogglePinValue+0x1e>
    19b0:	73 c0       	rjmp	.+230    	; 0x1a98 <DIO_enu_TogglePinValue+0x104>
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	88 30       	cpi	r24, 0x08	; 8
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <DIO_enu_TogglePinValue+0x26>
    19b8:	6f c0       	rjmp	.+222    	; 0x1a98 <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	3d 83       	std	Y+5, r19	; 0x05
    19c2:	2c 83       	std	Y+4, r18	; 0x04
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	9d 81       	ldd	r25, Y+5	; 0x05
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	91 05       	cpc	r25, r1
    19cc:	49 f1       	breq	.+82     	; 0x1a20 <DIO_enu_TogglePinValue+0x8c>
    19ce:	2c 81       	ldd	r18, Y+4	; 0x04
    19d0:	3d 81       	ldd	r19, Y+5	; 0x05
    19d2:	22 30       	cpi	r18, 0x02	; 2
    19d4:	31 05       	cpc	r19, r1
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <DIO_enu_TogglePinValue+0x4e>
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	61 f0       	breq	.+24     	; 0x19f8 <DIO_enu_TogglePinValue+0x64>
    19e0:	5a c0       	rjmp	.+180    	; 0x1a96 <DIO_enu_TogglePinValue+0x102>
    19e2:	2c 81       	ldd	r18, Y+4	; 0x04
    19e4:	3d 81       	ldd	r19, Y+5	; 0x05
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	71 f1       	breq	.+92     	; 0x1a48 <DIO_enu_TogglePinValue+0xb4>
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	9d 81       	ldd	r25, Y+5	; 0x05
    19f0:	83 30       	cpi	r24, 0x03	; 3
    19f2:	91 05       	cpc	r25, r1
    19f4:	e9 f1       	breq	.+122    	; 0x1a70 <DIO_enu_TogglePinValue+0xdc>
    19f6:	4f c0       	rjmp	.+158    	; 0x1a96 <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    19f8:	ab e3       	ldi	r26, 0x3B	; 59
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	eb e3       	ldi	r30, 0x3B	; 59
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <DIO_enu_TogglePinValue+0x82>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <DIO_enu_TogglePinValue+0x7e>
    1a1a:	84 27       	eor	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	3b c0       	rjmp	.+118    	; 0x1a96 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    1a20:	a8 e3       	ldi	r26, 0x38	; 56
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e8 e3       	ldi	r30, 0x38	; 56
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_enu_TogglePinValue+0xaa>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <DIO_enu_TogglePinValue+0xa6>
    1a42:	84 27       	eor	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	27 c0       	rjmp	.+78     	; 0x1a96 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    1a48:	a5 e3       	ldi	r26, 0x35	; 53
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e5 e3       	ldi	r30, 0x35	; 53
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_enu_TogglePinValue+0xd2>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_enu_TogglePinValue+0xce>
    1a6a:	84 27       	eor	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	13 c0       	rjmp	.+38     	; 0x1a96 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    1a70:	a2 e3       	ldi	r26, 0x32	; 50
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e2 e3       	ldi	r30, 0x32	; 50
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_enu_TogglePinValue+0xfa>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_enu_TogglePinValue+0xf6>
    1a92:	84 27       	eor	r24, r20
    1a94:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1a96:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	27 97       	sbiw	r28, 0x07	; 7
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	8a 83       	std	Y+2, r24	; 0x02
    1ac0:	6b 83       	std	Y+3, r22	; 0x03
    1ac2:	5d 83       	std	Y+5, r21	; 0x05
    1ac4:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    1aca:	8c 81       	ldd	r24, Y+4	; 0x04
    1acc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <DIO_enu_GetPinValue+0x2a>
    1ad2:	7d c0       	rjmp	.+250    	; 0x1bce <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	08 f0       	brcs	.+2      	; 0x1adc <DIO_enu_GetPinValue+0x32>
    1ada:	76 c0       	rjmp	.+236    	; 0x1bc8 <DIO_enu_GetPinValue+0x11e>
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	88 30       	cpi	r24, 0x08	; 8
    1ae0:	08 f0       	brcs	.+2      	; 0x1ae4 <DIO_enu_GetPinValue+0x3a>
    1ae2:	72 c0       	rjmp	.+228    	; 0x1bc8 <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	3f 83       	std	Y+7, r19	; 0x07
    1aec:	2e 83       	std	Y+6, r18	; 0x06
    1aee:	4e 81       	ldd	r20, Y+6	; 0x06
    1af0:	5f 81       	ldd	r21, Y+7	; 0x07
    1af2:	41 30       	cpi	r20, 0x01	; 1
    1af4:	51 05       	cpc	r21, r1
    1af6:	59 f1       	breq	.+86     	; 0x1b4e <DIO_enu_GetPinValue+0xa4>
    1af8:	8e 81       	ldd	r24, Y+6	; 0x06
    1afa:	9f 81       	ldd	r25, Y+7	; 0x07
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	91 05       	cpc	r25, r1
    1b00:	34 f4       	brge	.+12     	; 0x1b0e <DIO_enu_GetPinValue+0x64>
    1b02:	2e 81       	ldd	r18, Y+6	; 0x06
    1b04:	3f 81       	ldd	r19, Y+7	; 0x07
    1b06:	21 15       	cp	r18, r1
    1b08:	31 05       	cpc	r19, r1
    1b0a:	69 f0       	breq	.+26     	; 0x1b26 <DIO_enu_GetPinValue+0x7c>
    1b0c:	5b c0       	rjmp	.+182    	; 0x1bc4 <DIO_enu_GetPinValue+0x11a>
    1b0e:	4e 81       	ldd	r20, Y+6	; 0x06
    1b10:	5f 81       	ldd	r21, Y+7	; 0x07
    1b12:	42 30       	cpi	r20, 0x02	; 2
    1b14:	51 05       	cpc	r21, r1
    1b16:	79 f1       	breq	.+94     	; 0x1b76 <DIO_enu_GetPinValue+0xcc>
    1b18:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1c:	83 30       	cpi	r24, 0x03	; 3
    1b1e:	91 05       	cpc	r25, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <DIO_enu_GetPinValue+0x7a>
    1b22:	3d c0       	rjmp	.+122    	; 0x1b9e <DIO_enu_GetPinValue+0xf4>
    1b24:	4f c0       	rjmp	.+158    	; 0x1bc4 <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    1b26:	e9 e3       	ldi	r30, 0x39	; 57
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a9 01       	movw	r20, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <DIO_enu_GetPinValue+0x94>
    1b3a:	55 95       	asr	r21
    1b3c:	47 95       	ror	r20
    1b3e:	8a 95       	dec	r24
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <DIO_enu_GetPinValue+0x90>
    1b42:	ca 01       	movw	r24, r20
    1b44:	81 70       	andi	r24, 0x01	; 1
    1b46:	ec 81       	ldd	r30, Y+4	; 0x04
    1b48:	fd 81       	ldd	r31, Y+5	; 0x05
    1b4a:	80 83       	st	Z, r24
    1b4c:	3b c0       	rjmp	.+118    	; 0x1bc4 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    1b4e:	e6 e3       	ldi	r30, 0x36	; 54
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a9 01       	movw	r20, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <DIO_enu_GetPinValue+0xbc>
    1b62:	55 95       	asr	r21
    1b64:	47 95       	ror	r20
    1b66:	8a 95       	dec	r24
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <DIO_enu_GetPinValue+0xb8>
    1b6a:	ca 01       	movw	r24, r20
    1b6c:	81 70       	andi	r24, 0x01	; 1
    1b6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1b70:	fd 81       	ldd	r31, Y+5	; 0x05
    1b72:	80 83       	st	Z, r24
    1b74:	27 c0       	rjmp	.+78     	; 0x1bc4 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    1b76:	e3 e3       	ldi	r30, 0x33	; 51
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a9 01       	movw	r20, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <DIO_enu_GetPinValue+0xe4>
    1b8a:	55 95       	asr	r21
    1b8c:	47 95       	ror	r20
    1b8e:	8a 95       	dec	r24
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <DIO_enu_GetPinValue+0xe0>
    1b92:	ca 01       	movw	r24, r20
    1b94:	81 70       	andi	r24, 0x01	; 1
    1b96:	ec 81       	ldd	r30, Y+4	; 0x04
    1b98:	fd 81       	ldd	r31, Y+5	; 0x05
    1b9a:	80 83       	st	Z, r24
    1b9c:	13 c0       	rjmp	.+38     	; 0x1bc4 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    1b9e:	e0 e3       	ldi	r30, 0x30	; 48
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	88 2f       	mov	r24, r24
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	a9 01       	movw	r20, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <DIO_enu_GetPinValue+0x10c>
    1bb2:	55 95       	asr	r21
    1bb4:	47 95       	ror	r20
    1bb6:	8a 95       	dec	r24
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <DIO_enu_GetPinValue+0x108>
    1bba:	ca 01       	movw	r24, r20
    1bbc:	81 70       	andi	r24, 0x01	; 1
    1bbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1bc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1bc2:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    1bc4:	19 82       	std	Y+1, r1	; 0x01
    1bc6:	05 c0       	rjmp	.+10     	; 0x1bd2 <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd4:	27 96       	adiw	r28, 0x07	; 7
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <ADC_enu_Initialization>:
static void* pvid_ISRParameters = NULL;

//APIs implementation

extern ErrorState_t ADC_enu_Initialization(void)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	89 83       	std	Y+1, r24	; 0x01

    //Bits contain 00
    ADMUX &= ~(3 << ADMUX_REFS0 );
    1bf4:	a7 e2       	ldi	r26, 0x27	; 39
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e7 e2       	ldi	r30, 0x27	; 39
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8f 73       	andi	r24, 0x3F	; 63
    1c00:	8c 93       	st	X, r24
        //bITS ALREADY CONTAIN 00  
    
    #elif ADC_V_REFERENCE_SOURCE == ADC_AVCC
       
        //Bits contain 01
        ADMUX |= (1 < ADMUX_REFS0);
    1c02:	a7 e2       	ldi	r26, 0x27	; 39
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e7 e2       	ldi	r30, 0x27	; 39
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	81 60       	ori	r24, 0x01	; 1
    1c0e:	8c 93       	st	X, r24


    //Handling Data adjustment direction
    #if  ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED
        //Setting ADLAR bit
        ADMUX |= ( 1 << ADMUX_ADLAR);
    1c10:	a7 e2       	ldi	r26, 0x27	; 39
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e7 e2       	ldi	r30, 0x27	; 39
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	80 62       	ori	r24, 0x20	; 32
    1c1c:	8c 93       	st	X, r24
        ADCSRA &= ~( 1 << ADCSRA_ADATE);

    #elif  ADC_TRIGGER_SOURCE >= ADC_FREE_RUNNING &&  ADC_TRIGGER_SOURCE <= ADC_TIMER1_CAPTURE_EVENT

        //Clearing ADTS bits
        SFIOR &= (0X1F);
    1c1e:	a0 e5       	ldi	r26, 0x50	; 80
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e0 e5       	ldi	r30, 0x50	; 80
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	8f 71       	andi	r24, 0x1F	; 31
    1c2a:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (ADC_TRIGGER_SOURCE << SFIOR_ADTS0); 
    1c2c:	a0 e5       	ldi	r26, 0x50	; 80
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e0 e5       	ldi	r30, 0x50	; 80
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	8c 93       	st	X, r24
        
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    1c38:	a6 e2       	ldi	r26, 0x26	; 38
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e6 e2       	ldi	r30, 0x26	; 38
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 62       	ori	r24, 0x20	; 32
    1c44:	8c 93       	st	X, r24
    #endif


    //Handling Interrupt Event Status (PIE)
    #if ADC_INT_EVENT_STATUS == ADC_INT_ENABLE
        ADCSRA |= ( 1 << ADCSRA_ADIE); //Bit contains 1 
    1c46:	a6 e2       	ldi	r26, 0x26	; 38
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e6 e2       	ldi	r30, 0x26	; 38
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	88 60       	ori	r24, 0x08	; 8
    1c52:	8c 93       	st	X, r24
    #endif


    //Handling ADC clock speed
    //Clearing PS bits
    ADCSRA &= (0xF8);
    1c54:	a6 e2       	ldi	r26, 0x26	; 38
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e6 e2       	ldi	r30, 0x26	; 38
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 7f       	andi	r24, 0xF8	; 248
    1c60:	8c 93       	st	X, r24
    #if ADC_PS_FACTOR >= ADC_PS_2 && ADC_PS_FACTOR <= ADC_PS_128 
        
        ADCSRA |= (ADC_PS_FACTOR << ADCSRA_ADPS0);
    1c62:	a6 e2       	ldi	r26, 0x26	; 38
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e6 e2       	ldi	r30, 0x26	; 38
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	86 60       	ori	r24, 0x06	; 6
    1c6e:	8c 93       	st	X, r24

    #endif


    //Handling input channels
    ADMUX &= (0xE0); //Clearing bits
    1c70:	a7 e2       	ldi	r26, 0x27	; 39
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e7 e2       	ldi	r30, 0x27	; 39
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 7e       	andi	r24, 0xE0	; 224
    1c7c:	8c 93       	st	X, r24
    #if ADC_INPUT_CHANNEL >= ADC_ADC0 && ADC_INPUT_CHANNEL <= ADC_V_GND
        //Channel Selection
        ADMUX |= (ADC_INPUT_CHANNEL << ADMUX_MUX0);
    1c7e:	a7 e2       	ldi	r26, 0x27	; 39
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e7 e2       	ldi	r30, 0x27	; 39
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	8c 93       	st	X, r24

    #endif


    // /Powering ADC
    ADCSRA |= (1 << ADCSRA_ADEN );
    1c8a:	a6 e2       	ldi	r26, 0x26	; 38
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e6 e2       	ldi	r30, 0x26	; 38
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	80 68       	ori	r24, 0x80	; 128
    1c96:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    1c98:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag; 
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <ADC_enu_ReadPolling>:

extern ErrorState_t ADC_enu_ReadPolling(u8 Copy_u8_Channel, u16* Copy_pu16_Result)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <ADC_enu_ReadPolling+0x6>
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <ADC_enu_ReadPolling+0x8>
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
    1cb2:	7c 83       	std	Y+4, r23	; 0x04
    1cb4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8_Channel >= ADC_ADC0) && (Copy_u8_Channel <= ADC_V_GND))
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	80 32       	cpi	r24, 0x20	; 32
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <ADC_enu_ReadPolling+0x1e>
    1cc0:	50 c0       	rjmp	.+160    	; 0x1d62 <ADC_enu_ReadPolling+0xbe>
    {
        //Clearing PIF, Assuming that the ADC is in Polling mode.
        ADCSRA |= (1 << ADCSRA_ADIF);
    1cc2:	a6 e2       	ldi	r26, 0x26	; 38
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e6 e2       	ldi	r30, 0x26	; 38
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 61       	ori	r24, 0x10	; 16
    1cce:	8c 93       	st	X, r24
        
        //Clearing MUX it
        ADMUX &= (0xE0);
    1cd0:	a7 e2       	ldi	r26, 0x27	; 39
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e7 e2       	ldi	r30, 0x27	; 39
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 7e       	andi	r24, 0xE0	; 224
    1cdc:	8c 93       	st	X, r24

        //Choosing channel
        ADMUX |= (Copy_u8_Channel << ADMUX_MUX0);
    1cde:	a7 e2       	ldi	r26, 0x27	; 39
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e7 e2       	ldi	r30, 0x27	; 39
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	90 81       	ld	r25, Z
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	89 2b       	or	r24, r25
    1cec:	8c 93       	st	X, r24
       
        //Setting ADSC to start a conversion
        ADCSRA |= (1 << ADCSRA_ADSC);
    1cee:	a6 e2       	ldi	r26, 0x26	; 38
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e6 e2       	ldi	r30, 0x26	; 38
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	80 64       	ori	r24, 0x40	; 64
    1cfa:	8c 93       	st	X, r24

        //Waiting for ADC to raise ADIF
        while (((ADCSRA >> ADCSRA_ADIF) & 1) == False);
    1cfc:	e6 e2       	ldi	r30, 0x26	; 38
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	82 95       	swap	r24
    1d04:	8f 70       	andi	r24, 0x0F	; 15
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	81 70       	andi	r24, 0x01	; 1
    1d0c:	90 70       	andi	r25, 0x00	; 0
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	a9 f3       	breq	.-22     	; 0x1cfc <ADC_enu_ReadPolling+0x58>

        
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    1d12:	e4 e2       	ldi	r30, 0x24	; 36
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	82 95       	swap	r24
    1d1a:	86 95       	lsr	r24
    1d1c:	86 95       	lsr	r24
    1d1e:	83 70       	andi	r24, 0x03	; 3
    1d20:	88 2f       	mov	r24, r24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	eb 81       	ldd	r30, Y+3	; 0x03
    1d26:	fc 81       	ldd	r31, Y+4	; 0x04
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    1d2c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d30:	20 81       	ld	r18, Z
    1d32:	31 81       	ldd	r19, Z+1	; 0x01
    1d34:	e5 e2       	ldi	r30, 0x25	; 37
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	82 2b       	or	r24, r18
    1d48:	93 2b       	or	r25, r19
    1d4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	80 83       	st	Z, r24
            *Copy_pu16_Result |= (u16)ADCH << 8;

        #endif
   
        //Clearing PIF
        ADCSRA |= (1 << ADCSRA_ADIF);
    1d52:	a6 e2       	ldi	r26, 0x26	; 38
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e6 e2       	ldi	r30, 0x26	; 38
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	80 61       	ori	r24, 0x10	; 16
    1d5e:	8c 93       	st	X, r24
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <ADC_enu_ReadPolling+0xc2>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	89 83       	std	Y+1, r24	; 0x01
    }


    Local_u8_ErrorFlag = ES_OK;
    1d66:	19 82       	std	Y+1, r1	; 0x01
    

    


    return Local_u8_ErrorFlag;
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <ADC_enu_StartConversion>:

extern ErrorState_t ADC_enu_StartConversion(void)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	0f 92       	push	r0
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 <<ADCSRA_ADSC);
    1d86:	a6 e2       	ldi	r26, 0x26	; 38
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e6 e2       	ldi	r30, 0x26	; 38
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 64       	ori	r24, 0x40	; 64
    1d92:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    1d94:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <ADC_enu_SetTriggerringSource>:

extern ErrorState_t ADC_enu_SetTriggerringSource(u8 Copy_u8_TriggeringSource)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <ADC_enu_SetTriggerringSource+0x6>
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_u8_TriggeringSource == ADC_SINGLE_CONVERSION)
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	88 30       	cpi	r24, 0x08	; 8
    1db4:	49 f4       	brne	.+18     	; 0x1dc8 <ADC_enu_SetTriggerringSource+0x28>
    {
        //Clearing ADATE bit
        ADCSRA &= ~(1 << ADCSRA_ADATE);
    1db6:	a6 e2       	ldi	r26, 0x26	; 38
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e6 e2       	ldi	r30, 0x26	; 38
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	8f 7d       	andi	r24, 0xDF	; 223
    1dc2:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    1dc4:	19 82       	std	Y+1, r1	; 0x01
    1dc6:	28 c0       	rjmp	.+80     	; 0x1e18 <ADC_enu_SetTriggerringSource+0x78>
    }
    else if((Copy_u8_TriggeringSource >= ADC_FREE_RUNNING) && (Copy_u8_TriggeringSource <= ADC_TIMER1_CAPTURE_EVENT))
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	88 30       	cpi	r24, 0x08	; 8
    1dcc:	18 f5       	brcc	.+70     	; 0x1e14 <ADC_enu_SetTriggerringSource+0x74>
    {
        //Clearing ADTS bits
        SFIOR &= ~ (1 << SFIOR_ADTS0);
    1dce:	a0 e5       	ldi	r26, 0x50	; 80
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e0 e5       	ldi	r30, 0x50	; 80
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8f 7d       	andi	r24, 0xDF	; 223
    1dda:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (Copy_u8_TriggeringSource << SFIOR_ADTS0);
    1ddc:	a0 e5       	ldi	r26, 0x50	; 80
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e0 e5       	ldi	r30, 0x50	; 80
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	28 2f       	mov	r18, r24
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	82 95       	swap	r24
    1df4:	92 95       	swap	r25
    1df6:	90 7f       	andi	r25, 0xF0	; 240
    1df8:	98 27       	eor	r25, r24
    1dfa:	80 7f       	andi	r24, 0xF0	; 240
    1dfc:	98 27       	eor	r25, r24
    1dfe:	82 2b       	or	r24, r18
    1e00:	8c 93       	st	X, r24

        //Setting ADATE bit
        ADCSRA |= (1 << ADCSRA_ADATE);
    1e02:	a6 e2       	ldi	r26, 0x26	; 38
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e6 e2       	ldi	r30, 0x26	; 38
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	80 62       	ori	r24, 0x20	; 32
    1e0e:	8c 93       	st	X, r24

        Local_u8_ErrorFlag =ES_OK;
    1e10:	19 82       	std	Y+1, r1	; 0x01
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <ADC_enu_SetTriggerringSource+0x78>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	89 83       	std	Y+1, r24	; 0x01
    }
        
        

    return Local_u8_ErrorFlag;
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <ADC_enu_ChangePrescalerFactor>:

extern ErrorState_t ADC_enu_ChangePrescalerFactor(u8 Copy_u8_DivisonFactor)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <ADC_enu_ChangePrescalerFactor+0x6>
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_DivisonFactor >= ADC_PS_2) && (Copy_u8_DivisonFactor <= ADC_PS_128))
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	88 23       	and	r24, r24
    1e38:	a1 f0       	breq	.+40     	; 0x1e62 <ADC_enu_ChangePrescalerFactor+0x3e>
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	88 30       	cpi	r24, 0x08	; 8
    1e3e:	88 f4       	brcc	.+34     	; 0x1e62 <ADC_enu_ChangePrescalerFactor+0x3e>
    {
        //Clearins PS bits
        ADCSRA &= ~ (7 << ADCSRA_ADPS0);
    1e40:	a6 e2       	ldi	r26, 0x26	; 38
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e6 e2       	ldi	r30, 0x26	; 38
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 7f       	andi	r24, 0xF8	; 248
    1e4c:	8c 93       	st	X, r24

        //Choosing divisuon factor
        ADCSRA |=  (Copy_u8_DivisonFactor << ADCSRA_ADPS0);
    1e4e:	a6 e2       	ldi	r26, 0x26	; 38
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e6 e2       	ldi	r30, 0x26	; 38
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	90 81       	ld	r25, Z
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	89 2b       	or	r24, r25
    1e5c:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    1e5e:	19 82       	std	Y+1, r1	; 0x01
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <ADC_enu_ChangePrescalerFactor+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <ADC_enu_ReadADCH>:

extern ErrorState_t ADC_enu_ReadADCH(u16* Copy_pu16_Result)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <ADC_enu_ReadADCH+0x6>
    1e78:	0f 92       	push	r0
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	9b 83       	std	Y+3, r25	; 0x03
    1e80:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	89 83       	std	Y+1, r24	; 0x01


    if(Copy_pu16_Result)
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	79 f0       	breq	.+30     	; 0x1eac <ADC_enu_ReadADCH+0x3a>
            
            *Copy_pu16_Result = (u16)ADCH << 8;
        
        #else ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED

                *Copy_pu16_Result = (u16)ADCH << 2;
    1e8e:	e5 e2       	ldi	r30, 0x25	; 37
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ea2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24

        #endif

        Local_u8_ErrorFlag = ES_OK;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <ADC_enu_ReadADCH+0x3e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <ADC_enu_ReadADCL>:

extern ErrorState_t ADC_enu_ReadADCL(u16* Copy_pu16_Result)
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <ADC_enu_ReadADCL+0x6>
    1ec4:	0f 92       	push	r0
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	9b 83       	std	Y+3, r25	; 0x03
    1ecc:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	11 f0       	breq	.+4      	; 0x1ede <ADC_enu_ReadADCL+0x20>

            

        #endif

        Local_u8_ErrorFlag = ES_OK;
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <ADC_enu_ReadADCL+0x24>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <ADC_enu_ReadData>:

extern ErrorState_t ADC_enu_ReadData(u16* Copy_pu16_Result)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <ADC_enu_ReadData+0x6>
    1ef6:	0f 92       	push	r0
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	9b 83       	std	Y+3, r25	; 0x03
    1efe:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	11 f1       	breq	.+68     	; 0x1f50 <ADC_enu_ReadData+0x60>
    {
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    1f0c:	e4 e2       	ldi	r30, 0x24	; 36
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	82 95       	swap	r24
    1f14:	86 95       	lsr	r24
    1f16:	86 95       	lsr	r24
    1f18:	83 70       	andi	r24, 0x03	; 3
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f20:	fb 81       	ldd	r31, Y+3	; 0x03
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    1f26:	ea 81       	ldd	r30, Y+2	; 0x02
    1f28:	fb 81       	ldd	r31, Y+3	; 0x03
    1f2a:	20 81       	ld	r18, Z
    1f2c:	31 81       	ldd	r19, Z+1	; 0x01
    1f2e:	e5 e2       	ldi	r30, 0x25	; 37
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	88 2f       	mov	r24, r24
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	82 2b       	or	r24, r18
    1f42:	93 2b       	or	r25, r19
    1f44:	ea 81       	ldd	r30, Y+2	; 0x02
    1f46:	fb 81       	ldd	r31, Y+3	; 0x03
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24

        #endif

        

        Local_u8_ErrorFlag = ES_OK;
    1f4c:	19 82       	std	Y+1, r1	; 0x01
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <ADC_enu_ReadData+0x64>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1f50:	83 e0       	ldi	r24, 0x03	; 3
    1f52:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <ADC_enu_EnableINT>:

extern ErrorState_t ADC_enu_EnableINT(void)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	0f 92       	push	r0
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADIE);
    1f70:	a6 e2       	ldi	r26, 0x26	; 38
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e6 e2       	ldi	r30, 0x26	; 38
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	88 60       	ori	r24, 0x08	; 8
    1f7c:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    1f7e:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <ADC_enu_DisableINT>:

extern ErrorState_t ADC_enu_DisableINT(void)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	0f 92       	push	r0
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADIE);
    1f98:	a6 e2       	ldi	r26, 0x26	; 38
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e6 e2       	ldi	r30, 0x26	; 38
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	87 7f       	andi	r24, 0xF7	; 247
    1fa4:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    1fa6:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <ADC_enu_EnableADC>:

extern ErrorState_t ADC_enu_EnableADC(void)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	0f 92       	push	r0
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADEN);
    1fc0:	a6 e2       	ldi	r26, 0x26	; 38
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e6 e2       	ldi	r30, 0x26	; 38
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	80 68       	ori	r24, 0x80	; 128
    1fcc:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    1fce:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01

}
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <ADC_enu_DisableADC>:

extern ErrorState_t ADC_enu_DisableADC(void)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	0f 92       	push	r0
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADEN);
    1fe8:	a6 e2       	ldi	r26, 0x26	; 38
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e6 e2       	ldi	r30, 0x26	; 38
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	8f 77       	andi	r24, 0x7F	; 127
    1ff4:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    1ff6:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <ADC_enu_SetCallBack>:

extern ErrorState_t ADC_enu_SetCallBack(void (*Copy_pfun_AppFunction)(void), void* Copy_u8_Parameters)
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	00 d0       	rcall	.+0      	; 0x2008 <ADC_enu_SetCallBack+0x6>
    2008:	00 d0       	rcall	.+0      	; 0x200a <ADC_enu_SetCallBack+0x8>
    200a:	0f 92       	push	r0
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	9b 83       	std	Y+3, r25	; 0x03
    2012:	8a 83       	std	Y+2, r24	; 0x02
    2014:	7d 83       	std	Y+5, r23	; 0x05
    2016:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	9b 81       	ldd	r25, Y+3	; 0x03
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f0       	breq	.+26     	; 0x203e <ADC_enu_SetCallBack+0x3c>
    {
        pfun_ISRPointer = Copy_pfun_AppFunction;
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	9b 81       	ldd	r25, Y+3	; 0x03
    2028:	90 93 c5 01 	sts	0x01C5, r25
    202c:	80 93 c4 01 	sts	0x01C4, r24

        pvid_ISRParameters = Copy_u8_Parameters;
    2030:	8c 81       	ldd	r24, Y+4	; 0x04
    2032:	9d 81       	ldd	r25, Y+5	; 0x05
    2034:	90 93 c7 01 	sts	0x01C7, r25
    2038:	80 93 c6 01 	sts	0x01C6, r24
        
        Local_u8_ErrorFlag = ES_OK;
    203c:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_ErrorFlag;
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <__vector_16>:

//ISR functions

void __vector_16 (void)__attribute__((signal));
void __vector_16 (void)
{
    2050:	1f 92       	push	r1
    2052:	0f 92       	push	r0
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	0f 92       	push	r0
    2058:	11 24       	eor	r1, r1
    205a:	2f 93       	push	r18
    205c:	3f 93       	push	r19
    205e:	4f 93       	push	r20
    2060:	5f 93       	push	r21
    2062:	6f 93       	push	r22
    2064:	7f 93       	push	r23
    2066:	8f 93       	push	r24
    2068:	9f 93       	push	r25
    206a:	af 93       	push	r26
    206c:	bf 93       	push	r27
    206e:	ef 93       	push	r30
    2070:	ff 93       	push	r31
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    if (pfun_ISRPointer != NULL)
    207a:	80 91 c4 01 	lds	r24, 0x01C4
    207e:	90 91 c5 01 	lds	r25, 0x01C5
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	49 f0       	breq	.+18     	; 0x2098 <__vector_16+0x48>
    {
        pfun_ISRPointer (pvid_ISRParameters);
    2086:	e0 91 c4 01 	lds	r30, 0x01C4
    208a:	f0 91 c5 01 	lds	r31, 0x01C5
    208e:	80 91 c6 01 	lds	r24, 0x01C6
    2092:	90 91 c7 01 	lds	r25, 0x01C7
    2096:	09 95       	icall
    }
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	ff 91       	pop	r31
    209e:	ef 91       	pop	r30
    20a0:	bf 91       	pop	r27
    20a2:	af 91       	pop	r26
    20a4:	9f 91       	pop	r25
    20a6:	8f 91       	pop	r24
    20a8:	7f 91       	pop	r23
    20aa:	6f 91       	pop	r22
    20ac:	5f 91       	pop	r21
    20ae:	4f 91       	pop	r20
    20b0:	3f 91       	pop	r19
    20b2:	2f 91       	pop	r18
    20b4:	0f 90       	pop	r0
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	0f 90       	pop	r0
    20ba:	1f 90       	pop	r1
    20bc:	18 95       	reti

000020be <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <SW_enu_Initialization+0x6>
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    20cc:	19 82       	std	Y+1, r1	; 0x01
    20ce:	34 c0       	rjmp	.+104    	; 0x2138 <SW_enu_Initialization+0x7a>
    {
        
       Local_u8_ErrorFlag = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	c9 01       	movw	r24, r18
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	82 0f       	add	r24, r18
    20de:	93 1f       	adc	r25, r19
    20e0:	fc 01       	movw	r30, r24
    20e2:	ec 57       	subi	r30, 0x7C	; 124
    20e4:	fe 4f       	sbci	r31, 0xFE	; 254
    20e6:	40 81       	ld	r20, Z
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	c9 01       	movw	r24, r18
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	82 0f       	add	r24, r18
    20f6:	93 1f       	adc	r25, r19
    20f8:	fc 01       	movw	r30, r24
    20fa:	eb 57       	subi	r30, 0x7B	; 123
    20fc:	fe 4f       	sbci	r31, 0xFE	; 254
    20fe:	90 81       	ld	r25, Z
    2100:	84 2f       	mov	r24, r20
    2102:	69 2f       	mov	r22, r25
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    210a:	8a 83       	std	Y+2, r24	; 0x02
       if(Local_u8_ErrorFlag != ES_OK)
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	88 23       	and	r24, r24
    2110:	c1 f4       	brne	.+48     	; 0x2142 <SW_enu_Initialization+0x84>
       {
        break;
       }
       Local_u8_ErrorFlag = (SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	c9 01       	movw	r24, r18
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	82 0f       	add	r24, r18
    2120:	93 1f       	adc	r25, r19
    2122:	fc 01       	movw	r30, r24
    2124:	ea 57       	subi	r30, 0x7A	; 122
    2126:	fe 4f       	sbci	r31, 0xFE	; 254
    2128:	80 81       	ld	r24, Z
    212a:	8a 83       	std	Y+2, r24	; 0x02

        if(Local_u8_ErrorFlag != ES_OK)
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	88 23       	and	r24, r24
    2130:	41 f4       	brne	.+16     	; 0x2142 <SW_enu_Initialization+0x84>
extern ErrorState_t SW_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    u8 Local_u8_Index;

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	90 91 83 01 	lds	r25, 0x0183
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	89 17       	cp	r24, r25
    2140:	38 f2       	brcs	.-114    	; 0x20d0 <SW_enu_Initialization+0x12>
       {
        break;
       }
    }

    Local_u8_ErrorFlag = ES_OK;
    2142:	1a 82       	std	Y+2, r1	; 0x02


    return Local_u8_ErrorFlag;
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	00 d0       	rcall	.+0      	; 0x2156 <SW_enu_GetSwValue+0x6>
    2156:	00 d0       	rcall	.+0      	; 0x2158 <SW_enu_GetSwValue+0x8>
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	7c 83       	std	Y+4, r23	; 0x04
    2160:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	49 f1       	breq	.+82     	; 0x21c0 <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    216e:	90 91 83 01 	lds	r25, 0x0183
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	98 17       	cp	r25, r24
    2176:	08 f1       	brcs	.+66     	; 0x21ba <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	c9 01       	movw	r24, r18
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	82 0f       	add	r24, r18
    2186:	93 1f       	adc	r25, r19
    2188:	fc 01       	movw	r30, r24
    218a:	ec 57       	subi	r30, 0x7C	; 124
    218c:	fe 4f       	sbci	r31, 0xFE	; 254
    218e:	40 81       	ld	r20, Z
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	c9 01       	movw	r24, r18
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	82 0f       	add	r24, r18
    219e:	93 1f       	adc	r25, r19
    21a0:	fc 01       	movw	r30, r24
    21a2:	eb 57       	subi	r30, 0x7B	; 123
    21a4:	fe 4f       	sbci	r31, 0xFE	; 254
    21a6:	90 81       	ld	r25, Z
    21a8:	2b 81       	ldd	r18, Y+3	; 0x03
    21aa:	3c 81       	ldd	r19, Y+4	; 0x04
    21ac:	84 2f       	mov	r24, r20
    21ae:	69 2f       	mov	r22, r25
    21b0:	a9 01       	movw	r20, r18
    21b2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_enu_GetPinValue>
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	05 c0       	rjmp	.+10     	; 0x21c4 <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    21c0:	83 e0       	ldi	r24, 0x03	; 3
    21c2:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    21c4:	89 81       	ldd	r24, Y+1	; 0x01

}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <Relay_enu_Initialization+0x6>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    21e2:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    21e4:	19 82       	std	Y+1, r1	; 0x01
    21e6:	31 c0       	rjmp	.+98     	; 0x224a <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	88 2f       	mov	r24, r24
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	fc 01       	movw	r30, r24
    21f4:	e2 57       	subi	r30, 0x72	; 114
    21f6:	fe 4f       	sbci	r31, 0xFE	; 254
    21f8:	20 81       	ld	r18, Z
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	88 2f       	mov	r24, r24
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	fc 01       	movw	r30, r24
    2206:	e1 57       	subi	r30, 0x71	; 113
    2208:	fe 4f       	sbci	r31, 0xFE	; 254
    220a:	90 81       	ld	r25, Z
    220c:	82 2f       	mov	r24, r18
    220e:	69 2f       	mov	r22, r25
    2210:	41 e0       	ldi	r20, 0x01	; 1
    2212:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	fc 01       	movw	r30, r24
    2222:	e2 57       	subi	r30, 0x72	; 114
    2224:	fe 4f       	sbci	r31, 0xFE	; 254
    2226:	20 81       	ld	r18, Z
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	88 2f       	mov	r24, r24
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	fc 01       	movw	r30, r24
    2234:	e1 57       	subi	r30, 0x71	; 113
    2236:	fe 4f       	sbci	r31, 0xFE	; 254
    2238:	90 81       	ld	r25, Z
    223a:	82 2f       	mov	r24, r18
    223c:	69 2f       	mov	r22, r25
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	8f 5f       	subi	r24, 0xFF	; 255
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	90 91 8d 01 	lds	r25, 0x018D
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	89 17       	cp	r24, r25
    2252:	50 f2       	brcs	.-108    	; 0x21e8 <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    2254:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	00 d0       	rcall	.+0      	; 0x2268 <Relay_enu_TuronOnRelay+0x6>
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    2272:	90 91 8d 01 	lds	r25, 0x018D
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	89 17       	cp	r24, r25
    227a:	c8 f4       	brcc	.+50     	; 0x22ae <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	fc 01       	movw	r30, r24
    2288:	e2 57       	subi	r30, 0x72	; 114
    228a:	fe 4f       	sbci	r31, 0xFE	; 254
    228c:	20 81       	ld	r18, Z
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	fc 01       	movw	r30, r24
    229a:	e1 57       	subi	r30, 0x71	; 113
    229c:	fe 4f       	sbci	r31, 0xFE	; 254
    229e:	90 81       	ld	r25, Z
    22a0:	82 2f       	mov	r24, r18
    22a2:	69 2f       	mov	r22, r25
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    22ae:	82 e0       	ldi	r24, 0x02	; 2
    22b0:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <Relay_enu_TuronOffRelay+0x6>
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    22ce:	90 91 8d 01 	lds	r25, 0x018D
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	89 17       	cp	r24, r25
    22d6:	c8 f4       	brcc	.+50     	; 0x230a <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	88 2f       	mov	r24, r24
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	fc 01       	movw	r30, r24
    22e4:	e2 57       	subi	r30, 0x72	; 114
    22e6:	fe 4f       	sbci	r31, 0xFE	; 254
    22e8:	20 81       	ld	r18, Z
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	88 2f       	mov	r24, r24
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	fc 01       	movw	r30, r24
    22f6:	e1 57       	subi	r30, 0x71	; 113
    22f8:	fe 4f       	sbci	r31, 0xFE	; 254
    22fa:	90 81       	ld	r25, Z
    22fc:	82 2f       	mov	r24, r18
    22fe:	69 2f       	mov	r22, r25
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	02 c0       	rjmp	.+4      	; 0x230e <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    230e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	00 d0       	rcall	.+0      	; 0x2320 <Relay_enu_TurnOnAllRelays+0x6>
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    2328:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    232a:	19 82       	std	Y+1, r1	; 0x01
    232c:	1a c0       	rjmp	.+52     	; 0x2362 <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	88 2f       	mov	r24, r24
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	fc 01       	movw	r30, r24
    233a:	e2 57       	subi	r30, 0x72	; 114
    233c:	fe 4f       	sbci	r31, 0xFE	; 254
    233e:	20 81       	ld	r18, Z
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	fc 01       	movw	r30, r24
    234c:	e1 57       	subi	r30, 0x71	; 113
    234e:	fe 4f       	sbci	r31, 0xFE	; 254
    2350:	90 81       	ld	r25, Z
    2352:	82 2f       	mov	r24, r18
    2354:	69 2f       	mov	r22, r25
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	8f 5f       	subi	r24, 0xFF	; 255
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	90 91 8d 01 	lds	r25, 0x018D
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	89 17       	cp	r24, r25
    236a:	08 f3       	brcs	.-62     	; 0x232e <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	00 d0       	rcall	.+0      	; 0x2382 <Relay_enu_TurnOffAllRelays+0x6>
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    238a:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    238c:	19 82       	std	Y+1, r1	; 0x01
    238e:	1a c0       	rjmp	.+52     	; 0x23c4 <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	fc 01       	movw	r30, r24
    239c:	e2 57       	subi	r30, 0x72	; 114
    239e:	fe 4f       	sbci	r31, 0xFE	; 254
    23a0:	20 81       	ld	r18, Z
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	88 2f       	mov	r24, r24
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	fc 01       	movw	r30, r24
    23ae:	e1 57       	subi	r30, 0x71	; 113
    23b0:	fe 4f       	sbci	r31, 0xFE	; 254
    23b2:	90 81       	ld	r25, Z
    23b4:	82 2f       	mov	r24, r18
    23b6:	69 2f       	mov	r22, r25
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	8f 5f       	subi	r24, 0xFF	; 255
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	90 91 8d 01 	lds	r25, 0x018D
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	89 17       	cp	r24, r25
    23cc:	08 f3       	brcs	.-62     	; 0x2390 <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <LED_enu_Initialization+0x6>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    23e8:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    23ea:	19 82       	std	Y+1, r1	; 0x01
    23ec:	31 c0       	rjmp	.+98     	; 0x2450 <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	fc 01       	movw	r30, r24
    23fa:	ef 56       	subi	r30, 0x6F	; 111
    23fc:	fe 4f       	sbci	r31, 0xFE	; 254
    23fe:	20 81       	ld	r18, Z
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	88 2f       	mov	r24, r24
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	88 0f       	add	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	fc 01       	movw	r30, r24
    240c:	ee 56       	subi	r30, 0x6E	; 110
    240e:	fe 4f       	sbci	r31, 0xFE	; 254
    2410:	90 81       	ld	r25, Z
    2412:	82 2f       	mov	r24, r18
    2414:	69 2f       	mov	r22, r25
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	88 2f       	mov	r24, r24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	fc 01       	movw	r30, r24
    2428:	ef 56       	subi	r30, 0x6F	; 111
    242a:	fe 4f       	sbci	r31, 0xFE	; 254
    242c:	20 81       	ld	r18, Z
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	88 2f       	mov	r24, r24
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	fc 01       	movw	r30, r24
    243a:	ee 56       	subi	r30, 0x6E	; 110
    243c:	fe 4f       	sbci	r31, 0xFE	; 254
    243e:	90 81       	ld	r25, Z
    2440:	82 2f       	mov	r24, r18
    2442:	69 2f       	mov	r22, r25
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	8f 5f       	subi	r24, 0xFF	; 255
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	90 91 90 01 	lds	r25, 0x0190
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	89 17       	cp	r24, r25
    2458:	50 f2       	brcs	.-108    	; 0x23ee <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    245a:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	00 d0       	rcall	.+0      	; 0x246e <LED_enu_TurnOnLED+0x6>
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    2478:	90 91 90 01 	lds	r25, 0x0190
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	89 17       	cp	r24, r25
    2480:	c8 f4       	brcc	.+50     	; 0x24b4 <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	88 2f       	mov	r24, r24
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	fc 01       	movw	r30, r24
    248e:	ef 56       	subi	r30, 0x6F	; 111
    2490:	fe 4f       	sbci	r31, 0xFE	; 254
    2492:	20 81       	ld	r18, Z
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	88 2f       	mov	r24, r24
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	fc 01       	movw	r30, r24
    24a0:	ee 56       	subi	r30, 0x6E	; 110
    24a2:	fe 4f       	sbci	r31, 0xFE	; 254
    24a4:	90 81       	ld	r25, Z
    24a6:	82 2f       	mov	r24, r18
    24a8:	69 2f       	mov	r22, r25
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <LED_enu_TurnOffLED+0x6>
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    24d4:	90 91 90 01 	lds	r25, 0x0190
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	98 17       	cp	r25, r24
    24dc:	c8 f0       	brcs	.+50     	; 0x2510 <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	88 2f       	mov	r24, r24
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	fc 01       	movw	r30, r24
    24ea:	ef 56       	subi	r30, 0x6F	; 111
    24ec:	fe 4f       	sbci	r31, 0xFE	; 254
    24ee:	20 81       	ld	r18, Z
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	88 2f       	mov	r24, r24
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	fc 01       	movw	r30, r24
    24fc:	ee 56       	subi	r30, 0x6E	; 110
    24fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2500:	90 81       	ld	r25, Z
    2502:	82 2f       	mov	r24, r18
    2504:	69 2f       	mov	r22, r25
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    2514:	89 81       	ldd	r24, Y+1	; 0x01
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <LED_enu_TurnOnAllLEDs+0x6>
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    252e:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    2530:	19 82       	std	Y+1, r1	; 0x01
    2532:	1a c0       	rjmp	.+52     	; 0x2568 <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	88 2f       	mov	r24, r24
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	fc 01       	movw	r30, r24
    2540:	ef 56       	subi	r30, 0x6F	; 111
    2542:	fe 4f       	sbci	r31, 0xFE	; 254
    2544:	20 81       	ld	r18, Z
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	88 0f       	add	r24, r24
    254e:	99 1f       	adc	r25, r25
    2550:	fc 01       	movw	r30, r24
    2552:	ee 56       	subi	r30, 0x6E	; 110
    2554:	fe 4f       	sbci	r31, 0xFE	; 254
    2556:	90 81       	ld	r25, Z
    2558:	82 2f       	mov	r24, r18
    255a:	69 2f       	mov	r22, r25
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	8f 5f       	subi	r24, 0xFF	; 255
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	90 91 90 01 	lds	r25, 0x0190
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	89 17       	cp	r24, r25
    2570:	08 f3       	brcs	.-62     	; 0x2534 <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    2572:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	00 d0       	rcall	.+0      	; 0x2586 <LED_enu_TurnOffAllLEDs+0x6>
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    258e:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    2590:	19 82       	std	Y+1, r1	; 0x01
    2592:	1a c0       	rjmp	.+52     	; 0x25c8 <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	88 2f       	mov	r24, r24
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	fc 01       	movw	r30, r24
    25a0:	ef 56       	subi	r30, 0x6F	; 111
    25a2:	fe 4f       	sbci	r31, 0xFE	; 254
    25a4:	20 81       	ld	r18, Z
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	88 2f       	mov	r24, r24
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	fc 01       	movw	r30, r24
    25b2:	ee 56       	subi	r30, 0x6E	; 110
    25b4:	fe 4f       	sbci	r31, 0xFE	; 254
    25b6:	90 81       	ld	r25, Z
    25b8:	82 2f       	mov	r24, r18
    25ba:	69 2f       	mov	r22, r25
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	8f 5f       	subi	r24, 0xFF	; 255
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	90 91 90 01 	lds	r25, 0x0190
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	89 17       	cp	r24, r25
    25d0:	08 f3       	brcs	.-62     	; 0x2594 <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    25d2:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	6d 97       	sbiw	r28, 0x1d	; 29
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	8d 8f       	std	Y+29, r24	; 0x1d
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	ac e0       	ldi	r26, 0x0C	; 12
    25fe:	b2 e4       	ldi	r27, 0x42	; 66
    2600:	89 8f       	std	Y+25, r24	; 0x19
    2602:	9a 8f       	std	Y+26, r25	; 0x1a
    2604:	ab 8f       	std	Y+27, r26	; 0x1b
    2606:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	69 8d       	ldd	r22, Y+25	; 0x19
    260a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    260c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a e7       	ldi	r20, 0x7A	; 122
    2616:	55 e4       	ldi	r21, 0x45	; 69
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8d 8b       	std	Y+21, r24	; 0x15
    2622:	9e 8b       	std	Y+22, r25	; 0x16
    2624:	af 8b       	std	Y+23, r26	; 0x17
    2626:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2628:	6d 89       	ldd	r22, Y+21	; 0x15
    262a:	7e 89       	ldd	r23, Y+22	; 0x16
    262c:	8f 89       	ldd	r24, Y+23	; 0x17
    262e:	98 8d       	ldd	r25, Y+24	; 0x18
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9c 8b       	std	Y+20, r25	; 0x14
    2646:	8b 8b       	std	Y+19, r24	; 0x13
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    264a:	6d 89       	ldd	r22, Y+21	; 0x15
    264c:	7e 89       	ldd	r23, Y+22	; 0x16
    264e:	8f 89       	ldd	r24, Y+23	; 0x17
    2650:	98 8d       	ldd	r25, Y+24	; 0x18
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	69 8d       	ldd	r22, Y+25	; 0x19
    2664:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2666:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2668:	9c 8d       	ldd	r25, Y+28	; 0x1c
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9c 8b       	std	Y+20, r25	; 0x14
    2688:	8b 8b       	std	Y+19, r24	; 0x13
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <LCD_enu_Initialization+0xca>
    268c:	80 e9       	ldi	r24, 0x90	; 144
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	9a 8b       	std	Y+18, r25	; 0x12
    2692:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2694:	89 89       	ldd	r24, Y+17	; 0x11
    2696:	9a 89       	ldd	r25, Y+18	; 0x12
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_enu_Initialization+0xb8>
    269c:	9a 8b       	std	Y+18, r25	; 0x12
    269e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	8b 89       	ldd	r24, Y+19	; 0x13
    26a2:	9c 89       	ldd	r25, Y+20	; 0x14
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9c 8b       	std	Y+20, r25	; 0x14
    26a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	8b 89       	ldd	r24, Y+19	; 0x13
    26ac:	9c 89       	ldd	r25, Y+20	; 0x14
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <LCD_enu_Initialization+0xac>
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6d 89       	ldd	r22, Y+21	; 0x15
    26b6:	7e 89       	ldd	r23, Y+22	; 0x16
    26b8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ba:	98 8d       	ldd	r25, Y+24	; 0x18
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9c 8b       	std	Y+20, r25	; 0x14
    26c6:	8b 8b       	std	Y+19, r24	; 0x13
    26c8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ca:	9c 89       	ldd	r25, Y+20	; 0x14
    26cc:	98 8b       	std	Y+16, r25	; 0x10
    26ce:	8f 87       	std	Y+15, r24	; 0x0f
    26d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d2:	98 89       	ldd	r25, Y+16	; 0x10
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_enu_Initialization+0xf4>
    26d8:	98 8b       	std	Y+16, r25	; 0x10
    26da:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	61 e0       	ldi	r22, 0x01	; 1
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	62 e0       	ldi	r22, 0x02	; 2
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	63 e0       	ldi	r22, 0x03	; 3
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	67 e0       	ldi	r22, 0x07	; 7
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	66 e0       	ldi	r22, 0x06	; 6
    2708:	41 e0       	ldi	r20, 0x01	; 1
    270a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	65 e0       	ldi	r22, 0x05	; 5
    2712:	41 e0       	ldi	r20, 0x01	; 1
    2714:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	64 e0       	ldi	r22, 0x04	; 4
    271c:	41 e0       	ldi	r20, 0x01	; 1
    271e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	67 e0       	ldi	r22, 0x07	; 7
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	66 e0       	ldi	r22, 0x06	; 6
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	65 e0       	ldi	r22, 0x05	; 5
    2744:	41 e0       	ldi	r20, 0x01	; 1
    2746:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	64 e0       	ldi	r22, 0x04	; 4
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	63 e0       	ldi	r22, 0x03	; 3
    2758:	41 e0       	ldi	r20, 0x01	; 1
    275a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	a0 e8       	ldi	r26, 0x80	; 128
    2764:	bf e3       	ldi	r27, 0x3F	; 63
    2766:	8b 87       	std	Y+11, r24	; 0x0b
    2768:	9c 87       	std	Y+12, r25	; 0x0c
    276a:	ad 87       	std	Y+13, r26	; 0x0d
    276c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2770:	7c 85       	ldd	r23, Y+12	; 0x0c
    2772:	8d 85       	ldd	r24, Y+13	; 0x0d
    2774:	9e 85       	ldd	r25, Y+14	; 0x0e
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	4a e7       	ldi	r20, 0x7A	; 122
    277c:	55 e4       	ldi	r21, 0x45	; 69
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	8f 83       	std	Y+7, r24	; 0x07
    2788:	98 87       	std	Y+8, r25	; 0x08
    278a:	a9 87       	std	Y+9, r26	; 0x09
    278c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    278e:	6f 81       	ldd	r22, Y+7	; 0x07
    2790:	78 85       	ldd	r23, Y+8	; 0x08
    2792:	89 85       	ldd	r24, Y+9	; 0x09
    2794:	9a 85       	ldd	r25, Y+10	; 0x0a
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e8       	ldi	r20, 0x80	; 128
    279c:	5f e3       	ldi	r21, 0x3F	; 63
    279e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    27a2:	88 23       	and	r24, r24
    27a4:	2c f4       	brge	.+10     	; 0x27b0 <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	9e 83       	std	Y+6, r25	; 0x06
    27ac:	8d 83       	std	Y+5, r24	; 0x05
    27ae:	3f c0       	rjmp	.+126    	; 0x282e <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	3f ef       	ldi	r19, 0xFF	; 255
    27bc:	4f e7       	ldi	r20, 0x7F	; 127
    27be:	57 e4       	ldi	r21, 0x47	; 71
    27c0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    27c4:	18 16       	cp	r1, r24
    27c6:	4c f5       	brge	.+82     	; 0x281a <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    27cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	40 e2       	ldi	r20, 0x20	; 32
    27d6:	51 e4       	ldi	r21, 0x41	; 65
    27d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	bc 01       	movw	r22, r24
    27e2:	cd 01       	movw	r24, r26
    27e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	9e 83       	std	Y+6, r25	; 0x06
    27ee:	8d 83       	std	Y+5, r24	; 0x05
    27f0:	0f c0       	rjmp	.+30     	; 0x2810 <LCD_enu_Initialization+0x230>
    27f2:	80 e9       	ldi	r24, 0x90	; 144
    27f4:	91 e0       	ldi	r25, 0x01	; 1
    27f6:	9c 83       	std	Y+4, r25	; 0x04
    27f8:	8b 83       	std	Y+3, r24	; 0x03
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	f1 f7       	brne	.-4      	; 0x27fe <LCD_enu_Initialization+0x21e>
    2802:	9c 83       	std	Y+4, r25	; 0x04
    2804:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	9e 83       	std	Y+6, r25	; 0x06
    280e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2810:	8d 81       	ldd	r24, Y+5	; 0x05
    2812:	9e 81       	ldd	r25, Y+6	; 0x06
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	69 f7       	brne	.-38     	; 0x27f2 <LCD_enu_Initialization+0x212>
    2818:	14 c0       	rjmp	.+40     	; 0x2842 <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281a:	6f 81       	ldd	r22, Y+7	; 0x07
    281c:	78 85       	ldd	r23, Y+8	; 0x08
    281e:	89 85       	ldd	r24, Y+9	; 0x09
    2820:	9a 85       	ldd	r25, Y+10	; 0x0a
    2822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	9e 83       	std	Y+6, r25	; 0x06
    282c:	8d 83       	std	Y+5, r24	; 0x05
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	9a 83       	std	Y+2, r25	; 0x02
    2834:	89 83       	std	Y+1, r24	; 0x01
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	9a 81       	ldd	r25, Y+2	; 0x02
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCD_enu_Initialization+0x25a>
    283e:	9a 83       	std	Y+2, r25	; 0x02
    2840:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	63 e0       	ldi	r22, 0x03	; 3
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    2856:	88 e2       	ldi	r24, 0x28	; 40
    2858:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0c);
    2866:	8c e0       	ldi	r24, 0x0C	; 12
    2868:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	61 e0       	ldi	r22, 0x01	; 1
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	61 e0       	ldi	r22, 0x01	; 1
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    2886:	86 e0       	ldi	r24, 0x06	; 6
    2888:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    288c:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    288e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2890:	6d 96       	adiw	r28, 0x1d	; 29
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <LCD_enu_SendCommand+0x6>
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	61 e0       	ldi	r22, 0x01	; 1
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    28c2:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    28c4:	89 81       	ldd	r24, Y+1	; 0x01

}
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <LCD_enu_SendData+0x6>
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    28f0:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    28f2:	89 81       	ldd	r24, Y+1	; 0x01

}
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	00 d0       	rcall	.+0      	; 0x2904 <LCD_enu_GoToPosition+0x6>
    2904:	00 d0       	rcall	.+0      	; 0x2906 <LCD_enu_GoToPosition+0x8>
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	8a 83       	std	Y+2, r24	; 0x02
    290c:	6b 83       	std	Y+3, r22	; 0x03
    290e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	81 31       	cpi	r24, 0x11	; 17
    2918:	88 f5       	brcc	.+98     	; 0x297c <LCD_enu_GoToPosition+0x7e>
    291a:	8b 81       	ldd	r24, Y+3	; 0x03
    291c:	88 23       	and	r24, r24
    291e:	71 f1       	breq	.+92     	; 0x297c <LCD_enu_GoToPosition+0x7e>
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	83 30       	cpi	r24, 0x03	; 3
    2924:	58 f5       	brcc	.+86     	; 0x297c <LCD_enu_GoToPosition+0x7e>
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	88 23       	and	r24, r24
    292a:	41 f1       	breq	.+80     	; 0x297c <LCD_enu_GoToPosition+0x7e>
    292c:	8c 81       	ldd	r24, Y+4	; 0x04
    292e:	85 30       	cpi	r24, 0x05	; 5
    2930:	28 f5       	brcc	.+74     	; 0x297c <LCD_enu_GoToPosition+0x7e>
    2932:	8c 81       	ldd	r24, Y+4	; 0x04
    2934:	88 23       	and	r24, r24
    2936:	11 f1       	breq	.+68     	; 0x297c <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	40 e0       	ldi	r20, 0x00	; 0
    293e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    2942:	8c 81       	ldd	r24, Y+4	; 0x04
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9c 01       	movw	r18, r24
    294a:	21 50       	subi	r18, 0x01	; 1
    294c:	30 40       	sbci	r19, 0x00	; 0
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	88 2f       	mov	r24, r24
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	88 0f       	add	r24, r24
    2958:	99 1f       	adc	r25, r25
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	82 0f       	add	r24, r18
    2960:	93 1f       	adc	r25, r19
    2962:	82 95       	swap	r24
    2964:	92 95       	swap	r25
    2966:	90 7f       	andi	r25, 0xF0	; 240
    2968:	98 27       	eor	r25, r24
    296a:	80 7f       	andi	r24, 0xF0	; 240
    296c:	98 27       	eor	r25, r24
    296e:	98 2f       	mov	r25, r24
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	89 0f       	add	r24, r25
    2974:	81 58       	subi	r24, 0x81	; 129
    2976:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
    297a:	02 c0       	rjmp	.+4      	; 0x2980 <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    297c:	82 e0       	ldi	r24, 0x02	; 2
    297e:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    2980:	89 81       	ldd	r24, Y+1	; 0x01
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	00 d0       	rcall	.+0      	; 0x2996 <LCD_enu_SendString+0x6>
    2996:	0f 92       	push	r0
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	9b 83       	std	Y+3, r25	; 0x03
    299e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	9b 81       	ldd	r25, Y+3	; 0x03
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	c1 f0       	breq	.+48     	; 0x29dc <LCD_enu_SendString+0x4c>
    29ac:	10 c0       	rjmp	.+32     	; 0x29ce <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	41 e0       	ldi	r20, 0x01	; 1
    29b4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    29b8:	ea 81       	ldd	r30, Y+2	; 0x02
    29ba:	fb 81       	ldd	r31, Y+3	; 0x03
    29bc:	20 81       	ld	r18, Z
    29be:	8a 81       	ldd	r24, Y+2	; 0x02
    29c0:	9b 81       	ldd	r25, Y+3	; 0x03
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	9b 83       	std	Y+3, r25	; 0x03
    29c6:	8a 83       	std	Y+2, r24	; 0x02
    29c8:	82 2f       	mov	r24, r18
    29ca:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    29ce:	ea 81       	ldd	r30, Y+2	; 0x02
    29d0:	fb 81       	ldd	r31, Y+3	; 0x03
    29d2:	80 81       	ld	r24, Z
    29d4:	88 23       	and	r24, r24
    29d6:	59 f7       	brne	.-42     	; 0x29ae <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    29d8:	19 82       	std	Y+1, r1	; 0x01
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    29dc:	83 e0       	ldi	r24, 0x03	; 3
    29de:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <LCD_enu_ClearPage+0x6>
    29f4:	0f 92       	push	r0
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	88 23       	and	r24, r24
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <LCD_enu_ClearPage+0x1a>
    2a06:	49 c0       	rjmp	.+146    	; 0x2a9a <LCD_enu_ClearPage+0xac>
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	85 30       	cpi	r24, 0x05	; 5
    2a0c:	08 f0       	brcs	.+2      	; 0x2a10 <LCD_enu_ClearPage+0x22>
    2a0e:	45 c0       	rjmp	.+138    	; 0x2a9a <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    2a10:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	61 e0       	ldi	r22, 0x01	; 1
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	88 2f       	mov	r24, r24
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	07 96       	adiw	r24, 0x07	; 7
    2a24:	82 95       	swap	r24
    2a26:	92 95       	swap	r25
    2a28:	90 7f       	andi	r25, 0xF0	; 240
    2a2a:	98 27       	eor	r25, r24
    2a2c:	80 7f       	andi	r24, 0xF0	; 240
    2a2e:	98 27       	eor	r25, r24
    2a30:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	61 e0       	ldi	r22, 0x01	; 1
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    2a3e:	19 82       	std	Y+1, r1	; 0x01
    2a40:	06 c0       	rjmp	.+12     	; 0x2a4e <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    2a42:	80 e2       	ldi	r24, 0x20	; 32
    2a44:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	8f 5f       	subi	r24, 0xFF	; 255
    2a4c:	89 83       	std	Y+1, r24	; 0x01
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	80 31       	cpi	r24, 0x10	; 16
    2a52:	b8 f3       	brcs	.-18     	; 0x2a42 <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	61 e0       	ldi	r22, 0x01	; 1
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0b 96       	adiw	r24, 0x0b	; 11
    2a66:	82 95       	swap	r24
    2a68:	92 95       	swap	r25
    2a6a:	90 7f       	andi	r25, 0xF0	; 240
    2a6c:	98 27       	eor	r25, r24
    2a6e:	80 7f       	andi	r24, 0xF0	; 240
    2a70:	98 27       	eor	r25, r24
    2a72:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	61 e0       	ldi	r22, 0x01	; 1
    2a7a:	41 e0       	ldi	r20, 0x01	; 1
    2a7c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    2a80:	19 82       	std	Y+1, r1	; 0x01
    2a82:	06 c0       	rjmp	.+12     	; 0x2a90 <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    2a84:	80 e2       	ldi	r24, 0x20	; 32
    2a86:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	8f 5f       	subi	r24, 0xFF	; 255
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	80 31       	cpi	r24, 0x10	; 16
    2a94:	b8 f3       	brcs	.-18     	; 0x2a84 <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    2a96:	1a 82       	std	Y+2, r1	; 0x02
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    2aac:	cf 92       	push	r12
    2aae:	ef 92       	push	r14
    2ab0:	0f 93       	push	r16
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	2e 97       	sbiw	r28, 0x0e	; 14
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	cd bf       	out	0x3d, r28	; 61
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
    2aca:	6f 83       	std	Y+7, r22	; 0x07
    2acc:	48 87       	std	Y+8, r20	; 0x08
    2ace:	29 87       	std	Y+9, r18	; 0x09
    2ad0:	0a 87       	std	Y+10, r16	; 0x0a
    2ad2:	eb 86       	std	Y+11, r14	; 0x0b
    2ad4:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ade:	00 97       	sbiw	r24, 0x00	; 0
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <LCD_enu_DrawSpecialCharacter+0x38>
    2ae2:	b3 c0       	rjmp	.+358    	; 0x2c4a <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    2ae4:	1b 82       	std	Y+3, r1	; 0x03
    2ae6:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    2ae8:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    2aea:	8f 81       	ldd	r24, Y+7	; 0x07
    2aec:	88 23       	and	r24, r24
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <LCD_enu_DrawSpecialCharacter+0x46>
    2af0:	a9 c0       	rjmp	.+338    	; 0x2c44 <LCD_enu_DrawSpecialCharacter+0x198>
    2af2:	8f 81       	ldd	r24, Y+7	; 0x07
    2af4:	89 30       	cpi	r24, 0x09	; 9
    2af6:	08 f0       	brcs	.+2      	; 0x2afa <LCD_enu_DrawSpecialCharacter+0x4e>
    2af8:	a5 c0       	rjmp	.+330    	; 0x2c44 <LCD_enu_DrawSpecialCharacter+0x198>
    2afa:	88 85       	ldd	r24, Y+8	; 0x08
    2afc:	88 30       	cpi	r24, 0x08	; 8
    2afe:	08 f0       	brcs	.+2      	; 0x2b02 <LCD_enu_DrawSpecialCharacter+0x56>
    2b00:	a1 c0       	rjmp	.+322    	; 0x2c44 <LCD_enu_DrawSpecialCharacter+0x198>
    2b02:	88 85       	ldd	r24, Y+8	; 0x08
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	88 e0       	ldi	r24, 0x08	; 8
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	ac 01       	movw	r20, r24
    2b0e:	42 1b       	sub	r20, r18
    2b10:	53 0b       	sbc	r21, r19
    2b12:	9a 01       	movw	r18, r20
    2b14:	8f 81       	ldd	r24, Y+7	; 0x07
    2b16:	88 2f       	mov	r24, r24
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	28 17       	cp	r18, r24
    2b1c:	39 07       	cpc	r19, r25
    2b1e:	0c f4       	brge	.+2      	; 0x2b22 <LCD_enu_DrawSpecialCharacter+0x76>
    2b20:	91 c0       	rjmp	.+290    	; 0x2c44 <LCD_enu_DrawSpecialCharacter+0x198>
    2b22:	89 85       	ldd	r24, Y+9	; 0x09
    2b24:	88 23       	and	r24, r24
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <LCD_enu_DrawSpecialCharacter+0x7e>
    2b28:	8d c0       	rjmp	.+282    	; 0x2c44 <LCD_enu_DrawSpecialCharacter+0x198>
    2b2a:	89 85       	ldd	r24, Y+9	; 0x09
    2b2c:	83 30       	cpi	r24, 0x03	; 3
    2b2e:	08 f0       	brcs	.+2      	; 0x2b32 <LCD_enu_DrawSpecialCharacter+0x86>
    2b30:	89 c0       	rjmp	.+274    	; 0x2c44 <LCD_enu_DrawSpecialCharacter+0x198>
    2b32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b34:	88 23       	and	r24, r24
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <LCD_enu_DrawSpecialCharacter+0x8e>
    2b38:	85 c0       	rjmp	.+266    	; 0x2c44 <LCD_enu_DrawSpecialCharacter+0x198>
    2b3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b3c:	81 31       	cpi	r24, 0x11	; 17
    2b3e:	08 f0       	brcs	.+2      	; 0x2b42 <LCD_enu_DrawSpecialCharacter+0x96>
    2b40:	81 c0       	rjmp	.+258    	; 0x2c44 <LCD_enu_DrawSpecialCharacter+0x198>
    2b42:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b44:	82 30       	cpi	r24, 0x02	; 2
    2b46:	08 f0       	brcs	.+2      	; 0x2b4a <LCD_enu_DrawSpecialCharacter+0x9e>
    2b48:	7d c0       	rjmp	.+250    	; 0x2c44 <LCD_enu_DrawSpecialCharacter+0x198>
    2b4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b4c:	85 30       	cpi	r24, 0x05	; 5
    2b4e:	08 f0       	brcs	.+2      	; 0x2b52 <LCD_enu_DrawSpecialCharacter+0xa6>
    2b50:	79 c0       	rjmp	.+242    	; 0x2c44 <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    2b52:	19 82       	std	Y+1, r1	; 0x01
    2b54:	19 c0       	rjmp	.+50     	; 0x2b88 <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b60:	82 0f       	add	r24, r18
    2b62:	93 1f       	adc	r25, r19
    2b64:	9b 83       	std	Y+3, r25	; 0x03
    2b66:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	98 2f       	mov	r25, r24
    2b6c:	96 95       	lsr	r25
    2b6e:	96 95       	lsr	r25
    2b70:	96 95       	lsr	r25
    2b72:	88 85       	ldd	r24, Y+8	; 0x08
    2b74:	29 2f       	mov	r18, r25
    2b76:	28 0f       	add	r18, r24
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7c:	62 2f       	mov	r22, r18
    2b7e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	88 5f       	subi	r24, 0xF8	; 248
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b90:	88 2f       	mov	r24, r24
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	28 17       	cp	r18, r24
    2ba2:	39 07       	cpc	r19, r25
    2ba4:	c4 f2       	brlt	.-80     	; 0x2b56 <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	61 e0       	ldi	r22, 0x01	; 1
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    2bb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	3e 87       	std	Y+14, r19	; 0x0e
    2bb8:	2d 87       	std	Y+13, r18	; 0x0d
    2bba:	4d 85       	ldd	r20, Y+13	; 0x0d
    2bbc:	5e 85       	ldd	r21, Y+14	; 0x0e
    2bbe:	41 15       	cp	r20, r1
    2bc0:	51 05       	cpc	r21, r1
    2bc2:	49 f0       	breq	.+18     	; 0x2bd6 <LCD_enu_DrawSpecialCharacter+0x12a>
    2bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc8:	81 30       	cpi	r24, 0x01	; 1
    2bca:	91 05       	cpc	r25, r1
    2bcc:	39 f4       	brne	.+14     	; 0x2bdc <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    2bce:	86 e0       	ldi	r24, 0x06	; 6
    2bd0:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
    2bd4:	03 c0       	rjmp	.+6      	; 0x2bdc <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    2bd6:	84 e0       	ldi	r24, 0x04	; 4
    2bd8:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	61 e0       	ldi	r22, 0x01	; 1
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    2be6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2be8:	88 2f       	mov	r24, r24
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9c 01       	movw	r18, r24
    2bee:	21 50       	subi	r18, 0x01	; 1
    2bf0:	30 40       	sbci	r19, 0x00	; 0
    2bf2:	89 85       	ldd	r24, Y+9	; 0x09
    2bf4:	88 2f       	mov	r24, r24
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	82 0f       	add	r24, r18
    2c04:	93 1f       	adc	r25, r19
    2c06:	82 95       	swap	r24
    2c08:	92 95       	swap	r25
    2c0a:	90 7f       	andi	r25, 0xF0	; 240
    2c0c:	98 27       	eor	r25, r24
    2c0e:	80 7f       	andi	r24, 0xF0	; 240
    2c10:	98 27       	eor	r25, r24
    2c12:	98 2f       	mov	r25, r24
    2c14:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c16:	89 0f       	add	r24, r25
    2c18:	81 58       	subi	r24, 0x81	; 129
    2c1a:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	61 e0       	ldi	r22, 0x01	; 1
    2c22:	41 e0       	ldi	r20, 0x01	; 1
    2c24:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    2c28:	19 82       	std	Y+1, r1	; 0x01
    2c2a:	06 c0       	rjmp	.+12     	; 0x2c38 <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	8f 5f       	subi	r24, 0xFF	; 255
    2c36:	89 83       	std	Y+1, r24	; 0x01
    2c38:	99 81       	ldd	r25, Y+1	; 0x01
    2c3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c3c:	98 17       	cp	r25, r24
    2c3e:	b0 f3       	brcs	.-20     	; 0x2c2c <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    2c40:	1c 82       	std	Y+4, r1	; 0x04
    2c42:	05 c0       	rjmp	.+10     	; 0x2c4e <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    2c44:	82 e0       	ldi	r24, 0x02	; 2
    2c46:	8c 83       	std	Y+4, r24	; 0x04
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    2c4a:	83 e0       	ldi	r24, 0x03	; 3
    2c4c:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    2c4e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2c50:	2e 96       	adiw	r28, 0x0e	; 14
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	0f 91       	pop	r16
    2c62:	ef 90       	pop	r14
    2c64:	cf 90       	pop	r12
    2c66:	08 95       	ret

00002c68 <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    2c68:	0f 93       	push	r16
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	2e 97       	sbiw	r28, 0x0e	; 14
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	68 87       	std	Y+8, r22	; 0x08
    2c80:	79 87       	std	Y+9, r23	; 0x09
    2c82:	8a 87       	std	Y+10, r24	; 0x0a
    2c84:	9b 87       	std	Y+11, r25	; 0x0b
    2c86:	4c 87       	std	Y+12, r20	; 0x0c
    2c88:	2d 87       	std	Y+13, r18	; 0x0d
    2c8a:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    2c90:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    2c92:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    2c94:	88 85       	ldd	r24, Y+8	; 0x08
    2c96:	99 85       	ldd	r25, Y+9	; 0x09
    2c98:	aa 85       	ldd	r26, Y+10	; 0x0a
    2c9a:	bb 85       	ldd	r27, Y+11	; 0x0b
    2c9c:	bb 23       	and	r27, r27
    2c9e:	8c f4       	brge	.+34     	; 0x2cc2 <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    2ca4:	88 85       	ldd	r24, Y+8	; 0x08
    2ca6:	99 85       	ldd	r25, Y+9	; 0x09
    2ca8:	aa 85       	ldd	r26, Y+10	; 0x0a
    2caa:	bb 85       	ldd	r27, Y+11	; 0x0b
    2cac:	b0 95       	com	r27
    2cae:	a0 95       	com	r26
    2cb0:	90 95       	com	r25
    2cb2:	81 95       	neg	r24
    2cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb6:	af 4f       	sbci	r26, 0xFF	; 255
    2cb8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cba:	88 87       	std	Y+8, r24	; 0x08
    2cbc:	99 87       	std	Y+9, r25	; 0x09
    2cbe:	aa 87       	std	Y+10, r26	; 0x0a
    2cc0:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    2cc2:	88 85       	ldd	r24, Y+8	; 0x08
    2cc4:	99 85       	ldd	r25, Y+9	; 0x09
    2cc6:	aa 85       	ldd	r26, Y+10	; 0x0a
    2cc8:	bb 85       	ldd	r27, Y+11	; 0x0b
    2cca:	8c 83       	std	Y+4, r24	; 0x04
    2ccc:	9d 83       	std	Y+5, r25	; 0x05
    2cce:	ae 83       	std	Y+6, r26	; 0x06
    2cd0:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	8f 5f       	subi	r24, 0xFF	; 255
    2cd6:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    2cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cda:	9d 81       	ldd	r25, Y+5	; 0x05
    2cdc:	ae 81       	ldd	r26, Y+6	; 0x06
    2cde:	bf 81       	ldd	r27, Y+7	; 0x07
    2ce0:	2a e0       	ldi	r18, 0x0A	; 10
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 c8 20 	call	0x4190	; 0x4190 <__divmodsi4>
    2cf0:	da 01       	movw	r26, r20
    2cf2:	c9 01       	movw	r24, r18
    2cf4:	8c 83       	std	Y+4, r24	; 0x04
    2cf6:	9d 83       	std	Y+5, r25	; 0x05
    2cf8:	ae 83       	std	Y+6, r26	; 0x06
    2cfa:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    2cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    2d00:	ae 81       	ldd	r26, Y+6	; 0x06
    2d02:	bf 81       	ldd	r27, Y+7	; 0x07
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	a1 05       	cpc	r26, r1
    2d08:	b1 05       	cpc	r27, r1
    2d0a:	19 f7       	brne	.-58     	; 0x2cd2 <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    2d0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d0e:	88 23       	and	r24, r24
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <LCD_enu_WriteIntegerNum+0xac>
    2d12:	87 c0       	rjmp	.+270    	; 0x2e22 <LCD_enu_WriteIntegerNum+0x1ba>
    2d14:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d16:	83 30       	cpi	r24, 0x03	; 3
    2d18:	08 f0       	brcs	.+2      	; 0x2d1c <LCD_enu_WriteIntegerNum+0xb4>
    2d1a:	83 c0       	rjmp	.+262    	; 0x2e22 <LCD_enu_WriteIntegerNum+0x1ba>
    2d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1e:	88 23       	and	r24, r24
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <LCD_enu_WriteIntegerNum+0xbc>
    2d22:	7f c0       	rjmp	.+254    	; 0x2e22 <LCD_enu_WriteIntegerNum+0x1ba>
    2d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d26:	81 31       	cpi	r24, 0x11	; 17
    2d28:	08 f0       	brcs	.+2      	; 0x2d2c <LCD_enu_WriteIntegerNum+0xc4>
    2d2a:	7b c0       	rjmp	.+246    	; 0x2e22 <LCD_enu_WriteIntegerNum+0x1ba>
    2d2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d2e:	85 30       	cpi	r24, 0x05	; 5
    2d30:	08 f0       	brcs	.+2      	; 0x2d34 <LCD_enu_WriteIntegerNum+0xcc>
    2d32:	77 c0       	rjmp	.+238    	; 0x2e22 <LCD_enu_WriteIntegerNum+0x1ba>
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	81 31       	cpi	r24, 0x11	; 17
    2d38:	08 f0       	brcs	.+2      	; 0x2d3c <LCD_enu_WriteIntegerNum+0xd4>
    2d3a:	73 c0       	rjmp	.+230    	; 0x2e22 <LCD_enu_WriteIntegerNum+0x1ba>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    2d3c:	88 85       	ldd	r24, Y+8	; 0x08
    2d3e:	99 85       	ldd	r25, Y+9	; 0x09
    2d40:	aa 85       	ldd	r26, Y+10	; 0x0a
    2d42:	bb 85       	ldd	r27, Y+11	; 0x0b
    2d44:	8c 83       	std	Y+4, r24	; 0x04
    2d46:	9d 83       	std	Y+5, r25	; 0x05
    2d48:	ae 83       	std	Y+6, r26	; 0x06
    2d4a:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	04 96       	adiw	r24, 0x04	; 4
    2d50:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	61 e0       	ldi	r22, 0x01	; 1
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        //Placing Cursor
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    2d5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d60:	88 2f       	mov	r24, r24
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	9c 01       	movw	r18, r24
    2d66:	21 50       	subi	r18, 0x01	; 1
    2d68:	30 40       	sbci	r19, 0x00	; 0
    2d6a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	88 0f       	add	r24, r24
    2d78:	99 1f       	adc	r25, r25
    2d7a:	82 0f       	add	r24, r18
    2d7c:	93 1f       	adc	r25, r19
    2d7e:	82 95       	swap	r24
    2d80:	92 95       	swap	r25
    2d82:	90 7f       	andi	r25, 0xF0	; 240
    2d84:	98 27       	eor	r25, r24
    2d86:	80 7f       	andi	r24, 0xF0	; 240
    2d88:	98 27       	eor	r25, r24
    2d8a:	98 2f       	mov	r25, r24
    2d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8e:	89 0f       	add	r24, r25
    2d90:	81 58       	subi	r24, 0x81	; 129
    2d92:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	61 e0       	ldi	r22, 0x01	; 1
    2d9a:	41 e0       	ldi	r20, 0x01	; 1
    2d9c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	88 23       	and	r24, r24
    2da4:	51 f1       	breq	.+84     	; 0x2dfa <LCD_enu_WriteIntegerNum+0x192>
        {
            enu_PassByteAndLatch('-');
    2da6:	8d e2       	ldi	r24, 0x2D	; 45
    2da8:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
    2dac:	26 c0       	rjmp	.+76     	; 0x2dfa <LCD_enu_WriteIntegerNum+0x192>
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    2dae:	8c 81       	ldd	r24, Y+4	; 0x04
    2db0:	9d 81       	ldd	r25, Y+5	; 0x05
    2db2:	ae 81       	ldd	r26, Y+6	; 0x06
    2db4:	bf 81       	ldd	r27, Y+7	; 0x07
    2db6:	2a e0       	ldi	r18, 0x0A	; 10
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e0       	ldi	r20, 0x00	; 0
    2dbc:	50 e0       	ldi	r21, 0x00	; 0
    2dbe:	bc 01       	movw	r22, r24
    2dc0:	cd 01       	movw	r24, r26
    2dc2:	0e 94 c8 20 	call	0x4190	; 0x4190 <__divmodsi4>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	80 5d       	subi	r24, 0xD0	; 208
    2dcc:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    2dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd4:	ae 81       	ldd	r26, Y+6	; 0x06
    2dd6:	bf 81       	ldd	r27, Y+7	; 0x07
    2dd8:	2a e0       	ldi	r18, 0x0A	; 10
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e0       	ldi	r20, 0x00	; 0
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 c8 20 	call	0x4190	; 0x4190 <__divmodsi4>
    2de8:	da 01       	movw	r26, r20
    2dea:	c9 01       	movw	r24, r18
    2dec:	8c 83       	std	Y+4, r24	; 0x04
    2dee:	9d 83       	std	Y+5, r25	; 0x05
    2df0:	ae 83       	std	Y+6, r26	; 0x06
    2df2:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    2df4:	8a 81       	ldd	r24, Y+2	; 0x02
    2df6:	81 50       	subi	r24, 0x01	; 1
    2df8:	8a 83       	std	Y+2, r24	; 0x02
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
    2dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dfe:	ae 81       	ldd	r26, Y+6	; 0x06
    2e00:	bf 81       	ldd	r27, Y+7	; 0x07
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	a1 05       	cpc	r26, r1
    2e06:	b1 05       	cpc	r27, r1
    2e08:	91 f6       	brne	.-92     	; 0x2dae <LCD_enu_WriteIntegerNum+0x146>
    2e0a:	06 c0       	rjmp	.+12     	; 0x2e18 <LCD_enu_WriteIntegerNum+0x1b0>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    2e0c:	80 e3       	ldi	r24, 0x30	; 48
    2e0e:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	81 50       	subi	r24, 0x01	; 1
    2e16:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	88 23       	and	r24, r24
    2e1c:	b9 f7       	brne	.-18     	; 0x2e0c <LCD_enu_WriteIntegerNum+0x1a4>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    2e1e:	1b 82       	std	Y+3, r1	; 0x03
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <LCD_enu_WriteIntegerNum+0x1be>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2e22:	82 e0       	ldi	r24, 0x02	; 2
    2e24:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2e28:	2e 96       	adiw	r28, 0x0e	; 14
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	0f 91       	pop	r16
    2e3a:	08 95       	ret

00002e3c <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    2e3c:	0f 93       	push	r16
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	63 97       	sbiw	r28, 0x13	; 19
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	6d 87       	std	Y+13, r22	; 0x0d
    2e54:	7e 87       	std	Y+14, r23	; 0x0e
    2e56:	8f 87       	std	Y+15, r24	; 0x0f
    2e58:	98 8b       	std	Y+16, r25	; 0x10
    2e5a:	49 8b       	std	Y+17, r20	; 0x11
    2e5c:	2a 8b       	std	Y+18, r18	; 0x12
    2e5e:	0b 8b       	std	Y+19, r16	; 0x13
    u8 Local_u8_ErrorFlag = ES_NOK;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	88 87       	std	Y+8, r24	; 0x08

    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    2e64:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = 0;
    2e66:	1a 82       	std	Y+2, r1	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    2e68:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    2e6a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2e6c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e70:	98 89       	ldd	r25, Y+16	; 0x10
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2e7e:	88 23       	and	r24, r24
    2e80:	5c f4       	brge	.+22     	; 0x2e98 <LCD_enu_WriteFloatNum+0x5c>
    {
        local_u8_NegativeFlag = True;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    2e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8a:	af 85       	ldd	r26, Y+15	; 0x0f
    2e8c:	b8 89       	ldd	r27, Y+16	; 0x10
    2e8e:	b0 58       	subi	r27, 0x80	; 128
    2e90:	8d 87       	std	Y+13, r24	; 0x0d
    2e92:	9e 87       	std	Y+14, r25	; 0x0e
    2e94:	af 87       	std	Y+15, r26	; 0x0f
    2e96:	b8 8b       	std	Y+16, r27	; 0x10
    }


    Local_u32_WholeDigits = Copy_f32_Num;
    2e98:	6d 85       	ldd	r22, Y+13	; 0x0d
    2e9a:	7e 85       	ldd	r23, Y+14	; 0x0e
    2e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e9e:	98 89       	ldd	r25, Y+16	; 0x10
    2ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	89 87       	std	Y+9, r24	; 0x09
    2eaa:	9a 87       	std	Y+10, r25	; 0x0a
    2eac:	ab 87       	std	Y+11, r26	; 0x0b
    2eae:	bc 87       	std	Y+12, r27	; 0x0c

    Local_f32_DecimalDigits = Copy_f32_Num - (f32)(Local_u32_WholeDigits);
    2eb0:	89 85       	ldd	r24, Y+9	; 0x09
    2eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb4:	ab 85       	ldd	r26, Y+11	; 0x0b
    2eb6:	bc 85       	ldd	r27, Y+12	; 0x0c
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    2ec0:	9b 01       	movw	r18, r22
    2ec2:	ac 01       	movw	r20, r24
    2ec4:	6d 85       	ldd	r22, Y+13	; 0x0d
    2ec6:	7e 85       	ldd	r23, Y+14	; 0x0e
    2ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eca:	98 89       	ldd	r25, Y+16	; 0x10
    2ecc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	8c 83       	std	Y+4, r24	; 0x04
    2ed6:	9d 83       	std	Y+5, r25	; 0x05
    2ed8:	ae 83       	std	Y+6, r26	; 0x06
    2eda:	bf 83       	std	Y+7, r27	; 0x07
   
    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	8f 5f       	subi	r24, 0xFF	; 255
    2ee0:	8b 83       	std	Y+3, r24	; 0x03
        Local_u32_WholeDigits  /= 10;
    2ee2:	89 85       	ldd	r24, Y+9	; 0x09
    2ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee6:	ab 85       	ldd	r26, Y+11	; 0x0b
    2ee8:	bc 85       	ldd	r27, Y+12	; 0x0c
    2eea:	2a e0       	ldi	r18, 0x0A	; 10
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	40 e0       	ldi	r20, 0x00	; 0
    2ef0:	50 e0       	ldi	r21, 0x00	; 0
    2ef2:	bc 01       	movw	r22, r24
    2ef4:	cd 01       	movw	r24, r26
    2ef6:	0e 94 a6 20 	call	0x414c	; 0x414c <__udivmodsi4>
    2efa:	da 01       	movw	r26, r20
    2efc:	c9 01       	movw	r24, r18
    2efe:	89 87       	std	Y+9, r24	; 0x09
    2f00:	9a 87       	std	Y+10, r25	; 0x0a
    2f02:	ab 87       	std	Y+11, r26	; 0x0b
    2f04:	bc 87       	std	Y+12, r27	; 0x0c

    }while(Local_u32_WholeDigits);
    2f06:	89 85       	ldd	r24, Y+9	; 0x09
    2f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0a:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f0c:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	a1 05       	cpc	r26, r1
    2f12:	b1 05       	cpc	r27, r1
    2f14:	19 f7       	brne	.-58     	; 0x2edc <LCD_enu_WriteFloatNum+0xa0>

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	61 e0       	ldi	r22, 0x01	; 1
    2f1a:	41 e0       	ldi	r20, 0x01	; 1
    2f1c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    2f20:	19 86       	std	Y+9, r1	; 0x09
    2f22:	1a 86       	std	Y+10, r1	; 0x0a
    2f24:	1b 86       	std	Y+11, r1	; 0x0b
    2f26:	1c 86       	std	Y+12, r1	; 0x0c
    2f28:	1f c0       	rjmp	.+62     	; 0x2f68 <LCD_enu_WriteFloatNum+0x12c>
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    {
        Local_f32_DecimalDigits *= 10;
    2f2a:	6c 81       	ldd	r22, Y+4	; 0x04
    2f2c:	7d 81       	ldd	r23, Y+5	; 0x05
    2f2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f30:	9f 81       	ldd	r25, Y+7	; 0x07
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e2       	ldi	r20, 0x20	; 32
    2f38:	51 e4       	ldi	r21, 0x41	; 65
    2f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	8c 83       	std	Y+4, r24	; 0x04
    2f44:	9d 83       	std	Y+5, r25	; 0x05
    2f46:	ae 83       	std	Y+6, r26	; 0x06
    2f48:	bf 83       	std	Y+7, r27	; 0x07
        Local_u32_WholeDigits = Local_f32_DecimalDigits;
    2f4a:	6c 81       	ldd	r22, Y+4	; 0x04
    2f4c:	7d 81       	ldd	r23, Y+5	; 0x05
    2f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f50:	9f 81       	ldd	r25, Y+7	; 0x07
    2f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	89 87       	std	Y+9, r24	; 0x09
    2f5c:	9a 87       	std	Y+10, r25	; 0x0a
    2f5e:	ab 87       	std	Y+11, r26	; 0x0b
    2f60:	bc 87       	std	Y+12, r27	; 0x0c
        Local_u8_DecimalDigitCount++;
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	8f 5f       	subi	r24, 0xFF	; 255
    2f66:	8a 83       	std	Y+2, r24	; 0x02

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    2f68:	89 85       	ldd	r24, Y+9	; 0x09
    2f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f6c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f6e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f70:	bc 01       	movw	r22, r24
    2f72:	cd 01       	movw	r24, r26
    2f74:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    2f78:	9b 01       	movw	r18, r22
    2f7a:	ac 01       	movw	r20, r24
    2f7c:	6c 81       	ldd	r22, Y+4	; 0x04
    2f7e:	7d 81       	ldd	r23, Y+5	; 0x05
    2f80:	8e 81       	ldd	r24, Y+6	; 0x06
    2f82:	9f 81       	ldd	r25, Y+7	; 0x07
    2f84:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	2c ea       	ldi	r18, 0xAC	; 172
    2f92:	35 ec       	ldi	r19, 0xC5	; 197
    2f94:	47 e2       	ldi	r20, 0x27	; 39
    2f96:	57 e3       	ldi	r21, 0x37	; 55
    2f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
    2f9c:	88 23       	and	r24, r24
    2f9e:	2c f6       	brge	.-118    	; 0x2f2a <LCD_enu_WriteFloatNum+0xee>
        Local_u8_DecimalDigitCount++;
        
    
    }

    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && ((Local_u32_WholeDigits + Local_u8_DecimalDigitCount) <= LCD_MAX_INTEGER_LENGTH))
    2fa0:	89 89       	ldd	r24, Y+17	; 0x11
    2fa2:	88 23       	and	r24, r24
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <LCD_enu_WriteFloatNum+0x16c>
    2fa6:	fd c0       	rjmp	.+506    	; 0x31a2 <LCD_enu_WriteFloatNum+0x366>
    2fa8:	89 89       	ldd	r24, Y+17	; 0x11
    2faa:	83 30       	cpi	r24, 0x03	; 3
    2fac:	08 f0       	brcs	.+2      	; 0x2fb0 <LCD_enu_WriteFloatNum+0x174>
    2fae:	f9 c0       	rjmp	.+498    	; 0x31a2 <LCD_enu_WriteFloatNum+0x366>
    2fb0:	8a 89       	ldd	r24, Y+18	; 0x12
    2fb2:	88 23       	and	r24, r24
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <LCD_enu_WriteFloatNum+0x17c>
    2fb6:	f5 c0       	rjmp	.+490    	; 0x31a2 <LCD_enu_WriteFloatNum+0x366>
    2fb8:	8a 89       	ldd	r24, Y+18	; 0x12
    2fba:	81 31       	cpi	r24, 0x11	; 17
    2fbc:	08 f0       	brcs	.+2      	; 0x2fc0 <LCD_enu_WriteFloatNum+0x184>
    2fbe:	f1 c0       	rjmp	.+482    	; 0x31a2 <LCD_enu_WriteFloatNum+0x366>
    2fc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc2:	85 30       	cpi	r24, 0x05	; 5
    2fc4:	08 f0       	brcs	.+2      	; 0x2fc8 <LCD_enu_WriteFloatNum+0x18c>
    2fc6:	ed c0       	rjmp	.+474    	; 0x31a2 <LCD_enu_WriteFloatNum+0x366>
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	28 2f       	mov	r18, r24
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	40 e0       	ldi	r20, 0x00	; 0
    2fd0:	50 e0       	ldi	r21, 0x00	; 0
    2fd2:	89 85       	ldd	r24, Y+9	; 0x09
    2fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd6:	ab 85       	ldd	r26, Y+11	; 0x0b
    2fd8:	bc 85       	ldd	r27, Y+12	; 0x0c
    2fda:	82 0f       	add	r24, r18
    2fdc:	93 1f       	adc	r25, r19
    2fde:	a4 1f       	adc	r26, r20
    2fe0:	b5 1f       	adc	r27, r21
    2fe2:	81 31       	cpi	r24, 0x11	; 17
    2fe4:	91 05       	cpc	r25, r1
    2fe6:	a1 05       	cpc	r26, r1
    2fe8:	b1 05       	cpc	r27, r1
    2fea:	08 f0       	brcs	.+2      	; 0x2fee <LCD_enu_WriteFloatNum+0x1b2>
    2fec:	da c0       	rjmp	.+436    	; 0x31a2 <LCD_enu_WriteFloatNum+0x366>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	61 e0       	ldi	r22, 0x01	; 1
    2ff2:	40 e0       	ldi	r20, 0x00	; 0
    2ff4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    2ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffa:	88 2f       	mov	r24, r24
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	9c 01       	movw	r18, r24
    3000:	21 50       	subi	r18, 0x01	; 1
    3002:	30 40       	sbci	r19, 0x00	; 0
    3004:	89 89       	ldd	r24, Y+17	; 0x11
    3006:	88 2f       	mov	r24, r24
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	88 0f       	add	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	88 0f       	add	r24, r24
    3012:	99 1f       	adc	r25, r25
    3014:	82 0f       	add	r24, r18
    3016:	93 1f       	adc	r25, r19
    3018:	82 95       	swap	r24
    301a:	92 95       	swap	r25
    301c:	90 7f       	andi	r25, 0xF0	; 240
    301e:	98 27       	eor	r25, r24
    3020:	80 7f       	andi	r24, 0xF0	; 240
    3022:	98 27       	eor	r25, r24
    3024:	98 2f       	mov	r25, r24
    3026:	8a 89       	ldd	r24, Y+18	; 0x12
    3028:	89 0f       	add	r24, r25
    302a:	81 58       	subi	r24, 0x81	; 129
    302c:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
        
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	61 e0       	ldi	r22, 0x01	; 1
    3034:	41 e0       	ldi	r20, 0x01	; 1
    3036:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	88 23       	and	r24, r24
    303e:	19 f0       	breq	.+6      	; 0x3046 <LCD_enu_WriteFloatNum+0x20a>
        {
            enu_PassByteAndLatch('-');
    3040:	8d e2       	ldi	r24, 0x2D	; 45
    3042:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
        }

        //A] Printing whole digits 
        Local_u32_WholeDigits = Copy_f32_Num;
    3046:	6d 85       	ldd	r22, Y+13	; 0x0d
    3048:	7e 85       	ldd	r23, Y+14	; 0x0e
    304a:	8f 85       	ldd	r24, Y+15	; 0x0f
    304c:	98 89       	ldd	r25, Y+16	; 0x10
    304e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	89 87       	std	Y+9, r24	; 0x09
    3058:	9a 87       	std	Y+10, r25	; 0x0a
    305a:	ab 87       	std	Y+11, r26	; 0x0b
    305c:	bc 87       	std	Y+12, r27	; 0x0c
        enu_ReverseInteger(&Local_u32_WholeDigits);
    305e:	ce 01       	movw	r24, r28
    3060:	09 96       	adiw	r24, 0x09	; 9
    3062:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <enu_ReverseInteger>


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	61 e0       	ldi	r22, 0x01	; 1
    306a:	41 e0       	ldi	r20, 0x01	; 1
    306c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    3070:	26 c0       	rjmp	.+76     	; 0x30be <LCD_enu_WriteFloatNum+0x282>
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    3072:	89 85       	ldd	r24, Y+9	; 0x09
    3074:	9a 85       	ldd	r25, Y+10	; 0x0a
    3076:	ab 85       	ldd	r26, Y+11	; 0x0b
    3078:	bc 85       	ldd	r27, Y+12	; 0x0c
    307a:	2a e0       	ldi	r18, 0x0A	; 10
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e0       	ldi	r20, 0x00	; 0
    3080:	50 e0       	ldi	r21, 0x00	; 0
    3082:	bc 01       	movw	r22, r24
    3084:	cd 01       	movw	r24, r26
    3086:	0e 94 a6 20 	call	0x414c	; 0x414c <__udivmodsi4>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	80 5d       	subi	r24, 0xD0	; 208
    3090:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
            Local_u32_WholeDigits /= 10;
    3094:	89 85       	ldd	r24, Y+9	; 0x09
    3096:	9a 85       	ldd	r25, Y+10	; 0x0a
    3098:	ab 85       	ldd	r26, Y+11	; 0x0b
    309a:	bc 85       	ldd	r27, Y+12	; 0x0c
    309c:	2a e0       	ldi	r18, 0x0A	; 10
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e0       	ldi	r20, 0x00	; 0
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	bc 01       	movw	r22, r24
    30a6:	cd 01       	movw	r24, r26
    30a8:	0e 94 a6 20 	call	0x414c	; 0x414c <__udivmodsi4>
    30ac:	da 01       	movw	r26, r20
    30ae:	c9 01       	movw	r24, r18
    30b0:	89 87       	std	Y+9, r24	; 0x09
    30b2:	9a 87       	std	Y+10, r25	; 0x0a
    30b4:	ab 87       	std	Y+11, r26	; 0x0b
    30b6:	bc 87       	std	Y+12, r27	; 0x0c
            Local_u8_WholeDigitCount--;
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	81 50       	subi	r24, 0x01	; 1
    30bc:	8b 83       	std	Y+3, r24	; 0x03


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    30be:	89 85       	ldd	r24, Y+9	; 0x09
    30c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c2:	ab 85       	ldd	r26, Y+11	; 0x0b
    30c4:	bc 85       	ldd	r27, Y+12	; 0x0c
    30c6:	00 97       	sbiw	r24, 0x00	; 0
    30c8:	a1 05       	cpc	r26, r1
    30ca:	b1 05       	cpc	r27, r1
    30cc:	91 f6       	brne	.-92     	; 0x3072 <LCD_enu_WriteFloatNum+0x236>
    30ce:	06 c0       	rjmp	.+12     	; 0x30dc <LCD_enu_WriteFloatNum+0x2a0>
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    30d0:	80 e3       	ldi	r24, 0x30	; 48
    30d2:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
            Local_u8_WholeDigitCount--;
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	81 50       	subi	r24, 0x01	; 1
    30da:	8b 83       	std	Y+3, r24	; 0x03
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
            Local_u32_WholeDigits /= 10;
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	88 23       	and	r24, r24
    30e0:	b9 f7       	brne	.-18     	; 0x30d0 <LCD_enu_WriteFloatNum+0x294>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    30e2:	6c 81       	ldd	r22, Y+4	; 0x04
    30e4:	7d 81       	ldd	r23, Y+5	; 0x05
    30e6:	8e 81       	ldd	r24, Y+6	; 0x06
    30e8:	9f 81       	ldd	r25, Y+7	; 0x07
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e0       	ldi	r20, 0x00	; 0
    30f0:	50 e0       	ldi	r21, 0x00	; 0
    30f2:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    30f6:	88 23       	and	r24, r24
    30f8:	09 f4       	brne	.+2      	; 0x30fc <LCD_enu_WriteFloatNum+0x2c0>
    30fa:	51 c0       	rjmp	.+162    	; 0x319e <LCD_enu_WriteFloatNum+0x362>
        {
            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	61 e0       	ldi	r22, 0x01	; 1
    3100:	41 e0       	ldi	r20, 0x01	; 1
    3102:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    3106:	8e e2       	ldi	r24, 0x2E	; 46
    3108:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>

            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
    310c:	6c 81       	ldd	r22, Y+4	; 0x04
    310e:	7d 81       	ldd	r23, Y+5	; 0x05
    3110:	8e 81       	ldd	r24, Y+6	; 0x06
    3112:	9f 81       	ldd	r25, Y+7	; 0x07
    3114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	89 87       	std	Y+9, r24	; 0x09
    311e:	9a 87       	std	Y+10, r25	; 0x0a
    3120:	ab 87       	std	Y+11, r26	; 0x0b
    3122:	bc 87       	std	Y+12, r27	; 0x0c
            enu_ReverseInteger(&Local_u32_WholeDigits);
    3124:	ce 01       	movw	r24, r28
    3126:	09 96       	adiw	r24, 0x09	; 9
    3128:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <enu_ReverseInteger>
    312c:	26 c0       	rjmp	.+76     	; 0x317a <LCD_enu_WriteFloatNum+0x33e>
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
            {
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    312e:	89 85       	ldd	r24, Y+9	; 0x09
    3130:	9a 85       	ldd	r25, Y+10	; 0x0a
    3132:	ab 85       	ldd	r26, Y+11	; 0x0b
    3134:	bc 85       	ldd	r27, Y+12	; 0x0c
    3136:	2a e0       	ldi	r18, 0x0A	; 10
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e0       	ldi	r20, 0x00	; 0
    313c:	50 e0       	ldi	r21, 0x00	; 0
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 a6 20 	call	0x414c	; 0x414c <__udivmodsi4>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	80 5d       	subi	r24, 0xD0	; 208
    314c:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
                Local_u32_WholeDigits /= 10;
    3150:	89 85       	ldd	r24, Y+9	; 0x09
    3152:	9a 85       	ldd	r25, Y+10	; 0x0a
    3154:	ab 85       	ldd	r26, Y+11	; 0x0b
    3156:	bc 85       	ldd	r27, Y+12	; 0x0c
    3158:	2a e0       	ldi	r18, 0x0A	; 10
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	50 e0       	ldi	r21, 0x00	; 0
    3160:	bc 01       	movw	r22, r24
    3162:	cd 01       	movw	r24, r26
    3164:	0e 94 a6 20 	call	0x414c	; 0x414c <__udivmodsi4>
    3168:	da 01       	movw	r26, r20
    316a:	c9 01       	movw	r24, r18
    316c:	89 87       	std	Y+9, r24	; 0x09
    316e:	9a 87       	std	Y+10, r25	; 0x0a
    3170:	ab 87       	std	Y+11, r26	; 0x0b
    3172:	bc 87       	std	Y+12, r27	; 0x0c
                Local_u8_DecimalDigitCount--;
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	81 50       	subi	r24, 0x01	; 1
    3178:	8a 83       	std	Y+2, r24	; 0x02
            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
            enu_ReverseInteger(&Local_u32_WholeDigits);
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
    317a:	89 85       	ldd	r24, Y+9	; 0x09
    317c:	9a 85       	ldd	r25, Y+10	; 0x0a
    317e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3180:	bc 85       	ldd	r27, Y+12	; 0x0c
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	a1 05       	cpc	r26, r1
    3186:	b1 05       	cpc	r27, r1
    3188:	91 f6       	brne	.-92     	; 0x312e <LCD_enu_WriteFloatNum+0x2f2>
    318a:	06 c0       	rjmp	.+12     	; 0x3198 <LCD_enu_WriteFloatNum+0x35c>
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    318c:	80 e3       	ldi	r24, 0x30	; 48
    318e:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	81 50       	subi	r24, 0x01	; 1
    3196:	8a 83       	std	Y+2, r24	; 0x02
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
                Local_u32_WholeDigits /= 10;
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	88 23       	and	r24, r24
    319c:	b9 f7       	brne	.-18     	; 0x318c <LCD_enu_WriteFloatNum+0x350>
            
            

        }

        Local_u8_ErrorFlag = ES_OK;
    319e:	18 86       	std	Y+8, r1	; 0x08
    31a0:	02 c0       	rjmp	.+4      	; 0x31a6 <LCD_enu_WriteFloatNum+0x36a>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    31a2:	82 e0       	ldi	r24, 0x02	; 2
    31a4:	88 87       	std	Y+8, r24	; 0x08
    }

    return Local_u8_ErrorFlag;
    31a6:	88 85       	ldd	r24, Y+8	; 0x08

}
    31a8:	63 96       	adiw	r28, 0x13	; 19
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	cd bf       	out	0x3d, r28	; 61
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	0f 91       	pop	r16
    31ba:	08 95       	ret

000031bc <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	ac 97       	sbiw	r28, 0x2c	; 44
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	62 e0       	ldi	r22, 0x02	; 2
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	63 e0       	ldi	r22, 0x03	; 3
    31e4:	40 e0       	ldi	r20, 0x00	; 0
    31e6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    31ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    31ec:	98 2f       	mov	r25, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	99 27       	eor	r25, r25
    31f2:	99 1f       	adc	r25, r25
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	67 e0       	ldi	r22, 0x07	; 7
    31f8:	49 2f       	mov	r20, r25
    31fa:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    31fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    3200:	82 95       	swap	r24
    3202:	86 95       	lsr	r24
    3204:	86 95       	lsr	r24
    3206:	83 70       	andi	r24, 0x03	; 3
    3208:	98 2f       	mov	r25, r24
    320a:	91 70       	andi	r25, 0x01	; 1
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	66 e0       	ldi	r22, 0x06	; 6
    3210:	49 2f       	mov	r20, r25
    3212:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    3216:	8c a5       	ldd	r24, Y+44	; 0x2c
    3218:	82 95       	swap	r24
    321a:	86 95       	lsr	r24
    321c:	87 70       	andi	r24, 0x07	; 7
    321e:	98 2f       	mov	r25, r24
    3220:	91 70       	andi	r25, 0x01	; 1
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	65 e0       	ldi	r22, 0x05	; 5
    3226:	49 2f       	mov	r20, r25
    3228:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    322c:	8c a5       	ldd	r24, Y+44	; 0x2c
    322e:	82 95       	swap	r24
    3230:	8f 70       	andi	r24, 0x0F	; 15
    3232:	98 2f       	mov	r25, r24
    3234:	91 70       	andi	r25, 0x01	; 1
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	64 e0       	ldi	r22, 0x04	; 4
    323a:	49 2f       	mov	r20, r25
    323c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	63 e0       	ldi	r22, 0x03	; 3
    3244:	41 e0       	ldi	r20, 0x01	; 1
    3246:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	a0 e8       	ldi	r26, 0x80	; 128
    3250:	bf e3       	ldi	r27, 0x3F	; 63
    3252:	8f a3       	std	Y+39, r24	; 0x27
    3254:	98 a7       	std	Y+40, r25	; 0x28
    3256:	a9 a7       	std	Y+41, r26	; 0x29
    3258:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    325a:	6f a1       	ldd	r22, Y+39	; 0x27
    325c:	78 a5       	ldd	r23, Y+40	; 0x28
    325e:	89 a5       	ldd	r24, Y+41	; 0x29
    3260:	9a a5       	ldd	r25, Y+42	; 0x2a
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	4a e7       	ldi	r20, 0x7A	; 122
    3268:	55 e4       	ldi	r21, 0x45	; 69
    326a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	8b a3       	std	Y+35, r24	; 0x23
    3274:	9c a3       	std	Y+36, r25	; 0x24
    3276:	ad a3       	std	Y+37, r26	; 0x25
    3278:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    327a:	6b a1       	ldd	r22, Y+35	; 0x23
    327c:	7c a1       	ldd	r23, Y+36	; 0x24
    327e:	8d a1       	ldd	r24, Y+37	; 0x25
    3280:	9e a1       	ldd	r25, Y+38	; 0x26
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e8       	ldi	r20, 0x80	; 128
    3288:	5f e3       	ldi	r21, 0x3F	; 63
    328a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    328e:	88 23       	and	r24, r24
    3290:	2c f4       	brge	.+10     	; 0x329c <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	9a a3       	std	Y+34, r25	; 0x22
    3298:	89 a3       	std	Y+33, r24	; 0x21
    329a:	3f c0       	rjmp	.+126    	; 0x331a <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    329c:	6b a1       	ldd	r22, Y+35	; 0x23
    329e:	7c a1       	ldd	r23, Y+36	; 0x24
    32a0:	8d a1       	ldd	r24, Y+37	; 0x25
    32a2:	9e a1       	ldd	r25, Y+38	; 0x26
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	3f ef       	ldi	r19, 0xFF	; 255
    32a8:	4f e7       	ldi	r20, 0x7F	; 127
    32aa:	57 e4       	ldi	r21, 0x47	; 71
    32ac:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    32b0:	18 16       	cp	r1, r24
    32b2:	4c f5       	brge	.+82     	; 0x3306 <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b4:	6f a1       	ldd	r22, Y+39	; 0x27
    32b6:	78 a5       	ldd	r23, Y+40	; 0x28
    32b8:	89 a5       	ldd	r24, Y+41	; 0x29
    32ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e2       	ldi	r20, 0x20	; 32
    32c2:	51 e4       	ldi	r21, 0x41	; 65
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	bc 01       	movw	r22, r24
    32ce:	cd 01       	movw	r24, r26
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	9a a3       	std	Y+34, r25	; 0x22
    32da:	89 a3       	std	Y+33, r24	; 0x21
    32dc:	0f c0       	rjmp	.+30     	; 0x32fc <enu_PassByteAndLatch+0x140>
    32de:	80 e9       	ldi	r24, 0x90	; 144
    32e0:	91 e0       	ldi	r25, 0x01	; 1
    32e2:	98 a3       	std	Y+32, r25	; 0x20
    32e4:	8f 8f       	std	Y+31, r24	; 0x1f
    32e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32e8:	98 a1       	ldd	r25, Y+32	; 0x20
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <enu_PassByteAndLatch+0x12e>
    32ee:	98 a3       	std	Y+32, r25	; 0x20
    32f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f2:	89 a1       	ldd	r24, Y+33	; 0x21
    32f4:	9a a1       	ldd	r25, Y+34	; 0x22
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	9a a3       	std	Y+34, r25	; 0x22
    32fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fc:	89 a1       	ldd	r24, Y+33	; 0x21
    32fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	69 f7       	brne	.-38     	; 0x32de <enu_PassByteAndLatch+0x122>
    3304:	14 c0       	rjmp	.+40     	; 0x332e <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3306:	6b a1       	ldd	r22, Y+35	; 0x23
    3308:	7c a1       	ldd	r23, Y+36	; 0x24
    330a:	8d a1       	ldd	r24, Y+37	; 0x25
    330c:	9e a1       	ldd	r25, Y+38	; 0x26
    330e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	9a a3       	std	Y+34, r25	; 0x22
    3318:	89 a3       	std	Y+33, r24	; 0x21
    331a:	89 a1       	ldd	r24, Y+33	; 0x21
    331c:	9a a1       	ldd	r25, Y+34	; 0x22
    331e:	9e 8f       	std	Y+30, r25	; 0x1e
    3320:	8d 8f       	std	Y+29, r24	; 0x1d
    3322:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3324:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	f1 f7       	brne	.-4      	; 0x3326 <enu_PassByteAndLatch+0x16a>
    332a:	9e 8f       	std	Y+30, r25	; 0x1e
    332c:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	63 e0       	ldi	r22, 0x03	; 3
    3332:	40 e0       	ldi	r20, 0x00	; 0
    3334:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    3338:	8c a5       	ldd	r24, Y+44	; 0x2c
    333a:	86 95       	lsr	r24
    333c:	86 95       	lsr	r24
    333e:	86 95       	lsr	r24
    3340:	98 2f       	mov	r25, r24
    3342:	91 70       	andi	r25, 0x01	; 1
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	67 e0       	ldi	r22, 0x07	; 7
    3348:	49 2f       	mov	r20, r25
    334a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    334e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3350:	86 95       	lsr	r24
    3352:	86 95       	lsr	r24
    3354:	98 2f       	mov	r25, r24
    3356:	91 70       	andi	r25, 0x01	; 1
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	66 e0       	ldi	r22, 0x06	; 6
    335c:	49 2f       	mov	r20, r25
    335e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    3362:	8c a5       	ldd	r24, Y+44	; 0x2c
    3364:	86 95       	lsr	r24
    3366:	98 2f       	mov	r25, r24
    3368:	91 70       	andi	r25, 0x01	; 1
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	65 e0       	ldi	r22, 0x05	; 5
    336e:	49 2f       	mov	r20, r25
    3370:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    3374:	8c a5       	ldd	r24, Y+44	; 0x2c
    3376:	98 2f       	mov	r25, r24
    3378:	91 70       	andi	r25, 0x01	; 1
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	64 e0       	ldi	r22, 0x04	; 4
    337e:	49 2f       	mov	r20, r25
    3380:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	63 e0       	ldi	r22, 0x03	; 3
    3388:	41 e0       	ldi	r20, 0x01	; 1
    338a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	a0 e8       	ldi	r26, 0x80	; 128
    3394:	bf e3       	ldi	r27, 0x3F	; 63
    3396:	89 8f       	std	Y+25, r24	; 0x19
    3398:	9a 8f       	std	Y+26, r25	; 0x1a
    339a:	ab 8f       	std	Y+27, r26	; 0x1b
    339c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    339e:	69 8d       	ldd	r22, Y+25	; 0x19
    33a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	4a e7       	ldi	r20, 0x7A	; 122
    33ac:	55 e4       	ldi	r21, 0x45	; 69
    33ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	8d 8b       	std	Y+21, r24	; 0x15
    33b8:	9e 8b       	std	Y+22, r25	; 0x16
    33ba:	af 8b       	std	Y+23, r26	; 0x17
    33bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33be:	6d 89       	ldd	r22, Y+21	; 0x15
    33c0:	7e 89       	ldd	r23, Y+22	; 0x16
    33c2:	8f 89       	ldd	r24, Y+23	; 0x17
    33c4:	98 8d       	ldd	r25, Y+24	; 0x18
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e8       	ldi	r20, 0x80	; 128
    33cc:	5f e3       	ldi	r21, 0x3F	; 63
    33ce:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    33d2:	88 23       	and	r24, r24
    33d4:	2c f4       	brge	.+10     	; 0x33e0 <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	9c 8b       	std	Y+20, r25	; 0x14
    33dc:	8b 8b       	std	Y+19, r24	; 0x13
    33de:	3f c0       	rjmp	.+126    	; 0x345e <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    33e0:	6d 89       	ldd	r22, Y+21	; 0x15
    33e2:	7e 89       	ldd	r23, Y+22	; 0x16
    33e4:	8f 89       	ldd	r24, Y+23	; 0x17
    33e6:	98 8d       	ldd	r25, Y+24	; 0x18
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	3f ef       	ldi	r19, 0xFF	; 255
    33ec:	4f e7       	ldi	r20, 0x7F	; 127
    33ee:	57 e4       	ldi	r21, 0x47	; 71
    33f0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    33f4:	18 16       	cp	r1, r24
    33f6:	4c f5       	brge	.+82     	; 0x344a <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f8:	69 8d       	ldd	r22, Y+25	; 0x19
    33fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e2       	ldi	r20, 0x20	; 32
    3406:	51 e4       	ldi	r21, 0x41	; 65
    3408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	bc 01       	movw	r22, r24
    3412:	cd 01       	movw	r24, r26
    3414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	9c 8b       	std	Y+20, r25	; 0x14
    341e:	8b 8b       	std	Y+19, r24	; 0x13
    3420:	0f c0       	rjmp	.+30     	; 0x3440 <enu_PassByteAndLatch+0x284>
    3422:	80 e9       	ldi	r24, 0x90	; 144
    3424:	91 e0       	ldi	r25, 0x01	; 1
    3426:	9a 8b       	std	Y+18, r25	; 0x12
    3428:	89 8b       	std	Y+17, r24	; 0x11
    342a:	89 89       	ldd	r24, Y+17	; 0x11
    342c:	9a 89       	ldd	r25, Y+18	; 0x12
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	f1 f7       	brne	.-4      	; 0x342e <enu_PassByteAndLatch+0x272>
    3432:	9a 8b       	std	Y+18, r25	; 0x12
    3434:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3436:	8b 89       	ldd	r24, Y+19	; 0x13
    3438:	9c 89       	ldd	r25, Y+20	; 0x14
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	9c 8b       	std	Y+20, r25	; 0x14
    343e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3440:	8b 89       	ldd	r24, Y+19	; 0x13
    3442:	9c 89       	ldd	r25, Y+20	; 0x14
    3444:	00 97       	sbiw	r24, 0x00	; 0
    3446:	69 f7       	brne	.-38     	; 0x3422 <enu_PassByteAndLatch+0x266>
    3448:	14 c0       	rjmp	.+40     	; 0x3472 <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    344a:	6d 89       	ldd	r22, Y+21	; 0x15
    344c:	7e 89       	ldd	r23, Y+22	; 0x16
    344e:	8f 89       	ldd	r24, Y+23	; 0x17
    3450:	98 8d       	ldd	r25, Y+24	; 0x18
    3452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	9c 8b       	std	Y+20, r25	; 0x14
    345c:	8b 8b       	std	Y+19, r24	; 0x13
    345e:	8b 89       	ldd	r24, Y+19	; 0x13
    3460:	9c 89       	ldd	r25, Y+20	; 0x14
    3462:	98 8b       	std	Y+16, r25	; 0x10
    3464:	8f 87       	std	Y+15, r24	; 0x0f
    3466:	8f 85       	ldd	r24, Y+15	; 0x0f
    3468:	98 89       	ldd	r25, Y+16	; 0x10
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <enu_PassByteAndLatch+0x2ae>
    346e:	98 8b       	std	Y+16, r25	; 0x10
    3470:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	63 e0       	ldi	r22, 0x03	; 3
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	a0 e0       	ldi	r26, 0x00	; 0
    3482:	b0 e4       	ldi	r27, 0x40	; 64
    3484:	8b 87       	std	Y+11, r24	; 0x0b
    3486:	9c 87       	std	Y+12, r25	; 0x0c
    3488:	ad 87       	std	Y+13, r26	; 0x0d
    348a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348c:	6b 85       	ldd	r22, Y+11	; 0x0b
    348e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3490:	8d 85       	ldd	r24, Y+13	; 0x0d
    3492:	9e 85       	ldd	r25, Y+14	; 0x0e
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	4a e7       	ldi	r20, 0x7A	; 122
    349a:	55 e4       	ldi	r21, 0x45	; 69
    349c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	8f 83       	std	Y+7, r24	; 0x07
    34a6:	98 87       	std	Y+8, r25	; 0x08
    34a8:	a9 87       	std	Y+9, r26	; 0x09
    34aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34ac:	6f 81       	ldd	r22, Y+7	; 0x07
    34ae:	78 85       	ldd	r23, Y+8	; 0x08
    34b0:	89 85       	ldd	r24, Y+9	; 0x09
    34b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e8       	ldi	r20, 0x80	; 128
    34ba:	5f e3       	ldi	r21, 0x3F	; 63
    34bc:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    34c0:	88 23       	and	r24, r24
    34c2:	2c f4       	brge	.+10     	; 0x34ce <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	9e 83       	std	Y+6, r25	; 0x06
    34ca:	8d 83       	std	Y+5, r24	; 0x05
    34cc:	3f c0       	rjmp	.+126    	; 0x354c <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    34ce:	6f 81       	ldd	r22, Y+7	; 0x07
    34d0:	78 85       	ldd	r23, Y+8	; 0x08
    34d2:	89 85       	ldd	r24, Y+9	; 0x09
    34d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	3f ef       	ldi	r19, 0xFF	; 255
    34da:	4f e7       	ldi	r20, 0x7F	; 127
    34dc:	57 e4       	ldi	r21, 0x47	; 71
    34de:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    34e2:	18 16       	cp	r1, r24
    34e4:	4c f5       	brge	.+82     	; 0x3538 <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e2       	ldi	r20, 0x20	; 32
    34f4:	51 e4       	ldi	r21, 0x41	; 65
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	9e 83       	std	Y+6, r25	; 0x06
    350c:	8d 83       	std	Y+5, r24	; 0x05
    350e:	0f c0       	rjmp	.+30     	; 0x352e <enu_PassByteAndLatch+0x372>
    3510:	80 e9       	ldi	r24, 0x90	; 144
    3512:	91 e0       	ldi	r25, 0x01	; 1
    3514:	9c 83       	std	Y+4, r25	; 0x04
    3516:	8b 83       	std	Y+3, r24	; 0x03
    3518:	8b 81       	ldd	r24, Y+3	; 0x03
    351a:	9c 81       	ldd	r25, Y+4	; 0x04
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	f1 f7       	brne	.-4      	; 0x351c <enu_PassByteAndLatch+0x360>
    3520:	9c 83       	std	Y+4, r25	; 0x04
    3522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3524:	8d 81       	ldd	r24, Y+5	; 0x05
    3526:	9e 81       	ldd	r25, Y+6	; 0x06
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	9e 83       	std	Y+6, r25	; 0x06
    352c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352e:	8d 81       	ldd	r24, Y+5	; 0x05
    3530:	9e 81       	ldd	r25, Y+6	; 0x06
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	69 f7       	brne	.-38     	; 0x3510 <enu_PassByteAndLatch+0x354>
    3536:	14 c0       	rjmp	.+40     	; 0x3560 <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3538:	6f 81       	ldd	r22, Y+7	; 0x07
    353a:	78 85       	ldd	r23, Y+8	; 0x08
    353c:	89 85       	ldd	r24, Y+9	; 0x09
    353e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	9e 83       	std	Y+6, r25	; 0x06
    354a:	8d 83       	std	Y+5, r24	; 0x05
    354c:	8d 81       	ldd	r24, Y+5	; 0x05
    354e:	9e 81       	ldd	r25, Y+6	; 0x06
    3550:	9a 83       	std	Y+2, r25	; 0x02
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	9a 81       	ldd	r25, Y+2	; 0x02
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <enu_PassByteAndLatch+0x39c>
    355c:	9a 83       	std	Y+2, r25	; 0x02
    355e:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    3560:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    3562:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    3564:	ac 96       	adiw	r28, 0x2c	; 44
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	cf 91       	pop	r28
    3572:	df 91       	pop	r29
    3574:	08 95       	ret

00003576 <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    3576:	df 93       	push	r29
    3578:	cf 93       	push	r28
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
    357e:	27 97       	sbiw	r28, 0x07	; 7
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	de bf       	out	0x3e, r29	; 62
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	cd bf       	out	0x3d, r28	; 61
    358a:	9c 83       	std	Y+4, r25	; 0x04
    358c:	8b 83       	std	Y+3, r24	; 0x03
    358e:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    3594:	8b 81       	ldd	r24, Y+3	; 0x03
    3596:	9c 81       	ldd	r25, Y+4	; 0x04
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	09 f4       	brne	.+2      	; 0x359e <enu_AddCustomCharacter+0x28>
    359c:	79 c0       	rjmp	.+242    	; 0x3690 <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    359e:	8d 81       	ldd	r24, Y+5	; 0x05
    35a0:	88 30       	cpi	r24, 0x08	; 8
    35a2:	08 f0       	brcs	.+2      	; 0x35a6 <enu_AddCustomCharacter+0x30>
    35a4:	72 c0       	rjmp	.+228    	; 0x368a <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    35a6:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	61 e0       	ldi	r22, 0x01	; 1
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    35b2:	8d 81       	ldd	r24, Y+5	; 0x05
    35b4:	28 2f       	mov	r18, r24
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	3f 83       	std	Y+7, r19	; 0x07
    35ba:	2e 83       	std	Y+6, r18	; 0x06
    35bc:	8e 81       	ldd	r24, Y+6	; 0x06
    35be:	9f 81       	ldd	r25, Y+7	; 0x07
    35c0:	83 30       	cpi	r24, 0x03	; 3
    35c2:	91 05       	cpc	r25, r1
    35c4:	a9 f1       	breq	.+106    	; 0x3630 <enu_AddCustomCharacter+0xba>
    35c6:	2e 81       	ldd	r18, Y+6	; 0x06
    35c8:	3f 81       	ldd	r19, Y+7	; 0x07
    35ca:	24 30       	cpi	r18, 0x04	; 4
    35cc:	31 05       	cpc	r19, r1
    35ce:	7c f4       	brge	.+30     	; 0x35ee <enu_AddCustomCharacter+0x78>
    35d0:	8e 81       	ldd	r24, Y+6	; 0x06
    35d2:	9f 81       	ldd	r25, Y+7	; 0x07
    35d4:	81 30       	cpi	r24, 0x01	; 1
    35d6:	91 05       	cpc	r25, r1
    35d8:	19 f1       	breq	.+70     	; 0x3620 <enu_AddCustomCharacter+0xaa>
    35da:	2e 81       	ldd	r18, Y+6	; 0x06
    35dc:	3f 81       	ldd	r19, Y+7	; 0x07
    35de:	22 30       	cpi	r18, 0x02	; 2
    35e0:	31 05       	cpc	r19, r1
    35e2:	14 f5       	brge	.+68     	; 0x3628 <enu_AddCustomCharacter+0xb2>
    35e4:	8e 81       	ldd	r24, Y+6	; 0x06
    35e6:	9f 81       	ldd	r25, Y+7	; 0x07
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	b1 f0       	breq	.+44     	; 0x3618 <enu_AddCustomCharacter+0xa2>
    35ec:	34 c0       	rjmp	.+104    	; 0x3656 <enu_AddCustomCharacter+0xe0>
    35ee:	2e 81       	ldd	r18, Y+6	; 0x06
    35f0:	3f 81       	ldd	r19, Y+7	; 0x07
    35f2:	25 30       	cpi	r18, 0x05	; 5
    35f4:	31 05       	cpc	r19, r1
    35f6:	21 f1       	breq	.+72     	; 0x3640 <enu_AddCustomCharacter+0xca>
    35f8:	8e 81       	ldd	r24, Y+6	; 0x06
    35fa:	9f 81       	ldd	r25, Y+7	; 0x07
    35fc:	85 30       	cpi	r24, 0x05	; 5
    35fe:	91 05       	cpc	r25, r1
    3600:	dc f0       	brlt	.+54     	; 0x3638 <enu_AddCustomCharacter+0xc2>
    3602:	2e 81       	ldd	r18, Y+6	; 0x06
    3604:	3f 81       	ldd	r19, Y+7	; 0x07
    3606:	26 30       	cpi	r18, 0x06	; 6
    3608:	31 05       	cpc	r19, r1
    360a:	f1 f0       	breq	.+60     	; 0x3648 <enu_AddCustomCharacter+0xd2>
    360c:	8e 81       	ldd	r24, Y+6	; 0x06
    360e:	9f 81       	ldd	r25, Y+7	; 0x07
    3610:	87 30       	cpi	r24, 0x07	; 7
    3612:	91 05       	cpc	r25, r1
    3614:	e9 f0       	breq	.+58     	; 0x3650 <enu_AddCustomCharacter+0xda>
    3616:	1f c0       	rjmp	.+62     	; 0x3656 <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    3618:	80 e4       	ldi	r24, 0x40	; 64
    361a:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
    361e:	1b c0       	rjmp	.+54     	; 0x3656 <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    3620:	88 e4       	ldi	r24, 0x48	; 72
    3622:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
    3626:	17 c0       	rjmp	.+46     	; 0x3656 <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    3628:	80 e5       	ldi	r24, 0x50	; 80
    362a:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
    362e:	13 c0       	rjmp	.+38     	; 0x3656 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    3630:	88 e5       	ldi	r24, 0x58	; 88
    3632:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
    3636:	0f c0       	rjmp	.+30     	; 0x3656 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    3638:	80 e6       	ldi	r24, 0x60	; 96
    363a:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
    363e:	0b c0       	rjmp	.+22     	; 0x3656 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    3640:	88 e6       	ldi	r24, 0x68	; 104
    3642:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
    3646:	07 c0       	rjmp	.+14     	; 0x3656 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    3648:	80 e7       	ldi	r24, 0x70	; 112
    364a:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
    364e:	03 c0       	rjmp	.+6      	; 0x3656 <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    3650:	88 e7       	ldi	r24, 0x78	; 120
    3652:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	61 e0       	ldi	r22, 0x01	; 1
    365a:	41 e0       	ldi	r20, 0x01	; 1
    365c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    3660:	19 82       	std	Y+1, r1	; 0x01
    3662:	0e c0       	rjmp	.+28     	; 0x3680 <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	28 2f       	mov	r18, r24
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	8b 81       	ldd	r24, Y+3	; 0x03
    366c:	9c 81       	ldd	r25, Y+4	; 0x04
    366e:	fc 01       	movw	r30, r24
    3670:	e2 0f       	add	r30, r18
    3672:	f3 1f       	adc	r31, r19
    3674:	80 81       	ld	r24, Z
    3676:	0e 94 de 18 	call	0x31bc	; 0x31bc <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    367a:	89 81       	ldd	r24, Y+1	; 0x01
    367c:	8f 5f       	subi	r24, 0xFF	; 255
    367e:	89 83       	std	Y+1, r24	; 0x01
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	88 30       	cpi	r24, 0x08	; 8
    3684:	78 f3       	brcs	.-34     	; 0x3664 <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    3686:	1a 82       	std	Y+2, r1	; 0x02
    3688:	05 c0       	rjmp	.+10     	; 0x3694 <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    368a:	82 e0       	ldi	r24, 0x02	; 2
    368c:	8a 83       	std	Y+2, r24	; 0x02
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3690:	83 e0       	ldi	r24, 0x03	; 3
    3692:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3696:	27 96       	adiw	r28, 0x07	; 7
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	cf 91       	pop	r28
    36a4:	df 91       	pop	r29
    36a6:	08 95       	ret

000036a8 <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	00 d0       	rcall	.+0      	; 0x36ae <enu_ConvertDigitToASCII+0x6>
    36ae:	0f 92       	push	r0
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	9b 83       	std	Y+3, r25	; 0x03
    36b6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	9b 81       	ldd	r25, Y+3	; 0x03
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	89 f0       	breq	.+34     	; 0x36e6 <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    36c4:	ea 81       	ldd	r30, Y+2	; 0x02
    36c6:	fb 81       	ldd	r31, Y+3	; 0x03
    36c8:	80 81       	ld	r24, Z
    36ca:	8a 30       	cpi	r24, 0x0A	; 10
    36cc:	48 f4       	brcc	.+18     	; 0x36e0 <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    36ce:	ea 81       	ldd	r30, Y+2	; 0x02
    36d0:	fb 81       	ldd	r31, Y+3	; 0x03
    36d2:	80 81       	ld	r24, Z
    36d4:	80 5d       	subi	r24, 0xD0	; 208
    36d6:	ea 81       	ldd	r30, Y+2	; 0x02
    36d8:	fb 81       	ldd	r31, Y+3	; 0x03
    36da:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    36dc:	19 82       	std	Y+1, r1	; 0x01
    36de:	05 c0       	rjmp	.+10     	; 0x36ea <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    36e0:	82 e0       	ldi	r24, 0x02	; 2
    36e2:	89 83       	std	Y+1, r24	; 0x01
    36e4:	02 c0       	rjmp	.+4      	; 0x36ea <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    36e6:	83 e0       	ldi	r24, 0x03	; 3
    36e8:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	cf 91       	pop	r28
    36f4:	df 91       	pop	r29
    36f6:	08 95       	ret

000036f8 <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    36f8:	ef 92       	push	r14
    36fa:	ff 92       	push	r15
    36fc:	0f 93       	push	r16
    36fe:	1f 93       	push	r17
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	27 97       	sbiw	r28, 0x07	; 7
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	9f 83       	std	Y+7, r25	; 0x07
    3716:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    3718:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    371a:	8e 81       	ldd	r24, Y+6	; 0x06
    371c:	9f 81       	ldd	r25, Y+7	; 0x07
    371e:	00 97       	sbiw	r24, 0x00	; 0
    3720:	09 f4       	brne	.+2      	; 0x3724 <enu_ReverseInteger+0x2c>
    3722:	58 c0       	rjmp	.+176    	; 0x37d4 <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    3724:	19 82       	std	Y+1, r1	; 0x01
    3726:	1a 82       	std	Y+2, r1	; 0x02
    3728:	1b 82       	std	Y+3, r1	; 0x03
    372a:	1c 82       	std	Y+4, r1	; 0x04
    372c:	3c c0       	rjmp	.+120    	; 0x37a6 <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	9a 81       	ldd	r25, Y+2	; 0x02
    3732:	ab 81       	ldd	r26, Y+3	; 0x03
    3734:	bc 81       	ldd	r27, Y+4	; 0x04
    3736:	2a e0       	ldi	r18, 0x0A	; 10
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	40 e0       	ldi	r20, 0x00	; 0
    373c:	50 e0       	ldi	r21, 0x00	; 0
    373e:	bc 01       	movw	r22, r24
    3740:	cd 01       	movw	r24, r26
    3742:	0e 94 87 20 	call	0x410e	; 0x410e <__mulsi3>
    3746:	7b 01       	movw	r14, r22
    3748:	8c 01       	movw	r16, r24
    374a:	ee 81       	ldd	r30, Y+6	; 0x06
    374c:	ff 81       	ldd	r31, Y+7	; 0x07
    374e:	80 81       	ld	r24, Z
    3750:	91 81       	ldd	r25, Z+1	; 0x01
    3752:	a2 81       	ldd	r26, Z+2	; 0x02
    3754:	b3 81       	ldd	r27, Z+3	; 0x03
    3756:	2a e0       	ldi	r18, 0x0A	; 10
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	40 e0       	ldi	r20, 0x00	; 0
    375c:	50 e0       	ldi	r21, 0x00	; 0
    375e:	bc 01       	movw	r22, r24
    3760:	cd 01       	movw	r24, r26
    3762:	0e 94 a6 20 	call	0x414c	; 0x414c <__udivmodsi4>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	8e 0d       	add	r24, r14
    376c:	9f 1d       	adc	r25, r15
    376e:	a0 1f       	adc	r26, r16
    3770:	b1 1f       	adc	r27, r17
    3772:	89 83       	std	Y+1, r24	; 0x01
    3774:	9a 83       	std	Y+2, r25	; 0x02
    3776:	ab 83       	std	Y+3, r26	; 0x03
    3778:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    377a:	ee 81       	ldd	r30, Y+6	; 0x06
    377c:	ff 81       	ldd	r31, Y+7	; 0x07
    377e:	80 81       	ld	r24, Z
    3780:	91 81       	ldd	r25, Z+1	; 0x01
    3782:	a2 81       	ldd	r26, Z+2	; 0x02
    3784:	b3 81       	ldd	r27, Z+3	; 0x03
    3786:	2a e0       	ldi	r18, 0x0A	; 10
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 e0       	ldi	r20, 0x00	; 0
    378c:	50 e0       	ldi	r21, 0x00	; 0
    378e:	bc 01       	movw	r22, r24
    3790:	cd 01       	movw	r24, r26
    3792:	0e 94 a6 20 	call	0x414c	; 0x414c <__udivmodsi4>
    3796:	da 01       	movw	r26, r20
    3798:	c9 01       	movw	r24, r18
    379a:	ee 81       	ldd	r30, Y+6	; 0x06
    379c:	ff 81       	ldd	r31, Y+7	; 0x07
    379e:	80 83       	st	Z, r24
    37a0:	91 83       	std	Z+1, r25	; 0x01
    37a2:	a2 83       	std	Z+2, r26	; 0x02
    37a4:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    37a6:	ee 81       	ldd	r30, Y+6	; 0x06
    37a8:	ff 81       	ldd	r31, Y+7	; 0x07
    37aa:	80 81       	ld	r24, Z
    37ac:	91 81       	ldd	r25, Z+1	; 0x01
    37ae:	a2 81       	ldd	r26, Z+2	; 0x02
    37b0:	b3 81       	ldd	r27, Z+3	; 0x03
    37b2:	00 97       	sbiw	r24, 0x00	; 0
    37b4:	a1 05       	cpc	r26, r1
    37b6:	b1 05       	cpc	r27, r1
    37b8:	09 f0       	breq	.+2      	; 0x37bc <enu_ReverseInteger+0xc4>
    37ba:	b9 cf       	rjmp	.-142    	; 0x372e <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    37bc:	ee 81       	ldd	r30, Y+6	; 0x06
    37be:	ff 81       	ldd	r31, Y+7	; 0x07
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	9a 81       	ldd	r25, Y+2	; 0x02
    37c4:	ab 81       	ldd	r26, Y+3	; 0x03
    37c6:	bc 81       	ldd	r27, Y+4	; 0x04
    37c8:	80 83       	st	Z, r24
    37ca:	91 83       	std	Z+1, r25	; 0x01
    37cc:	a2 83       	std	Z+2, r26	; 0x02
    37ce:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    37d0:	1d 82       	std	Y+5, r1	; 0x05
    37d2:	02 c0       	rjmp	.+4      	; 0x37d8 <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    37d4:	83 e0       	ldi	r24, 0x03	; 3
    37d6:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    37d8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    37da:	27 96       	adiw	r28, 0x07	; 7
    37dc:	0f b6       	in	r0, 0x3f	; 63
    37de:	f8 94       	cli
    37e0:	de bf       	out	0x3e, r29	; 62
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	cd bf       	out	0x3d, r28	; 61
    37e6:	cf 91       	pop	r28
    37e8:	df 91       	pop	r29
    37ea:	1f 91       	pop	r17
    37ec:	0f 91       	pop	r16
    37ee:	ff 90       	pop	r15
    37f0:	ef 90       	pop	r14
    37f2:	08 95       	ret

000037f4 <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	00 d0       	rcall	.+0      	; 0x37fa <Keypad_enu_Initialization+0x6>
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    3802:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    3804:	19 82       	std	Y+1, r1	; 0x01
    3806:	31 c0       	rjmp	.+98     	; 0x386a <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	88 2f       	mov	r24, r24
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	88 0f       	add	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	fc 01       	movw	r30, r24
    3814:	e9 56       	subi	r30, 0x69	; 105
    3816:	fe 4f       	sbci	r31, 0xFE	; 254
    3818:	20 81       	ld	r18, Z
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	88 2f       	mov	r24, r24
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	88 0f       	add	r24, r24
    3822:	99 1f       	adc	r25, r25
    3824:	fc 01       	movw	r30, r24
    3826:	e8 56       	subi	r30, 0x68	; 104
    3828:	fe 4f       	sbci	r31, 0xFE	; 254
    382a:	90 81       	ld	r25, Z
    382c:	82 2f       	mov	r24, r18
    382e:	69 2f       	mov	r22, r25
    3830:	40 e0       	ldi	r20, 0x00	; 0
    3832:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    3836:	89 81       	ldd	r24, Y+1	; 0x01
    3838:	88 2f       	mov	r24, r24
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	88 0f       	add	r24, r24
    383e:	99 1f       	adc	r25, r25
    3840:	fc 01       	movw	r30, r24
    3842:	e9 56       	subi	r30, 0x69	; 105
    3844:	fe 4f       	sbci	r31, 0xFE	; 254
    3846:	20 81       	ld	r18, Z
    3848:	89 81       	ldd	r24, Y+1	; 0x01
    384a:	88 2f       	mov	r24, r24
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	88 0f       	add	r24, r24
    3850:	99 1f       	adc	r25, r25
    3852:	fc 01       	movw	r30, r24
    3854:	e8 56       	subi	r30, 0x68	; 104
    3856:	fe 4f       	sbci	r31, 0xFE	; 254
    3858:	90 81       	ld	r25, Z
    385a:	82 2f       	mov	r24, r18
    385c:	69 2f       	mov	r22, r25
    385e:	41 e0       	ldi	r20, 0x01	; 1
    3860:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    3864:	89 81       	ldd	r24, Y+1	; 0x01
    3866:	8f 5f       	subi	r24, 0xFF	; 255
    3868:	89 83       	std	Y+1, r24	; 0x01
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	84 30       	cpi	r24, 0x04	; 4
    386e:	60 f2       	brcs	.-104    	; 0x3808 <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    3870:	19 82       	std	Y+1, r1	; 0x01
    3872:	31 c0       	rjmp	.+98     	; 0x38d6 <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    3874:	89 81       	ldd	r24, Y+1	; 0x01
    3876:	88 2f       	mov	r24, r24
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	88 0f       	add	r24, r24
    387c:	99 1f       	adc	r25, r25
    387e:	fc 01       	movw	r30, r24
    3880:	e1 56       	subi	r30, 0x61	; 97
    3882:	fe 4f       	sbci	r31, 0xFE	; 254
    3884:	20 81       	ld	r18, Z
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	88 2f       	mov	r24, r24
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	88 0f       	add	r24, r24
    388e:	99 1f       	adc	r25, r25
    3890:	fc 01       	movw	r30, r24
    3892:	e0 56       	subi	r30, 0x60	; 96
    3894:	fe 4f       	sbci	r31, 0xFE	; 254
    3896:	90 81       	ld	r25, Z
    3898:	82 2f       	mov	r24, r18
    389a:	69 2f       	mov	r22, r25
    389c:	41 e0       	ldi	r20, 0x01	; 1
    389e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    38a2:	89 81       	ldd	r24, Y+1	; 0x01
    38a4:	88 2f       	mov	r24, r24
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	88 0f       	add	r24, r24
    38aa:	99 1f       	adc	r25, r25
    38ac:	fc 01       	movw	r30, r24
    38ae:	e1 56       	subi	r30, 0x61	; 97
    38b0:	fe 4f       	sbci	r31, 0xFE	; 254
    38b2:	20 81       	ld	r18, Z
    38b4:	89 81       	ldd	r24, Y+1	; 0x01
    38b6:	88 2f       	mov	r24, r24
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	88 0f       	add	r24, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	fc 01       	movw	r30, r24
    38c0:	e0 56       	subi	r30, 0x60	; 96
    38c2:	fe 4f       	sbci	r31, 0xFE	; 254
    38c4:	90 81       	ld	r25, Z
    38c6:	82 2f       	mov	r24, r18
    38c8:	69 2f       	mov	r22, r25
    38ca:	40 e0       	ldi	r20, 0x00	; 0
    38cc:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	8f 5f       	subi	r24, 0xFF	; 255
    38d4:	89 83       	std	Y+1, r24	; 0x01
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	84 30       	cpi	r24, 0x04	; 4
    38da:	60 f2       	brcs	.-104    	; 0x3874 <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    38dc:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    38de:	8a 81       	ldd	r24, Y+2	; 0x02

}
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
    38e4:	cf 91       	pop	r28
    38e6:	df 91       	pop	r29
    38e8:	08 95       	ret

000038ea <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
    38f2:	aa 97       	sbiw	r28, 0x2a	; 42
    38f4:	0f b6       	in	r0, 0x3f	; 63
    38f6:	f8 94       	cli
    38f8:	de bf       	out	0x3e, r29	; 62
    38fa:	0f be       	out	0x3f, r0	; 63
    38fc:	cd bf       	out	0x3d, r28	; 61
    38fe:	9d a3       	std	Y+37, r25	; 0x25
    3900:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    3906:	8c a1       	ldd	r24, Y+36	; 0x24
    3908:	9d a1       	ldd	r25, Y+37	; 0x25
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	09 f4       	brne	.+2      	; 0x3910 <Keypad_enu_GetButtonPressedValue+0x26>
    390e:	68 c1       	rjmp	.+720    	; 0x3be0 <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    3910:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    3912:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    3914:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    3916:	ec a1       	ldd	r30, Y+36	; 0x24
    3918:	fd a1       	ldd	r31, Y+37	; 0x25
    391a:	8f ef       	ldi	r24, 0xFF	; 255
    391c:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    391e:	19 8a       	std	Y+17, r1	; 0x11
    3920:	5a c1       	rjmp	.+692    	; 0x3bd6 <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    3922:	89 89       	ldd	r24, Y+17	; 0x11
    3924:	88 2f       	mov	r24, r24
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	88 0f       	add	r24, r24
    392a:	99 1f       	adc	r25, r25
    392c:	fc 01       	movw	r30, r24
    392e:	e9 56       	subi	r30, 0x69	; 105
    3930:	fe 4f       	sbci	r31, 0xFE	; 254
    3932:	40 81       	ld	r20, Z
    3934:	89 89       	ldd	r24, Y+17	; 0x11
    3936:	88 2f       	mov	r24, r24
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	88 0f       	add	r24, r24
    393c:	99 1f       	adc	r25, r25
    393e:	fc 01       	movw	r30, r24
    3940:	e8 56       	subi	r30, 0x68	; 104
    3942:	fe 4f       	sbci	r31, 0xFE	; 254
    3944:	90 81       	ld	r25, Z
    3946:	9e 01       	movw	r18, r28
    3948:	2d 5e       	subi	r18, 0xED	; 237
    394a:	3f 4f       	sbci	r19, 0xFF	; 255
    394c:	84 2f       	mov	r24, r20
    394e:	69 2f       	mov	r22, r25
    3950:	a9 01       	movw	r20, r18
    3952:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    3956:	8b 89       	ldd	r24, Y+19	; 0x13
    3958:	88 23       	and	r24, r24
    395a:	09 f0       	breq	.+2      	; 0x395e <Keypad_enu_GetButtonPressedValue+0x74>
    395c:	36 c1       	rjmp	.+620    	; 0x3bca <Keypad_enu_GetButtonPressedValue+0x2e0>
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	a0 e4       	ldi	r26, 0x40	; 64
    3964:	b0 e4       	ldi	r27, 0x40	; 64
    3966:	8b 87       	std	Y+11, r24	; 0x0b
    3968:	9c 87       	std	Y+12, r25	; 0x0c
    396a:	ad 87       	std	Y+13, r26	; 0x0d
    396c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    396e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3970:	7c 85       	ldd	r23, Y+12	; 0x0c
    3972:	8d 85       	ldd	r24, Y+13	; 0x0d
    3974:	9e 85       	ldd	r25, Y+14	; 0x0e
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	4a e7       	ldi	r20, 0x7A	; 122
    397c:	55 e4       	ldi	r21, 0x45	; 69
    397e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	8f 83       	std	Y+7, r24	; 0x07
    3988:	98 87       	std	Y+8, r25	; 0x08
    398a:	a9 87       	std	Y+9, r26	; 0x09
    398c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    398e:	6f 81       	ldd	r22, Y+7	; 0x07
    3990:	78 85       	ldd	r23, Y+8	; 0x08
    3992:	89 85       	ldd	r24, Y+9	; 0x09
    3994:	9a 85       	ldd	r25, Y+10	; 0x0a
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	40 e8       	ldi	r20, 0x80	; 128
    399c:	5f e3       	ldi	r21, 0x3F	; 63
    399e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    39a2:	88 23       	and	r24, r24
    39a4:	2c f4       	brge	.+10     	; 0x39b0 <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	9e 83       	std	Y+6, r25	; 0x06
    39ac:	8d 83       	std	Y+5, r24	; 0x05
    39ae:	3f c0       	rjmp	.+126    	; 0x3a2e <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    39b0:	6f 81       	ldd	r22, Y+7	; 0x07
    39b2:	78 85       	ldd	r23, Y+8	; 0x08
    39b4:	89 85       	ldd	r24, Y+9	; 0x09
    39b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	3f ef       	ldi	r19, 0xFF	; 255
    39bc:	4f e7       	ldi	r20, 0x7F	; 127
    39be:	57 e4       	ldi	r21, 0x47	; 71
    39c0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    39c4:	18 16       	cp	r1, r24
    39c6:	4c f5       	brge	.+82     	; 0x3a1a <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    39cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	40 e2       	ldi	r20, 0x20	; 32
    39d6:	51 e4       	ldi	r21, 0x41	; 65
    39d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39dc:	dc 01       	movw	r26, r24
    39de:	cb 01       	movw	r24, r22
    39e0:	bc 01       	movw	r22, r24
    39e2:	cd 01       	movw	r24, r26
    39e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	9e 83       	std	Y+6, r25	; 0x06
    39ee:	8d 83       	std	Y+5, r24	; 0x05
    39f0:	0f c0       	rjmp	.+30     	; 0x3a10 <Keypad_enu_GetButtonPressedValue+0x126>
    39f2:	80 e9       	ldi	r24, 0x90	; 144
    39f4:	91 e0       	ldi	r25, 0x01	; 1
    39f6:	9c 83       	std	Y+4, r25	; 0x04
    39f8:	8b 83       	std	Y+3, r24	; 0x03
    39fa:	8b 81       	ldd	r24, Y+3	; 0x03
    39fc:	9c 81       	ldd	r25, Y+4	; 0x04
    39fe:	01 97       	sbiw	r24, 0x01	; 1
    3a00:	f1 f7       	brne	.-4      	; 0x39fe <Keypad_enu_GetButtonPressedValue+0x114>
    3a02:	9c 83       	std	Y+4, r25	; 0x04
    3a04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a06:	8d 81       	ldd	r24, Y+5	; 0x05
    3a08:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	9e 83       	std	Y+6, r25	; 0x06
    3a0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a10:	8d 81       	ldd	r24, Y+5	; 0x05
    3a12:	9e 81       	ldd	r25, Y+6	; 0x06
    3a14:	00 97       	sbiw	r24, 0x00	; 0
    3a16:	69 f7       	brne	.-38     	; 0x39f2 <Keypad_enu_GetButtonPressedValue+0x108>
    3a18:	14 c0       	rjmp	.+40     	; 0x3a42 <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1c:	78 85       	ldd	r23, Y+8	; 0x08
    3a1e:	89 85       	ldd	r24, Y+9	; 0x09
    3a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a26:	dc 01       	movw	r26, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	9e 83       	std	Y+6, r25	; 0x06
    3a2c:	8d 83       	std	Y+5, r24	; 0x05
    3a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a30:	9e 81       	ldd	r25, Y+6	; 0x06
    3a32:	9a 83       	std	Y+2, r25	; 0x02
    3a34:	89 83       	std	Y+1, r24	; 0x01
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	f1 f7       	brne	.-4      	; 0x3a3a <Keypad_enu_GetButtonPressedValue+0x150>
    3a3e:	9a 83       	std	Y+2, r25	; 0x02
    3a40:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    3a42:	89 89       	ldd	r24, Y+17	; 0x11
    3a44:	88 2f       	mov	r24, r24
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	88 0f       	add	r24, r24
    3a4a:	99 1f       	adc	r25, r25
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	e9 56       	subi	r30, 0x69	; 105
    3a50:	fe 4f       	sbci	r31, 0xFE	; 254
    3a52:	40 81       	ld	r20, Z
    3a54:	89 89       	ldd	r24, Y+17	; 0x11
    3a56:	88 2f       	mov	r24, r24
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	88 0f       	add	r24, r24
    3a5c:	99 1f       	adc	r25, r25
    3a5e:	fc 01       	movw	r30, r24
    3a60:	e8 56       	subi	r30, 0x68	; 104
    3a62:	fe 4f       	sbci	r31, 0xFE	; 254
    3a64:	90 81       	ld	r25, Z
    3a66:	9e 01       	movw	r18, r28
    3a68:	2d 5e       	subi	r18, 0xED	; 237
    3a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a6c:	84 2f       	mov	r24, r20
    3a6e:	69 2f       	mov	r22, r25
    3a70:	a9 01       	movw	r20, r18
    3a72:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    3a76:	8b 89       	ldd	r24, Y+19	; 0x13
    3a78:	88 23       	and	r24, r24
    3a7a:	09 f0       	breq	.+2      	; 0x3a7e <Keypad_enu_GetButtonPressedValue+0x194>
    3a7c:	a6 c0       	rjmp	.+332    	; 0x3bca <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    3a7e:	18 8a       	std	Y+16, r1	; 0x10
    3a80:	a0 c0       	rjmp	.+320    	; 0x3bc2 <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    3a82:	88 89       	ldd	r24, Y+16	; 0x10
    3a84:	88 2f       	mov	r24, r24
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	88 0f       	add	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	e1 56       	subi	r30, 0x61	; 97
    3a90:	fe 4f       	sbci	r31, 0xFE	; 254
    3a92:	20 81       	ld	r18, Z
    3a94:	88 89       	ldd	r24, Y+16	; 0x10
    3a96:	88 2f       	mov	r24, r24
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	e0 56       	subi	r30, 0x60	; 96
    3aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa4:	90 81       	ld	r25, Z
    3aa6:	82 2f       	mov	r24, r18
    3aa8:	69 2f       	mov	r22, r25
    3aaa:	41 e0       	ldi	r20, 0x01	; 1
    3aac:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    3ab0:	89 89       	ldd	r24, Y+17	; 0x11
    3ab2:	88 2f       	mov	r24, r24
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	88 0f       	add	r24, r24
    3ab8:	99 1f       	adc	r25, r25
    3aba:	fc 01       	movw	r30, r24
    3abc:	e9 56       	subi	r30, 0x69	; 105
    3abe:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac0:	40 81       	ld	r20, Z
    3ac2:	89 89       	ldd	r24, Y+17	; 0x11
    3ac4:	88 2f       	mov	r24, r24
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	88 0f       	add	r24, r24
    3aca:	99 1f       	adc	r25, r25
    3acc:	fc 01       	movw	r30, r24
    3ace:	e8 56       	subi	r30, 0x68	; 104
    3ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad2:	90 81       	ld	r25, Z
    3ad4:	9e 01       	movw	r18, r28
    3ad6:	2d 5e       	subi	r18, 0xED	; 237
    3ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ada:	84 2f       	mov	r24, r20
    3adc:	69 2f       	mov	r22, r25
    3ade:	a9 01       	movw	r20, r18
    3ae0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    3ae4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae6:	81 30       	cpi	r24, 0x01	; 1
    3ae8:	09 f0       	breq	.+2      	; 0x3aec <Keypad_enu_GetButtonPressedValue+0x202>
    3aea:	51 c0       	rjmp	.+162    	; 0x3b8e <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    3aec:	ce 01       	movw	r24, r28
    3aee:	44 96       	adiw	r24, 0x14	; 20
    3af0:	9f a3       	std	Y+39, r25	; 0x27
    3af2:	8e a3       	std	Y+38, r24	; 0x26
    3af4:	ea ea       	ldi	r30, 0xAA	; 170
    3af6:	f1 e0       	ldi	r31, 0x01	; 1
    3af8:	f9 a7       	std	Y+41, r31	; 0x29
    3afa:	e8 a7       	std	Y+40, r30	; 0x28
    3afc:	f0 e1       	ldi	r31, 0x10	; 16
    3afe:	fa a7       	std	Y+42, r31	; 0x2a
    3b00:	e8 a5       	ldd	r30, Y+40	; 0x28
    3b02:	f9 a5       	ldd	r31, Y+41	; 0x29
    3b04:	00 80       	ld	r0, Z
    3b06:	88 a5       	ldd	r24, Y+40	; 0x28
    3b08:	99 a5       	ldd	r25, Y+41	; 0x29
    3b0a:	01 96       	adiw	r24, 0x01	; 1
    3b0c:	99 a7       	std	Y+41, r25	; 0x29
    3b0e:	88 a7       	std	Y+40, r24	; 0x28
    3b10:	ee a1       	ldd	r30, Y+38	; 0x26
    3b12:	ff a1       	ldd	r31, Y+39	; 0x27
    3b14:	00 82       	st	Z, r0
    3b16:	8e a1       	ldd	r24, Y+38	; 0x26
    3b18:	9f a1       	ldd	r25, Y+39	; 0x27
    3b1a:	01 96       	adiw	r24, 0x01	; 1
    3b1c:	9f a3       	std	Y+39, r25	; 0x27
    3b1e:	8e a3       	std	Y+38, r24	; 0x26
    3b20:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b22:	91 50       	subi	r25, 0x01	; 1
    3b24:	9a a7       	std	Y+42, r25	; 0x2a
    3b26:	ea a5       	ldd	r30, Y+42	; 0x2a
    3b28:	ee 23       	and	r30, r30
    3b2a:	51 f7       	brne	.-44     	; 0x3b00 <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    3b2c:	89 89       	ldd	r24, Y+17	; 0x11
    3b2e:	28 2f       	mov	r18, r24
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	88 89       	ldd	r24, Y+16	; 0x10
    3b34:	48 2f       	mov	r20, r24
    3b36:	50 e0       	ldi	r21, 0x00	; 0
    3b38:	22 0f       	add	r18, r18
    3b3a:	33 1f       	adc	r19, r19
    3b3c:	22 0f       	add	r18, r18
    3b3e:	33 1f       	adc	r19, r19
    3b40:	ce 01       	movw	r24, r28
    3b42:	01 96       	adiw	r24, 0x01	; 1
    3b44:	82 0f       	add	r24, r18
    3b46:	93 1f       	adc	r25, r19
    3b48:	84 0f       	add	r24, r20
    3b4a:	95 1f       	adc	r25, r21
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	73 96       	adiw	r30, 0x13	; 19
    3b50:	80 81       	ld	r24, Z
    3b52:	ec a1       	ldd	r30, Y+36	; 0x24
    3b54:	fd a1       	ldd	r31, Y+37	; 0x25
    3b56:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    3b5c:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    3b5e:	88 89       	ldd	r24, Y+16	; 0x10
    3b60:	88 2f       	mov	r24, r24
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	88 0f       	add	r24, r24
    3b66:	99 1f       	adc	r25, r25
    3b68:	fc 01       	movw	r30, r24
    3b6a:	e1 56       	subi	r30, 0x61	; 97
    3b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b6e:	20 81       	ld	r18, Z
    3b70:	88 89       	ldd	r24, Y+16	; 0x10
    3b72:	88 2f       	mov	r24, r24
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	88 0f       	add	r24, r24
    3b78:	99 1f       	adc	r25, r25
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	e0 56       	subi	r30, 0x60	; 96
    3b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b80:	90 81       	ld	r25, Z
    3b82:	82 2f       	mov	r24, r18
    3b84:	69 2f       	mov	r22, r25
    3b86:	40 e0       	ldi	r20, 0x00	; 0
    3b88:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    3b8c:	1e c0       	rjmp	.+60     	; 0x3bca <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    3b8e:	88 89       	ldd	r24, Y+16	; 0x10
    3b90:	88 2f       	mov	r24, r24
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	88 0f       	add	r24, r24
    3b96:	99 1f       	adc	r25, r25
    3b98:	fc 01       	movw	r30, r24
    3b9a:	e1 56       	subi	r30, 0x61	; 97
    3b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b9e:	20 81       	ld	r18, Z
    3ba0:	88 89       	ldd	r24, Y+16	; 0x10
    3ba2:	88 2f       	mov	r24, r24
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	88 0f       	add	r24, r24
    3ba8:	99 1f       	adc	r25, r25
    3baa:	fc 01       	movw	r30, r24
    3bac:	e0 56       	subi	r30, 0x60	; 96
    3bae:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb0:	90 81       	ld	r25, Z
    3bb2:	82 2f       	mov	r24, r18
    3bb4:	69 2f       	mov	r22, r25
    3bb6:	40 e0       	ldi	r20, 0x00	; 0
    3bb8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    3bbc:	88 89       	ldd	r24, Y+16	; 0x10
    3bbe:	8f 5f       	subi	r24, 0xFF	; 255
    3bc0:	88 8b       	std	Y+16, r24	; 0x10
    3bc2:	88 89       	ldd	r24, Y+16	; 0x10
    3bc4:	84 30       	cpi	r24, 0x04	; 4
    3bc6:	08 f4       	brcc	.+2      	; 0x3bca <Keypad_enu_GetButtonPressedValue+0x2e0>
    3bc8:	5c cf       	rjmp	.-328    	; 0x3a82 <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    3bca:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bcc:	88 23       	and	r24, r24
    3bce:	51 f4       	brne	.+20     	; 0x3be4 <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    3bd0:	89 89       	ldd	r24, Y+17	; 0x11
    3bd2:	8f 5f       	subi	r24, 0xFF	; 255
    3bd4:	89 8b       	std	Y+17, r24	; 0x11
    3bd6:	89 89       	ldd	r24, Y+17	; 0x11
    3bd8:	84 30       	cpi	r24, 0x04	; 4
    3bda:	08 f4       	brcc	.+2      	; 0x3bde <Keypad_enu_GetButtonPressedValue+0x2f4>
    3bdc:	a2 ce       	rjmp	.-700    	; 0x3922 <Keypad_enu_GetButtonPressedValue+0x38>
    3bde:	02 c0       	rjmp	.+4      	; 0x3be4 <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3be0:	83 e0       	ldi	r24, 0x03	; 3
    3be2:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    3be4:	8a 89       	ldd	r24, Y+18	; 0x12

}
    3be6:	aa 96       	adiw	r28, 0x2a	; 42
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	cf 91       	pop	r28
    3bf4:	df 91       	pop	r29
    3bf6:	08 95       	ret

00003bf8 <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    3bf8:	df 93       	push	r29
    3bfa:	cf 93       	push	r28
    3bfc:	0f 92       	push	r0
    3bfe:	cd b7       	in	r28, 0x3d	; 61
    3c00:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	64 e0       	ldi	r22, 0x04	; 4
    3c0a:	41 e0       	ldi	r20, 0x01	; 1
    3c0c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	65 e0       	ldi	r22, 0x05	; 5
    3c14:	41 e0       	ldi	r20, 0x01	; 1
    3c16:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	66 e0       	ldi	r22, 0x06	; 6
    3c1e:	41 e0       	ldi	r20, 0x01	; 1
    3c20:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	67 e0       	ldi	r22, 0x07	; 7
    3c28:	41 e0       	ldi	r20, 0x01	; 1
    3c2a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	62 e0       	ldi	r22, 0x02	; 2
    3c32:	41 e0       	ldi	r20, 0x01	; 1
    3c34:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	61 e0       	ldi	r22, 0x01	; 1
    3c3c:	41 e0       	ldi	r20, 0x01	; 1
    3c3e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    3c42:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    3c44:	89 81       	ldd	r24, Y+1	; 0x01

}
    3c46:	0f 90       	pop	r0
    3c48:	cf 91       	pop	r28
    3c4a:	df 91       	pop	r29
    3c4c:	08 95       	ret

00003c4e <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    3c4e:	df 93       	push	r29
    3c50:	cf 93       	push	r28
    3c52:	00 d0       	rcall	.+0      	; 0x3c54 <Hexadecoder_enu_DisplayNum+0x6>
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    3c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c60:	8a 30       	cpi	r24, 0x0A	; 10
    3c62:	40 f5       	brcc	.+80     	; 0x3cb4 <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    3c64:	8a 81       	ldd	r24, Y+2	; 0x02
    3c66:	98 2f       	mov	r25, r24
    3c68:	91 70       	andi	r25, 0x01	; 1
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	64 e0       	ldi	r22, 0x04	; 4
    3c6e:	49 2f       	mov	r20, r25
    3c70:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    3c74:	8a 81       	ldd	r24, Y+2	; 0x02
    3c76:	86 95       	lsr	r24
    3c78:	98 2f       	mov	r25, r24
    3c7a:	91 70       	andi	r25, 0x01	; 1
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	65 e0       	ldi	r22, 0x05	; 5
    3c80:	49 2f       	mov	r20, r25
    3c82:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    3c86:	8a 81       	ldd	r24, Y+2	; 0x02
    3c88:	86 95       	lsr	r24
    3c8a:	86 95       	lsr	r24
    3c8c:	98 2f       	mov	r25, r24
    3c8e:	91 70       	andi	r25, 0x01	; 1
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	66 e0       	ldi	r22, 0x06	; 6
    3c94:	49 2f       	mov	r20, r25
    3c96:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    3c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9c:	86 95       	lsr	r24
    3c9e:	86 95       	lsr	r24
    3ca0:	86 95       	lsr	r24
    3ca2:	98 2f       	mov	r25, r24
    3ca4:	91 70       	andi	r25, 0x01	; 1
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	67 e0       	ldi	r22, 0x07	; 7
    3caa:	49 2f       	mov	r20, r25
    3cac:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    3cb0:	19 82       	std	Y+1, r1	; 0x01
    3cb2:	02 c0       	rjmp	.+4      	; 0x3cb8 <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3cb4:	82 e0       	ldi	r24, 0x02	; 2
    3cb6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	cf 91       	pop	r28
    3cc0:	df 91       	pop	r29
    3cc2:	08 95       	ret

00003cc4 <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    3cc4:	df 93       	push	r29
    3cc6:	cf 93       	push	r28
    3cc8:	00 d0       	rcall	.+0      	; 0x3cca <Hexadecoder_enu_EnableSSG+0x6>
    3cca:	00 d0       	rcall	.+0      	; 0x3ccc <Hexadecoder_enu_EnableSSG+0x8>
    3ccc:	cd b7       	in	r28, 0x3d	; 61
    3cce:	de b7       	in	r29, 0x3e	; 62
    3cd0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    3cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd8:	28 2f       	mov	r18, r24
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	3c 83       	std	Y+4, r19	; 0x04
    3cde:	2b 83       	std	Y+3, r18	; 0x03
    3ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce4:	00 97       	sbiw	r24, 0x00	; 0
    3ce6:	31 f0       	breq	.+12     	; 0x3cf4 <Hexadecoder_enu_EnableSSG+0x30>
    3ce8:	2b 81       	ldd	r18, Y+3	; 0x03
    3cea:	3c 81       	ldd	r19, Y+4	; 0x04
    3cec:	21 30       	cpi	r18, 0x01	; 1
    3cee:	31 05       	cpc	r19, r1
    3cf0:	41 f0       	breq	.+16     	; 0x3d02 <Hexadecoder_enu_EnableSSG+0x3e>
    3cf2:	0e c0       	rjmp	.+28     	; 0x3d10 <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	62 e0       	ldi	r22, 0x02	; 2
    3cf8:	41 e0       	ldi	r20, 0x01	; 1
    3cfa:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    3cfe:	19 82       	std	Y+1, r1	; 0x01
    3d00:	09 c0       	rjmp	.+18     	; 0x3d14 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	61 e0       	ldi	r22, 0x01	; 1
    3d06:	41 e0       	ldi	r20, 0x01	; 1
    3d08:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    3d0c:	19 82       	std	Y+1, r1	; 0x01
    3d0e:	02 c0       	rjmp	.+4      	; 0x3d14 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3d10:	82 e0       	ldi	r24, 0x02	; 2
    3d12:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    3d14:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d16:	0f 90       	pop	r0
    3d18:	0f 90       	pop	r0
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	08 95       	ret

00003d24 <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	00 d0       	rcall	.+0      	; 0x3d2a <Hexadecoder_enu_DisableSSG+0x6>
    3d2a:	00 d0       	rcall	.+0      	; 0x3d2c <Hexadecoder_enu_DisableSSG+0x8>
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    3d36:	8a 81       	ldd	r24, Y+2	; 0x02
    3d38:	28 2f       	mov	r18, r24
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	3c 83       	std	Y+4, r19	; 0x04
    3d3e:	2b 83       	std	Y+3, r18	; 0x03
    3d40:	8b 81       	ldd	r24, Y+3	; 0x03
    3d42:	9c 81       	ldd	r25, Y+4	; 0x04
    3d44:	00 97       	sbiw	r24, 0x00	; 0
    3d46:	31 f0       	breq	.+12     	; 0x3d54 <Hexadecoder_enu_DisableSSG+0x30>
    3d48:	2b 81       	ldd	r18, Y+3	; 0x03
    3d4a:	3c 81       	ldd	r19, Y+4	; 0x04
    3d4c:	21 30       	cpi	r18, 0x01	; 1
    3d4e:	31 05       	cpc	r19, r1
    3d50:	41 f0       	breq	.+16     	; 0x3d62 <Hexadecoder_enu_DisableSSG+0x3e>
    3d52:	0e c0       	rjmp	.+28     	; 0x3d70 <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	62 e0       	ldi	r22, 0x02	; 2
    3d58:	40 e0       	ldi	r20, 0x00	; 0
    3d5a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    3d5e:	19 82       	std	Y+1, r1	; 0x01
    3d60:	09 c0       	rjmp	.+18     	; 0x3d74 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	61 e0       	ldi	r22, 0x01	; 1
    3d66:	40 e0       	ldi	r20, 0x00	; 0
    3d68:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    3d6c:	19 82       	std	Y+1, r1	; 0x01
    3d6e:	02 c0       	rjmp	.+4      	; 0x3d74 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3d70:	82 e0       	ldi	r24, 0x02	; 2
    3d72:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    3d74:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	cf 91       	pop	r28
    3d80:	df 91       	pop	r29
    3d82:	08 95       	ret

00003d84 <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    3d84:	df 93       	push	r29
    3d86:	cf 93       	push	r28
    3d88:	0f 92       	push	r0
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	62 e0       	ldi	r22, 0x02	; 2
    3d96:	40 e0       	ldi	r20, 0x00	; 0
    3d98:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    3d9c:	81 e0       	ldi	r24, 0x01	; 1
    3d9e:	61 e0       	ldi	r22, 0x01	; 1
    3da0:	40 e0       	ldi	r20, 0x00	; 0
    3da2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
}
    3da8:	0f 90       	pop	r0
    3daa:	cf 91       	pop	r28
    3dac:	df 91       	pop	r29
    3dae:	08 95       	ret

00003db0 <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    3db0:	df 93       	push	r29
    3db2:	cf 93       	push	r28
    3db4:	00 d0       	rcall	.+0      	; 0x3db6 <Buzzer_enu_Initialization+0x6>
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3dbe:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3dc0:	19 82       	std	Y+1, r1	; 0x01
    3dc2:	31 c0       	rjmp	.+98     	; 0x3e26 <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    3dc4:	89 81       	ldd	r24, Y+1	; 0x01
    3dc6:	88 2f       	mov	r24, r24
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	88 0f       	add	r24, r24
    3dcc:	99 1f       	adc	r25, r25
    3dce:	fc 01       	movw	r30, r24
    3dd0:	e8 55       	subi	r30, 0x58	; 88
    3dd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd4:	20 81       	ld	r18, Z
    3dd6:	89 81       	ldd	r24, Y+1	; 0x01
    3dd8:	88 2f       	mov	r24, r24
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	88 0f       	add	r24, r24
    3dde:	99 1f       	adc	r25, r25
    3de0:	fc 01       	movw	r30, r24
    3de2:	e7 55       	subi	r30, 0x57	; 87
    3de4:	fe 4f       	sbci	r31, 0xFE	; 254
    3de6:	90 81       	ld	r25, Z
    3de8:	82 2f       	mov	r24, r18
    3dea:	69 2f       	mov	r22, r25
    3dec:	41 e0       	ldi	r20, 0x01	; 1
    3dee:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	88 2f       	mov	r24, r24
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	88 0f       	add	r24, r24
    3dfa:	99 1f       	adc	r25, r25
    3dfc:	fc 01       	movw	r30, r24
    3dfe:	e8 55       	subi	r30, 0x58	; 88
    3e00:	fe 4f       	sbci	r31, 0xFE	; 254
    3e02:	20 81       	ld	r18, Z
    3e04:	89 81       	ldd	r24, Y+1	; 0x01
    3e06:	88 2f       	mov	r24, r24
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	88 0f       	add	r24, r24
    3e0c:	99 1f       	adc	r25, r25
    3e0e:	fc 01       	movw	r30, r24
    3e10:	e7 55       	subi	r30, 0x57	; 87
    3e12:	fe 4f       	sbci	r31, 0xFE	; 254
    3e14:	90 81       	ld	r25, Z
    3e16:	82 2f       	mov	r24, r18
    3e18:	69 2f       	mov	r22, r25
    3e1a:	40 e0       	ldi	r20, 0x00	; 0
    3e1c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3e20:	89 81       	ldd	r24, Y+1	; 0x01
    3e22:	8f 5f       	subi	r24, 0xFF	; 255
    3e24:	89 83       	std	Y+1, r24	; 0x01
    3e26:	90 91 a7 01 	lds	r25, 0x01A7
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	89 17       	cp	r24, r25
    3e2e:	50 f2       	brcs	.-108    	; 0x3dc4 <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    3e30:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    3e32:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3e34:	0f 90       	pop	r0
    3e36:	0f 90       	pop	r0
    3e38:	cf 91       	pop	r28
    3e3a:	df 91       	pop	r29
    3e3c:	08 95       	ret

00003e3e <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    3e3e:	df 93       	push	r29
    3e40:	cf 93       	push	r28
    3e42:	00 d0       	rcall	.+0      	; 0x3e44 <Buzzer_enu_TuronOnBuzzer+0x6>
    3e44:	cd b7       	in	r28, 0x3d	; 61
    3e46:	de b7       	in	r29, 0x3e	; 62
    3e48:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3e4a:	81 e0       	ldi	r24, 0x01	; 1
    3e4c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    3e4e:	90 91 a7 01 	lds	r25, 0x01A7
    3e52:	8a 81       	ldd	r24, Y+2	; 0x02
    3e54:	89 17       	cp	r24, r25
    3e56:	c8 f4       	brcc	.+50     	; 0x3e8a <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    3e58:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5a:	88 2f       	mov	r24, r24
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	88 0f       	add	r24, r24
    3e60:	99 1f       	adc	r25, r25
    3e62:	fc 01       	movw	r30, r24
    3e64:	e8 55       	subi	r30, 0x58	; 88
    3e66:	fe 4f       	sbci	r31, 0xFE	; 254
    3e68:	20 81       	ld	r18, Z
    3e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6c:	88 2f       	mov	r24, r24
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	88 0f       	add	r24, r24
    3e72:	99 1f       	adc	r25, r25
    3e74:	fc 01       	movw	r30, r24
    3e76:	e7 55       	subi	r30, 0x57	; 87
    3e78:	fe 4f       	sbci	r31, 0xFE	; 254
    3e7a:	90 81       	ld	r25, Z
    3e7c:	82 2f       	mov	r24, r18
    3e7e:	69 2f       	mov	r22, r25
    3e80:	41 e0       	ldi	r20, 0x01	; 1
    3e82:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    3e86:	89 83       	std	Y+1, r24	; 0x01
    3e88:	02 c0       	rjmp	.+4      	; 0x3e8e <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3e8a:	82 e0       	ldi	r24, 0x02	; 2
    3e8c:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e90:	0f 90       	pop	r0
    3e92:	0f 90       	pop	r0
    3e94:	cf 91       	pop	r28
    3e96:	df 91       	pop	r29
    3e98:	08 95       	ret

00003e9a <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    3e9a:	df 93       	push	r29
    3e9c:	cf 93       	push	r28
    3e9e:	00 d0       	rcall	.+0      	; 0x3ea0 <Buzzer_enu_TuronOffBuzzer+0x6>
    3ea0:	cd b7       	in	r28, 0x3d	; 61
    3ea2:	de b7       	in	r29, 0x3e	; 62
    3ea4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    3eaa:	90 91 a7 01 	lds	r25, 0x01A7
    3eae:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb0:	89 17       	cp	r24, r25
    3eb2:	c8 f4       	brcc	.+50     	; 0x3ee6 <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    3eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb6:	88 2f       	mov	r24, r24
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	88 0f       	add	r24, r24
    3ebc:	99 1f       	adc	r25, r25
    3ebe:	fc 01       	movw	r30, r24
    3ec0:	e8 55       	subi	r30, 0x58	; 88
    3ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec4:	20 81       	ld	r18, Z
    3ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec8:	88 2f       	mov	r24, r24
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	88 0f       	add	r24, r24
    3ece:	99 1f       	adc	r25, r25
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	e7 55       	subi	r30, 0x57	; 87
    3ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ed6:	90 81       	ld	r25, Z
    3ed8:	82 2f       	mov	r24, r18
    3eda:	69 2f       	mov	r22, r25
    3edc:	40 e0       	ldi	r20, 0x00	; 0
    3ede:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
    3ee2:	89 83       	std	Y+1, r24	; 0x01
    3ee4:	02 c0       	rjmp	.+4      	; 0x3eea <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3ee6:	82 e0       	ldi	r24, 0x02	; 2
    3ee8:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
}
    3eec:	0f 90       	pop	r0
    3eee:	0f 90       	pop	r0
    3ef0:	cf 91       	pop	r28
    3ef2:	df 91       	pop	r29
    3ef4:	08 95       	ret

00003ef6 <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    3ef6:	df 93       	push	r29
    3ef8:	cf 93       	push	r28
    3efa:	00 d0       	rcall	.+0      	; 0x3efc <Buzzer_enu_TurnOnAllBuzzers+0x6>
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3f04:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3f06:	19 82       	std	Y+1, r1	; 0x01
    3f08:	1a c0       	rjmp	.+52     	; 0x3f3e <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    3f0a:	89 81       	ldd	r24, Y+1	; 0x01
    3f0c:	88 2f       	mov	r24, r24
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	88 0f       	add	r24, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	fc 01       	movw	r30, r24
    3f16:	e8 55       	subi	r30, 0x58	; 88
    3f18:	fe 4f       	sbci	r31, 0xFE	; 254
    3f1a:	20 81       	ld	r18, Z
    3f1c:	89 81       	ldd	r24, Y+1	; 0x01
    3f1e:	88 2f       	mov	r24, r24
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	88 0f       	add	r24, r24
    3f24:	99 1f       	adc	r25, r25
    3f26:	fc 01       	movw	r30, r24
    3f28:	e7 55       	subi	r30, 0x57	; 87
    3f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f2c:	90 81       	ld	r25, Z
    3f2e:	82 2f       	mov	r24, r18
    3f30:	69 2f       	mov	r22, r25
    3f32:	41 e0       	ldi	r20, 0x01	; 1
    3f34:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	8f 5f       	subi	r24, 0xFF	; 255
    3f3c:	89 83       	std	Y+1, r24	; 0x01
    3f3e:	90 91 a7 01 	lds	r25, 0x01A7
    3f42:	89 81       	ldd	r24, Y+1	; 0x01
    3f44:	89 17       	cp	r24, r25
    3f46:	08 f3       	brcs	.-62     	; 0x3f0a <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3f48:	82 e0       	ldi	r24, 0x02	; 2
    3f4a:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    3f4c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	cf 91       	pop	r28
    3f54:	df 91       	pop	r29
    3f56:	08 95       	ret

00003f58 <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    3f58:	df 93       	push	r29
    3f5a:	cf 93       	push	r28
    3f5c:	00 d0       	rcall	.+0      	; 0x3f5e <Buzzer_enu_TurnOffAllBuzzers+0x6>
    3f5e:	cd b7       	in	r28, 0x3d	; 61
    3f60:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3f66:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3f68:	19 82       	std	Y+1, r1	; 0x01
    3f6a:	1a c0       	rjmp	.+52     	; 0x3fa0 <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
    3f6e:	88 2f       	mov	r24, r24
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	88 0f       	add	r24, r24
    3f74:	99 1f       	adc	r25, r25
    3f76:	fc 01       	movw	r30, r24
    3f78:	e8 55       	subi	r30, 0x58	; 88
    3f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f7c:	20 81       	ld	r18, Z
    3f7e:	89 81       	ldd	r24, Y+1	; 0x01
    3f80:	88 2f       	mov	r24, r24
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	88 0f       	add	r24, r24
    3f86:	99 1f       	adc	r25, r25
    3f88:	fc 01       	movw	r30, r24
    3f8a:	e7 55       	subi	r30, 0x57	; 87
    3f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f8e:	90 81       	ld	r25, Z
    3f90:	82 2f       	mov	r24, r18
    3f92:	69 2f       	mov	r22, r25
    3f94:	40 e0       	ldi	r20, 0x00	; 0
    3f96:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    3f9a:	89 81       	ldd	r24, Y+1	; 0x01
    3f9c:	8f 5f       	subi	r24, 0xFF	; 255
    3f9e:	89 83       	std	Y+1, r24	; 0x01
    3fa0:	90 91 a7 01 	lds	r25, 0x01A7
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	89 17       	cp	r24, r25
    3fa8:	08 f3       	brcs	.-62     	; 0x3f6c <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    3faa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3fac:	0f 90       	pop	r0
    3fae:	0f 90       	pop	r0
    3fb0:	cf 91       	pop	r28
    3fb2:	df 91       	pop	r29
    3fb4:	08 95       	ret

00003fb6 <adc>:
	u8 Flag;
};


void adc (void* Copy_pvid_Parameters)
{
    3fb6:	df 93       	push	r29
    3fb8:	cf 93       	push	r28
    3fba:	00 d0       	rcall	.+0      	; 0x3fbc <adc+0x6>
    3fbc:	cd b7       	in	r28, 0x3d	; 61
    3fbe:	de b7       	in	r29, 0x3e	; 62
    3fc0:	9a 83       	std	Y+2, r25	; 0x02
    3fc2:	89 83       	std	Y+1, r24	; 0x01
	ADC_enu_ReadData(&((struct x*)Copy_pvid_Parameters)->Data);
    3fc4:	89 81       	ldd	r24, Y+1	; 0x01
    3fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc8:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <ADC_enu_ReadData>

	((struct x*)Copy_pvid_Parameters)->Flag  = True;
    3fcc:	e9 81       	ldd	r30, Y+1	; 0x01
    3fce:	fa 81       	ldd	r31, Y+2	; 0x02
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	82 83       	std	Z+2, r24	; 0x02
}
    3fd4:	0f 90       	pop	r0
    3fd6:	0f 90       	pop	r0
    3fd8:	cf 91       	pop	r28
    3fda:	df 91       	pop	r29
    3fdc:	08 95       	ret

00003fde <main>:
int main(void)
{
    3fde:	0f 93       	push	r16
    3fe0:	df 93       	push	r29
    3fe2:	cf 93       	push	r28
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
    3fe8:	2a 97       	sbiw	r28, 0x0a	; 10
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
	struct x Param ={0, False};
    3ff4:	ce 01       	movw	r24, r28
    3ff6:	03 96       	adiw	r24, 0x03	; 3
    3ff8:	9f 83       	std	Y+7, r25	; 0x07
    3ffa:	8e 83       	std	Y+6, r24	; 0x06
    3ffc:	ea eb       	ldi	r30, 0xBA	; 186
    3ffe:	f1 e0       	ldi	r31, 0x01	; 1
    4000:	f9 87       	std	Y+9, r31	; 0x09
    4002:	e8 87       	std	Y+8, r30	; 0x08
    4004:	f3 e0       	ldi	r31, 0x03	; 3
    4006:	fa 87       	std	Y+10, r31	; 0x0a
    4008:	e8 85       	ldd	r30, Y+8	; 0x08
    400a:	f9 85       	ldd	r31, Y+9	; 0x09
    400c:	00 80       	ld	r0, Z
    400e:	88 85       	ldd	r24, Y+8	; 0x08
    4010:	99 85       	ldd	r25, Y+9	; 0x09
    4012:	01 96       	adiw	r24, 0x01	; 1
    4014:	99 87       	std	Y+9, r25	; 0x09
    4016:	88 87       	std	Y+8, r24	; 0x08
    4018:	ee 81       	ldd	r30, Y+6	; 0x06
    401a:	ff 81       	ldd	r31, Y+7	; 0x07
    401c:	00 82       	st	Z, r0
    401e:	8e 81       	ldd	r24, Y+6	; 0x06
    4020:	9f 81       	ldd	r25, Y+7	; 0x07
    4022:	01 96       	adiw	r24, 0x01	; 1
    4024:	9f 83       	std	Y+7, r25	; 0x07
    4026:	8e 83       	std	Y+6, r24	; 0x06
    4028:	9a 85       	ldd	r25, Y+10	; 0x0a
    402a:	91 50       	subi	r25, 0x01	; 1
    402c:	9a 87       	std	Y+10, r25	; 0x0a
    402e:	ea 85       	ldd	r30, Y+10	; 0x0a
    4030:	ee 23       	and	r30, r30
    4032:	51 f7       	brne	.-44     	; 0x4008 <main+0x2a>

	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A, DIO_PIN_0, DIO_PIN_READ);
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	60 e0       	ldi	r22, 0x00	; 0
    4038:	40 e0       	ldi	r20, 0x00	; 0
    403a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
	DIO_enu_SetPinState(DIO_PIN_GROUP_A, DIO_PIN_0, DIO_FLOAT);
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	60 e0       	ldi	r22, 0x00	; 0
    4042:	40 e0       	ldi	r20, 0x00	; 0
    4044:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <DIO_enu_SetPinState>

	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_C, DIO_PIN_0, DIO_PIN_WRITE);
    4048:	82 e0       	ldi	r24, 0x02	; 2
    404a:	60 e0       	ldi	r22, 0x00	; 0
    404c:	41 e0       	ldi	r20, 0x01	; 1
    404e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_enu_SetPinDiretion>
	DIO_enu_SetPinValue(DIO_PIN_GROUP_C, DIO_PIN_0, DIO_LOW);
    4052:	82 e0       	ldi	r24, 0x02	; 2
    4054:	60 e0       	ldi	r22, 0x00	; 0
    4056:	40 e0       	ldi	r20, 0x00	; 0
    4058:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_enu_SetPinValue>

	LCD_enu_Initialization();
    405c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <LCD_enu_Initialization>

	ADC_enu_Initialization();
    4060:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <ADC_enu_Initialization>

	ADC_enu_SetCallBack(adc, &Param);
    4064:	8b ed       	ldi	r24, 0xDB	; 219
    4066:	9f e1       	ldi	r25, 0x1F	; 31
    4068:	9e 01       	movw	r18, r28
    406a:	2d 5f       	subi	r18, 0xFD	; 253
    406c:	3f 4f       	sbci	r19, 0xFF	; 255
    406e:	b9 01       	movw	r22, r18
    4070:	0e 94 01 10 	call	0x2002	; 0x2002 <ADC_enu_SetCallBack>

	SREG_vid_EnableBitI();
    4074:	0e 94 9b 06 	call	0xd36	; 0xd36 <SREG_vid_EnableBitI>

	LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_1,LCD_PAGE_1);
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	61 e0       	ldi	r22, 0x01	; 1
    407c:	41 e0       	ldi	r20, 0x01	; 1
    407e:	0e 94 7f 14 	call	0x28fe	; 0x28fe <LCD_enu_GoToPosition>
	LCD_enu_SendString("Volt = ");
    4082:	80 e6       	ldi	r24, 0x60	; 96
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_SendString>

	LCD_enu_GoToPosition(LCD_ROW_1, LCD_COLUMN_12, LCD_PAGE_1);
    408a:	81 e0       	ldi	r24, 0x01	; 1
    408c:	6c e0       	ldi	r22, 0x0C	; 12
    408e:	41 e0       	ldi	r20, 0x01	; 1
    4090:	0e 94 7f 14 	call	0x28fe	; 0x28fe <LCD_enu_GoToPosition>
	LCD_enu_SendString(" mV");
    4094:	88 e6       	ldi	r24, 0x68	; 104
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_SendString>

	ADC_enu_StartConversion();
    409c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <ADC_enu_StartConversion>
	while(1)
	{
		u16 Local_u8_Data;


		if (Param.Flag)
    40a0:	8d 81       	ldd	r24, Y+5	; 0x05
    40a2:	88 23       	and	r24, r24
    40a4:	e9 f3       	breq	.-6      	; 0x40a0 <main+0xc2>
		{
			Param.Flag = False;
    40a6:	1d 82       	std	Y+5, r1	; 0x05
			LCD_enu_GoToPosition(LCD_ROW_1,LCD_COLUMN_8, LCD_PAGE_1);
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	68 e0       	ldi	r22, 0x08	; 8
    40ac:	41 e0       	ldi	r20, 0x01	; 1
    40ae:	0e 94 7f 14 	call	0x28fe	; 0x28fe <LCD_enu_GoToPosition>
			LCD_enu_SendString("    ");
    40b2:	8c e6       	ldi	r24, 0x6C	; 108
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_SendString>

			Param.Data = Param.Data * ((f32)5000/1024);
    40ba:	8b 81       	ldd	r24, Y+3	; 0x03
    40bc:	9c 81       	ldd	r25, Y+4	; 0x04
    40be:	cc 01       	movw	r24, r24
    40c0:	a0 e0       	ldi	r26, 0x00	; 0
    40c2:	b0 e0       	ldi	r27, 0x00	; 0
    40c4:	bc 01       	movw	r22, r24
    40c6:	cd 01       	movw	r24, r26
    40c8:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	bc 01       	movw	r22, r24
    40d2:	cd 01       	movw	r24, r26
    40d4:	20 e0       	ldi	r18, 0x00	; 0
    40d6:	30 e4       	ldi	r19, 0x40	; 64
    40d8:	4c e9       	ldi	r20, 0x9C	; 156
    40da:	50 e4       	ldi	r21, 0x40	; 64
    40dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e0:	dc 01       	movw	r26, r24
    40e2:	cb 01       	movw	r24, r22
    40e4:	bc 01       	movw	r22, r24
    40e6:	cd 01       	movw	r24, r26
    40e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	9c 83       	std	Y+4, r25	; 0x04
    40f2:	8b 83       	std	Y+3, r24	; 0x03

			LCD_enu_WriteIntegerNum(Param.Data, LCD_ROW_1, LCD_COLUMN_8, LCD_PAGE_1);
    40f4:	8b 81       	ldd	r24, Y+3	; 0x03
    40f6:	9c 81       	ldd	r25, Y+4	; 0x04
    40f8:	cc 01       	movw	r24, r24
    40fa:	a0 e0       	ldi	r26, 0x00	; 0
    40fc:	b0 e0       	ldi	r27, 0x00	; 0
    40fe:	bc 01       	movw	r22, r24
    4100:	cd 01       	movw	r24, r26
    4102:	41 e0       	ldi	r20, 0x01	; 1
    4104:	28 e0       	ldi	r18, 0x08	; 8
    4106:	01 e0       	ldi	r16, 0x01	; 1
    4108:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_enu_WriteIntegerNum>
    410c:	c9 cf       	rjmp	.-110    	; 0x40a0 <main+0xc2>

0000410e <__mulsi3>:
    410e:	62 9f       	mul	r22, r18
    4110:	d0 01       	movw	r26, r0
    4112:	73 9f       	mul	r23, r19
    4114:	f0 01       	movw	r30, r0
    4116:	82 9f       	mul	r24, r18
    4118:	e0 0d       	add	r30, r0
    411a:	f1 1d       	adc	r31, r1
    411c:	64 9f       	mul	r22, r20
    411e:	e0 0d       	add	r30, r0
    4120:	f1 1d       	adc	r31, r1
    4122:	92 9f       	mul	r25, r18
    4124:	f0 0d       	add	r31, r0
    4126:	83 9f       	mul	r24, r19
    4128:	f0 0d       	add	r31, r0
    412a:	74 9f       	mul	r23, r20
    412c:	f0 0d       	add	r31, r0
    412e:	65 9f       	mul	r22, r21
    4130:	f0 0d       	add	r31, r0
    4132:	99 27       	eor	r25, r25
    4134:	72 9f       	mul	r23, r18
    4136:	b0 0d       	add	r27, r0
    4138:	e1 1d       	adc	r30, r1
    413a:	f9 1f       	adc	r31, r25
    413c:	63 9f       	mul	r22, r19
    413e:	b0 0d       	add	r27, r0
    4140:	e1 1d       	adc	r30, r1
    4142:	f9 1f       	adc	r31, r25
    4144:	bd 01       	movw	r22, r26
    4146:	cf 01       	movw	r24, r30
    4148:	11 24       	eor	r1, r1
    414a:	08 95       	ret

0000414c <__udivmodsi4>:
    414c:	a1 e2       	ldi	r26, 0x21	; 33
    414e:	1a 2e       	mov	r1, r26
    4150:	aa 1b       	sub	r26, r26
    4152:	bb 1b       	sub	r27, r27
    4154:	fd 01       	movw	r30, r26
    4156:	0d c0       	rjmp	.+26     	; 0x4172 <__udivmodsi4_ep>

00004158 <__udivmodsi4_loop>:
    4158:	aa 1f       	adc	r26, r26
    415a:	bb 1f       	adc	r27, r27
    415c:	ee 1f       	adc	r30, r30
    415e:	ff 1f       	adc	r31, r31
    4160:	a2 17       	cp	r26, r18
    4162:	b3 07       	cpc	r27, r19
    4164:	e4 07       	cpc	r30, r20
    4166:	f5 07       	cpc	r31, r21
    4168:	20 f0       	brcs	.+8      	; 0x4172 <__udivmodsi4_ep>
    416a:	a2 1b       	sub	r26, r18
    416c:	b3 0b       	sbc	r27, r19
    416e:	e4 0b       	sbc	r30, r20
    4170:	f5 0b       	sbc	r31, r21

00004172 <__udivmodsi4_ep>:
    4172:	66 1f       	adc	r22, r22
    4174:	77 1f       	adc	r23, r23
    4176:	88 1f       	adc	r24, r24
    4178:	99 1f       	adc	r25, r25
    417a:	1a 94       	dec	r1
    417c:	69 f7       	brne	.-38     	; 0x4158 <__udivmodsi4_loop>
    417e:	60 95       	com	r22
    4180:	70 95       	com	r23
    4182:	80 95       	com	r24
    4184:	90 95       	com	r25
    4186:	9b 01       	movw	r18, r22
    4188:	ac 01       	movw	r20, r24
    418a:	bd 01       	movw	r22, r26
    418c:	cf 01       	movw	r24, r30
    418e:	08 95       	ret

00004190 <__divmodsi4>:
    4190:	97 fb       	bst	r25, 7
    4192:	09 2e       	mov	r0, r25
    4194:	05 26       	eor	r0, r21
    4196:	0e d0       	rcall	.+28     	; 0x41b4 <__divmodsi4_neg1>
    4198:	57 fd       	sbrc	r21, 7
    419a:	04 d0       	rcall	.+8      	; 0x41a4 <__divmodsi4_neg2>
    419c:	d7 df       	rcall	.-82     	; 0x414c <__udivmodsi4>
    419e:	0a d0       	rcall	.+20     	; 0x41b4 <__divmodsi4_neg1>
    41a0:	00 1c       	adc	r0, r0
    41a2:	38 f4       	brcc	.+14     	; 0x41b2 <__divmodsi4_exit>

000041a4 <__divmodsi4_neg2>:
    41a4:	50 95       	com	r21
    41a6:	40 95       	com	r20
    41a8:	30 95       	com	r19
    41aa:	21 95       	neg	r18
    41ac:	3f 4f       	sbci	r19, 0xFF	; 255
    41ae:	4f 4f       	sbci	r20, 0xFF	; 255
    41b0:	5f 4f       	sbci	r21, 0xFF	; 255

000041b2 <__divmodsi4_exit>:
    41b2:	08 95       	ret

000041b4 <__divmodsi4_neg1>:
    41b4:	f6 f7       	brtc	.-4      	; 0x41b2 <__divmodsi4_exit>
    41b6:	90 95       	com	r25
    41b8:	80 95       	com	r24
    41ba:	70 95       	com	r23
    41bc:	61 95       	neg	r22
    41be:	7f 4f       	sbci	r23, 0xFF	; 255
    41c0:	8f 4f       	sbci	r24, 0xFF	; 255
    41c2:	9f 4f       	sbci	r25, 0xFF	; 255
    41c4:	08 95       	ret

000041c6 <__prologue_saves__>:
    41c6:	2f 92       	push	r2
    41c8:	3f 92       	push	r3
    41ca:	4f 92       	push	r4
    41cc:	5f 92       	push	r5
    41ce:	6f 92       	push	r6
    41d0:	7f 92       	push	r7
    41d2:	8f 92       	push	r8
    41d4:	9f 92       	push	r9
    41d6:	af 92       	push	r10
    41d8:	bf 92       	push	r11
    41da:	cf 92       	push	r12
    41dc:	df 92       	push	r13
    41de:	ef 92       	push	r14
    41e0:	ff 92       	push	r15
    41e2:	0f 93       	push	r16
    41e4:	1f 93       	push	r17
    41e6:	cf 93       	push	r28
    41e8:	df 93       	push	r29
    41ea:	cd b7       	in	r28, 0x3d	; 61
    41ec:	de b7       	in	r29, 0x3e	; 62
    41ee:	ca 1b       	sub	r28, r26
    41f0:	db 0b       	sbc	r29, r27
    41f2:	0f b6       	in	r0, 0x3f	; 63
    41f4:	f8 94       	cli
    41f6:	de bf       	out	0x3e, r29	; 62
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	cd bf       	out	0x3d, r28	; 61
    41fc:	09 94       	ijmp

000041fe <__epilogue_restores__>:
    41fe:	2a 88       	ldd	r2, Y+18	; 0x12
    4200:	39 88       	ldd	r3, Y+17	; 0x11
    4202:	48 88       	ldd	r4, Y+16	; 0x10
    4204:	5f 84       	ldd	r5, Y+15	; 0x0f
    4206:	6e 84       	ldd	r6, Y+14	; 0x0e
    4208:	7d 84       	ldd	r7, Y+13	; 0x0d
    420a:	8c 84       	ldd	r8, Y+12	; 0x0c
    420c:	9b 84       	ldd	r9, Y+11	; 0x0b
    420e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4210:	b9 84       	ldd	r11, Y+9	; 0x09
    4212:	c8 84       	ldd	r12, Y+8	; 0x08
    4214:	df 80       	ldd	r13, Y+7	; 0x07
    4216:	ee 80       	ldd	r14, Y+6	; 0x06
    4218:	fd 80       	ldd	r15, Y+5	; 0x05
    421a:	0c 81       	ldd	r16, Y+4	; 0x04
    421c:	1b 81       	ldd	r17, Y+3	; 0x03
    421e:	aa 81       	ldd	r26, Y+2	; 0x02
    4220:	b9 81       	ldd	r27, Y+1	; 0x01
    4222:	ce 0f       	add	r28, r30
    4224:	d1 1d       	adc	r29, r1
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	de bf       	out	0x3e, r29	; 62
    422c:	0f be       	out	0x3f, r0	; 63
    422e:	cd bf       	out	0x3d, r28	; 61
    4230:	ed 01       	movw	r28, r26
    4232:	08 95       	ret

00004234 <_exit>:
    4234:	f8 94       	cli

00004236 <__stop_program>:
    4236:	ff cf       	rjmp	.-2      	; 0x4236 <__stop_program>
