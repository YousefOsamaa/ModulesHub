
ModuleHub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005472  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00005472  00005506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  008001a4  008001a4  0000564a  2**0
                  ALLOC
  3 .stab         00007434  00000000  00000000  0000564c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002eff  00000000  00000000  0000ca80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f97f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020f  00000000  00000000  0000fb3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000250d  00000000  00000000  0000fd4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001424  00000000  00000000  0001225b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011a7  00000000  00000000  0001367f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00014828  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d1  00000000  00000000  00014a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000926  00000000  00000000  00014cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000155ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__vector_1>
       8:	0c 94 47 11 	jmp	0x228e	; 0x228e <__vector_2>
       c:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__vector_3>
      10:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_4>
      14:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_10>
      2c:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 61 29 	call	0x52c2	; 0x52c2 <main>
      8a:	0c 94 37 2a 	jmp	0x546e	; 0x546e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 09 04 	call	0x812	; 0x812 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 09 04 	call	0x812	; 0x812 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1c 2a 	jmp	0x5438	; 0x5438 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1c 2a 	jmp	0x5438	; 0x5438 <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

000007b2 <__lesf2>:
     7b2:	a8 e1       	ldi	r26, 0x18	; 24
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	2d 83       	std	Y+5, r18	; 0x05
     7c8:	3e 83       	std	Y+6, r19	; 0x06
     7ca:	4f 83       	std	Y+7, r20	; 0x07
     7cc:	58 87       	std	Y+8, r21	; 0x08
     7ce:	89 e0       	ldi	r24, 0x09	; 9
     7d0:	e8 2e       	mov	r14, r24
     7d2:	f1 2c       	mov	r15, r1
     7d4:	ec 0e       	add	r14, r28
     7d6:	fd 1e       	adc	r15, r29
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	b7 01       	movw	r22, r14
     7de:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     7e2:	8e 01       	movw	r16, r28
     7e4:	0f 5e       	subi	r16, 0xEF	; 239
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	ce 01       	movw	r24, r28
     7ea:	05 96       	adiw	r24, 0x05	; 5
     7ec:	b8 01       	movw	r22, r16
     7ee:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     7f2:	89 85       	ldd	r24, Y+9	; 0x09
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	40 f0       	brcs	.+16     	; 0x808 <__lesf2+0x56>
     7f8:	89 89       	ldd	r24, Y+17	; 0x11
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	28 f0       	brcs	.+10     	; 0x808 <__lesf2+0x56>
     7fe:	c7 01       	movw	r24, r14
     800:	b8 01       	movw	r22, r16
     802:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     806:	01 c0       	rjmp	.+2      	; 0x80a <__lesf2+0x58>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	68 96       	adiw	r28, 0x18	; 24
     80c:	e6 e0       	ldi	r30, 0x06	; 6
     80e:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

00000812 <__fixsfsi>:
     812:	ac e0       	ldi	r26, 0x0C	; 12
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	ef e0       	ldi	r30, 0x0F	; 15
     818:	f4 e0       	ldi	r31, 0x04	; 4
     81a:	0c 94 10 2a 	jmp	0x5420	; 0x5420 <__prologue_saves__+0x20>
     81e:	69 83       	std	Y+1, r22	; 0x01
     820:	7a 83       	std	Y+2, r23	; 0x02
     822:	8b 83       	std	Y+3, r24	; 0x03
     824:	9c 83       	std	Y+4, r25	; 0x04
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	be 01       	movw	r22, r28
     82c:	6b 5f       	subi	r22, 0xFB	; 251
     82e:	7f 4f       	sbci	r23, 0xFF	; 255
     830:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     834:	8d 81       	ldd	r24, Y+5	; 0x05
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	61 f1       	breq	.+88     	; 0x892 <__stack+0x33>
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	50 f1       	brcs	.+84     	; 0x892 <__stack+0x33>
     83e:	84 30       	cpi	r24, 0x04	; 4
     840:	21 f4       	brne	.+8      	; 0x84a <__fixsfsi+0x38>
     842:	8e 81       	ldd	r24, Y+6	; 0x06
     844:	88 23       	and	r24, r24
     846:	51 f1       	breq	.+84     	; 0x89c <__stack+0x3d>
     848:	2e c0       	rjmp	.+92     	; 0x8a6 <__stack+0x47>
     84a:	2f 81       	ldd	r18, Y+7	; 0x07
     84c:	38 85       	ldd	r19, Y+8	; 0x08
     84e:	37 fd       	sbrc	r19, 7
     850:	20 c0       	rjmp	.+64     	; 0x892 <__stack+0x33>
     852:	6e 81       	ldd	r22, Y+6	; 0x06
     854:	2f 31       	cpi	r18, 0x1F	; 31
     856:	31 05       	cpc	r19, r1
     858:	1c f0       	brlt	.+6      	; 0x860 <__stack+0x1>
     85a:	66 23       	and	r22, r22
     85c:	f9 f0       	breq	.+62     	; 0x89c <__stack+0x3d>
     85e:	23 c0       	rjmp	.+70     	; 0x8a6 <__stack+0x47>
     860:	8e e1       	ldi	r24, 0x1E	; 30
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	82 1b       	sub	r24, r18
     866:	93 0b       	sbc	r25, r19
     868:	29 85       	ldd	r18, Y+9	; 0x09
     86a:	3a 85       	ldd	r19, Y+10	; 0x0a
     86c:	4b 85       	ldd	r20, Y+11	; 0x0b
     86e:	5c 85       	ldd	r21, Y+12	; 0x0c
     870:	04 c0       	rjmp	.+8      	; 0x87a <__stack+0x1b>
     872:	56 95       	lsr	r21
     874:	47 95       	ror	r20
     876:	37 95       	ror	r19
     878:	27 95       	ror	r18
     87a:	8a 95       	dec	r24
     87c:	d2 f7       	brpl	.-12     	; 0x872 <__stack+0x13>
     87e:	66 23       	and	r22, r22
     880:	b1 f0       	breq	.+44     	; 0x8ae <__stack+0x4f>
     882:	50 95       	com	r21
     884:	40 95       	com	r20
     886:	30 95       	com	r19
     888:	21 95       	neg	r18
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	4f 4f       	sbci	r20, 0xFF	; 255
     88e:	5f 4f       	sbci	r21, 0xFF	; 255
     890:	0e c0       	rjmp	.+28     	; 0x8ae <__stack+0x4f>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	09 c0       	rjmp	.+18     	; 0x8ae <__stack+0x4f>
     89c:	2f ef       	ldi	r18, 0xFF	; 255
     89e:	3f ef       	ldi	r19, 0xFF	; 255
     8a0:	4f ef       	ldi	r20, 0xFF	; 255
     8a2:	5f e7       	ldi	r21, 0x7F	; 127
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__stack+0x4f>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	50 e8       	ldi	r21, 0x80	; 128
     8ae:	b9 01       	movw	r22, r18
     8b0:	ca 01       	movw	r24, r20
     8b2:	2c 96       	adiw	r28, 0x0c	; 12
     8b4:	e2 e0       	ldi	r30, 0x02	; 2
     8b6:	0c 94 2c 2a 	jmp	0x5458	; 0x5458 <__epilogue_restores__+0x20>

000008ba <__floatunsisf>:
     8ba:	a8 e0       	ldi	r26, 0x08	; 8
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e3 e6       	ldi	r30, 0x63	; 99
     8c0:	f4 e0       	ldi	r31, 0x04	; 4
     8c2:	0c 94 08 2a 	jmp	0x5410	; 0x5410 <__prologue_saves__+0x10>
     8c6:	7b 01       	movw	r14, r22
     8c8:	8c 01       	movw	r16, r24
     8ca:	61 15       	cp	r22, r1
     8cc:	71 05       	cpc	r23, r1
     8ce:	81 05       	cpc	r24, r1
     8d0:	91 05       	cpc	r25, r1
     8d2:	19 f4       	brne	.+6      	; 0x8da <__floatunsisf+0x20>
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	60 c0       	rjmp	.+192    	; 0x99a <__floatunsisf+0xe0>
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	8e e1       	ldi	r24, 0x1E	; 30
     8e0:	c8 2e       	mov	r12, r24
     8e2:	d1 2c       	mov	r13, r1
     8e4:	dc 82       	std	Y+4, r13	; 0x04
     8e6:	cb 82       	std	Y+3, r12	; 0x03
     8e8:	ed 82       	std	Y+5, r14	; 0x05
     8ea:	fe 82       	std	Y+6, r15	; 0x06
     8ec:	0f 83       	std	Y+7, r16	; 0x07
     8ee:	18 87       	std	Y+8, r17	; 0x08
     8f0:	c8 01       	movw	r24, r16
     8f2:	b7 01       	movw	r22, r14
     8f4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__clzsi2>
     8f8:	fc 01       	movw	r30, r24
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	f7 ff       	sbrs	r31, 7
     8fe:	3b c0       	rjmp	.+118    	; 0x976 <__floatunsisf+0xbc>
     900:	22 27       	eor	r18, r18
     902:	33 27       	eor	r19, r19
     904:	2e 1b       	sub	r18, r30
     906:	3f 0b       	sbc	r19, r31
     908:	57 01       	movw	r10, r14
     90a:	68 01       	movw	r12, r16
     90c:	02 2e       	mov	r0, r18
     90e:	04 c0       	rjmp	.+8      	; 0x918 <__floatunsisf+0x5e>
     910:	d6 94       	lsr	r13
     912:	c7 94       	ror	r12
     914:	b7 94       	ror	r11
     916:	a7 94       	ror	r10
     918:	0a 94       	dec	r0
     91a:	d2 f7       	brpl	.-12     	; 0x910 <__floatunsisf+0x56>
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__floatunsisf+0x7c>
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	aa 1f       	adc	r26, r26
     934:	bb 1f       	adc	r27, r27
     936:	2a 95       	dec	r18
     938:	d2 f7       	brpl	.-12     	; 0x92e <__floatunsisf+0x74>
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	a1 09       	sbc	r26, r1
     93e:	b1 09       	sbc	r27, r1
     940:	8e 21       	and	r24, r14
     942:	9f 21       	and	r25, r15
     944:	a0 23       	and	r26, r16
     946:	b1 23       	and	r27, r17
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	a1 05       	cpc	r26, r1
     94c:	b1 05       	cpc	r27, r1
     94e:	21 f0       	breq	.+8      	; 0x958 <__floatunsisf+0x9e>
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	4a 29       	or	r20, r10
     95a:	5b 29       	or	r21, r11
     95c:	6c 29       	or	r22, r12
     95e:	7d 29       	or	r23, r13
     960:	4d 83       	std	Y+5, r20	; 0x05
     962:	5e 83       	std	Y+6, r21	; 0x06
     964:	6f 83       	std	Y+7, r22	; 0x07
     966:	78 87       	std	Y+8, r23	; 0x08
     968:	8e e1       	ldi	r24, 0x1E	; 30
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	8e 1b       	sub	r24, r30
     96e:	9f 0b       	sbc	r25, r31
     970:	9c 83       	std	Y+4, r25	; 0x04
     972:	8b 83       	std	Y+3, r24	; 0x03
     974:	12 c0       	rjmp	.+36     	; 0x99a <__floatunsisf+0xe0>
     976:	30 97       	sbiw	r30, 0x00	; 0
     978:	81 f0       	breq	.+32     	; 0x99a <__floatunsisf+0xe0>
     97a:	0e 2e       	mov	r0, r30
     97c:	04 c0       	rjmp	.+8      	; 0x986 <__floatunsisf+0xcc>
     97e:	ee 0c       	add	r14, r14
     980:	ff 1c       	adc	r15, r15
     982:	00 1f       	adc	r16, r16
     984:	11 1f       	adc	r17, r17
     986:	0a 94       	dec	r0
     988:	d2 f7       	brpl	.-12     	; 0x97e <__floatunsisf+0xc4>
     98a:	ed 82       	std	Y+5, r14	; 0x05
     98c:	fe 82       	std	Y+6, r15	; 0x06
     98e:	0f 83       	std	Y+7, r16	; 0x07
     990:	18 87       	std	Y+8, r17	; 0x08
     992:	ce 1a       	sub	r12, r30
     994:	df 0a       	sbc	r13, r31
     996:	dc 82       	std	Y+4, r13	; 0x04
     998:	cb 82       	std	Y+3, r12	; 0x03
     99a:	1a 82       	std	Y+2, r1	; 0x02
     99c:	ce 01       	movw	r24, r28
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     9a4:	28 96       	adiw	r28, 0x08	; 8
     9a6:	ea e0       	ldi	r30, 0x0A	; 10
     9a8:	0c 94 24 2a 	jmp	0x5448	; 0x5448 <__epilogue_restores__+0x10>

000009ac <__clzsi2>:
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	7b 01       	movw	r14, r22
     9b6:	8c 01       	movw	r16, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	e8 16       	cp	r14, r24
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	f8 06       	cpc	r15, r24
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	08 07       	cpc	r16, r24
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	18 07       	cpc	r17, r24
     9c8:	88 f4       	brcc	.+34     	; 0x9ec <__clzsi2+0x40>
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	e8 16       	cp	r14, r24
     9ce:	f1 04       	cpc	r15, r1
     9d0:	01 05       	cpc	r16, r1
     9d2:	11 05       	cpc	r17, r1
     9d4:	31 f0       	breq	.+12     	; 0x9e2 <__clzsi2+0x36>
     9d6:	28 f0       	brcs	.+10     	; 0x9e2 <__clzsi2+0x36>
     9d8:	88 e0       	ldi	r24, 0x08	; 8
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	17 c0       	rjmp	.+46     	; 0xa10 <__clzsi2+0x64>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	12 c0       	rjmp	.+36     	; 0xa10 <__clzsi2+0x64>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	e8 16       	cp	r14, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	f8 06       	cpc	r15, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	08 07       	cpc	r16, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	18 07       	cpc	r17, r24
     9fc:	28 f0       	brcs	.+10     	; 0xa08 <__clzsi2+0x5c>
     9fe:	88 e1       	ldi	r24, 0x18	; 24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	a0 e0       	ldi	r26, 0x00	; 0
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__clzsi2+0x64>
     a08:	80 e1       	ldi	r24, 0x10	; 16
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	20 e2       	ldi	r18, 0x20	; 32
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	28 1b       	sub	r18, r24
     a1a:	39 0b       	sbc	r19, r25
     a1c:	4a 0b       	sbc	r20, r26
     a1e:	5b 0b       	sbc	r21, r27
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__clzsi2+0x7e>
     a22:	16 95       	lsr	r17
     a24:	07 95       	ror	r16
     a26:	f7 94       	ror	r15
     a28:	e7 94       	ror	r14
     a2a:	8a 95       	dec	r24
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__clzsi2+0x76>
     a2e:	f7 01       	movw	r30, r14
     a30:	e8 59       	subi	r30, 0x98	; 152
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	80 81       	ld	r24, Z
     a36:	28 1b       	sub	r18, r24
     a38:	31 09       	sbc	r19, r1
     a3a:	41 09       	sbc	r20, r1
     a3c:	51 09       	sbc	r21, r1
     a3e:	c9 01       	movw	r24, r18
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	08 95       	ret

00000a4a <__pack_f>:
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	fc 01       	movw	r30, r24
     a56:	e4 80       	ldd	r14, Z+4	; 0x04
     a58:	f5 80       	ldd	r15, Z+5	; 0x05
     a5a:	06 81       	ldd	r16, Z+6	; 0x06
     a5c:	17 81       	ldd	r17, Z+7	; 0x07
     a5e:	d1 80       	ldd	r13, Z+1	; 0x01
     a60:	80 81       	ld	r24, Z
     a62:	82 30       	cpi	r24, 0x02	; 2
     a64:	48 f4       	brcc	.+18     	; 0xa78 <__pack_f+0x2e>
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	a0 e1       	ldi	r26, 0x10	; 16
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	e8 2a       	or	r14, r24
     a70:	f9 2a       	or	r15, r25
     a72:	0a 2b       	or	r16, r26
     a74:	1b 2b       	or	r17, r27
     a76:	a5 c0       	rjmp	.+330    	; 0xbc2 <__pack_f+0x178>
     a78:	84 30       	cpi	r24, 0x04	; 4
     a7a:	09 f4       	brne	.+2      	; 0xa7e <__pack_f+0x34>
     a7c:	9f c0       	rjmp	.+318    	; 0xbbc <__pack_f+0x172>
     a7e:	82 30       	cpi	r24, 0x02	; 2
     a80:	21 f4       	brne	.+8      	; 0xa8a <__pack_f+0x40>
     a82:	ee 24       	eor	r14, r14
     a84:	ff 24       	eor	r15, r15
     a86:	87 01       	movw	r16, r14
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <__pack_f+0x4a>
     a8a:	e1 14       	cp	r14, r1
     a8c:	f1 04       	cpc	r15, r1
     a8e:	01 05       	cpc	r16, r1
     a90:	11 05       	cpc	r17, r1
     a92:	19 f4       	brne	.+6      	; 0xa9a <__pack_f+0x50>
     a94:	e0 e0       	ldi	r30, 0x00	; 0
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	96 c0       	rjmp	.+300    	; 0xbc6 <__pack_f+0x17c>
     a9a:	62 81       	ldd	r22, Z+2	; 0x02
     a9c:	73 81       	ldd	r23, Z+3	; 0x03
     a9e:	9f ef       	ldi	r25, 0xFF	; 255
     aa0:	62 38       	cpi	r22, 0x82	; 130
     aa2:	79 07       	cpc	r23, r25
     aa4:	0c f0       	brlt	.+2      	; 0xaa8 <__pack_f+0x5e>
     aa6:	5b c0       	rjmp	.+182    	; 0xb5e <__pack_f+0x114>
     aa8:	22 e8       	ldi	r18, 0x82	; 130
     aaa:	3f ef       	ldi	r19, 0xFF	; 255
     aac:	26 1b       	sub	r18, r22
     aae:	37 0b       	sbc	r19, r23
     ab0:	2a 31       	cpi	r18, 0x1A	; 26
     ab2:	31 05       	cpc	r19, r1
     ab4:	2c f0       	brlt	.+10     	; 0xac0 <__pack_f+0x76>
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	2a c0       	rjmp	.+84     	; 0xb14 <__pack_f+0xca>
     ac0:	b8 01       	movw	r22, r16
     ac2:	a7 01       	movw	r20, r14
     ac4:	02 2e       	mov	r0, r18
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__pack_f+0x86>
     ac8:	76 95       	lsr	r23
     aca:	67 95       	ror	r22
     acc:	57 95       	ror	r21
     ace:	47 95       	ror	r20
     ad0:	0a 94       	dec	r0
     ad2:	d2 f7       	brpl	.-12     	; 0xac8 <__pack_f+0x7e>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	a0 e0       	ldi	r26, 0x00	; 0
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <__pack_f+0x9c>
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	aa 1f       	adc	r26, r26
     ae4:	bb 1f       	adc	r27, r27
     ae6:	2a 95       	dec	r18
     ae8:	d2 f7       	brpl	.-12     	; 0xade <__pack_f+0x94>
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	a1 09       	sbc	r26, r1
     aee:	b1 09       	sbc	r27, r1
     af0:	8e 21       	and	r24, r14
     af2:	9f 21       	and	r25, r15
     af4:	a0 23       	and	r26, r16
     af6:	b1 23       	and	r27, r17
     af8:	00 97       	sbiw	r24, 0x00	; 0
     afa:	a1 05       	cpc	r26, r1
     afc:	b1 05       	cpc	r27, r1
     afe:	21 f0       	breq	.+8      	; 0xb08 <__pack_f+0xbe>
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	9a 01       	movw	r18, r20
     b0a:	ab 01       	movw	r20, r22
     b0c:	28 2b       	or	r18, r24
     b0e:	39 2b       	or	r19, r25
     b10:	4a 2b       	or	r20, r26
     b12:	5b 2b       	or	r21, r27
     b14:	da 01       	movw	r26, r20
     b16:	c9 01       	movw	r24, r18
     b18:	8f 77       	andi	r24, 0x7F	; 127
     b1a:	90 70       	andi	r25, 0x00	; 0
     b1c:	a0 70       	andi	r26, 0x00	; 0
     b1e:	b0 70       	andi	r27, 0x00	; 0
     b20:	80 34       	cpi	r24, 0x40	; 64
     b22:	91 05       	cpc	r25, r1
     b24:	a1 05       	cpc	r26, r1
     b26:	b1 05       	cpc	r27, r1
     b28:	39 f4       	brne	.+14     	; 0xb38 <__pack_f+0xee>
     b2a:	27 ff       	sbrs	r18, 7
     b2c:	09 c0       	rjmp	.+18     	; 0xb40 <__pack_f+0xf6>
     b2e:	20 5c       	subi	r18, 0xC0	; 192
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	4f 4f       	sbci	r20, 0xFF	; 255
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <__pack_f+0xf6>
     b38:	21 5c       	subi	r18, 0xC1	; 193
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255
     b3c:	4f 4f       	sbci	r20, 0xFF	; 255
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	e0 e0       	ldi	r30, 0x00	; 0
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	20 30       	cpi	r18, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	3a 07       	cpc	r19, r26
     b4a:	a0 e0       	ldi	r26, 0x00	; 0
     b4c:	4a 07       	cpc	r20, r26
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	5a 07       	cpc	r21, r26
     b52:	10 f0       	brcs	.+4      	; 0xb58 <__pack_f+0x10e>
     b54:	e1 e0       	ldi	r30, 0x01	; 1
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	79 01       	movw	r14, r18
     b5a:	8a 01       	movw	r16, r20
     b5c:	27 c0       	rjmp	.+78     	; 0xbac <__pack_f+0x162>
     b5e:	60 38       	cpi	r22, 0x80	; 128
     b60:	71 05       	cpc	r23, r1
     b62:	64 f5       	brge	.+88     	; 0xbbc <__pack_f+0x172>
     b64:	fb 01       	movw	r30, r22
     b66:	e1 58       	subi	r30, 0x81	; 129
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	d8 01       	movw	r26, r16
     b6c:	c7 01       	movw	r24, r14
     b6e:	8f 77       	andi	r24, 0x7F	; 127
     b70:	90 70       	andi	r25, 0x00	; 0
     b72:	a0 70       	andi	r26, 0x00	; 0
     b74:	b0 70       	andi	r27, 0x00	; 0
     b76:	80 34       	cpi	r24, 0x40	; 64
     b78:	91 05       	cpc	r25, r1
     b7a:	a1 05       	cpc	r26, r1
     b7c:	b1 05       	cpc	r27, r1
     b7e:	39 f4       	brne	.+14     	; 0xb8e <__pack_f+0x144>
     b80:	e7 fe       	sbrs	r14, 7
     b82:	0d c0       	rjmp	.+26     	; 0xb9e <__pack_f+0x154>
     b84:	80 e4       	ldi	r24, 0x40	; 64
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a0 e0       	ldi	r26, 0x00	; 0
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__pack_f+0x14c>
     b8e:	8f e3       	ldi	r24, 0x3F	; 63
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e8 0e       	add	r14, r24
     b98:	f9 1e       	adc	r15, r25
     b9a:	0a 1f       	adc	r16, r26
     b9c:	1b 1f       	adc	r17, r27
     b9e:	17 ff       	sbrs	r17, 7
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <__pack_f+0x162>
     ba2:	16 95       	lsr	r17
     ba4:	07 95       	ror	r16
     ba6:	f7 94       	ror	r15
     ba8:	e7 94       	ror	r14
     baa:	31 96       	adiw	r30, 0x01	; 1
     bac:	87 e0       	ldi	r24, 0x07	; 7
     bae:	16 95       	lsr	r17
     bb0:	07 95       	ror	r16
     bb2:	f7 94       	ror	r15
     bb4:	e7 94       	ror	r14
     bb6:	8a 95       	dec	r24
     bb8:	d1 f7       	brne	.-12     	; 0xbae <__pack_f+0x164>
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <__pack_f+0x17c>
     bbc:	ee 24       	eor	r14, r14
     bbe:	ff 24       	eor	r15, r15
     bc0:	87 01       	movw	r16, r14
     bc2:	ef ef       	ldi	r30, 0xFF	; 255
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	6e 2f       	mov	r22, r30
     bc8:	67 95       	ror	r22
     bca:	66 27       	eor	r22, r22
     bcc:	67 95       	ror	r22
     bce:	90 2f       	mov	r25, r16
     bd0:	9f 77       	andi	r25, 0x7F	; 127
     bd2:	d7 94       	ror	r13
     bd4:	dd 24       	eor	r13, r13
     bd6:	d7 94       	ror	r13
     bd8:	8e 2f       	mov	r24, r30
     bda:	86 95       	lsr	r24
     bdc:	49 2f       	mov	r20, r25
     bde:	46 2b       	or	r20, r22
     be0:	58 2f       	mov	r21, r24
     be2:	5d 29       	or	r21, r13
     be4:	b7 01       	movw	r22, r14
     be6:	ca 01       	movw	r24, r20
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	08 95       	ret

00000bf4 <__unpack_f>:
     bf4:	fc 01       	movw	r30, r24
     bf6:	db 01       	movw	r26, r22
     bf8:	40 81       	ld	r20, Z
     bfa:	51 81       	ldd	r21, Z+1	; 0x01
     bfc:	22 81       	ldd	r18, Z+2	; 0x02
     bfe:	62 2f       	mov	r22, r18
     c00:	6f 77       	andi	r22, 0x7F	; 127
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	22 1f       	adc	r18, r18
     c06:	22 27       	eor	r18, r18
     c08:	22 1f       	adc	r18, r18
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	89 2f       	mov	r24, r25
     c0e:	88 0f       	add	r24, r24
     c10:	82 2b       	or	r24, r18
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	99 1f       	adc	r25, r25
     c18:	99 27       	eor	r25, r25
     c1a:	99 1f       	adc	r25, r25
     c1c:	11 96       	adiw	r26, 0x01	; 1
     c1e:	9c 93       	st	X, r25
     c20:	11 97       	sbiw	r26, 0x01	; 1
     c22:	21 15       	cp	r18, r1
     c24:	31 05       	cpc	r19, r1
     c26:	a9 f5       	brne	.+106    	; 0xc92 <__unpack_f+0x9e>
     c28:	41 15       	cp	r20, r1
     c2a:	51 05       	cpc	r21, r1
     c2c:	61 05       	cpc	r22, r1
     c2e:	71 05       	cpc	r23, r1
     c30:	11 f4       	brne	.+4      	; 0xc36 <__unpack_f+0x42>
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	37 c0       	rjmp	.+110    	; 0xca4 <__unpack_f+0xb0>
     c36:	82 e8       	ldi	r24, 0x82	; 130
     c38:	9f ef       	ldi	r25, 0xFF	; 255
     c3a:	13 96       	adiw	r26, 0x03	; 3
     c3c:	9c 93       	st	X, r25
     c3e:	8e 93       	st	-X, r24
     c40:	12 97       	sbiw	r26, 0x02	; 2
     c42:	9a 01       	movw	r18, r20
     c44:	ab 01       	movw	r20, r22
     c46:	67 e0       	ldi	r22, 0x07	; 7
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	44 1f       	adc	r20, r20
     c4e:	55 1f       	adc	r21, r21
     c50:	6a 95       	dec	r22
     c52:	d1 f7       	brne	.-12     	; 0xc48 <__unpack_f+0x54>
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	8c 93       	st	X, r24
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <__unpack_f+0x80>
     c5a:	22 0f       	add	r18, r18
     c5c:	33 1f       	adc	r19, r19
     c5e:	44 1f       	adc	r20, r20
     c60:	55 1f       	adc	r21, r21
     c62:	12 96       	adiw	r26, 0x02	; 2
     c64:	8d 91       	ld	r24, X+
     c66:	9c 91       	ld	r25, X
     c68:	13 97       	sbiw	r26, 0x03	; 3
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	13 96       	adiw	r26, 0x03	; 3
     c6e:	9c 93       	st	X, r25
     c70:	8e 93       	st	-X, r24
     c72:	12 97       	sbiw	r26, 0x02	; 2
     c74:	20 30       	cpi	r18, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	38 07       	cpc	r19, r24
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	48 07       	cpc	r20, r24
     c7e:	80 e4       	ldi	r24, 0x40	; 64
     c80:	58 07       	cpc	r21, r24
     c82:	58 f3       	brcs	.-42     	; 0xc5a <__unpack_f+0x66>
     c84:	14 96       	adiw	r26, 0x04	; 4
     c86:	2d 93       	st	X+, r18
     c88:	3d 93       	st	X+, r19
     c8a:	4d 93       	st	X+, r20
     c8c:	5c 93       	st	X, r21
     c8e:	17 97       	sbiw	r26, 0x07	; 7
     c90:	08 95       	ret
     c92:	2f 3f       	cpi	r18, 0xFF	; 255
     c94:	31 05       	cpc	r19, r1
     c96:	79 f4       	brne	.+30     	; 0xcb6 <__unpack_f+0xc2>
     c98:	41 15       	cp	r20, r1
     c9a:	51 05       	cpc	r21, r1
     c9c:	61 05       	cpc	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	19 f4       	brne	.+6      	; 0xca8 <__unpack_f+0xb4>
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	8c 93       	st	X, r24
     ca6:	08 95       	ret
     ca8:	64 ff       	sbrs	r22, 4
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <__unpack_f+0xbe>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8c 93       	st	X, r24
     cb0:	12 c0       	rjmp	.+36     	; 0xcd6 <__unpack_f+0xe2>
     cb2:	1c 92       	st	X, r1
     cb4:	10 c0       	rjmp	.+32     	; 0xcd6 <__unpack_f+0xe2>
     cb6:	2f 57       	subi	r18, 0x7F	; 127
     cb8:	30 40       	sbci	r19, 0x00	; 0
     cba:	13 96       	adiw	r26, 0x03	; 3
     cbc:	3c 93       	st	X, r19
     cbe:	2e 93       	st	-X, r18
     cc0:	12 97       	sbiw	r26, 0x02	; 2
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	8c 93       	st	X, r24
     cc6:	87 e0       	ldi	r24, 0x07	; 7
     cc8:	44 0f       	add	r20, r20
     cca:	55 1f       	adc	r21, r21
     ccc:	66 1f       	adc	r22, r22
     cce:	77 1f       	adc	r23, r23
     cd0:	8a 95       	dec	r24
     cd2:	d1 f7       	brne	.-12     	; 0xcc8 <__unpack_f+0xd4>
     cd4:	70 64       	ori	r23, 0x40	; 64
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	4d 93       	st	X+, r20
     cda:	5d 93       	st	X+, r21
     cdc:	6d 93       	st	X+, r22
     cde:	7c 93       	st	X, r23
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret

00000ce4 <__fpcmp_parts_f>:
     ce4:	1f 93       	push	r17
     ce6:	dc 01       	movw	r26, r24
     ce8:	fb 01       	movw	r30, r22
     cea:	9c 91       	ld	r25, X
     cec:	92 30       	cpi	r25, 0x02	; 2
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <__fpcmp_parts_f+0xe>
     cf0:	47 c0       	rjmp	.+142    	; 0xd80 <__fpcmp_parts_f+0x9c>
     cf2:	80 81       	ld	r24, Z
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <__fpcmp_parts_f+0x16>
     cf8:	43 c0       	rjmp	.+134    	; 0xd80 <__fpcmp_parts_f+0x9c>
     cfa:	94 30       	cpi	r25, 0x04	; 4
     cfc:	51 f4       	brne	.+20     	; 0xd12 <__fpcmp_parts_f+0x2e>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	99 f5       	brne	.+102    	; 0xd6c <__fpcmp_parts_f+0x88>
     d06:	81 81       	ldd	r24, Z+1	; 0x01
     d08:	68 2f       	mov	r22, r24
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	61 1b       	sub	r22, r17
     d0e:	71 09       	sbc	r23, r1
     d10:	3f c0       	rjmp	.+126    	; 0xd90 <__fpcmp_parts_f+0xac>
     d12:	84 30       	cpi	r24, 0x04	; 4
     d14:	21 f0       	breq	.+8      	; 0xd1e <__fpcmp_parts_f+0x3a>
     d16:	92 30       	cpi	r25, 0x02	; 2
     d18:	31 f4       	brne	.+12     	; 0xd26 <__fpcmp_parts_f+0x42>
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	b9 f1       	breq	.+110    	; 0xd8c <__fpcmp_parts_f+0xa8>
     d1e:	81 81       	ldd	r24, Z+1	; 0x01
     d20:	88 23       	and	r24, r24
     d22:	89 f1       	breq	.+98     	; 0xd86 <__fpcmp_parts_f+0xa2>
     d24:	2d c0       	rjmp	.+90     	; 0xd80 <__fpcmp_parts_f+0x9c>
     d26:	11 96       	adiw	r26, 0x01	; 1
     d28:	1c 91       	ld	r17, X
     d2a:	11 97       	sbiw	r26, 0x01	; 1
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	f1 f0       	breq	.+60     	; 0xd6c <__fpcmp_parts_f+0x88>
     d30:	81 81       	ldd	r24, Z+1	; 0x01
     d32:	18 17       	cp	r17, r24
     d34:	d9 f4       	brne	.+54     	; 0xd6c <__fpcmp_parts_f+0x88>
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	2d 91       	ld	r18, X+
     d3a:	3c 91       	ld	r19, X
     d3c:	13 97       	sbiw	r26, 0x03	; 3
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	82 17       	cp	r24, r18
     d44:	93 07       	cpc	r25, r19
     d46:	94 f0       	brlt	.+36     	; 0xd6c <__fpcmp_parts_f+0x88>
     d48:	28 17       	cp	r18, r24
     d4a:	39 07       	cpc	r19, r25
     d4c:	bc f0       	brlt	.+46     	; 0xd7c <__fpcmp_parts_f+0x98>
     d4e:	14 96       	adiw	r26, 0x04	; 4
     d50:	8d 91       	ld	r24, X+
     d52:	9d 91       	ld	r25, X+
     d54:	0d 90       	ld	r0, X+
     d56:	bc 91       	ld	r27, X
     d58:	a0 2d       	mov	r26, r0
     d5a:	24 81       	ldd	r18, Z+4	; 0x04
     d5c:	35 81       	ldd	r19, Z+5	; 0x05
     d5e:	46 81       	ldd	r20, Z+6	; 0x06
     d60:	57 81       	ldd	r21, Z+7	; 0x07
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	4a 07       	cpc	r20, r26
     d68:	5b 07       	cpc	r21, r27
     d6a:	18 f4       	brcc	.+6      	; 0xd72 <__fpcmp_parts_f+0x8e>
     d6c:	11 23       	and	r17, r17
     d6e:	41 f0       	breq	.+16     	; 0xd80 <__fpcmp_parts_f+0x9c>
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <__fpcmp_parts_f+0xa2>
     d72:	82 17       	cp	r24, r18
     d74:	93 07       	cpc	r25, r19
     d76:	a4 07       	cpc	r26, r20
     d78:	b5 07       	cpc	r27, r21
     d7a:	40 f4       	brcc	.+16     	; 0xd8c <__fpcmp_parts_f+0xa8>
     d7c:	11 23       	and	r17, r17
     d7e:	19 f0       	breq	.+6      	; 0xd86 <__fpcmp_parts_f+0xa2>
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	05 c0       	rjmp	.+10     	; 0xd90 <__fpcmp_parts_f+0xac>
     d86:	6f ef       	ldi	r22, 0xFF	; 255
     d88:	7f ef       	ldi	r23, 0xFF	; 255
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <__fpcmp_parts_f+0xac>
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	cb 01       	movw	r24, r22
     d92:	1f 91       	pop	r17
     d94:	08 95       	ret

00000d96 <Timer_enu_Initialization>:
static void (* apfun_ISRpointers[TIMER_ISR_COUNT])(void*)= { NULL};
static void* apvid_ISRParameters[TIMER_ISR_COUNT] = {NULL};

//APIs implementaion
extern ErrorState_t Timer_enu_Initialization(void)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <Timer_enu_Initialization+0x6>
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <Timer_enu_Initialization+0x8>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <Timer_enu_Initialization+0xa>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
     da4:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Counter = 0;
     da6:	19 82       	std	Y+1, r1	; 0x01

    u8 Local_au8_ErrorStates [4] ={0};
     da8:	1b 82       	std	Y+3, r1	; 0x03
     daa:	1c 82       	std	Y+4, r1	; 0x04
     dac:	1d 82       	std	Y+5, r1	; 0x05
     dae:	1e 82       	std	Y+6, r1	; 0x06

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
     db0:	19 82       	std	Y+1, r1	; 0x01
     db2:	b3 c0       	rjmp	.+358    	; 0xf1a <Timer_enu_Initialization+0x184>
    {
        
      Local_au8_ErrorStates[0] = enu_SetTimerMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode);
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	c9 01       	movw	r24, r18
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	fc 01       	movw	r30, r24
     dca:	e7 59       	subi	r30, 0x97	; 151
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	40 81       	ld	r20, Z
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	c9 01       	movw	r24, r18
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	82 0f       	add	r24, r18
     de2:	93 1f       	adc	r25, r19
     de4:	fc 01       	movw	r30, r24
     de6:	e6 59       	subi	r30, 0x96	; 150
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	90 81       	ld	r25, Z
     dec:	84 2f       	mov	r24, r20
     dee:	69 2f       	mov	r22, r25
     df0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <enu_SetTimerMode>
     df4:	8b 83       	std	Y+3, r24	; 0x03
      Local_au8_ErrorStates[1] = enu_SetClockSelection(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].ClockSelection);
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	c9 01       	movw	r24, r18
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	fc 01       	movw	r30, r24
     e0c:	e7 59       	subi	r30, 0x97	; 151
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	40 81       	ld	r20, Z
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	c9 01       	movw	r24, r18
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	82 0f       	add	r24, r18
     e24:	93 1f       	adc	r25, r19
     e26:	fc 01       	movw	r30, r24
     e28:	e5 59       	subi	r30, 0x95	; 149
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	90 81       	ld	r25, Z
     e2e:	84 2f       	mov	r24, r20
     e30:	69 2f       	mov	r22, r25
     e32:	0e 94 31 0c 	call	0x1862	; 0x1862 <enu_SetClockSelection>
     e36:	8c 83       	std	Y+4, r24	; 0x04
      Local_au8_ErrorStates[2] = enu_SetInterruptMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode, Timer_astr_TimerList[Local_u8_Counter].InterruptMode);
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	c9 01       	movw	r24, r18
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	82 0f       	add	r24, r18
     e4a:	93 1f       	adc	r25, r19
     e4c:	fc 01       	movw	r30, r24
     e4e:	e7 59       	subi	r30, 0x97	; 151
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	50 81       	ld	r21, Z
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	c9 01       	movw	r24, r18
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	fc 01       	movw	r30, r24
     e6a:	e6 59       	subi	r30, 0x96	; 150
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	40 81       	ld	r20, Z
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	c9 01       	movw	r24, r18
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	fc 01       	movw	r30, r24
     e86:	e4 59       	subi	r30, 0x94	; 148
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	90 81       	ld	r25, Z
     e8c:	85 2f       	mov	r24, r21
     e8e:	64 2f       	mov	r22, r20
     e90:	49 2f       	mov	r20, r25
     e92:	0e 94 57 0e 	call	0x1cae	; 0x1cae <enu_SetInterruptMode>
     e96:	8d 83       	std	Y+5, r24	; 0x05
      Local_au8_ErrorStates[3] = enu_SetOCxBehavior(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode ,Timer_astr_TimerList[Local_u8_Counter].OCxPinBehavior);
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	c9 01       	movw	r24, r18
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	82 0f       	add	r24, r18
     eaa:	93 1f       	adc	r25, r19
     eac:	fc 01       	movw	r30, r24
     eae:	e7 59       	subi	r30, 0x97	; 151
     eb0:	fe 4f       	sbci	r31, 0xFE	; 254
     eb2:	50 81       	ld	r21, Z
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	c9 01       	movw	r24, r18
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	82 0f       	add	r24, r18
     ec6:	93 1f       	adc	r25, r19
     ec8:	fc 01       	movw	r30, r24
     eca:	e6 59       	subi	r30, 0x96	; 150
     ecc:	fe 4f       	sbci	r31, 0xFE	; 254
     ece:	40 81       	ld	r20, Z
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	c9 01       	movw	r24, r18
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	82 0f       	add	r24, r18
     ee2:	93 1f       	adc	r25, r19
     ee4:	fc 01       	movw	r30, r24
     ee6:	e3 59       	subi	r30, 0x93	; 147
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	90 81       	ld	r25, Z
     eec:	85 2f       	mov	r24, r21
     eee:	64 2f       	mov	r22, r20
     ef0:	49 2f       	mov	r20, r25
     ef2:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <enu_SetOCxBehavior>
     ef6:	8e 83       	std	Y+6, r24	; 0x06
    
      if((Local_au8_ErrorStates[0] == ES_NOK) || (Local_au8_ErrorStates[1] == ES_NOK) || (Local_au8_ErrorStates[2] == ES_NOK) || (Local_au8_ErrorStates[3] == ES_NOK))
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	49 f0       	breq	.+18     	; 0xf10 <Timer_enu_Initialization+0x17a>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	31 f0       	breq	.+12     	; 0xf10 <Timer_enu_Initialization+0x17a>
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	19 f0       	breq	.+6      	; 0xf10 <Timer_enu_Initialization+0x17a>
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	11 f4       	brne	.+4      	; 0xf14 <Timer_enu_Initialization+0x17e>
      {
        Local_u8_ErrorFlag = ES_NOK;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Counter = 0;

    u8 Local_au8_ErrorStates [4] ={0};

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	90 91 68 01 	lds	r25, 0x0168
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	89 17       	cp	r24, r25
     f22:	08 f4       	brcc	.+2      	; 0xf26 <Timer_enu_Initialization+0x190>
     f24:	47 cf       	rjmp	.-370    	; 0xdb4 <Timer_enu_Initialization+0x1e>
      }
    }
    


    return Local_u8_ErrorFlag;
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f28:	26 96       	adiw	r28, 0x06	; 6
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <Timer_enu_SetOCRxValue>:

extern ErrorState_t Timer_enu_SetOCRxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <Timer_enu_SetOCRxValue+0x6>
     f40:	00 d0       	rcall	.+0      	; 0xf42 <Timer_enu_SetOCRxValue+0x8>
     f42:	00 d0       	rcall	.+0      	; 0xf44 <Timer_enu_SetOCRxValue+0xa>
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	8a 83       	std	Y+2, r24	; 0x02
     f4a:	7c 83       	std	Y+4, r23	; 0x04
     f4c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3e 83       	std	Y+6, r19	; 0x06
     f5a:	2d 83       	std	Y+5, r18	; 0x05
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	91 05       	cpc	r25, r1
     f64:	b9 f0       	breq	.+46     	; 0xf94 <Timer_enu_SetOCRxValue+0x5a>
     f66:	2d 81       	ldd	r18, Y+5	; 0x05
     f68:	3e 81       	ldd	r19, Y+6	; 0x06
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	51 f0       	breq	.+20     	; 0xf84 <Timer_enu_SetOCRxValue+0x4a>
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	9e 81       	ldd	r25, Y+6	; 0x06
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	61 f4       	brne	.+24     	; 0xf90 <Timer_enu_SetOCRxValue+0x56>
    {
        case TIMER_0:
        {
            OCR0 = Copy_u16_Value;
     f78:	ec e5       	ldi	r30, 0x5C	; 92
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
     f80:	19 82       	std	Y+1, r1	; 0x01
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }

        case TIMER_2:
        {
            OCR2 = Copy_u16_Value;
     f84:	e3 e4       	ldi	r30, 0x43	; 67
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
     f8c:	19 82       	std	Y+1, r1	; 0x01
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
}
     f96:	26 96       	adiw	r28, 0x06	; 6
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <Timer_enu_SetTCNTxValue>:

extern ErrorState_t Timer_enu_SetTCNTxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	00 d0       	rcall	.+0      	; 0xfae <Timer_enu_SetTCNTxValue+0x6>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <Timer_enu_SetTCNTxValue+0x8>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <Timer_enu_SetTCNTxValue+0xa>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	8a 83       	std	Y+2, r24	; 0x02
     fb8:	7c 83       	std	Y+4, r23	; 0x04
     fba:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	3e 83       	std	Y+6, r19	; 0x06
     fc8:	2d 83       	std	Y+5, r18	; 0x05
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	b1 f0       	breq	.+44     	; 0x1000 <Timer_enu_SetTCNTxValue+0x58>
     fd4:	2d 81       	ldd	r18, Y+5	; 0x05
     fd6:	3e 81       	ldd	r19, Y+6	; 0x06
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	51 f0       	breq	.+20     	; 0xff2 <Timer_enu_SetTCNTxValue+0x4a>
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	59 f4       	brne	.+22     	; 0xffc <Timer_enu_SetTCNTxValue+0x54>
    {
        case TIMER_0:
        {
            TCNT0 = (u8)Copy_u16_Value;
     fe6:	e2 e5       	ldi	r30, 0x52	; 82
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }

        case TIMER_2:
        {
            TCNT2 = (u8)Copy_u16_Value;
     ff2:	e4 e4       	ldi	r30, 0x44	; 68
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	80 83       	st	Z, r24
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
}
    1002:	26 96       	adiw	r28, 0x06	; 6
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <Timer_enu_ReadTCNTxValue>:

extern ErrorState_t Timer_enu_ReadTCNTxValue(u8 Copy_u8_TimerNumber, u16* Copy_u16_Value)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <Timer_enu_ReadTCNTxValue+0x6>
    101a:	00 d0       	rcall	.+0      	; 0x101c <Timer_enu_ReadTCNTxValue+0x8>
    101c:	00 d0       	rcall	.+0      	; 0x101e <Timer_enu_ReadTCNTxValue+0xa>
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	8a 83       	std	Y+2, r24	; 0x02
    1024:	7c 83       	std	Y+4, r23	; 0x04
    1026:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u16_Value)
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	61 f1       	breq	.+88     	; 0x108c <Timer_enu_ReadTCNTxValue+0x78>
    {
        switch (Copy_u8_TimerNumber)
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3e 83       	std	Y+6, r19	; 0x06
    103c:	2d 83       	std	Y+5, r18	; 0x05
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	91 05       	cpc	r25, r1
    1046:	21 f1       	breq	.+72     	; 0x1090 <Timer_enu_ReadTCNTxValue+0x7c>
    1048:	2d 81       	ldd	r18, Y+5	; 0x05
    104a:	3e 81       	ldd	r19, Y+6	; 0x06
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	79 f0       	breq	.+30     	; 0x1070 <Timer_enu_ReadTCNTxValue+0x5c>
    1052:	8d 81       	ldd	r24, Y+5	; 0x05
    1054:	9e 81       	ldd	r25, Y+6	; 0x06
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	b1 f4       	brne	.+44     	; 0x1086 <Timer_enu_ReadTCNTxValue+0x72>
        {
            case TIMER_0:
            {
                *Copy_u16_Value = TCNT0;
    105a:	e2 e5       	ldi	r30, 0x52	; 82
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	eb 81       	ldd	r30, Y+3	; 0x03
    1066:	fc 81       	ldd	r31, Y+4	; 0x04
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    106c:	19 82       	std	Y+1, r1	; 0x01
    106e:	10 c0       	rjmp	.+32     	; 0x1090 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }

            case TIMER_2:
            {
                *Copy_u16_Value = TCNT2;
    1070:	e4 e4       	ldi	r30, 0x44	; 68
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	eb 81       	ldd	r30, Y+3	; 0x03
    107c:	fc 81       	ldd	r31, Y+4	; 0x04
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    1082:	19 82       	std	Y+1, r1	; 0x01
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <Timer_enu_ReadTCNTxValue+0x7c>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
}
    1092:	26 96       	adiw	r28, 0x06	; 6
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <Timer_enu_SetClock>:

extern ErrorState_t Timer_enu_SetClock (u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <Timer_enu_SetClock+0x6>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	8a 83       	std	Y+2, r24	; 0x02
    10b2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetClockSelection(Copy_u8_TimerNumber, Copy_u8_ClockSelection);
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	6b 81       	ldd	r22, Y+3	; 0x03
    10bc:	0e 94 31 0c 	call	0x1862	; 0x1862 <enu_SetClockSelection>
    10c0:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <Timer_enu_SetDutyCycleForPWM>:

ErrorState_t Timer_enu_SetDutyCycleForPWM(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_PulseType, f32 Copy_f32_DutyCyclePercentage)
{
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	2c 97       	sbiw	r28, 0x0c	; 12
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	6b 83       	std	Y+3, r22	; 0x03
    10ec:	4c 83       	std	Y+4, r20	; 0x04
    10ee:	0d 83       	std	Y+5, r16	; 0x05
    10f0:	1e 83       	std	Y+6, r17	; 0x06
    10f2:	2f 83       	std	Y+7, r18	; 0x07
    10f4:	38 87       	std	Y+8, r19	; 0x08
    u8 Local_u8_ErrorFlag = ES_NOK;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_f32_DutyCyclePercentage >= TIMER_DUTYCYCLE_0) && (Copy_f32_DutyCyclePercentage <= TIMER_DUTYCYCLE_100))
    10fa:	1c 86       	std	Y+12, r1	; 0x0c
    10fc:	6d 81       	ldd	r22, Y+5	; 0x05
    10fe:	7e 81       	ldd	r23, Y+6	; 0x06
    1100:	8f 81       	ldd	r24, Y+7	; 0x07
    1102:	98 85       	ldd	r25, Y+8	; 0x08
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
    1110:	88 23       	and	r24, r24
    1112:	14 f0       	brlt	.+4      	; 0x1118 <Timer_enu_SetDutyCycleForPWM+0x48>
    1114:	21 e0       	ldi	r18, 0x01	; 1
    1116:	2c 87       	std	Y+12, r18	; 0x0c
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	3c 85       	ldd	r19, Y+12	; 0x0c
    111c:	83 27       	eor	r24, r19
    111e:	88 23       	and	r24, r24
    1120:	09 f0       	breq	.+2      	; 0x1124 <Timer_enu_SetDutyCycleForPWM+0x54>
    1122:	66 c1       	rjmp	.+716    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
    1124:	1b 86       	std	Y+11, r1	; 0x0b
    1126:	6d 81       	ldd	r22, Y+5	; 0x05
    1128:	7e 81       	ldd	r23, Y+6	; 0x06
    112a:	8f 81       	ldd	r24, Y+7	; 0x07
    112c:	98 85       	ldd	r25, Y+8	; 0x08
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e8       	ldi	r20, 0x80	; 128
    1134:	5f e3       	ldi	r21, 0x3F	; 63
    1136:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__lesf2>
    113a:	18 16       	cp	r1, r24
    113c:	14 f0       	brlt	.+4      	; 0x1142 <Timer_enu_SetDutyCycleForPWM+0x72>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	8b 87       	std	Y+11, r24	; 0x0b
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	9b 85       	ldd	r25, Y+11	; 0x0b
    1146:	89 27       	eor	r24, r25
    1148:	88 23       	and	r24, r24
    114a:	09 f0       	breq	.+2      	; 0x114e <Timer_enu_SetDutyCycleForPWM+0x7e>
    114c:	51 c1       	rjmp	.+674    	; 0x13f0 <Timer_enu_SetDutyCycleForPWM+0x320>
    {
        switch (Copy_u8_TimerNumber)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	e8 2f       	mov	r30, r24
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	fa 87       	std	Y+10, r31	; 0x0a
    1156:	e9 87       	std	Y+9, r30	; 0x09
    1158:	29 85       	ldd	r18, Y+9	; 0x09
    115a:	3a 85       	ldd	r19, Y+10	; 0x0a
    115c:	21 30       	cpi	r18, 0x01	; 1
    115e:	31 05       	cpc	r19, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <Timer_enu_SetDutyCycleForPWM+0x94>
    1162:	48 c1       	rjmp	.+656    	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
    1164:	89 85       	ldd	r24, Y+9	; 0x09
    1166:	9a 85       	ldd	r25, Y+10	; 0x0a
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	91 05       	cpc	r25, r1
    116c:	09 f4       	brne	.+2      	; 0x1170 <Timer_enu_SetDutyCycleForPWM+0xa0>
    116e:	a0 c0       	rjmp	.+320    	; 0x12b0 <Timer_enu_SetDutyCycleForPWM+0x1e0>
    1170:	e9 85       	ldd	r30, Y+9	; 0x09
    1172:	fa 85       	ldd	r31, Y+10	; 0x0a
    1174:	30 97       	sbiw	r30, 0x00	; 0
    1176:	09 f0       	breq	.+2      	; 0x117a <Timer_enu_SetDutyCycleForPWM+0xaa>
    1178:	38 c1       	rjmp	.+624    	; 0x13ea <Timer_enu_SetDutyCycleForPWM+0x31a>
        {
            case TIMER_0:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	09 f0       	breq	.+2      	; 0x1182 <Timer_enu_SetDutyCycleForPWM+0xb2>
    1180:	43 c0       	rjmp	.+134    	; 0x1208 <Timer_enu_SetDutyCycleForPWM+0x138>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	86 30       	cpi	r24, 0x06	; 6
    1186:	c1 f4       	brne	.+48     	; 0x11b8 <Timer_enu_SetDutyCycleForPWM+0xe8>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = Copy_f32_DutyCyclePercentage*TIMER_TCNT0_TOP;
    1188:	0c e5       	ldi	r16, 0x5C	; 92
    118a:	10 e0       	ldi	r17, 0x00	; 0
    118c:	6d 81       	ldd	r22, Y+5	; 0x05
    118e:	7e 81       	ldd	r23, Y+6	; 0x06
    1190:	8f 81       	ldd	r24, Y+7	; 0x07
    1192:	98 85       	ldd	r25, Y+8	; 0x08
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e8       	ldi	r20, 0x80	; 128
    119a:	53 e4       	ldi	r21, 0x43	; 67
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	f8 01       	movw	r30, r16
    11b2:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	1e c1       	rjmp	.+572    	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	87 30       	cpi	r24, 0x07	; 7
    11bc:	11 f5       	brne	.+68     	; 0x1202 <Timer_enu_SetDutyCycleForPWM+0x132>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP - (Copy_f32_DutyCyclePercentage*TIMER_TCNT0_TOP) ;
    11be:	0c e5       	ldi	r16, 0x5C	; 92
    11c0:	10 e0       	ldi	r17, 0x00	; 0
    11c2:	6d 81       	ldd	r22, Y+5	; 0x05
    11c4:	7e 81       	ldd	r23, Y+6	; 0x06
    11c6:	8f 81       	ldd	r24, Y+7	; 0x07
    11c8:	98 85       	ldd	r25, Y+8	; 0x08
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e8       	ldi	r20, 0x80	; 128
    11d0:	53 ec       	ldi	r21, 0xC3	; 195
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	53 e4       	ldi	r21, 0x43	; 67
    11e6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	f8 01       	movw	r30, r16
    11fc:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    11fe:	19 82       	std	Y+1, r1	; 0x01
    1200:	f9 c0       	rjmp	.+498    	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	f6 c0       	rjmp	.+492    	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	09 f0       	breq	.+2      	; 0x1210 <Timer_enu_SetDutyCycleForPWM+0x140>
    120e:	4d c0       	rjmp	.+154    	; 0x12aa <Timer_enu_SetDutyCycleForPWM+0x1da>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	11 f5       	brne	.+68     	; 0x125a <Timer_enu_SetDutyCycleForPWM+0x18a>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1)) - 1;
    1216:	0c e5       	ldi	r16, 0x5C	; 92
    1218:	10 e0       	ldi	r17, 0x00	; 0
    121a:	6d 81       	ldd	r22, Y+5	; 0x05
    121c:	7e 81       	ldd	r23, Y+6	; 0x06
    121e:	8f 81       	ldd	r24, Y+7	; 0x07
    1220:	98 85       	ldd	r25, Y+8	; 0x08
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e8       	ldi	r19, 0x80	; 128
    1226:	40 e8       	ldi	r20, 0x80	; 128
    1228:	53 e4       	ldi	r21, 0x43	; 67
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	bc 01       	movw	r22, r24
    1234:	cd 01       	movw	r24, r26
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	5f e3       	ldi	r21, 0x3F	; 63
    123e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	f8 01       	movw	r30, r16
    1254:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	cd c0       	rjmp	.+410    	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	85 30       	cpi	r24, 0x05	; 5
    125e:	11 f5       	brne	.+68     	; 0x12a4 <Timer_enu_SetDutyCycleForPWM+0x1d4>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1)) ;
    1260:	0c e5       	ldi	r16, 0x5C	; 92
    1262:	10 e0       	ldi	r17, 0x00	; 0
    1264:	6d 81       	ldd	r22, Y+5	; 0x05
    1266:	7e 81       	ldd	r23, Y+6	; 0x06
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	98 85       	ldd	r25, Y+8	; 0x08
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e8       	ldi	r19, 0x80	; 128
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	53 ec       	ldi	r21, 0xC3	; 195
    1274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	bc 01       	movw	r22, r24
    127e:	cd 01       	movw	r24, r26
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e8       	ldi	r20, 0x80	; 128
    1286:	53 e4       	ldi	r21, 0x43	; 67
    1288:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	f8 01       	movw	r30, r16
    129e:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    12a0:	19 82       	std	Y+1, r1	; 0x01
    12a2:	a8 c0       	rjmp	.+336    	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	a5 c0       	rjmp	.+330    	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                    }
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	a2 c0       	rjmp	.+324    	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                break;
            }

            case TIMER_2:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <Timer_enu_SetDutyCycleForPWM+0x1e8>
    12b6:	43 c0       	rjmp	.+134    	; 0x133e <Timer_enu_SetDutyCycleForPWM+0x26e>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	86 30       	cpi	r24, 0x06	; 6
    12bc:	c1 f4       	brne	.+48     	; 0x12ee <Timer_enu_SetDutyCycleForPWM+0x21e>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = Copy_f32_DutyCyclePercentage*TIMER_TCNT2_TOP;
    12be:	03 e4       	ldi	r16, 0x43	; 67
    12c0:	10 e0       	ldi	r17, 0x00	; 0
    12c2:	6d 81       	ldd	r22, Y+5	; 0x05
    12c4:	7e 81       	ldd	r23, Y+6	; 0x06
    12c6:	8f 81       	ldd	r24, Y+7	; 0x07
    12c8:	98 85       	ldd	r25, Y+8	; 0x08
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e8       	ldi	r20, 0x80	; 128
    12d0:	53 e4       	ldi	r21, 0x43	; 67
    12d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	f8 01       	movw	r30, r16
    12e8:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    12ea:	19 82       	std	Y+1, r1	; 0x01
    12ec:	83 c0       	rjmp	.+262    	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	87 30       	cpi	r24, 0x07	; 7
    12f2:	11 f5       	brne	.+68     	; 0x1338 <Timer_enu_SetDutyCycleForPWM+0x268>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP - (Copy_f32_DutyCyclePercentage*TIMER_TCNT2_TOP) ;
    12f4:	03 e4       	ldi	r16, 0x43	; 67
    12f6:	10 e0       	ldi	r17, 0x00	; 0
    12f8:	6d 81       	ldd	r22, Y+5	; 0x05
    12fa:	7e 81       	ldd	r23, Y+6	; 0x06
    12fc:	8f 81       	ldd	r24, Y+7	; 0x07
    12fe:	98 85       	ldd	r25, Y+8	; 0x08
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e8       	ldi	r20, 0x80	; 128
    1306:	53 ec       	ldi	r21, 0xC3	; 195
    1308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e8       	ldi	r20, 0x80	; 128
    131a:	53 e4       	ldi	r21, 0x43	; 67
    131c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	f8 01       	movw	r30, r16
    1332:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1334:	19 82       	std	Y+1, r1	; 0x01
    1336:	5e c0       	rjmp	.+188    	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	5b c0       	rjmp	.+182    	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	09 f0       	breq	.+2      	; 0x1346 <Timer_enu_SetDutyCycleForPWM+0x276>
    1344:	4f c0       	rjmp	.+158    	; 0x13e4 <Timer_enu_SetDutyCycleForPWM+0x314>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	84 30       	cpi	r24, 0x04	; 4
    134a:	19 f5       	brne	.+70     	; 0x1392 <Timer_enu_SetDutyCycleForPWM+0x2c2>
                    {
                        //Using Duty Cycle Rule for non inverting phase PWM mode
                        OCR2 = -(((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1)) - TIMER_TCNT2_TOP);
    134c:	03 e4       	ldi	r16, 0x43	; 67
    134e:	10 e0       	ldi	r17, 0x00	; 0
    1350:	6d 81       	ldd	r22, Y+5	; 0x05
    1352:	7e 81       	ldd	r23, Y+6	; 0x06
    1354:	8f 81       	ldd	r24, Y+7	; 0x07
    1356:	98 85       	ldd	r25, Y+8	; 0x08
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e8       	ldi	r19, 0x80	; 128
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	53 e4       	ldi	r21, 0x43	; 67
    1360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	bc 01       	movw	r22, r24
    136a:	cd 01       	movw	r24, r26
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e8       	ldi	r20, 0x80	; 128
    1372:	53 e4       	ldi	r21, 0x43	; 67
    1374:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	b0 58       	subi	r27, 0x80	; 128
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	f8 01       	movw	r30, r16
    138c:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    138e:	19 82       	std	Y+1, r1	; 0x01
    1390:	27 c0       	rjmp	.+78     	; 0x13e0 <Timer_enu_SetDutyCycleForPWM+0x310>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	85 30       	cpi	r24, 0x05	; 5
    1396:	11 f5       	brne	.+68     	; 0x13dc <Timer_enu_SetDutyCycleForPWM+0x30c>
                    {
                        //Using Duty Cycle Rule for non inverting phase PWM mode
                        OCR2 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1)) - 1;
    1398:	03 e4       	ldi	r16, 0x43	; 67
    139a:	10 e0       	ldi	r17, 0x00	; 0
    139c:	6d 81       	ldd	r22, Y+5	; 0x05
    139e:	7e 81       	ldd	r23, Y+6	; 0x06
    13a0:	8f 81       	ldd	r24, Y+7	; 0x07
    13a2:	98 85       	ldd	r25, Y+8	; 0x08
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e8       	ldi	r19, 0x80	; 128
    13a8:	40 e8       	ldi	r20, 0x80	; 128
    13aa:	53 e4       	ldi	r21, 0x43	; 67
    13ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e8       	ldi	r20, 0x80	; 128
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	f8 01       	movw	r30, r16
    13d6:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    13d8:	19 82       	std	Y+1, r1	; 0x01
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <Timer_enu_SetDutyCycleForPWM+0x310>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	89 83       	std	Y+1, r24	; 0x01
                    }

                    Local_u8_ErrorFlag = ES_OK;
    13e0:	19 82       	std	Y+1, r1	; 0x01
    13e2:	08 c0       	rjmp	.+16     	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <Timer_enu_SetDutyCycleForPWM+0x324>
            }
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f6:	2c 96       	adiw	r28, 0x0c	; 12
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	08 95       	ret

0000140c <Timer_enu_SetCallBack>:

extern ErrorState_t Timer_enu_SetCallBack (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, void (*Copy_pfun_AppFunction)(void*), void* Copy_pvid_Parameters)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	29 97       	sbiw	r28, 0x09	; 9
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	8a 83       	std	Y+2, r24	; 0x02
    1422:	6b 83       	std	Y+3, r22	; 0x03
    1424:	5d 83       	std	Y+5, r21	; 0x05
    1426:	4c 83       	std	Y+4, r20	; 0x04
    1428:	3f 83       	std	Y+7, r19	; 0x07
    142a:	2e 83       	std	Y+6, r18	; 0x06
    u8 Local_u8_ErrorFlag = ES_NOK;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pfun_AppFunction)
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	09 f4       	brne	.+2      	; 0x143a <Timer_enu_SetCallBack+0x2e>
    1438:	62 c0       	rjmp	.+196    	; 0x14fe <Timer_enu_SetCallBack+0xf2>
    {
        switch (Copy_u8_TimerNumber)
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	39 87       	std	Y+9, r19	; 0x09
    1442:	28 87       	std	Y+8, r18	; 0x08
    1444:	88 85       	ldd	r24, Y+8	; 0x08
    1446:	99 85       	ldd	r25, Y+9	; 0x09
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	09 f4       	brne	.+2      	; 0x1450 <Timer_enu_SetCallBack+0x44>
    144e:	59 c0       	rjmp	.+178    	; 0x1502 <Timer_enu_SetCallBack+0xf6>
    1450:	28 85       	ldd	r18, Y+8	; 0x08
    1452:	39 85       	ldd	r19, Y+9	; 0x09
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	51 f1       	breq	.+84     	; 0x14ae <Timer_enu_SetCallBack+0xa2>
    145a:	88 85       	ldd	r24, Y+8	; 0x08
    145c:	99 85       	ldd	r25, Y+9	; 0x09
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	09 f0       	breq	.+2      	; 0x1464 <Timer_enu_SetCallBack+0x58>
    1462:	4a c0       	rjmp	.+148    	; 0x14f8 <Timer_enu_SetCallBack+0xec>
        {
            case TIMER_0:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	88 23       	and	r24, r24
    1468:	71 f4       	brne	.+28     	; 0x1486 <Timer_enu_SetCallBack+0x7a>
                {
                    apfun_ISRpointers[TIMER_0_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	90 93 b3 01 	sts	0x01B3, r25
    1472:	80 93 b2 01 	sts	0x01B2, r24

                    apvid_ISRParameters[TIMER_0_OVERFLOW_ISR] = Copy_pvid_Parameters;
    1476:	8e 81       	ldd	r24, Y+6	; 0x06
    1478:	9f 81       	ldd	r25, Y+7	; 0x07
    147a:	90 93 c3 01 	sts	0x01C3, r25
    147e:	80 93 c2 01 	sts	0x01C2, r24

                    Local_u8_ErrorFlag = ES_OK;
    1482:	19 82       	std	Y+1, r1	; 0x01
    1484:	3e c0       	rjmp	.+124    	; 0x1502 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	71 f4       	brne	.+28     	; 0x14a8 <Timer_enu_SetCallBack+0x9c>
                {
                    apfun_ISRpointers[TIMER_0_CTC_ISR] = Copy_pfun_AppFunction;
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	90 93 b1 01 	sts	0x01B1, r25
    1494:	80 93 b0 01 	sts	0x01B0, r24

                    apvid_ISRParameters[TIMER_0_CTC_ISR] = Copy_pvid_Parameters;
    1498:	8e 81       	ldd	r24, Y+6	; 0x06
    149a:	9f 81       	ldd	r25, Y+7	; 0x07
    149c:	90 93 c1 01 	sts	0x01C1, r25
    14a0:	80 93 c0 01 	sts	0x01C0, r24

                    Local_u8_ErrorFlag = ES_OK;
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	2d c0       	rjmp	.+90     	; 0x1502 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	2a c0       	rjmp	.+84     	; 0x1502 <Timer_enu_SetCallBack+0xf6>
                break;
            }

            case TIMER_2:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	88 23       	and	r24, r24
    14b2:	71 f4       	brne	.+28     	; 0x14d0 <Timer_enu_SetCallBack+0xc4>
                {
                    apfun_ISRpointers[TIMER_2_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	90 93 a7 01 	sts	0x01A7, r25
    14bc:	80 93 a6 01 	sts	0x01A6, r24

                    apvid_ISRParameters[TIMER_2_OVERFLOW_ISR] = Copy_pvid_Parameters;
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	9f 81       	ldd	r25, Y+7	; 0x07
    14c4:	90 93 b7 01 	sts	0x01B7, r25
    14c8:	80 93 b6 01 	sts	0x01B6, r24

                    Local_u8_ErrorFlag = ES_OK;
    14cc:	19 82       	std	Y+1, r1	; 0x01
    14ce:	19 c0       	rjmp	.+50     	; 0x1502 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	71 f4       	brne	.+28     	; 0x14f2 <Timer_enu_SetCallBack+0xe6>
                {
                    apfun_ISRpointers[TIMER_2_CTC_ISR] = Copy_pfun_AppFunction;
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	90 93 a5 01 	sts	0x01A5, r25
    14de:	80 93 a4 01 	sts	0x01A4, r24

                    apvid_ISRParameters[TIMER_2_CTC_ISR] = Copy_pvid_Parameters;
    14e2:	8e 81       	ldd	r24, Y+6	; 0x06
    14e4:	9f 81       	ldd	r25, Y+7	; 0x07
    14e6:	90 93 b5 01 	sts	0x01B5, r25
    14ea:	80 93 b4 01 	sts	0x01B4, r24

                    Local_u8_ErrorFlag = ES_OK;
    14ee:	19 82       	std	Y+1, r1	; 0x01
    14f0:	08 c0       	rjmp	.+16     	; 0x1502 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	05 c0       	rjmp	.+10     	; 0x1502 <Timer_enu_SetCallBack+0xf6>

                break;
            }
            
            default:
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    14f8:	82 e0       	ldi	r24, 0x02	; 2
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <Timer_enu_SetCallBack+0xf6>
            break;
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1502:	89 81       	ldd	r24, Y+1	; 0x01
}
    1504:	29 96       	adiw	r28, 0x09	; 9
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <__vector_4>:
void __vector_5 (void)__attribute__((signal));
void __vector_10 (void)__attribute__((signal));
void __vector_11 (void)__attribute__((signal));

void __vector_4 (void)
{
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
    1520:	2f 93       	push	r18
    1522:	3f 93       	push	r19
    1524:	4f 93       	push	r20
    1526:	5f 93       	push	r21
    1528:	6f 93       	push	r22
    152a:	7f 93       	push	r23
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
    1534:	ef 93       	push	r30
    1536:	ff 93       	push	r31
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    1540:	80 91 a4 01 	lds	r24, 0x01A4
    1544:	90 91 a5 01 	lds	r25, 0x01A5
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	49 f0       	breq	.+18     	; 0x155e <__vector_4+0x48>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    154c:	e0 91 a4 01 	lds	r30, 0x01A4
    1550:	f0 91 a5 01 	lds	r31, 0x01A5
    1554:	80 91 b4 01 	lds	r24, 0x01B4
    1558:	90 91 b5 01 	lds	r25, 0x01B5
    155c:	09 95       	icall
    }
}
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	ff 91       	pop	r31
    1564:	ef 91       	pop	r30
    1566:	bf 91       	pop	r27
    1568:	af 91       	pop	r26
    156a:	9f 91       	pop	r25
    156c:	8f 91       	pop	r24
    156e:	7f 91       	pop	r23
    1570:	6f 91       	pop	r22
    1572:	5f 91       	pop	r21
    1574:	4f 91       	pop	r20
    1576:	3f 91       	pop	r19
    1578:	2f 91       	pop	r18
    157a:	0f 90       	pop	r0
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	0f 90       	pop	r0
    1580:	1f 90       	pop	r1
    1582:	18 95       	reti

00001584 <__vector_5>:

void __vector_5 (void)
{
    1584:	1f 92       	push	r1
    1586:	0f 92       	push	r0
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	0f 92       	push	r0
    158c:	11 24       	eor	r1, r1
    158e:	2f 93       	push	r18
    1590:	3f 93       	push	r19
    1592:	4f 93       	push	r20
    1594:	5f 93       	push	r21
    1596:	6f 93       	push	r22
    1598:	7f 93       	push	r23
    159a:	8f 93       	push	r24
    159c:	9f 93       	push	r25
    159e:	af 93       	push	r26
    15a0:	bf 93       	push	r27
    15a2:	ef 93       	push	r30
    15a4:	ff 93       	push	r31
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    15ae:	80 91 a4 01 	lds	r24, 0x01A4
    15b2:	90 91 a5 01 	lds	r25, 0x01A5
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	49 f0       	breq	.+18     	; 0x15cc <__vector_5+0x48>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    15ba:	e0 91 a4 01 	lds	r30, 0x01A4
    15be:	f0 91 a5 01 	lds	r31, 0x01A5
    15c2:	80 91 b4 01 	lds	r24, 0x01B4
    15c6:	90 91 b5 01 	lds	r25, 0x01B5
    15ca:	09 95       	icall
    }
}
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
    15d4:	bf 91       	pop	r27
    15d6:	af 91       	pop	r26
    15d8:	9f 91       	pop	r25
    15da:	8f 91       	pop	r24
    15dc:	7f 91       	pop	r23
    15de:	6f 91       	pop	r22
    15e0:	5f 91       	pop	r21
    15e2:	4f 91       	pop	r20
    15e4:	3f 91       	pop	r19
    15e6:	2f 91       	pop	r18
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <__vector_10>:

void __vector_10 (void)
{
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	11 24       	eor	r1, r1
    15fc:	2f 93       	push	r18
    15fe:	3f 93       	push	r19
    1600:	4f 93       	push	r20
    1602:	5f 93       	push	r21
    1604:	6f 93       	push	r22
    1606:	7f 93       	push	r23
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	af 93       	push	r26
    160e:	bf 93       	push	r27
    1610:	ef 93       	push	r30
    1612:	ff 93       	push	r31
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_CTC_ISR])
    161c:	80 91 b0 01 	lds	r24, 0x01B0
    1620:	90 91 b1 01 	lds	r25, 0x01B1
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	49 f0       	breq	.+18     	; 0x163a <__vector_10+0x48>
    {
       apfun_ISRpointers[TIMER_0_CTC_ISR](apvid_ISRParameters[TIMER_0_CTC_ISR]);
    1628:	e0 91 b0 01 	lds	r30, 0x01B0
    162c:	f0 91 b1 01 	lds	r31, 0x01B1
    1630:	80 91 c0 01 	lds	r24, 0x01C0
    1634:	90 91 c1 01 	lds	r25, 0x01C1
    1638:	09 95       	icall
    }
}
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	bf 91       	pop	r27
    1644:	af 91       	pop	r26
    1646:	9f 91       	pop	r25
    1648:	8f 91       	pop	r24
    164a:	7f 91       	pop	r23
    164c:	6f 91       	pop	r22
    164e:	5f 91       	pop	r21
    1650:	4f 91       	pop	r20
    1652:	3f 91       	pop	r19
    1654:	2f 91       	pop	r18
    1656:	0f 90       	pop	r0
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	0f 90       	pop	r0
    165c:	1f 90       	pop	r1
    165e:	18 95       	reti

00001660 <__vector_11>:

void __vector_11 (void)
{
    1660:	1f 92       	push	r1
    1662:	0f 92       	push	r0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	0f 92       	push	r0
    1668:	11 24       	eor	r1, r1
    166a:	2f 93       	push	r18
    166c:	3f 93       	push	r19
    166e:	4f 93       	push	r20
    1670:	5f 93       	push	r21
    1672:	6f 93       	push	r22
    1674:	7f 93       	push	r23
    1676:	8f 93       	push	r24
    1678:	9f 93       	push	r25
    167a:	af 93       	push	r26
    167c:	bf 93       	push	r27
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_OVERFLOW_ISR])
    168a:	80 91 b2 01 	lds	r24, 0x01B2
    168e:	90 91 b3 01 	lds	r25, 0x01B3
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	49 f0       	breq	.+18     	; 0x16a8 <__vector_11+0x48>
    {
        apfun_ISRpointers[TIMER_0_OVERFLOW_ISR](apvid_ISRParameters[TIMER_0_OVERFLOW_ISR]);
    1696:	e0 91 b2 01 	lds	r30, 0x01B2
    169a:	f0 91 b3 01 	lds	r31, 0x01B3
    169e:	80 91 c2 01 	lds	r24, 0x01C2
    16a2:	90 91 c3 01 	lds	r25, 0x01C3
    16a6:	09 95       	icall
    }
}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	ff 91       	pop	r31
    16ae:	ef 91       	pop	r30
    16b0:	bf 91       	pop	r27
    16b2:	af 91       	pop	r26
    16b4:	9f 91       	pop	r25
    16b6:	8f 91       	pop	r24
    16b8:	7f 91       	pop	r23
    16ba:	6f 91       	pop	r22
    16bc:	5f 91       	pop	r21
    16be:	4f 91       	pop	r20
    16c0:	3f 91       	pop	r19
    16c2:	2f 91       	pop	r18
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f 90       	pop	r0
    16ca:	1f 90       	pop	r1
    16cc:	18 95       	reti

000016ce <enu_SetTimerMode>:



//Local functions' implementation
static ErrorState_t enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <enu_SetTimerMode+0x6>
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <enu_SetTimerMode+0x8>
    16d6:	0f 92       	push	r0
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	8a 83       	std	Y+2, r24	; 0x02
    16de:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	89 83       	std	Y+1, r24	; 0x01

    switch(Copy_u8_TimerNumber)
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	3d 83       	std	Y+5, r19	; 0x05
    16ec:	2c 83       	std	Y+4, r18	; 0x04
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <enu_SetTimerMode+0x2c>
    16f8:	ab c0       	rjmp	.+342    	; 0x1850 <enu_SetTimerMode+0x182>
    16fa:	2c 81       	ldd	r18, Y+4	; 0x04
    16fc:	3d 81       	ldd	r19, Y+5	; 0x05
    16fe:	22 30       	cpi	r18, 0x02	; 2
    1700:	31 05       	cpc	r19, r1
    1702:	09 f4       	brne	.+2      	; 0x1706 <enu_SetTimerMode+0x38>
    1704:	54 c0       	rjmp	.+168    	; 0x17ae <enu_SetTimerMode+0xe0>
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	9d 81       	ldd	r25, Y+5	; 0x05
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	09 f0       	breq	.+2      	; 0x1710 <enu_SetTimerMode+0x42>
    170e:	9e c0       	rjmp	.+316    	; 0x184c <enu_SetTimerMode+0x17e>
    {
        case TIMER_0:
        {

            if(Copy_u8_TimerMode == TIMER_NORMAL)
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	88 23       	and	r24, r24
    1714:	81 f4       	brne	.+32     	; 0x1736 <enu_SetTimerMode+0x68>
            {
                //Bits contain 00
                TCCR0 &= ~(1 << TCCR0_WGM00);
    1716:	a3 e5       	ldi	r26, 0x53	; 83
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e3 e5       	ldi	r30, 0x53	; 83
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	8f 7b       	andi	r24, 0xBF	; 191
    1722:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    1724:	a3 e5       	ldi	r26, 0x53	; 83
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e3 e5       	ldi	r30, 0x53	; 83
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	87 7f       	andi	r24, 0xF7	; 247
    1730:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1732:	19 82       	std	Y+1, r1	; 0x01
    1734:	8d c0       	rjmp	.+282    	; 0x1850 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	81 f4       	brne	.+32     	; 0x175c <enu_SetTimerMode+0x8e>
            {
                //Bits contain 01
                TCCR0 |= (1 << TCCR0_WGM00);
    173c:	a3 e5       	ldi	r26, 0x53	; 83
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e3 e5       	ldi	r30, 0x53	; 83
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	80 64       	ori	r24, 0x40	; 64
    1748:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    174a:	a3 e5       	ldi	r26, 0x53	; 83
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e3 e5       	ldi	r30, 0x53	; 83
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	87 7f       	andi	r24, 0xF7	; 247
    1756:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1758:	19 82       	std	Y+1, r1	; 0x01
    175a:	7a c0       	rjmp	.+244    	; 0x1850 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	82 30       	cpi	r24, 0x02	; 2
    1760:	81 f4       	brne	.+32     	; 0x1782 <enu_SetTimerMode+0xb4>
            {
                //Bits contain 10
                TCCR0 &= ~(1 << TCCR0_WGM00);
    1762:	a3 e5       	ldi	r26, 0x53	; 83
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e3 e5       	ldi	r30, 0x53	; 83
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8f 7b       	andi	r24, 0xBF	; 191
    176e:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    1770:	a3 e5       	ldi	r26, 0x53	; 83
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e3 e5       	ldi	r30, 0x53	; 83
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	88 60       	ori	r24, 0x08	; 8
    177c:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    177e:	19 82       	std	Y+1, r1	; 0x01
    1780:	67 c0       	rjmp	.+206    	; 0x1850 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	81 f4       	brne	.+32     	; 0x17a8 <enu_SetTimerMode+0xda>
            {
                //Bits contain 11
                TCCR0 |= (1 << TCCR0_WGM00);
    1788:	a3 e5       	ldi	r26, 0x53	; 83
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e3 e5       	ldi	r30, 0x53	; 83
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	80 64       	ori	r24, 0x40	; 64
    1794:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    1796:	a3 e5       	ldi	r26, 0x53	; 83
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e3 e5       	ldi	r30, 0x53	; 83
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	88 60       	ori	r24, 0x08	; 8
    17a2:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	54 c0       	rjmp	.+168    	; 0x1850 <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	51 c0       	rjmp	.+162    	; 0x1850 <enu_SetTimerMode+0x182>
        }
        break;
     
        case TIMER_2:
        {
            if(Copy_u8_TimerMode == TIMER_NORMAL)
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	88 23       	and	r24, r24
    17b2:	81 f4       	brne	.+32     	; 0x17d4 <enu_SetTimerMode+0x106>
            {
                //Bits contain 00
                TCCR2 &= ~(1 << TCCR2_WGM20);
    17b4:	a5 e4       	ldi	r26, 0x45	; 69
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e5 e4       	ldi	r30, 0x45	; 69
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8f 7b       	andi	r24, 0xBF	; 191
    17c0:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    17c2:	a5 e4       	ldi	r26, 0x45	; 69
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e5 e4       	ldi	r30, 0x45	; 69
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	87 7f       	andi	r24, 0xF7	; 247
    17ce:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    17d0:	19 82       	std	Y+1, r1	; 0x01
    17d2:	3e c0       	rjmp	.+124    	; 0x1850 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	81 f4       	brne	.+32     	; 0x17fa <enu_SetTimerMode+0x12c>
            {
                //Bits contain 01
                TCCR2 |= (1 << TCCR2_WGM20);
    17da:	a5 e4       	ldi	r26, 0x45	; 69
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e5 e4       	ldi	r30, 0x45	; 69
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 64       	ori	r24, 0x40	; 64
    17e6:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    17e8:	a5 e4       	ldi	r26, 0x45	; 69
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e5 e4       	ldi	r30, 0x45	; 69
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	87 7f       	andi	r24, 0xF7	; 247
    17f4:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    17f6:	19 82       	std	Y+1, r1	; 0x01
    17f8:	2b c0       	rjmp	.+86     	; 0x1850 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	81 f4       	brne	.+32     	; 0x1820 <enu_SetTimerMode+0x152>
            {
                //Bits contain 10
                TCCR2 &= ~(1 << TCCR2_WGM20);
    1800:	a5 e4       	ldi	r26, 0x45	; 69
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e5 e4       	ldi	r30, 0x45	; 69
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8f 7b       	andi	r24, 0xBF	; 191
    180c:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    180e:	a5 e4       	ldi	r26, 0x45	; 69
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e5 e4       	ldi	r30, 0x45	; 69
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	88 60       	ori	r24, 0x08	; 8
    181a:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    181c:	19 82       	std	Y+1, r1	; 0x01
    181e:	18 c0       	rjmp	.+48     	; 0x1850 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	83 30       	cpi	r24, 0x03	; 3
    1824:	81 f4       	brne	.+32     	; 0x1846 <enu_SetTimerMode+0x178>
            {
                //Bits contain 11
                TCCR2 |= (1 << TCCR2_WGM20);
    1826:	a5 e4       	ldi	r26, 0x45	; 69
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e5 e4       	ldi	r30, 0x45	; 69
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 64       	ori	r24, 0x40	; 64
    1832:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    1834:	a5 e4       	ldi	r26, 0x45	; 69
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e5 e4       	ldi	r30, 0x45	; 69
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	88 60       	ori	r24, 0x08	; 8
    1840:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1842:	19 82       	std	Y+1, r1	; 0x01
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <enu_SetTimerMode+0x182>

        }
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;
    1850:	89 81       	ldd	r24, Y+1	; 0x01
}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <enu_SetClockSelection>:

static ErrorState_t enu_SetClockSelection(u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	29 97       	sbiw	r28, 0x09	; 9
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	8a 83       	std	Y+2, r24	; 0x02
    1878:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_TimerNumber)
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	39 87       	std	Y+9, r19	; 0x09
    1886:	28 87       	std	Y+8, r18	; 0x08
    1888:	88 85       	ldd	r24, Y+8	; 0x08
    188a:	99 85       	ldd	r25, Y+9	; 0x09
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	91 05       	cpc	r25, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <enu_SetClockSelection+0x32>
    1892:	03 c2       	rjmp	.+1030   	; 0x1c9a <enu_SetClockSelection+0x438>
    1894:	28 85       	ldd	r18, Y+8	; 0x08
    1896:	39 85       	ldd	r19, Y+9	; 0x09
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <enu_SetClockSelection+0x3e>
    189e:	00 c1       	rjmp	.+512    	; 0x1aa0 <enu_SetClockSelection+0x23e>
    18a0:	88 85       	ldd	r24, Y+8	; 0x08
    18a2:	99 85       	ldd	r25, Y+9	; 0x09
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	09 f0       	breq	.+2      	; 0x18aa <enu_SetClockSelection+0x48>
    18a8:	f6 c1       	rjmp	.+1004   	; 0x1c96 <enu_SetClockSelection+0x434>
    {
        case TIMER_0:
        {
            switch (Copy_u8_ClockSelection)
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	3f 83       	std	Y+7, r19	; 0x07
    18b2:	2e 83       	std	Y+6, r18	; 0x06
    18b4:	8e 81       	ldd	r24, Y+6	; 0x06
    18b6:	9f 81       	ldd	r25, Y+7	; 0x07
    18b8:	84 30       	cpi	r24, 0x04	; 4
    18ba:	91 05       	cpc	r25, r1
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <enu_SetClockSelection+0x5e>
    18be:	7a c0       	rjmp	.+244    	; 0x19b4 <enu_SetClockSelection+0x152>
    18c0:	2e 81       	ldd	r18, Y+6	; 0x06
    18c2:	3f 81       	ldd	r19, Y+7	; 0x07
    18c4:	25 30       	cpi	r18, 0x05	; 5
    18c6:	31 05       	cpc	r19, r1
    18c8:	8c f4       	brge	.+34     	; 0x18ec <enu_SetClockSelection+0x8a>
    18ca:	8e 81       	ldd	r24, Y+6	; 0x06
    18cc:	9f 81       	ldd	r25, Y+7	; 0x07
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	91 05       	cpc	r25, r1
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <enu_SetClockSelection+0x74>
    18d4:	41 c0       	rjmp	.+130    	; 0x1958 <enu_SetClockSelection+0xf6>
    18d6:	2e 81       	ldd	r18, Y+6	; 0x06
    18d8:	3f 81       	ldd	r19, Y+7	; 0x07
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	09 f4       	brne	.+2      	; 0x18e2 <enu_SetClockSelection+0x80>
    18e0:	52 c0       	rjmp	.+164    	; 0x1986 <enu_SetClockSelection+0x124>
    18e2:	8e 81       	ldd	r24, Y+6	; 0x06
    18e4:	9f 81       	ldd	r25, Y+7	; 0x07
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	01 f1       	breq	.+64     	; 0x192a <enu_SetClockSelection+0xc8>
    18ea:	d7 c0       	rjmp	.+430    	; 0x1a9a <enu_SetClockSelection+0x238>
    18ec:	2e 81       	ldd	r18, Y+6	; 0x06
    18ee:	3f 81       	ldd	r19, Y+7	; 0x07
    18f0:	27 30       	cpi	r18, 0x07	; 7
    18f2:	31 05       	cpc	r19, r1
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <enu_SetClockSelection+0x96>
    18f6:	8c c0       	rjmp	.+280    	; 0x1a10 <enu_SetClockSelection+0x1ae>
    18f8:	8e 81       	ldd	r24, Y+6	; 0x06
    18fa:	9f 81       	ldd	r25, Y+7	; 0x07
    18fc:	88 30       	cpi	r24, 0x08	; 8
    18fe:	91 05       	cpc	r25, r1
    1900:	3c f4       	brge	.+14     	; 0x1910 <enu_SetClockSelection+0xae>
    1902:	2e 81       	ldd	r18, Y+6	; 0x06
    1904:	3f 81       	ldd	r19, Y+7	; 0x07
    1906:	26 30       	cpi	r18, 0x06	; 6
    1908:	31 05       	cpc	r19, r1
    190a:	09 f4       	brne	.+2      	; 0x190e <enu_SetClockSelection+0xac>
    190c:	6a c0       	rjmp	.+212    	; 0x19e2 <enu_SetClockSelection+0x180>
    190e:	c5 c0       	rjmp	.+394    	; 0x1a9a <enu_SetClockSelection+0x238>
    1910:	8e 81       	ldd	r24, Y+6	; 0x06
    1912:	9f 81       	ldd	r25, Y+7	; 0x07
    1914:	88 30       	cpi	r24, 0x08	; 8
    1916:	91 05       	cpc	r25, r1
    1918:	09 f4       	brne	.+2      	; 0x191c <enu_SetClockSelection+0xba>
    191a:	91 c0       	rjmp	.+290    	; 0x1a3e <enu_SetClockSelection+0x1dc>
    191c:	2e 81       	ldd	r18, Y+6	; 0x06
    191e:	3f 81       	ldd	r19, Y+7	; 0x07
    1920:	29 30       	cpi	r18, 0x09	; 9
    1922:	31 05       	cpc	r19, r1
    1924:	09 f4       	brne	.+2      	; 0x1928 <enu_SetClockSelection+0xc6>
    1926:	a2 c0       	rjmp	.+324    	; 0x1a6c <enu_SetClockSelection+0x20a>
    1928:	b8 c0       	rjmp	.+368    	; 0x1a9a <enu_SetClockSelection+0x238>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR0 &= ~ (1 << TCCR0_CS00);
    192a:	a3 e5       	ldi	r26, 0x53	; 83
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e3 e5       	ldi	r30, 0x53	; 83
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8e 7f       	andi	r24, 0xFE	; 254
    1936:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1938:	a3 e5       	ldi	r26, 0x53	; 83
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e3 e5       	ldi	r30, 0x53	; 83
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	8d 7f       	andi	r24, 0xFD	; 253
    1944:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1946:	a3 e5       	ldi	r26, 0x53	; 83
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e3 e5       	ldi	r30, 0x53	; 83
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	8b 7f       	andi	r24, 0xFB	; 251
    1952:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1954:	19 82       	std	Y+1, r1	; 0x01
    1956:	a1 c1       	rjmp	.+834    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR0 |= (1 << TCCR0_CS00);
    1958:	a3 e5       	ldi	r26, 0x53	; 83
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e3 e5       	ldi	r30, 0x53	; 83
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	81 60       	ori	r24, 0x01	; 1
    1964:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1966:	a3 e5       	ldi	r26, 0x53	; 83
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e3 e5       	ldi	r30, 0x53	; 83
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	8d 7f       	andi	r24, 0xFD	; 253
    1972:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1974:	a3 e5       	ldi	r26, 0x53	; 83
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e3 e5       	ldi	r30, 0x53	; 83
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8b 7f       	andi	r24, 0xFB	; 251
    1980:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1982:	19 82       	std	Y+1, r1	; 0x01
    1984:	8a c1       	rjmp	.+788    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1986:	a3 e5       	ldi	r26, 0x53	; 83
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e3 e5       	ldi	r30, 0x53	; 83
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	8e 7f       	andi	r24, 0xFE	; 254
    1992:	8c 93       	st	X, r24
                    TCCR0 |= (1  << TCCR0_CS01);
    1994:	a3 e5       	ldi	r26, 0x53	; 83
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e3 e5       	ldi	r30, 0x53	; 83
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	82 60       	ori	r24, 0x02	; 2
    19a0:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS02);
    19a2:	a3 e5       	ldi	r26, 0x53	; 83
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e3 e5       	ldi	r30, 0x53	; 83
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8b 7f       	andi	r24, 0xFB	; 251
    19ae:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    19b0:	19 82       	std	Y+1, r1	; 0x01
    19b2:	73 c1       	rjmp	.+742    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 011
                    TCCR0 |= (1 << TCCR0_CS00);
    19b4:	a3 e5       	ldi	r26, 0x53	; 83
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e3 e5       	ldi	r30, 0x53	; 83
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	81 60       	ori	r24, 0x01	; 1
    19c0:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    19c2:	a3 e5       	ldi	r26, 0x53	; 83
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e3 e5       	ldi	r30, 0x53	; 83
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	82 60       	ori	r24, 0x02	; 2
    19ce:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    19d0:	a3 e5       	ldi	r26, 0x53	; 83
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e3 e5       	ldi	r30, 0x53	; 83
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	8b 7f       	andi	r24, 0xFB	; 251
    19dc:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    19de:	19 82       	std	Y+1, r1	; 0x01
    19e0:	5c c1       	rjmp	.+696    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 100
                    TCCR0 &= ~(1 << TCCR0_CS00);
    19e2:	a3 e5       	ldi	r26, 0x53	; 83
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e3 e5       	ldi	r30, 0x53	; 83
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	8e 7f       	andi	r24, 0xFE	; 254
    19ee:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS01);
    19f0:	a3 e5       	ldi	r26, 0x53	; 83
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e3 e5       	ldi	r30, 0x53	; 83
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	8d 7f       	andi	r24, 0xFD	; 253
    19fc:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    19fe:	a3 e5       	ldi	r26, 0x53	; 83
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e3 e5       	ldi	r30, 0x53	; 83
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	84 60       	ori	r24, 0x04	; 4
    1a0a:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1a0c:	19 82       	std	Y+1, r1	; 0x01
    1a0e:	45 c1       	rjmp	.+650    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 101
                    TCCR0 |= (1 << TCCR0_CS00);
    1a10:	a3 e5       	ldi	r26, 0x53	; 83
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e3 e5       	ldi	r30, 0x53	; 83
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	81 60       	ori	r24, 0x01	; 1
    1a1c:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1a1e:	a3 e5       	ldi	r26, 0x53	; 83
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e3 e5       	ldi	r30, 0x53	; 83
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8d 7f       	andi	r24, 0xFD	; 253
    1a2a:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1a2c:	a3 e5       	ldi	r26, 0x53	; 83
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e3 e5       	ldi	r30, 0x53	; 83
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	84 60       	ori	r24, 0x04	; 4
    1a38:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1a3a:	19 82       	std	Y+1, r1	; 0x01
    1a3c:	2e c1       	rjmp	.+604    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_FALLING_EGDE:
                {
                    //Bits contain 110
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1a3e:	a3 e5       	ldi	r26, 0x53	; 83
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e3 e5       	ldi	r30, 0x53	; 83
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8e 7f       	andi	r24, 0xFE	; 254
    1a4a:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1a4c:	a3 e5       	ldi	r26, 0x53	; 83
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e3 e5       	ldi	r30, 0x53	; 83
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	82 60       	ori	r24, 0x02	; 2
    1a58:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1a5a:	a3 e5       	ldi	r26, 0x53	; 83
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e3 e5       	ldi	r30, 0x53	; 83
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	84 60       	ori	r24, 0x04	; 4
    1a66:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1a68:	19 82       	std	Y+1, r1	; 0x01
    1a6a:	17 c1       	rjmp	.+558    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_RISING_EGDE:
                {
                    //Bits contain 111
                    TCCR0 |= (1 << TCCR0_CS00);
    1a6c:	a3 e5       	ldi	r26, 0x53	; 83
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e3 e5       	ldi	r30, 0x53	; 83
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	81 60       	ori	r24, 0x01	; 1
    1a78:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1a7a:	a3 e5       	ldi	r26, 0x53	; 83
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e3 e5       	ldi	r30, 0x53	; 83
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	82 60       	ori	r24, 0x02	; 2
    1a86:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1a88:	a3 e5       	ldi	r26, 0x53	; 83
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e3 e5       	ldi	r30, 0x53	; 83
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	84 60       	ori	r24, 0x04	; 4
    1a94:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1a96:	19 82       	std	Y+1, r1	; 0x01
    1a98:	00 c1       	rjmp	.+512    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	fd c0       	rjmp	.+506    	; 0x1c9a <enu_SetClockSelection+0x438>
    
        case TIMER_2:
        {
            //Choosing I/O clock each time 
            //Bit contains 0
            ASSR &= ~( 1 << ASSR_AS2);
    1aa0:	a2 e4       	ldi	r26, 0x42	; 66
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e2 e4       	ldi	r30, 0x42	; 66
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	87 7f       	andi	r24, 0xF7	; 247
    1aac:	8c 93       	st	X, r24
            
            switch (Copy_u8_ClockSelection)
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	3d 83       	std	Y+5, r19	; 0x05
    1ab6:	2c 83       	std	Y+4, r18	; 0x04
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9d 81       	ldd	r25, Y+5	; 0x05
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	91 05       	cpc	r25, r1
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <enu_SetClockSelection+0x262>
    1ac2:	73 c0       	rjmp	.+230    	; 0x1baa <enu_SetClockSelection+0x348>
    1ac4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac8:	24 30       	cpi	r18, 0x04	; 4
    1aca:	31 05       	cpc	r19, r1
    1acc:	84 f4       	brge	.+32     	; 0x1aee <enu_SetClockSelection+0x28c>
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	d9 f1       	breq	.+118    	; 0x1b4e <enu_SetClockSelection+0x2ec>
    1ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ada:	3d 81       	ldd	r19, Y+5	; 0x05
    1adc:	22 30       	cpi	r18, 0x02	; 2
    1ade:	31 05       	cpc	r19, r1
    1ae0:	0c f0       	brlt	.+2      	; 0x1ae4 <enu_SetClockSelection+0x282>
    1ae2:	4c c0       	rjmp	.+152    	; 0x1b7c <enu_SetClockSelection+0x31a>
    1ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	d1 f0       	breq	.+52     	; 0x1b20 <enu_SetClockSelection+0x2be>
    1aec:	d1 c0       	rjmp	.+418    	; 0x1c90 <enu_SetClockSelection+0x42e>
    1aee:	2c 81       	ldd	r18, Y+4	; 0x04
    1af0:	3d 81       	ldd	r19, Y+5	; 0x05
    1af2:	25 30       	cpi	r18, 0x05	; 5
    1af4:	31 05       	cpc	r19, r1
    1af6:	09 f4       	brne	.+2      	; 0x1afa <enu_SetClockSelection+0x298>
    1af8:	86 c0       	rjmp	.+268    	; 0x1c06 <enu_SetClockSelection+0x3a4>
    1afa:	8c 81       	ldd	r24, Y+4	; 0x04
    1afc:	9d 81       	ldd	r25, Y+5	; 0x05
    1afe:	85 30       	cpi	r24, 0x05	; 5
    1b00:	91 05       	cpc	r25, r1
    1b02:	0c f4       	brge	.+2      	; 0x1b06 <enu_SetClockSelection+0x2a4>
    1b04:	69 c0       	rjmp	.+210    	; 0x1bd8 <enu_SetClockSelection+0x376>
    1b06:	2c 81       	ldd	r18, Y+4	; 0x04
    1b08:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0a:	26 30       	cpi	r18, 0x06	; 6
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <enu_SetClockSelection+0x2b0>
    1b10:	91 c0       	rjmp	.+290    	; 0x1c34 <enu_SetClockSelection+0x3d2>
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	9d 81       	ldd	r25, Y+5	; 0x05
    1b16:	87 30       	cpi	r24, 0x07	; 7
    1b18:	91 05       	cpc	r25, r1
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <enu_SetClockSelection+0x2bc>
    1b1c:	a2 c0       	rjmp	.+324    	; 0x1c62 <enu_SetClockSelection+0x400>
    1b1e:	b8 c0       	rjmp	.+368    	; 0x1c90 <enu_SetClockSelection+0x42e>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR2 &= ~ (1 << TCCR2_CS20);
    1b20:	a5 e4       	ldi	r26, 0x45	; 69
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e5 e4       	ldi	r30, 0x45	; 69
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	8e 7f       	andi	r24, 0xFE	; 254
    1b2c:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1b2e:	a5 e4       	ldi	r26, 0x45	; 69
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e5 e4       	ldi	r30, 0x45	; 69
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	8d 7f       	andi	r24, 0xFD	; 253
    1b3a:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1b3c:	a5 e4       	ldi	r26, 0x45	; 69
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e5 e4       	ldi	r30, 0x45	; 69
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8b 7f       	andi	r24, 0xFB	; 251
    1b48:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1b4a:	19 82       	std	Y+1, r1	; 0x01
    1b4c:	a6 c0       	rjmp	.+332    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR2 |= (1 << TCCR2_CS20);
    1b4e:	a5 e4       	ldi	r26, 0x45	; 69
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e5 e4       	ldi	r30, 0x45	; 69
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	81 60       	ori	r24, 0x01	; 1
    1b5a:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1b5c:	a5 e4       	ldi	r26, 0x45	; 69
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e5 e4       	ldi	r30, 0x45	; 69
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	8d 7f       	andi	r24, 0xFD	; 253
    1b68:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1b6a:	a5 e4       	ldi	r26, 0x45	; 69
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e5 e4       	ldi	r30, 0x45	; 69
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	8b 7f       	andi	r24, 0xFB	; 251
    1b76:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1b78:	19 82       	std	Y+1, r1	; 0x01
    1b7a:	8f c0       	rjmp	.+286    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1b7c:	a5 e4       	ldi	r26, 0x45	; 69
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e5 e4       	ldi	r30, 0x45	; 69
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8e 7f       	andi	r24, 0xFE	; 254
    1b88:	8c 93       	st	X, r24
                    TCCR2 |= (1  << TCCR2_CS21);
    1b8a:	a5 e4       	ldi	r26, 0x45	; 69
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e5 e4       	ldi	r30, 0x45	; 69
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	82 60       	ori	r24, 0x02	; 2
    1b96:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS22);
    1b98:	a5 e4       	ldi	r26, 0x45	; 69
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e5 e4       	ldi	r30, 0x45	; 69
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8b 7f       	andi	r24, 0xFB	; 251
    1ba4:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1ba6:	19 82       	std	Y+1, r1	; 0x01
    1ba8:	78 c0       	rjmp	.+240    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_32:
                {
                    //Bits contain 011
                    TCCR2 |= (1 << TCCR2_CS20);
    1baa:	a5 e4       	ldi	r26, 0x45	; 69
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e5 e4       	ldi	r30, 0x45	; 69
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	81 60       	ori	r24, 0x01	; 1
    1bb6:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1bb8:	a5 e4       	ldi	r26, 0x45	; 69
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e5 e4       	ldi	r30, 0x45	; 69
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	82 60       	ori	r24, 0x02	; 2
    1bc4:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1bc6:	a5 e4       	ldi	r26, 0x45	; 69
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e5 e4       	ldi	r30, 0x45	; 69
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8b 7f       	andi	r24, 0xFB	; 251
    1bd2:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1bd4:	19 82       	std	Y+1, r1	; 0x01
    1bd6:	61 c0       	rjmp	.+194    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 100
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1bd8:	a5 e4       	ldi	r26, 0x45	; 69
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e5 e4       	ldi	r30, 0x45	; 69
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8e 7f       	andi	r24, 0xFE	; 254
    1be4:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS21);
    1be6:	a5 e4       	ldi	r26, 0x45	; 69
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e5 e4       	ldi	r30, 0x45	; 69
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8d 7f       	andi	r24, 0xFD	; 253
    1bf2:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1bf4:	a5 e4       	ldi	r26, 0x45	; 69
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e5 e4       	ldi	r30, 0x45	; 69
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	84 60       	ori	r24, 0x04	; 4
    1c00:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c02:	19 82       	std	Y+1, r1	; 0x01
    1c04:	4a c0       	rjmp	.+148    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_128:
                {
                    //Bits contain 101
                    TCCR2 |= (1 << TCCR2_CS20);
    1c06:	a5 e4       	ldi	r26, 0x45	; 69
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e5 e4       	ldi	r30, 0x45	; 69
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	81 60       	ori	r24, 0x01	; 1
    1c12:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1c14:	a5 e4       	ldi	r26, 0x45	; 69
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e5 e4       	ldi	r30, 0x45	; 69
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8d 7f       	andi	r24, 0xFD	; 253
    1c20:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1c22:	a5 e4       	ldi	r26, 0x45	; 69
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e5 e4       	ldi	r30, 0x45	; 69
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	84 60       	ori	r24, 0x04	; 4
    1c2e:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c30:	19 82       	std	Y+1, r1	; 0x01
    1c32:	33 c0       	rjmp	.+102    	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 110
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1c34:	a5 e4       	ldi	r26, 0x45	; 69
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e5 e4       	ldi	r30, 0x45	; 69
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8e 7f       	andi	r24, 0xFE	; 254
    1c40:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1c42:	a5 e4       	ldi	r26, 0x45	; 69
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e5 e4       	ldi	r30, 0x45	; 69
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	82 60       	ori	r24, 0x02	; 2
    1c4e:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1c50:	a5 e4       	ldi	r26, 0x45	; 69
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e5 e4       	ldi	r30, 0x45	; 69
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	84 60       	ori	r24, 0x04	; 4
    1c5c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c5e:	19 82       	std	Y+1, r1	; 0x01
    1c60:	1c c0       	rjmp	.+56     	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 111
                    TCCR2 |= (1 << TCCR2_CS20);
    1c62:	a5 e4       	ldi	r26, 0x45	; 69
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e5 e4       	ldi	r30, 0x45	; 69
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	81 60       	ori	r24, 0x01	; 1
    1c6e:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1c70:	a5 e4       	ldi	r26, 0x45	; 69
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e5 e4       	ldi	r30, 0x45	; 69
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	82 60       	ori	r24, 0x02	; 2
    1c7c:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1c7e:	a5 e4       	ldi	r26, 0x45	; 69
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e5 e4       	ldi	r30, 0x45	; 69
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	84 60       	ori	r24, 0x04	; 4
    1c8a:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c8c:	19 82       	std	Y+1, r1	; 0x01
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <enu_SetClockSelection+0x438>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return Local_u8_ErrorFlag;
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9c:	29 96       	adiw	r28, 0x09	; 9
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <enu_SetInterruptMode>:

static ErrorState_t enu_SetInterruptMode(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_InterruptMode)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <enu_SetInterruptMode+0x6>
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <enu_SetInterruptMode+0x8>
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <enu_SetInterruptMode+0xa>
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	8a 83       	std	Y+2, r24	; 0x02
    1cbe:	6b 83       	std	Y+3, r22	; 0x03
    1cc0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_TimerNumber)
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	3e 83       	std	Y+6, r19	; 0x06
    1cce:	2d 83       	std	Y+5, r18	; 0x05
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <enu_SetInterruptMode+0x2e>
    1cda:	78 c0       	rjmp	.+240    	; 0x1dcc <enu_SetInterruptMode+0x11e>
    1cdc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cde:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce0:	22 30       	cpi	r18, 0x02	; 2
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	a9 f1       	breq	.+106    	; 0x1d50 <enu_SetInterruptMode+0xa2>
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <enu_SetInterruptMode+0x42>
    1cee:	6e c0       	rjmp	.+220    	; 0x1dcc <enu_SetInterruptMode+0x11e>
    {
        case TIMER_0:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	88 23       	and	r24, r24
    1cf4:	89 f4       	brne	.+34     	; 0x1d18 <enu_SetInterruptMode+0x6a>
            {
                //Clearing bit 0 (TOIE0)
                TIMSK &= (0xFE);
    1cf6:	a9 e5       	ldi	r26, 0x59	; 89
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e9 e5       	ldi	r30, 0x59	; 89
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	8e 7f       	andi	r24, 0xFE	; 254
    1d02:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE0);
    1d04:	a9 e5       	ldi	r26, 0x59	; 89
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e9 e5       	ldi	r30, 0x59	; 89
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	90 81       	ld	r25, Z
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d10:	89 2b       	or	r24, r25
    1d12:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1d14:	19 82       	std	Y+1, r1	; 0x01
    1d16:	5a c0       	rjmp	.+180    	; 0x1dcc <enu_SetInterruptMode+0x11e>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	b1 f4       	brne	.+44     	; 0x1d4a <enu_SetInterruptMode+0x9c>
            {
                //Clearing bit 1 (OCIE0)
                TIMSK &= (0xFD);
    1d1e:	a9 e5       	ldi	r26, 0x59	; 89
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e9 e5       	ldi	r30, 0x59	; 89
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	8d 7f       	andi	r24, 0xFD	; 253
    1d2a:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE0);
    1d2c:	a9 e5       	ldi	r26, 0x59	; 89
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e9 e5       	ldi	r30, 0x59	; 89
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	28 2f       	mov	r18, r24
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	82 2b       	or	r24, r18
    1d44:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1d46:	19 82       	std	Y+1, r1	; 0x01
    1d48:	41 c0       	rjmp	.+130    	; 0x1dcc <enu_SetInterruptMode+0x11e>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	3e c0       	rjmp	.+124    	; 0x1dcc <enu_SetInterruptMode+0x11e>
            break;
        }

        case TIMER_2:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	88 23       	and	r24, r24
    1d54:	e9 f4       	brne	.+58     	; 0x1d90 <enu_SetInterruptMode+0xe2>
            {
                //Clearing bit 6 (TOIE2)
                TIMSK &= (0xBF);
    1d56:	a9 e5       	ldi	r26, 0x59	; 89
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e9 e5       	ldi	r30, 0x59	; 89
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8f 7b       	andi	r24, 0xBF	; 191
    1d62:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE2);
    1d64:	a9 e5       	ldi	r26, 0x59	; 89
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e9 e5       	ldi	r30, 0x59	; 89
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	28 2f       	mov	r18, r24
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	00 24       	eor	r0, r0
    1d78:	96 95       	lsr	r25
    1d7a:	87 95       	ror	r24
    1d7c:	07 94       	ror	r0
    1d7e:	96 95       	lsr	r25
    1d80:	87 95       	ror	r24
    1d82:	07 94       	ror	r0
    1d84:	98 2f       	mov	r25, r24
    1d86:	80 2d       	mov	r24, r0
    1d88:	82 2b       	or	r24, r18
    1d8a:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1d8c:	19 82       	std	Y+1, r1	; 0x01
    1d8e:	1e c0       	rjmp	.+60     	; 0x1dcc <enu_SetInterruptMode+0x11e>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	c9 f4       	brne	.+50     	; 0x1dc8 <enu_SetInterruptMode+0x11a>
            {
                //Clearing bit 7 (OCIE2)
                TIMSK &= (0x7F);
    1d96:	a9 e5       	ldi	r26, 0x59	; 89
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e9 e5       	ldi	r30, 0x59	; 89
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	8f 77       	andi	r24, 0x7F	; 127
    1da2:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE2);
    1da4:	a9 e5       	ldi	r26, 0x59	; 89
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e9 e5       	ldi	r30, 0x59	; 89
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	28 2f       	mov	r18, r24
    1db0:	8c 81       	ldd	r24, Y+4	; 0x04
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	96 95       	lsr	r25
    1db8:	98 2f       	mov	r25, r24
    1dba:	88 27       	eor	r24, r24
    1dbc:	97 95       	ror	r25
    1dbe:	87 95       	ror	r24
    1dc0:	82 2b       	or	r24, r18
    1dc2:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1dc4:	19 82       	std	Y+1, r1	; 0x01
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <enu_SetInterruptMode+0x11e>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	89 83       	std	Y+1, r24	; 0x01
        Local_u8_ErrorFlag - ES_OUT_OF_RANGE;
        break;
    }


    return Local_u8_ErrorFlag;
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dce:	26 96       	adiw	r28, 0x06	; 6
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <enu_SetOCxBehavior>:

static ErrorState_t enu_SetOCxBehavior(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_OCxPinBehavior)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <enu_SetOCxBehavior+0x6>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <enu_SetOCxBehavior+0x8>
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <enu_SetOCxBehavior+0xa>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	8a 83       	std	Y+2, r24	; 0x02
    1df0:	6b 83       	std	Y+3, r22	; 0x03
    1df2:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	3e 83       	std	Y+6, r19	; 0x06
    1e00:	2d 83       	std	Y+5, r18	; 0x05
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	9e 81       	ldd	r25, Y+6	; 0x06
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	91 05       	cpc	r25, r1
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <enu_SetOCxBehavior+0x2e>
    1e0c:	cd c0       	rjmp	.+410    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
    1e0e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e10:	3e 81       	ldd	r19, Y+6	; 0x06
    1e12:	22 30       	cpi	r18, 0x02	; 2
    1e14:	31 05       	cpc	r19, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <enu_SetOCxBehavior+0x3a>
    1e18:	68 c0       	rjmp	.+208    	; 0x1eea <enu_SetOCxBehavior+0x10a>
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <enu_SetOCxBehavior+0x44>
    1e22:	c0 c0       	rjmp	.+384    	; 0x1fa4 <enu_SetOCxBehavior+0x1c4>
    {
        case TIMER_0:
        {   
            //Clearing bits 5 and 4
            TCCR0 &= (0xCF);
    1e24:	a3 e5       	ldi	r26, 0x53	; 83
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e3 e5       	ldi	r30, 0x53	; 83
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8f 7c       	andi	r24, 0xCF	; 207
    1e30:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    1e32:	8c 81       	ldd	r24, Y+4	; 0x04
    1e34:	88 23       	and	r24, r24
    1e36:	11 f4       	brne	.+4      	; 0x1e3c <enu_SetOCxBehavior+0x5c>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    1e38:	19 82       	std	Y+1, r1	; 0x01
    1e3a:	b6 c0       	rjmp	.+364    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	88 23       	and	r24, r24
    1e40:	19 f0       	breq	.+6      	; 0x1e48 <enu_SetOCxBehavior+0x68>
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	39 f5       	brne	.+78     	; 0x1e96 <enu_SetOCxBehavior+0xb6>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	81 30       	cpi	r24, 0x01	; 1
    1e4c:	49 f4       	brne	.+18     	; 0x1e60 <enu_SetOCxBehavior+0x80>
                {
                    //Bits contain 01
                    TCCR0 |= (1 << TCCR0_COM00);
    1e4e:	a3 e5       	ldi	r26, 0x53	; 83
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e3 e5       	ldi	r30, 0x53	; 83
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	80 61       	ori	r24, 0x10	; 16
    1e5a:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1e5c:	19 82       	std	Y+1, r1	; 0x01
    1e5e:	a4 c0       	rjmp	.+328    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    1e60:	8c 81       	ldd	r24, Y+4	; 0x04
    1e62:	82 30       	cpi	r24, 0x02	; 2
    1e64:	49 f4       	brne	.+18     	; 0x1e78 <enu_SetOCxBehavior+0x98>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    1e66:	a3 e5       	ldi	r26, 0x53	; 83
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e3 e5       	ldi	r30, 0x53	; 83
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	80 62       	ori	r24, 0x20	; 32
    1e72:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1e74:	19 82       	std	Y+1, r1	; 0x01
    1e76:	98 c0       	rjmp	.+304    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    1e78:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7a:	83 30       	cpi	r24, 0x03	; 3
    1e7c:	49 f4       	brne	.+18     	; 0x1e90 <enu_SetOCxBehavior+0xb0>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    1e7e:	a3 e5       	ldi	r26, 0x53	; 83
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e3 e5       	ldi	r30, 0x53	; 83
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	80 63       	ori	r24, 0x30	; 48
    1e8a:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1e8c:	19 82       	std	Y+1, r1	; 0x01
    1e8e:	8c c0       	rjmp	.+280    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e90:	82 e0       	ldi	r24, 0x02	; 2
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	89 c0       	rjmp	.+274    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	82 30       	cpi	r24, 0x02	; 2
    1e9a:	19 f0       	breq	.+6      	; 0x1ea2 <enu_SetOCxBehavior+0xc2>
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	83 30       	cpi	r24, 0x03	; 3
    1ea0:	09 f5       	brne	.+66     	; 0x1ee4 <enu_SetOCxBehavior+0x104>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	84 30       	cpi	r24, 0x04	; 4
    1ea6:	19 f0       	breq	.+6      	; 0x1eae <enu_SetOCxBehavior+0xce>
    1ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eaa:	86 30       	cpi	r24, 0x06	; 6
    1eac:	49 f4       	brne	.+18     	; 0x1ec0 <enu_SetOCxBehavior+0xe0>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    1eae:	a3 e5       	ldi	r26, 0x53	; 83
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e3 e5       	ldi	r30, 0x53	; 83
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	80 62       	ori	r24, 0x20	; 32
    1eba:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1ebc:	19 82       	std	Y+1, r1	; 0x01
    1ebe:	74 c0       	rjmp	.+232    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	85 30       	cpi	r24, 0x05	; 5
    1ec4:	19 f0       	breq	.+6      	; 0x1ecc <enu_SetOCxBehavior+0xec>
    1ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec8:	87 30       	cpi	r24, 0x07	; 7
    1eca:	49 f4       	brne	.+18     	; 0x1ede <enu_SetOCxBehavior+0xfe>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    1ecc:	a3 e5       	ldi	r26, 0x53	; 83
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e3 e5       	ldi	r30, 0x53	; 83
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	80 63       	ori	r24, 0x30	; 48
    1ed8:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	65 c0       	rjmp	.+202    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	62 c0       	rjmp	.+196    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	5f c0       	rjmp	.+190    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
        
        case TIMER_2:
        {
            
            //Clearing bits 5 and 4
            TCCR2 &= (0xCF);
    1eea:	a5 e4       	ldi	r26, 0x45	; 69
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e5 e4       	ldi	r30, 0x45	; 69
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8f 7c       	andi	r24, 0xCF	; 207
    1ef6:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    1ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    1efa:	88 23       	and	r24, r24
    1efc:	11 f4       	brne	.+4      	; 0x1f02 <enu_SetOCxBehavior+0x122>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    1efe:	19 82       	std	Y+1, r1	; 0x01
    1f00:	53 c0       	rjmp	.+166    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	88 23       	and	r24, r24
    1f06:	19 f0       	breq	.+6      	; 0x1f0e <enu_SetOCxBehavior+0x12e>
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	39 f5       	brne	.+78     	; 0x1f5c <enu_SetOCxBehavior+0x17c>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	49 f4       	brne	.+18     	; 0x1f26 <enu_SetOCxBehavior+0x146>
                {
                    //Bits contain 01
                    TCCR2 |= (1 << TCCR2_COM20);
    1f14:	a5 e4       	ldi	r26, 0x45	; 69
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e5 e4       	ldi	r30, 0x45	; 69
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 61       	ori	r24, 0x10	; 16
    1f20:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1f22:	19 82       	std	Y+1, r1	; 0x01
    1f24:	41 c0       	rjmp	.+130    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    1f26:	8c 81       	ldd	r24, Y+4	; 0x04
    1f28:	82 30       	cpi	r24, 0x02	; 2
    1f2a:	49 f4       	brne	.+18     	; 0x1f3e <enu_SetOCxBehavior+0x15e>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    1f2c:	a5 e4       	ldi	r26, 0x45	; 69
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e5 e4       	ldi	r30, 0x45	; 69
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	80 62       	ori	r24, 0x20	; 32
    1f38:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1f3a:	19 82       	std	Y+1, r1	; 0x01
    1f3c:	35 c0       	rjmp	.+106    	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	49 f4       	brne	.+18     	; 0x1f56 <enu_SetOCxBehavior+0x176>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    1f44:	a5 e4       	ldi	r26, 0x45	; 69
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e5 e4       	ldi	r30, 0x45	; 69
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	80 63       	ori	r24, 0x30	; 48
    1f50:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1f52:	19 82       	std	Y+1, r1	; 0x01
    1f54:	29 c0       	rjmp	.+82     	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	26 c0       	rjmp	.+76     	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	19 f0       	breq	.+6      	; 0x1f68 <enu_SetOCxBehavior+0x188>
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	83 30       	cpi	r24, 0x03	; 3
    1f66:	d9 f4       	brne	.+54     	; 0x1f9e <enu_SetOCxBehavior+0x1be>
            {
                //PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING)
    1f68:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6a:	84 30       	cpi	r24, 0x04	; 4
    1f6c:	49 f4       	brne	.+18     	; 0x1f80 <enu_SetOCxBehavior+0x1a0>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    1f6e:	a5 e4       	ldi	r26, 0x45	; 69
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e5 e4       	ldi	r30, 0x45	; 69
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	80 62       	ori	r24, 0x20	; 32
    1f7a:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1f7c:	19 82       	std	Y+1, r1	; 0x01
    1f7e:	14 c0       	rjmp	.+40     	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING)
    1f80:	8c 81       	ldd	r24, Y+4	; 0x04
    1f82:	85 30       	cpi	r24, 0x05	; 5
    1f84:	49 f4       	brne	.+18     	; 0x1f98 <enu_SetOCxBehavior+0x1b8>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    1f86:	a5 e4       	ldi	r26, 0x45	; 69
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e5 e4       	ldi	r30, 0x45	; 69
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	80 63       	ori	r24, 0x30	; 48
    1f92:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1f94:	19 82       	std	Y+1, r1	; 0x01
    1f96:	08 c0       	rjmp	.+16     	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	05 c0       	rjmp	.+10     	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f9e:	82 e0       	ldi	r24, 0x02	; 2
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <enu_SetOCxBehavior+0x1c8>
            }
            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	26 96       	adiw	r28, 0x06	; 6
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
    1fc4:	78 94       	sei
}
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
    1fd4:	f8 94       	cli

    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <EXTI_enu_Initialization+0x6>
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1fea:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    1fec:	19 82       	std	Y+1, r1	; 0x01
    1fee:	3b c0       	rjmp	.+118    	; 0x2066 <EXTI_enu_Initialization+0x8a>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	c9 01       	movw	r24, r18
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	82 0f       	add	r24, r18
    1ffe:	93 1f       	adc	r25, r19
    2000:	fc 01       	movw	r30, r24
    2002:	e1 59       	subi	r30, 0x91	; 145
    2004:	fe 4f       	sbci	r31, 0xFE	; 254
    2006:	40 81       	ld	r20, Z
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	c9 01       	movw	r24, r18
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	82 0f       	add	r24, r18
    2016:	93 1f       	adc	r25, r19
    2018:	fc 01       	movw	r30, r24
    201a:	e0 59       	subi	r30, 0x90	; 144
    201c:	fe 4f       	sbci	r31, 0xFE	; 254
    201e:	90 81       	ld	r25, Z
    2020:	84 2f       	mov	r24, r20
    2022:	69 2f       	mov	r22, r25
    2024:	0e 94 b3 11 	call	0x2366	; 0x2366 <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	c9 01       	movw	r24, r18
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	82 0f       	add	r24, r18
    2036:	93 1f       	adc	r25, r19
    2038:	fc 01       	movw	r30, r24
    203a:	e1 59       	subi	r30, 0x91	; 145
    203c:	fe 4f       	sbci	r31, 0xFE	; 254
    203e:	40 81       	ld	r20, Z
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	c9 01       	movw	r24, r18
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	82 0f       	add	r24, r18
    204e:	93 1f       	adc	r25, r19
    2050:	fc 01       	movw	r30, r24
    2052:	ef 58       	subi	r30, 0x8F	; 143
    2054:	fe 4f       	sbci	r31, 0xFE	; 254
    2056:	90 81       	ld	r25, Z
    2058:	84 2f       	mov	r24, r20
    205a:	69 2f       	mov	r22, r25
    205c:	0e 94 2e 12 	call	0x245c	; 0x245c <enu_SetSenseLevel>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	8f 5f       	subi	r24, 0xFF	; 255
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	90 91 6e 01 	lds	r25, 0x016E
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	89 17       	cp	r24, r25
    206e:	08 f4       	brcc	.+2      	; 0x2072 <EXTI_enu_Initialization+0x96>
    2070:	bf cf       	rjmp	.-130    	; 0x1ff0 <EXTI_enu_Initialization+0x14>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    }
    
    Local_u8_ErrorFlag = ES_OK;
    2072:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <EXTI_enu_ISC+0x6>
    2086:	0f 92       	push	r0
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	8a 83       	std	Y+2, r24	; 0x02
    208e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	6b 81       	ldd	r22, Y+3	; 0x03
    2098:	0e 94 2e 12 	call	0x245c	; 0x245c <enu_SetSenseLevel>
    209c:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    209e:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <EXTI_enu_INTMode+0x6>
    20b2:	0f 92       	push	r0
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	8a 83       	std	Y+2, r24	; 0x02
    20ba:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	6b 81       	ldd	r22, Y+3	; 0x03
    20c4:	0e 94 b3 11 	call	0x2366	; 0x2366 <enu_SetMode>
    20c8:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	00 d0       	rcall	.+0      	; 0x20de <EXTI_enu_GetPIF+0x6>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <EXTI_enu_GetPIF+0x8>
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <EXTI_enu_GetPIF+0xa>
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	8a 83       	std	Y+2, r24	; 0x02
    20e8:	7c 83       	std	Y+4, r23	; 0x04
    20ea:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	d1 f1       	breq	.+116    	; 0x216c <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	3e 83       	std	Y+6, r19	; 0x06
    2100:	2d 83       	std	Y+5, r18	; 0x05
    2102:	8d 81       	ldd	r24, Y+5	; 0x05
    2104:	9e 81       	ldd	r25, Y+6	; 0x06
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	91 05       	cpc	r25, r1
    210a:	b1 f0       	breq	.+44     	; 0x2138 <EXTI_enu_GetPIF+0x60>
    210c:	2d 81       	ldd	r18, Y+5	; 0x05
    210e:	3e 81       	ldd	r19, Y+6	; 0x06
    2110:	22 30       	cpi	r18, 0x02	; 2
    2112:	31 05       	cpc	r19, r1
    2114:	e1 f0       	breq	.+56     	; 0x214e <EXTI_enu_GetPIF+0x76>
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	21 f5       	brne	.+72     	; 0x2166 <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
    211e:	ea e5       	ldi	r30, 0x5A	; 90
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	82 95       	swap	r24
    2126:	86 95       	lsr	r24
    2128:	86 95       	lsr	r24
    212a:	83 70       	andi	r24, 0x03	; 3
    212c:	81 70       	andi	r24, 0x01	; 1
    212e:	eb 81       	ldd	r30, Y+3	; 0x03
    2130:	fc 81       	ldd	r31, Y+4	; 0x04
    2132:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    2134:	19 82       	std	Y+1, r1	; 0x01
    2136:	1c c0       	rjmp	.+56     	; 0x2170 <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
    2138:	ea e5       	ldi	r30, 0x5A	; 90
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	88 1f       	adc	r24, r24
    2140:	88 27       	eor	r24, r24
    2142:	88 1f       	adc	r24, r24
    2144:	eb 81       	ldd	r30, Y+3	; 0x03
    2146:	fc 81       	ldd	r31, Y+4	; 0x04
    2148:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    214a:	19 82       	std	Y+1, r1	; 0x01
    214c:	11 c0       	rjmp	.+34     	; 0x2170 <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
    214e:	ea e5       	ldi	r30, 0x5A	; 90
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	82 95       	swap	r24
    2156:	86 95       	lsr	r24
    2158:	87 70       	andi	r24, 0x07	; 7
    215a:	81 70       	andi	r24, 0x01	; 1
    215c:	eb 81       	ldd	r30, Y+3	; 0x03
    215e:	fc 81       	ldd	r31, Y+4	; 0x04
    2160:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    2162:	19 82       	std	Y+1, r1	; 0x01
    2164:	05 c0       	rjmp	.+10     	; 0x2170 <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    216c:	83 e0       	ldi	r24, 0x03	; 3
    216e:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
}
    2172:	26 96       	adiw	r28, 0x06	; 6
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <EXTI_enu_SeTPIF>:

extern ErrorState_t EXTI_enu_SeTPIF (u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	00 d0       	rcall	.+0      	; 0x218a <EXTI_enu_SeTPIF+0x6>
    218a:	0f 92       	push	r0
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	8a 83       	std	Y+2, r24	; 0x02
    2192:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, Copy_u8_Value);
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	6b 81       	ldd	r22, Y+3	; 0x03
    219c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <enu_SetFlagValue>
    21a0:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void), void* Copy_pvid_Parameters)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <EXTI_enu_SetCallBack+0x6>
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <EXTI_enu_SetCallBack+0x8>
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <EXTI_enu_SetCallBack+0xa>
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	8a 83       	std	Y+2, r24	; 0x02
    21c0:	7c 83       	std	Y+4, r23	; 0x04
    21c2:	6b 83       	std	Y+3, r22	; 0x03
    21c4:	5e 83       	std	Y+6, r21	; 0x06
    21c6:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	d1 f0       	breq	.+52     	; 0x2208 <EXTI_enu_SetCallBack+0x58>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	88 2f       	mov	r24, r24
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	2b 81       	ldd	r18, Y+3	; 0x03
    21dc:	3c 81       	ldd	r19, Y+4	; 0x04
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	fc 01       	movw	r30, r24
    21e4:	ec 53       	subi	r30, 0x3C	; 60
    21e6:	fe 4f       	sbci	r31, 0xFE	; 254
    21e8:	31 83       	std	Z+1, r19	; 0x01
    21ea:	20 83       	st	Z, r18

        apvid_ISRParameters[Copy_u8_INTNumber] = Copy_pvid_Parameters;
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	fc 01       	movw	r30, r24
    21f8:	e6 53       	subi	r30, 0x36	; 54
    21fa:	fe 4f       	sbci	r31, 0xFE	; 254
    21fc:	8d 81       	ldd	r24, Y+5	; 0x05
    21fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2200:	91 83       	std	Z+1, r25	; 0x01
    2202:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    2204:	19 82       	std	Y+1, r1	; 0x01
    2206:	02 c0       	rjmp	.+4      	; 0x220c <EXTI_enu_SetCallBack+0x5c>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2208:	82 e0       	ldi	r24, 0x02	; 2
    220a:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    220c:	89 81       	ldd	r24, Y+1	; 0x01
}
    220e:	26 96       	adiw	r28, 0x06	; 6
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
    2220:	1f 92       	push	r1
    2222:	0f 92       	push	r0
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	0f 92       	push	r0
    2228:	11 24       	eor	r1, r1
    222a:	2f 93       	push	r18
    222c:	3f 93       	push	r19
    222e:	4f 93       	push	r20
    2230:	5f 93       	push	r21
    2232:	6f 93       	push	r22
    2234:	7f 93       	push	r23
    2236:	8f 93       	push	r24
    2238:	9f 93       	push	r25
    223a:	af 93       	push	r26
    223c:	bf 93       	push	r27
    223e:	ef 93       	push	r30
    2240:	ff 93       	push	r31
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
    224a:	80 91 c4 01 	lds	r24, 0x01C4
    224e:	90 91 c5 01 	lds	r25, 0x01C5
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	49 f0       	breq	.+18     	; 0x2268 <__vector_1+0x48>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
    2256:	e0 91 c4 01 	lds	r30, 0x01C4
    225a:	f0 91 c5 01 	lds	r31, 0x01C5
    225e:	80 91 ca 01 	lds	r24, 0x01CA
    2262:	90 91 cb 01 	lds	r25, 0x01CB
    2266:	09 95       	icall
    }
}
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	ff 91       	pop	r31
    226e:	ef 91       	pop	r30
    2270:	bf 91       	pop	r27
    2272:	af 91       	pop	r26
    2274:	9f 91       	pop	r25
    2276:	8f 91       	pop	r24
    2278:	7f 91       	pop	r23
    227a:	6f 91       	pop	r22
    227c:	5f 91       	pop	r21
    227e:	4f 91       	pop	r20
    2280:	3f 91       	pop	r19
    2282:	2f 91       	pop	r18
    2284:	0f 90       	pop	r0
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	0f 90       	pop	r0
    228a:	1f 90       	pop	r1
    228c:	18 95       	reti

0000228e <__vector_2>:
//INT1
void __vector_2 (void)
{
    228e:	1f 92       	push	r1
    2290:	0f 92       	push	r0
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	0f 92       	push	r0
    2296:	11 24       	eor	r1, r1
    2298:	2f 93       	push	r18
    229a:	3f 93       	push	r19
    229c:	4f 93       	push	r20
    229e:	5f 93       	push	r21
    22a0:	6f 93       	push	r22
    22a2:	7f 93       	push	r23
    22a4:	8f 93       	push	r24
    22a6:	9f 93       	push	r25
    22a8:	af 93       	push	r26
    22aa:	bf 93       	push	r27
    22ac:	ef 93       	push	r30
    22ae:	ff 93       	push	r31
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
    22b8:	80 91 c6 01 	lds	r24, 0x01C6
    22bc:	90 91 c7 01 	lds	r25, 0x01C7
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	49 f0       	breq	.+18     	; 0x22d6 <__vector_2+0x48>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
    22c4:	e0 91 c6 01 	lds	r30, 0x01C6
    22c8:	f0 91 c7 01 	lds	r31, 0x01C7
    22cc:	80 91 cc 01 	lds	r24, 0x01CC
    22d0:	90 91 cd 01 	lds	r25, 0x01CD
    22d4:	09 95       	icall
    }
}
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	ff 91       	pop	r31
    22dc:	ef 91       	pop	r30
    22de:	bf 91       	pop	r27
    22e0:	af 91       	pop	r26
    22e2:	9f 91       	pop	r25
    22e4:	8f 91       	pop	r24
    22e6:	7f 91       	pop	r23
    22e8:	6f 91       	pop	r22
    22ea:	5f 91       	pop	r21
    22ec:	4f 91       	pop	r20
    22ee:	3f 91       	pop	r19
    22f0:	2f 91       	pop	r18
    22f2:	0f 90       	pop	r0
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	0f 90       	pop	r0
    22f8:	1f 90       	pop	r1
    22fa:	18 95       	reti

000022fc <__vector_3>:
//INT2
void __vector_3 (void)
{
    22fc:	1f 92       	push	r1
    22fe:	0f 92       	push	r0
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	0f 92       	push	r0
    2304:	11 24       	eor	r1, r1
    2306:	2f 93       	push	r18
    2308:	3f 93       	push	r19
    230a:	4f 93       	push	r20
    230c:	5f 93       	push	r21
    230e:	6f 93       	push	r22
    2310:	7f 93       	push	r23
    2312:	8f 93       	push	r24
    2314:	9f 93       	push	r25
    2316:	af 93       	push	r26
    2318:	bf 93       	push	r27
    231a:	ef 93       	push	r30
    231c:	ff 93       	push	r31
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
    2326:	80 91 c8 01 	lds	r24, 0x01C8
    232a:	90 91 c9 01 	lds	r25, 0x01C9
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	39 f0       	breq	.+14     	; 0x2340 <__vector_3+0x44>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
    2332:	e0 91 c8 01 	lds	r30, 0x01C8
    2336:	f0 91 c9 01 	lds	r31, 0x01C9
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	09 95       	icall
    }
    
}
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	ff 91       	pop	r31
    2346:	ef 91       	pop	r30
    2348:	bf 91       	pop	r27
    234a:	af 91       	pop	r26
    234c:	9f 91       	pop	r25
    234e:	8f 91       	pop	r24
    2350:	7f 91       	pop	r23
    2352:	6f 91       	pop	r22
    2354:	5f 91       	pop	r21
    2356:	4f 91       	pop	r20
    2358:	3f 91       	pop	r19
    235a:	2f 91       	pop	r18
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	0f 90       	pop	r0
    2362:	1f 90       	pop	r1
    2364:	18 95       	reti

00002366 <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	00 d0       	rcall	.+0      	; 0x236c <enu_SetMode+0x6>
    236c:	00 d0       	rcall	.+0      	; 0x236e <enu_SetMode+0x8>
    236e:	0f 92       	push	r0
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	8a 83       	std	Y+2, r24	; 0x02
    2376:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	3d 83       	std	Y+5, r19	; 0x05
    2384:	2c 83       	std	Y+4, r18	; 0x04
    2386:	8c 81       	ldd	r24, Y+4	; 0x04
    2388:	9d 81       	ldd	r25, Y+5	; 0x05
    238a:	81 30       	cpi	r24, 0x01	; 1
    238c:	91 05       	cpc	r25, r1
    238e:	29 f1       	breq	.+74     	; 0x23da <enu_SetMode+0x74>
    2390:	2c 81       	ldd	r18, Y+4	; 0x04
    2392:	3d 81       	ldd	r19, Y+5	; 0x05
    2394:	22 30       	cpi	r18, 0x02	; 2
    2396:	31 05       	cpc	r19, r1
    2398:	d9 f1       	breq	.+118    	; 0x2410 <enu_SetMode+0xaa>
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <enu_SetMode+0x3e>
    23a2:	51 c0       	rjmp	.+162    	; 0x2446 <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	49 f4       	brne	.+18     	; 0x23bc <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
    23aa:	ab e5       	ldi	r26, 0x5B	; 91
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	eb e5       	ldi	r30, 0x5B	; 91
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	80 64       	ori	r24, 0x40	; 64
    23b6:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    23b8:	19 82       	std	Y+1, r1	; 0x01
    23ba:	47 c0       	rjmp	.+142    	; 0x244a <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	88 23       	and	r24, r24
    23c0:	49 f4       	brne	.+18     	; 0x23d4 <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
    23c2:	ab e5       	ldi	r26, 0x5B	; 91
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	eb e5       	ldi	r30, 0x5B	; 91
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	8f 7b       	andi	r24, 0xBF	; 191
    23ce:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    23d0:	19 82       	std	Y+1, r1	; 0x01
    23d2:	3b c0       	rjmp	.+118    	; 0x244a <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    23d4:	82 e0       	ldi	r24, 0x02	; 2
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	38 c0       	rjmp	.+112    	; 0x244a <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	49 f4       	brne	.+18     	; 0x23f2 <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
    23e0:	ab e5       	ldi	r26, 0x5B	; 91
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	eb e5       	ldi	r30, 0x5B	; 91
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	80 68       	ori	r24, 0x80	; 128
    23ec:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    23ee:	19 82       	std	Y+1, r1	; 0x01
    23f0:	2c c0       	rjmp	.+88     	; 0x244a <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	88 23       	and	r24, r24
    23f6:	49 f4       	brne	.+18     	; 0x240a <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
    23f8:	ab e5       	ldi	r26, 0x5B	; 91
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	eb e5       	ldi	r30, 0x5B	; 91
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8f 77       	andi	r24, 0x7F	; 127
    2404:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2406:	19 82       	std	Y+1, r1	; 0x01
    2408:	20 c0       	rjmp	.+64     	; 0x244a <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    240a:	82 e0       	ldi	r24, 0x02	; 2
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	1d c0       	rjmp	.+58     	; 0x244a <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	81 30       	cpi	r24, 0x01	; 1
    2414:	49 f4       	brne	.+18     	; 0x2428 <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
    2416:	ab e5       	ldi	r26, 0x5B	; 91
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	eb e5       	ldi	r30, 0x5B	; 91
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	80 62       	ori	r24, 0x20	; 32
    2422:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    2424:	19 82       	std	Y+1, r1	; 0x01
    2426:	11 c0       	rjmp	.+34     	; 0x244a <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	88 23       	and	r24, r24
    242c:	49 f4       	brne	.+18     	; 0x2440 <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
    242e:	ab e5       	ldi	r26, 0x5B	; 91
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	eb e5       	ldi	r30, 0x5B	; 91
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	8f 7d       	andi	r24, 0xDF	; 223
    243a:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    243c:	19 82       	std	Y+1, r1	; 0x01
    243e:	05 c0       	rjmp	.+10     	; 0x244a <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2440:	82 e0       	ldi	r24, 0x02	; 2
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	02 c0       	rjmp	.+4      	; 0x244a <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    244a:	89 81       	ldd	r24, Y+1	; 0x01
}
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	00 d0       	rcall	.+0      	; 0x2462 <enu_SetSenseLevel+0x6>
    2462:	00 d0       	rcall	.+0      	; 0x2464 <enu_SetSenseLevel+0x8>
    2464:	0f 92       	push	r0
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	8a 83       	std	Y+2, r24	; 0x02
    246c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	3d 83       	std	Y+5, r19	; 0x05
    247a:	2c 83       	std	Y+4, r18	; 0x04
    247c:	8c 81       	ldd	r24, Y+4	; 0x04
    247e:	9d 81       	ldd	r25, Y+5	; 0x05
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	91 05       	cpc	r25, r1
    2484:	e9 f1       	breq	.+122    	; 0x2500 <enu_SetSenseLevel+0xa4>
    2486:	2c 81       	ldd	r18, Y+4	; 0x04
    2488:	3d 81       	ldd	r19, Y+5	; 0x05
    248a:	22 30       	cpi	r18, 0x02	; 2
    248c:	31 05       	cpc	r19, r1
    248e:	09 f4       	brne	.+2      	; 0x2492 <enu_SetSenseLevel+0x36>
    2490:	69 c0       	rjmp	.+210    	; 0x2564 <enu_SetSenseLevel+0x108>
    2492:	8c 81       	ldd	r24, Y+4	; 0x04
    2494:	9d 81       	ldd	r25, Y+5	; 0x05
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	09 f0       	breq	.+2      	; 0x249c <enu_SetSenseLevel+0x40>
    249a:	7c c0       	rjmp	.+248    	; 0x2594 <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
    249c:	a5 e5       	ldi	r26, 0x55	; 85
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e5 e5       	ldi	r30, 0x55	; 85
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	8c 7f       	andi	r24, 0xFC	; 252
    24a8:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	88 23       	and	r24, r24
    24ae:	11 f4       	brne	.+4      	; 0x24b4 <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    24b0:	19 82       	std	Y+1, r1	; 0x01
    24b2:	72 c0       	rjmp	.+228    	; 0x2598 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	81 30       	cpi	r24, 0x01	; 1
    24b8:	49 f4       	brne	.+18     	; 0x24cc <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
    24ba:	a5 e5       	ldi	r26, 0x55	; 85
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e5 e5       	ldi	r30, 0x55	; 85
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	81 60       	ori	r24, 0x01	; 1
    24c6:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    24c8:	19 82       	std	Y+1, r1	; 0x01
    24ca:	66 c0       	rjmp	.+204    	; 0x2598 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	82 30       	cpi	r24, 0x02	; 2
    24d0:	41 f4       	brne	.+16     	; 0x24e2 <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
    24d2:	a5 e5       	ldi	r26, 0x55	; 85
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e5 e5       	ldi	r30, 0x55	; 85
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	82 60       	ori	r24, 0x02	; 2
    24de:	8c 93       	st	X, r24
    24e0:	5b c0       	rjmp	.+182    	; 0x2598 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	83 30       	cpi	r24, 0x03	; 3
    24e6:	49 f4       	brne	.+18     	; 0x24fa <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
    24e8:	a5 e5       	ldi	r26, 0x55	; 85
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e5 e5       	ldi	r30, 0x55	; 85
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	83 60       	ori	r24, 0x03	; 3
    24f4:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    24f6:	19 82       	std	Y+1, r1	; 0x01
    24f8:	4f c0       	rjmp	.+158    	; 0x2598 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	4c c0       	rjmp	.+152    	; 0x2598 <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
    2500:	a5 e5       	ldi	r26, 0x55	; 85
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e5 e5       	ldi	r30, 0x55	; 85
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	83 7f       	andi	r24, 0xF3	; 243
    250c:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	88 23       	and	r24, r24
    2512:	11 f4       	brne	.+4      	; 0x2518 <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    2514:	19 82       	std	Y+1, r1	; 0x01
    2516:	40 c0       	rjmp	.+128    	; 0x2598 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	81 30       	cpi	r24, 0x01	; 1
    251c:	49 f4       	brne	.+18     	; 0x2530 <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
    251e:	a5 e5       	ldi	r26, 0x55	; 85
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e5 e5       	ldi	r30, 0x55	; 85
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	84 60       	ori	r24, 0x04	; 4
    252a:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    252c:	19 82       	std	Y+1, r1	; 0x01
    252e:	34 c0       	rjmp	.+104    	; 0x2598 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	82 30       	cpi	r24, 0x02	; 2
    2534:	41 f4       	brne	.+16     	; 0x2546 <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
    2536:	a5 e5       	ldi	r26, 0x55	; 85
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e5 e5       	ldi	r30, 0x55	; 85
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	88 60       	ori	r24, 0x08	; 8
    2542:	8c 93       	st	X, r24
    2544:	29 c0       	rjmp	.+82     	; 0x2598 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	83 30       	cpi	r24, 0x03	; 3
    254a:	49 f4       	brne	.+18     	; 0x255e <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
    254c:	a5 e5       	ldi	r26, 0x55	; 85
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e5 e5       	ldi	r30, 0x55	; 85
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	8c 60       	ori	r24, 0x0C	; 12
    2558:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    255a:	19 82       	std	Y+1, r1	; 0x01
    255c:	1d c0       	rjmp	.+58     	; 0x2598 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    255e:	82 e0       	ldi	r24, 0x02	; 2
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	1a c0       	rjmp	.+52     	; 0x2598 <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	82 30       	cpi	r24, 0x02	; 2
    2568:	49 f4       	brne	.+18     	; 0x257c <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
    256a:	a4 e5       	ldi	r26, 0x54	; 84
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e4 e5       	ldi	r30, 0x54	; 84
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	8f 7b       	andi	r24, 0xBF	; 191
    2576:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2578:	19 82       	std	Y+1, r1	; 0x01
    257a:	0e c0       	rjmp	.+28     	; 0x2598 <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	83 30       	cpi	r24, 0x03	; 3
    2580:	59 f4       	brne	.+22     	; 0x2598 <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
    2582:	a4 e5       	ldi	r26, 0x54	; 84
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e4 e5       	ldi	r30, 0x54	; 84
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	80 64       	ori	r24, 0x40	; 64
    258e:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2590:	19 82       	std	Y+1, r1	; 0x01
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
    2598:	89 81       	ldd	r24, Y+1	; 0x01
}
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <enu_SetFlagValue+0x6>
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <enu_SetFlagValue+0x8>
    25b2:	0f 92       	push	r0
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	8a 83       	std	Y+2, r24	; 0x02
    25ba:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	3d 83       	std	Y+5, r19	; 0x05
    25c8:	2c 83       	std	Y+4, r18	; 0x04
    25ca:	8c 81       	ldd	r24, Y+4	; 0x04
    25cc:	9d 81       	ldd	r25, Y+5	; 0x05
    25ce:	81 30       	cpi	r24, 0x01	; 1
    25d0:	91 05       	cpc	r25, r1
    25d2:	29 f1       	breq	.+74     	; 0x261e <enu_SetFlagValue+0x74>
    25d4:	2c 81       	ldd	r18, Y+4	; 0x04
    25d6:	3d 81       	ldd	r19, Y+5	; 0x05
    25d8:	22 30       	cpi	r18, 0x02	; 2
    25da:	31 05       	cpc	r19, r1
    25dc:	d9 f1       	breq	.+118    	; 0x2654 <enu_SetFlagValue+0xaa>
    25de:	8c 81       	ldd	r24, Y+4	; 0x04
    25e0:	9d 81       	ldd	r25, Y+5	; 0x05
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <enu_SetFlagValue+0x3e>
    25e6:	51 c0       	rjmp	.+162    	; 0x268a <enu_SetFlagValue+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	81 30       	cpi	r24, 0x01	; 1
    25ec:	49 f4       	brne	.+18     	; 0x2600 <enu_SetFlagValue+0x56>
            {
                GIFR |= ( 1 << GIFR_INTF0);
    25ee:	aa e5       	ldi	r26, 0x5A	; 90
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	ea e5       	ldi	r30, 0x5A	; 90
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	80 64       	ori	r24, 0x40	; 64
    25fa:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    25fc:	19 82       	std	Y+1, r1	; 0x01
    25fe:	47 c0       	rjmp	.+142    	; 0x268e <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	88 23       	and	r24, r24
    2604:	49 f4       	brne	.+18     	; 0x2618 <enu_SetFlagValue+0x6e>
            {
                GIFR &= ~( 1 << GIFR_INTF0);
    2606:	aa e5       	ldi	r26, 0x5A	; 90
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	ea e5       	ldi	r30, 0x5A	; 90
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	8f 7b       	andi	r24, 0xBF	; 191
    2612:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2614:	19 82       	std	Y+1, r1	; 0x01
    2616:	3b c0       	rjmp	.+118    	; 0x268e <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2618:	82 e0       	ldi	r24, 0x02	; 2
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	38 c0       	rjmp	.+112    	; 0x268e <enu_SetFlagValue+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	49 f4       	brne	.+18     	; 0x2636 <enu_SetFlagValue+0x8c>
            {
                GIFR |= ( 1 << GIFR_INTF1);
    2624:	aa e5       	ldi	r26, 0x5A	; 90
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	ea e5       	ldi	r30, 0x5A	; 90
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	80 68       	ori	r24, 0x80	; 128
    2630:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2632:	19 82       	std	Y+1, r1	; 0x01
    2634:	2c c0       	rjmp	.+88     	; 0x268e <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	88 23       	and	r24, r24
    263a:	49 f4       	brne	.+18     	; 0x264e <enu_SetFlagValue+0xa4>
            {
                GIFR &= ~( 1 << GIFR_INTF1);
    263c:	aa e5       	ldi	r26, 0x5A	; 90
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	ea e5       	ldi	r30, 0x5A	; 90
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	8f 77       	andi	r24, 0x7F	; 127
    2648:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    264a:	19 82       	std	Y+1, r1	; 0x01
    264c:	20 c0       	rjmp	.+64     	; 0x268e <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	1d c0       	rjmp	.+58     	; 0x268e <enu_SetFlagValue+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	49 f4       	brne	.+18     	; 0x266c <enu_SetFlagValue+0xc2>
            {
                GIFR |= ( 1 << GIFR_INTF2);
    265a:	aa e5       	ldi	r26, 0x5A	; 90
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	ea e5       	ldi	r30, 0x5A	; 90
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	80 62       	ori	r24, 0x20	; 32
    2666:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    2668:	19 82       	std	Y+1, r1	; 0x01
    266a:	11 c0       	rjmp	.+34     	; 0x268e <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	88 23       	and	r24, r24
    2670:	49 f4       	brne	.+18     	; 0x2684 <enu_SetFlagValue+0xda>
            {
                GIFR &= ~( 1 << GIFR_INTF2);
    2672:	aa e5       	ldi	r26, 0x5A	; 90
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	ea e5       	ldi	r30, 0x5A	; 90
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8f 7d       	andi	r24, 0xDF	; 223
    267e:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2680:	19 82       	std	Y+1, r1	; 0x01
    2682:	05 c0       	rjmp	.+10     	; 0x268e <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2684:	82 e0       	ldi	r24, 0x02	; 2
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	02 c0       	rjmp	.+4      	; 0x268e <enu_SetFlagValue+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    268a:	82 e0       	ldi	r24, 0x02	; 2
    268c:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	0f 92       	push	r0
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    26ae:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26b2:	0f 90       	pop	r0
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <DIO_enu_SetPinDiretion+0x6>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <DIO_enu_SetPinDiretion+0x8>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <DIO_enu_SetPinDiretion+0xa>
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	8a 83       	std	Y+2, r24	; 0x02
    26ca:	6b 83       	std	Y+3, r22	; 0x03
    26cc:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	84 30       	cpi	r24, 0x04	; 4
    26d6:	08 f0       	brcs	.+2      	; 0x26da <DIO_enu_SetPinDiretion+0x20>
    26d8:	d0 c0       	rjmp	.+416    	; 0x287a <DIO_enu_SetPinDiretion+0x1c0>
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	88 30       	cpi	r24, 0x08	; 8
    26de:	08 f0       	brcs	.+2      	; 0x26e2 <DIO_enu_SetPinDiretion+0x28>
    26e0:	cc c0       	rjmp	.+408    	; 0x287a <DIO_enu_SetPinDiretion+0x1c0>
    26e2:	8c 81       	ldd	r24, Y+4	; 0x04
    26e4:	82 30       	cpi	r24, 0x02	; 2
    26e6:	08 f0       	brcs	.+2      	; 0x26ea <DIO_enu_SetPinDiretion+0x30>
    26e8:	c8 c0       	rjmp	.+400    	; 0x287a <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	3e 83       	std	Y+6, r19	; 0x06
    26f2:	2d 83       	std	Y+5, r18	; 0x05
    26f4:	6d 81       	ldd	r22, Y+5	; 0x05
    26f6:	7e 81       	ldd	r23, Y+6	; 0x06
    26f8:	61 30       	cpi	r22, 0x01	; 1
    26fa:	71 05       	cpc	r23, r1
    26fc:	09 f4       	brne	.+2      	; 0x2700 <DIO_enu_SetPinDiretion+0x46>
    26fe:	41 c0       	rjmp	.+130    	; 0x2782 <DIO_enu_SetPinDiretion+0xc8>
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	82 30       	cpi	r24, 0x02	; 2
    2706:	91 05       	cpc	r25, r1
    2708:	34 f4       	brge	.+12     	; 0x2716 <DIO_enu_SetPinDiretion+0x5c>
    270a:	2d 81       	ldd	r18, Y+5	; 0x05
    270c:	3e 81       	ldd	r19, Y+6	; 0x06
    270e:	21 15       	cp	r18, r1
    2710:	31 05       	cpc	r19, r1
    2712:	71 f0       	breq	.+28     	; 0x2730 <DIO_enu_SetPinDiretion+0x76>
    2714:	b0 c0       	rjmp	.+352    	; 0x2876 <DIO_enu_SetPinDiretion+0x1bc>
    2716:	6d 81       	ldd	r22, Y+5	; 0x05
    2718:	7e 81       	ldd	r23, Y+6	; 0x06
    271a:	62 30       	cpi	r22, 0x02	; 2
    271c:	71 05       	cpc	r23, r1
    271e:	09 f4       	brne	.+2      	; 0x2722 <DIO_enu_SetPinDiretion+0x68>
    2720:	59 c0       	rjmp	.+178    	; 0x27d4 <DIO_enu_SetPinDiretion+0x11a>
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	83 30       	cpi	r24, 0x03	; 3
    2728:	91 05       	cpc	r25, r1
    272a:	09 f4       	brne	.+2      	; 0x272e <DIO_enu_SetPinDiretion+0x74>
    272c:	7c c0       	rjmp	.+248    	; 0x2826 <DIO_enu_SetPinDiretion+0x16c>
    272e:	a3 c0       	rjmp	.+326    	; 0x2876 <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    2730:	aa e3       	ldi	r26, 0x3A	; 58
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	ea e3       	ldi	r30, 0x3A	; 58
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	48 2f       	mov	r20, r24
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	02 c0       	rjmp	.+4      	; 0x274c <DIO_enu_SetPinDiretion+0x92>
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	2a 95       	dec	r18
    274e:	e2 f7       	brpl	.-8      	; 0x2748 <DIO_enu_SetPinDiretion+0x8e>
    2750:	80 95       	com	r24
    2752:	84 23       	and	r24, r20
    2754:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    2756:	aa e3       	ldi	r26, 0x3A	; 58
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	ea e3       	ldi	r30, 0x3A	; 58
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	48 2f       	mov	r20, r24
    2762:	8c 81       	ldd	r24, Y+4	; 0x04
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	88 2f       	mov	r24, r24
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	b9 01       	movw	r22, r18
    2770:	02 c0       	rjmp	.+4      	; 0x2776 <DIO_enu_SetPinDiretion+0xbc>
    2772:	66 0f       	add	r22, r22
    2774:	77 1f       	adc	r23, r23
    2776:	8a 95       	dec	r24
    2778:	e2 f7       	brpl	.-8      	; 0x2772 <DIO_enu_SetPinDiretion+0xb8>
    277a:	cb 01       	movw	r24, r22
    277c:	84 2b       	or	r24, r20
    277e:	8c 93       	st	X, r24
    2780:	7a c0       	rjmp	.+244    	; 0x2876 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    2782:	a7 e3       	ldi	r26, 0x37	; 55
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e7 e3       	ldi	r30, 0x37	; 55
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	48 2f       	mov	r20, r24
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	02 c0       	rjmp	.+4      	; 0x279e <DIO_enu_SetPinDiretion+0xe4>
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	2a 95       	dec	r18
    27a0:	e2 f7       	brpl	.-8      	; 0x279a <DIO_enu_SetPinDiretion+0xe0>
    27a2:	80 95       	com	r24
    27a4:	84 23       	and	r24, r20
    27a6:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    27a8:	a7 e3       	ldi	r26, 0x37	; 55
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e7 e3       	ldi	r30, 0x37	; 55
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	48 2f       	mov	r20, r24
    27b4:	8c 81       	ldd	r24, Y+4	; 0x04
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	88 2f       	mov	r24, r24
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	b9 01       	movw	r22, r18
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <DIO_enu_SetPinDiretion+0x10e>
    27c4:	66 0f       	add	r22, r22
    27c6:	77 1f       	adc	r23, r23
    27c8:	8a 95       	dec	r24
    27ca:	e2 f7       	brpl	.-8      	; 0x27c4 <DIO_enu_SetPinDiretion+0x10a>
    27cc:	cb 01       	movw	r24, r22
    27ce:	84 2b       	or	r24, r20
    27d0:	8c 93       	st	X, r24
    27d2:	51 c0       	rjmp	.+162    	; 0x2876 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    27d4:	a4 e3       	ldi	r26, 0x34	; 52
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e4 e3       	ldi	r30, 0x34	; 52
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	48 2f       	mov	r20, r24
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <DIO_enu_SetPinDiretion+0x136>
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	2a 95       	dec	r18
    27f2:	e2 f7       	brpl	.-8      	; 0x27ec <DIO_enu_SetPinDiretion+0x132>
    27f4:	80 95       	com	r24
    27f6:	84 23       	and	r24, r20
    27f8:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    27fa:	a4 e3       	ldi	r26, 0x34	; 52
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e4 e3       	ldi	r30, 0x34	; 52
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	48 2f       	mov	r20, r24
    2806:	8c 81       	ldd	r24, Y+4	; 0x04
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	88 2f       	mov	r24, r24
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	b9 01       	movw	r22, r18
    2814:	02 c0       	rjmp	.+4      	; 0x281a <DIO_enu_SetPinDiretion+0x160>
    2816:	66 0f       	add	r22, r22
    2818:	77 1f       	adc	r23, r23
    281a:	8a 95       	dec	r24
    281c:	e2 f7       	brpl	.-8      	; 0x2816 <DIO_enu_SetPinDiretion+0x15c>
    281e:	cb 01       	movw	r24, r22
    2820:	84 2b       	or	r24, r20
    2822:	8c 93       	st	X, r24
    2824:	28 c0       	rjmp	.+80     	; 0x2876 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    2826:	a1 e3       	ldi	r26, 0x31	; 49
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	e1 e3       	ldi	r30, 0x31	; 49
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	48 2f       	mov	r20, r24
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	28 2f       	mov	r18, r24
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <DIO_enu_SetPinDiretion+0x188>
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	2a 95       	dec	r18
    2844:	e2 f7       	brpl	.-8      	; 0x283e <DIO_enu_SetPinDiretion+0x184>
    2846:	80 95       	com	r24
    2848:	84 23       	and	r24, r20
    284a:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    284c:	a1 e3       	ldi	r26, 0x31	; 49
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e1 e3       	ldi	r30, 0x31	; 49
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	48 2f       	mov	r20, r24
    2858:	8c 81       	ldd	r24, Y+4	; 0x04
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	88 2f       	mov	r24, r24
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	b9 01       	movw	r22, r18
    2866:	02 c0       	rjmp	.+4      	; 0x286c <DIO_enu_SetPinDiretion+0x1b2>
    2868:	66 0f       	add	r22, r22
    286a:	77 1f       	adc	r23, r23
    286c:	8a 95       	dec	r24
    286e:	e2 f7       	brpl	.-8      	; 0x2868 <DIO_enu_SetPinDiretion+0x1ae>
    2870:	cb 01       	movw	r24, r22
    2872:	84 2b       	or	r24, r20
    2874:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2876:	19 82       	std	Y+1, r1	; 0x01
    2878:	02 c0       	rjmp	.+4      	; 0x287e <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    287a:	82 e0       	ldi	r24, 0x02	; 2
    287c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    287e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2880:	26 96       	adiw	r28, 0x06	; 6
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <DIO_enu_SetPinState+0x6>
    2898:	00 d0       	rcall	.+0      	; 0x289a <DIO_enu_SetPinState+0x8>
    289a:	00 d0       	rcall	.+0      	; 0x289c <DIO_enu_SetPinState+0xa>
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	8a 83       	std	Y+2, r24	; 0x02
    28a2:	6b 83       	std	Y+3, r22	; 0x03
    28a4:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	84 30       	cpi	r24, 0x04	; 4
    28ae:	08 f0       	brcs	.+2      	; 0x28b2 <DIO_enu_SetPinState+0x20>
    28b0:	d0 c0       	rjmp	.+416    	; 0x2a52 <DIO_enu_SetPinState+0x1c0>
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	88 30       	cpi	r24, 0x08	; 8
    28b6:	08 f0       	brcs	.+2      	; 0x28ba <DIO_enu_SetPinState+0x28>
    28b8:	cc c0       	rjmp	.+408    	; 0x2a52 <DIO_enu_SetPinState+0x1c0>
    28ba:	8c 81       	ldd	r24, Y+4	; 0x04
    28bc:	82 30       	cpi	r24, 0x02	; 2
    28be:	08 f0       	brcs	.+2      	; 0x28c2 <DIO_enu_SetPinState+0x30>
    28c0:	c8 c0       	rjmp	.+400    	; 0x2a52 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	3e 83       	std	Y+6, r19	; 0x06
    28ca:	2d 83       	std	Y+5, r18	; 0x05
    28cc:	6d 81       	ldd	r22, Y+5	; 0x05
    28ce:	7e 81       	ldd	r23, Y+6	; 0x06
    28d0:	61 30       	cpi	r22, 0x01	; 1
    28d2:	71 05       	cpc	r23, r1
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <DIO_enu_SetPinState+0x46>
    28d6:	41 c0       	rjmp	.+130    	; 0x295a <DIO_enu_SetPinState+0xc8>
    28d8:	8d 81       	ldd	r24, Y+5	; 0x05
    28da:	9e 81       	ldd	r25, Y+6	; 0x06
    28dc:	82 30       	cpi	r24, 0x02	; 2
    28de:	91 05       	cpc	r25, r1
    28e0:	34 f4       	brge	.+12     	; 0x28ee <DIO_enu_SetPinState+0x5c>
    28e2:	2d 81       	ldd	r18, Y+5	; 0x05
    28e4:	3e 81       	ldd	r19, Y+6	; 0x06
    28e6:	21 15       	cp	r18, r1
    28e8:	31 05       	cpc	r19, r1
    28ea:	71 f0       	breq	.+28     	; 0x2908 <DIO_enu_SetPinState+0x76>
    28ec:	b0 c0       	rjmp	.+352    	; 0x2a4e <DIO_enu_SetPinState+0x1bc>
    28ee:	6d 81       	ldd	r22, Y+5	; 0x05
    28f0:	7e 81       	ldd	r23, Y+6	; 0x06
    28f2:	62 30       	cpi	r22, 0x02	; 2
    28f4:	71 05       	cpc	r23, r1
    28f6:	09 f4       	brne	.+2      	; 0x28fa <DIO_enu_SetPinState+0x68>
    28f8:	59 c0       	rjmp	.+178    	; 0x29ac <DIO_enu_SetPinState+0x11a>
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	83 30       	cpi	r24, 0x03	; 3
    2900:	91 05       	cpc	r25, r1
    2902:	09 f4       	brne	.+2      	; 0x2906 <DIO_enu_SetPinState+0x74>
    2904:	7c c0       	rjmp	.+248    	; 0x29fe <DIO_enu_SetPinState+0x16c>
    2906:	a3 c0       	rjmp	.+326    	; 0x2a4e <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    2908:	ab e3       	ldi	r26, 0x3B	; 59
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	eb e3       	ldi	r30, 0x3B	; 59
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	48 2f       	mov	r20, r24
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <DIO_enu_SetPinState+0x92>
    2920:	88 0f       	add	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	2a 95       	dec	r18
    2926:	e2 f7       	brpl	.-8      	; 0x2920 <DIO_enu_SetPinState+0x8e>
    2928:	80 95       	com	r24
    292a:	84 23       	and	r24, r20
    292c:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    292e:	ab e3       	ldi	r26, 0x3B	; 59
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	eb e3       	ldi	r30, 0x3B	; 59
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	48 2f       	mov	r20, r24
    293a:	8c 81       	ldd	r24, Y+4	; 0x04
    293c:	28 2f       	mov	r18, r24
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	88 2f       	mov	r24, r24
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	b9 01       	movw	r22, r18
    2948:	02 c0       	rjmp	.+4      	; 0x294e <DIO_enu_SetPinState+0xbc>
    294a:	66 0f       	add	r22, r22
    294c:	77 1f       	adc	r23, r23
    294e:	8a 95       	dec	r24
    2950:	e2 f7       	brpl	.-8      	; 0x294a <DIO_enu_SetPinState+0xb8>
    2952:	cb 01       	movw	r24, r22
    2954:	84 2b       	or	r24, r20
    2956:	8c 93       	st	X, r24
    2958:	7a c0       	rjmp	.+244    	; 0x2a4e <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    295a:	a8 e3       	ldi	r26, 0x38	; 56
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	e8 e3       	ldi	r30, 0x38	; 56
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	48 2f       	mov	r20, r24
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <DIO_enu_SetPinState+0xe4>
    2972:	88 0f       	add	r24, r24
    2974:	99 1f       	adc	r25, r25
    2976:	2a 95       	dec	r18
    2978:	e2 f7       	brpl	.-8      	; 0x2972 <DIO_enu_SetPinState+0xe0>
    297a:	80 95       	com	r24
    297c:	84 23       	and	r24, r20
    297e:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2980:	a8 e3       	ldi	r26, 0x38	; 56
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e8 e3       	ldi	r30, 0x38	; 56
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	48 2f       	mov	r20, r24
    298c:	8c 81       	ldd	r24, Y+4	; 0x04
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	88 2f       	mov	r24, r24
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	b9 01       	movw	r22, r18
    299a:	02 c0       	rjmp	.+4      	; 0x29a0 <DIO_enu_SetPinState+0x10e>
    299c:	66 0f       	add	r22, r22
    299e:	77 1f       	adc	r23, r23
    29a0:	8a 95       	dec	r24
    29a2:	e2 f7       	brpl	.-8      	; 0x299c <DIO_enu_SetPinState+0x10a>
    29a4:	cb 01       	movw	r24, r22
    29a6:	84 2b       	or	r24, r20
    29a8:	8c 93       	st	X, r24
    29aa:	51 c0       	rjmp	.+162    	; 0x2a4e <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    29ac:	a5 e3       	ldi	r26, 0x35	; 53
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	e5 e3       	ldi	r30, 0x35	; 53
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	48 2f       	mov	r20, r24
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	28 2f       	mov	r18, r24
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <DIO_enu_SetPinState+0x136>
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	2a 95       	dec	r18
    29ca:	e2 f7       	brpl	.-8      	; 0x29c4 <DIO_enu_SetPinState+0x132>
    29cc:	80 95       	com	r24
    29ce:	84 23       	and	r24, r20
    29d0:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    29d2:	a5 e3       	ldi	r26, 0x35	; 53
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	e5 e3       	ldi	r30, 0x35	; 53
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	48 2f       	mov	r20, r24
    29de:	8c 81       	ldd	r24, Y+4	; 0x04
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	88 2f       	mov	r24, r24
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	b9 01       	movw	r22, r18
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <DIO_enu_SetPinState+0x160>
    29ee:	66 0f       	add	r22, r22
    29f0:	77 1f       	adc	r23, r23
    29f2:	8a 95       	dec	r24
    29f4:	e2 f7       	brpl	.-8      	; 0x29ee <DIO_enu_SetPinState+0x15c>
    29f6:	cb 01       	movw	r24, r22
    29f8:	84 2b       	or	r24, r20
    29fa:	8c 93       	st	X, r24
    29fc:	28 c0       	rjmp	.+80     	; 0x2a4e <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    29fe:	a2 e3       	ldi	r26, 0x32	; 50
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e2 e3       	ldi	r30, 0x32	; 50
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	48 2f       	mov	r20, r24
    2a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <DIO_enu_SetPinState+0x188>
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	2a 95       	dec	r18
    2a1c:	e2 f7       	brpl	.-8      	; 0x2a16 <DIO_enu_SetPinState+0x184>
    2a1e:	80 95       	com	r24
    2a20:	84 23       	and	r24, r20
    2a22:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2a24:	a2 e3       	ldi	r26, 0x32	; 50
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e2 e3       	ldi	r30, 0x32	; 50
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	48 2f       	mov	r20, r24
    2a30:	8c 81       	ldd	r24, Y+4	; 0x04
    2a32:	28 2f       	mov	r18, r24
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	88 2f       	mov	r24, r24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	b9 01       	movw	r22, r18
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <DIO_enu_SetPinState+0x1b2>
    2a40:	66 0f       	add	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	8a 95       	dec	r24
    2a46:	e2 f7       	brpl	.-8      	; 0x2a40 <DIO_enu_SetPinState+0x1ae>
    2a48:	cb 01       	movw	r24, r22
    2a4a:	84 2b       	or	r24, r20
    2a4c:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2a4e:	19 82       	std	Y+1, r1	; 0x01
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a58:	26 96       	adiw	r28, 0x06	; 6
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	08 95       	ret

00002a6a <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    2a6a:	df 93       	push	r29
    2a6c:	cf 93       	push	r28
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <DIO_enu_SetPinValue+0x6>
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <DIO_enu_SetPinValue+0x8>
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <DIO_enu_SetPinValue+0xa>
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	8a 83       	std	Y+2, r24	; 0x02
    2a7a:	6b 83       	std	Y+3, r22	; 0x03
    2a7c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	84 30       	cpi	r24, 0x04	; 4
    2a86:	08 f0       	brcs	.+2      	; 0x2a8a <DIO_enu_SetPinValue+0x20>
    2a88:	db c0       	rjmp	.+438    	; 0x2c40 <DIO_enu_SetPinValue+0x1d6>
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	88 30       	cpi	r24, 0x08	; 8
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <DIO_enu_SetPinValue+0x28>
    2a90:	d7 c0       	rjmp	.+430    	; 0x2c40 <DIO_enu_SetPinValue+0x1d6>
    2a92:	8c 81       	ldd	r24, Y+4	; 0x04
    2a94:	82 30       	cpi	r24, 0x02	; 2
    2a96:	08 f0       	brcs	.+2      	; 0x2a9a <DIO_enu_SetPinValue+0x30>
    2a98:	d3 c0       	rjmp	.+422    	; 0x2c40 <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	3e 83       	std	Y+6, r19	; 0x06
    2aa2:	2d 83       	std	Y+5, r18	; 0x05
    2aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa8:	81 30       	cpi	r24, 0x01	; 1
    2aaa:	91 05       	cpc	r25, r1
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <DIO_enu_SetPinValue+0x46>
    2aae:	43 c0       	rjmp	.+134    	; 0x2b36 <DIO_enu_SetPinValue+0xcc>
    2ab0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ab2:	3e 81       	ldd	r19, Y+6	; 0x06
    2ab4:	22 30       	cpi	r18, 0x02	; 2
    2ab6:	31 05       	cpc	r19, r1
    2ab8:	2c f4       	brge	.+10     	; 0x2ac4 <DIO_enu_SetPinValue+0x5a>
    2aba:	8d 81       	ldd	r24, Y+5	; 0x05
    2abc:	9e 81       	ldd	r25, Y+6	; 0x06
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	71 f0       	breq	.+28     	; 0x2ade <DIO_enu_SetPinValue+0x74>
    2ac2:	bc c0       	rjmp	.+376    	; 0x2c3c <DIO_enu_SetPinValue+0x1d2>
    2ac4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ac6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ac8:	22 30       	cpi	r18, 0x02	; 2
    2aca:	31 05       	cpc	r19, r1
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <DIO_enu_SetPinValue+0x66>
    2ace:	5f c0       	rjmp	.+190    	; 0x2b8e <DIO_enu_SetPinValue+0x124>
    2ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad4:	83 30       	cpi	r24, 0x03	; 3
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <DIO_enu_SetPinValue+0x72>
    2ada:	85 c0       	rjmp	.+266    	; 0x2be6 <DIO_enu_SetPinValue+0x17c>
    2adc:	af c0       	rjmp	.+350    	; 0x2c3c <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    2ade:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae0:	81 30       	cpi	r24, 0x01	; 1
    2ae2:	a1 f4       	brne	.+40     	; 0x2b0c <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    2ae4:	ab e3       	ldi	r26, 0x3B	; 59
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	eb e3       	ldi	r30, 0x3B	; 59
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	48 2f       	mov	r20, r24
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	02 2e       	mov	r0, r18
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <DIO_enu_SetPinValue+0x98>
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	0a 94       	dec	r0
    2b04:	e2 f7       	brpl	.-8      	; 0x2afe <DIO_enu_SetPinValue+0x94>
    2b06:	84 2b       	or	r24, r20
    2b08:	8c 93       	st	X, r24
    2b0a:	98 c0       	rjmp	.+304    	; 0x2c3c <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    2b0c:	ab e3       	ldi	r26, 0x3B	; 59
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	eb e3       	ldi	r30, 0x3B	; 59
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	48 2f       	mov	r20, r24
    2b18:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	02 2e       	mov	r0, r18
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <DIO_enu_SetPinValue+0xc0>
    2b26:	88 0f       	add	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	0a 94       	dec	r0
    2b2c:	e2 f7       	brpl	.-8      	; 0x2b26 <DIO_enu_SetPinValue+0xbc>
    2b2e:	80 95       	com	r24
    2b30:	84 23       	and	r24, r20
    2b32:	8c 93       	st	X, r24
    2b34:	83 c0       	rjmp	.+262    	; 0x2c3c <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    2b36:	8c 81       	ldd	r24, Y+4	; 0x04
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	a1 f4       	brne	.+40     	; 0x2b64 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    2b3c:	a8 e3       	ldi	r26, 0x38	; 56
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	e8 e3       	ldi	r30, 0x38	; 56
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	48 2f       	mov	r20, r24
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	02 2e       	mov	r0, r18
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <DIO_enu_SetPinValue+0xf0>
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	0a 94       	dec	r0
    2b5c:	e2 f7       	brpl	.-8      	; 0x2b56 <DIO_enu_SetPinValue+0xec>
    2b5e:	84 2b       	or	r24, r20
    2b60:	8c 93       	st	X, r24
    2b62:	6c c0       	rjmp	.+216    	; 0x2c3c <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    2b64:	a8 e3       	ldi	r26, 0x38	; 56
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e8 e3       	ldi	r30, 0x38	; 56
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	48 2f       	mov	r20, r24
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	28 2f       	mov	r18, r24
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	02 2e       	mov	r0, r18
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <DIO_enu_SetPinValue+0x118>
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	0a 94       	dec	r0
    2b84:	e2 f7       	brpl	.-8      	; 0x2b7e <DIO_enu_SetPinValue+0x114>
    2b86:	80 95       	com	r24
    2b88:	84 23       	and	r24, r20
    2b8a:	8c 93       	st	X, r24
    2b8c:	57 c0       	rjmp	.+174    	; 0x2c3c <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    2b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b90:	81 30       	cpi	r24, 0x01	; 1
    2b92:	a1 f4       	brne	.+40     	; 0x2bbc <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    2b94:	a5 e3       	ldi	r26, 0x35	; 53
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e5 e3       	ldi	r30, 0x35	; 53
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	48 2f       	mov	r20, r24
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	02 2e       	mov	r0, r18
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <DIO_enu_SetPinValue+0x148>
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	0a 94       	dec	r0
    2bb4:	e2 f7       	brpl	.-8      	; 0x2bae <DIO_enu_SetPinValue+0x144>
    2bb6:	84 2b       	or	r24, r20
    2bb8:	8c 93       	st	X, r24
    2bba:	40 c0       	rjmp	.+128    	; 0x2c3c <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    2bbc:	a5 e3       	ldi	r26, 0x35	; 53
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e5 e3       	ldi	r30, 0x35	; 53
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	48 2f       	mov	r20, r24
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	02 2e       	mov	r0, r18
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <DIO_enu_SetPinValue+0x170>
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	0a 94       	dec	r0
    2bdc:	e2 f7       	brpl	.-8      	; 0x2bd6 <DIO_enu_SetPinValue+0x16c>
    2bde:	80 95       	com	r24
    2be0:	84 23       	and	r24, r20
    2be2:	8c 93       	st	X, r24
    2be4:	2b c0       	rjmp	.+86     	; 0x2c3c <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    2be6:	8c 81       	ldd	r24, Y+4	; 0x04
    2be8:	81 30       	cpi	r24, 0x01	; 1
    2bea:	a1 f4       	brne	.+40     	; 0x2c14 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    2bec:	a2 e3       	ldi	r26, 0x32	; 50
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e2 e3       	ldi	r30, 0x32	; 50
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	48 2f       	mov	r20, r24
    2bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	02 2e       	mov	r0, r18
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <DIO_enu_SetPinValue+0x1a0>
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	0a 94       	dec	r0
    2c0c:	e2 f7       	brpl	.-8      	; 0x2c06 <DIO_enu_SetPinValue+0x19c>
    2c0e:	84 2b       	or	r24, r20
    2c10:	8c 93       	st	X, r24
    2c12:	14 c0       	rjmp	.+40     	; 0x2c3c <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    2c14:	a2 e3       	ldi	r26, 0x32	; 50
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e2 e3       	ldi	r30, 0x32	; 50
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	48 2f       	mov	r20, r24
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	28 2f       	mov	r18, r24
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	02 2e       	mov	r0, r18
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <DIO_enu_SetPinValue+0x1c8>
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	0a 94       	dec	r0
    2c34:	e2 f7       	brpl	.-8      	; 0x2c2e <DIO_enu_SetPinValue+0x1c4>
    2c36:	80 95       	com	r24
    2c38:	84 23       	and	r24, r20
    2c3a:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2c3c:	19 82       	std	Y+1, r1	; 0x01
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2c40:	82 e0       	ldi	r24, 0x02	; 2
    2c42:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c46:	26 96       	adiw	r28, 0x06	; 6
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <DIO_enu_TogglePinValue+0x6>
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <DIO_enu_TogglePinValue+0x8>
    2c60:	0f 92       	push	r0
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	8a 83       	std	Y+2, r24	; 0x02
    2c68:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	84 30       	cpi	r24, 0x04	; 4
    2c72:	08 f0       	brcs	.+2      	; 0x2c76 <DIO_enu_TogglePinValue+0x1e>
    2c74:	73 c0       	rjmp	.+230    	; 0x2d5c <DIO_enu_TogglePinValue+0x104>
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	88 30       	cpi	r24, 0x08	; 8
    2c7a:	08 f0       	brcs	.+2      	; 0x2c7e <DIO_enu_TogglePinValue+0x26>
    2c7c:	6f c0       	rjmp	.+222    	; 0x2d5c <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    2c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c80:	28 2f       	mov	r18, r24
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	3d 83       	std	Y+5, r19	; 0x05
    2c86:	2c 83       	std	Y+4, r18	; 0x04
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8c:	81 30       	cpi	r24, 0x01	; 1
    2c8e:	91 05       	cpc	r25, r1
    2c90:	49 f1       	breq	.+82     	; 0x2ce4 <DIO_enu_TogglePinValue+0x8c>
    2c92:	2c 81       	ldd	r18, Y+4	; 0x04
    2c94:	3d 81       	ldd	r19, Y+5	; 0x05
    2c96:	22 30       	cpi	r18, 0x02	; 2
    2c98:	31 05       	cpc	r19, r1
    2c9a:	2c f4       	brge	.+10     	; 0x2ca6 <DIO_enu_TogglePinValue+0x4e>
    2c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	61 f0       	breq	.+24     	; 0x2cbc <DIO_enu_TogglePinValue+0x64>
    2ca4:	5a c0       	rjmp	.+180    	; 0x2d5a <DIO_enu_TogglePinValue+0x102>
    2ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    2caa:	22 30       	cpi	r18, 0x02	; 2
    2cac:	31 05       	cpc	r19, r1
    2cae:	71 f1       	breq	.+92     	; 0x2d0c <DIO_enu_TogglePinValue+0xb4>
    2cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb4:	83 30       	cpi	r24, 0x03	; 3
    2cb6:	91 05       	cpc	r25, r1
    2cb8:	e9 f1       	breq	.+122    	; 0x2d34 <DIO_enu_TogglePinValue+0xdc>
    2cba:	4f c0       	rjmp	.+158    	; 0x2d5a <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    2cbc:	ab e3       	ldi	r26, 0x3B	; 59
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	eb e3       	ldi	r30, 0x3B	; 59
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	48 2f       	mov	r20, r24
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	28 2f       	mov	r18, r24
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	02 2e       	mov	r0, r18
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <DIO_enu_TogglePinValue+0x82>
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	0a 94       	dec	r0
    2cdc:	e2 f7       	brpl	.-8      	; 0x2cd6 <DIO_enu_TogglePinValue+0x7e>
    2cde:	84 27       	eor	r24, r20
    2ce0:	8c 93       	st	X, r24
    2ce2:	3b c0       	rjmp	.+118    	; 0x2d5a <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    2ce4:	a8 e3       	ldi	r26, 0x38	; 56
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	e8 e3       	ldi	r30, 0x38	; 56
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	48 2f       	mov	r20, r24
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	02 2e       	mov	r0, r18
    2cfc:	02 c0       	rjmp	.+4      	; 0x2d02 <DIO_enu_TogglePinValue+0xaa>
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	0a 94       	dec	r0
    2d04:	e2 f7       	brpl	.-8      	; 0x2cfe <DIO_enu_TogglePinValue+0xa6>
    2d06:	84 27       	eor	r24, r20
    2d08:	8c 93       	st	X, r24
    2d0a:	27 c0       	rjmp	.+78     	; 0x2d5a <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    2d0c:	a5 e3       	ldi	r26, 0x35	; 53
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	e5 e3       	ldi	r30, 0x35	; 53
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	48 2f       	mov	r20, r24
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	28 2f       	mov	r18, r24
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	02 2e       	mov	r0, r18
    2d24:	02 c0       	rjmp	.+4      	; 0x2d2a <DIO_enu_TogglePinValue+0xd2>
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	0a 94       	dec	r0
    2d2c:	e2 f7       	brpl	.-8      	; 0x2d26 <DIO_enu_TogglePinValue+0xce>
    2d2e:	84 27       	eor	r24, r20
    2d30:	8c 93       	st	X, r24
    2d32:	13 c0       	rjmp	.+38     	; 0x2d5a <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    2d34:	a2 e3       	ldi	r26, 0x32	; 50
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e2 e3       	ldi	r30, 0x32	; 50
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	48 2f       	mov	r20, r24
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	28 2f       	mov	r18, r24
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	02 2e       	mov	r0, r18
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <DIO_enu_TogglePinValue+0xfa>
    2d4e:	88 0f       	add	r24, r24
    2d50:	99 1f       	adc	r25, r25
    2d52:	0a 94       	dec	r0
    2d54:	e2 f7       	brpl	.-8      	; 0x2d4e <DIO_enu_TogglePinValue+0xf6>
    2d56:	84 27       	eor	r24, r20
    2d58:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2d5a:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	27 97       	sbiw	r28, 0x07	; 7
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	8a 83       	std	Y+2, r24	; 0x02
    2d84:	6b 83       	std	Y+3, r22	; 0x03
    2d86:	5d 83       	std	Y+5, r21	; 0x05
    2d88:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    2d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d90:	9d 81       	ldd	r25, Y+5	; 0x05
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <DIO_enu_GetPinValue+0x2a>
    2d96:	7d c0       	rjmp	.+250    	; 0x2e92 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    2d98:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9a:	84 30       	cpi	r24, 0x04	; 4
    2d9c:	08 f0       	brcs	.+2      	; 0x2da0 <DIO_enu_GetPinValue+0x32>
    2d9e:	76 c0       	rjmp	.+236    	; 0x2e8c <DIO_enu_GetPinValue+0x11e>
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	88 30       	cpi	r24, 0x08	; 8
    2da4:	08 f0       	brcs	.+2      	; 0x2da8 <DIO_enu_GetPinValue+0x3a>
    2da6:	72 c0       	rjmp	.+228    	; 0x2e8c <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    2da8:	8a 81       	ldd	r24, Y+2	; 0x02
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	3f 83       	std	Y+7, r19	; 0x07
    2db0:	2e 83       	std	Y+6, r18	; 0x06
    2db2:	4e 81       	ldd	r20, Y+6	; 0x06
    2db4:	5f 81       	ldd	r21, Y+7	; 0x07
    2db6:	41 30       	cpi	r20, 0x01	; 1
    2db8:	51 05       	cpc	r21, r1
    2dba:	59 f1       	breq	.+86     	; 0x2e12 <DIO_enu_GetPinValue+0xa4>
    2dbc:	8e 81       	ldd	r24, Y+6	; 0x06
    2dbe:	9f 81       	ldd	r25, Y+7	; 0x07
    2dc0:	82 30       	cpi	r24, 0x02	; 2
    2dc2:	91 05       	cpc	r25, r1
    2dc4:	34 f4       	brge	.+12     	; 0x2dd2 <DIO_enu_GetPinValue+0x64>
    2dc6:	2e 81       	ldd	r18, Y+6	; 0x06
    2dc8:	3f 81       	ldd	r19, Y+7	; 0x07
    2dca:	21 15       	cp	r18, r1
    2dcc:	31 05       	cpc	r19, r1
    2dce:	69 f0       	breq	.+26     	; 0x2dea <DIO_enu_GetPinValue+0x7c>
    2dd0:	5b c0       	rjmp	.+182    	; 0x2e88 <DIO_enu_GetPinValue+0x11a>
    2dd2:	4e 81       	ldd	r20, Y+6	; 0x06
    2dd4:	5f 81       	ldd	r21, Y+7	; 0x07
    2dd6:	42 30       	cpi	r20, 0x02	; 2
    2dd8:	51 05       	cpc	r21, r1
    2dda:	79 f1       	breq	.+94     	; 0x2e3a <DIO_enu_GetPinValue+0xcc>
    2ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    2dde:	9f 81       	ldd	r25, Y+7	; 0x07
    2de0:	83 30       	cpi	r24, 0x03	; 3
    2de2:	91 05       	cpc	r25, r1
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <DIO_enu_GetPinValue+0x7a>
    2de6:	3d c0       	rjmp	.+122    	; 0x2e62 <DIO_enu_GetPinValue+0xf4>
    2de8:	4f c0       	rjmp	.+158    	; 0x2e88 <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    2dea:	e9 e3       	ldi	r30, 0x39	; 57
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	28 2f       	mov	r18, r24
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	88 2f       	mov	r24, r24
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	a9 01       	movw	r20, r18
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <DIO_enu_GetPinValue+0x94>
    2dfe:	55 95       	asr	r21
    2e00:	47 95       	ror	r20
    2e02:	8a 95       	dec	r24
    2e04:	e2 f7       	brpl	.-8      	; 0x2dfe <DIO_enu_GetPinValue+0x90>
    2e06:	ca 01       	movw	r24, r20
    2e08:	81 70       	andi	r24, 0x01	; 1
    2e0a:	ec 81       	ldd	r30, Y+4	; 0x04
    2e0c:	fd 81       	ldd	r31, Y+5	; 0x05
    2e0e:	80 83       	st	Z, r24
    2e10:	3b c0       	rjmp	.+118    	; 0x2e88 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    2e12:	e6 e3       	ldi	r30, 0x36	; 54
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1e:	88 2f       	mov	r24, r24
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	a9 01       	movw	r20, r18
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <DIO_enu_GetPinValue+0xbc>
    2e26:	55 95       	asr	r21
    2e28:	47 95       	ror	r20
    2e2a:	8a 95       	dec	r24
    2e2c:	e2 f7       	brpl	.-8      	; 0x2e26 <DIO_enu_GetPinValue+0xb8>
    2e2e:	ca 01       	movw	r24, r20
    2e30:	81 70       	andi	r24, 0x01	; 1
    2e32:	ec 81       	ldd	r30, Y+4	; 0x04
    2e34:	fd 81       	ldd	r31, Y+5	; 0x05
    2e36:	80 83       	st	Z, r24
    2e38:	27 c0       	rjmp	.+78     	; 0x2e88 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    2e3a:	e3 e3       	ldi	r30, 0x33	; 51
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	28 2f       	mov	r18, r24
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	8b 81       	ldd	r24, Y+3	; 0x03
    2e46:	88 2f       	mov	r24, r24
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	a9 01       	movw	r20, r18
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <DIO_enu_GetPinValue+0xe4>
    2e4e:	55 95       	asr	r21
    2e50:	47 95       	ror	r20
    2e52:	8a 95       	dec	r24
    2e54:	e2 f7       	brpl	.-8      	; 0x2e4e <DIO_enu_GetPinValue+0xe0>
    2e56:	ca 01       	movw	r24, r20
    2e58:	81 70       	andi	r24, 0x01	; 1
    2e5a:	ec 81       	ldd	r30, Y+4	; 0x04
    2e5c:	fd 81       	ldd	r31, Y+5	; 0x05
    2e5e:	80 83       	st	Z, r24
    2e60:	13 c0       	rjmp	.+38     	; 0x2e88 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    2e62:	e0 e3       	ldi	r30, 0x30	; 48
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	28 2f       	mov	r18, r24
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	88 2f       	mov	r24, r24
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	a9 01       	movw	r20, r18
    2e74:	02 c0       	rjmp	.+4      	; 0x2e7a <DIO_enu_GetPinValue+0x10c>
    2e76:	55 95       	asr	r21
    2e78:	47 95       	ror	r20
    2e7a:	8a 95       	dec	r24
    2e7c:	e2 f7       	brpl	.-8      	; 0x2e76 <DIO_enu_GetPinValue+0x108>
    2e7e:	ca 01       	movw	r24, r20
    2e80:	81 70       	andi	r24, 0x01	; 1
    2e82:	ec 81       	ldd	r30, Y+4	; 0x04
    2e84:	fd 81       	ldd	r31, Y+5	; 0x05
    2e86:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    2e88:	19 82       	std	Y+1, r1	; 0x01
    2e8a:	05 c0       	rjmp	.+10     	; 0x2e96 <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2e8c:	82 e0       	ldi	r24, 0x02	; 2
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	02 c0       	rjmp	.+4      	; 0x2e96 <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2e92:	83 e0       	ldi	r24, 0x03	; 3
    2e94:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e98:	27 96       	adiw	r28, 0x07	; 7
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	08 95       	ret

00002eaa <ADC_enu_Initialization>:
static void* pvid_ISRParameters = NULL;

//APIs implementation

extern ErrorState_t ADC_enu_Initialization(void)
{
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	0f 92       	push	r0
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	89 83       	std	Y+1, r24	; 0x01

    //Bits contain 00
    ADMUX &= ~(3 << ADMUX_REFS0 );
    2eb8:	a7 e2       	ldi	r26, 0x27	; 39
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e7 e2       	ldi	r30, 0x27	; 39
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	8f 73       	andi	r24, 0x3F	; 63
    2ec4:	8c 93       	st	X, r24
        //bITS ALREADY CONTAIN 00  
    
    #elif ADC_V_REFERENCE_SOURCE == ADC_AVCC
       
        //Bits contain 01
        ADMUX |= (1 < ADMUX_REFS0);
    2ec6:	a7 e2       	ldi	r26, 0x27	; 39
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e7 e2       	ldi	r30, 0x27	; 39
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	81 60       	ori	r24, 0x01	; 1
    2ed2:	8c 93       	st	X, r24


    //Handling Data adjustment direction
    #if  ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED
        //Setting ADLAR bit
        ADMUX |= ( 1 << ADMUX_ADLAR);
    2ed4:	a7 e2       	ldi	r26, 0x27	; 39
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e7 e2       	ldi	r30, 0x27	; 39
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	80 81       	ld	r24, Z
    2ede:	80 62       	ori	r24, 0x20	; 32
    2ee0:	8c 93       	st	X, r24
        ADCSRA &= ~( 1 << ADCSRA_ADATE);

    #elif  ADC_TRIGGER_SOURCE >= ADC_FREE_RUNNING &&  ADC_TRIGGER_SOURCE <= ADC_TIMER1_CAPTURE_EVENT

        //Clearing ADTS bits
        SFIOR &= (0X1F);
    2ee2:	a0 e5       	ldi	r26, 0x50	; 80
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e0 e5       	ldi	r30, 0x50	; 80
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	8f 71       	andi	r24, 0x1F	; 31
    2eee:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (ADC_TRIGGER_SOURCE << SFIOR_ADTS0); 
    2ef0:	a0 e5       	ldi	r26, 0x50	; 80
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	e0 e5       	ldi	r30, 0x50	; 80
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	8c 93       	st	X, r24
        
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    2efc:	a6 e2       	ldi	r26, 0x26	; 38
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	e6 e2       	ldi	r30, 0x26	; 38
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	80 62       	ori	r24, 0x20	; 32
    2f08:	8c 93       	st	X, r24
    #endif


    //Handling Interrupt Event Status (PIE)
    #if ADC_INT_EVENT_STATUS == ADC_INT_ENABLE
        ADCSRA |= ( 1 << ADCSRA_ADIE); //Bit contains 1 
    2f0a:	a6 e2       	ldi	r26, 0x26	; 38
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e6 e2       	ldi	r30, 0x26	; 38
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	88 60       	ori	r24, 0x08	; 8
    2f16:	8c 93       	st	X, r24
    #endif


    //Handling ADC clock speed
    //Clearing PS bits
    ADCSRA &= (0xF8);
    2f18:	a6 e2       	ldi	r26, 0x26	; 38
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e6 e2       	ldi	r30, 0x26	; 38
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	88 7f       	andi	r24, 0xF8	; 248
    2f24:	8c 93       	st	X, r24
    #if ADC_PS_FACTOR >= ADC_PS_2 && ADC_PS_FACTOR <= ADC_PS_128 
        
        ADCSRA |= (ADC_PS_FACTOR << ADCSRA_ADPS0);
    2f26:	a6 e2       	ldi	r26, 0x26	; 38
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e6 e2       	ldi	r30, 0x26	; 38
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	86 60       	ori	r24, 0x06	; 6
    2f32:	8c 93       	st	X, r24

    #endif


    //Handling input channels
    ADMUX &= (0xE0); //Clearing bits
    2f34:	a7 e2       	ldi	r26, 0x27	; 39
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e7 e2       	ldi	r30, 0x27	; 39
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 7e       	andi	r24, 0xE0	; 224
    2f40:	8c 93       	st	X, r24
    #if ADC_INPUT_CHANNEL >= ADC_ADC0 && ADC_INPUT_CHANNEL <= ADC_V_GND
        //Channel Selection
        ADMUX |= (ADC_INPUT_CHANNEL << ADMUX_MUX0);
    2f42:	a7 e2       	ldi	r26, 0x27	; 39
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	e7 e2       	ldi	r30, 0x27	; 39
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	8c 93       	st	X, r24

    #endif


    // /Powering ADC
    ADCSRA |= (1 << ADCSRA_ADEN );
    2f4e:	a6 e2       	ldi	r26, 0x26	; 38
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e6 e2       	ldi	r30, 0x26	; 38
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	80 68       	ori	r24, 0x80	; 128
    2f5a:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    2f5c:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag; 
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f60:	0f 90       	pop	r0
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	08 95       	ret

00002f68 <ADC_enu_ReadPolling>:

extern ErrorState_t ADC_enu_ReadPolling(u8 Copy_u8_Channel, u16* Copy_pu16_Result)
{
    2f68:	df 93       	push	r29
    2f6a:	cf 93       	push	r28
    2f6c:	00 d0       	rcall	.+0      	; 0x2f6e <ADC_enu_ReadPolling+0x6>
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <ADC_enu_ReadPolling+0x8>
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	8a 83       	std	Y+2, r24	; 0x02
    2f76:	7c 83       	std	Y+4, r23	; 0x04
    2f78:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8_Channel >= ADC_ADC0) && (Copy_u8_Channel <= ADC_V_GND))
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	80 32       	cpi	r24, 0x20	; 32
    2f82:	08 f0       	brcs	.+2      	; 0x2f86 <ADC_enu_ReadPolling+0x1e>
    2f84:	50 c0       	rjmp	.+160    	; 0x3026 <ADC_enu_ReadPolling+0xbe>
    {
        //Clearing PIF, Assuming that the ADC is in Polling mode.
        ADCSRA |= (1 << ADCSRA_ADIF);
    2f86:	a6 e2       	ldi	r26, 0x26	; 38
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e6 e2       	ldi	r30, 0x26	; 38
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	80 61       	ori	r24, 0x10	; 16
    2f92:	8c 93       	st	X, r24
        
        //Clearing MUX it
        ADMUX &= (0xE0);
    2f94:	a7 e2       	ldi	r26, 0x27	; 39
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	e7 e2       	ldi	r30, 0x27	; 39
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	80 7e       	andi	r24, 0xE0	; 224
    2fa0:	8c 93       	st	X, r24

        //Choosing channel
        ADMUX |= (Copy_u8_Channel << ADMUX_MUX0);
    2fa2:	a7 e2       	ldi	r26, 0x27	; 39
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	e7 e2       	ldi	r30, 0x27	; 39
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	90 81       	ld	r25, Z
    2fac:	8a 81       	ldd	r24, Y+2	; 0x02
    2fae:	89 2b       	or	r24, r25
    2fb0:	8c 93       	st	X, r24
       
        //Setting ADSC to start a conversion
        ADCSRA |= (1 << ADCSRA_ADSC);
    2fb2:	a6 e2       	ldi	r26, 0x26	; 38
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	e6 e2       	ldi	r30, 0x26	; 38
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	80 64       	ori	r24, 0x40	; 64
    2fbe:	8c 93       	st	X, r24

        //Waiting for ADC to raise ADIF
        while (((ADCSRA >> ADCSRA_ADIF) & 1) == False);
    2fc0:	e6 e2       	ldi	r30, 0x26	; 38
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	82 95       	swap	r24
    2fc8:	8f 70       	andi	r24, 0x0F	; 15
    2fca:	88 2f       	mov	r24, r24
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	81 70       	andi	r24, 0x01	; 1
    2fd0:	90 70       	andi	r25, 0x00	; 0
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	a9 f3       	breq	.-22     	; 0x2fc0 <ADC_enu_ReadPolling+0x58>

        
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    2fd6:	e4 e2       	ldi	r30, 0x24	; 36
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	82 95       	swap	r24
    2fde:	86 95       	lsr	r24
    2fe0:	86 95       	lsr	r24
    2fe2:	83 70       	andi	r24, 0x03	; 3
    2fe4:	88 2f       	mov	r24, r24
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    2fea:	fc 81       	ldd	r31, Y+4	; 0x04
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    2ff0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff4:	20 81       	ld	r18, Z
    2ff6:	31 81       	ldd	r19, Z+1	; 0x01
    2ff8:	e5 e2       	ldi	r30, 0x25	; 37
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	88 2f       	mov	r24, r24
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	82 2b       	or	r24, r18
    300c:	93 2b       	or	r25, r19
    300e:	eb 81       	ldd	r30, Y+3	; 0x03
    3010:	fc 81       	ldd	r31, Y+4	; 0x04
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	80 83       	st	Z, r24
            *Copy_pu16_Result |= (u16)ADCH << 8;

        #endif
   
        //Clearing PIF
        ADCSRA |= (1 << ADCSRA_ADIF);
    3016:	a6 e2       	ldi	r26, 0x26	; 38
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e6 e2       	ldi	r30, 0x26	; 38
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	80 61       	ori	r24, 0x10	; 16
    3022:	8c 93       	st	X, r24
    3024:	02 c0       	rjmp	.+4      	; 0x302a <ADC_enu_ReadPolling+0xc2>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3026:	82 e0       	ldi	r24, 0x02	; 2
    3028:	89 83       	std	Y+1, r24	; 0x01
    }


    Local_u8_ErrorFlag = ES_OK;
    302a:	19 82       	std	Y+1, r1	; 0x01
    

    


    return Local_u8_ErrorFlag;
    302c:	89 81       	ldd	r24, Y+1	; 0x01
}
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <ADC_enu_StartConversion>:

extern ErrorState_t ADC_enu_StartConversion(void)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	0f 92       	push	r0
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 <<ADCSRA_ADSC);
    304a:	a6 e2       	ldi	r26, 0x26	; 38
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	e6 e2       	ldi	r30, 0x26	; 38
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	80 64       	ori	r24, 0x40	; 64
    3056:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3058:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    305a:	89 81       	ldd	r24, Y+1	; 0x01
}
    305c:	0f 90       	pop	r0
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <ADC_enu_SetTriggerringSource>:

extern ErrorState_t ADC_enu_SetTriggerringSource(u8 Copy_u8_TriggeringSource)
{
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	00 d0       	rcall	.+0      	; 0x306a <ADC_enu_SetTriggerringSource+0x6>
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_u8_TriggeringSource == ADC_SINGLE_CONVERSION)
    3074:	8a 81       	ldd	r24, Y+2	; 0x02
    3076:	88 30       	cpi	r24, 0x08	; 8
    3078:	49 f4       	brne	.+18     	; 0x308c <ADC_enu_SetTriggerringSource+0x28>
    {
        //Clearing ADATE bit
        ADCSRA &= ~(1 << ADCSRA_ADATE);
    307a:	a6 e2       	ldi	r26, 0x26	; 38
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	e6 e2       	ldi	r30, 0x26	; 38
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	8f 7d       	andi	r24, 0xDF	; 223
    3086:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    3088:	19 82       	std	Y+1, r1	; 0x01
    308a:	28 c0       	rjmp	.+80     	; 0x30dc <ADC_enu_SetTriggerringSource+0x78>
    }
    else if((Copy_u8_TriggeringSource >= ADC_FREE_RUNNING) && (Copy_u8_TriggeringSource <= ADC_TIMER1_CAPTURE_EVENT))
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	88 30       	cpi	r24, 0x08	; 8
    3090:	18 f5       	brcc	.+70     	; 0x30d8 <ADC_enu_SetTriggerringSource+0x74>
    {
        //Clearing ADTS bits
        SFIOR &= ~ (1 << SFIOR_ADTS0);
    3092:	a0 e5       	ldi	r26, 0x50	; 80
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	e0 e5       	ldi	r30, 0x50	; 80
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	8f 7d       	andi	r24, 0xDF	; 223
    309e:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (Copy_u8_TriggeringSource << SFIOR_ADTS0);
    30a0:	a0 e5       	ldi	r26, 0x50	; 80
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	e0 e5       	ldi	r30, 0x50	; 80
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	28 2f       	mov	r18, r24
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	88 2f       	mov	r24, r24
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	88 0f       	add	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	82 95       	swap	r24
    30b8:	92 95       	swap	r25
    30ba:	90 7f       	andi	r25, 0xF0	; 240
    30bc:	98 27       	eor	r25, r24
    30be:	80 7f       	andi	r24, 0xF0	; 240
    30c0:	98 27       	eor	r25, r24
    30c2:	82 2b       	or	r24, r18
    30c4:	8c 93       	st	X, r24

        //Setting ADATE bit
        ADCSRA |= (1 << ADCSRA_ADATE);
    30c6:	a6 e2       	ldi	r26, 0x26	; 38
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	e6 e2       	ldi	r30, 0x26	; 38
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	80 62       	ori	r24, 0x20	; 32
    30d2:	8c 93       	st	X, r24

        Local_u8_ErrorFlag =ES_OK;
    30d4:	19 82       	std	Y+1, r1	; 0x01
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <ADC_enu_SetTriggerringSource+0x78>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    30d8:	82 e0       	ldi	r24, 0x02	; 2
    30da:	89 83       	std	Y+1, r24	; 0x01
    }
        
        

    return Local_u8_ErrorFlag;
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    30de:	0f 90       	pop	r0
    30e0:	0f 90       	pop	r0
    30e2:	cf 91       	pop	r28
    30e4:	df 91       	pop	r29
    30e6:	08 95       	ret

000030e8 <ADC_enu_ChangePrescalerFactor>:

extern ErrorState_t ADC_enu_ChangePrescalerFactor(u8 Copy_u8_DivisonFactor)
{
    30e8:	df 93       	push	r29
    30ea:	cf 93       	push	r28
    30ec:	00 d0       	rcall	.+0      	; 0x30ee <ADC_enu_ChangePrescalerFactor+0x6>
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_DivisonFactor >= ADC_PS_2) && (Copy_u8_DivisonFactor <= ADC_PS_128))
    30f8:	8a 81       	ldd	r24, Y+2	; 0x02
    30fa:	88 23       	and	r24, r24
    30fc:	a1 f0       	breq	.+40     	; 0x3126 <ADC_enu_ChangePrescalerFactor+0x3e>
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	88 30       	cpi	r24, 0x08	; 8
    3102:	88 f4       	brcc	.+34     	; 0x3126 <ADC_enu_ChangePrescalerFactor+0x3e>
    {
        //Clearins PS bits
        ADCSRA &= ~ (7 << ADCSRA_ADPS0);
    3104:	a6 e2       	ldi	r26, 0x26	; 38
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e6 e2       	ldi	r30, 0x26	; 38
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	88 7f       	andi	r24, 0xF8	; 248
    3110:	8c 93       	st	X, r24

        //Choosing divisuon factor
        ADCSRA |=  (Copy_u8_DivisonFactor << ADCSRA_ADPS0);
    3112:	a6 e2       	ldi	r26, 0x26	; 38
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	e6 e2       	ldi	r30, 0x26	; 38
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	90 81       	ld	r25, Z
    311c:	8a 81       	ldd	r24, Y+2	; 0x02
    311e:	89 2b       	or	r24, r25
    3120:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    3122:	19 82       	std	Y+1, r1	; 0x01
    3124:	02 c0       	rjmp	.+4      	; 0x312a <ADC_enu_ChangePrescalerFactor+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3126:	82 e0       	ldi	r24, 0x02	; 2
    3128:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    312a:	89 81       	ldd	r24, Y+1	; 0x01
}
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	cf 91       	pop	r28
    3132:	df 91       	pop	r29
    3134:	08 95       	ret

00003136 <ADC_enu_ReadADCH>:

extern ErrorState_t ADC_enu_ReadADCH(u16* Copy_pu16_Result)
{
    3136:	df 93       	push	r29
    3138:	cf 93       	push	r28
    313a:	00 d0       	rcall	.+0      	; 0x313c <ADC_enu_ReadADCH+0x6>
    313c:	0f 92       	push	r0
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	9b 83       	std	Y+3, r25	; 0x03
    3144:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	89 83       	std	Y+1, r24	; 0x01


    if(Copy_pu16_Result)
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	9b 81       	ldd	r25, Y+3	; 0x03
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	79 f0       	breq	.+30     	; 0x3170 <ADC_enu_ReadADCH+0x3a>
            
            *Copy_pu16_Result = (u16)ADCH << 8;
        
        #else ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED

                *Copy_pu16_Result = (u16)ADCH << 2;
    3152:	e5 e2       	ldi	r30, 0x25	; 37
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 81       	ld	r24, Z
    3158:	88 2f       	mov	r24, r24
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	88 0f       	add	r24, r24
    315e:	99 1f       	adc	r25, r25
    3160:	88 0f       	add	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	ea 81       	ldd	r30, Y+2	; 0x02
    3166:	fb 81       	ldd	r31, Y+3	; 0x03
    3168:	91 83       	std	Z+1, r25	; 0x01
    316a:	80 83       	st	Z, r24

        #endif

        Local_u8_ErrorFlag = ES_OK;
    316c:	19 82       	std	Y+1, r1	; 0x01
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <ADC_enu_ReadADCH+0x3e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3170:	83 e0       	ldi	r24, 0x03	; 3
    3172:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    3174:	89 81       	ldd	r24, Y+1	; 0x01
}
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret

00003182 <ADC_enu_ReadADCL>:

extern ErrorState_t ADC_enu_ReadADCL(u16* Copy_pu16_Result)
{
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	00 d0       	rcall	.+0      	; 0x3188 <ADC_enu_ReadADCL+0x6>
    3188:	0f 92       	push	r0
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	9b 83       	std	Y+3, r25	; 0x03
    3190:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    3196:	8a 81       	ldd	r24, Y+2	; 0x02
    3198:	9b 81       	ldd	r25, Y+3	; 0x03
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	11 f0       	breq	.+4      	; 0x31a2 <ADC_enu_ReadADCL+0x20>

            

        #endif

        Local_u8_ErrorFlag = ES_OK;
    319e:	19 82       	std	Y+1, r1	; 0x01
    31a0:	02 c0       	rjmp	.+4      	; 0x31a6 <ADC_enu_ReadADCL+0x24>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    31a2:	83 e0       	ldi	r24, 0x03	; 3
    31a4:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	08 95       	ret

000031b4 <ADC_enu_ReadData>:

extern ErrorState_t ADC_enu_ReadData(u16* Copy_pu16_Result)
{
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <ADC_enu_ReadData+0x6>
    31ba:	0f 92       	push	r0
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	9b 83       	std	Y+3, r25	; 0x03
    31c2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    31c8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ca:	9b 81       	ldd	r25, Y+3	; 0x03
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	11 f1       	breq	.+68     	; 0x3214 <ADC_enu_ReadData+0x60>
    {
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    31d0:	e4 e2       	ldi	r30, 0x24	; 36
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	82 95       	swap	r24
    31d8:	86 95       	lsr	r24
    31da:	86 95       	lsr	r24
    31dc:	83 70       	andi	r24, 0x03	; 3
    31de:	88 2f       	mov	r24, r24
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	ea 81       	ldd	r30, Y+2	; 0x02
    31e4:	fb 81       	ldd	r31, Y+3	; 0x03
    31e6:	91 83       	std	Z+1, r25	; 0x01
    31e8:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    31ea:	ea 81       	ldd	r30, Y+2	; 0x02
    31ec:	fb 81       	ldd	r31, Y+3	; 0x03
    31ee:	20 81       	ld	r18, Z
    31f0:	31 81       	ldd	r19, Z+1	; 0x01
    31f2:	e5 e2       	ldi	r30, 0x25	; 37
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	88 2f       	mov	r24, r24
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	82 2b       	or	r24, r18
    3206:	93 2b       	or	r25, r19
    3208:	ea 81       	ldd	r30, Y+2	; 0x02
    320a:	fb 81       	ldd	r31, Y+3	; 0x03
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24

        #endif

        

        Local_u8_ErrorFlag = ES_OK;
    3210:	19 82       	std	Y+1, r1	; 0x01
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <ADC_enu_ReadData+0x64>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3214:	83 e0       	ldi	r24, 0x03	; 3
    3216:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    3218:	89 81       	ldd	r24, Y+1	; 0x01
}
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	cf 91       	pop	r28
    3222:	df 91       	pop	r29
    3224:	08 95       	ret

00003226 <ADC_enu_EnableINT>:

extern ErrorState_t ADC_enu_EnableINT(void)
{
    3226:	df 93       	push	r29
    3228:	cf 93       	push	r28
    322a:	0f 92       	push	r0
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    
    u8 Local_u8_ErrorFlag = ES_NOK;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADIE);
    3234:	a6 e2       	ldi	r26, 0x26	; 38
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	e6 e2       	ldi	r30, 0x26	; 38
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	88 60       	ori	r24, 0x08	; 8
    3240:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3242:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    3244:	89 81       	ldd	r24, Y+1	; 0x01
}
    3246:	0f 90       	pop	r0
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <ADC_enu_DisableINT>:

extern ErrorState_t ADC_enu_DisableINT(void)
{
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	0f 92       	push	r0
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADIE);
    325c:	a6 e2       	ldi	r26, 0x26	; 38
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	e6 e2       	ldi	r30, 0x26	; 38
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	87 7f       	andi	r24, 0xF7	; 247
    3268:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    326a:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    326c:	89 81       	ldd	r24, Y+1	; 0x01
}
    326e:	0f 90       	pop	r0
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	08 95       	ret

00003276 <ADC_enu_EnableADC>:

extern ErrorState_t ADC_enu_EnableADC(void)
{
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	0f 92       	push	r0
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADEN);
    3284:	a6 e2       	ldi	r26, 0x26	; 38
    3286:	b0 e0       	ldi	r27, 0x00	; 0
    3288:	e6 e2       	ldi	r30, 0x26	; 38
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	80 68       	ori	r24, 0x80	; 128
    3290:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3292:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    3294:	89 81       	ldd	r24, Y+1	; 0x01

}
    3296:	0f 90       	pop	r0
    3298:	cf 91       	pop	r28
    329a:	df 91       	pop	r29
    329c:	08 95       	ret

0000329e <ADC_enu_DisableADC>:

extern ErrorState_t ADC_enu_DisableADC(void)
{
    329e:	df 93       	push	r29
    32a0:	cf 93       	push	r28
    32a2:	0f 92       	push	r0
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADEN);
    32ac:	a6 e2       	ldi	r26, 0x26	; 38
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	e6 e2       	ldi	r30, 0x26	; 38
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	8f 77       	andi	r24, 0x7F	; 127
    32b8:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    32ba:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    32bc:	89 81       	ldd	r24, Y+1	; 0x01

}
    32be:	0f 90       	pop	r0
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <ADC_enu_SetCallBack>:

extern ErrorState_t ADC_enu_SetCallBack(void (*Copy_pfun_AppFunction)(void), void* Copy_u8_Parameters)
{
    32c6:	df 93       	push	r29
    32c8:	cf 93       	push	r28
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <ADC_enu_SetCallBack+0x6>
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <ADC_enu_SetCallBack+0x8>
    32ce:	0f 92       	push	r0
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
    32d4:	9b 83       	std	Y+3, r25	; 0x03
    32d6:	8a 83       	std	Y+2, r24	; 0x02
    32d8:	7d 83       	std	Y+5, r23	; 0x05
    32da:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    32e0:	8a 81       	ldd	r24, Y+2	; 0x02
    32e2:	9b 81       	ldd	r25, Y+3	; 0x03
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	69 f0       	breq	.+26     	; 0x3302 <ADC_enu_SetCallBack+0x3c>
    {
        pfun_ISRPointer = Copy_pfun_AppFunction;
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	9b 81       	ldd	r25, Y+3	; 0x03
    32ec:	90 93 d1 01 	sts	0x01D1, r25
    32f0:	80 93 d0 01 	sts	0x01D0, r24

        pvid_ISRParameters = Copy_u8_Parameters;
    32f4:	8c 81       	ldd	r24, Y+4	; 0x04
    32f6:	9d 81       	ldd	r25, Y+5	; 0x05
    32f8:	90 93 d3 01 	sts	0x01D3, r25
    32fc:	80 93 d2 01 	sts	0x01D2, r24
        
        Local_u8_ErrorFlag = ES_OK;
    3300:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_ErrorFlag;
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	cf 91       	pop	r28
    3310:	df 91       	pop	r29
    3312:	08 95       	ret

00003314 <__vector_16>:

//ISR functions

void __vector_16 (void)__attribute__((signal));
void __vector_16 (void)
{
    3314:	1f 92       	push	r1
    3316:	0f 92       	push	r0
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	0f 92       	push	r0
    331c:	11 24       	eor	r1, r1
    331e:	2f 93       	push	r18
    3320:	3f 93       	push	r19
    3322:	4f 93       	push	r20
    3324:	5f 93       	push	r21
    3326:	6f 93       	push	r22
    3328:	7f 93       	push	r23
    332a:	8f 93       	push	r24
    332c:	9f 93       	push	r25
    332e:	af 93       	push	r26
    3330:	bf 93       	push	r27
    3332:	ef 93       	push	r30
    3334:	ff 93       	push	r31
    3336:	df 93       	push	r29
    3338:	cf 93       	push	r28
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    if (pfun_ISRPointer != NULL)
    333e:	80 91 d0 01 	lds	r24, 0x01D0
    3342:	90 91 d1 01 	lds	r25, 0x01D1
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	49 f0       	breq	.+18     	; 0x335c <__vector_16+0x48>
    {
        pfun_ISRPointer (pvid_ISRParameters);
    334a:	e0 91 d0 01 	lds	r30, 0x01D0
    334e:	f0 91 d1 01 	lds	r31, 0x01D1
    3352:	80 91 d2 01 	lds	r24, 0x01D2
    3356:	90 91 d3 01 	lds	r25, 0x01D3
    335a:	09 95       	icall
    }
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	ff 91       	pop	r31
    3362:	ef 91       	pop	r30
    3364:	bf 91       	pop	r27
    3366:	af 91       	pop	r26
    3368:	9f 91       	pop	r25
    336a:	8f 91       	pop	r24
    336c:	7f 91       	pop	r23
    336e:	6f 91       	pop	r22
    3370:	5f 91       	pop	r21
    3372:	4f 91       	pop	r20
    3374:	3f 91       	pop	r19
    3376:	2f 91       	pop	r18
    3378:	0f 90       	pop	r0
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	0f 90       	pop	r0
    337e:	1f 90       	pop	r1
    3380:	18 95       	reti

00003382 <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	00 d0       	rcall	.+0      	; 0x3388 <SW_enu_Initialization+0x6>
    3388:	00 d0       	rcall	.+0      	; 0x338a <SW_enu_Initialization+0x8>
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
    338e:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};
    3390:	1b 82       	std	Y+3, r1	; 0x03
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	8c 83       	std	Y+4, r24	; 0x04

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    3396:	19 82       	std	Y+1, r1	; 0x01
    3398:	53 c0       	rjmp	.+166    	; 0x3440 <SW_enu_Initialization+0xbe>
    {
        
       Local_au8_ErrorStates[0] = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	c9 01       	movw	r24, r18
    33a2:	88 0f       	add	r24, r24
    33a4:	99 1f       	adc	r25, r25
    33a6:	82 0f       	add	r24, r18
    33a8:	93 1f       	adc	r25, r19
    33aa:	fc 01       	movw	r30, r24
    33ac:	ed 58       	subi	r30, 0x8D	; 141
    33ae:	fe 4f       	sbci	r31, 0xFE	; 254
    33b0:	40 81       	ld	r20, Z
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	28 2f       	mov	r18, r24
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	c9 01       	movw	r24, r18
    33ba:	88 0f       	add	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	82 0f       	add	r24, r18
    33c0:	93 1f       	adc	r25, r19
    33c2:	fc 01       	movw	r30, r24
    33c4:	ec 58       	subi	r30, 0x8C	; 140
    33c6:	fe 4f       	sbci	r31, 0xFE	; 254
    33c8:	90 81       	ld	r25, Z
    33ca:	84 2f       	mov	r24, r20
    33cc:	69 2f       	mov	r22, r25
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
    33d4:	8b 83       	std	Y+3, r24	; 0x03

       Local_au8_ErrorStates[1] = DIO_enu_SetPinState(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	28 2f       	mov	r18, r24
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	c9 01       	movw	r24, r18
    33de:	88 0f       	add	r24, r24
    33e0:	99 1f       	adc	r25, r25
    33e2:	82 0f       	add	r24, r18
    33e4:	93 1f       	adc	r25, r19
    33e6:	fc 01       	movw	r30, r24
    33e8:	ed 58       	subi	r30, 0x8D	; 141
    33ea:	fe 4f       	sbci	r31, 0xFE	; 254
    33ec:	50 81       	ld	r21, Z
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	28 2f       	mov	r18, r24
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	c9 01       	movw	r24, r18
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	82 0f       	add	r24, r18
    33fc:	93 1f       	adc	r25, r19
    33fe:	fc 01       	movw	r30, r24
    3400:	ec 58       	subi	r30, 0x8C	; 140
    3402:	fe 4f       	sbci	r31, 0xFE	; 254
    3404:	40 81       	ld	r20, Z
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	28 2f       	mov	r18, r24
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	c9 01       	movw	r24, r18
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	82 0f       	add	r24, r18
    3414:	93 1f       	adc	r25, r19
    3416:	fc 01       	movw	r30, r24
    3418:	eb 58       	subi	r30, 0x8B	; 139
    341a:	fe 4f       	sbci	r31, 0xFE	; 254
    341c:	90 81       	ld	r25, Z
    341e:	85 2f       	mov	r24, r21
    3420:	64 2f       	mov	r22, r20
    3422:	49 2f       	mov	r20, r25
    3424:	0e 94 49 14 	call	0x2892	; 0x2892 <DIO_enu_SetPinState>
    3428:	8c 83       	std	Y+4, r24	; 0x04
   
        if((Local_au8_ErrorStates[0] == ES_NOK ) || (Local_au8_ErrorStates[1] == ES_NOK) )
    342a:	8b 81       	ldd	r24, Y+3	; 0x03
    342c:	81 30       	cpi	r24, 0x01	; 1
    342e:	19 f0       	breq	.+6      	; 0x3436 <SW_enu_Initialization+0xb4>
    3430:	8c 81       	ldd	r24, Y+4	; 0x04
    3432:	81 30       	cpi	r24, 0x01	; 1
    3434:	11 f4       	brne	.+4      	; 0x343a <SW_enu_Initialization+0xb8>
        {
            Local_u8_ErrorFlag = ES_NOK;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	8a 83       	std	Y+2, r24	; 0x02
{
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    343a:	89 81       	ldd	r24, Y+1	; 0x01
    343c:	8f 5f       	subi	r24, 0xFF	; 255
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	90 91 72 01 	lds	r25, 0x0172
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	89 17       	cp	r24, r25
    3448:	08 f4       	brcc	.+2      	; 0x344c <SW_enu_Initialization+0xca>
    344a:	a7 cf       	rjmp	.-178    	; 0x339a <SW_enu_Initialization+0x18>
        }

    }


    return Local_u8_ErrorFlag;
    344c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	08 95       	ret

0000345c <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	00 d0       	rcall	.+0      	; 0x3462 <SW_enu_GetSwValue+0x6>
    3462:	00 d0       	rcall	.+0      	; 0x3464 <SW_enu_GetSwValue+0x8>
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	8a 83       	std	Y+2, r24	; 0x02
    346a:	7c 83       	std	Y+4, r23	; 0x04
    346c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	9c 81       	ldd	r25, Y+4	; 0x04
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	49 f1       	breq	.+82     	; 0x34cc <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    347a:	90 91 72 01 	lds	r25, 0x0172
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	98 17       	cp	r25, r24
    3482:	08 f1       	brcs	.+66     	; 0x34c6 <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    3484:	8a 81       	ldd	r24, Y+2	; 0x02
    3486:	28 2f       	mov	r18, r24
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	c9 01       	movw	r24, r18
    348c:	88 0f       	add	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	82 0f       	add	r24, r18
    3492:	93 1f       	adc	r25, r19
    3494:	fc 01       	movw	r30, r24
    3496:	ed 58       	subi	r30, 0x8D	; 141
    3498:	fe 4f       	sbci	r31, 0xFE	; 254
    349a:	40 81       	ld	r20, Z
    349c:	8a 81       	ldd	r24, Y+2	; 0x02
    349e:	28 2f       	mov	r18, r24
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	c9 01       	movw	r24, r18
    34a4:	88 0f       	add	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	82 0f       	add	r24, r18
    34aa:	93 1f       	adc	r25, r19
    34ac:	fc 01       	movw	r30, r24
    34ae:	ec 58       	subi	r30, 0x8C	; 140
    34b0:	fe 4f       	sbci	r31, 0xFE	; 254
    34b2:	90 81       	ld	r25, Z
    34b4:	2b 81       	ldd	r18, Y+3	; 0x03
    34b6:	3c 81       	ldd	r19, Y+4	; 0x04
    34b8:	84 2f       	mov	r24, r20
    34ba:	69 2f       	mov	r22, r25
    34bc:	a9 01       	movw	r20, r18
    34be:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <DIO_enu_GetPinValue>
    34c2:	89 83       	std	Y+1, r24	; 0x01
    34c4:	05 c0       	rjmp	.+10     	; 0x34d0 <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    34c6:	82 e0       	ldi	r24, 0x02	; 2
    34c8:	89 83       	std	Y+1, r24	; 0x01
    34ca:	02 c0       	rjmp	.+4      	; 0x34d0 <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    34cc:	83 e0       	ldi	r24, 0x03	; 3
    34ce:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    34d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <Relay_enu_Initialization+0x6>
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    34ee:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    34f0:	19 82       	std	Y+1, r1	; 0x01
    34f2:	31 c0       	rjmp	.+98     	; 0x3556 <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	88 2f       	mov	r24, r24
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	fc 01       	movw	r30, r24
    3500:	e9 58       	subi	r30, 0x89	; 137
    3502:	fe 4f       	sbci	r31, 0xFE	; 254
    3504:	20 81       	ld	r18, Z
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	88 2f       	mov	r24, r24
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	88 0f       	add	r24, r24
    350e:	99 1f       	adc	r25, r25
    3510:	fc 01       	movw	r30, r24
    3512:	e8 58       	subi	r30, 0x88	; 136
    3514:	fe 4f       	sbci	r31, 0xFE	; 254
    3516:	90 81       	ld	r25, Z
    3518:	82 2f       	mov	r24, r18
    351a:	69 2f       	mov	r22, r25
    351c:	41 e0       	ldi	r20, 0x01	; 1
    351e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	88 2f       	mov	r24, r24
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	88 0f       	add	r24, r24
    352a:	99 1f       	adc	r25, r25
    352c:	fc 01       	movw	r30, r24
    352e:	e9 58       	subi	r30, 0x89	; 137
    3530:	fe 4f       	sbci	r31, 0xFE	; 254
    3532:	20 81       	ld	r18, Z
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	88 2f       	mov	r24, r24
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	88 0f       	add	r24, r24
    353c:	99 1f       	adc	r25, r25
    353e:	fc 01       	movw	r30, r24
    3540:	e8 58       	subi	r30, 0x88	; 136
    3542:	fe 4f       	sbci	r31, 0xFE	; 254
    3544:	90 81       	ld	r25, Z
    3546:	82 2f       	mov	r24, r18
    3548:	69 2f       	mov	r22, r25
    354a:	40 e0       	ldi	r20, 0x00	; 0
    354c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	8f 5f       	subi	r24, 0xFF	; 255
    3554:	89 83       	std	Y+1, r24	; 0x01
    3556:	90 91 76 01 	lds	r25, 0x0176
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	89 17       	cp	r24, r25
    355e:	50 f2       	brcs	.-108    	; 0x34f4 <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    3560:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	cf 91       	pop	r28
    356a:	df 91       	pop	r29
    356c:	08 95       	ret

0000356e <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    356e:	df 93       	push	r29
    3570:	cf 93       	push	r28
    3572:	00 d0       	rcall	.+0      	; 0x3574 <Relay_enu_TuronOnRelay+0x6>
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
    3578:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    357e:	90 91 76 01 	lds	r25, 0x0176
    3582:	8a 81       	ldd	r24, Y+2	; 0x02
    3584:	89 17       	cp	r24, r25
    3586:	c8 f4       	brcc	.+50     	; 0x35ba <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    3588:	8a 81       	ldd	r24, Y+2	; 0x02
    358a:	88 2f       	mov	r24, r24
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	88 0f       	add	r24, r24
    3590:	99 1f       	adc	r25, r25
    3592:	fc 01       	movw	r30, r24
    3594:	e9 58       	subi	r30, 0x89	; 137
    3596:	fe 4f       	sbci	r31, 0xFE	; 254
    3598:	20 81       	ld	r18, Z
    359a:	8a 81       	ldd	r24, Y+2	; 0x02
    359c:	88 2f       	mov	r24, r24
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	fc 01       	movw	r30, r24
    35a6:	e8 58       	subi	r30, 0x88	; 136
    35a8:	fe 4f       	sbci	r31, 0xFE	; 254
    35aa:	90 81       	ld	r25, Z
    35ac:	82 2f       	mov	r24, r18
    35ae:	69 2f       	mov	r22, r25
    35b0:	41 e0       	ldi	r20, 0x01	; 1
    35b2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    35b6:	89 83       	std	Y+1, r24	; 0x01
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    35ba:	82 e0       	ldi	r24, 0x02	; 2
    35bc:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    35be:	89 81       	ldd	r24, Y+1	; 0x01
}
    35c0:	0f 90       	pop	r0
    35c2:	0f 90       	pop	r0
    35c4:	cf 91       	pop	r28
    35c6:	df 91       	pop	r29
    35c8:	08 95       	ret

000035ca <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    35ca:	df 93       	push	r29
    35cc:	cf 93       	push	r28
    35ce:	00 d0       	rcall	.+0      	; 0x35d0 <Relay_enu_TuronOffRelay+0x6>
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    35da:	90 91 76 01 	lds	r25, 0x0176
    35de:	8a 81       	ldd	r24, Y+2	; 0x02
    35e0:	89 17       	cp	r24, r25
    35e2:	c8 f4       	brcc	.+50     	; 0x3616 <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    35e4:	8a 81       	ldd	r24, Y+2	; 0x02
    35e6:	88 2f       	mov	r24, r24
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	88 0f       	add	r24, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	fc 01       	movw	r30, r24
    35f0:	e9 58       	subi	r30, 0x89	; 137
    35f2:	fe 4f       	sbci	r31, 0xFE	; 254
    35f4:	20 81       	ld	r18, Z
    35f6:	8a 81       	ldd	r24, Y+2	; 0x02
    35f8:	88 2f       	mov	r24, r24
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	88 0f       	add	r24, r24
    35fe:	99 1f       	adc	r25, r25
    3600:	fc 01       	movw	r30, r24
    3602:	e8 58       	subi	r30, 0x88	; 136
    3604:	fe 4f       	sbci	r31, 0xFE	; 254
    3606:	90 81       	ld	r25, Z
    3608:	82 2f       	mov	r24, r18
    360a:	69 2f       	mov	r22, r25
    360c:	40 e0       	ldi	r20, 0x00	; 0
    360e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    3612:	89 83       	std	Y+1, r24	; 0x01
    3614:	02 c0       	rjmp	.+4      	; 0x361a <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3616:	82 e0       	ldi	r24, 0x02	; 2
    3618:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    361a:	89 81       	ldd	r24, Y+1	; 0x01
}
    361c:	0f 90       	pop	r0
    361e:	0f 90       	pop	r0
    3620:	cf 91       	pop	r28
    3622:	df 91       	pop	r29
    3624:	08 95       	ret

00003626 <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	00 d0       	rcall	.+0      	; 0x362c <Relay_enu_TurnOnAllRelays+0x6>
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3634:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3636:	19 82       	std	Y+1, r1	; 0x01
    3638:	1a c0       	rjmp	.+52     	; 0x366e <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	88 2f       	mov	r24, r24
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	88 0f       	add	r24, r24
    3642:	99 1f       	adc	r25, r25
    3644:	fc 01       	movw	r30, r24
    3646:	e9 58       	subi	r30, 0x89	; 137
    3648:	fe 4f       	sbci	r31, 0xFE	; 254
    364a:	20 81       	ld	r18, Z
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	88 2f       	mov	r24, r24
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	88 0f       	add	r24, r24
    3654:	99 1f       	adc	r25, r25
    3656:	fc 01       	movw	r30, r24
    3658:	e8 58       	subi	r30, 0x88	; 136
    365a:	fe 4f       	sbci	r31, 0xFE	; 254
    365c:	90 81       	ld	r25, Z
    365e:	82 2f       	mov	r24, r18
    3660:	69 2f       	mov	r22, r25
    3662:	41 e0       	ldi	r20, 0x01	; 1
    3664:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	8f 5f       	subi	r24, 0xFF	; 255
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	90 91 76 01 	lds	r25, 0x0176
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	89 17       	cp	r24, r25
    3676:	08 f3       	brcs	.-62     	; 0x363a <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3678:	82 e0       	ldi	r24, 0x02	; 2
    367a:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    367c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    367e:	0f 90       	pop	r0
    3680:	0f 90       	pop	r0
    3682:	cf 91       	pop	r28
    3684:	df 91       	pop	r29
    3686:	08 95       	ret

00003688 <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	00 d0       	rcall	.+0      	; 0x368e <Relay_enu_TurnOffAllRelays+0x6>
    368e:	cd b7       	in	r28, 0x3d	; 61
    3690:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3696:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3698:	19 82       	std	Y+1, r1	; 0x01
    369a:	1a c0       	rjmp	.+52     	; 0x36d0 <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	88 2f       	mov	r24, r24
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	fc 01       	movw	r30, r24
    36a8:	e9 58       	subi	r30, 0x89	; 137
    36aa:	fe 4f       	sbci	r31, 0xFE	; 254
    36ac:	20 81       	ld	r18, Z
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	88 2f       	mov	r24, r24
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	fc 01       	movw	r30, r24
    36ba:	e8 58       	subi	r30, 0x88	; 136
    36bc:	fe 4f       	sbci	r31, 0xFE	; 254
    36be:	90 81       	ld	r25, Z
    36c0:	82 2f       	mov	r24, r18
    36c2:	69 2f       	mov	r22, r25
    36c4:	40 e0       	ldi	r20, 0x00	; 0
    36c6:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	8f 5f       	subi	r24, 0xFF	; 255
    36ce:	89 83       	std	Y+1, r24	; 0x01
    36d0:	90 91 76 01 	lds	r25, 0x0176
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	89 17       	cp	r24, r25
    36d8:	08 f3       	brcs	.-62     	; 0x369c <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    36da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	cf 91       	pop	r28
    36e2:	df 91       	pop	r29
    36e4:	08 95       	ret

000036e6 <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    36e6:	df 93       	push	r29
    36e8:	cf 93       	push	r28
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <LED_enu_Initialization+0x6>
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    36f4:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    36f6:	19 82       	std	Y+1, r1	; 0x01
    36f8:	31 c0       	rjmp	.+98     	; 0x375c <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	88 2f       	mov	r24, r24
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	88 0f       	add	r24, r24
    3702:	99 1f       	adc	r25, r25
    3704:	fc 01       	movw	r30, r24
    3706:	e6 58       	subi	r30, 0x86	; 134
    3708:	fe 4f       	sbci	r31, 0xFE	; 254
    370a:	20 81       	ld	r18, Z
    370c:	89 81       	ldd	r24, Y+1	; 0x01
    370e:	88 2f       	mov	r24, r24
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	88 0f       	add	r24, r24
    3714:	99 1f       	adc	r25, r25
    3716:	fc 01       	movw	r30, r24
    3718:	e5 58       	subi	r30, 0x85	; 133
    371a:	fe 4f       	sbci	r31, 0xFE	; 254
    371c:	90 81       	ld	r25, Z
    371e:	82 2f       	mov	r24, r18
    3720:	69 2f       	mov	r22, r25
    3722:	41 e0       	ldi	r20, 0x01	; 1
    3724:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	88 2f       	mov	r24, r24
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	88 0f       	add	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	fc 01       	movw	r30, r24
    3734:	e6 58       	subi	r30, 0x86	; 134
    3736:	fe 4f       	sbci	r31, 0xFE	; 254
    3738:	20 81       	ld	r18, Z
    373a:	89 81       	ldd	r24, Y+1	; 0x01
    373c:	88 2f       	mov	r24, r24
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	88 0f       	add	r24, r24
    3742:	99 1f       	adc	r25, r25
    3744:	fc 01       	movw	r30, r24
    3746:	e5 58       	subi	r30, 0x85	; 133
    3748:	fe 4f       	sbci	r31, 0xFE	; 254
    374a:	90 81       	ld	r25, Z
    374c:	82 2f       	mov	r24, r18
    374e:	69 2f       	mov	r22, r25
    3750:	40 e0       	ldi	r20, 0x00	; 0
    3752:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	8f 5f       	subi	r24, 0xFF	; 255
    375a:	89 83       	std	Y+1, r24	; 0x01
    375c:	90 91 79 01 	lds	r25, 0x0179
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	89 17       	cp	r24, r25
    3764:	50 f2       	brcs	.-108    	; 0x36fa <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    3766:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
}
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	00 d0       	rcall	.+0      	; 0x377a <LED_enu_TurnOnLED+0x6>
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    377e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    3784:	90 91 79 01 	lds	r25, 0x0179
    3788:	8a 81       	ldd	r24, Y+2	; 0x02
    378a:	89 17       	cp	r24, r25
    378c:	c8 f4       	brcc	.+50     	; 0x37c0 <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	88 2f       	mov	r24, r24
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	88 0f       	add	r24, r24
    3796:	99 1f       	adc	r25, r25
    3798:	fc 01       	movw	r30, r24
    379a:	e6 58       	subi	r30, 0x86	; 134
    379c:	fe 4f       	sbci	r31, 0xFE	; 254
    379e:	20 81       	ld	r18, Z
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	88 2f       	mov	r24, r24
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	88 0f       	add	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	fc 01       	movw	r30, r24
    37ac:	e5 58       	subi	r30, 0x85	; 133
    37ae:	fe 4f       	sbci	r31, 0xFE	; 254
    37b0:	90 81       	ld	r25, Z
    37b2:	82 2f       	mov	r24, r18
    37b4:	69 2f       	mov	r22, r25
    37b6:	41 e0       	ldi	r20, 0x01	; 1
    37b8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    37bc:	89 83       	std	Y+1, r24	; 0x01
    37be:	02 c0       	rjmp	.+4      	; 0x37c4 <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    37c0:	82 e0       	ldi	r24, 0x02	; 2
    37c2:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	08 95       	ret

000037d0 <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	00 d0       	rcall	.+0      	; 0x37d6 <LED_enu_TurnOffLED+0x6>
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    37e0:	90 91 79 01 	lds	r25, 0x0179
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	98 17       	cp	r25, r24
    37e8:	c8 f0       	brcs	.+50     	; 0x381c <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    37ea:	8a 81       	ldd	r24, Y+2	; 0x02
    37ec:	88 2f       	mov	r24, r24
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	88 0f       	add	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	fc 01       	movw	r30, r24
    37f6:	e6 58       	subi	r30, 0x86	; 134
    37f8:	fe 4f       	sbci	r31, 0xFE	; 254
    37fa:	20 81       	ld	r18, Z
    37fc:	8a 81       	ldd	r24, Y+2	; 0x02
    37fe:	88 2f       	mov	r24, r24
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	88 0f       	add	r24, r24
    3804:	99 1f       	adc	r25, r25
    3806:	fc 01       	movw	r30, r24
    3808:	e5 58       	subi	r30, 0x85	; 133
    380a:	fe 4f       	sbci	r31, 0xFE	; 254
    380c:	90 81       	ld	r25, Z
    380e:	82 2f       	mov	r24, r18
    3810:	69 2f       	mov	r22, r25
    3812:	40 e0       	ldi	r20, 0x00	; 0
    3814:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    381c:	82 e0       	ldi	r24, 0x02	; 2
    381e:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3820:	89 81       	ldd	r24, Y+1	; 0x01
}
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	cf 91       	pop	r28
    3828:	df 91       	pop	r29
    382a:	08 95       	ret

0000382c <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    382c:	df 93       	push	r29
    382e:	cf 93       	push	r28
    3830:	00 d0       	rcall	.+0      	; 0x3832 <LED_enu_TurnOnAllLEDs+0x6>
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    383a:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    383c:	19 82       	std	Y+1, r1	; 0x01
    383e:	1a c0       	rjmp	.+52     	; 0x3874 <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	88 2f       	mov	r24, r24
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	88 0f       	add	r24, r24
    3848:	99 1f       	adc	r25, r25
    384a:	fc 01       	movw	r30, r24
    384c:	e6 58       	subi	r30, 0x86	; 134
    384e:	fe 4f       	sbci	r31, 0xFE	; 254
    3850:	20 81       	ld	r18, Z
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	88 2f       	mov	r24, r24
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	88 0f       	add	r24, r24
    385a:	99 1f       	adc	r25, r25
    385c:	fc 01       	movw	r30, r24
    385e:	e5 58       	subi	r30, 0x85	; 133
    3860:	fe 4f       	sbci	r31, 0xFE	; 254
    3862:	90 81       	ld	r25, Z
    3864:	82 2f       	mov	r24, r18
    3866:	69 2f       	mov	r22, r25
    3868:	41 e0       	ldi	r20, 0x01	; 1
    386a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	8f 5f       	subi	r24, 0xFF	; 255
    3872:	89 83       	std	Y+1, r24	; 0x01
    3874:	90 91 79 01 	lds	r25, 0x0179
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	89 17       	cp	r24, r25
    387c:	08 f3       	brcs	.-62     	; 0x3840 <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    387e:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    3880:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	08 95       	ret

0000388c <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    388c:	df 93       	push	r29
    388e:	cf 93       	push	r28
    3890:	00 d0       	rcall	.+0      	; 0x3892 <LED_enu_TurnOffAllLEDs+0x6>
    3892:	cd b7       	in	r28, 0x3d	; 61
    3894:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    389a:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    389c:	19 82       	std	Y+1, r1	; 0x01
    389e:	1a c0       	rjmp	.+52     	; 0x38d4 <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	88 2f       	mov	r24, r24
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	88 0f       	add	r24, r24
    38a8:	99 1f       	adc	r25, r25
    38aa:	fc 01       	movw	r30, r24
    38ac:	e6 58       	subi	r30, 0x86	; 134
    38ae:	fe 4f       	sbci	r31, 0xFE	; 254
    38b0:	20 81       	ld	r18, Z
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	88 2f       	mov	r24, r24
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	88 0f       	add	r24, r24
    38ba:	99 1f       	adc	r25, r25
    38bc:	fc 01       	movw	r30, r24
    38be:	e5 58       	subi	r30, 0x85	; 133
    38c0:	fe 4f       	sbci	r31, 0xFE	; 254
    38c2:	90 81       	ld	r25, Z
    38c4:	82 2f       	mov	r24, r18
    38c6:	69 2f       	mov	r22, r25
    38c8:	40 e0       	ldi	r20, 0x00	; 0
    38ca:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	8f 5f       	subi	r24, 0xFF	; 255
    38d2:	89 83       	std	Y+1, r24	; 0x01
    38d4:	90 91 79 01 	lds	r25, 0x0179
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	89 17       	cp	r24, r25
    38dc:	08 f3       	brcs	.-62     	; 0x38a0 <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    38de:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    38e0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    38e2:	0f 90       	pop	r0
    38e4:	0f 90       	pop	r0
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	08 95       	ret

000038ec <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    38ec:	df 93       	push	r29
    38ee:	cf 93       	push	r28
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	6d 97       	sbiw	r28, 0x1d	; 29
    38f6:	0f b6       	in	r0, 0x3f	; 63
    38f8:	f8 94       	cli
    38fa:	de bf       	out	0x3e, r29	; 62
    38fc:	0f be       	out	0x3f, r0	; 63
    38fe:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	8d 8f       	std	Y+29, r24	; 0x1d
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	ac e0       	ldi	r26, 0x0C	; 12
    390a:	b2 e4       	ldi	r27, 0x42	; 66
    390c:	89 8f       	std	Y+25, r24	; 0x19
    390e:	9a 8f       	std	Y+26, r25	; 0x1a
    3910:	ab 8f       	std	Y+27, r26	; 0x1b
    3912:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3914:	69 8d       	ldd	r22, Y+25	; 0x19
    3916:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    391a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	4a e7       	ldi	r20, 0x7A	; 122
    3922:	55 e4       	ldi	r21, 0x45	; 69
    3924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	8d 8b       	std	Y+21, r24	; 0x15
    392e:	9e 8b       	std	Y+22, r25	; 0x16
    3930:	af 8b       	std	Y+23, r26	; 0x17
    3932:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3934:	6d 89       	ldd	r22, Y+21	; 0x15
    3936:	7e 89       	ldd	r23, Y+22	; 0x16
    3938:	8f 89       	ldd	r24, Y+23	; 0x17
    393a:	98 8d       	ldd	r25, Y+24	; 0x18
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	40 e8       	ldi	r20, 0x80	; 128
    3942:	5f e3       	ldi	r21, 0x3F	; 63
    3944:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3948:	88 23       	and	r24, r24
    394a:	2c f4       	brge	.+10     	; 0x3956 <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	9c 8b       	std	Y+20, r25	; 0x14
    3952:	8b 8b       	std	Y+19, r24	; 0x13
    3954:	3f c0       	rjmp	.+126    	; 0x39d4 <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    3956:	6d 89       	ldd	r22, Y+21	; 0x15
    3958:	7e 89       	ldd	r23, Y+22	; 0x16
    395a:	8f 89       	ldd	r24, Y+23	; 0x17
    395c:	98 8d       	ldd	r25, Y+24	; 0x18
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	3f ef       	ldi	r19, 0xFF	; 255
    3962:	4f e7       	ldi	r20, 0x7F	; 127
    3964:	57 e4       	ldi	r21, 0x47	; 71
    3966:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    396a:	18 16       	cp	r1, r24
    396c:	4c f5       	brge	.+82     	; 0x39c0 <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    396e:	69 8d       	ldd	r22, Y+25	; 0x19
    3970:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3972:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3974:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	40 e2       	ldi	r20, 0x20	; 32
    397c:	51 e4       	ldi	r21, 0x41	; 65
    397e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	bc 01       	movw	r22, r24
    3988:	cd 01       	movw	r24, r26
    398a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	9c 8b       	std	Y+20, r25	; 0x14
    3994:	8b 8b       	std	Y+19, r24	; 0x13
    3996:	0f c0       	rjmp	.+30     	; 0x39b6 <LCD_enu_Initialization+0xca>
    3998:	80 e9       	ldi	r24, 0x90	; 144
    399a:	91 e0       	ldi	r25, 0x01	; 1
    399c:	9a 8b       	std	Y+18, r25	; 0x12
    399e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39a0:	89 89       	ldd	r24, Y+17	; 0x11
    39a2:	9a 89       	ldd	r25, Y+18	; 0x12
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	f1 f7       	brne	.-4      	; 0x39a4 <LCD_enu_Initialization+0xb8>
    39a8:	9a 8b       	std	Y+18, r25	; 0x12
    39aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ac:	8b 89       	ldd	r24, Y+19	; 0x13
    39ae:	9c 89       	ldd	r25, Y+20	; 0x14
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	9c 8b       	std	Y+20, r25	; 0x14
    39b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b6:	8b 89       	ldd	r24, Y+19	; 0x13
    39b8:	9c 89       	ldd	r25, Y+20	; 0x14
    39ba:	00 97       	sbiw	r24, 0x00	; 0
    39bc:	69 f7       	brne	.-38     	; 0x3998 <LCD_enu_Initialization+0xac>
    39be:	14 c0       	rjmp	.+40     	; 0x39e8 <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c0:	6d 89       	ldd	r22, Y+21	; 0x15
    39c2:	7e 89       	ldd	r23, Y+22	; 0x16
    39c4:	8f 89       	ldd	r24, Y+23	; 0x17
    39c6:	98 8d       	ldd	r25, Y+24	; 0x18
    39c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	9c 8b       	std	Y+20, r25	; 0x14
    39d2:	8b 8b       	std	Y+19, r24	; 0x13
    39d4:	8b 89       	ldd	r24, Y+19	; 0x13
    39d6:	9c 89       	ldd	r25, Y+20	; 0x14
    39d8:	98 8b       	std	Y+16, r25	; 0x10
    39da:	8f 87       	std	Y+15, r24	; 0x0f
    39dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    39de:	98 89       	ldd	r25, Y+16	; 0x10
    39e0:	01 97       	sbiw	r24, 0x01	; 1
    39e2:	f1 f7       	brne	.-4      	; 0x39e0 <LCD_enu_Initialization+0xf4>
    39e4:	98 8b       	std	Y+16, r25	; 0x10
    39e6:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	61 e0       	ldi	r22, 0x01	; 1
    39ec:	41 e0       	ldi	r20, 0x01	; 1
    39ee:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	62 e0       	ldi	r22, 0x02	; 2
    39f6:	41 e0       	ldi	r20, 0x01	; 1
    39f8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	63 e0       	ldi	r22, 0x03	; 3
    3a00:	41 e0       	ldi	r20, 0x01	; 1
    3a02:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	67 e0       	ldi	r22, 0x07	; 7
    3a0a:	41 e0       	ldi	r20, 0x01	; 1
    3a0c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    3a10:	80 e0       	ldi	r24, 0x00	; 0
    3a12:	66 e0       	ldi	r22, 0x06	; 6
    3a14:	41 e0       	ldi	r20, 0x01	; 1
    3a16:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	65 e0       	ldi	r22, 0x05	; 5
    3a1e:	41 e0       	ldi	r20, 0x01	; 1
    3a20:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	64 e0       	ldi	r22, 0x04	; 4
    3a28:	41 e0       	ldi	r20, 0x01	; 1
    3a2a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	61 e0       	ldi	r22, 0x01	; 1
    3a32:	40 e0       	ldi	r20, 0x00	; 0
    3a34:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	67 e0       	ldi	r22, 0x07	; 7
    3a3c:	40 e0       	ldi	r20, 0x00	; 0
    3a3e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	66 e0       	ldi	r22, 0x06	; 6
    3a46:	40 e0       	ldi	r20, 0x00	; 0
    3a48:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	65 e0       	ldi	r22, 0x05	; 5
    3a50:	41 e0       	ldi	r20, 0x01	; 1
    3a52:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	64 e0       	ldi	r22, 0x04	; 4
    3a5a:	40 e0       	ldi	r20, 0x00	; 0
    3a5c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    3a60:	81 e0       	ldi	r24, 0x01	; 1
    3a62:	63 e0       	ldi	r22, 0x03	; 3
    3a64:	41 e0       	ldi	r20, 0x01	; 1
    3a66:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	a0 e8       	ldi	r26, 0x80	; 128
    3a70:	bf e3       	ldi	r27, 0x3F	; 63
    3a72:	8b 87       	std	Y+11, r24	; 0x0b
    3a74:	9c 87       	std	Y+12, r25	; 0x0c
    3a76:	ad 87       	std	Y+13, r26	; 0x0d
    3a78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	4a e7       	ldi	r20, 0x7A	; 122
    3a88:	55 e4       	ldi	r21, 0x45	; 69
    3a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	8f 83       	std	Y+7, r24	; 0x07
    3a94:	98 87       	std	Y+8, r25	; 0x08
    3a96:	a9 87       	std	Y+9, r26	; 0x09
    3a98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9c:	78 85       	ldd	r23, Y+8	; 0x08
    3a9e:	89 85       	ldd	r24, Y+9	; 0x09
    3aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	40 e8       	ldi	r20, 0x80	; 128
    3aa8:	5f e3       	ldi	r21, 0x3F	; 63
    3aaa:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3aae:	88 23       	and	r24, r24
    3ab0:	2c f4       	brge	.+10     	; 0x3abc <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	9e 83       	std	Y+6, r25	; 0x06
    3ab8:	8d 83       	std	Y+5, r24	; 0x05
    3aba:	3f c0       	rjmp	.+126    	; 0x3b3a <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    3abc:	6f 81       	ldd	r22, Y+7	; 0x07
    3abe:	78 85       	ldd	r23, Y+8	; 0x08
    3ac0:	89 85       	ldd	r24, Y+9	; 0x09
    3ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac4:	20 e0       	ldi	r18, 0x00	; 0
    3ac6:	3f ef       	ldi	r19, 0xFF	; 255
    3ac8:	4f e7       	ldi	r20, 0x7F	; 127
    3aca:	57 e4       	ldi	r21, 0x47	; 71
    3acc:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3ad0:	18 16       	cp	r1, r24
    3ad2:	4c f5       	brge	.+82     	; 0x3b26 <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    3adc:	20 e0       	ldi	r18, 0x00	; 0
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	40 e2       	ldi	r20, 0x20	; 32
    3ae2:	51 e4       	ldi	r21, 0x41	; 65
    3ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	bc 01       	movw	r22, r24
    3aee:	cd 01       	movw	r24, r26
    3af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	9e 83       	std	Y+6, r25	; 0x06
    3afa:	8d 83       	std	Y+5, r24	; 0x05
    3afc:	0f c0       	rjmp	.+30     	; 0x3b1c <LCD_enu_Initialization+0x230>
    3afe:	80 e9       	ldi	r24, 0x90	; 144
    3b00:	91 e0       	ldi	r25, 0x01	; 1
    3b02:	9c 83       	std	Y+4, r25	; 0x04
    3b04:	8b 83       	std	Y+3, r24	; 0x03
    3b06:	8b 81       	ldd	r24, Y+3	; 0x03
    3b08:	9c 81       	ldd	r25, Y+4	; 0x04
    3b0a:	01 97       	sbiw	r24, 0x01	; 1
    3b0c:	f1 f7       	brne	.-4      	; 0x3b0a <LCD_enu_Initialization+0x21e>
    3b0e:	9c 83       	std	Y+4, r25	; 0x04
    3b10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b12:	8d 81       	ldd	r24, Y+5	; 0x05
    3b14:	9e 81       	ldd	r25, Y+6	; 0x06
    3b16:	01 97       	sbiw	r24, 0x01	; 1
    3b18:	9e 83       	std	Y+6, r25	; 0x06
    3b1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b20:	00 97       	sbiw	r24, 0x00	; 0
    3b22:	69 f7       	brne	.-38     	; 0x3afe <LCD_enu_Initialization+0x212>
    3b24:	14 c0       	rjmp	.+40     	; 0x3b4e <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b26:	6f 81       	ldd	r22, Y+7	; 0x07
    3b28:	78 85       	ldd	r23, Y+8	; 0x08
    3b2a:	89 85       	ldd	r24, Y+9	; 0x09
    3b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	9e 83       	std	Y+6, r25	; 0x06
    3b38:	8d 83       	std	Y+5, r24	; 0x05
    3b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b3e:	9a 83       	std	Y+2, r25	; 0x02
    3b40:	89 83       	std	Y+1, r24	; 0x01
    3b42:	89 81       	ldd	r24, Y+1	; 0x01
    3b44:	9a 81       	ldd	r25, Y+2	; 0x02
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	f1 f7       	brne	.-4      	; 0x3b46 <LCD_enu_Initialization+0x25a>
    3b4a:	9a 83       	std	Y+2, r25	; 0x02
    3b4c:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	63 e0       	ldi	r22, 0x03	; 3
    3b52:	40 e0       	ldi	r20, 0x00	; 0
    3b54:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	61 e0       	ldi	r22, 0x01	; 1
    3b5c:	40 e0       	ldi	r20, 0x00	; 0
    3b5e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    3b62:	88 e2       	ldi	r24, 0x28	; 40
    3b64:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	61 e0       	ldi	r22, 0x01	; 1
    3b6c:	40 e0       	ldi	r20, 0x00	; 0
    3b6e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0F);
    3b72:	8f e0       	ldi	r24, 0x0F	; 15
    3b74:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	61 e0       	ldi	r22, 0x01	; 1
    3b7c:	40 e0       	ldi	r20, 0x00	; 0
    3b7e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	61 e0       	ldi	r22, 0x01	; 1
    3b8c:	40 e0       	ldi	r20, 0x00	; 0
    3b8e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    3b92:	86 e0       	ldi	r24, 0x06	; 6
    3b94:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    3b98:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    3b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3b9c:	6d 96       	adiw	r28, 0x1d	; 29
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	cf 91       	pop	r28
    3baa:	df 91       	pop	r29
    3bac:	08 95       	ret

00003bae <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    3bae:	df 93       	push	r29
    3bb0:	cf 93       	push	r28
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <LCD_enu_SendCommand+0x6>
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
    3bb8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	61 e0       	ldi	r22, 0x01	; 1
    3bc2:	40 e0       	ldi	r20, 0x00	; 0
    3bc4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    3bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bca:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    3bce:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01

}
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	cf 91       	pop	r28
    3bd8:	df 91       	pop	r29
    3bda:	08 95       	ret

00003bdc <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    3bdc:	df 93       	push	r29
    3bde:	cf 93       	push	r28
    3be0:	00 d0       	rcall	.+0      	; 0x3be2 <LCD_enu_SendData+0x6>
    3be2:	cd b7       	in	r28, 0x3d	; 61
    3be4:	de b7       	in	r29, 0x3e	; 62
    3be6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	61 e0       	ldi	r22, 0x01	; 1
    3bf0:	41 e0       	ldi	r20, 0x01	; 1
    3bf2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    3bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf8:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    3bfc:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01

}
    3c00:	0f 90       	pop	r0
    3c02:	0f 90       	pop	r0
    3c04:	cf 91       	pop	r28
    3c06:	df 91       	pop	r29
    3c08:	08 95       	ret

00003c0a <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    3c0a:	df 93       	push	r29
    3c0c:	cf 93       	push	r28
    3c0e:	00 d0       	rcall	.+0      	; 0x3c10 <LCD_enu_GoToPosition+0x6>
    3c10:	00 d0       	rcall	.+0      	; 0x3c12 <LCD_enu_GoToPosition+0x8>
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
    3c16:	8a 83       	std	Y+2, r24	; 0x02
    3c18:	6b 83       	std	Y+3, r22	; 0x03
    3c1a:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    3c20:	8b 81       	ldd	r24, Y+3	; 0x03
    3c22:	81 31       	cpi	r24, 0x11	; 17
    3c24:	88 f5       	brcc	.+98     	; 0x3c88 <LCD_enu_GoToPosition+0x7e>
    3c26:	8b 81       	ldd	r24, Y+3	; 0x03
    3c28:	88 23       	and	r24, r24
    3c2a:	71 f1       	breq	.+92     	; 0x3c88 <LCD_enu_GoToPosition+0x7e>
    3c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2e:	83 30       	cpi	r24, 0x03	; 3
    3c30:	58 f5       	brcc	.+86     	; 0x3c88 <LCD_enu_GoToPosition+0x7e>
    3c32:	8a 81       	ldd	r24, Y+2	; 0x02
    3c34:	88 23       	and	r24, r24
    3c36:	41 f1       	breq	.+80     	; 0x3c88 <LCD_enu_GoToPosition+0x7e>
    3c38:	8c 81       	ldd	r24, Y+4	; 0x04
    3c3a:	85 30       	cpi	r24, 0x05	; 5
    3c3c:	28 f5       	brcc	.+74     	; 0x3c88 <LCD_enu_GoToPosition+0x7e>
    3c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c40:	88 23       	and	r24, r24
    3c42:	11 f1       	breq	.+68     	; 0x3c88 <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	61 e0       	ldi	r22, 0x01	; 1
    3c48:	40 e0       	ldi	r20, 0x00	; 0
    3c4a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    3c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c50:	88 2f       	mov	r24, r24
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	9c 01       	movw	r18, r24
    3c56:	21 50       	subi	r18, 0x01	; 1
    3c58:	30 40       	sbci	r19, 0x00	; 0
    3c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5c:	88 2f       	mov	r24, r24
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	88 0f       	add	r24, r24
    3c64:	99 1f       	adc	r25, r25
    3c66:	88 0f       	add	r24, r24
    3c68:	99 1f       	adc	r25, r25
    3c6a:	82 0f       	add	r24, r18
    3c6c:	93 1f       	adc	r25, r19
    3c6e:	82 95       	swap	r24
    3c70:	92 95       	swap	r25
    3c72:	90 7f       	andi	r25, 0xF0	; 240
    3c74:	98 27       	eor	r25, r24
    3c76:	80 7f       	andi	r24, 0xF0	; 240
    3c78:	98 27       	eor	r25, r24
    3c7a:	98 2f       	mov	r25, r24
    3c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7e:	89 0f       	add	r24, r25
    3c80:	81 58       	subi	r24, 0x81	; 129
    3c82:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
    3c86:	02 c0       	rjmp	.+4      	; 0x3c8c <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3c88:	82 e0       	ldi	r24, 0x02	; 2
    3c8a:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
    3c94:	0f 90       	pop	r0
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	08 95       	ret

00003c9c <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    3c9c:	df 93       	push	r29
    3c9e:	cf 93       	push	r28
    3ca0:	00 d0       	rcall	.+0      	; 0x3ca2 <LCD_enu_SendString+0x6>
    3ca2:	0f 92       	push	r0
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
    3ca8:	9b 83       	std	Y+3, r25	; 0x03
    3caa:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    3cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb4:	00 97       	sbiw	r24, 0x00	; 0
    3cb6:	c1 f0       	breq	.+48     	; 0x3ce8 <LCD_enu_SendString+0x4c>
    3cb8:	10 c0       	rjmp	.+32     	; 0x3cda <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	61 e0       	ldi	r22, 0x01	; 1
    3cbe:	41 e0       	ldi	r20, 0x01	; 1
    3cc0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    3cc4:	ea 81       	ldd	r30, Y+2	; 0x02
    3cc6:	fb 81       	ldd	r31, Y+3	; 0x03
    3cc8:	20 81       	ld	r18, Z
    3cca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cce:	01 96       	adiw	r24, 0x01	; 1
    3cd0:	9b 83       	std	Y+3, r25	; 0x03
    3cd2:	8a 83       	std	Y+2, r24	; 0x02
    3cd4:	82 2f       	mov	r24, r18
    3cd6:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    3cda:	ea 81       	ldd	r30, Y+2	; 0x02
    3cdc:	fb 81       	ldd	r31, Y+3	; 0x03
    3cde:	80 81       	ld	r24, Z
    3ce0:	88 23       	and	r24, r24
    3ce2:	59 f7       	brne	.-42     	; 0x3cba <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    3ce4:	19 82       	std	Y+1, r1	; 0x01
    3ce6:	02 c0       	rjmp	.+4      	; 0x3cec <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3ce8:	83 e0       	ldi	r24, 0x03	; 3
    3cea:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cee:	0f 90       	pop	r0
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	cf 91       	pop	r28
    3cf6:	df 91       	pop	r29
    3cf8:	08 95       	ret

00003cfa <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    3cfa:	df 93       	push	r29
    3cfc:	cf 93       	push	r28
    3cfe:	00 d0       	rcall	.+0      	; 0x3d00 <LCD_enu_ClearPage+0x6>
    3d00:	0f 92       	push	r0
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
    3d06:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	88 23       	and	r24, r24
    3d10:	09 f4       	brne	.+2      	; 0x3d14 <LCD_enu_ClearPage+0x1a>
    3d12:	49 c0       	rjmp	.+146    	; 0x3da6 <LCD_enu_ClearPage+0xac>
    3d14:	8b 81       	ldd	r24, Y+3	; 0x03
    3d16:	85 30       	cpi	r24, 0x05	; 5
    3d18:	08 f0       	brcs	.+2      	; 0x3d1c <LCD_enu_ClearPage+0x22>
    3d1a:	45 c0       	rjmp	.+138    	; 0x3da6 <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    3d1c:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	61 e0       	ldi	r22, 0x01	; 1
    3d22:	40 e0       	ldi	r20, 0x00	; 0
    3d24:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    3d28:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2a:	88 2f       	mov	r24, r24
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	07 96       	adiw	r24, 0x07	; 7
    3d30:	82 95       	swap	r24
    3d32:	92 95       	swap	r25
    3d34:	90 7f       	andi	r25, 0xF0	; 240
    3d36:	98 27       	eor	r25, r24
    3d38:	80 7f       	andi	r24, 0xF0	; 240
    3d3a:	98 27       	eor	r25, r24
    3d3c:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	61 e0       	ldi	r22, 0x01	; 1
    3d44:	41 e0       	ldi	r20, 0x01	; 1
    3d46:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3d4a:	19 82       	std	Y+1, r1	; 0x01
    3d4c:	06 c0       	rjmp	.+12     	; 0x3d5a <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    3d4e:	80 e2       	ldi	r24, 0x20	; 32
    3d50:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	8f 5f       	subi	r24, 0xFF	; 255
    3d58:	89 83       	std	Y+1, r24	; 0x01
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	80 31       	cpi	r24, 0x10	; 16
    3d5e:	b8 f3       	brcs	.-18     	; 0x3d4e <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	61 e0       	ldi	r22, 0x01	; 1
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    3d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6c:	88 2f       	mov	r24, r24
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	0b 96       	adiw	r24, 0x0b	; 11
    3d72:	82 95       	swap	r24
    3d74:	92 95       	swap	r25
    3d76:	90 7f       	andi	r25, 0xF0	; 240
    3d78:	98 27       	eor	r25, r24
    3d7a:	80 7f       	andi	r24, 0xF0	; 240
    3d7c:	98 27       	eor	r25, r24
    3d7e:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	61 e0       	ldi	r22, 0x01	; 1
    3d86:	41 e0       	ldi	r20, 0x01	; 1
    3d88:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3d8c:	19 82       	std	Y+1, r1	; 0x01
    3d8e:	06 c0       	rjmp	.+12     	; 0x3d9c <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    3d90:	80 e2       	ldi	r24, 0x20	; 32
    3d92:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	8f 5f       	subi	r24, 0xFF	; 255
    3d9a:	89 83       	std	Y+1, r24	; 0x01
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	80 31       	cpi	r24, 0x10	; 16
    3da0:	b8 f3       	brcs	.-18     	; 0x3d90 <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    3da2:	1a 82       	std	Y+2, r1	; 0x02
    3da4:	02 c0       	rjmp	.+4      	; 0x3daa <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    3daa:	8a 81       	ldd	r24, Y+2	; 0x02

}
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	cf 91       	pop	r28
    3db4:	df 91       	pop	r29
    3db6:	08 95       	ret

00003db8 <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    3db8:	cf 92       	push	r12
    3dba:	ef 92       	push	r14
    3dbc:	0f 93       	push	r16
    3dbe:	df 93       	push	r29
    3dc0:	cf 93       	push	r28
    3dc2:	cd b7       	in	r28, 0x3d	; 61
    3dc4:	de b7       	in	r29, 0x3e	; 62
    3dc6:	2e 97       	sbiw	r28, 0x0e	; 14
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	de bf       	out	0x3e, r29	; 62
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	cd bf       	out	0x3d, r28	; 61
    3dd2:	9e 83       	std	Y+6, r25	; 0x06
    3dd4:	8d 83       	std	Y+5, r24	; 0x05
    3dd6:	6f 83       	std	Y+7, r22	; 0x07
    3dd8:	48 87       	std	Y+8, r20	; 0x08
    3dda:	29 87       	std	Y+9, r18	; 0x09
    3ddc:	0a 87       	std	Y+10, r16	; 0x0a
    3dde:	eb 86       	std	Y+11, r14	; 0x0b
    3de0:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    3de6:	8d 81       	ldd	r24, Y+5	; 0x05
    3de8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <LCD_enu_DrawSpecialCharacter+0x38>
    3dee:	b3 c0       	rjmp	.+358    	; 0x3f56 <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    3df0:	1b 82       	std	Y+3, r1	; 0x03
    3df2:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    3df4:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    3df6:	8f 81       	ldd	r24, Y+7	; 0x07
    3df8:	88 23       	and	r24, r24
    3dfa:	09 f4       	brne	.+2      	; 0x3dfe <LCD_enu_DrawSpecialCharacter+0x46>
    3dfc:	a9 c0       	rjmp	.+338    	; 0x3f50 <LCD_enu_DrawSpecialCharacter+0x198>
    3dfe:	8f 81       	ldd	r24, Y+7	; 0x07
    3e00:	89 30       	cpi	r24, 0x09	; 9
    3e02:	08 f0       	brcs	.+2      	; 0x3e06 <LCD_enu_DrawSpecialCharacter+0x4e>
    3e04:	a5 c0       	rjmp	.+330    	; 0x3f50 <LCD_enu_DrawSpecialCharacter+0x198>
    3e06:	88 85       	ldd	r24, Y+8	; 0x08
    3e08:	88 30       	cpi	r24, 0x08	; 8
    3e0a:	08 f0       	brcs	.+2      	; 0x3e0e <LCD_enu_DrawSpecialCharacter+0x56>
    3e0c:	a1 c0       	rjmp	.+322    	; 0x3f50 <LCD_enu_DrawSpecialCharacter+0x198>
    3e0e:	88 85       	ldd	r24, Y+8	; 0x08
    3e10:	28 2f       	mov	r18, r24
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	88 e0       	ldi	r24, 0x08	; 8
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	ac 01       	movw	r20, r24
    3e1a:	42 1b       	sub	r20, r18
    3e1c:	53 0b       	sbc	r21, r19
    3e1e:	9a 01       	movw	r18, r20
    3e20:	8f 81       	ldd	r24, Y+7	; 0x07
    3e22:	88 2f       	mov	r24, r24
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	28 17       	cp	r18, r24
    3e28:	39 07       	cpc	r19, r25
    3e2a:	0c f4       	brge	.+2      	; 0x3e2e <LCD_enu_DrawSpecialCharacter+0x76>
    3e2c:	91 c0       	rjmp	.+290    	; 0x3f50 <LCD_enu_DrawSpecialCharacter+0x198>
    3e2e:	89 85       	ldd	r24, Y+9	; 0x09
    3e30:	88 23       	and	r24, r24
    3e32:	09 f4       	brne	.+2      	; 0x3e36 <LCD_enu_DrawSpecialCharacter+0x7e>
    3e34:	8d c0       	rjmp	.+282    	; 0x3f50 <LCD_enu_DrawSpecialCharacter+0x198>
    3e36:	89 85       	ldd	r24, Y+9	; 0x09
    3e38:	83 30       	cpi	r24, 0x03	; 3
    3e3a:	08 f0       	brcs	.+2      	; 0x3e3e <LCD_enu_DrawSpecialCharacter+0x86>
    3e3c:	89 c0       	rjmp	.+274    	; 0x3f50 <LCD_enu_DrawSpecialCharacter+0x198>
    3e3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e40:	88 23       	and	r24, r24
    3e42:	09 f4       	brne	.+2      	; 0x3e46 <LCD_enu_DrawSpecialCharacter+0x8e>
    3e44:	85 c0       	rjmp	.+266    	; 0x3f50 <LCD_enu_DrawSpecialCharacter+0x198>
    3e46:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e48:	81 31       	cpi	r24, 0x11	; 17
    3e4a:	08 f0       	brcs	.+2      	; 0x3e4e <LCD_enu_DrawSpecialCharacter+0x96>
    3e4c:	81 c0       	rjmp	.+258    	; 0x3f50 <LCD_enu_DrawSpecialCharacter+0x198>
    3e4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e50:	82 30       	cpi	r24, 0x02	; 2
    3e52:	08 f0       	brcs	.+2      	; 0x3e56 <LCD_enu_DrawSpecialCharacter+0x9e>
    3e54:	7d c0       	rjmp	.+250    	; 0x3f50 <LCD_enu_DrawSpecialCharacter+0x198>
    3e56:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e58:	85 30       	cpi	r24, 0x05	; 5
    3e5a:	08 f0       	brcs	.+2      	; 0x3e5e <LCD_enu_DrawSpecialCharacter+0xa6>
    3e5c:	79 c0       	rjmp	.+242    	; 0x3f50 <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    3e5e:	19 82       	std	Y+1, r1	; 0x01
    3e60:	19 c0       	rjmp	.+50     	; 0x3e94 <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
    3e64:	28 2f       	mov	r18, r24
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6c:	82 0f       	add	r24, r18
    3e6e:	93 1f       	adc	r25, r19
    3e70:	9b 83       	std	Y+3, r25	; 0x03
    3e72:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	98 2f       	mov	r25, r24
    3e78:	96 95       	lsr	r25
    3e7a:	96 95       	lsr	r25
    3e7c:	96 95       	lsr	r25
    3e7e:	88 85       	ldd	r24, Y+8	; 0x08
    3e80:	29 2f       	mov	r18, r25
    3e82:	28 0f       	add	r18, r24
    3e84:	8a 81       	ldd	r24, Y+2	; 0x02
    3e86:	9b 81       	ldd	r25, Y+3	; 0x03
    3e88:	62 2f       	mov	r22, r18
    3e8a:	0e 94 41 24 	call	0x4882	; 0x4882 <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	88 5f       	subi	r24, 0xF8	; 248
    3e92:	89 83       	std	Y+1, r24	; 0x01
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
    3e96:	28 2f       	mov	r18, r24
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    3e9c:	88 2f       	mov	r24, r24
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	88 0f       	add	r24, r24
    3ea2:	99 1f       	adc	r25, r25
    3ea4:	88 0f       	add	r24, r24
    3ea6:	99 1f       	adc	r25, r25
    3ea8:	88 0f       	add	r24, r24
    3eaa:	99 1f       	adc	r25, r25
    3eac:	28 17       	cp	r18, r24
    3eae:	39 07       	cpc	r19, r25
    3eb0:	c4 f2       	brlt	.-80     	; 0x3e62 <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	61 e0       	ldi	r22, 0x01	; 1
    3eb6:	40 e0       	ldi	r20, 0x00	; 0
    3eb8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    3ebc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ebe:	28 2f       	mov	r18, r24
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	3e 87       	std	Y+14, r19	; 0x0e
    3ec4:	2d 87       	std	Y+13, r18	; 0x0d
    3ec6:	4d 85       	ldd	r20, Y+13	; 0x0d
    3ec8:	5e 85       	ldd	r21, Y+14	; 0x0e
    3eca:	41 15       	cp	r20, r1
    3ecc:	51 05       	cpc	r21, r1
    3ece:	49 f0       	breq	.+18     	; 0x3ee2 <LCD_enu_DrawSpecialCharacter+0x12a>
    3ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ed4:	81 30       	cpi	r24, 0x01	; 1
    3ed6:	91 05       	cpc	r25, r1
    3ed8:	39 f4       	brne	.+14     	; 0x3ee8 <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    3eda:	86 e0       	ldi	r24, 0x06	; 6
    3edc:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
    3ee0:	03 c0       	rjmp	.+6      	; 0x3ee8 <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    3ee2:	84 e0       	ldi	r24, 0x04	; 4
    3ee4:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3ee8:	81 e0       	ldi	r24, 0x01	; 1
    3eea:	61 e0       	ldi	r22, 0x01	; 1
    3eec:	40 e0       	ldi	r20, 0x00	; 0
    3eee:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    3ef2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ef4:	88 2f       	mov	r24, r24
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	9c 01       	movw	r18, r24
    3efa:	21 50       	subi	r18, 0x01	; 1
    3efc:	30 40       	sbci	r19, 0x00	; 0
    3efe:	89 85       	ldd	r24, Y+9	; 0x09
    3f00:	88 2f       	mov	r24, r24
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	01 97       	sbiw	r24, 0x01	; 1
    3f06:	88 0f       	add	r24, r24
    3f08:	99 1f       	adc	r25, r25
    3f0a:	88 0f       	add	r24, r24
    3f0c:	99 1f       	adc	r25, r25
    3f0e:	82 0f       	add	r24, r18
    3f10:	93 1f       	adc	r25, r19
    3f12:	82 95       	swap	r24
    3f14:	92 95       	swap	r25
    3f16:	90 7f       	andi	r25, 0xF0	; 240
    3f18:	98 27       	eor	r25, r24
    3f1a:	80 7f       	andi	r24, 0xF0	; 240
    3f1c:	98 27       	eor	r25, r24
    3f1e:	98 2f       	mov	r25, r24
    3f20:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f22:	89 0f       	add	r24, r25
    3f24:	81 58       	subi	r24, 0x81	; 129
    3f26:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	61 e0       	ldi	r22, 0x01	; 1
    3f2e:	41 e0       	ldi	r20, 0x01	; 1
    3f30:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    3f34:	19 82       	std	Y+1, r1	; 0x01
    3f36:	06 c0       	rjmp	.+12     	; 0x3f44 <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    3f3e:	89 81       	ldd	r24, Y+1	; 0x01
    3f40:	8f 5f       	subi	r24, 0xFF	; 255
    3f42:	89 83       	std	Y+1, r24	; 0x01
    3f44:	99 81       	ldd	r25, Y+1	; 0x01
    3f46:	8f 81       	ldd	r24, Y+7	; 0x07
    3f48:	98 17       	cp	r25, r24
    3f4a:	b0 f3       	brcs	.-20     	; 0x3f38 <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    3f4c:	1c 82       	std	Y+4, r1	; 0x04
    3f4e:	05 c0       	rjmp	.+10     	; 0x3f5a <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    3f50:	82 e0       	ldi	r24, 0x02	; 2
    3f52:	8c 83       	std	Y+4, r24	; 0x04
    3f54:	02 c0       	rjmp	.+4      	; 0x3f5a <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    3f56:	83 e0       	ldi	r24, 0x03	; 3
    3f58:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    3f5a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3f5c:	2e 96       	adiw	r28, 0x0e	; 14
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	f8 94       	cli
    3f62:	de bf       	out	0x3e, r29	; 62
    3f64:	0f be       	out	0x3f, r0	; 63
    3f66:	cd bf       	out	0x3d, r28	; 61
    3f68:	cf 91       	pop	r28
    3f6a:	df 91       	pop	r29
    3f6c:	0f 91       	pop	r16
    3f6e:	ef 90       	pop	r14
    3f70:	cf 90       	pop	r12
    3f72:	08 95       	ret

00003f74 <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    3f74:	0f 93       	push	r16
    3f76:	df 93       	push	r29
    3f78:	cf 93       	push	r28
    3f7a:	cd b7       	in	r28, 0x3d	; 61
    3f7c:	de b7       	in	r29, 0x3e	; 62
    3f7e:	2e 97       	sbiw	r28, 0x0e	; 14
    3f80:	0f b6       	in	r0, 0x3f	; 63
    3f82:	f8 94       	cli
    3f84:	de bf       	out	0x3e, r29	; 62
    3f86:	0f be       	out	0x3f, r0	; 63
    3f88:	cd bf       	out	0x3d, r28	; 61
    3f8a:	68 87       	std	Y+8, r22	; 0x08
    3f8c:	79 87       	std	Y+9, r23	; 0x09
    3f8e:	8a 87       	std	Y+10, r24	; 0x0a
    3f90:	9b 87       	std	Y+11, r25	; 0x0b
    3f92:	4c 87       	std	Y+12, r20	; 0x0c
    3f94:	2d 87       	std	Y+13, r18	; 0x0d
    3f96:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f98:	81 e0       	ldi	r24, 0x01	; 1
    3f9a:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    3f9c:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    3f9e:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    3fa0:	88 85       	ldd	r24, Y+8	; 0x08
    3fa2:	99 85       	ldd	r25, Y+9	; 0x09
    3fa4:	aa 85       	ldd	r26, Y+10	; 0x0a
    3fa6:	bb 85       	ldd	r27, Y+11	; 0x0b
    3fa8:	bb 23       	and	r27, r27
    3faa:	8c f4       	brge	.+34     	; 0x3fce <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    3fb0:	88 85       	ldd	r24, Y+8	; 0x08
    3fb2:	99 85       	ldd	r25, Y+9	; 0x09
    3fb4:	aa 85       	ldd	r26, Y+10	; 0x0a
    3fb6:	bb 85       	ldd	r27, Y+11	; 0x0b
    3fb8:	b0 95       	com	r27
    3fba:	a0 95       	com	r26
    3fbc:	90 95       	com	r25
    3fbe:	81 95       	neg	r24
    3fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc2:	af 4f       	sbci	r26, 0xFF	; 255
    3fc4:	bf 4f       	sbci	r27, 0xFF	; 255
    3fc6:	88 87       	std	Y+8, r24	; 0x08
    3fc8:	99 87       	std	Y+9, r25	; 0x09
    3fca:	aa 87       	std	Y+10, r26	; 0x0a
    3fcc:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    3fce:	88 85       	ldd	r24, Y+8	; 0x08
    3fd0:	99 85       	ldd	r25, Y+9	; 0x09
    3fd2:	aa 85       	ldd	r26, Y+10	; 0x0a
    3fd4:	bb 85       	ldd	r27, Y+11	; 0x0b
    3fd6:	8c 83       	std	Y+4, r24	; 0x04
    3fd8:	9d 83       	std	Y+5, r25	; 0x05
    3fda:	ae 83       	std	Y+6, r26	; 0x06
    3fdc:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    3fde:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe0:	8f 5f       	subi	r24, 0xFF	; 255
    3fe2:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    3fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    3fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    3fe8:	ae 81       	ldd	r26, Y+6	; 0x06
    3fea:	bf 81       	ldd	r27, Y+7	; 0x07
    3fec:	2a e0       	ldi	r18, 0x0A	; 10
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	40 e0       	ldi	r20, 0x00	; 0
    3ff2:	50 e0       	ldi	r21, 0x00	; 0
    3ff4:	bc 01       	movw	r22, r24
    3ff6:	cd 01       	movw	r24, r26
    3ff8:	0e 94 e5 29 	call	0x53ca	; 0x53ca <__divmodsi4>
    3ffc:	da 01       	movw	r26, r20
    3ffe:	c9 01       	movw	r24, r18
    4000:	8c 83       	std	Y+4, r24	; 0x04
    4002:	9d 83       	std	Y+5, r25	; 0x05
    4004:	ae 83       	std	Y+6, r26	; 0x06
    4006:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    4008:	8c 81       	ldd	r24, Y+4	; 0x04
    400a:	9d 81       	ldd	r25, Y+5	; 0x05
    400c:	ae 81       	ldd	r26, Y+6	; 0x06
    400e:	bf 81       	ldd	r27, Y+7	; 0x07
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	a1 05       	cpc	r26, r1
    4014:	b1 05       	cpc	r27, r1
    4016:	19 f7       	brne	.-58     	; 0x3fde <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    4018:	8c 85       	ldd	r24, Y+12	; 0x0c
    401a:	88 23       	and	r24, r24
    401c:	09 f4       	brne	.+2      	; 0x4020 <LCD_enu_WriteIntegerNum+0xac>
    401e:	87 c0       	rjmp	.+270    	; 0x412e <LCD_enu_WriteIntegerNum+0x1ba>
    4020:	8c 85       	ldd	r24, Y+12	; 0x0c
    4022:	83 30       	cpi	r24, 0x03	; 3
    4024:	08 f0       	brcs	.+2      	; 0x4028 <LCD_enu_WriteIntegerNum+0xb4>
    4026:	83 c0       	rjmp	.+262    	; 0x412e <LCD_enu_WriteIntegerNum+0x1ba>
    4028:	8d 85       	ldd	r24, Y+13	; 0x0d
    402a:	88 23       	and	r24, r24
    402c:	09 f4       	brne	.+2      	; 0x4030 <LCD_enu_WriteIntegerNum+0xbc>
    402e:	7f c0       	rjmp	.+254    	; 0x412e <LCD_enu_WriteIntegerNum+0x1ba>
    4030:	8d 85       	ldd	r24, Y+13	; 0x0d
    4032:	81 31       	cpi	r24, 0x11	; 17
    4034:	08 f0       	brcs	.+2      	; 0x4038 <LCD_enu_WriteIntegerNum+0xc4>
    4036:	7b c0       	rjmp	.+246    	; 0x412e <LCD_enu_WriteIntegerNum+0x1ba>
    4038:	8e 85       	ldd	r24, Y+14	; 0x0e
    403a:	85 30       	cpi	r24, 0x05	; 5
    403c:	08 f0       	brcs	.+2      	; 0x4040 <LCD_enu_WriteIntegerNum+0xcc>
    403e:	77 c0       	rjmp	.+238    	; 0x412e <LCD_enu_WriteIntegerNum+0x1ba>
    4040:	8a 81       	ldd	r24, Y+2	; 0x02
    4042:	81 31       	cpi	r24, 0x11	; 17
    4044:	08 f0       	brcs	.+2      	; 0x4048 <LCD_enu_WriteIntegerNum+0xd4>
    4046:	73 c0       	rjmp	.+230    	; 0x412e <LCD_enu_WriteIntegerNum+0x1ba>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    4048:	88 85       	ldd	r24, Y+8	; 0x08
    404a:	99 85       	ldd	r25, Y+9	; 0x09
    404c:	aa 85       	ldd	r26, Y+10	; 0x0a
    404e:	bb 85       	ldd	r27, Y+11	; 0x0b
    4050:	8c 83       	std	Y+4, r24	; 0x04
    4052:	9d 83       	std	Y+5, r25	; 0x05
    4054:	ae 83       	std	Y+6, r26	; 0x06
    4056:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    4058:	ce 01       	movw	r24, r28
    405a:	04 96       	adiw	r24, 0x04	; 4
    405c:	0e 94 02 25 	call	0x4a04	; 0x4a04 <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	61 e0       	ldi	r22, 0x01	; 1
    4064:	40 e0       	ldi	r20, 0x00	; 0
    4066:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        //Placing Cursor
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    406a:	8e 85       	ldd	r24, Y+14	; 0x0e
    406c:	88 2f       	mov	r24, r24
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	9c 01       	movw	r18, r24
    4072:	21 50       	subi	r18, 0x01	; 1
    4074:	30 40       	sbci	r19, 0x00	; 0
    4076:	8c 85       	ldd	r24, Y+12	; 0x0c
    4078:	88 2f       	mov	r24, r24
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	01 97       	sbiw	r24, 0x01	; 1
    407e:	88 0f       	add	r24, r24
    4080:	99 1f       	adc	r25, r25
    4082:	88 0f       	add	r24, r24
    4084:	99 1f       	adc	r25, r25
    4086:	82 0f       	add	r24, r18
    4088:	93 1f       	adc	r25, r19
    408a:	82 95       	swap	r24
    408c:	92 95       	swap	r25
    408e:	90 7f       	andi	r25, 0xF0	; 240
    4090:	98 27       	eor	r25, r24
    4092:	80 7f       	andi	r24, 0xF0	; 240
    4094:	98 27       	eor	r25, r24
    4096:	98 2f       	mov	r25, r24
    4098:	8d 85       	ldd	r24, Y+13	; 0x0d
    409a:	89 0f       	add	r24, r25
    409c:	81 58       	subi	r24, 0x81	; 129
    409e:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	61 e0       	ldi	r22, 0x01	; 1
    40a6:	41 e0       	ldi	r20, 0x01	; 1
    40a8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	88 23       	and	r24, r24
    40b0:	51 f1       	breq	.+84     	; 0x4106 <LCD_enu_WriteIntegerNum+0x192>
        {
            enu_PassByteAndLatch('-');
    40b2:	8d e2       	ldi	r24, 0x2D	; 45
    40b4:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
    40b8:	26 c0       	rjmp	.+76     	; 0x4106 <LCD_enu_WriteIntegerNum+0x192>
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    40ba:	8c 81       	ldd	r24, Y+4	; 0x04
    40bc:	9d 81       	ldd	r25, Y+5	; 0x05
    40be:	ae 81       	ldd	r26, Y+6	; 0x06
    40c0:	bf 81       	ldd	r27, Y+7	; 0x07
    40c2:	2a e0       	ldi	r18, 0x0A	; 10
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	40 e0       	ldi	r20, 0x00	; 0
    40c8:	50 e0       	ldi	r21, 0x00	; 0
    40ca:	bc 01       	movw	r22, r24
    40cc:	cd 01       	movw	r24, r26
    40ce:	0e 94 e5 29 	call	0x53ca	; 0x53ca <__divmodsi4>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	80 5d       	subi	r24, 0xD0	; 208
    40d8:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    40dc:	8c 81       	ldd	r24, Y+4	; 0x04
    40de:	9d 81       	ldd	r25, Y+5	; 0x05
    40e0:	ae 81       	ldd	r26, Y+6	; 0x06
    40e2:	bf 81       	ldd	r27, Y+7	; 0x07
    40e4:	2a e0       	ldi	r18, 0x0A	; 10
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	40 e0       	ldi	r20, 0x00	; 0
    40ea:	50 e0       	ldi	r21, 0x00	; 0
    40ec:	bc 01       	movw	r22, r24
    40ee:	cd 01       	movw	r24, r26
    40f0:	0e 94 e5 29 	call	0x53ca	; 0x53ca <__divmodsi4>
    40f4:	da 01       	movw	r26, r20
    40f6:	c9 01       	movw	r24, r18
    40f8:	8c 83       	std	Y+4, r24	; 0x04
    40fa:	9d 83       	std	Y+5, r25	; 0x05
    40fc:	ae 83       	std	Y+6, r26	; 0x06
    40fe:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    4100:	8a 81       	ldd	r24, Y+2	; 0x02
    4102:	81 50       	subi	r24, 0x01	; 1
    4104:	8a 83       	std	Y+2, r24	; 0x02
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
    4106:	8c 81       	ldd	r24, Y+4	; 0x04
    4108:	9d 81       	ldd	r25, Y+5	; 0x05
    410a:	ae 81       	ldd	r26, Y+6	; 0x06
    410c:	bf 81       	ldd	r27, Y+7	; 0x07
    410e:	00 97       	sbiw	r24, 0x00	; 0
    4110:	a1 05       	cpc	r26, r1
    4112:	b1 05       	cpc	r27, r1
    4114:	91 f6       	brne	.-92     	; 0x40ba <LCD_enu_WriteIntegerNum+0x146>
    4116:	06 c0       	rjmp	.+12     	; 0x4124 <LCD_enu_WriteIntegerNum+0x1b0>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    4118:	80 e3       	ldi	r24, 0x30	; 48
    411a:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    411e:	8a 81       	ldd	r24, Y+2	; 0x02
    4120:	81 50       	subi	r24, 0x01	; 1
    4122:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    4124:	8a 81       	ldd	r24, Y+2	; 0x02
    4126:	88 23       	and	r24, r24
    4128:	b9 f7       	brne	.-18     	; 0x4118 <LCD_enu_WriteIntegerNum+0x1a4>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    412a:	1b 82       	std	Y+3, r1	; 0x03
    412c:	02 c0       	rjmp	.+4      	; 0x4132 <LCD_enu_WriteIntegerNum+0x1be>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    412e:	82 e0       	ldi	r24, 0x02	; 2
    4130:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    4132:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4134:	2e 96       	adiw	r28, 0x0e	; 14
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	f8 94       	cli
    413a:	de bf       	out	0x3e, r29	; 62
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	cd bf       	out	0x3d, r28	; 61
    4140:	cf 91       	pop	r28
    4142:	df 91       	pop	r29
    4144:	0f 91       	pop	r16
    4146:	08 95       	ret

00004148 <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    4148:	0f 93       	push	r16
    414a:	df 93       	push	r29
    414c:	cf 93       	push	r28
    414e:	cd b7       	in	r28, 0x3d	; 61
    4150:	de b7       	in	r29, 0x3e	; 62
    4152:	63 97       	sbiw	r28, 0x13	; 19
    4154:	0f b6       	in	r0, 0x3f	; 63
    4156:	f8 94       	cli
    4158:	de bf       	out	0x3e, r29	; 62
    415a:	0f be       	out	0x3f, r0	; 63
    415c:	cd bf       	out	0x3d, r28	; 61
    415e:	6d 87       	std	Y+13, r22	; 0x0d
    4160:	7e 87       	std	Y+14, r23	; 0x0e
    4162:	8f 87       	std	Y+15, r24	; 0x0f
    4164:	98 8b       	std	Y+16, r25	; 0x10
    4166:	49 8b       	std	Y+17, r20	; 0x11
    4168:	2a 8b       	std	Y+18, r18	; 0x12
    416a:	0b 8b       	std	Y+19, r16	; 0x13
    u8 Local_u8_ErrorFlag = ES_NOK;
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	88 87       	std	Y+8, r24	; 0x08

    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    4170:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = 0;
    4172:	1a 82       	std	Y+2, r1	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    4174:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    4176:	6d 85       	ldd	r22, Y+13	; 0x0d
    4178:	7e 85       	ldd	r23, Y+14	; 0x0e
    417a:	8f 85       	ldd	r24, Y+15	; 0x0f
    417c:	98 89       	ldd	r25, Y+16	; 0x10
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	40 e0       	ldi	r20, 0x00	; 0
    4184:	50 e0       	ldi	r21, 0x00	; 0
    4186:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    418a:	88 23       	and	r24, r24
    418c:	5c f4       	brge	.+22     	; 0x41a4 <LCD_enu_WriteFloatNum+0x5c>
    {
        local_u8_NegativeFlag = True;
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    4192:	8d 85       	ldd	r24, Y+13	; 0x0d
    4194:	9e 85       	ldd	r25, Y+14	; 0x0e
    4196:	af 85       	ldd	r26, Y+15	; 0x0f
    4198:	b8 89       	ldd	r27, Y+16	; 0x10
    419a:	b0 58       	subi	r27, 0x80	; 128
    419c:	8d 87       	std	Y+13, r24	; 0x0d
    419e:	9e 87       	std	Y+14, r25	; 0x0e
    41a0:	af 87       	std	Y+15, r26	; 0x0f
    41a2:	b8 8b       	std	Y+16, r27	; 0x10
    }


    Local_u32_WholeDigits = Copy_f32_Num;
    41a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    41a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    41a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41aa:	98 89       	ldd	r25, Y+16	; 0x10
    41ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b0:	dc 01       	movw	r26, r24
    41b2:	cb 01       	movw	r24, r22
    41b4:	89 87       	std	Y+9, r24	; 0x09
    41b6:	9a 87       	std	Y+10, r25	; 0x0a
    41b8:	ab 87       	std	Y+11, r26	; 0x0b
    41ba:	bc 87       	std	Y+12, r27	; 0x0c

    Local_f32_DecimalDigits = Copy_f32_Num - (f32)(Local_u32_WholeDigits);
    41bc:	89 85       	ldd	r24, Y+9	; 0x09
    41be:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    41c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    41c4:	bc 01       	movw	r22, r24
    41c6:	cd 01       	movw	r24, r26
    41c8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
    41cc:	9b 01       	movw	r18, r22
    41ce:	ac 01       	movw	r20, r24
    41d0:	6d 85       	ldd	r22, Y+13	; 0x0d
    41d2:	7e 85       	ldd	r23, Y+14	; 0x0e
    41d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41d6:	98 89       	ldd	r25, Y+16	; 0x10
    41d8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    41dc:	dc 01       	movw	r26, r24
    41de:	cb 01       	movw	r24, r22
    41e0:	8c 83       	std	Y+4, r24	; 0x04
    41e2:	9d 83       	std	Y+5, r25	; 0x05
    41e4:	ae 83       	std	Y+6, r26	; 0x06
    41e6:	bf 83       	std	Y+7, r27	; 0x07
   
    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    41e8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ea:	8f 5f       	subi	r24, 0xFF	; 255
    41ec:	8b 83       	std	Y+3, r24	; 0x03
        Local_u32_WholeDigits  /= 10;
    41ee:	89 85       	ldd	r24, Y+9	; 0x09
    41f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    41f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    41f6:	2a e0       	ldi	r18, 0x0A	; 10
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	40 e0       	ldi	r20, 0x00	; 0
    41fc:	50 e0       	ldi	r21, 0x00	; 0
    41fe:	bc 01       	movw	r22, r24
    4200:	cd 01       	movw	r24, r26
    4202:	0e 94 c3 29 	call	0x5386	; 0x5386 <__udivmodsi4>
    4206:	da 01       	movw	r26, r20
    4208:	c9 01       	movw	r24, r18
    420a:	89 87       	std	Y+9, r24	; 0x09
    420c:	9a 87       	std	Y+10, r25	; 0x0a
    420e:	ab 87       	std	Y+11, r26	; 0x0b
    4210:	bc 87       	std	Y+12, r27	; 0x0c

    }while(Local_u32_WholeDigits);
    4212:	89 85       	ldd	r24, Y+9	; 0x09
    4214:	9a 85       	ldd	r25, Y+10	; 0x0a
    4216:	ab 85       	ldd	r26, Y+11	; 0x0b
    4218:	bc 85       	ldd	r27, Y+12	; 0x0c
    421a:	00 97       	sbiw	r24, 0x00	; 0
    421c:	a1 05       	cpc	r26, r1
    421e:	b1 05       	cpc	r27, r1
    4220:	19 f7       	brne	.-58     	; 0x41e8 <LCD_enu_WriteFloatNum+0xa0>

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	61 e0       	ldi	r22, 0x01	; 1
    4226:	41 e0       	ldi	r20, 0x01	; 1
    4228:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    422c:	19 86       	std	Y+9, r1	; 0x09
    422e:	1a 86       	std	Y+10, r1	; 0x0a
    4230:	1b 86       	std	Y+11, r1	; 0x0b
    4232:	1c 86       	std	Y+12, r1	; 0x0c
    4234:	1f c0       	rjmp	.+62     	; 0x4274 <LCD_enu_WriteFloatNum+0x12c>
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    {
        Local_f32_DecimalDigits *= 10;
    4236:	6c 81       	ldd	r22, Y+4	; 0x04
    4238:	7d 81       	ldd	r23, Y+5	; 0x05
    423a:	8e 81       	ldd	r24, Y+6	; 0x06
    423c:	9f 81       	ldd	r25, Y+7	; 0x07
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	40 e2       	ldi	r20, 0x20	; 32
    4244:	51 e4       	ldi	r21, 0x41	; 65
    4246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	8c 83       	std	Y+4, r24	; 0x04
    4250:	9d 83       	std	Y+5, r25	; 0x05
    4252:	ae 83       	std	Y+6, r26	; 0x06
    4254:	bf 83       	std	Y+7, r27	; 0x07
        Local_u32_WholeDigits = Local_f32_DecimalDigits;
    4256:	6c 81       	ldd	r22, Y+4	; 0x04
    4258:	7d 81       	ldd	r23, Y+5	; 0x05
    425a:	8e 81       	ldd	r24, Y+6	; 0x06
    425c:	9f 81       	ldd	r25, Y+7	; 0x07
    425e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	89 87       	std	Y+9, r24	; 0x09
    4268:	9a 87       	std	Y+10, r25	; 0x0a
    426a:	ab 87       	std	Y+11, r26	; 0x0b
    426c:	bc 87       	std	Y+12, r27	; 0x0c
        Local_u8_DecimalDigitCount++;
    426e:	8a 81       	ldd	r24, Y+2	; 0x02
    4270:	8f 5f       	subi	r24, 0xFF	; 255
    4272:	8a 83       	std	Y+2, r24	; 0x02

    
    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    //Counting decimal digits
    Local_u32_WholeDigits = 0;
    while((Local_f32_DecimalDigits - (f32)Local_u32_WholeDigits) >= LCD_FLOAT_ERROR)
    4274:	89 85       	ldd	r24, Y+9	; 0x09
    4276:	9a 85       	ldd	r25, Y+10	; 0x0a
    4278:	ab 85       	ldd	r26, Y+11	; 0x0b
    427a:	bc 85       	ldd	r27, Y+12	; 0x0c
    427c:	bc 01       	movw	r22, r24
    427e:	cd 01       	movw	r24, r26
    4280:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
    4284:	9b 01       	movw	r18, r22
    4286:	ac 01       	movw	r20, r24
    4288:	6c 81       	ldd	r22, Y+4	; 0x04
    428a:	7d 81       	ldd	r23, Y+5	; 0x05
    428c:	8e 81       	ldd	r24, Y+6	; 0x06
    428e:	9f 81       	ldd	r25, Y+7	; 0x07
    4290:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4294:	dc 01       	movw	r26, r24
    4296:	cb 01       	movw	r24, r22
    4298:	bc 01       	movw	r22, r24
    429a:	cd 01       	movw	r24, r26
    429c:	2c ea       	ldi	r18, 0xAC	; 172
    429e:	35 ec       	ldi	r19, 0xC5	; 197
    42a0:	47 e2       	ldi	r20, 0x27	; 39
    42a2:	57 e3       	ldi	r21, 0x37	; 55
    42a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
    42a8:	88 23       	and	r24, r24
    42aa:	2c f6       	brge	.-118    	; 0x4236 <LCD_enu_WriteFloatNum+0xee>
        Local_u8_DecimalDigitCount++;
        
    
    }

    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && ((Local_u32_WholeDigits + Local_u8_DecimalDigitCount) <= LCD_MAX_INTEGER_LENGTH))
    42ac:	89 89       	ldd	r24, Y+17	; 0x11
    42ae:	88 23       	and	r24, r24
    42b0:	09 f4       	brne	.+2      	; 0x42b4 <LCD_enu_WriteFloatNum+0x16c>
    42b2:	fd c0       	rjmp	.+506    	; 0x44ae <LCD_enu_WriteFloatNum+0x366>
    42b4:	89 89       	ldd	r24, Y+17	; 0x11
    42b6:	83 30       	cpi	r24, 0x03	; 3
    42b8:	08 f0       	brcs	.+2      	; 0x42bc <LCD_enu_WriteFloatNum+0x174>
    42ba:	f9 c0       	rjmp	.+498    	; 0x44ae <LCD_enu_WriteFloatNum+0x366>
    42bc:	8a 89       	ldd	r24, Y+18	; 0x12
    42be:	88 23       	and	r24, r24
    42c0:	09 f4       	brne	.+2      	; 0x42c4 <LCD_enu_WriteFloatNum+0x17c>
    42c2:	f5 c0       	rjmp	.+490    	; 0x44ae <LCD_enu_WriteFloatNum+0x366>
    42c4:	8a 89       	ldd	r24, Y+18	; 0x12
    42c6:	81 31       	cpi	r24, 0x11	; 17
    42c8:	08 f0       	brcs	.+2      	; 0x42cc <LCD_enu_WriteFloatNum+0x184>
    42ca:	f1 c0       	rjmp	.+482    	; 0x44ae <LCD_enu_WriteFloatNum+0x366>
    42cc:	8b 89       	ldd	r24, Y+19	; 0x13
    42ce:	85 30       	cpi	r24, 0x05	; 5
    42d0:	08 f0       	brcs	.+2      	; 0x42d4 <LCD_enu_WriteFloatNum+0x18c>
    42d2:	ed c0       	rjmp	.+474    	; 0x44ae <LCD_enu_WriteFloatNum+0x366>
    42d4:	8a 81       	ldd	r24, Y+2	; 0x02
    42d6:	28 2f       	mov	r18, r24
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	40 e0       	ldi	r20, 0x00	; 0
    42dc:	50 e0       	ldi	r21, 0x00	; 0
    42de:	89 85       	ldd	r24, Y+9	; 0x09
    42e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e2:	ab 85       	ldd	r26, Y+11	; 0x0b
    42e4:	bc 85       	ldd	r27, Y+12	; 0x0c
    42e6:	82 0f       	add	r24, r18
    42e8:	93 1f       	adc	r25, r19
    42ea:	a4 1f       	adc	r26, r20
    42ec:	b5 1f       	adc	r27, r21
    42ee:	81 31       	cpi	r24, 0x11	; 17
    42f0:	91 05       	cpc	r25, r1
    42f2:	a1 05       	cpc	r26, r1
    42f4:	b1 05       	cpc	r27, r1
    42f6:	08 f0       	brcs	.+2      	; 0x42fa <LCD_enu_WriteFloatNum+0x1b2>
    42f8:	da c0       	rjmp	.+436    	; 0x44ae <LCD_enu_WriteFloatNum+0x366>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	61 e0       	ldi	r22, 0x01	; 1
    42fe:	40 e0       	ldi	r20, 0x00	; 0
    4300:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    4304:	8b 89       	ldd	r24, Y+19	; 0x13
    4306:	88 2f       	mov	r24, r24
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	9c 01       	movw	r18, r24
    430c:	21 50       	subi	r18, 0x01	; 1
    430e:	30 40       	sbci	r19, 0x00	; 0
    4310:	89 89       	ldd	r24, Y+17	; 0x11
    4312:	88 2f       	mov	r24, r24
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	88 0f       	add	r24, r24
    431a:	99 1f       	adc	r25, r25
    431c:	88 0f       	add	r24, r24
    431e:	99 1f       	adc	r25, r25
    4320:	82 0f       	add	r24, r18
    4322:	93 1f       	adc	r25, r19
    4324:	82 95       	swap	r24
    4326:	92 95       	swap	r25
    4328:	90 7f       	andi	r25, 0xF0	; 240
    432a:	98 27       	eor	r25, r24
    432c:	80 7f       	andi	r24, 0xF0	; 240
    432e:	98 27       	eor	r25, r24
    4330:	98 2f       	mov	r25, r24
    4332:	8a 89       	ldd	r24, Y+18	; 0x12
    4334:	89 0f       	add	r24, r25
    4336:	81 58       	subi	r24, 0x81	; 129
    4338:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
        
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	61 e0       	ldi	r22, 0x01	; 1
    4340:	41 e0       	ldi	r20, 0x01	; 1
    4342:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    4346:	89 81       	ldd	r24, Y+1	; 0x01
    4348:	88 23       	and	r24, r24
    434a:	19 f0       	breq	.+6      	; 0x4352 <LCD_enu_WriteFloatNum+0x20a>
        {
            enu_PassByteAndLatch('-');
    434c:	8d e2       	ldi	r24, 0x2D	; 45
    434e:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
        }

        //A] Printing whole digits 
        Local_u32_WholeDigits = Copy_f32_Num;
    4352:	6d 85       	ldd	r22, Y+13	; 0x0d
    4354:	7e 85       	ldd	r23, Y+14	; 0x0e
    4356:	8f 85       	ldd	r24, Y+15	; 0x0f
    4358:	98 89       	ldd	r25, Y+16	; 0x10
    435a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	89 87       	std	Y+9, r24	; 0x09
    4364:	9a 87       	std	Y+10, r25	; 0x0a
    4366:	ab 87       	std	Y+11, r26	; 0x0b
    4368:	bc 87       	std	Y+12, r27	; 0x0c
        enu_ReverseInteger(&Local_u32_WholeDigits);
    436a:	ce 01       	movw	r24, r28
    436c:	09 96       	adiw	r24, 0x09	; 9
    436e:	0e 94 02 25 	call	0x4a04	; 0x4a04 <enu_ReverseInteger>


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	61 e0       	ldi	r22, 0x01	; 1
    4376:	41 e0       	ldi	r20, 0x01	; 1
    4378:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    437c:	26 c0       	rjmp	.+76     	; 0x43ca <LCD_enu_WriteFloatNum+0x282>
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    437e:	89 85       	ldd	r24, Y+9	; 0x09
    4380:	9a 85       	ldd	r25, Y+10	; 0x0a
    4382:	ab 85       	ldd	r26, Y+11	; 0x0b
    4384:	bc 85       	ldd	r27, Y+12	; 0x0c
    4386:	2a e0       	ldi	r18, 0x0A	; 10
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	40 e0       	ldi	r20, 0x00	; 0
    438c:	50 e0       	ldi	r21, 0x00	; 0
    438e:	bc 01       	movw	r22, r24
    4390:	cd 01       	movw	r24, r26
    4392:	0e 94 c3 29 	call	0x5386	; 0x5386 <__udivmodsi4>
    4396:	dc 01       	movw	r26, r24
    4398:	cb 01       	movw	r24, r22
    439a:	80 5d       	subi	r24, 0xD0	; 208
    439c:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
            Local_u32_WholeDigits /= 10;
    43a0:	89 85       	ldd	r24, Y+9	; 0x09
    43a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a4:	ab 85       	ldd	r26, Y+11	; 0x0b
    43a6:	bc 85       	ldd	r27, Y+12	; 0x0c
    43a8:	2a e0       	ldi	r18, 0x0A	; 10
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	40 e0       	ldi	r20, 0x00	; 0
    43ae:	50 e0       	ldi	r21, 0x00	; 0
    43b0:	bc 01       	movw	r22, r24
    43b2:	cd 01       	movw	r24, r26
    43b4:	0e 94 c3 29 	call	0x5386	; 0x5386 <__udivmodsi4>
    43b8:	da 01       	movw	r26, r20
    43ba:	c9 01       	movw	r24, r18
    43bc:	89 87       	std	Y+9, r24	; 0x09
    43be:	9a 87       	std	Y+10, r25	; 0x0a
    43c0:	ab 87       	std	Y+11, r26	; 0x0b
    43c2:	bc 87       	std	Y+12, r27	; 0x0c
            Local_u8_WholeDigitCount--;
    43c4:	8b 81       	ldd	r24, Y+3	; 0x03
    43c6:	81 50       	subi	r24, 0x01	; 1
    43c8:	8b 83       	std	Y+3, r24	; 0x03


        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    43ca:	89 85       	ldd	r24, Y+9	; 0x09
    43cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ce:	ab 85       	ldd	r26, Y+11	; 0x0b
    43d0:	bc 85       	ldd	r27, Y+12	; 0x0c
    43d2:	00 97       	sbiw	r24, 0x00	; 0
    43d4:	a1 05       	cpc	r26, r1
    43d6:	b1 05       	cpc	r27, r1
    43d8:	91 f6       	brne	.-92     	; 0x437e <LCD_enu_WriteFloatNum+0x236>
    43da:	06 c0       	rjmp	.+12     	; 0x43e8 <LCD_enu_WriteFloatNum+0x2a0>
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    43dc:	80 e3       	ldi	r24, 0x30	; 48
    43de:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
            Local_u8_WholeDigitCount--;
    43e2:	8b 81       	ldd	r24, Y+3	; 0x03
    43e4:	81 50       	subi	r24, 0x01	; 1
    43e6:	8b 83       	std	Y+3, r24	; 0x03
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
            Local_u32_WholeDigits /= 10;
            Local_u8_WholeDigitCount--;
        }
        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    43e8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ea:	88 23       	and	r24, r24
    43ec:	b9 f7       	brne	.-18     	; 0x43dc <LCD_enu_WriteFloatNum+0x294>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    43ee:	6c 81       	ldd	r22, Y+4	; 0x04
    43f0:	7d 81       	ldd	r23, Y+5	; 0x05
    43f2:	8e 81       	ldd	r24, Y+6	; 0x06
    43f4:	9f 81       	ldd	r25, Y+7	; 0x07
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	40 e0       	ldi	r20, 0x00	; 0
    43fc:	50 e0       	ldi	r21, 0x00	; 0
    43fe:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    4402:	88 23       	and	r24, r24
    4404:	09 f4       	brne	.+2      	; 0x4408 <LCD_enu_WriteFloatNum+0x2c0>
    4406:	51 c0       	rjmp	.+162    	; 0x44aa <LCD_enu_WriteFloatNum+0x362>
        {
            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	61 e0       	ldi	r22, 0x01	; 1
    440c:	41 e0       	ldi	r20, 0x01	; 1
    440e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    4412:	8e e2       	ldi	r24, 0x2E	; 46
    4414:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>

            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
    4418:	6c 81       	ldd	r22, Y+4	; 0x04
    441a:	7d 81       	ldd	r23, Y+5	; 0x05
    441c:	8e 81       	ldd	r24, Y+6	; 0x06
    441e:	9f 81       	ldd	r25, Y+7	; 0x07
    4420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4424:	dc 01       	movw	r26, r24
    4426:	cb 01       	movw	r24, r22
    4428:	89 87       	std	Y+9, r24	; 0x09
    442a:	9a 87       	std	Y+10, r25	; 0x0a
    442c:	ab 87       	std	Y+11, r26	; 0x0b
    442e:	bc 87       	std	Y+12, r27	; 0x0c
            enu_ReverseInteger(&Local_u32_WholeDigits);
    4430:	ce 01       	movw	r24, r28
    4432:	09 96       	adiw	r24, 0x09	; 9
    4434:	0e 94 02 25 	call	0x4a04	; 0x4a04 <enu_ReverseInteger>
    4438:	26 c0       	rjmp	.+76     	; 0x4486 <LCD_enu_WriteFloatNum+0x33e>
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
            {
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    443a:	89 85       	ldd	r24, Y+9	; 0x09
    443c:	9a 85       	ldd	r25, Y+10	; 0x0a
    443e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4440:	bc 85       	ldd	r27, Y+12	; 0x0c
    4442:	2a e0       	ldi	r18, 0x0A	; 10
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	40 e0       	ldi	r20, 0x00	; 0
    4448:	50 e0       	ldi	r21, 0x00	; 0
    444a:	bc 01       	movw	r22, r24
    444c:	cd 01       	movw	r24, r26
    444e:	0e 94 c3 29 	call	0x5386	; 0x5386 <__udivmodsi4>
    4452:	dc 01       	movw	r26, r24
    4454:	cb 01       	movw	r24, r22
    4456:	80 5d       	subi	r24, 0xD0	; 208
    4458:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
                Local_u32_WholeDigits /= 10;
    445c:	89 85       	ldd	r24, Y+9	; 0x09
    445e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4460:	ab 85       	ldd	r26, Y+11	; 0x0b
    4462:	bc 85       	ldd	r27, Y+12	; 0x0c
    4464:	2a e0       	ldi	r18, 0x0A	; 10
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	40 e0       	ldi	r20, 0x00	; 0
    446a:	50 e0       	ldi	r21, 0x00	; 0
    446c:	bc 01       	movw	r22, r24
    446e:	cd 01       	movw	r24, r26
    4470:	0e 94 c3 29 	call	0x5386	; 0x5386 <__udivmodsi4>
    4474:	da 01       	movw	r26, r20
    4476:	c9 01       	movw	r24, r18
    4478:	89 87       	std	Y+9, r24	; 0x09
    447a:	9a 87       	std	Y+10, r25	; 0x0a
    447c:	ab 87       	std	Y+11, r26	; 0x0b
    447e:	bc 87       	std	Y+12, r27	; 0x0c
                Local_u8_DecimalDigitCount--;
    4480:	8a 81       	ldd	r24, Y+2	; 0x02
    4482:	81 50       	subi	r24, 0x01	; 1
    4484:	8a 83       	std	Y+2, r24	; 0x02
            //Reversing Digits (Using Local_u32_Wholedigits for safety) 'u32'
            Local_u32_WholeDigits = Local_f32_DecimalDigits;
            enu_ReverseInteger(&Local_u32_WholeDigits);
            
            //Printing one digit at a time 
            while(Local_u32_WholeDigits)
    4486:	89 85       	ldd	r24, Y+9	; 0x09
    4488:	9a 85       	ldd	r25, Y+10	; 0x0a
    448a:	ab 85       	ldd	r26, Y+11	; 0x0b
    448c:	bc 85       	ldd	r27, Y+12	; 0x0c
    448e:	00 97       	sbiw	r24, 0x00	; 0
    4490:	a1 05       	cpc	r26, r1
    4492:	b1 05       	cpc	r27, r1
    4494:	91 f6       	brne	.-92     	; 0x443a <LCD_enu_WriteFloatNum+0x2f2>
    4496:	06 c0       	rjmp	.+12     	; 0x44a4 <LCD_enu_WriteFloatNum+0x35c>
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    4498:	80 e3       	ldi	r24, 0x30	; 48
    449a:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    449e:	8a 81       	ldd	r24, Y+2	; 0x02
    44a0:	81 50       	subi	r24, 0x01	; 1
    44a2:	8a 83       	std	Y+2, r24	; 0x02
                enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
                Local_u32_WholeDigits /= 10;
                Local_u8_DecimalDigitCount--;
            }
            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    44a4:	8a 81       	ldd	r24, Y+2	; 0x02
    44a6:	88 23       	and	r24, r24
    44a8:	b9 f7       	brne	.-18     	; 0x4498 <LCD_enu_WriteFloatNum+0x350>
            
            

        }

        Local_u8_ErrorFlag = ES_OK;
    44aa:	18 86       	std	Y+8, r1	; 0x08
    44ac:	02 c0       	rjmp	.+4      	; 0x44b2 <LCD_enu_WriteFloatNum+0x36a>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    44ae:	82 e0       	ldi	r24, 0x02	; 2
    44b0:	88 87       	std	Y+8, r24	; 0x08
    }

    return Local_u8_ErrorFlag;
    44b2:	88 85       	ldd	r24, Y+8	; 0x08

}
    44b4:	63 96       	adiw	r28, 0x13	; 19
    44b6:	0f b6       	in	r0, 0x3f	; 63
    44b8:	f8 94       	cli
    44ba:	de bf       	out	0x3e, r29	; 62
    44bc:	0f be       	out	0x3f, r0	; 63
    44be:	cd bf       	out	0x3d, r28	; 61
    44c0:	cf 91       	pop	r28
    44c2:	df 91       	pop	r29
    44c4:	0f 91       	pop	r16
    44c6:	08 95       	ret

000044c8 <enu_PassByteAndLatch>:

//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    44c8:	df 93       	push	r29
    44ca:	cf 93       	push	r28
    44cc:	cd b7       	in	r28, 0x3d	; 61
    44ce:	de b7       	in	r29, 0x3e	; 62
    44d0:	ac 97       	sbiw	r28, 0x2c	; 44
    44d2:	0f b6       	in	r0, 0x3f	; 63
    44d4:	f8 94       	cli
    44d6:	de bf       	out	0x3e, r29	; 62
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	cd bf       	out	0x3d, r28	; 61
    44dc:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	62 e0       	ldi	r22, 0x02	; 2
    44e6:	40 e0       	ldi	r20, 0x00	; 0
    44e8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	63 e0       	ldi	r22, 0x03	; 3
    44f0:	40 e0       	ldi	r20, 0x00	; 0
    44f2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    44f6:	8c a5       	ldd	r24, Y+44	; 0x2c
    44f8:	98 2f       	mov	r25, r24
    44fa:	99 1f       	adc	r25, r25
    44fc:	99 27       	eor	r25, r25
    44fe:	99 1f       	adc	r25, r25
    4500:	80 e0       	ldi	r24, 0x00	; 0
    4502:	67 e0       	ldi	r22, 0x07	; 7
    4504:	49 2f       	mov	r20, r25
    4506:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    450a:	8c a5       	ldd	r24, Y+44	; 0x2c
    450c:	82 95       	swap	r24
    450e:	86 95       	lsr	r24
    4510:	86 95       	lsr	r24
    4512:	83 70       	andi	r24, 0x03	; 3
    4514:	98 2f       	mov	r25, r24
    4516:	91 70       	andi	r25, 0x01	; 1
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	66 e0       	ldi	r22, 0x06	; 6
    451c:	49 2f       	mov	r20, r25
    451e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    4522:	8c a5       	ldd	r24, Y+44	; 0x2c
    4524:	82 95       	swap	r24
    4526:	86 95       	lsr	r24
    4528:	87 70       	andi	r24, 0x07	; 7
    452a:	98 2f       	mov	r25, r24
    452c:	91 70       	andi	r25, 0x01	; 1
    452e:	80 e0       	ldi	r24, 0x00	; 0
    4530:	65 e0       	ldi	r22, 0x05	; 5
    4532:	49 2f       	mov	r20, r25
    4534:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    4538:	8c a5       	ldd	r24, Y+44	; 0x2c
    453a:	82 95       	swap	r24
    453c:	8f 70       	andi	r24, 0x0F	; 15
    453e:	98 2f       	mov	r25, r24
    4540:	91 70       	andi	r25, 0x01	; 1
    4542:	80 e0       	ldi	r24, 0x00	; 0
    4544:	64 e0       	ldi	r22, 0x04	; 4
    4546:	49 2f       	mov	r20, r25
    4548:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	63 e0       	ldi	r22, 0x03	; 3
    4550:	41 e0       	ldi	r20, 0x01	; 1
    4552:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    4556:	80 e0       	ldi	r24, 0x00	; 0
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	a0 e8       	ldi	r26, 0x80	; 128
    455c:	bf e3       	ldi	r27, 0x3F	; 63
    455e:	8f a3       	std	Y+39, r24	; 0x27
    4560:	98 a7       	std	Y+40, r25	; 0x28
    4562:	a9 a7       	std	Y+41, r26	; 0x29
    4564:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4566:	6f a1       	ldd	r22, Y+39	; 0x27
    4568:	78 a5       	ldd	r23, Y+40	; 0x28
    456a:	89 a5       	ldd	r24, Y+41	; 0x29
    456c:	9a a5       	ldd	r25, Y+42	; 0x2a
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	4a e7       	ldi	r20, 0x7A	; 122
    4574:	55 e4       	ldi	r21, 0x45	; 69
    4576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457a:	dc 01       	movw	r26, r24
    457c:	cb 01       	movw	r24, r22
    457e:	8b a3       	std	Y+35, r24	; 0x23
    4580:	9c a3       	std	Y+36, r25	; 0x24
    4582:	ad a3       	std	Y+37, r26	; 0x25
    4584:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4586:	6b a1       	ldd	r22, Y+35	; 0x23
    4588:	7c a1       	ldd	r23, Y+36	; 0x24
    458a:	8d a1       	ldd	r24, Y+37	; 0x25
    458c:	9e a1       	ldd	r25, Y+38	; 0x26
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	40 e8       	ldi	r20, 0x80	; 128
    4594:	5f e3       	ldi	r21, 0x3F	; 63
    4596:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    459a:	88 23       	and	r24, r24
    459c:	2c f4       	brge	.+10     	; 0x45a8 <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	9a a3       	std	Y+34, r25	; 0x22
    45a4:	89 a3       	std	Y+33, r24	; 0x21
    45a6:	3f c0       	rjmp	.+126    	; 0x4626 <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    45a8:	6b a1       	ldd	r22, Y+35	; 0x23
    45aa:	7c a1       	ldd	r23, Y+36	; 0x24
    45ac:	8d a1       	ldd	r24, Y+37	; 0x25
    45ae:	9e a1       	ldd	r25, Y+38	; 0x26
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	3f ef       	ldi	r19, 0xFF	; 255
    45b4:	4f e7       	ldi	r20, 0x7F	; 127
    45b6:	57 e4       	ldi	r21, 0x47	; 71
    45b8:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    45bc:	18 16       	cp	r1, r24
    45be:	4c f5       	brge	.+82     	; 0x4612 <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c0:	6f a1       	ldd	r22, Y+39	; 0x27
    45c2:	78 a5       	ldd	r23, Y+40	; 0x28
    45c4:	89 a5       	ldd	r24, Y+41	; 0x29
    45c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    45c8:	20 e0       	ldi	r18, 0x00	; 0
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	40 e2       	ldi	r20, 0x20	; 32
    45ce:	51 e4       	ldi	r21, 0x41	; 65
    45d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d4:	dc 01       	movw	r26, r24
    45d6:	cb 01       	movw	r24, r22
    45d8:	bc 01       	movw	r22, r24
    45da:	cd 01       	movw	r24, r26
    45dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	9a a3       	std	Y+34, r25	; 0x22
    45e6:	89 a3       	std	Y+33, r24	; 0x21
    45e8:	0f c0       	rjmp	.+30     	; 0x4608 <enu_PassByteAndLatch+0x140>
    45ea:	80 e9       	ldi	r24, 0x90	; 144
    45ec:	91 e0       	ldi	r25, 0x01	; 1
    45ee:	98 a3       	std	Y+32, r25	; 0x20
    45f0:	8f 8f       	std	Y+31, r24	; 0x1f
    45f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45f4:	98 a1       	ldd	r25, Y+32	; 0x20
    45f6:	01 97       	sbiw	r24, 0x01	; 1
    45f8:	f1 f7       	brne	.-4      	; 0x45f6 <enu_PassByteAndLatch+0x12e>
    45fa:	98 a3       	std	Y+32, r25	; 0x20
    45fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45fe:	89 a1       	ldd	r24, Y+33	; 0x21
    4600:	9a a1       	ldd	r25, Y+34	; 0x22
    4602:	01 97       	sbiw	r24, 0x01	; 1
    4604:	9a a3       	std	Y+34, r25	; 0x22
    4606:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4608:	89 a1       	ldd	r24, Y+33	; 0x21
    460a:	9a a1       	ldd	r25, Y+34	; 0x22
    460c:	00 97       	sbiw	r24, 0x00	; 0
    460e:	69 f7       	brne	.-38     	; 0x45ea <enu_PassByteAndLatch+0x122>
    4610:	14 c0       	rjmp	.+40     	; 0x463a <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4612:	6b a1       	ldd	r22, Y+35	; 0x23
    4614:	7c a1       	ldd	r23, Y+36	; 0x24
    4616:	8d a1       	ldd	r24, Y+37	; 0x25
    4618:	9e a1       	ldd	r25, Y+38	; 0x26
    461a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	9a a3       	std	Y+34, r25	; 0x22
    4624:	89 a3       	std	Y+33, r24	; 0x21
    4626:	89 a1       	ldd	r24, Y+33	; 0x21
    4628:	9a a1       	ldd	r25, Y+34	; 0x22
    462a:	9e 8f       	std	Y+30, r25	; 0x1e
    462c:	8d 8f       	std	Y+29, r24	; 0x1d
    462e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4630:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4632:	01 97       	sbiw	r24, 0x01	; 1
    4634:	f1 f7       	brne	.-4      	; 0x4632 <enu_PassByteAndLatch+0x16a>
    4636:	9e 8f       	std	Y+30, r25	; 0x1e
    4638:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	63 e0       	ldi	r22, 0x03	; 3
    463e:	40 e0       	ldi	r20, 0x00	; 0
    4640:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    4644:	8c a5       	ldd	r24, Y+44	; 0x2c
    4646:	86 95       	lsr	r24
    4648:	86 95       	lsr	r24
    464a:	86 95       	lsr	r24
    464c:	98 2f       	mov	r25, r24
    464e:	91 70       	andi	r25, 0x01	; 1
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	67 e0       	ldi	r22, 0x07	; 7
    4654:	49 2f       	mov	r20, r25
    4656:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    465a:	8c a5       	ldd	r24, Y+44	; 0x2c
    465c:	86 95       	lsr	r24
    465e:	86 95       	lsr	r24
    4660:	98 2f       	mov	r25, r24
    4662:	91 70       	andi	r25, 0x01	; 1
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	66 e0       	ldi	r22, 0x06	; 6
    4668:	49 2f       	mov	r20, r25
    466a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    466e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4670:	86 95       	lsr	r24
    4672:	98 2f       	mov	r25, r24
    4674:	91 70       	andi	r25, 0x01	; 1
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	65 e0       	ldi	r22, 0x05	; 5
    467a:	49 2f       	mov	r20, r25
    467c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    4680:	8c a5       	ldd	r24, Y+44	; 0x2c
    4682:	98 2f       	mov	r25, r24
    4684:	91 70       	andi	r25, 0x01	; 1
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	64 e0       	ldi	r22, 0x04	; 4
    468a:	49 2f       	mov	r20, r25
    468c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	63 e0       	ldi	r22, 0x03	; 3
    4694:	41 e0       	ldi	r20, 0x01	; 1
    4696:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	a0 e8       	ldi	r26, 0x80	; 128
    46a0:	bf e3       	ldi	r27, 0x3F	; 63
    46a2:	89 8f       	std	Y+25, r24	; 0x19
    46a4:	9a 8f       	std	Y+26, r25	; 0x1a
    46a6:	ab 8f       	std	Y+27, r26	; 0x1b
    46a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46aa:	69 8d       	ldd	r22, Y+25	; 0x19
    46ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	4a e7       	ldi	r20, 0x7A	; 122
    46b8:	55 e4       	ldi	r21, 0x45	; 69
    46ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46be:	dc 01       	movw	r26, r24
    46c0:	cb 01       	movw	r24, r22
    46c2:	8d 8b       	std	Y+21, r24	; 0x15
    46c4:	9e 8b       	std	Y+22, r25	; 0x16
    46c6:	af 8b       	std	Y+23, r26	; 0x17
    46c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46ca:	6d 89       	ldd	r22, Y+21	; 0x15
    46cc:	7e 89       	ldd	r23, Y+22	; 0x16
    46ce:	8f 89       	ldd	r24, Y+23	; 0x17
    46d0:	98 8d       	ldd	r25, Y+24	; 0x18
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	40 e8       	ldi	r20, 0x80	; 128
    46d8:	5f e3       	ldi	r21, 0x3F	; 63
    46da:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    46de:	88 23       	and	r24, r24
    46e0:	2c f4       	brge	.+10     	; 0x46ec <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	9c 8b       	std	Y+20, r25	; 0x14
    46e8:	8b 8b       	std	Y+19, r24	; 0x13
    46ea:	3f c0       	rjmp	.+126    	; 0x476a <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    46ec:	6d 89       	ldd	r22, Y+21	; 0x15
    46ee:	7e 89       	ldd	r23, Y+22	; 0x16
    46f0:	8f 89       	ldd	r24, Y+23	; 0x17
    46f2:	98 8d       	ldd	r25, Y+24	; 0x18
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	3f ef       	ldi	r19, 0xFF	; 255
    46f8:	4f e7       	ldi	r20, 0x7F	; 127
    46fa:	57 e4       	ldi	r21, 0x47	; 71
    46fc:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    4700:	18 16       	cp	r1, r24
    4702:	4c f5       	brge	.+82     	; 0x4756 <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4704:	69 8d       	ldd	r22, Y+25	; 0x19
    4706:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4708:	8b 8d       	ldd	r24, Y+27	; 0x1b
    470a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	40 e2       	ldi	r20, 0x20	; 32
    4712:	51 e4       	ldi	r21, 0x41	; 65
    4714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4718:	dc 01       	movw	r26, r24
    471a:	cb 01       	movw	r24, r22
    471c:	bc 01       	movw	r22, r24
    471e:	cd 01       	movw	r24, r26
    4720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	9c 8b       	std	Y+20, r25	; 0x14
    472a:	8b 8b       	std	Y+19, r24	; 0x13
    472c:	0f c0       	rjmp	.+30     	; 0x474c <enu_PassByteAndLatch+0x284>
    472e:	80 e9       	ldi	r24, 0x90	; 144
    4730:	91 e0       	ldi	r25, 0x01	; 1
    4732:	9a 8b       	std	Y+18, r25	; 0x12
    4734:	89 8b       	std	Y+17, r24	; 0x11
    4736:	89 89       	ldd	r24, Y+17	; 0x11
    4738:	9a 89       	ldd	r25, Y+18	; 0x12
    473a:	01 97       	sbiw	r24, 0x01	; 1
    473c:	f1 f7       	brne	.-4      	; 0x473a <enu_PassByteAndLatch+0x272>
    473e:	9a 8b       	std	Y+18, r25	; 0x12
    4740:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4742:	8b 89       	ldd	r24, Y+19	; 0x13
    4744:	9c 89       	ldd	r25, Y+20	; 0x14
    4746:	01 97       	sbiw	r24, 0x01	; 1
    4748:	9c 8b       	std	Y+20, r25	; 0x14
    474a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    474c:	8b 89       	ldd	r24, Y+19	; 0x13
    474e:	9c 89       	ldd	r25, Y+20	; 0x14
    4750:	00 97       	sbiw	r24, 0x00	; 0
    4752:	69 f7       	brne	.-38     	; 0x472e <enu_PassByteAndLatch+0x266>
    4754:	14 c0       	rjmp	.+40     	; 0x477e <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4756:	6d 89       	ldd	r22, Y+21	; 0x15
    4758:	7e 89       	ldd	r23, Y+22	; 0x16
    475a:	8f 89       	ldd	r24, Y+23	; 0x17
    475c:	98 8d       	ldd	r25, Y+24	; 0x18
    475e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4762:	dc 01       	movw	r26, r24
    4764:	cb 01       	movw	r24, r22
    4766:	9c 8b       	std	Y+20, r25	; 0x14
    4768:	8b 8b       	std	Y+19, r24	; 0x13
    476a:	8b 89       	ldd	r24, Y+19	; 0x13
    476c:	9c 89       	ldd	r25, Y+20	; 0x14
    476e:	98 8b       	std	Y+16, r25	; 0x10
    4770:	8f 87       	std	Y+15, r24	; 0x0f
    4772:	8f 85       	ldd	r24, Y+15	; 0x0f
    4774:	98 89       	ldd	r25, Y+16	; 0x10
    4776:	01 97       	sbiw	r24, 0x01	; 1
    4778:	f1 f7       	brne	.-4      	; 0x4776 <enu_PassByteAndLatch+0x2ae>
    477a:	98 8b       	std	Y+16, r25	; 0x10
    477c:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	63 e0       	ldi	r22, 0x03	; 3
    4782:	40 e0       	ldi	r20, 0x00	; 0
    4784:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    4788:	80 e0       	ldi	r24, 0x00	; 0
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	a0 e0       	ldi	r26, 0x00	; 0
    478e:	b0 e4       	ldi	r27, 0x40	; 64
    4790:	8b 87       	std	Y+11, r24	; 0x0b
    4792:	9c 87       	std	Y+12, r25	; 0x0c
    4794:	ad 87       	std	Y+13, r26	; 0x0d
    4796:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4798:	6b 85       	ldd	r22, Y+11	; 0x0b
    479a:	7c 85       	ldd	r23, Y+12	; 0x0c
    479c:	8d 85       	ldd	r24, Y+13	; 0x0d
    479e:	9e 85       	ldd	r25, Y+14	; 0x0e
    47a0:	20 e0       	ldi	r18, 0x00	; 0
    47a2:	30 e0       	ldi	r19, 0x00	; 0
    47a4:	4a e7       	ldi	r20, 0x7A	; 122
    47a6:	55 e4       	ldi	r21, 0x45	; 69
    47a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ac:	dc 01       	movw	r26, r24
    47ae:	cb 01       	movw	r24, r22
    47b0:	8f 83       	std	Y+7, r24	; 0x07
    47b2:	98 87       	std	Y+8, r25	; 0x08
    47b4:	a9 87       	std	Y+9, r26	; 0x09
    47b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47b8:	6f 81       	ldd	r22, Y+7	; 0x07
    47ba:	78 85       	ldd	r23, Y+8	; 0x08
    47bc:	89 85       	ldd	r24, Y+9	; 0x09
    47be:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	40 e8       	ldi	r20, 0x80	; 128
    47c6:	5f e3       	ldi	r21, 0x3F	; 63
    47c8:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    47cc:	88 23       	and	r24, r24
    47ce:	2c f4       	brge	.+10     	; 0x47da <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	9e 83       	std	Y+6, r25	; 0x06
    47d6:	8d 83       	std	Y+5, r24	; 0x05
    47d8:	3f c0       	rjmp	.+126    	; 0x4858 <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    47da:	6f 81       	ldd	r22, Y+7	; 0x07
    47dc:	78 85       	ldd	r23, Y+8	; 0x08
    47de:	89 85       	ldd	r24, Y+9	; 0x09
    47e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	3f ef       	ldi	r19, 0xFF	; 255
    47e6:	4f e7       	ldi	r20, 0x7F	; 127
    47e8:	57 e4       	ldi	r21, 0x47	; 71
    47ea:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    47ee:	18 16       	cp	r1, r24
    47f0:	4c f5       	brge	.+82     	; 0x4844 <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    47f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    47f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    47f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	40 e2       	ldi	r20, 0x20	; 32
    4800:	51 e4       	ldi	r21, 0x41	; 65
    4802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	bc 01       	movw	r22, r24
    480c:	cd 01       	movw	r24, r26
    480e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4812:	dc 01       	movw	r26, r24
    4814:	cb 01       	movw	r24, r22
    4816:	9e 83       	std	Y+6, r25	; 0x06
    4818:	8d 83       	std	Y+5, r24	; 0x05
    481a:	0f c0       	rjmp	.+30     	; 0x483a <enu_PassByteAndLatch+0x372>
    481c:	80 e9       	ldi	r24, 0x90	; 144
    481e:	91 e0       	ldi	r25, 0x01	; 1
    4820:	9c 83       	std	Y+4, r25	; 0x04
    4822:	8b 83       	std	Y+3, r24	; 0x03
    4824:	8b 81       	ldd	r24, Y+3	; 0x03
    4826:	9c 81       	ldd	r25, Y+4	; 0x04
    4828:	01 97       	sbiw	r24, 0x01	; 1
    482a:	f1 f7       	brne	.-4      	; 0x4828 <enu_PassByteAndLatch+0x360>
    482c:	9c 83       	std	Y+4, r25	; 0x04
    482e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4830:	8d 81       	ldd	r24, Y+5	; 0x05
    4832:	9e 81       	ldd	r25, Y+6	; 0x06
    4834:	01 97       	sbiw	r24, 0x01	; 1
    4836:	9e 83       	std	Y+6, r25	; 0x06
    4838:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483a:	8d 81       	ldd	r24, Y+5	; 0x05
    483c:	9e 81       	ldd	r25, Y+6	; 0x06
    483e:	00 97       	sbiw	r24, 0x00	; 0
    4840:	69 f7       	brne	.-38     	; 0x481c <enu_PassByteAndLatch+0x354>
    4842:	14 c0       	rjmp	.+40     	; 0x486c <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4844:	6f 81       	ldd	r22, Y+7	; 0x07
    4846:	78 85       	ldd	r23, Y+8	; 0x08
    4848:	89 85       	ldd	r24, Y+9	; 0x09
    484a:	9a 85       	ldd	r25, Y+10	; 0x0a
    484c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	9e 83       	std	Y+6, r25	; 0x06
    4856:	8d 83       	std	Y+5, r24	; 0x05
    4858:	8d 81       	ldd	r24, Y+5	; 0x05
    485a:	9e 81       	ldd	r25, Y+6	; 0x06
    485c:	9a 83       	std	Y+2, r25	; 0x02
    485e:	89 83       	std	Y+1, r24	; 0x01
    4860:	89 81       	ldd	r24, Y+1	; 0x01
    4862:	9a 81       	ldd	r25, Y+2	; 0x02
    4864:	01 97       	sbiw	r24, 0x01	; 1
    4866:	f1 f7       	brne	.-4      	; 0x4864 <enu_PassByteAndLatch+0x39c>
    4868:	9a 83       	std	Y+2, r25	; 0x02
    486a:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    486c:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    486e:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    4870:	ac 96       	adiw	r28, 0x2c	; 44
    4872:	0f b6       	in	r0, 0x3f	; 63
    4874:	f8 94       	cli
    4876:	de bf       	out	0x3e, r29	; 62
    4878:	0f be       	out	0x3f, r0	; 63
    487a:	cd bf       	out	0x3d, r28	; 61
    487c:	cf 91       	pop	r28
    487e:	df 91       	pop	r29
    4880:	08 95       	ret

00004882 <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    4882:	df 93       	push	r29
    4884:	cf 93       	push	r28
    4886:	cd b7       	in	r28, 0x3d	; 61
    4888:	de b7       	in	r29, 0x3e	; 62
    488a:	27 97       	sbiw	r28, 0x07	; 7
    488c:	0f b6       	in	r0, 0x3f	; 63
    488e:	f8 94       	cli
    4890:	de bf       	out	0x3e, r29	; 62
    4892:	0f be       	out	0x3f, r0	; 63
    4894:	cd bf       	out	0x3d, r28	; 61
    4896:	9c 83       	std	Y+4, r25	; 0x04
    4898:	8b 83       	std	Y+3, r24	; 0x03
    489a:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    48a0:	8b 81       	ldd	r24, Y+3	; 0x03
    48a2:	9c 81       	ldd	r25, Y+4	; 0x04
    48a4:	00 97       	sbiw	r24, 0x00	; 0
    48a6:	09 f4       	brne	.+2      	; 0x48aa <enu_AddCustomCharacter+0x28>
    48a8:	79 c0       	rjmp	.+242    	; 0x499c <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    48aa:	8d 81       	ldd	r24, Y+5	; 0x05
    48ac:	88 30       	cpi	r24, 0x08	; 8
    48ae:	08 f0       	brcs	.+2      	; 0x48b2 <enu_AddCustomCharacter+0x30>
    48b0:	72 c0       	rjmp	.+228    	; 0x4996 <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    48b2:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    48b4:	81 e0       	ldi	r24, 0x01	; 1
    48b6:	61 e0       	ldi	r22, 0x01	; 1
    48b8:	40 e0       	ldi	r20, 0x00	; 0
    48ba:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    48be:	8d 81       	ldd	r24, Y+5	; 0x05
    48c0:	28 2f       	mov	r18, r24
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	3f 83       	std	Y+7, r19	; 0x07
    48c6:	2e 83       	std	Y+6, r18	; 0x06
    48c8:	8e 81       	ldd	r24, Y+6	; 0x06
    48ca:	9f 81       	ldd	r25, Y+7	; 0x07
    48cc:	83 30       	cpi	r24, 0x03	; 3
    48ce:	91 05       	cpc	r25, r1
    48d0:	a9 f1       	breq	.+106    	; 0x493c <enu_AddCustomCharacter+0xba>
    48d2:	2e 81       	ldd	r18, Y+6	; 0x06
    48d4:	3f 81       	ldd	r19, Y+7	; 0x07
    48d6:	24 30       	cpi	r18, 0x04	; 4
    48d8:	31 05       	cpc	r19, r1
    48da:	7c f4       	brge	.+30     	; 0x48fa <enu_AddCustomCharacter+0x78>
    48dc:	8e 81       	ldd	r24, Y+6	; 0x06
    48de:	9f 81       	ldd	r25, Y+7	; 0x07
    48e0:	81 30       	cpi	r24, 0x01	; 1
    48e2:	91 05       	cpc	r25, r1
    48e4:	19 f1       	breq	.+70     	; 0x492c <enu_AddCustomCharacter+0xaa>
    48e6:	2e 81       	ldd	r18, Y+6	; 0x06
    48e8:	3f 81       	ldd	r19, Y+7	; 0x07
    48ea:	22 30       	cpi	r18, 0x02	; 2
    48ec:	31 05       	cpc	r19, r1
    48ee:	14 f5       	brge	.+68     	; 0x4934 <enu_AddCustomCharacter+0xb2>
    48f0:	8e 81       	ldd	r24, Y+6	; 0x06
    48f2:	9f 81       	ldd	r25, Y+7	; 0x07
    48f4:	00 97       	sbiw	r24, 0x00	; 0
    48f6:	b1 f0       	breq	.+44     	; 0x4924 <enu_AddCustomCharacter+0xa2>
    48f8:	34 c0       	rjmp	.+104    	; 0x4962 <enu_AddCustomCharacter+0xe0>
    48fa:	2e 81       	ldd	r18, Y+6	; 0x06
    48fc:	3f 81       	ldd	r19, Y+7	; 0x07
    48fe:	25 30       	cpi	r18, 0x05	; 5
    4900:	31 05       	cpc	r19, r1
    4902:	21 f1       	breq	.+72     	; 0x494c <enu_AddCustomCharacter+0xca>
    4904:	8e 81       	ldd	r24, Y+6	; 0x06
    4906:	9f 81       	ldd	r25, Y+7	; 0x07
    4908:	85 30       	cpi	r24, 0x05	; 5
    490a:	91 05       	cpc	r25, r1
    490c:	dc f0       	brlt	.+54     	; 0x4944 <enu_AddCustomCharacter+0xc2>
    490e:	2e 81       	ldd	r18, Y+6	; 0x06
    4910:	3f 81       	ldd	r19, Y+7	; 0x07
    4912:	26 30       	cpi	r18, 0x06	; 6
    4914:	31 05       	cpc	r19, r1
    4916:	f1 f0       	breq	.+60     	; 0x4954 <enu_AddCustomCharacter+0xd2>
    4918:	8e 81       	ldd	r24, Y+6	; 0x06
    491a:	9f 81       	ldd	r25, Y+7	; 0x07
    491c:	87 30       	cpi	r24, 0x07	; 7
    491e:	91 05       	cpc	r25, r1
    4920:	e9 f0       	breq	.+58     	; 0x495c <enu_AddCustomCharacter+0xda>
    4922:	1f c0       	rjmp	.+62     	; 0x4962 <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    4924:	80 e4       	ldi	r24, 0x40	; 64
    4926:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
    492a:	1b c0       	rjmp	.+54     	; 0x4962 <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    492c:	88 e4       	ldi	r24, 0x48	; 72
    492e:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
    4932:	17 c0       	rjmp	.+46     	; 0x4962 <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    4934:	80 e5       	ldi	r24, 0x50	; 80
    4936:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
    493a:	13 c0       	rjmp	.+38     	; 0x4962 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    493c:	88 e5       	ldi	r24, 0x58	; 88
    493e:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
    4942:	0f c0       	rjmp	.+30     	; 0x4962 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    4944:	80 e6       	ldi	r24, 0x60	; 96
    4946:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
    494a:	0b c0       	rjmp	.+22     	; 0x4962 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    494c:	88 e6       	ldi	r24, 0x68	; 104
    494e:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
    4952:	07 c0       	rjmp	.+14     	; 0x4962 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    4954:	80 e7       	ldi	r24, 0x70	; 112
    4956:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
    495a:	03 c0       	rjmp	.+6      	; 0x4962 <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    495c:	88 e7       	ldi	r24, 0x78	; 120
    495e:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    4962:	81 e0       	ldi	r24, 0x01	; 1
    4964:	61 e0       	ldi	r22, 0x01	; 1
    4966:	41 e0       	ldi	r20, 0x01	; 1
    4968:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    496c:	19 82       	std	Y+1, r1	; 0x01
    496e:	0e c0       	rjmp	.+28     	; 0x498c <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    4970:	89 81       	ldd	r24, Y+1	; 0x01
    4972:	28 2f       	mov	r18, r24
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	8b 81       	ldd	r24, Y+3	; 0x03
    4978:	9c 81       	ldd	r25, Y+4	; 0x04
    497a:	fc 01       	movw	r30, r24
    497c:	e2 0f       	add	r30, r18
    497e:	f3 1f       	adc	r31, r19
    4980:	80 81       	ld	r24, Z
    4982:	0e 94 64 22 	call	0x44c8	; 0x44c8 <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    4986:	89 81       	ldd	r24, Y+1	; 0x01
    4988:	8f 5f       	subi	r24, 0xFF	; 255
    498a:	89 83       	std	Y+1, r24	; 0x01
    498c:	89 81       	ldd	r24, Y+1	; 0x01
    498e:	88 30       	cpi	r24, 0x08	; 8
    4990:	78 f3       	brcs	.-34     	; 0x4970 <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    4992:	1a 82       	std	Y+2, r1	; 0x02
    4994:	05 c0       	rjmp	.+10     	; 0x49a0 <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4996:	82 e0       	ldi	r24, 0x02	; 2
    4998:	8a 83       	std	Y+2, r24	; 0x02
    499a:	02 c0       	rjmp	.+4      	; 0x49a0 <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    499c:	83 e0       	ldi	r24, 0x03	; 3
    499e:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    49a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    49a2:	27 96       	adiw	r28, 0x07	; 7
    49a4:	0f b6       	in	r0, 0x3f	; 63
    49a6:	f8 94       	cli
    49a8:	de bf       	out	0x3e, r29	; 62
    49aa:	0f be       	out	0x3f, r0	; 63
    49ac:	cd bf       	out	0x3d, r28	; 61
    49ae:	cf 91       	pop	r28
    49b0:	df 91       	pop	r29
    49b2:	08 95       	ret

000049b4 <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    49b4:	df 93       	push	r29
    49b6:	cf 93       	push	r28
    49b8:	00 d0       	rcall	.+0      	; 0x49ba <enu_ConvertDigitToASCII+0x6>
    49ba:	0f 92       	push	r0
    49bc:	cd b7       	in	r28, 0x3d	; 61
    49be:	de b7       	in	r29, 0x3e	; 62
    49c0:	9b 83       	std	Y+3, r25	; 0x03
    49c2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    49c4:	81 e0       	ldi	r24, 0x01	; 1
    49c6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    49c8:	8a 81       	ldd	r24, Y+2	; 0x02
    49ca:	9b 81       	ldd	r25, Y+3	; 0x03
    49cc:	00 97       	sbiw	r24, 0x00	; 0
    49ce:	89 f0       	breq	.+34     	; 0x49f2 <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    49d0:	ea 81       	ldd	r30, Y+2	; 0x02
    49d2:	fb 81       	ldd	r31, Y+3	; 0x03
    49d4:	80 81       	ld	r24, Z
    49d6:	8a 30       	cpi	r24, 0x0A	; 10
    49d8:	48 f4       	brcc	.+18     	; 0x49ec <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    49da:	ea 81       	ldd	r30, Y+2	; 0x02
    49dc:	fb 81       	ldd	r31, Y+3	; 0x03
    49de:	80 81       	ld	r24, Z
    49e0:	80 5d       	subi	r24, 0xD0	; 208
    49e2:	ea 81       	ldd	r30, Y+2	; 0x02
    49e4:	fb 81       	ldd	r31, Y+3	; 0x03
    49e6:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    49e8:	19 82       	std	Y+1, r1	; 0x01
    49ea:	05 c0       	rjmp	.+10     	; 0x49f6 <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    49ec:	82 e0       	ldi	r24, 0x02	; 2
    49ee:	89 83       	std	Y+1, r24	; 0x01
    49f0:	02 c0       	rjmp	.+4      	; 0x49f6 <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    49f2:	83 e0       	ldi	r24, 0x03	; 3
    49f4:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    49f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    49f8:	0f 90       	pop	r0
    49fa:	0f 90       	pop	r0
    49fc:	0f 90       	pop	r0
    49fe:	cf 91       	pop	r28
    4a00:	df 91       	pop	r29
    4a02:	08 95       	ret

00004a04 <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    4a04:	ef 92       	push	r14
    4a06:	ff 92       	push	r15
    4a08:	0f 93       	push	r16
    4a0a:	1f 93       	push	r17
    4a0c:	df 93       	push	r29
    4a0e:	cf 93       	push	r28
    4a10:	cd b7       	in	r28, 0x3d	; 61
    4a12:	de b7       	in	r29, 0x3e	; 62
    4a14:	27 97       	sbiw	r28, 0x07	; 7
    4a16:	0f b6       	in	r0, 0x3f	; 63
    4a18:	f8 94       	cli
    4a1a:	de bf       	out	0x3e, r29	; 62
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	cd bf       	out	0x3d, r28	; 61
    4a20:	9f 83       	std	Y+7, r25	; 0x07
    4a22:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    4a24:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    4a26:	8e 81       	ldd	r24, Y+6	; 0x06
    4a28:	9f 81       	ldd	r25, Y+7	; 0x07
    4a2a:	00 97       	sbiw	r24, 0x00	; 0
    4a2c:	09 f4       	brne	.+2      	; 0x4a30 <enu_ReverseInteger+0x2c>
    4a2e:	58 c0       	rjmp	.+176    	; 0x4ae0 <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    4a30:	19 82       	std	Y+1, r1	; 0x01
    4a32:	1a 82       	std	Y+2, r1	; 0x02
    4a34:	1b 82       	std	Y+3, r1	; 0x03
    4a36:	1c 82       	std	Y+4, r1	; 0x04
    4a38:	3c c0       	rjmp	.+120    	; 0x4ab2 <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    4a3a:	89 81       	ldd	r24, Y+1	; 0x01
    4a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a3e:	ab 81       	ldd	r26, Y+3	; 0x03
    4a40:	bc 81       	ldd	r27, Y+4	; 0x04
    4a42:	2a e0       	ldi	r18, 0x0A	; 10
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	40 e0       	ldi	r20, 0x00	; 0
    4a48:	50 e0       	ldi	r21, 0x00	; 0
    4a4a:	bc 01       	movw	r22, r24
    4a4c:	cd 01       	movw	r24, r26
    4a4e:	0e 94 a4 29 	call	0x5348	; 0x5348 <__mulsi3>
    4a52:	7b 01       	movw	r14, r22
    4a54:	8c 01       	movw	r16, r24
    4a56:	ee 81       	ldd	r30, Y+6	; 0x06
    4a58:	ff 81       	ldd	r31, Y+7	; 0x07
    4a5a:	80 81       	ld	r24, Z
    4a5c:	91 81       	ldd	r25, Z+1	; 0x01
    4a5e:	a2 81       	ldd	r26, Z+2	; 0x02
    4a60:	b3 81       	ldd	r27, Z+3	; 0x03
    4a62:	2a e0       	ldi	r18, 0x0A	; 10
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	40 e0       	ldi	r20, 0x00	; 0
    4a68:	50 e0       	ldi	r21, 0x00	; 0
    4a6a:	bc 01       	movw	r22, r24
    4a6c:	cd 01       	movw	r24, r26
    4a6e:	0e 94 c3 29 	call	0x5386	; 0x5386 <__udivmodsi4>
    4a72:	dc 01       	movw	r26, r24
    4a74:	cb 01       	movw	r24, r22
    4a76:	8e 0d       	add	r24, r14
    4a78:	9f 1d       	adc	r25, r15
    4a7a:	a0 1f       	adc	r26, r16
    4a7c:	b1 1f       	adc	r27, r17
    4a7e:	89 83       	std	Y+1, r24	; 0x01
    4a80:	9a 83       	std	Y+2, r25	; 0x02
    4a82:	ab 83       	std	Y+3, r26	; 0x03
    4a84:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    4a86:	ee 81       	ldd	r30, Y+6	; 0x06
    4a88:	ff 81       	ldd	r31, Y+7	; 0x07
    4a8a:	80 81       	ld	r24, Z
    4a8c:	91 81       	ldd	r25, Z+1	; 0x01
    4a8e:	a2 81       	ldd	r26, Z+2	; 0x02
    4a90:	b3 81       	ldd	r27, Z+3	; 0x03
    4a92:	2a e0       	ldi	r18, 0x0A	; 10
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	40 e0       	ldi	r20, 0x00	; 0
    4a98:	50 e0       	ldi	r21, 0x00	; 0
    4a9a:	bc 01       	movw	r22, r24
    4a9c:	cd 01       	movw	r24, r26
    4a9e:	0e 94 c3 29 	call	0x5386	; 0x5386 <__udivmodsi4>
    4aa2:	da 01       	movw	r26, r20
    4aa4:	c9 01       	movw	r24, r18
    4aa6:	ee 81       	ldd	r30, Y+6	; 0x06
    4aa8:	ff 81       	ldd	r31, Y+7	; 0x07
    4aaa:	80 83       	st	Z, r24
    4aac:	91 83       	std	Z+1, r25	; 0x01
    4aae:	a2 83       	std	Z+2, r26	; 0x02
    4ab0:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    4ab2:	ee 81       	ldd	r30, Y+6	; 0x06
    4ab4:	ff 81       	ldd	r31, Y+7	; 0x07
    4ab6:	80 81       	ld	r24, Z
    4ab8:	91 81       	ldd	r25, Z+1	; 0x01
    4aba:	a2 81       	ldd	r26, Z+2	; 0x02
    4abc:	b3 81       	ldd	r27, Z+3	; 0x03
    4abe:	00 97       	sbiw	r24, 0x00	; 0
    4ac0:	a1 05       	cpc	r26, r1
    4ac2:	b1 05       	cpc	r27, r1
    4ac4:	09 f0       	breq	.+2      	; 0x4ac8 <enu_ReverseInteger+0xc4>
    4ac6:	b9 cf       	rjmp	.-142    	; 0x4a3a <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    4ac8:	ee 81       	ldd	r30, Y+6	; 0x06
    4aca:	ff 81       	ldd	r31, Y+7	; 0x07
    4acc:	89 81       	ldd	r24, Y+1	; 0x01
    4ace:	9a 81       	ldd	r25, Y+2	; 0x02
    4ad0:	ab 81       	ldd	r26, Y+3	; 0x03
    4ad2:	bc 81       	ldd	r27, Y+4	; 0x04
    4ad4:	80 83       	st	Z, r24
    4ad6:	91 83       	std	Z+1, r25	; 0x01
    4ad8:	a2 83       	std	Z+2, r26	; 0x02
    4ada:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    4adc:	1d 82       	std	Y+5, r1	; 0x05
    4ade:	02 c0       	rjmp	.+4      	; 0x4ae4 <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4ae0:	83 e0       	ldi	r24, 0x03	; 3
    4ae2:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    4ae4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4ae6:	27 96       	adiw	r28, 0x07	; 7
    4ae8:	0f b6       	in	r0, 0x3f	; 63
    4aea:	f8 94       	cli
    4aec:	de bf       	out	0x3e, r29	; 62
    4aee:	0f be       	out	0x3f, r0	; 63
    4af0:	cd bf       	out	0x3d, r28	; 61
    4af2:	cf 91       	pop	r28
    4af4:	df 91       	pop	r29
    4af6:	1f 91       	pop	r17
    4af8:	0f 91       	pop	r16
    4afa:	ff 90       	pop	r15
    4afc:	ef 90       	pop	r14
    4afe:	08 95       	ret

00004b00 <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    4b00:	df 93       	push	r29
    4b02:	cf 93       	push	r28
    4b04:	00 d0       	rcall	.+0      	; 0x4b06 <Keypad_enu_Initialization+0x6>
    4b06:	cd b7       	in	r28, 0x3d	; 61
    4b08:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    4b0e:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    4b10:	19 82       	std	Y+1, r1	; 0x01
    4b12:	31 c0       	rjmp	.+98     	; 0x4b76 <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    4b14:	89 81       	ldd	r24, Y+1	; 0x01
    4b16:	88 2f       	mov	r24, r24
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	88 0f       	add	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	fc 01       	movw	r30, r24
    4b20:	e0 58       	subi	r30, 0x80	; 128
    4b22:	fe 4f       	sbci	r31, 0xFE	; 254
    4b24:	20 81       	ld	r18, Z
    4b26:	89 81       	ldd	r24, Y+1	; 0x01
    4b28:	88 2f       	mov	r24, r24
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	88 0f       	add	r24, r24
    4b2e:	99 1f       	adc	r25, r25
    4b30:	fc 01       	movw	r30, r24
    4b32:	ef 57       	subi	r30, 0x7F	; 127
    4b34:	fe 4f       	sbci	r31, 0xFE	; 254
    4b36:	90 81       	ld	r25, Z
    4b38:	82 2f       	mov	r24, r18
    4b3a:	69 2f       	mov	r22, r25
    4b3c:	40 e0       	ldi	r20, 0x00	; 0
    4b3e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    4b42:	89 81       	ldd	r24, Y+1	; 0x01
    4b44:	88 2f       	mov	r24, r24
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	88 0f       	add	r24, r24
    4b4a:	99 1f       	adc	r25, r25
    4b4c:	fc 01       	movw	r30, r24
    4b4e:	e0 58       	subi	r30, 0x80	; 128
    4b50:	fe 4f       	sbci	r31, 0xFE	; 254
    4b52:	20 81       	ld	r18, Z
    4b54:	89 81       	ldd	r24, Y+1	; 0x01
    4b56:	88 2f       	mov	r24, r24
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	88 0f       	add	r24, r24
    4b5c:	99 1f       	adc	r25, r25
    4b5e:	fc 01       	movw	r30, r24
    4b60:	ef 57       	subi	r30, 0x7F	; 127
    4b62:	fe 4f       	sbci	r31, 0xFE	; 254
    4b64:	90 81       	ld	r25, Z
    4b66:	82 2f       	mov	r24, r18
    4b68:	69 2f       	mov	r22, r25
    4b6a:	41 e0       	ldi	r20, 0x01	; 1
    4b6c:	0e 94 49 14 	call	0x2892	; 0x2892 <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    4b70:	89 81       	ldd	r24, Y+1	; 0x01
    4b72:	8f 5f       	subi	r24, 0xFF	; 255
    4b74:	89 83       	std	Y+1, r24	; 0x01
    4b76:	89 81       	ldd	r24, Y+1	; 0x01
    4b78:	84 30       	cpi	r24, 0x04	; 4
    4b7a:	60 f2       	brcs	.-104    	; 0x4b14 <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    4b7c:	19 82       	std	Y+1, r1	; 0x01
    4b7e:	31 c0       	rjmp	.+98     	; 0x4be2 <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    4b80:	89 81       	ldd	r24, Y+1	; 0x01
    4b82:	88 2f       	mov	r24, r24
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	88 0f       	add	r24, r24
    4b88:	99 1f       	adc	r25, r25
    4b8a:	fc 01       	movw	r30, r24
    4b8c:	e8 57       	subi	r30, 0x78	; 120
    4b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b90:	20 81       	ld	r18, Z
    4b92:	89 81       	ldd	r24, Y+1	; 0x01
    4b94:	88 2f       	mov	r24, r24
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	88 0f       	add	r24, r24
    4b9a:	99 1f       	adc	r25, r25
    4b9c:	fc 01       	movw	r30, r24
    4b9e:	e7 57       	subi	r30, 0x77	; 119
    4ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba2:	90 81       	ld	r25, Z
    4ba4:	82 2f       	mov	r24, r18
    4ba6:	69 2f       	mov	r22, r25
    4ba8:	41 e0       	ldi	r20, 0x01	; 1
    4baa:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    4bae:	89 81       	ldd	r24, Y+1	; 0x01
    4bb0:	88 2f       	mov	r24, r24
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	88 0f       	add	r24, r24
    4bb6:	99 1f       	adc	r25, r25
    4bb8:	fc 01       	movw	r30, r24
    4bba:	e8 57       	subi	r30, 0x78	; 120
    4bbc:	fe 4f       	sbci	r31, 0xFE	; 254
    4bbe:	20 81       	ld	r18, Z
    4bc0:	89 81       	ldd	r24, Y+1	; 0x01
    4bc2:	88 2f       	mov	r24, r24
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	88 0f       	add	r24, r24
    4bc8:	99 1f       	adc	r25, r25
    4bca:	fc 01       	movw	r30, r24
    4bcc:	e7 57       	subi	r30, 0x77	; 119
    4bce:	fe 4f       	sbci	r31, 0xFE	; 254
    4bd0:	90 81       	ld	r25, Z
    4bd2:	82 2f       	mov	r24, r18
    4bd4:	69 2f       	mov	r22, r25
    4bd6:	40 e0       	ldi	r20, 0x00	; 0
    4bd8:	0e 94 49 14 	call	0x2892	; 0x2892 <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    4bdc:	89 81       	ldd	r24, Y+1	; 0x01
    4bde:	8f 5f       	subi	r24, 0xFF	; 255
    4be0:	89 83       	std	Y+1, r24	; 0x01
    4be2:	89 81       	ldd	r24, Y+1	; 0x01
    4be4:	84 30       	cpi	r24, 0x04	; 4
    4be6:	60 f2       	brcs	.-104    	; 0x4b80 <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    4be8:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    4bea:	8a 81       	ldd	r24, Y+2	; 0x02

}
    4bec:	0f 90       	pop	r0
    4bee:	0f 90       	pop	r0
    4bf0:	cf 91       	pop	r28
    4bf2:	df 91       	pop	r29
    4bf4:	08 95       	ret

00004bf6 <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    4bf6:	df 93       	push	r29
    4bf8:	cf 93       	push	r28
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
    4bfe:	aa 97       	sbiw	r28, 0x2a	; 42
    4c00:	0f b6       	in	r0, 0x3f	; 63
    4c02:	f8 94       	cli
    4c04:	de bf       	out	0x3e, r29	; 62
    4c06:	0f be       	out	0x3f, r0	; 63
    4c08:	cd bf       	out	0x3d, r28	; 61
    4c0a:	9d a3       	std	Y+37, r25	; 0x25
    4c0c:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    4c12:	8c a1       	ldd	r24, Y+36	; 0x24
    4c14:	9d a1       	ldd	r25, Y+37	; 0x25
    4c16:	00 97       	sbiw	r24, 0x00	; 0
    4c18:	09 f4       	brne	.+2      	; 0x4c1c <Keypad_enu_GetButtonPressedValue+0x26>
    4c1a:	68 c1       	rjmp	.+720    	; 0x4eec <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    4c1c:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    4c1e:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    4c20:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    4c22:	ec a1       	ldd	r30, Y+36	; 0x24
    4c24:	fd a1       	ldd	r31, Y+37	; 0x25
    4c26:	8f ef       	ldi	r24, 0xFF	; 255
    4c28:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    4c2a:	19 8a       	std	Y+17, r1	; 0x11
    4c2c:	5a c1       	rjmp	.+692    	; 0x4ee2 <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    4c2e:	89 89       	ldd	r24, Y+17	; 0x11
    4c30:	88 2f       	mov	r24, r24
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	88 0f       	add	r24, r24
    4c36:	99 1f       	adc	r25, r25
    4c38:	fc 01       	movw	r30, r24
    4c3a:	e0 58       	subi	r30, 0x80	; 128
    4c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c3e:	40 81       	ld	r20, Z
    4c40:	89 89       	ldd	r24, Y+17	; 0x11
    4c42:	88 2f       	mov	r24, r24
    4c44:	90 e0       	ldi	r25, 0x00	; 0
    4c46:	88 0f       	add	r24, r24
    4c48:	99 1f       	adc	r25, r25
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	ef 57       	subi	r30, 0x7F	; 127
    4c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4c50:	90 81       	ld	r25, Z
    4c52:	9e 01       	movw	r18, r28
    4c54:	2d 5e       	subi	r18, 0xED	; 237
    4c56:	3f 4f       	sbci	r19, 0xFF	; 255
    4c58:	84 2f       	mov	r24, r20
    4c5a:	69 2f       	mov	r22, r25
    4c5c:	a9 01       	movw	r20, r18
    4c5e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    4c62:	8b 89       	ldd	r24, Y+19	; 0x13
    4c64:	88 23       	and	r24, r24
    4c66:	09 f0       	breq	.+2      	; 0x4c6a <Keypad_enu_GetButtonPressedValue+0x74>
    4c68:	36 c1       	rjmp	.+620    	; 0x4ed6 <Keypad_enu_GetButtonPressedValue+0x2e0>
    4c6a:	80 e0       	ldi	r24, 0x00	; 0
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	a0 e4       	ldi	r26, 0x40	; 64
    4c70:	b0 e4       	ldi	r27, 0x40	; 64
    4c72:	8b 87       	std	Y+11, r24	; 0x0b
    4c74:	9c 87       	std	Y+12, r25	; 0x0c
    4c76:	ad 87       	std	Y+13, r26	; 0x0d
    4c78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c82:	20 e0       	ldi	r18, 0x00	; 0
    4c84:	30 e0       	ldi	r19, 0x00	; 0
    4c86:	4a e7       	ldi	r20, 0x7A	; 122
    4c88:	55 e4       	ldi	r21, 0x45	; 69
    4c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c8e:	dc 01       	movw	r26, r24
    4c90:	cb 01       	movw	r24, r22
    4c92:	8f 83       	std	Y+7, r24	; 0x07
    4c94:	98 87       	std	Y+8, r25	; 0x08
    4c96:	a9 87       	std	Y+9, r26	; 0x09
    4c98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c9c:	78 85       	ldd	r23, Y+8	; 0x08
    4c9e:	89 85       	ldd	r24, Y+9	; 0x09
    4ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ca2:	20 e0       	ldi	r18, 0x00	; 0
    4ca4:	30 e0       	ldi	r19, 0x00	; 0
    4ca6:	40 e8       	ldi	r20, 0x80	; 128
    4ca8:	5f e3       	ldi	r21, 0x3F	; 63
    4caa:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    4cae:	88 23       	and	r24, r24
    4cb0:	2c f4       	brge	.+10     	; 0x4cbc <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    4cb2:	81 e0       	ldi	r24, 0x01	; 1
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	9e 83       	std	Y+6, r25	; 0x06
    4cb8:	8d 83       	std	Y+5, r24	; 0x05
    4cba:	3f c0       	rjmp	.+126    	; 0x4d3a <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    4cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    4cbe:	78 85       	ldd	r23, Y+8	; 0x08
    4cc0:	89 85       	ldd	r24, Y+9	; 0x09
    4cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	3f ef       	ldi	r19, 0xFF	; 255
    4cc8:	4f e7       	ldi	r20, 0x7F	; 127
    4cca:	57 e4       	ldi	r21, 0x47	; 71
    4ccc:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    4cd0:	18 16       	cp	r1, r24
    4cd2:	4c f5       	brge	.+82     	; 0x4d26 <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cdc:	20 e0       	ldi	r18, 0x00	; 0
    4cde:	30 e0       	ldi	r19, 0x00	; 0
    4ce0:	40 e2       	ldi	r20, 0x20	; 32
    4ce2:	51 e4       	ldi	r21, 0x41	; 65
    4ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ce8:	dc 01       	movw	r26, r24
    4cea:	cb 01       	movw	r24, r22
    4cec:	bc 01       	movw	r22, r24
    4cee:	cd 01       	movw	r24, r26
    4cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	9e 83       	std	Y+6, r25	; 0x06
    4cfa:	8d 83       	std	Y+5, r24	; 0x05
    4cfc:	0f c0       	rjmp	.+30     	; 0x4d1c <Keypad_enu_GetButtonPressedValue+0x126>
    4cfe:	80 e9       	ldi	r24, 0x90	; 144
    4d00:	91 e0       	ldi	r25, 0x01	; 1
    4d02:	9c 83       	std	Y+4, r25	; 0x04
    4d04:	8b 83       	std	Y+3, r24	; 0x03
    4d06:	8b 81       	ldd	r24, Y+3	; 0x03
    4d08:	9c 81       	ldd	r25, Y+4	; 0x04
    4d0a:	01 97       	sbiw	r24, 0x01	; 1
    4d0c:	f1 f7       	brne	.-4      	; 0x4d0a <Keypad_enu_GetButtonPressedValue+0x114>
    4d0e:	9c 83       	std	Y+4, r25	; 0x04
    4d10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d12:	8d 81       	ldd	r24, Y+5	; 0x05
    4d14:	9e 81       	ldd	r25, Y+6	; 0x06
    4d16:	01 97       	sbiw	r24, 0x01	; 1
    4d18:	9e 83       	std	Y+6, r25	; 0x06
    4d1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d20:	00 97       	sbiw	r24, 0x00	; 0
    4d22:	69 f7       	brne	.-38     	; 0x4cfe <Keypad_enu_GetButtonPressedValue+0x108>
    4d24:	14 c0       	rjmp	.+40     	; 0x4d4e <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d26:	6f 81       	ldd	r22, Y+7	; 0x07
    4d28:	78 85       	ldd	r23, Y+8	; 0x08
    4d2a:	89 85       	ldd	r24, Y+9	; 0x09
    4d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d32:	dc 01       	movw	r26, r24
    4d34:	cb 01       	movw	r24, r22
    4d36:	9e 83       	std	Y+6, r25	; 0x06
    4d38:	8d 83       	std	Y+5, r24	; 0x05
    4d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d3e:	9a 83       	std	Y+2, r25	; 0x02
    4d40:	89 83       	std	Y+1, r24	; 0x01
    4d42:	89 81       	ldd	r24, Y+1	; 0x01
    4d44:	9a 81       	ldd	r25, Y+2	; 0x02
    4d46:	01 97       	sbiw	r24, 0x01	; 1
    4d48:	f1 f7       	brne	.-4      	; 0x4d46 <Keypad_enu_GetButtonPressedValue+0x150>
    4d4a:	9a 83       	std	Y+2, r25	; 0x02
    4d4c:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    4d4e:	89 89       	ldd	r24, Y+17	; 0x11
    4d50:	88 2f       	mov	r24, r24
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	88 0f       	add	r24, r24
    4d56:	99 1f       	adc	r25, r25
    4d58:	fc 01       	movw	r30, r24
    4d5a:	e0 58       	subi	r30, 0x80	; 128
    4d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d5e:	40 81       	ld	r20, Z
    4d60:	89 89       	ldd	r24, Y+17	; 0x11
    4d62:	88 2f       	mov	r24, r24
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	88 0f       	add	r24, r24
    4d68:	99 1f       	adc	r25, r25
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	ef 57       	subi	r30, 0x7F	; 127
    4d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d70:	90 81       	ld	r25, Z
    4d72:	9e 01       	movw	r18, r28
    4d74:	2d 5e       	subi	r18, 0xED	; 237
    4d76:	3f 4f       	sbci	r19, 0xFF	; 255
    4d78:	84 2f       	mov	r24, r20
    4d7a:	69 2f       	mov	r22, r25
    4d7c:	a9 01       	movw	r20, r18
    4d7e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    4d82:	8b 89       	ldd	r24, Y+19	; 0x13
    4d84:	88 23       	and	r24, r24
    4d86:	09 f0       	breq	.+2      	; 0x4d8a <Keypad_enu_GetButtonPressedValue+0x194>
    4d88:	a6 c0       	rjmp	.+332    	; 0x4ed6 <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    4d8a:	18 8a       	std	Y+16, r1	; 0x10
    4d8c:	a0 c0       	rjmp	.+320    	; 0x4ece <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    4d8e:	88 89       	ldd	r24, Y+16	; 0x10
    4d90:	88 2f       	mov	r24, r24
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	88 0f       	add	r24, r24
    4d96:	99 1f       	adc	r25, r25
    4d98:	fc 01       	movw	r30, r24
    4d9a:	e8 57       	subi	r30, 0x78	; 120
    4d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d9e:	20 81       	ld	r18, Z
    4da0:	88 89       	ldd	r24, Y+16	; 0x10
    4da2:	88 2f       	mov	r24, r24
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	88 0f       	add	r24, r24
    4da8:	99 1f       	adc	r25, r25
    4daa:	fc 01       	movw	r30, r24
    4dac:	e7 57       	subi	r30, 0x77	; 119
    4dae:	fe 4f       	sbci	r31, 0xFE	; 254
    4db0:	90 81       	ld	r25, Z
    4db2:	82 2f       	mov	r24, r18
    4db4:	69 2f       	mov	r22, r25
    4db6:	41 e0       	ldi	r20, 0x01	; 1
    4db8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    4dbc:	89 89       	ldd	r24, Y+17	; 0x11
    4dbe:	88 2f       	mov	r24, r24
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	88 0f       	add	r24, r24
    4dc4:	99 1f       	adc	r25, r25
    4dc6:	fc 01       	movw	r30, r24
    4dc8:	e0 58       	subi	r30, 0x80	; 128
    4dca:	fe 4f       	sbci	r31, 0xFE	; 254
    4dcc:	40 81       	ld	r20, Z
    4dce:	89 89       	ldd	r24, Y+17	; 0x11
    4dd0:	88 2f       	mov	r24, r24
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	88 0f       	add	r24, r24
    4dd6:	99 1f       	adc	r25, r25
    4dd8:	fc 01       	movw	r30, r24
    4dda:	ef 57       	subi	r30, 0x7F	; 127
    4ddc:	fe 4f       	sbci	r31, 0xFE	; 254
    4dde:	90 81       	ld	r25, Z
    4de0:	9e 01       	movw	r18, r28
    4de2:	2d 5e       	subi	r18, 0xED	; 237
    4de4:	3f 4f       	sbci	r19, 0xFF	; 255
    4de6:	84 2f       	mov	r24, r20
    4de8:	69 2f       	mov	r22, r25
    4dea:	a9 01       	movw	r20, r18
    4dec:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    4df0:	8b 89       	ldd	r24, Y+19	; 0x13
    4df2:	81 30       	cpi	r24, 0x01	; 1
    4df4:	09 f0       	breq	.+2      	; 0x4df8 <Keypad_enu_GetButtonPressedValue+0x202>
    4df6:	51 c0       	rjmp	.+162    	; 0x4e9a <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    4df8:	ce 01       	movw	r24, r28
    4dfa:	44 96       	adiw	r24, 0x14	; 20
    4dfc:	9f a3       	std	Y+39, r25	; 0x27
    4dfe:	8e a3       	std	Y+38, r24	; 0x26
    4e00:	e3 e9       	ldi	r30, 0x93	; 147
    4e02:	f1 e0       	ldi	r31, 0x01	; 1
    4e04:	f9 a7       	std	Y+41, r31	; 0x29
    4e06:	e8 a7       	std	Y+40, r30	; 0x28
    4e08:	f0 e1       	ldi	r31, 0x10	; 16
    4e0a:	fa a7       	std	Y+42, r31	; 0x2a
    4e0c:	e8 a5       	ldd	r30, Y+40	; 0x28
    4e0e:	f9 a5       	ldd	r31, Y+41	; 0x29
    4e10:	00 80       	ld	r0, Z
    4e12:	88 a5       	ldd	r24, Y+40	; 0x28
    4e14:	99 a5       	ldd	r25, Y+41	; 0x29
    4e16:	01 96       	adiw	r24, 0x01	; 1
    4e18:	99 a7       	std	Y+41, r25	; 0x29
    4e1a:	88 a7       	std	Y+40, r24	; 0x28
    4e1c:	ee a1       	ldd	r30, Y+38	; 0x26
    4e1e:	ff a1       	ldd	r31, Y+39	; 0x27
    4e20:	00 82       	st	Z, r0
    4e22:	8e a1       	ldd	r24, Y+38	; 0x26
    4e24:	9f a1       	ldd	r25, Y+39	; 0x27
    4e26:	01 96       	adiw	r24, 0x01	; 1
    4e28:	9f a3       	std	Y+39, r25	; 0x27
    4e2a:	8e a3       	std	Y+38, r24	; 0x26
    4e2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e2e:	91 50       	subi	r25, 0x01	; 1
    4e30:	9a a7       	std	Y+42, r25	; 0x2a
    4e32:	ea a5       	ldd	r30, Y+42	; 0x2a
    4e34:	ee 23       	and	r30, r30
    4e36:	51 f7       	brne	.-44     	; 0x4e0c <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    4e38:	89 89       	ldd	r24, Y+17	; 0x11
    4e3a:	28 2f       	mov	r18, r24
    4e3c:	30 e0       	ldi	r19, 0x00	; 0
    4e3e:	88 89       	ldd	r24, Y+16	; 0x10
    4e40:	48 2f       	mov	r20, r24
    4e42:	50 e0       	ldi	r21, 0x00	; 0
    4e44:	22 0f       	add	r18, r18
    4e46:	33 1f       	adc	r19, r19
    4e48:	22 0f       	add	r18, r18
    4e4a:	33 1f       	adc	r19, r19
    4e4c:	ce 01       	movw	r24, r28
    4e4e:	01 96       	adiw	r24, 0x01	; 1
    4e50:	82 0f       	add	r24, r18
    4e52:	93 1f       	adc	r25, r19
    4e54:	84 0f       	add	r24, r20
    4e56:	95 1f       	adc	r25, r21
    4e58:	fc 01       	movw	r30, r24
    4e5a:	73 96       	adiw	r30, 0x13	; 19
    4e5c:	80 81       	ld	r24, Z
    4e5e:	ec a1       	ldd	r30, Y+36	; 0x24
    4e60:	fd a1       	ldd	r31, Y+37	; 0x25
    4e62:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    4e64:	81 e0       	ldi	r24, 0x01	; 1
    4e66:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    4e68:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    4e6a:	88 89       	ldd	r24, Y+16	; 0x10
    4e6c:	88 2f       	mov	r24, r24
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	88 0f       	add	r24, r24
    4e72:	99 1f       	adc	r25, r25
    4e74:	fc 01       	movw	r30, r24
    4e76:	e8 57       	subi	r30, 0x78	; 120
    4e78:	fe 4f       	sbci	r31, 0xFE	; 254
    4e7a:	20 81       	ld	r18, Z
    4e7c:	88 89       	ldd	r24, Y+16	; 0x10
    4e7e:	88 2f       	mov	r24, r24
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	88 0f       	add	r24, r24
    4e84:	99 1f       	adc	r25, r25
    4e86:	fc 01       	movw	r30, r24
    4e88:	e7 57       	subi	r30, 0x77	; 119
    4e8a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e8c:	90 81       	ld	r25, Z
    4e8e:	82 2f       	mov	r24, r18
    4e90:	69 2f       	mov	r22, r25
    4e92:	40 e0       	ldi	r20, 0x00	; 0
    4e94:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    4e98:	1e c0       	rjmp	.+60     	; 0x4ed6 <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    4e9a:	88 89       	ldd	r24, Y+16	; 0x10
    4e9c:	88 2f       	mov	r24, r24
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	88 0f       	add	r24, r24
    4ea2:	99 1f       	adc	r25, r25
    4ea4:	fc 01       	movw	r30, r24
    4ea6:	e8 57       	subi	r30, 0x78	; 120
    4ea8:	fe 4f       	sbci	r31, 0xFE	; 254
    4eaa:	20 81       	ld	r18, Z
    4eac:	88 89       	ldd	r24, Y+16	; 0x10
    4eae:	88 2f       	mov	r24, r24
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	88 0f       	add	r24, r24
    4eb4:	99 1f       	adc	r25, r25
    4eb6:	fc 01       	movw	r30, r24
    4eb8:	e7 57       	subi	r30, 0x77	; 119
    4eba:	fe 4f       	sbci	r31, 0xFE	; 254
    4ebc:	90 81       	ld	r25, Z
    4ebe:	82 2f       	mov	r24, r18
    4ec0:	69 2f       	mov	r22, r25
    4ec2:	40 e0       	ldi	r20, 0x00	; 0
    4ec4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    4ec8:	88 89       	ldd	r24, Y+16	; 0x10
    4eca:	8f 5f       	subi	r24, 0xFF	; 255
    4ecc:	88 8b       	std	Y+16, r24	; 0x10
    4ece:	88 89       	ldd	r24, Y+16	; 0x10
    4ed0:	84 30       	cpi	r24, 0x04	; 4
    4ed2:	08 f4       	brcc	.+2      	; 0x4ed6 <Keypad_enu_GetButtonPressedValue+0x2e0>
    4ed4:	5c cf       	rjmp	.-328    	; 0x4d8e <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    4ed6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ed8:	88 23       	and	r24, r24
    4eda:	51 f4       	brne	.+20     	; 0x4ef0 <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    4edc:	89 89       	ldd	r24, Y+17	; 0x11
    4ede:	8f 5f       	subi	r24, 0xFF	; 255
    4ee0:	89 8b       	std	Y+17, r24	; 0x11
    4ee2:	89 89       	ldd	r24, Y+17	; 0x11
    4ee4:	84 30       	cpi	r24, 0x04	; 4
    4ee6:	08 f4       	brcc	.+2      	; 0x4eea <Keypad_enu_GetButtonPressedValue+0x2f4>
    4ee8:	a2 ce       	rjmp	.-700    	; 0x4c2e <Keypad_enu_GetButtonPressedValue+0x38>
    4eea:	02 c0       	rjmp	.+4      	; 0x4ef0 <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4eec:	83 e0       	ldi	r24, 0x03	; 3
    4eee:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    4ef0:	8a 89       	ldd	r24, Y+18	; 0x12

}
    4ef2:	aa 96       	adiw	r28, 0x2a	; 42
    4ef4:	0f b6       	in	r0, 0x3f	; 63
    4ef6:	f8 94       	cli
    4ef8:	de bf       	out	0x3e, r29	; 62
    4efa:	0f be       	out	0x3f, r0	; 63
    4efc:	cd bf       	out	0x3d, r28	; 61
    4efe:	cf 91       	pop	r28
    4f00:	df 91       	pop	r29
    4f02:	08 95       	ret

00004f04 <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    4f04:	df 93       	push	r29
    4f06:	cf 93       	push	r28
    4f08:	0f 92       	push	r0
    4f0a:	cd b7       	in	r28, 0x3d	; 61
    4f0c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4f0e:	81 e0       	ldi	r24, 0x01	; 1
    4f10:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    4f12:	80 e0       	ldi	r24, 0x00	; 0
    4f14:	64 e0       	ldi	r22, 0x04	; 4
    4f16:	41 e0       	ldi	r20, 0x01	; 1
    4f18:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    4f1c:	80 e0       	ldi	r24, 0x00	; 0
    4f1e:	65 e0       	ldi	r22, 0x05	; 5
    4f20:	41 e0       	ldi	r20, 0x01	; 1
    4f22:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    4f26:	80 e0       	ldi	r24, 0x00	; 0
    4f28:	66 e0       	ldi	r22, 0x06	; 6
    4f2a:	41 e0       	ldi	r20, 0x01	; 1
    4f2c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    4f30:	80 e0       	ldi	r24, 0x00	; 0
    4f32:	67 e0       	ldi	r22, 0x07	; 7
    4f34:	41 e0       	ldi	r20, 0x01	; 1
    4f36:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	62 e0       	ldi	r22, 0x02	; 2
    4f3e:	41 e0       	ldi	r20, 0x01	; 1
    4f40:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    4f44:	81 e0       	ldi	r24, 0x01	; 1
    4f46:	61 e0       	ldi	r22, 0x01	; 1
    4f48:	41 e0       	ldi	r20, 0x01	; 1
    4f4a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    4f4e:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    4f50:	89 81       	ldd	r24, Y+1	; 0x01

}
    4f52:	0f 90       	pop	r0
    4f54:	cf 91       	pop	r28
    4f56:	df 91       	pop	r29
    4f58:	08 95       	ret

00004f5a <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    4f5a:	df 93       	push	r29
    4f5c:	cf 93       	push	r28
    4f5e:	00 d0       	rcall	.+0      	; 0x4f60 <Hexadecoder_enu_DisplayNum+0x6>
    4f60:	cd b7       	in	r28, 0x3d	; 61
    4f62:	de b7       	in	r29, 0x3e	; 62
    4f64:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    4f66:	81 e0       	ldi	r24, 0x01	; 1
    4f68:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    4f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f6c:	8a 30       	cpi	r24, 0x0A	; 10
    4f6e:	40 f5       	brcc	.+80     	; 0x4fc0 <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    4f70:	8a 81       	ldd	r24, Y+2	; 0x02
    4f72:	98 2f       	mov	r25, r24
    4f74:	91 70       	andi	r25, 0x01	; 1
    4f76:	80 e0       	ldi	r24, 0x00	; 0
    4f78:	64 e0       	ldi	r22, 0x04	; 4
    4f7a:	49 2f       	mov	r20, r25
    4f7c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    4f80:	8a 81       	ldd	r24, Y+2	; 0x02
    4f82:	86 95       	lsr	r24
    4f84:	98 2f       	mov	r25, r24
    4f86:	91 70       	andi	r25, 0x01	; 1
    4f88:	80 e0       	ldi	r24, 0x00	; 0
    4f8a:	65 e0       	ldi	r22, 0x05	; 5
    4f8c:	49 2f       	mov	r20, r25
    4f8e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    4f92:	8a 81       	ldd	r24, Y+2	; 0x02
    4f94:	86 95       	lsr	r24
    4f96:	86 95       	lsr	r24
    4f98:	98 2f       	mov	r25, r24
    4f9a:	91 70       	andi	r25, 0x01	; 1
    4f9c:	80 e0       	ldi	r24, 0x00	; 0
    4f9e:	66 e0       	ldi	r22, 0x06	; 6
    4fa0:	49 2f       	mov	r20, r25
    4fa2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    4fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa8:	86 95       	lsr	r24
    4faa:	86 95       	lsr	r24
    4fac:	86 95       	lsr	r24
    4fae:	98 2f       	mov	r25, r24
    4fb0:	91 70       	andi	r25, 0x01	; 1
    4fb2:	80 e0       	ldi	r24, 0x00	; 0
    4fb4:	67 e0       	ldi	r22, 0x07	; 7
    4fb6:	49 2f       	mov	r20, r25
    4fb8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    4fbc:	19 82       	std	Y+1, r1	; 0x01
    4fbe:	02 c0       	rjmp	.+4      	; 0x4fc4 <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4fc0:	82 e0       	ldi	r24, 0x02	; 2
    4fc2:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    4fc4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    4fc6:	0f 90       	pop	r0
    4fc8:	0f 90       	pop	r0
    4fca:	cf 91       	pop	r28
    4fcc:	df 91       	pop	r29
    4fce:	08 95       	ret

00004fd0 <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    4fd0:	df 93       	push	r29
    4fd2:	cf 93       	push	r28
    4fd4:	00 d0       	rcall	.+0      	; 0x4fd6 <Hexadecoder_enu_EnableSSG+0x6>
    4fd6:	00 d0       	rcall	.+0      	; 0x4fd8 <Hexadecoder_enu_EnableSSG+0x8>
    4fd8:	cd b7       	in	r28, 0x3d	; 61
    4fda:	de b7       	in	r29, 0x3e	; 62
    4fdc:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    4fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe4:	28 2f       	mov	r18, r24
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	3c 83       	std	Y+4, r19	; 0x04
    4fea:	2b 83       	std	Y+3, r18	; 0x03
    4fec:	8b 81       	ldd	r24, Y+3	; 0x03
    4fee:	9c 81       	ldd	r25, Y+4	; 0x04
    4ff0:	00 97       	sbiw	r24, 0x00	; 0
    4ff2:	31 f0       	breq	.+12     	; 0x5000 <Hexadecoder_enu_EnableSSG+0x30>
    4ff4:	2b 81       	ldd	r18, Y+3	; 0x03
    4ff6:	3c 81       	ldd	r19, Y+4	; 0x04
    4ff8:	21 30       	cpi	r18, 0x01	; 1
    4ffa:	31 05       	cpc	r19, r1
    4ffc:	41 f0       	breq	.+16     	; 0x500e <Hexadecoder_enu_EnableSSG+0x3e>
    4ffe:	0e c0       	rjmp	.+28     	; 0x501c <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    5000:	81 e0       	ldi	r24, 0x01	; 1
    5002:	62 e0       	ldi	r22, 0x02	; 2
    5004:	41 e0       	ldi	r20, 0x01	; 1
    5006:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    500a:	19 82       	std	Y+1, r1	; 0x01
    500c:	09 c0       	rjmp	.+18     	; 0x5020 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	61 e0       	ldi	r22, 0x01	; 1
    5012:	41 e0       	ldi	r20, 0x01	; 1
    5014:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5018:	19 82       	std	Y+1, r1	; 0x01
    501a:	02 c0       	rjmp	.+4      	; 0x5020 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    501c:	82 e0       	ldi	r24, 0x02	; 2
    501e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    5020:	89 81       	ldd	r24, Y+1	; 0x01
}
    5022:	0f 90       	pop	r0
    5024:	0f 90       	pop	r0
    5026:	0f 90       	pop	r0
    5028:	0f 90       	pop	r0
    502a:	cf 91       	pop	r28
    502c:	df 91       	pop	r29
    502e:	08 95       	ret

00005030 <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    5030:	df 93       	push	r29
    5032:	cf 93       	push	r28
    5034:	00 d0       	rcall	.+0      	; 0x5036 <Hexadecoder_enu_DisableSSG+0x6>
    5036:	00 d0       	rcall	.+0      	; 0x5038 <Hexadecoder_enu_DisableSSG+0x8>
    5038:	cd b7       	in	r28, 0x3d	; 61
    503a:	de b7       	in	r29, 0x3e	; 62
    503c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    503e:	81 e0       	ldi	r24, 0x01	; 1
    5040:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    5042:	8a 81       	ldd	r24, Y+2	; 0x02
    5044:	28 2f       	mov	r18, r24
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	3c 83       	std	Y+4, r19	; 0x04
    504a:	2b 83       	std	Y+3, r18	; 0x03
    504c:	8b 81       	ldd	r24, Y+3	; 0x03
    504e:	9c 81       	ldd	r25, Y+4	; 0x04
    5050:	00 97       	sbiw	r24, 0x00	; 0
    5052:	31 f0       	breq	.+12     	; 0x5060 <Hexadecoder_enu_DisableSSG+0x30>
    5054:	2b 81       	ldd	r18, Y+3	; 0x03
    5056:	3c 81       	ldd	r19, Y+4	; 0x04
    5058:	21 30       	cpi	r18, 0x01	; 1
    505a:	31 05       	cpc	r19, r1
    505c:	41 f0       	breq	.+16     	; 0x506e <Hexadecoder_enu_DisableSSG+0x3e>
    505e:	0e c0       	rjmp	.+28     	; 0x507c <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    5060:	81 e0       	ldi	r24, 0x01	; 1
    5062:	62 e0       	ldi	r22, 0x02	; 2
    5064:	40 e0       	ldi	r20, 0x00	; 0
    5066:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    506a:	19 82       	std	Y+1, r1	; 0x01
    506c:	09 c0       	rjmp	.+18     	; 0x5080 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    506e:	81 e0       	ldi	r24, 0x01	; 1
    5070:	61 e0       	ldi	r22, 0x01	; 1
    5072:	40 e0       	ldi	r20, 0x00	; 0
    5074:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5078:	19 82       	std	Y+1, r1	; 0x01
    507a:	02 c0       	rjmp	.+4      	; 0x5080 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    507c:	82 e0       	ldi	r24, 0x02	; 2
    507e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    5080:	89 81       	ldd	r24, Y+1	; 0x01
}
    5082:	0f 90       	pop	r0
    5084:	0f 90       	pop	r0
    5086:	0f 90       	pop	r0
    5088:	0f 90       	pop	r0
    508a:	cf 91       	pop	r28
    508c:	df 91       	pop	r29
    508e:	08 95       	ret

00005090 <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    5090:	df 93       	push	r29
    5092:	cf 93       	push	r28
    5094:	0f 92       	push	r0
    5096:	cd b7       	in	r28, 0x3d	; 61
    5098:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    509e:	81 e0       	ldi	r24, 0x01	; 1
    50a0:	62 e0       	ldi	r22, 0x02	; 2
    50a2:	40 e0       	ldi	r20, 0x00	; 0
    50a4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    50a8:	81 e0       	ldi	r24, 0x01	; 1
    50aa:	61 e0       	ldi	r22, 0x01	; 1
    50ac:	40 e0       	ldi	r20, 0x00	; 0
    50ae:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    50b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    50b4:	0f 90       	pop	r0
    50b6:	cf 91       	pop	r28
    50b8:	df 91       	pop	r29
    50ba:	08 95       	ret

000050bc <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    50bc:	df 93       	push	r29
    50be:	cf 93       	push	r28
    50c0:	00 d0       	rcall	.+0      	; 0x50c2 <Buzzer_enu_Initialization+0x6>
    50c2:	cd b7       	in	r28, 0x3d	; 61
    50c4:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    50c6:	81 e0       	ldi	r24, 0x01	; 1
    50c8:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    50ca:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    50cc:	19 82       	std	Y+1, r1	; 0x01
    50ce:	31 c0       	rjmp	.+98     	; 0x5132 <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    50d0:	89 81       	ldd	r24, Y+1	; 0x01
    50d2:	88 2f       	mov	r24, r24
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	88 0f       	add	r24, r24
    50d8:	99 1f       	adc	r25, r25
    50da:	fc 01       	movw	r30, r24
    50dc:	ef 56       	subi	r30, 0x6F	; 111
    50de:	fe 4f       	sbci	r31, 0xFE	; 254
    50e0:	20 81       	ld	r18, Z
    50e2:	89 81       	ldd	r24, Y+1	; 0x01
    50e4:	88 2f       	mov	r24, r24
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	88 0f       	add	r24, r24
    50ea:	99 1f       	adc	r25, r25
    50ec:	fc 01       	movw	r30, r24
    50ee:	ee 56       	subi	r30, 0x6E	; 110
    50f0:	fe 4f       	sbci	r31, 0xFE	; 254
    50f2:	90 81       	ld	r25, Z
    50f4:	82 2f       	mov	r24, r18
    50f6:	69 2f       	mov	r22, r25
    50f8:	41 e0       	ldi	r20, 0x01	; 1
    50fa:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    50fe:	89 81       	ldd	r24, Y+1	; 0x01
    5100:	88 2f       	mov	r24, r24
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	88 0f       	add	r24, r24
    5106:	99 1f       	adc	r25, r25
    5108:	fc 01       	movw	r30, r24
    510a:	ef 56       	subi	r30, 0x6F	; 111
    510c:	fe 4f       	sbci	r31, 0xFE	; 254
    510e:	20 81       	ld	r18, Z
    5110:	89 81       	ldd	r24, Y+1	; 0x01
    5112:	88 2f       	mov	r24, r24
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	88 0f       	add	r24, r24
    5118:	99 1f       	adc	r25, r25
    511a:	fc 01       	movw	r30, r24
    511c:	ee 56       	subi	r30, 0x6E	; 110
    511e:	fe 4f       	sbci	r31, 0xFE	; 254
    5120:	90 81       	ld	r25, Z
    5122:	82 2f       	mov	r24, r18
    5124:	69 2f       	mov	r22, r25
    5126:	40 e0       	ldi	r20, 0x00	; 0
    5128:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    512c:	89 81       	ldd	r24, Y+1	; 0x01
    512e:	8f 5f       	subi	r24, 0xFF	; 255
    5130:	89 83       	std	Y+1, r24	; 0x01
    5132:	90 91 90 01 	lds	r25, 0x0190
    5136:	89 81       	ldd	r24, Y+1	; 0x01
    5138:	89 17       	cp	r24, r25
    513a:	50 f2       	brcs	.-108    	; 0x50d0 <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    513c:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    513e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5140:	0f 90       	pop	r0
    5142:	0f 90       	pop	r0
    5144:	cf 91       	pop	r28
    5146:	df 91       	pop	r29
    5148:	08 95       	ret

0000514a <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    514a:	df 93       	push	r29
    514c:	cf 93       	push	r28
    514e:	00 d0       	rcall	.+0      	; 0x5150 <Buzzer_enu_TuronOnBuzzer+0x6>
    5150:	cd b7       	in	r28, 0x3d	; 61
    5152:	de b7       	in	r29, 0x3e	; 62
    5154:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5156:	81 e0       	ldi	r24, 0x01	; 1
    5158:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    515a:	90 91 90 01 	lds	r25, 0x0190
    515e:	8a 81       	ldd	r24, Y+2	; 0x02
    5160:	89 17       	cp	r24, r25
    5162:	c8 f4       	brcc	.+50     	; 0x5196 <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    5164:	8a 81       	ldd	r24, Y+2	; 0x02
    5166:	88 2f       	mov	r24, r24
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	88 0f       	add	r24, r24
    516c:	99 1f       	adc	r25, r25
    516e:	fc 01       	movw	r30, r24
    5170:	ef 56       	subi	r30, 0x6F	; 111
    5172:	fe 4f       	sbci	r31, 0xFE	; 254
    5174:	20 81       	ld	r18, Z
    5176:	8a 81       	ldd	r24, Y+2	; 0x02
    5178:	88 2f       	mov	r24, r24
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	88 0f       	add	r24, r24
    517e:	99 1f       	adc	r25, r25
    5180:	fc 01       	movw	r30, r24
    5182:	ee 56       	subi	r30, 0x6E	; 110
    5184:	fe 4f       	sbci	r31, 0xFE	; 254
    5186:	90 81       	ld	r25, Z
    5188:	82 2f       	mov	r24, r18
    518a:	69 2f       	mov	r22, r25
    518c:	41 e0       	ldi	r20, 0x01	; 1
    518e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    5192:	89 83       	std	Y+1, r24	; 0x01
    5194:	02 c0       	rjmp	.+4      	; 0x519a <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5196:	82 e0       	ldi	r24, 0x02	; 2
    5198:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    519a:	89 81       	ldd	r24, Y+1	; 0x01
}
    519c:	0f 90       	pop	r0
    519e:	0f 90       	pop	r0
    51a0:	cf 91       	pop	r28
    51a2:	df 91       	pop	r29
    51a4:	08 95       	ret

000051a6 <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    51a6:	df 93       	push	r29
    51a8:	cf 93       	push	r28
    51aa:	00 d0       	rcall	.+0      	; 0x51ac <Buzzer_enu_TuronOffBuzzer+0x6>
    51ac:	cd b7       	in	r28, 0x3d	; 61
    51ae:	de b7       	in	r29, 0x3e	; 62
    51b0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    51b2:	81 e0       	ldi	r24, 0x01	; 1
    51b4:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    51b6:	90 91 90 01 	lds	r25, 0x0190
    51ba:	8a 81       	ldd	r24, Y+2	; 0x02
    51bc:	89 17       	cp	r24, r25
    51be:	c8 f4       	brcc	.+50     	; 0x51f2 <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    51c0:	8a 81       	ldd	r24, Y+2	; 0x02
    51c2:	88 2f       	mov	r24, r24
    51c4:	90 e0       	ldi	r25, 0x00	; 0
    51c6:	88 0f       	add	r24, r24
    51c8:	99 1f       	adc	r25, r25
    51ca:	fc 01       	movw	r30, r24
    51cc:	ef 56       	subi	r30, 0x6F	; 111
    51ce:	fe 4f       	sbci	r31, 0xFE	; 254
    51d0:	20 81       	ld	r18, Z
    51d2:	8a 81       	ldd	r24, Y+2	; 0x02
    51d4:	88 2f       	mov	r24, r24
    51d6:	90 e0       	ldi	r25, 0x00	; 0
    51d8:	88 0f       	add	r24, r24
    51da:	99 1f       	adc	r25, r25
    51dc:	fc 01       	movw	r30, r24
    51de:	ee 56       	subi	r30, 0x6E	; 110
    51e0:	fe 4f       	sbci	r31, 0xFE	; 254
    51e2:	90 81       	ld	r25, Z
    51e4:	82 2f       	mov	r24, r18
    51e6:	69 2f       	mov	r22, r25
    51e8:	40 e0       	ldi	r20, 0x00	; 0
    51ea:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    51ee:	89 83       	std	Y+1, r24	; 0x01
    51f0:	02 c0       	rjmp	.+4      	; 0x51f6 <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    51f2:	82 e0       	ldi	r24, 0x02	; 2
    51f4:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    51f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    51f8:	0f 90       	pop	r0
    51fa:	0f 90       	pop	r0
    51fc:	cf 91       	pop	r28
    51fe:	df 91       	pop	r29
    5200:	08 95       	ret

00005202 <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    5202:	df 93       	push	r29
    5204:	cf 93       	push	r28
    5206:	00 d0       	rcall	.+0      	; 0x5208 <Buzzer_enu_TurnOnAllBuzzers+0x6>
    5208:	cd b7       	in	r28, 0x3d	; 61
    520a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    5210:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5212:	19 82       	std	Y+1, r1	; 0x01
    5214:	1a c0       	rjmp	.+52     	; 0x524a <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    5216:	89 81       	ldd	r24, Y+1	; 0x01
    5218:	88 2f       	mov	r24, r24
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	88 0f       	add	r24, r24
    521e:	99 1f       	adc	r25, r25
    5220:	fc 01       	movw	r30, r24
    5222:	ef 56       	subi	r30, 0x6F	; 111
    5224:	fe 4f       	sbci	r31, 0xFE	; 254
    5226:	20 81       	ld	r18, Z
    5228:	89 81       	ldd	r24, Y+1	; 0x01
    522a:	88 2f       	mov	r24, r24
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	88 0f       	add	r24, r24
    5230:	99 1f       	adc	r25, r25
    5232:	fc 01       	movw	r30, r24
    5234:	ee 56       	subi	r30, 0x6E	; 110
    5236:	fe 4f       	sbci	r31, 0xFE	; 254
    5238:	90 81       	ld	r25, Z
    523a:	82 2f       	mov	r24, r18
    523c:	69 2f       	mov	r22, r25
    523e:	41 e0       	ldi	r20, 0x01	; 1
    5240:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5244:	89 81       	ldd	r24, Y+1	; 0x01
    5246:	8f 5f       	subi	r24, 0xFF	; 255
    5248:	89 83       	std	Y+1, r24	; 0x01
    524a:	90 91 90 01 	lds	r25, 0x0190
    524e:	89 81       	ldd	r24, Y+1	; 0x01
    5250:	89 17       	cp	r24, r25
    5252:	08 f3       	brcs	.-62     	; 0x5216 <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5254:	82 e0       	ldi	r24, 0x02	; 2
    5256:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    5258:	8a 81       	ldd	r24, Y+2	; 0x02
}
    525a:	0f 90       	pop	r0
    525c:	0f 90       	pop	r0
    525e:	cf 91       	pop	r28
    5260:	df 91       	pop	r29
    5262:	08 95       	ret

00005264 <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    5264:	df 93       	push	r29
    5266:	cf 93       	push	r28
    5268:	00 d0       	rcall	.+0      	; 0x526a <Buzzer_enu_TurnOffAllBuzzers+0x6>
    526a:	cd b7       	in	r28, 0x3d	; 61
    526c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    526e:	81 e0       	ldi	r24, 0x01	; 1
    5270:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    5272:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5274:	19 82       	std	Y+1, r1	; 0x01
    5276:	1a c0       	rjmp	.+52     	; 0x52ac <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    5278:	89 81       	ldd	r24, Y+1	; 0x01
    527a:	88 2f       	mov	r24, r24
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	88 0f       	add	r24, r24
    5280:	99 1f       	adc	r25, r25
    5282:	fc 01       	movw	r30, r24
    5284:	ef 56       	subi	r30, 0x6F	; 111
    5286:	fe 4f       	sbci	r31, 0xFE	; 254
    5288:	20 81       	ld	r18, Z
    528a:	89 81       	ldd	r24, Y+1	; 0x01
    528c:	88 2f       	mov	r24, r24
    528e:	90 e0       	ldi	r25, 0x00	; 0
    5290:	88 0f       	add	r24, r24
    5292:	99 1f       	adc	r25, r25
    5294:	fc 01       	movw	r30, r24
    5296:	ee 56       	subi	r30, 0x6E	; 110
    5298:	fe 4f       	sbci	r31, 0xFE	; 254
    529a:	90 81       	ld	r25, Z
    529c:	82 2f       	mov	r24, r18
    529e:	69 2f       	mov	r22, r25
    52a0:	40 e0       	ldi	r20, 0x00	; 0
    52a2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    52a6:	89 81       	ldd	r24, Y+1	; 0x01
    52a8:	8f 5f       	subi	r24, 0xFF	; 255
    52aa:	89 83       	std	Y+1, r24	; 0x01
    52ac:	90 91 90 01 	lds	r25, 0x0190
    52b0:	89 81       	ldd	r24, Y+1	; 0x01
    52b2:	89 17       	cp	r24, r25
    52b4:	08 f3       	brcs	.-62     	; 0x5278 <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    52b6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    52b8:	0f 90       	pop	r0
    52ba:	0f 90       	pop	r0
    52bc:	cf 91       	pop	r28
    52be:	df 91       	pop	r29
    52c0:	08 95       	ret

000052c2 <main>:




int main()
{
    52c2:	0f 93       	push	r16
    52c4:	1f 93       	push	r17
    52c6:	df 93       	push	r29
    52c8:	cf 93       	push	r28
    52ca:	00 d0       	rcall	.+0      	; 0x52cc <main+0xa>
    52cc:	cd b7       	in	r28, 0x3d	; 61
    52ce:	de b7       	in	r29, 0x3e	; 62
	//Configuring OC0
	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B, DIO_PIN_3, DIO_PIN_WRITE);
    52d0:	81 e0       	ldi	r24, 0x01	; 1
    52d2:	63 e0       	ldi	r22, 0x03	; 3
    52d4:	41 e0       	ldi	r20, 0x01	; 1
    52d6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
	DIO_enu_SetPinValue(DIO_PIN_GROUP_B, DIO_PIN_3, DIO_LOW);
    52da:	81 e0       	ldi	r24, 0x01	; 1
    52dc:	63 e0       	ldi	r22, 0x03	; 3
    52de:	40 e0       	ldi	r20, 0x00	; 0
    52e0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B, DIO_PIN_5, DIO_PIN_WRITE);
    52e4:	81 e0       	ldi	r24, 0x01	; 1
    52e6:	65 e0       	ldi	r22, 0x05	; 5
    52e8:	41 e0       	ldi	r20, 0x01	; 1
    52ea:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
	DIO_enu_SetPinValue(DIO_PIN_GROUP_B, DIO_PIN_5, DIO_LOW);
    52ee:	81 e0       	ldi	r24, 0x01	; 1
    52f0:	65 e0       	ldi	r22, 0x05	; 5
    52f2:	40 e0       	ldi	r20, 0x00	; 0
    52f4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B, DIO_PIN_6, DIO_PIN_WRITE);
    52f8:	81 e0       	ldi	r24, 0x01	; 1
    52fa:	66 e0       	ldi	r22, 0x06	; 6
    52fc:	41 e0       	ldi	r20, 0x01	; 1
    52fe:	0e 94 5d 13 	call	0x26ba	; 0x26ba <DIO_enu_SetPinDiretion>
	DIO_enu_SetPinValue(DIO_PIN_GROUP_B, DIO_PIN_6, DIO_LOW);
    5302:	81 e0       	ldi	r24, 0x01	; 1
    5304:	66 e0       	ldi	r22, 0x06	; 6
    5306:	40 e0       	ldi	r20, 0x00	; 0
    5308:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
	
	
	//Initializing Timer
	u8 Error = Timer_enu_Initialization();
    530c:	0e 94 cb 06 	call	0xd96	; 0xd96 <Timer_enu_Initialization>
    5310:	8a 83       	std	Y+2, r24	; 0x02
	u8 Error2 = Timer_enu_SetDutyCycleForPWM(TIMER_0, TIMER_FAST_PWM, TIMER_FAST_PWM_NON_INVERTING,0.1);
    5312:	80 e0       	ldi	r24, 0x00	; 0
    5314:	63 e0       	ldi	r22, 0x03	; 3
    5316:	44 e0       	ldi	r20, 0x04	; 4
    5318:	0d ec       	ldi	r16, 0xCD	; 205
    531a:	1c ec       	ldi	r17, 0xCC	; 204
    531c:	2c ec       	ldi	r18, 0xCC	; 204
    531e:	3d e3       	ldi	r19, 0x3D	; 61
    5320:	0e 94 68 08 	call	0x10d0	; 0x10d0 <Timer_enu_SetDutyCycleForPWM>
    5324:	89 83       	std	Y+1, r24	; 0x01


	
	while (1)
	{
		if(Error == ES_OK)
    5326:	8a 81       	ldd	r24, Y+2	; 0x02
    5328:	88 23       	and	r24, r24
    532a:	29 f4       	brne	.+10     	; 0x5336 <main+0x74>
		{
			DIO_enu_SetPinValue(DIO_PIN_GROUP_B, DIO_PIN_5, DIO_HIGH);
    532c:	81 e0       	ldi	r24, 0x01	; 1
    532e:	65 e0       	ldi	r22, 0x05	; 5
    5330:	41 e0       	ldi	r20, 0x01	; 1
    5332:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>

		}
		if(Error2 == ES_OK)
    5336:	89 81       	ldd	r24, Y+1	; 0x01
    5338:	88 23       	and	r24, r24
    533a:	a9 f7       	brne	.-22     	; 0x5326 <main+0x64>
		{
			DIO_enu_SetPinValue(DIO_PIN_GROUP_B, DIO_PIN_6, DIO_HIGH);
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	66 e0       	ldi	r22, 0x06	; 6
    5340:	41 e0       	ldi	r20, 0x01	; 1
    5342:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enu_SetPinValue>
    5346:	ef cf       	rjmp	.-34     	; 0x5326 <main+0x64>

00005348 <__mulsi3>:
    5348:	62 9f       	mul	r22, r18
    534a:	d0 01       	movw	r26, r0
    534c:	73 9f       	mul	r23, r19
    534e:	f0 01       	movw	r30, r0
    5350:	82 9f       	mul	r24, r18
    5352:	e0 0d       	add	r30, r0
    5354:	f1 1d       	adc	r31, r1
    5356:	64 9f       	mul	r22, r20
    5358:	e0 0d       	add	r30, r0
    535a:	f1 1d       	adc	r31, r1
    535c:	92 9f       	mul	r25, r18
    535e:	f0 0d       	add	r31, r0
    5360:	83 9f       	mul	r24, r19
    5362:	f0 0d       	add	r31, r0
    5364:	74 9f       	mul	r23, r20
    5366:	f0 0d       	add	r31, r0
    5368:	65 9f       	mul	r22, r21
    536a:	f0 0d       	add	r31, r0
    536c:	99 27       	eor	r25, r25
    536e:	72 9f       	mul	r23, r18
    5370:	b0 0d       	add	r27, r0
    5372:	e1 1d       	adc	r30, r1
    5374:	f9 1f       	adc	r31, r25
    5376:	63 9f       	mul	r22, r19
    5378:	b0 0d       	add	r27, r0
    537a:	e1 1d       	adc	r30, r1
    537c:	f9 1f       	adc	r31, r25
    537e:	bd 01       	movw	r22, r26
    5380:	cf 01       	movw	r24, r30
    5382:	11 24       	eor	r1, r1
    5384:	08 95       	ret

00005386 <__udivmodsi4>:
    5386:	a1 e2       	ldi	r26, 0x21	; 33
    5388:	1a 2e       	mov	r1, r26
    538a:	aa 1b       	sub	r26, r26
    538c:	bb 1b       	sub	r27, r27
    538e:	fd 01       	movw	r30, r26
    5390:	0d c0       	rjmp	.+26     	; 0x53ac <__udivmodsi4_ep>

00005392 <__udivmodsi4_loop>:
    5392:	aa 1f       	adc	r26, r26
    5394:	bb 1f       	adc	r27, r27
    5396:	ee 1f       	adc	r30, r30
    5398:	ff 1f       	adc	r31, r31
    539a:	a2 17       	cp	r26, r18
    539c:	b3 07       	cpc	r27, r19
    539e:	e4 07       	cpc	r30, r20
    53a0:	f5 07       	cpc	r31, r21
    53a2:	20 f0       	brcs	.+8      	; 0x53ac <__udivmodsi4_ep>
    53a4:	a2 1b       	sub	r26, r18
    53a6:	b3 0b       	sbc	r27, r19
    53a8:	e4 0b       	sbc	r30, r20
    53aa:	f5 0b       	sbc	r31, r21

000053ac <__udivmodsi4_ep>:
    53ac:	66 1f       	adc	r22, r22
    53ae:	77 1f       	adc	r23, r23
    53b0:	88 1f       	adc	r24, r24
    53b2:	99 1f       	adc	r25, r25
    53b4:	1a 94       	dec	r1
    53b6:	69 f7       	brne	.-38     	; 0x5392 <__udivmodsi4_loop>
    53b8:	60 95       	com	r22
    53ba:	70 95       	com	r23
    53bc:	80 95       	com	r24
    53be:	90 95       	com	r25
    53c0:	9b 01       	movw	r18, r22
    53c2:	ac 01       	movw	r20, r24
    53c4:	bd 01       	movw	r22, r26
    53c6:	cf 01       	movw	r24, r30
    53c8:	08 95       	ret

000053ca <__divmodsi4>:
    53ca:	97 fb       	bst	r25, 7
    53cc:	09 2e       	mov	r0, r25
    53ce:	05 26       	eor	r0, r21
    53d0:	0e d0       	rcall	.+28     	; 0x53ee <__divmodsi4_neg1>
    53d2:	57 fd       	sbrc	r21, 7
    53d4:	04 d0       	rcall	.+8      	; 0x53de <__divmodsi4_neg2>
    53d6:	d7 df       	rcall	.-82     	; 0x5386 <__udivmodsi4>
    53d8:	0a d0       	rcall	.+20     	; 0x53ee <__divmodsi4_neg1>
    53da:	00 1c       	adc	r0, r0
    53dc:	38 f4       	brcc	.+14     	; 0x53ec <__divmodsi4_exit>

000053de <__divmodsi4_neg2>:
    53de:	50 95       	com	r21
    53e0:	40 95       	com	r20
    53e2:	30 95       	com	r19
    53e4:	21 95       	neg	r18
    53e6:	3f 4f       	sbci	r19, 0xFF	; 255
    53e8:	4f 4f       	sbci	r20, 0xFF	; 255
    53ea:	5f 4f       	sbci	r21, 0xFF	; 255

000053ec <__divmodsi4_exit>:
    53ec:	08 95       	ret

000053ee <__divmodsi4_neg1>:
    53ee:	f6 f7       	brtc	.-4      	; 0x53ec <__divmodsi4_exit>
    53f0:	90 95       	com	r25
    53f2:	80 95       	com	r24
    53f4:	70 95       	com	r23
    53f6:	61 95       	neg	r22
    53f8:	7f 4f       	sbci	r23, 0xFF	; 255
    53fa:	8f 4f       	sbci	r24, 0xFF	; 255
    53fc:	9f 4f       	sbci	r25, 0xFF	; 255
    53fe:	08 95       	ret

00005400 <__prologue_saves__>:
    5400:	2f 92       	push	r2
    5402:	3f 92       	push	r3
    5404:	4f 92       	push	r4
    5406:	5f 92       	push	r5
    5408:	6f 92       	push	r6
    540a:	7f 92       	push	r7
    540c:	8f 92       	push	r8
    540e:	9f 92       	push	r9
    5410:	af 92       	push	r10
    5412:	bf 92       	push	r11
    5414:	cf 92       	push	r12
    5416:	df 92       	push	r13
    5418:	ef 92       	push	r14
    541a:	ff 92       	push	r15
    541c:	0f 93       	push	r16
    541e:	1f 93       	push	r17
    5420:	cf 93       	push	r28
    5422:	df 93       	push	r29
    5424:	cd b7       	in	r28, 0x3d	; 61
    5426:	de b7       	in	r29, 0x3e	; 62
    5428:	ca 1b       	sub	r28, r26
    542a:	db 0b       	sbc	r29, r27
    542c:	0f b6       	in	r0, 0x3f	; 63
    542e:	f8 94       	cli
    5430:	de bf       	out	0x3e, r29	; 62
    5432:	0f be       	out	0x3f, r0	; 63
    5434:	cd bf       	out	0x3d, r28	; 61
    5436:	09 94       	ijmp

00005438 <__epilogue_restores__>:
    5438:	2a 88       	ldd	r2, Y+18	; 0x12
    543a:	39 88       	ldd	r3, Y+17	; 0x11
    543c:	48 88       	ldd	r4, Y+16	; 0x10
    543e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5440:	6e 84       	ldd	r6, Y+14	; 0x0e
    5442:	7d 84       	ldd	r7, Y+13	; 0x0d
    5444:	8c 84       	ldd	r8, Y+12	; 0x0c
    5446:	9b 84       	ldd	r9, Y+11	; 0x0b
    5448:	aa 84       	ldd	r10, Y+10	; 0x0a
    544a:	b9 84       	ldd	r11, Y+9	; 0x09
    544c:	c8 84       	ldd	r12, Y+8	; 0x08
    544e:	df 80       	ldd	r13, Y+7	; 0x07
    5450:	ee 80       	ldd	r14, Y+6	; 0x06
    5452:	fd 80       	ldd	r15, Y+5	; 0x05
    5454:	0c 81       	ldd	r16, Y+4	; 0x04
    5456:	1b 81       	ldd	r17, Y+3	; 0x03
    5458:	aa 81       	ldd	r26, Y+2	; 0x02
    545a:	b9 81       	ldd	r27, Y+1	; 0x01
    545c:	ce 0f       	add	r28, r30
    545e:	d1 1d       	adc	r29, r1
    5460:	0f b6       	in	r0, 0x3f	; 63
    5462:	f8 94       	cli
    5464:	de bf       	out	0x3e, r29	; 62
    5466:	0f be       	out	0x3f, r0	; 63
    5468:	cd bf       	out	0x3d, r28	; 61
    546a:	ed 01       	movw	r28, r26
    546c:	08 95       	ret

0000546e <_exit>:
    546e:	f8 94       	cli

00005470 <__stop_program>:
    5470:	ff cf       	rjmp	.-2      	; 0x5470 <__stop_program>
